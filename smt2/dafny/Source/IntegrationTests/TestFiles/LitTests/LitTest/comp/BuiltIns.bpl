// dafny 4.9.2.0
// Command Line Options: /deprecation:0 /compile:0 /timeLimit:10 /print:/home/runner/work/smt-logs/smt-logs/dafny/../smt2/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/comp/BuiltIns.bpl /vcsCores:1 /proverLog:/home/runner/work/smt-logs/smt-logs/dafny/../smt2/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/comp/BuiltIns-@PROC@.smt2 /normalizeNames:0 /emitDebugInformation:1 /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/comp/BuiltIns.dfy

const $$Language$Dafny: bool
uses {
axiom $$Language$Dafny;
}

type Ty;

type Bv0 = int;

const unique TBool: Ty
uses {
axiom Tag(TBool) == TagBool;
}

const unique TChar: Ty
uses {
axiom Tag(TChar) == TagChar;
}

const unique TInt: Ty
uses {
axiom Tag(TInt) == TagInt;
}

const unique TReal: Ty
uses {
axiom Tag(TReal) == TagReal;
}

const unique TORDINAL: Ty
uses {
axiom Tag(TORDINAL) == TagORDINAL;
}

revealed function TBitvector(int) : Ty;

axiom (forall w: int :: { TBitvector(w) } Inv0_TBitvector(TBitvector(w)) == w);

revealed function TSet(Ty) : Ty;

axiom (forall t: Ty :: { TSet(t) } Inv0_TSet(TSet(t)) == t);

axiom (forall t: Ty :: { TSet(t) } Tag(TSet(t)) == TagSet);

revealed function TISet(Ty) : Ty;

axiom (forall t: Ty :: { TISet(t) } Inv0_TISet(TISet(t)) == t);

axiom (forall t: Ty :: { TISet(t) } Tag(TISet(t)) == TagISet);

revealed function TMultiSet(Ty) : Ty;

axiom (forall t: Ty :: { TMultiSet(t) } Inv0_TMultiSet(TMultiSet(t)) == t);

axiom (forall t: Ty :: { TMultiSet(t) } Tag(TMultiSet(t)) == TagMultiSet);

revealed function TSeq(Ty) : Ty;

axiom (forall t: Ty :: { TSeq(t) } Inv0_TSeq(TSeq(t)) == t);

axiom (forall t: Ty :: { TSeq(t) } Tag(TSeq(t)) == TagSeq);

revealed function TMap(Ty, Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv0_TMap(TMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Inv1_TMap(TMap(t, u)) == u);

axiom (forall t: Ty, u: Ty :: { TMap(t, u) } Tag(TMap(t, u)) == TagMap);

revealed function TIMap(Ty, Ty) : Ty;

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv0_TIMap(TIMap(t, u)) == t);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Inv1_TIMap(TIMap(t, u)) == u);

axiom (forall t: Ty, u: Ty :: { TIMap(t, u) } Tag(TIMap(t, u)) == TagIMap);

revealed function Inv0_TBitvector(Ty) : int;

revealed function Inv0_TSet(Ty) : Ty;

revealed function Inv0_TISet(Ty) : Ty;

revealed function Inv0_TSeq(Ty) : Ty;

revealed function Inv0_TMultiSet(Ty) : Ty;

revealed function Inv0_TMap(Ty) : Ty;

revealed function Inv1_TMap(Ty) : Ty;

revealed function Inv0_TIMap(Ty) : Ty;

revealed function Inv1_TIMap(Ty) : Ty;

type TyTag;

revealed function Tag(Ty) : TyTag;

const unique TagBool: TyTag;

const unique TagChar: TyTag;

const unique TagInt: TyTag;

const unique TagReal: TyTag;

const unique TagORDINAL: TyTag;

const unique TagSet: TyTag;

const unique TagISet: TyTag;

const unique TagMultiSet: TyTag;

const unique TagSeq: TyTag;

const unique TagMap: TyTag;

const unique TagIMap: TyTag;

const unique TagClass: TyTag;

type TyTagFamily;

revealed function TagFamily(Ty) : TyTagFamily;

revealed function {:identity} Lit<T>(x: T) : T
uses {
axiom (forall<T> x: T :: {:identity} { Lit(x): T } Lit(x): T == x);
}

axiom (forall<T> x: T :: { $Box(Lit(x)) } $Box(Lit(x)) == Lit($Box(x)));

revealed function {:identity} LitInt(x: int) : int
uses {
axiom (forall x: int :: {:identity} { LitInt(x): int } LitInt(x): int == x);
}

axiom (forall x: int :: { $Box(LitInt(x)) } $Box(LitInt(x)) == Lit($Box(x)));

revealed function {:identity} LitReal(x: real) : real
uses {
axiom (forall x: real :: {:identity} { LitReal(x): real } LitReal(x): real == x);
}

axiom (forall x: real :: { $Box(LitReal(x)) } $Box(LitReal(x)) == Lit($Box(x)));

revealed function {:inline} char#IsChar(n: int) : bool
{
  (0 <= n && n < 55296) || (57344 <= n && n < 1114112)
}

type char;

revealed function char#FromInt(int) : char;

axiom (forall n: int :: 
  { char#FromInt(n) } 
  char#IsChar(n) ==> char#ToInt(char#FromInt(n)) == n);

revealed function char#ToInt(char) : int;

axiom (forall ch: char :: 
  { char#ToInt(ch) } 
  char#FromInt(char#ToInt(ch)) == ch && char#IsChar(char#ToInt(ch)));

revealed function char#Plus(char, char) : char;

axiom (forall a: char, b: char :: 
  { char#Plus(a, b) } 
  char#Plus(a, b) == char#FromInt(char#ToInt(a) + char#ToInt(b)));

revealed function char#Minus(char, char) : char;

axiom (forall a: char, b: char :: 
  { char#Minus(a, b) } 
  char#Minus(a, b) == char#FromInt(char#ToInt(a) - char#ToInt(b)));

type ref;

const null: ref;

type Box;

const $ArbitraryBoxValue: Box;

revealed function $Box<T>(T) : Box;

revealed function $Unbox<T>(Box) : T;

axiom (forall<T> x: T :: { $Box(x) } $Unbox($Box(x)) == x);

axiom (forall<T> x: Box :: { $Unbox(x): T } $Box($Unbox(x): T) == x);

revealed function $IsBox(Box, Ty) : bool;

revealed function $IsAllocBox(Box, Ty, Heap) : bool;

axiom (forall bx: Box :: 
  { $IsBox(bx, TInt) } 
  $IsBox(bx, TInt) ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, TInt));

axiom (forall bx: Box :: 
  { $IsBox(bx, TReal) } 
  $IsBox(bx, TReal)
     ==> $Box($Unbox(bx): real) == bx && $Is($Unbox(bx): real, TReal));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBool) } 
  $IsBox(bx, TBool)
     ==> $Box($Unbox(bx): bool) == bx && $Is($Unbox(bx): bool, TBool));

axiom (forall bx: Box :: 
  { $IsBox(bx, TChar) } 
  $IsBox(bx, TChar)
     ==> $Box($Unbox(bx): char) == bx && $Is($Unbox(bx): char, TChar));

axiom (forall bx: Box :: 
  { $IsBox(bx, TBitvector(0)) } 
  $IsBox(bx, TBitvector(0))
     ==> $Box($Unbox(bx): Bv0) == bx && $Is($Unbox(bx): Bv0, TBitvector(0)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSet(t)) } 
  $IsBox(bx, TSet(t))
     ==> $Box($Unbox(bx): Set) == bx && $Is($Unbox(bx): Set, TSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TISet(t)) } 
  $IsBox(bx, TISet(t))
     ==> $Box($Unbox(bx): ISet) == bx && $Is($Unbox(bx): ISet, TISet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TMultiSet(t)) } 
  $IsBox(bx, TMultiSet(t))
     ==> $Box($Unbox(bx): MultiSet) == bx && $Is($Unbox(bx): MultiSet, TMultiSet(t)));

axiom (forall bx: Box, t: Ty :: 
  { $IsBox(bx, TSeq(t)) } 
  $IsBox(bx, TSeq(t))
     ==> $Box($Unbox(bx): Seq) == bx && $Is($Unbox(bx): Seq, TSeq(t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TMap(s, t)) } 
  $IsBox(bx, TMap(s, t))
     ==> $Box($Unbox(bx): Map) == bx && $Is($Unbox(bx): Map, TMap(s, t)));

axiom (forall bx: Box, s: Ty, t: Ty :: 
  { $IsBox(bx, TIMap(s, t)) } 
  $IsBox(bx, TIMap(s, t))
     ==> $Box($Unbox(bx): IMap) == bx && $Is($Unbox(bx): IMap, TIMap(s, t)));

axiom (forall<T> v: T, t: Ty :: 
  { $IsBox($Box(v), t) } 
  $IsBox($Box(v), t) <==> $Is(v, t));

axiom (forall<T> v: T, t: Ty, h: Heap :: 
  { $IsAllocBox($Box(v), t, h) } 
  $IsAllocBox($Box(v), t, h) <==> $IsAlloc(v, t, h));

revealed function $Is<T>(T, Ty) : bool;

axiom (forall v: int :: { $Is(v, TInt) } $Is(v, TInt));

axiom (forall v: real :: { $Is(v, TReal) } $Is(v, TReal));

axiom (forall v: bool :: { $Is(v, TBool) } $Is(v, TBool));

axiom (forall v: char :: { $Is(v, TChar) } $Is(v, TChar));

axiom (forall v: ORDINAL :: { $Is(v, TORDINAL) } $Is(v, TORDINAL));

axiom (forall v: Bv0 :: { $Is(v, TBitvector(0)) } $Is(v, TBitvector(0)));

axiom (forall v: Set, t0: Ty :: 
  { $Is(v, TSet(t0)) } 
  $Is(v, TSet(t0))
     <==> (forall bx: Box :: 
      { Set#IsMember(v, bx) } 
      Set#IsMember(v, bx) ==> $IsBox(bx, t0)));

axiom (forall v: ISet, t0: Ty :: 
  { $Is(v, TISet(t0)) } 
  $Is(v, TISet(t0)) <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0))
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(v, bx) } 
      0 < MultiSet#Multiplicity(v, bx) ==> $IsBox(bx, t0)));

axiom (forall v: MultiSet, t0: Ty :: 
  { $Is(v, TMultiSet(t0)) } 
  $Is(v, TMultiSet(t0)) ==> $IsGoodMultiSet(v));

axiom (forall v: Seq, t0: Ty :: 
  { $Is(v, TSeq(t0)) } 
  $Is(v, TSeq(t0))
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsBox(Seq#Index(v, i), t0)));

axiom (forall v: Map, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Set#IsMember(Map#Domain(v), bx) } 
      Set#IsMember(Map#Domain(v), bx)
         ==> $IsBox(Map#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: Map, t0: Ty, t1: Ty :: 
  { $Is(v, TMap(t0, t1)) } 
  $Is(v, TMap(t0, t1))
     ==> $Is(Map#Domain(v), TSet(t0))
       && $Is(Map#Values(v), TSet(t1))
       && $Is(Map#Items(v), TSet(Tclass._System.Tuple2(t0, t1))));

axiom (forall v: IMap, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx] ==> $IsBox(IMap#Elements(v)[bx], t1) && $IsBox(bx, t0)));

axiom (forall v: IMap, t0: Ty, t1: Ty :: 
  { $Is(v, TIMap(t0, t1)) } 
  $Is(v, TIMap(t0, t1))
     ==> $Is(IMap#Domain(v), TISet(t0))
       && $Is(IMap#Values(v), TISet(t1))
       && $Is(IMap#Items(v), TISet(Tclass._System.Tuple2(t0, t1))));

revealed function $IsAlloc<T>(T, Ty, Heap) : bool;

axiom (forall h: Heap, v: int :: { $IsAlloc(v, TInt, h) } $IsAlloc(v, TInt, h));

axiom (forall h: Heap, v: real :: { $IsAlloc(v, TReal, h) } $IsAlloc(v, TReal, h));

axiom (forall h: Heap, v: bool :: { $IsAlloc(v, TBool, h) } $IsAlloc(v, TBool, h));

axiom (forall h: Heap, v: char :: { $IsAlloc(v, TChar, h) } $IsAlloc(v, TChar, h));

axiom (forall h: Heap, v: ORDINAL :: 
  { $IsAlloc(v, TORDINAL, h) } 
  $IsAlloc(v, TORDINAL, h));

axiom (forall v: Bv0, h: Heap :: 
  { $IsAlloc(v, TBitvector(0), h) } 
  $IsAlloc(v, TBitvector(0), h));

axiom (forall v: Set, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSet(t0), h) } 
  $IsAlloc(v, TSet(t0), h)
     <==> (forall bx: Box :: 
      { Set#IsMember(v, bx) } 
      Set#IsMember(v, bx) ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: ISet, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TISet(t0), h) } 
  $IsAlloc(v, TISet(t0), h)
     <==> (forall bx: Box :: { v[bx] } v[bx] ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: MultiSet, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TMultiSet(t0), h) } 
  $IsAlloc(v, TMultiSet(t0), h)
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(v, bx) } 
      0 < MultiSet#Multiplicity(v, bx) ==> $IsAllocBox(bx, t0, h)));

axiom (forall v: Seq, t0: Ty, h: Heap :: 
  { $IsAlloc(v, TSeq(t0), h) } 
  $IsAlloc(v, TSeq(t0), h)
     <==> (forall i: int :: 
      { Seq#Index(v, i) } 
      0 <= i && i < Seq#Length(v) ==> $IsAllocBox(Seq#Index(v, i), t0, h)));

axiom (forall v: Map, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TMap(t0, t1), h) } 
  $IsAlloc(v, TMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { Map#Elements(v)[bx] } { Set#IsMember(Map#Domain(v), bx) } 
      Set#IsMember(Map#Domain(v), bx)
         ==> $IsAllocBox(Map#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

axiom (forall v: IMap, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(v, TIMap(t0, t1), h) } 
  $IsAlloc(v, TIMap(t0, t1), h)
     <==> (forall bx: Box :: 
      { IMap#Elements(v)[bx] } { IMap#Domain(v)[bx] } 
      IMap#Domain(v)[bx]
         ==> $IsAllocBox(IMap#Elements(v)[bx], t1, h) && $IsAllocBox(bx, t0, h)));

revealed function $AlwaysAllocated(Ty) : bool;

axiom (forall ty: Ty :: 
  { $AlwaysAllocated(ty) } 
  $AlwaysAllocated(ty)
     ==> (forall h: Heap, v: Box :: 
      { $IsAllocBox(v, ty, h) } 
      $IsBox(v, ty) ==> $IsAllocBox(v, ty, h)));

revealed function $OlderTag(Heap) : bool;

type ClassName;

const unique class._System.int: ClassName;

const unique class._System.bool: ClassName;

const unique class._System.set: ClassName;

const unique class._System.seq: ClassName;

const unique class._System.multiset: ClassName;

revealed function Tclass._System.object?() : Ty
uses {
// Tclass._System.object? Tag
axiom Tag(Tclass._System.object?()) == Tagclass._System.object?
   && TagFamily(Tclass._System.object?()) == tytagFamily$object;
}

revealed function Tclass._System.Tuple2(Ty, Ty) : Ty;

revealed function dtype(ref) : Ty;

revealed function TypeTuple(a: ClassName, b: ClassName) : ClassName;

revealed function TypeTupleCar(ClassName) : ClassName;

revealed function TypeTupleCdr(ClassName) : ClassName;

axiom (forall a: ClassName, b: ClassName :: 
  { TypeTuple(a, b) } 
  TypeTupleCar(TypeTuple(a, b)) == a && TypeTupleCdr(TypeTuple(a, b)) == b);

type HandleType;

revealed function SetRef_to_SetBox(s: [ref]bool) : Set;

axiom (forall s: [ref]bool, bx: Box :: 
  { Set#IsMember(SetRef_to_SetBox(s), bx) } 
  Set#IsMember(SetRef_to_SetBox(s), bx) == s[$Unbox(bx): ref]);

axiom (forall s: [ref]bool :: 
  { SetRef_to_SetBox(s) } 
  $Is(SetRef_to_SetBox(s), TSet(Tclass._System.object?())));

revealed function Apply1(Ty, Ty, Heap, HandleType, Box) : Box;

type DatatypeType;

type DtCtorId;

revealed function DatatypeCtorId(DatatypeType) : DtCtorId;

revealed function DtRank(DatatypeType) : int;

revealed function BoxRank(Box) : int;

axiom (forall d: DatatypeType :: { BoxRank($Box(d)) } BoxRank($Box(d)) == DtRank(d));

type ORDINAL = Box;

revealed function ORD#IsNat(ORDINAL) : bool;

revealed function ORD#Offset(ORDINAL) : int;

axiom (forall o: ORDINAL :: { ORD#Offset(o) } 0 <= ORD#Offset(o));

revealed function {:inline} ORD#IsLimit(o: ORDINAL) : bool
{
  ORD#Offset(o) == 0
}

revealed function {:inline} ORD#IsSucc(o: ORDINAL) : bool
{
  0 < ORD#Offset(o)
}

revealed function ORD#FromNat(int) : ORDINAL;

axiom (forall n: int :: 
  { ORD#FromNat(n) } 
  0 <= n ==> ORD#IsNat(ORD#FromNat(n)) && ORD#Offset(ORD#FromNat(n)) == n);

axiom (forall o: ORDINAL :: 
  { ORD#Offset(o) } { ORD#IsNat(o) } 
  ORD#IsNat(o) ==> o == ORD#FromNat(ORD#Offset(o)));

revealed function ORD#Less(ORDINAL, ORDINAL) : bool;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Less(o, p) } 
  (ORD#Less(o, p) ==> o != p)
     && (ORD#IsNat(o) && !ORD#IsNat(p) ==> ORD#Less(o, p))
     && (ORD#IsNat(o) && ORD#IsNat(p)
       ==> ORD#Less(o, p) == (ORD#Offset(o) < ORD#Offset(p)))
     && (ORD#Less(o, p) && ORD#IsNat(p) ==> ORD#IsNat(o)));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Less(o, p), ORD#Less(p, o) } 
  ORD#Less(o, p) || o == p || ORD#Less(p, o));

axiom (forall o: ORDINAL, p: ORDINAL, r: ORDINAL :: 
  { ORD#Less(o, p), ORD#Less(p, r) } { ORD#Less(o, p), ORD#Less(o, r) } 
  ORD#Less(o, p) && ORD#Less(p, r) ==> ORD#Less(o, r));

revealed function ORD#LessThanLimit(ORDINAL, ORDINAL) : bool;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#LessThanLimit(o, p) } 
  ORD#LessThanLimit(o, p) == ORD#Less(o, p));

revealed function ORD#Plus(ORDINAL, ORDINAL) : ORDINAL;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (ORD#IsNat(ORD#Plus(o, p)) ==> ORD#IsNat(o) && ORD#IsNat(p))
     && (ORD#IsNat(p)
       ==> ORD#IsNat(ORD#Plus(o, p)) == ORD#IsNat(o)
         && ORD#Offset(ORD#Plus(o, p)) == ORD#Offset(o) + ORD#Offset(p)));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (o == ORD#Plus(o, p) || ORD#Less(o, ORD#Plus(o, p)))
     && (p == ORD#Plus(o, p) || ORD#Less(p, ORD#Plus(o, p))));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Plus(o, p) } 
  (o == ORD#FromNat(0) ==> ORD#Plus(o, p) == p)
     && (p == ORD#FromNat(0) ==> ORD#Plus(o, p) == o));

revealed function ORD#Minus(ORDINAL, ORDINAL) : ORDINAL;

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Minus(o, p) } 
  ORD#IsNat(p) && ORD#Offset(p) <= ORD#Offset(o)
     ==> ORD#IsNat(ORD#Minus(o, p)) == ORD#IsNat(o)
       && ORD#Offset(ORD#Minus(o, p)) == ORD#Offset(o) - ORD#Offset(p));

axiom (forall o: ORDINAL, p: ORDINAL :: 
  { ORD#Minus(o, p) } 
  ORD#IsNat(p) && ORD#Offset(p) <= ORD#Offset(o)
     ==> (p == ORD#FromNat(0) && ORD#Minus(o, p) == o)
       || (p != ORD#FromNat(0) && ORD#Less(ORD#Minus(o, p), o)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Plus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n
     ==> ORD#Plus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
       == ORD#Plus(o, ORD#FromNat(m + n)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Minus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && m + n <= ORD#Offset(o)
     ==> ORD#Minus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
       == ORD#Minus(o, ORD#FromNat(m + n)));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && n <= ORD#Offset(o) + m
     ==> (0 <= m - n
         ==> ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Plus(o, ORD#FromNat(m - n)))
       && (m - n <= 0
         ==> ORD#Minus(ORD#Plus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Minus(o, ORD#FromNat(n - m))));

axiom (forall o: ORDINAL, m: int, n: int :: 
  { ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n)) } 
  0 <= m && 0 <= n && n <= ORD#Offset(o) + m
     ==> (0 <= m - n
         ==> ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Minus(o, ORD#FromNat(m - n)))
       && (m - n <= 0
         ==> ORD#Plus(ORD#Minus(o, ORD#FromNat(m)), ORD#FromNat(n))
           == ORD#Plus(o, ORD#FromNat(n - m))));

const $ModuleContextHeight: int;

const $FunctionContextHeight: int;

type LayerType;

const $LZ: LayerType;

revealed function $LS(LayerType) : LayerType;

revealed function AsFuelBottom(LayerType) : LayerType;

revealed function AtLayer<A>([LayerType]A, LayerType) : A;

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, ly) } 
  AtLayer(f, ly) == f[ly]);

axiom (forall<A> f: [LayerType]A, ly: LayerType :: 
  { AtLayer(f, $LS(ly)) } 
  AtLayer(f, $LS(ly)) == AtLayer(f, ly));

type Field;

revealed function FDim(Field) : int
uses {
axiom FDim(alloc) == 0;
}

revealed function IndexField(int) : Field;

axiom (forall i: int :: { IndexField(i) } FDim(IndexField(i)) == 1);

revealed function IndexField_Inverse(Field) : int;

axiom (forall i: int :: { IndexField(i) } IndexField_Inverse(IndexField(i)) == i);

revealed function MultiIndexField(Field, int) : Field;

axiom (forall f: Field, i: int :: 
  { MultiIndexField(f, i) } 
  FDim(MultiIndexField(f, i)) == FDim(f) + 1);

revealed function MultiIndexField_Inverse0(Field) : Field;

revealed function MultiIndexField_Inverse1(Field) : int;

axiom (forall f: Field, i: int :: 
  { MultiIndexField(f, i) } 
  MultiIndexField_Inverse0(MultiIndexField(f, i)) == f
     && MultiIndexField_Inverse1(MultiIndexField(f, i)) == i);

revealed function DeclType(Field) : ClassName;

type NameFamily;

revealed function DeclName(Field) : NameFamily
uses {
axiom DeclName(alloc) == allocName;
}

revealed function FieldOfDecl(ClassName, NameFamily) : Field;

axiom (forall cl: ClassName, nm: NameFamily :: 
  { FieldOfDecl(cl, nm): Field } 
  DeclType(FieldOfDecl(cl, nm): Field) == cl
     && DeclName(FieldOfDecl(cl, nm): Field) == nm);

revealed function $IsGhostField(Field) : bool
uses {
axiom $IsGhostField(alloc);
}

axiom (forall h: Heap, k: Heap :: 
  { $HeapSuccGhost(h, k) } 
  $HeapSuccGhost(h, k)
     ==> $HeapSucc(h, k)
       && (forall o: ref, f: Field :: 
        { read(k, o, f) } 
        !$IsGhostField(f) ==> read(h, o, f) == read(k, o, f)));

axiom (forall<T> h: Heap, k: Heap, v: T, t: Ty :: 
  { $HeapSucc(h, k), $IsAlloc(v, t, h) } 
  $HeapSucc(h, k) ==> $IsAlloc(v, t, h) ==> $IsAlloc(v, t, k));

axiom (forall h: Heap, k: Heap, bx: Box, t: Ty :: 
  { $HeapSucc(h, k), $IsAllocBox(bx, t, h) } 
  $HeapSucc(h, k) ==> $IsAllocBox(bx, t, h) ==> $IsAllocBox(bx, t, k));

const unique alloc: Field;

const unique allocName: NameFamily;

revealed function _System.array.Length(a: ref) : int;

axiom (forall o: ref :: { _System.array.Length(o) } 0 <= _System.array.Length(o));

revealed function Int(x: real) : int
uses {
axiom (forall x: real :: { Int(x): int } Int(x): int == int(x));
}

revealed function Real(x: int) : real
uses {
axiom (forall x: int :: { Real(x): real } Real(x): real == real(x));
}

axiom (forall i: int :: { Int(Real(i)) } Int(Real(i)) == i);

revealed function {:inline} _System.real.Floor(x: real) : int
{
  Int(x)
}

type Heap = [ref][Field]Box;

revealed function {:inline} read(H: Heap, r: ref, f: Field) : Box
{
  H[r][f]
}

revealed function {:inline} update(H: Heap, r: ref, f: Field, v: Box) : Heap
{
  H[r := H[r][f := v]]
}

revealed function $IsGoodHeap(Heap) : bool;

revealed function $IsHeapAnchor(Heap) : bool;

var $Heap: Heap where $IsGoodHeap($Heap) && $IsHeapAnchor($Heap);

const $OneHeap: Heap
uses {
axiom $IsGoodHeap($OneHeap);
}

revealed function $HeapSucc(Heap, Heap) : bool;

axiom (forall h: Heap, r: ref, f: Field, x: Box :: 
  { update(h, r, f, x) } 
  $IsGoodHeap(update(h, r, f, x)) ==> $HeapSucc(h, update(h, r, f, x)));

axiom (forall a: Heap, b: Heap, c: Heap :: 
  { $HeapSucc(a, b), $HeapSucc(b, c) } 
  a != c ==> $HeapSucc(a, b) && $HeapSucc(b, c) ==> $HeapSucc(a, c));

axiom (forall h: Heap, k: Heap :: 
  { $HeapSucc(h, k) } 
  $HeapSucc(h, k)
     ==> (forall o: ref :: 
      { read(k, o, alloc) } 
      $Unbox(read(h, o, alloc)) ==> $Unbox(read(k, o, alloc))));

revealed function $HeapSuccGhost(Heap, Heap) : bool;

procedure $YieldHavoc(this: ref, rds: Set, nw: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> 
      $o == this || Set#IsMember(rds, $Box($o)) || Set#IsMember(nw, $Box($o))
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc0(this: ref, rds: Set, modi: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> 
      Set#IsMember(rds, $Box($o)) && !Set#IsMember(modi, $Box($o)) && $o != this
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterHavoc1(this: ref, modi: Set, nw: Set);
  modifies $Heap;
  ensures (forall $o: ref, $f: Field :: 
    { read($Heap, $o, $f) } 
    $o != null && $Unbox(read(old($Heap), $o, alloc))
       ==> read($Heap, $o, $f) == read(old($Heap), $o, $f)
         || $o == this
         || Set#IsMember(modi, $Box($o))
         || Set#IsMember(nw, $Box($o)));
  ensures $HeapSucc(old($Heap), $Heap);



procedure $IterCollectNewObjects(prevHeap: Heap, newHeap: Heap, this: ref, NW: Field) returns (s: Set);
  ensures (forall bx: Box :: 
    { Set#IsMember(s, bx) } 
    Set#IsMember(s, bx)
       <==> Set#IsMember($Unbox(read(newHeap, this, NW)): Set, bx)
         || (
          $Unbox(bx) != null
           && !$Unbox(read(prevHeap, $Unbox(bx): ref, alloc))
           && $Unbox(read(newHeap, $Unbox(bx): ref, alloc))));



type Set;

revealed function Set#Card(s: Set) : int;

axiom (forall s: Set :: { Set#Card(s) } 0 <= Set#Card(s));

revealed function Set#Empty() : Set;

revealed function Set#IsMember(s: Set, o: Box) : bool;

axiom (forall o: Box :: 
  { Set#IsMember(Set#Empty(), o) } 
  !Set#IsMember(Set#Empty(), o));

axiom (forall s: Set :: 
  { Set#Card(s) } 
  (Set#Card(s) == 0 <==> s == Set#Empty())
     && (Set#Card(s) != 0
       ==> (exists x: Box :: { Set#IsMember(s, x) } Set#IsMember(s, x))));

revealed function Set#UnionOne(s: Set, o: Box) : Set;

axiom (forall a: Set, x: Box, o: Box :: 
  { Set#IsMember(Set#UnionOne(a, x), o) } 
  Set#IsMember(Set#UnionOne(a, x), o) <==> o == x || Set#IsMember(a, o));

axiom (forall a: Set, x: Box :: 
  { Set#UnionOne(a, x) } 
  Set#IsMember(Set#UnionOne(a, x), x));

axiom (forall a: Set, x: Box, y: Box :: 
  { Set#UnionOne(a, x), Set#IsMember(a, y) } 
  Set#IsMember(a, y) ==> Set#IsMember(Set#UnionOne(a, x), y));

axiom (forall a: Set, x: Box :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  Set#IsMember(a, x) ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a));

axiom (forall a: Set, x: Box :: 
  { Set#Card(Set#UnionOne(a, x)) } 
  !Set#IsMember(a, x) ==> Set#Card(Set#UnionOne(a, x)) == Set#Card(a) + 1);

revealed function Set#Union(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Union(a, b), o) } 
  Set#IsMember(Set#Union(a, b), o) <==> Set#IsMember(a, o) || Set#IsMember(b, o));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Union(a, b), Set#IsMember(a, y) } 
  Set#IsMember(a, y) ==> Set#IsMember(Set#Union(a, b), y));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Union(a, b), Set#IsMember(b, y) } 
  Set#IsMember(b, y) ==> Set#IsMember(Set#Union(a, b), y));

axiom (forall a: Set, b: Set :: 
  { Set#Union(a, b) } 
  Set#Disjoint(a, b)
     ==> Set#Difference(Set#Union(a, b), a) == b
       && Set#Difference(Set#Union(a, b), b) == a);

revealed function Set#Intersection(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Intersection(a, b), o) } 
  Set#IsMember(Set#Intersection(a, b), o)
     <==> Set#IsMember(a, o) && Set#IsMember(b, o));

axiom (forall a: Set, b: Set :: 
  { Set#Union(Set#Union(a, b), b) } 
  Set#Union(Set#Union(a, b), b) == Set#Union(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Union(a, Set#Union(a, b)) } 
  Set#Union(a, Set#Union(a, b)) == Set#Union(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Intersection(Set#Intersection(a, b), b) } 
  Set#Intersection(Set#Intersection(a, b), b) == Set#Intersection(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Intersection(a, Set#Intersection(a, b)) } 
  Set#Intersection(a, Set#Intersection(a, b)) == Set#Intersection(a, b));

axiom (forall a: Set, b: Set :: 
  { Set#Card(Set#Union(a, b)) } { Set#Card(Set#Intersection(a, b)) } 
  Set#Card(Set#Union(a, b)) + Set#Card(Set#Intersection(a, b))
     == Set#Card(a) + Set#Card(b));

revealed function Set#Difference(a: Set, b: Set) : Set;

axiom (forall a: Set, b: Set, o: Box :: 
  { Set#IsMember(Set#Difference(a, b), o) } 
  Set#IsMember(Set#Difference(a, b), o)
     <==> Set#IsMember(a, o) && !Set#IsMember(b, o));

axiom (forall a: Set, b: Set, y: Box :: 
  { Set#Difference(a, b), Set#IsMember(b, y) } 
  Set#IsMember(b, y) ==> !Set#IsMember(Set#Difference(a, b), y));

axiom (forall a: Set, b: Set :: 
  { Set#Card(Set#Difference(a, b)) } 
  Set#Card(Set#Difference(a, b))
         + Set#Card(Set#Difference(b, a))
         + Set#Card(Set#Intersection(a, b))
       == Set#Card(Set#Union(a, b))
     && Set#Card(Set#Difference(a, b)) == Set#Card(a) - Set#Card(Set#Intersection(a, b)));

revealed function Set#Subset(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Subset(a, b) } 
  Set#Subset(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      Set#IsMember(a, o) ==> Set#IsMember(b, o)));

revealed function Set#Equal(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Equal(a, b) } 
  Set#Equal(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      Set#IsMember(a, o) <==> Set#IsMember(b, o)));

axiom (forall a: Set, b: Set :: { Set#Equal(a, b) } Set#Equal(a, b) ==> a == b);

revealed function Set#Disjoint(a: Set, b: Set) : bool;

axiom (forall a: Set, b: Set :: 
  { Set#Disjoint(a, b) } 
  Set#Disjoint(a, b)
     <==> (forall o: Box :: 
      { Set#IsMember(a, o) } { Set#IsMember(b, o) } 
      !Set#IsMember(a, o) || !Set#IsMember(b, o)));

revealed function Set#FromBoogieMap([Box]bool) : Set;

axiom (forall m: [Box]bool, bx: Box :: 
  { Set#IsMember(Set#FromBoogieMap(m), bx) } 
  Set#IsMember(Set#FromBoogieMap(m), bx) == m[bx]);

type ISet = [Box]bool;

revealed function ISet#Empty() : ISet;

axiom (forall o: Box :: { ISet#Empty()[o] } !ISet#Empty()[o]);

revealed function ISet#FromSet(Set) : ISet;

axiom (forall s: Set, bx: Box :: 
  { ISet#FromSet(s)[bx] } 
  ISet#FromSet(s)[bx] == Set#IsMember(s, bx));

revealed function ISet#UnionOne(ISet, Box) : ISet;

axiom (forall a: ISet, x: Box, o: Box :: 
  { ISet#UnionOne(a, x)[o] } 
  ISet#UnionOne(a, x)[o] <==> o == x || a[o]);

axiom (forall a: ISet, x: Box :: { ISet#UnionOne(a, x) } ISet#UnionOne(a, x)[x]);

axiom (forall a: ISet, x: Box, y: Box :: 
  { ISet#UnionOne(a, x), a[y] } 
  a[y] ==> ISet#UnionOne(a, x)[y]);

revealed function ISet#Union(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Union(a, b)[o] } 
  ISet#Union(a, b)[o] <==> a[o] || b[o]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Union(a, b), a[y] } 
  a[y] ==> ISet#Union(a, b)[y]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Union(a, b), b[y] } 
  b[y] ==> ISet#Union(a, b)[y]);

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(a, b) } 
  ISet#Disjoint(a, b)
     ==> ISet#Difference(ISet#Union(a, b), a) == b
       && ISet#Difference(ISet#Union(a, b), b) == a);

revealed function ISet#Intersection(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Intersection(a, b)[o] } 
  ISet#Intersection(a, b)[o] <==> a[o] && b[o]);

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(ISet#Union(a, b), b) } 
  ISet#Union(ISet#Union(a, b), b) == ISet#Union(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Union(a, ISet#Union(a, b)) } 
  ISet#Union(a, ISet#Union(a, b)) == ISet#Union(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Intersection(ISet#Intersection(a, b), b) } 
  ISet#Intersection(ISet#Intersection(a, b), b) == ISet#Intersection(a, b));

axiom (forall a: ISet, b: ISet :: 
  { ISet#Intersection(a, ISet#Intersection(a, b)) } 
  ISet#Intersection(a, ISet#Intersection(a, b)) == ISet#Intersection(a, b));

revealed function ISet#Difference(ISet, ISet) : ISet;

axiom (forall a: ISet, b: ISet, o: Box :: 
  { ISet#Difference(a, b)[o] } 
  ISet#Difference(a, b)[o] <==> a[o] && !b[o]);

axiom (forall a: ISet, b: ISet, y: Box :: 
  { ISet#Difference(a, b), b[y] } 
  b[y] ==> !ISet#Difference(a, b)[y]);

revealed function ISet#Subset(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Subset(a, b) } 
  ISet#Subset(a, b) <==> (forall o: Box :: { a[o] } { b[o] } a[o] ==> b[o]));

revealed function ISet#Equal(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Equal(a, b) } 
  ISet#Equal(a, b) <==> (forall o: Box :: { a[o] } { b[o] } a[o] <==> b[o]));

axiom (forall a: ISet, b: ISet :: { ISet#Equal(a, b) } ISet#Equal(a, b) ==> a == b);

revealed function ISet#Disjoint(ISet, ISet) : bool;

axiom (forall a: ISet, b: ISet :: 
  { ISet#Disjoint(a, b) } 
  ISet#Disjoint(a, b) <==> (forall o: Box :: { a[o] } { b[o] } !a[o] || !b[o]));

revealed function Math#min(a: int, b: int) : int;

axiom (forall a: int, b: int :: { Math#min(a, b) } a <= b <==> Math#min(a, b) == a);

axiom (forall a: int, b: int :: { Math#min(a, b) } b <= a <==> Math#min(a, b) == b);

axiom (forall a: int, b: int :: 
  { Math#min(a, b) } 
  Math#min(a, b) == a || Math#min(a, b) == b);

revealed function Math#clip(a: int) : int;

axiom (forall a: int :: { Math#clip(a) } 0 <= a ==> Math#clip(a) == a);

axiom (forall a: int :: { Math#clip(a) } a < 0 ==> Math#clip(a) == 0);

type MultiSet;

revealed function MultiSet#Multiplicity(m: MultiSet, o: Box) : int;

revealed function MultiSet#UpdateMultiplicity(m: MultiSet, o: Box, n: int) : MultiSet;

axiom (forall m: MultiSet, o: Box, n: int, p: Box :: 
  { MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p) } 
  0 <= n
     ==> (o == p ==> MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p) == n)
       && (o != p
         ==> MultiSet#Multiplicity(MultiSet#UpdateMultiplicity(m, o, n), p)
           == MultiSet#Multiplicity(m, p)));

revealed function $IsGoodMultiSet(ms: MultiSet) : bool;

axiom (forall ms: MultiSet :: 
  { $IsGoodMultiSet(ms) } 
  $IsGoodMultiSet(ms)
     <==> (forall bx: Box :: 
      { MultiSet#Multiplicity(ms, bx) } 
      0 <= MultiSet#Multiplicity(ms, bx)
         && MultiSet#Multiplicity(ms, bx) <= MultiSet#Card(ms)));

revealed function MultiSet#Card(m: MultiSet) : int;

axiom (forall s: MultiSet :: { MultiSet#Card(s) } 0 <= MultiSet#Card(s));

axiom (forall s: MultiSet, x: Box, n: int :: 
  { MultiSet#Card(MultiSet#UpdateMultiplicity(s, x, n)) } 
  0 <= n
     ==> MultiSet#Card(MultiSet#UpdateMultiplicity(s, x, n))
       == MultiSet#Card(s) - MultiSet#Multiplicity(s, x) + n);

revealed function MultiSet#Empty() : MultiSet;

axiom (forall o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Empty(), o) } 
  MultiSet#Multiplicity(MultiSet#Empty(), o) == 0);

axiom (forall s: MultiSet :: 
  { MultiSet#Card(s) } 
  (MultiSet#Card(s) == 0 <==> s == MultiSet#Empty())
     && (MultiSet#Card(s) != 0
       ==> (exists x: Box :: 
        { MultiSet#Multiplicity(s, x) } 
        0 < MultiSet#Multiplicity(s, x))));

revealed function MultiSet#Singleton(o: Box) : MultiSet;

axiom (forall r: Box, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Singleton(r), o) } 
  (MultiSet#Multiplicity(MultiSet#Singleton(r), o) == 1 <==> r == o)
     && (MultiSet#Multiplicity(MultiSet#Singleton(r), o) == 0 <==> r != o));

axiom (forall r: Box :: 
  { MultiSet#Singleton(r) } 
  MultiSet#Singleton(r) == MultiSet#UnionOne(MultiSet#Empty(), r));

revealed function MultiSet#UnionOne(m: MultiSet, o: Box) : MultiSet;

axiom (forall a: MultiSet, x: Box, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#UnionOne(a, x), o) } 
  0 < MultiSet#Multiplicity(MultiSet#UnionOne(a, x), o)
     <==> o == x || 0 < MultiSet#Multiplicity(a, o));

axiom (forall a: MultiSet, x: Box :: 
  { MultiSet#UnionOne(a, x) } 
  MultiSet#Multiplicity(MultiSet#UnionOne(a, x), x)
     == MultiSet#Multiplicity(a, x) + 1);

axiom (forall a: MultiSet, x: Box, y: Box :: 
  { MultiSet#UnionOne(a, x), MultiSet#Multiplicity(a, y) } 
  0 < MultiSet#Multiplicity(a, y)
     ==> 0 < MultiSet#Multiplicity(MultiSet#UnionOne(a, x), y));

axiom (forall a: MultiSet, x: Box, y: Box :: 
  { MultiSet#UnionOne(a, x), MultiSet#Multiplicity(a, y) } 
  x != y
     ==> MultiSet#Multiplicity(a, y) == MultiSet#Multiplicity(MultiSet#UnionOne(a, x), y));

axiom (forall a: MultiSet, x: Box :: 
  { MultiSet#Card(MultiSet#UnionOne(a, x)) } 
  MultiSet#Card(MultiSet#UnionOne(a, x)) == MultiSet#Card(a) + 1);

revealed function MultiSet#Union(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Union(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Union(a, b), o)
     == MultiSet#Multiplicity(a, o) + MultiSet#Multiplicity(b, o));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Card(MultiSet#Union(a, b)) } 
  MultiSet#Card(MultiSet#Union(a, b)) == MultiSet#Card(a) + MultiSet#Card(b));

revealed function MultiSet#Intersection(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Intersection(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Intersection(a, b), o)
     == Math#min(MultiSet#Multiplicity(a, o), MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Intersection(MultiSet#Intersection(a, b), b) } 
  MultiSet#Intersection(MultiSet#Intersection(a, b), b)
     == MultiSet#Intersection(a, b));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Intersection(a, MultiSet#Intersection(a, b)) } 
  MultiSet#Intersection(a, MultiSet#Intersection(a, b))
     == MultiSet#Intersection(a, b));

revealed function MultiSet#Difference(a: MultiSet, b: MultiSet) : MultiSet;

axiom (forall a: MultiSet, b: MultiSet, o: Box :: 
  { MultiSet#Multiplicity(MultiSet#Difference(a, b), o) } 
  MultiSet#Multiplicity(MultiSet#Difference(a, b), o)
     == Math#clip(MultiSet#Multiplicity(a, o) - MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet, y: Box :: 
  { MultiSet#Difference(a, b), MultiSet#Multiplicity(b, y), MultiSet#Multiplicity(a, y) } 
  MultiSet#Multiplicity(a, y) <= MultiSet#Multiplicity(b, y)
     ==> MultiSet#Multiplicity(MultiSet#Difference(a, b), y) == 0);

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Card(MultiSet#Difference(a, b)) } 
  MultiSet#Card(MultiSet#Difference(a, b))
         + MultiSet#Card(MultiSet#Difference(b, a))
         + 2 * MultiSet#Card(MultiSet#Intersection(a, b))
       == MultiSet#Card(MultiSet#Union(a, b))
     && MultiSet#Card(MultiSet#Difference(a, b))
       == MultiSet#Card(a) - MultiSet#Card(MultiSet#Intersection(a, b)));

revealed function MultiSet#Subset(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Subset(a, b) } 
  MultiSet#Subset(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) <= MultiSet#Multiplicity(b, o)));

revealed function MultiSet#Equal(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) == MultiSet#Multiplicity(b, o)));

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Equal(a, b) } 
  MultiSet#Equal(a, b) ==> a == b);

revealed function MultiSet#Disjoint(a: MultiSet, b: MultiSet) : bool;

axiom (forall a: MultiSet, b: MultiSet :: 
  { MultiSet#Disjoint(a, b) } 
  MultiSet#Disjoint(a, b)
     <==> (forall o: Box :: 
      { MultiSet#Multiplicity(a, o) } { MultiSet#Multiplicity(b, o) } 
      MultiSet#Multiplicity(a, o) == 0 || MultiSet#Multiplicity(b, o) == 0));

revealed function MultiSet#FromSet(s: Set) : MultiSet;

axiom (forall s: Set, a: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSet(s), a) } 
  (MultiSet#Multiplicity(MultiSet#FromSet(s), a) == 0 <==> !Set#IsMember(s, a))
     && (MultiSet#Multiplicity(MultiSet#FromSet(s), a) == 1 <==> Set#IsMember(s, a)));

axiom (forall s: Set :: 
  { MultiSet#Card(MultiSet#FromSet(s)) } 
  MultiSet#Card(MultiSet#FromSet(s)) == Set#Card(s));

revealed function MultiSet#FromSeq(s: Seq) : MultiSet
uses {
axiom MultiSet#FromSeq(Seq#Empty()) == MultiSet#Empty();
}

axiom (forall s: Seq :: { MultiSet#FromSeq(s) } $IsGoodMultiSet(MultiSet#FromSeq(s)));

axiom (forall s: Seq :: 
  { MultiSet#Card(MultiSet#FromSeq(s)) } 
  MultiSet#Card(MultiSet#FromSeq(s)) == Seq#Length(s));

axiom (forall s: Seq, v: Box :: 
  { MultiSet#FromSeq(Seq#Build(s, v)) } 
  MultiSet#FromSeq(Seq#Build(s, v)) == MultiSet#UnionOne(MultiSet#FromSeq(s), v));

axiom (forall a: Seq, b: Seq :: 
  { MultiSet#FromSeq(Seq#Append(a, b)) } 
  MultiSet#FromSeq(Seq#Append(a, b))
     == MultiSet#Union(MultiSet#FromSeq(a), MultiSet#FromSeq(b)));

axiom (forall s: Seq, i: int, v: Box, x: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSeq(Seq#Update(s, i, v)), x) } 
  0 <= i && i < Seq#Length(s)
     ==> MultiSet#Multiplicity(MultiSet#FromSeq(Seq#Update(s, i, v)), x)
       == MultiSet#Multiplicity(MultiSet#Union(MultiSet#Difference(MultiSet#FromSeq(s), MultiSet#Singleton(Seq#Index(s, i))), 
          MultiSet#Singleton(v)), 
        x));

axiom (forall s: Seq, x: Box :: 
  { MultiSet#Multiplicity(MultiSet#FromSeq(s), x) } 
  (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && x == Seq#Index(s, i))
     <==> 0 < MultiSet#Multiplicity(MultiSet#FromSeq(s), x));

type Seq;

revealed function Seq#Length(s: Seq) : int;

axiom (forall s: Seq :: { Seq#Length(s) } 0 <= Seq#Length(s));

revealed function Seq#Empty() : Seq
uses {
axiom Seq#Length(Seq#Empty()) == 0;
}

axiom (forall s: Seq :: { Seq#Length(s) } Seq#Length(s) == 0 ==> s == Seq#Empty());

revealed function Seq#Build(s: Seq, val: Box) : Seq;

revealed function Seq#Build_inv0(s: Seq) : Seq;

revealed function Seq#Build_inv1(s: Seq) : Box;

axiom (forall s: Seq, val: Box :: 
  { Seq#Build(s, val) } 
  Seq#Build_inv0(Seq#Build(s, val)) == s
     && Seq#Build_inv1(Seq#Build(s, val)) == val);

axiom (forall s: Seq, v: Box :: 
  { Seq#Build(s, v) } 
  Seq#Length(Seq#Build(s, v)) == 1 + Seq#Length(s));

axiom (forall s: Seq, i: int, v: Box :: 
  { Seq#Index(Seq#Build(s, v), i) } 
  (i == Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == v)
     && (i != Seq#Length(s) ==> Seq#Index(Seq#Build(s, v), i) == Seq#Index(s, i)));

axiom (forall s0: Seq, s1: Seq :: 
  { Seq#Length(Seq#Append(s0, s1)) } 
  Seq#Length(Seq#Append(s0, s1)) == Seq#Length(s0) + Seq#Length(s1));

revealed function Seq#Index(s: Seq, i: int) : Box;

axiom (forall s0: Seq, s1: Seq, n: int :: 
  { Seq#Index(Seq#Append(s0, s1), n) } 
  (n < Seq#Length(s0) ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s0, n))
     && (Seq#Length(s0) <= n
       ==> Seq#Index(Seq#Append(s0, s1), n) == Seq#Index(s1, n - Seq#Length(s0))));

revealed function Seq#Update(s: Seq, i: int, val: Box) : Seq;

axiom (forall s: Seq, i: int, v: Box :: 
  { Seq#Length(Seq#Update(s, i, v)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Length(Seq#Update(s, i, v)) == Seq#Length(s));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Index(Seq#Update(s, i, v), n) } 
  0 <= n && n < Seq#Length(s)
     ==> (i == n ==> Seq#Index(Seq#Update(s, i, v), n) == v)
       && (i != n ==> Seq#Index(Seq#Update(s, i, v), n) == Seq#Index(s, n)));

revealed function Seq#Append(s0: Seq, s1: Seq) : Seq;

revealed function Seq#Contains(s: Seq, val: Box) : bool;

axiom (forall s: Seq, x: Box :: 
  { Seq#Contains(s, x) } 
  Seq#Contains(s, x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall x: Box :: 
  { Seq#Contains(Seq#Empty(), x) } 
  !Seq#Contains(Seq#Empty(), x));

axiom (forall s0: Seq, s1: Seq, x: Box :: 
  { Seq#Contains(Seq#Append(s0, s1), x) } 
  Seq#Contains(Seq#Append(s0, s1), x)
     <==> Seq#Contains(s0, x) || Seq#Contains(s1, x));

axiom (forall s: Seq, v: Box, x: Box :: 
  { Seq#Contains(Seq#Build(s, v), x) } 
  Seq#Contains(Seq#Build(s, v), x) <==> v == x || Seq#Contains(s, x));

axiom (forall s: Seq, n: int, x: Box :: 
  { Seq#Contains(Seq#Take(s, n), x) } 
  Seq#Contains(Seq#Take(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= i && i < n && i < Seq#Length(s) && Seq#Index(s, i) == x));

axiom (forall s: Seq, n: int, x: Box :: 
  { Seq#Contains(Seq#Drop(s, n), x) } 
  Seq#Contains(Seq#Drop(s, n), x)
     <==> (exists i: int :: 
      { Seq#Index(s, i) } 
      0 <= n && n <= i && i < Seq#Length(s) && Seq#Index(s, i) == x));

revealed function Seq#Equal(s0: Seq, s1: Seq) : bool;

axiom (forall s0: Seq, s1: Seq :: 
  { Seq#Equal(s0, s1) } 
  Seq#Equal(s0, s1)
     <==> Seq#Length(s0) == Seq#Length(s1)
       && (forall j: int :: 
        { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
        0 <= j && j < Seq#Length(s0) ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

axiom (forall a: Seq, b: Seq :: { Seq#Equal(a, b) } Seq#Equal(a, b) ==> a == b);

revealed function Seq#SameUntil(s0: Seq, s1: Seq, n: int) : bool;

axiom (forall s0: Seq, s1: Seq, n: int :: 
  { Seq#SameUntil(s0, s1, n) } 
  Seq#SameUntil(s0, s1, n)
     <==> (forall j: int :: 
      { Seq#Index(s0, j) } { Seq#Index(s1, j) } 
      0 <= j && j < n ==> Seq#Index(s0, j) == Seq#Index(s1, j)));

revealed function Seq#Take(s: Seq, howMany: int) : Seq;

axiom (forall s: Seq, n: int :: 
  { Seq#Length(Seq#Take(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Take(s, n)) == n);

axiom (forall s: Seq, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Take(s, n), j) } { Seq#Index(s, j), Seq#Take(s, n) } 
  0 <= j && j < n && j < Seq#Length(s)
     ==> Seq#Index(Seq#Take(s, n), j) == Seq#Index(s, j));

revealed function Seq#Drop(s: Seq, howMany: int) : Seq;

axiom (forall s: Seq, n: int :: 
  { Seq#Length(Seq#Drop(s, n)) } 
  0 <= n && n <= Seq#Length(s) ==> Seq#Length(Seq#Drop(s, n)) == Seq#Length(s) - n);

axiom (forall s: Seq, n: int, j: int :: 
  {:weight 25} { Seq#Index(Seq#Drop(s, n), j) } 
  0 <= n && 0 <= j && j < Seq#Length(s) - n
     ==> Seq#Index(Seq#Drop(s, n), j) == Seq#Index(s, j + n));

axiom (forall s: Seq, n: int, k: int :: 
  {:weight 25} { Seq#Index(s, k), Seq#Drop(s, n) } 
  0 <= n && n <= k && k < Seq#Length(s)
     ==> Seq#Index(Seq#Drop(s, n), k - n) == Seq#Index(s, k));

axiom (forall s: Seq, t: Seq, n: int :: 
  { Seq#Take(Seq#Append(s, t), n) } { Seq#Drop(Seq#Append(s, t), n) } 
  n == Seq#Length(s)
     ==> Seq#Take(Seq#Append(s, t), n) == s && Seq#Drop(Seq#Append(s, t), n) == t);

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Update(Seq#Take(s, n), i, v));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Take(Seq#Update(s, i, v), n) } 
  n <= i && i < Seq#Length(s)
     ==> Seq#Take(Seq#Update(s, i, v), n) == Seq#Take(s, n));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= n && n <= i && i < Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Update(Seq#Drop(s, n), i - n, v));

axiom (forall s: Seq, i: int, v: Box, n: int :: 
  { Seq#Drop(Seq#Update(s, i, v), n) } 
  0 <= i && i < n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Update(s, i, v), n) == Seq#Drop(s, n));

axiom (forall s: Seq, v: Box, n: int :: 
  { Seq#Drop(Seq#Build(s, v), n) } 
  0 <= n && n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Build(s, v), n) == Seq#Build(Seq#Drop(s, n), v));

axiom (forall s: Seq, n: int :: { Seq#Drop(s, n) } n == 0 ==> Seq#Drop(s, n) == s);

axiom (forall s: Seq, n: int :: 
  { Seq#Take(s, n) } 
  n == 0 ==> Seq#Take(s, n) == Seq#Empty());

axiom (forall s: Seq, m: int, n: int :: 
  { Seq#Drop(Seq#Drop(s, m), n) } 
  0 <= m && 0 <= n && m + n <= Seq#Length(s)
     ==> Seq#Drop(Seq#Drop(s, m), n) == Seq#Drop(s, m + n));

axiom (forall s: Seq, bx: Box, t: Ty :: 
  { $Is(Seq#Build(s, bx), TSeq(t)) } 
  $Is(s, TSeq(t)) && $IsBox(bx, t) ==> $Is(Seq#Build(s, bx), TSeq(t)));

revealed function Seq#Create(ty: Ty, heap: Heap, len: int, init: HandleType) : Seq;

axiom (forall ty: Ty, heap: Heap, len: int, init: HandleType :: 
  { Seq#Length(Seq#Create(ty, heap, len, init): Seq) } 
  $IsGoodHeap(heap) && 0 <= len
     ==> Seq#Length(Seq#Create(ty, heap, len, init): Seq) == len);

axiom (forall ty: Ty, heap: Heap, len: int, init: HandleType, i: int :: 
  { Seq#Index(Seq#Create(ty, heap, len, init), i) } 
  $IsGoodHeap(heap) && 0 <= i && i < len
     ==> Seq#Index(Seq#Create(ty, heap, len, init), i)
       == Apply1(TInt, ty, heap, init, $Box(i)));

revealed function Seq#FromArray(h: Heap, a: ref) : Seq;

axiom (forall h: Heap, a: ref :: 
  { Seq#Length(Seq#FromArray(h, a)) } 
  Seq#Length(Seq#FromArray(h, a)) == _System.array.Length(a));

axiom (forall h: Heap, a: ref :: 
  { Seq#FromArray(h, a) } 
  (forall i: int :: 
    { read(h, a, IndexField(i)) } { Seq#Index(Seq#FromArray(h, a): Seq, i) } 
    0 <= i && i < Seq#Length(Seq#FromArray(h, a))
       ==> Seq#Index(Seq#FromArray(h, a), i) == read(h, a, IndexField(i))));

axiom (forall h0: Heap, h1: Heap, a: ref :: 
  { Seq#FromArray(h1, a), $HeapSucc(h0, h1) } 
  $IsGoodHeap(h0) && $IsGoodHeap(h1) && $HeapSucc(h0, h1) && h0[a] == h1[a]
     ==> Seq#FromArray(h0, a) == Seq#FromArray(h1, a));

axiom (forall h: Heap, i: int, v: Box, a: ref :: 
  { Seq#FromArray(update(h, a, IndexField(i), v), a) } 
  0 <= i && i < _System.array.Length(a)
     ==> Seq#FromArray(update(h, a, IndexField(i), v), a)
       == Seq#Update(Seq#FromArray(h, a), i, v));

axiom (forall h: Heap, a: ref, n0: int, n1: int :: 
  { Seq#Take(Seq#FromArray(h, a), n0), Seq#Take(Seq#FromArray(h, a), n1) } 
  n0 + 1 == n1 && 0 <= n0 && n1 <= _System.array.Length(a)
     ==> Seq#Take(Seq#FromArray(h, a), n1)
       == Seq#Build(Seq#Take(Seq#FromArray(h, a), n0), read(h, a, IndexField(n0): Field)));

revealed function Seq#Rank(Seq) : int;

axiom (forall s: Seq, i: int :: 
  { DtRank($Unbox(Seq#Index(s, i)): DatatypeType) } 
  0 <= i && i < Seq#Length(s)
     ==> DtRank($Unbox(Seq#Index(s, i)): DatatypeType) < Seq#Rank(s));

axiom (forall s: Seq, i: int :: 
  { Seq#Rank(Seq#Drop(s, i)) } 
  0 < i && i <= Seq#Length(s) ==> Seq#Rank(Seq#Drop(s, i)) < Seq#Rank(s));

axiom (forall s: Seq, i: int :: 
  { Seq#Rank(Seq#Take(s, i)) } 
  0 <= i && i < Seq#Length(s) ==> Seq#Rank(Seq#Take(s, i)) < Seq#Rank(s));

axiom (forall s: Seq, i: int, j: int :: 
  { Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) } 
  0 <= i && i < j && j <= Seq#Length(s)
     ==> Seq#Rank(Seq#Append(Seq#Take(s, i), Seq#Drop(s, j))) < Seq#Rank(s));

type Map;

revealed function Map#Domain(Map) : Set;

revealed function Map#Elements(Map) : [Box]Box;

revealed function Map#Card(Map) : int;

axiom (forall m: Map :: { Map#Card(m) } 0 <= Map#Card(m));

axiom (forall m: Map :: { Map#Card(m) } Map#Card(m) == 0 <==> m == Map#Empty());

axiom (forall m: Map :: 
  { Map#Domain(m) } 
  m == Map#Empty() || (exists k: Box :: Set#IsMember(Map#Domain(m), k)));

axiom (forall m: Map :: 
  { Map#Values(m) } 
  m == Map#Empty() || (exists v: Box :: Set#IsMember(Map#Values(m), v)));

axiom (forall m: Map :: 
  { Map#Items(m) } 
  m == Map#Empty()
     || (exists k: Box, v: Box :: 
      Set#IsMember(Map#Items(m), $Box(#_System._tuple#2._#Make2(k, v)))));

axiom (forall m: Map :: 
  { Set#Card(Map#Domain(m)) } { Map#Card(m) } 
  Set#Card(Map#Domain(m)) == Map#Card(m));

axiom (forall m: Map :: 
  { Set#Card(Map#Values(m)) } { Map#Card(m) } 
  Set#Card(Map#Values(m)) <= Map#Card(m));

axiom (forall m: Map :: 
  { Set#Card(Map#Items(m)) } { Map#Card(m) } 
  Set#Card(Map#Items(m)) == Map#Card(m));

revealed function Map#Values(Map) : Set;

axiom (forall m: Map, v: Box :: 
  { Set#IsMember(Map#Values(m), v) } 
  Set#IsMember(Map#Values(m), v)
     == (exists u: Box :: 
      { Set#IsMember(Map#Domain(m), u) } { Map#Elements(m)[u] } 
      Set#IsMember(Map#Domain(m), u) && v == Map#Elements(m)[u]));

revealed function Map#Items(Map) : Set;

revealed function #_System._tuple#2._#Make2(Box, Box) : DatatypeType;

revealed function _System.Tuple2._0(DatatypeType) : Box;

revealed function _System.Tuple2._1(DatatypeType) : Box;

axiom (forall m: Map, item: Box :: 
  { Set#IsMember(Map#Items(m), item) } 
  Set#IsMember(Map#Items(m), item)
     <==> Set#IsMember(Map#Domain(m), _System.Tuple2._0($Unbox(item)))
       && Map#Elements(m)[_System.Tuple2._0($Unbox(item))]
         == _System.Tuple2._1($Unbox(item)));

revealed function Map#Empty() : Map;

axiom (forall u: Box :: 
  { Set#IsMember(Map#Domain(Map#Empty(): Map), u) } 
  !Set#IsMember(Map#Domain(Map#Empty(): Map), u));

revealed function Map#Glue(Set, [Box]Box, Ty) : Map;

axiom (forall a: Set, b: [Box]Box, t: Ty :: 
  { Map#Domain(Map#Glue(a, b, t)) } 
  Map#Domain(Map#Glue(a, b, t)) == a);

axiom (forall a: Set, b: [Box]Box, t: Ty :: 
  { Map#Elements(Map#Glue(a, b, t)) } 
  Map#Elements(Map#Glue(a, b, t)) == b);

axiom (forall a: Set, b: [Box]Box, t0: Ty, t1: Ty :: 
  { Map#Glue(a, b, TMap(t0, t1)) } 
  (forall bx: Box :: Set#IsMember(a, bx) ==> $IsBox(bx, t0) && $IsBox(b[bx], t1))
     ==> $Is(Map#Glue(a, b, TMap(t0, t1)), TMap(t0, t1)));

revealed function Map#Build(Map, Box, Box) : Map;

axiom (forall m: Map, u: Box, u': Box, v: Box :: 
  { Set#IsMember(Map#Domain(Map#Build(m, u, v)), u') } 
    { Map#Elements(Map#Build(m, u, v))[u'] } 
  (u' == u
       ==> Set#IsMember(Map#Domain(Map#Build(m, u, v)), u')
         && Map#Elements(Map#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> Set#IsMember(Map#Domain(Map#Build(m, u, v)), u')
           == Set#IsMember(Map#Domain(m), u')
         && Map#Elements(Map#Build(m, u, v))[u'] == Map#Elements(m)[u']));

axiom (forall m: Map, u: Box, v: Box :: 
  { Map#Card(Map#Build(m, u, v)) } 
  Set#IsMember(Map#Domain(m), u) ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m));

axiom (forall m: Map, u: Box, v: Box :: 
  { Map#Card(Map#Build(m, u, v)) } 
  !Set#IsMember(Map#Domain(m), u)
     ==> Map#Card(Map#Build(m, u, v)) == Map#Card(m) + 1);

revealed function Map#Merge(Map, Map) : Map;

axiom (forall m: Map, n: Map :: 
  { Map#Domain(Map#Merge(m, n)) } 
  Map#Domain(Map#Merge(m, n)) == Set#Union(Map#Domain(m), Map#Domain(n)));

axiom (forall m: Map, n: Map, u: Box :: 
  { Map#Elements(Map#Merge(m, n))[u] } 
  Set#IsMember(Map#Domain(Map#Merge(m, n)), u)
     ==> (!Set#IsMember(Map#Domain(n), u)
         ==> Map#Elements(Map#Merge(m, n))[u] == Map#Elements(m)[u])
       && (Set#IsMember(Map#Domain(n), u)
         ==> Map#Elements(Map#Merge(m, n))[u] == Map#Elements(n)[u]));

revealed function Map#Subtract(Map, Set) : Map;

axiom (forall m: Map, s: Set :: 
  { Map#Domain(Map#Subtract(m, s)) } 
  Map#Domain(Map#Subtract(m, s)) == Set#Difference(Map#Domain(m), s));

axiom (forall m: Map, s: Set, u: Box :: 
  { Map#Elements(Map#Subtract(m, s))[u] } 
  Set#IsMember(Map#Domain(Map#Subtract(m, s)), u)
     ==> Map#Elements(Map#Subtract(m, s))[u] == Map#Elements(m)[u]);

revealed function Map#Equal(Map, Map) : bool;

axiom (forall m: Map, m': Map :: 
  { Map#Equal(m, m') } 
  Map#Equal(m, m')
     <==> (forall u: Box :: 
        Set#IsMember(Map#Domain(m), u) == Set#IsMember(Map#Domain(m'), u))
       && (forall u: Box :: 
        Set#IsMember(Map#Domain(m), u) ==> Map#Elements(m)[u] == Map#Elements(m')[u]));

axiom (forall m: Map, m': Map :: { Map#Equal(m, m') } Map#Equal(m, m') ==> m == m');

revealed function Map#Disjoint(Map, Map) : bool;

axiom (forall m: Map, m': Map :: 
  { Map#Disjoint(m, m') } 
  Map#Disjoint(m, m')
     <==> (forall o: Box :: 
      { Set#IsMember(Map#Domain(m), o) } { Set#IsMember(Map#Domain(m'), o) } 
      !Set#IsMember(Map#Domain(m), o) || !Set#IsMember(Map#Domain(m'), o)));

type IMap;

revealed function IMap#Domain(IMap) : ISet;

revealed function IMap#Elements(IMap) : [Box]Box;

axiom (forall m: IMap :: 
  { IMap#Domain(m) } 
  m == IMap#Empty() || (exists k: Box :: IMap#Domain(m)[k]));

axiom (forall m: IMap :: 
  { IMap#Values(m) } 
  m == IMap#Empty() || (exists v: Box :: IMap#Values(m)[v]));

axiom (forall m: IMap :: 
  { IMap#Items(m) } 
  m == IMap#Empty()
     || (exists k: Box, v: Box :: IMap#Items(m)[$Box(#_System._tuple#2._#Make2(k, v))]));

axiom (forall m: IMap :: 
  { IMap#Domain(m) } 
  m == IMap#Empty() <==> IMap#Domain(m) == ISet#Empty());

axiom (forall m: IMap :: 
  { IMap#Values(m) } 
  m == IMap#Empty() <==> IMap#Values(m) == ISet#Empty());

axiom (forall m: IMap :: 
  { IMap#Items(m) } 
  m == IMap#Empty() <==> IMap#Items(m) == ISet#Empty());

revealed function IMap#Values(IMap) : ISet;

axiom (forall m: IMap, v: Box :: 
  { IMap#Values(m)[v] } 
  IMap#Values(m)[v]
     == (exists u: Box :: 
      { IMap#Domain(m)[u] } { IMap#Elements(m)[u] } 
      IMap#Domain(m)[u] && v == IMap#Elements(m)[u]));

revealed function IMap#Items(IMap) : ISet;

axiom (forall m: IMap, item: Box :: 
  { IMap#Items(m)[item] } 
  IMap#Items(m)[item]
     <==> IMap#Domain(m)[_System.Tuple2._0($Unbox(item))]
       && IMap#Elements(m)[_System.Tuple2._0($Unbox(item))]
         == _System.Tuple2._1($Unbox(item)));

revealed function IMap#Empty() : IMap;

axiom (forall u: Box :: 
  { IMap#Domain(IMap#Empty(): IMap)[u] } 
  !IMap#Domain(IMap#Empty(): IMap)[u]);

revealed function IMap#Glue([Box]bool, [Box]Box, Ty) : IMap;

axiom (forall a: [Box]bool, b: [Box]Box, t: Ty :: 
  { IMap#Domain(IMap#Glue(a, b, t)) } 
  IMap#Domain(IMap#Glue(a, b, t)) == a);

axiom (forall a: [Box]bool, b: [Box]Box, t: Ty :: 
  { IMap#Elements(IMap#Glue(a, b, t)) } 
  IMap#Elements(IMap#Glue(a, b, t)) == b);

axiom (forall a: [Box]bool, b: [Box]Box, t0: Ty, t1: Ty :: 
  { IMap#Glue(a, b, TIMap(t0, t1)) } 
  (forall bx: Box :: a[bx] ==> $IsBox(bx, t0) && $IsBox(b[bx], t1))
     ==> $Is(IMap#Glue(a, b, TIMap(t0, t1)), TIMap(t0, t1)));

revealed function IMap#Build(IMap, Box, Box) : IMap;

axiom (forall m: IMap, u: Box, u': Box, v: Box :: 
  { IMap#Domain(IMap#Build(m, u, v))[u'] } 
    { IMap#Elements(IMap#Build(m, u, v))[u'] } 
  (u' == u
       ==> IMap#Domain(IMap#Build(m, u, v))[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == v)
     && (u' != u
       ==> IMap#Domain(IMap#Build(m, u, v))[u'] == IMap#Domain(m)[u']
         && IMap#Elements(IMap#Build(m, u, v))[u'] == IMap#Elements(m)[u']));

revealed function IMap#Equal(IMap, IMap) : bool;

axiom (forall m: IMap, m': IMap :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m')
     <==> (forall u: Box :: IMap#Domain(m)[u] == IMap#Domain(m')[u])
       && (forall u: Box :: 
        IMap#Domain(m)[u] ==> IMap#Elements(m)[u] == IMap#Elements(m')[u]));

axiom (forall m: IMap, m': IMap :: 
  { IMap#Equal(m, m') } 
  IMap#Equal(m, m') ==> m == m');

revealed function IMap#Merge(IMap, IMap) : IMap;

axiom (forall m: IMap, n: IMap :: 
  { IMap#Domain(IMap#Merge(m, n)) } 
  IMap#Domain(IMap#Merge(m, n)) == ISet#Union(IMap#Domain(m), IMap#Domain(n)));

axiom (forall m: IMap, n: IMap, u: Box :: 
  { IMap#Elements(IMap#Merge(m, n))[u] } 
  IMap#Domain(IMap#Merge(m, n))[u]
     ==> (!IMap#Domain(n)[u]
         ==> IMap#Elements(IMap#Merge(m, n))[u] == IMap#Elements(m)[u])
       && (IMap#Domain(n)[u]
         ==> IMap#Elements(IMap#Merge(m, n))[u] == IMap#Elements(n)[u]));

revealed function IMap#Subtract(IMap, Set) : IMap;

axiom (forall m: IMap, s: Set :: 
  { IMap#Domain(IMap#Subtract(m, s)) } 
  IMap#Domain(IMap#Subtract(m, s))
     == ISet#Difference(IMap#Domain(m), ISet#FromSet(s)));

axiom (forall m: IMap, s: Set, u: Box :: 
  { IMap#Elements(IMap#Subtract(m, s))[u] } 
  IMap#Domain(IMap#Subtract(m, s))[u]
     ==> IMap#Elements(IMap#Subtract(m, s))[u] == IMap#Elements(m)[u]);

revealed function INTERNAL_add_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_add_boogie(x, y): int } 
  INTERNAL_add_boogie(x, y): int == x + y);
}

revealed function INTERNAL_sub_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_sub_boogie(x, y): int } 
  INTERNAL_sub_boogie(x, y): int == x - y);
}

revealed function INTERNAL_mul_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_mul_boogie(x, y): int } 
  INTERNAL_mul_boogie(x, y): int == x * y);
}

revealed function INTERNAL_div_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_div_boogie(x, y): int } 
  INTERNAL_div_boogie(x, y): int == x div y);
}

revealed function INTERNAL_mod_boogie(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: 
  { INTERNAL_mod_boogie(x, y): int } 
  INTERNAL_mod_boogie(x, y): int == x mod y);
}

revealed function {:never_pattern true} INTERNAL_lt_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_lt_boogie(x, y): bool } 
  INTERNAL_lt_boogie(x, y): bool == (x < y));
}

revealed function {:never_pattern true} INTERNAL_le_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_le_boogie(x, y): bool } 
  INTERNAL_le_boogie(x, y): bool == (x <= y));
}

revealed function {:never_pattern true} INTERNAL_gt_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_gt_boogie(x, y): bool } 
  INTERNAL_gt_boogie(x, y): bool == (x > y));
}

revealed function {:never_pattern true} INTERNAL_ge_boogie(x: int, y: int) : bool
uses {
axiom (forall x: int, y: int :: 
  {:never_pattern true} { INTERNAL_ge_boogie(x, y): bool } 
  INTERNAL_ge_boogie(x, y): bool == (x >= y));
}

revealed function Mul(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Mul(x, y): int } Mul(x, y): int == x * y);
}

revealed function Div(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Div(x, y): int } Div(x, y): int == x div y);
}

revealed function Mod(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Mod(x, y): int } Mod(x, y): int == x mod y);
}

revealed function Add(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Add(x, y): int } Add(x, y): int == x + y);
}

revealed function Sub(x: int, y: int) : int
uses {
axiom (forall x: int, y: int :: { Sub(x, y): int } Sub(x, y): int == x - y);
}

function Tclass._System.nat() : Ty
uses {
// Tclass._System.nat Tag
axiom Tag(Tclass._System.nat()) == Tagclass._System.nat
   && TagFamily(Tclass._System.nat()) == tytagFamily$nat;
}

const unique Tagclass._System.nat: TyTag;

// Box/unbox axiom for Tclass._System.nat
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.nat()) } 
  $IsBox(bx, Tclass._System.nat())
     ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, Tclass._System.nat()));

// $Is axiom for subset type _System.nat
axiom (forall x#0: int :: 
  { $Is(x#0, Tclass._System.nat()) } 
  $Is(x#0, Tclass._System.nat()) <==> LitInt(0) <= x#0);

// $IsAlloc axiom for subset type _System.nat
axiom (forall x#0: int, $h: Heap :: 
  { $IsAlloc(x#0, Tclass._System.nat(), $h) } 
  $IsAlloc(x#0, Tclass._System.nat(), $h));

const unique class._System.object?: ClassName;

const unique Tagclass._System.object?: TyTag;

// Box/unbox axiom for Tclass._System.object?
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object?()) } 
  $IsBox(bx, Tclass._System.object?())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object?()));

// $Is axiom for trait object
axiom (forall $o: ref :: 
  { $Is($o, Tclass._System.object?()) } 
  $Is($o, Tclass._System.object?()));

// $IsAlloc axiom for trait object
axiom (forall $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.object?(), $h) } 
  $IsAlloc($o, Tclass._System.object?(), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function implements$_System.object(ty: Ty) : bool;

function Tclass._System.object() : Ty
uses {
// Tclass._System.object Tag
axiom Tag(Tclass._System.object()) == Tagclass._System.object
   && TagFamily(Tclass._System.object()) == tytagFamily$object;
}

const unique Tagclass._System.object: TyTag;

// Box/unbox axiom for Tclass._System.object
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.object()) } 
  $IsBox(bx, Tclass._System.object())
     ==> $Box($Unbox(bx): ref) == bx && $Is($Unbox(bx): ref, Tclass._System.object()));

// $Is axiom for non-null type _System.object
axiom (forall c#0: ref :: 
  { $Is(c#0, Tclass._System.object()) } { $Is(c#0, Tclass._System.object?()) } 
  $Is(c#0, Tclass._System.object())
     <==> $Is(c#0, Tclass._System.object?()) && c#0 != null);

// $IsAlloc axiom for non-null type _System.object
axiom (forall c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.object(), $h) } 
    { $IsAlloc(c#0, Tclass._System.object?(), $h) } 
  $IsAlloc(c#0, Tclass._System.object(), $h)
     <==> $IsAlloc(c#0, Tclass._System.object?(), $h));

const unique class._System.array?: ClassName;

function Tclass._System.array?(Ty) : Ty;

const unique Tagclass._System.array?: TyTag;

// Tclass._System.array? Tag
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array?(_System.array$arg) } 
  Tag(Tclass._System.array?(_System.array$arg)) == Tagclass._System.array?
     && TagFamily(Tclass._System.array?(_System.array$arg)) == tytagFamily$array);

function Tclass._System.array?_0(Ty) : Ty;

// Tclass._System.array? injectivity 0
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array?(_System.array$arg) } 
  Tclass._System.array?_0(Tclass._System.array?(_System.array$arg))
     == _System.array$arg);

// Box/unbox axiom for Tclass._System.array?
axiom (forall _System.array$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array?(_System.array$arg)) } 
  $IsBox(bx, Tclass._System.array?(_System.array$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array?(_System.array$arg)));

// array.: Type axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref, $i0: int :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
     ==> $IsBox(read($h, $o, IndexField($i0)), _System.array$arg));

// array.: Allocation axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref, $i0: int :: 
  { read($h, $o, IndexField($i0)), Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && 
      0 <= $i0
       && $i0 < _System.array.Length($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, $o, IndexField($i0)), _System.array$arg, $h));

// $Is axiom for array type array
axiom (forall _System.array$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array?(_System.array$arg)) } 
  $Is($o, Tclass._System.array?(_System.array$arg))
     <==> $o == null || dtype($o) == Tclass._System.array?(_System.array$arg));

// $IsAlloc axiom for array type array
axiom (forall _System.array$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array?(_System.array$arg), $h) } 
  $IsAlloc($o, Tclass._System.array?(_System.array$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

// array.Length: Type axiom
axiom (forall _System.array$arg: Ty, $o: ref :: 
  { _System.array.Length($o), Tclass._System.array?(_System.array$arg) } 
  $o != null && dtype($o) == Tclass._System.array?(_System.array$arg)
     ==> $Is(_System.array.Length($o), TInt));

// array.Length: Allocation axiom
axiom (forall _System.array$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array.Length($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array?(_System.array$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array?(_System.array$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array.Length($o), TInt, $h));

function Tclass._System.array(Ty) : Ty;

const unique Tagclass._System.array: TyTag;

// Tclass._System.array Tag
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array(_System.array$arg) } 
  Tag(Tclass._System.array(_System.array$arg)) == Tagclass._System.array
     && TagFamily(Tclass._System.array(_System.array$arg)) == tytagFamily$array);

function Tclass._System.array_0(Ty) : Ty;

// Tclass._System.array injectivity 0
axiom (forall _System.array$arg: Ty :: 
  { Tclass._System.array(_System.array$arg) } 
  Tclass._System.array_0(Tclass._System.array(_System.array$arg))
     == _System.array$arg);

// Box/unbox axiom for Tclass._System.array
axiom (forall _System.array$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array(_System.array$arg)) } 
  $IsBox(bx, Tclass._System.array(_System.array$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array(_System.array$arg)));

// $Is axiom for non-null type _System.array
axiom (forall _System.array$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array(_System.array$arg)) } 
    { $Is(c#0, Tclass._System.array?(_System.array$arg)) } 
  $Is(c#0, Tclass._System.array(_System.array$arg))
     <==> $Is(c#0, Tclass._System.array?(_System.array$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array
axiom (forall _System.array$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array(_System.array$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array?(_System.array$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array(_System.array$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array?(_System.array$arg), $h));

function Tclass._System.___hFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc1: TyTag;

// Tclass._System.___hFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hFunc1(#$T0, #$R)) == Tagclass._System.___hFunc1
     && TagFamily(Tclass._System.___hFunc1(#$T0, #$R)) == tytagFamily$_#Func1);

function Tclass._System.___hFunc1_0(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tclass._System.___hFunc1_0(Tclass._System.___hFunc1(#$T0, #$R)) == #$T0);

function Tclass._System.___hFunc1_1(Ty) : Ty;

// Tclass._System.___hFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc1(#$T0, #$R) } 
  Tclass._System.___hFunc1_1(Tclass._System.___hFunc1(#$T0, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc1(#$T0, #$R)));

function Handle1([Heap,Box]Box, [Heap,Box]bool, [Heap,Box]Set) : HandleType;

function Requires1(Ty, Ty, Heap, HandleType, Box) : bool;

function Reads1(Ty, Ty, Heap, HandleType, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box :: 
  { Apply1(t0, t1, heap, Handle1(h, r, rd), bx0) } 
  Apply1(t0, t1, heap, Handle1(h, r, rd), bx0) == h[heap, bx0]);

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box :: 
  { Requires1(t0, t1, heap, Handle1(h, r, rd), bx0) } 
  r[heap, bx0] ==> Requires1(t0, t1, heap, Handle1(h, r, rd), bx0));

axiom (forall t0: Ty, 
    t1: Ty, 
    heap: Heap, 
    h: [Heap,Box]Box, 
    r: [Heap,Box]bool, 
    rd: [Heap,Box]Set, 
    bx0: Box, 
    bx: Box :: 
  { Set#IsMember(Reads1(t0, t1, heap, Handle1(h, r, rd), bx0), bx) } 
  Set#IsMember(Reads1(t0, t1, heap, Handle1(h, r, rd), bx0), bx)
     == Set#IsMember(rd[heap, bx0], bx));

function {:inline} Requires1#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

function {:inline} Reads1#canCall(t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box) : bool
{
  true
}

// frame axiom for Reads1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, h0, f, bx0) == Reads1(t0, t1, h1, f, bx0));

// frame axiom for Reads1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Reads1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads1(t0, t1, h0, f, bx0) == Reads1(t0, t1, h1, f, bx0));

// frame axiom for Requires1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, h0, f, bx0) == Requires1(t0, t1, h1, f, bx0));

// frame axiom for Requires1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Requires1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires1(t0, t1, h0, f, bx0) == Requires1(t0, t1, h1, f, bx0));

// frame axiom for Apply1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h0, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, h0, f, bx0) == Apply1(t0, t1, h1, f, bx0));

// frame axiom for Apply1
axiom (forall t0: Ty, t1: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box :: 
  { $HeapSucc(h0, h1), Apply1(t0, t1, h1, f, bx0) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads1(t0, t1, h1, f, bx0), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply1(t0, t1, h0, f, bx0) == Apply1(t0, t1, h1, f, bx0));

// empty-reads property for Reads1 
axiom (forall t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box :: 
  { Reads1(t0, t1, $OneHeap, f, bx0), $IsGoodHeap(heap) } 
    { Reads1(t0, t1, heap, f, bx0) } 
  $IsGoodHeap(heap) && $IsBox(bx0, t0) && $Is(f, Tclass._System.___hFunc1(t0, t1))
     ==> (Set#Equal(Reads1(t0, t1, $OneHeap, f, bx0), Set#Empty(): Set)
       <==> Set#Equal(Reads1(t0, t1, heap, f, bx0), Set#Empty(): Set)));

// empty-reads property for Requires1
axiom (forall t0: Ty, t1: Ty, heap: Heap, f: HandleType, bx0: Box :: 
  { Requires1(t0, t1, $OneHeap, f, bx0), $IsGoodHeap(heap) } 
    { Requires1(t0, t1, heap, f, bx0) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $Is(f, Tclass._System.___hFunc1(t0, t1))
       && Set#Equal(Reads1(t0, t1, $OneHeap, f, bx0), Set#Empty(): Set)
     ==> Requires1(t0, t1, $OneHeap, f, bx0) == Requires1(t0, t1, heap, f, bx0));

axiom (forall f: HandleType, t0: Ty, t1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
     <==> (forall h: Heap, bx0: Box :: 
      { Apply1(t0, t1, h, f, bx0) } 
      $IsGoodHeap(h) && $IsBox(bx0, t0) && Requires1(t0, t1, h, f, bx0)
         ==> $IsBox(Apply1(t0, t1, h, f, bx0), t1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, u0: Ty, u1: Ty :: 
  { $Is(f, Tclass._System.___hFunc1(t0, t1)), $Is(f, Tclass._System.___hFunc1(u0, u1)) } 
  $Is(f, Tclass._System.___hFunc1(t0, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, t1) } { $IsBox(bx, u1) } 
        $IsBox(bx, t1) ==> $IsBox(bx, u1))
     ==> $Is(f, Tclass._System.___hFunc1(u0, u1)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
       <==> (forall bx0: Box :: 
        { Apply1(t0, t1, h, f, bx0) } { Reads1(t0, t1, h, f, bx0) } 
        $IsBox(bx0, t0) && $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, h, f, bx0)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads1(t0, t1, h, f, bx0), $Box(r)) } 
            r != null && Set#IsMember(Reads1(t0, t1, h, f, bx0), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc1(t0, t1), h)
     ==> (forall bx0: Box :: 
      { Apply1(t0, t1, h, f, bx0) } 
      $IsAllocBox(bx0, t0, h) && Requires1(t0, t1, h, f, bx0)
         ==> $IsAllocBox(Apply1(t0, t1, h, f, bx0), t1, h)));

function Tclass._System.___hPartialFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc1: TyTag;

// Tclass._System.___hPartialFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hPartialFunc1(#$T0, #$R))
       == Tagclass._System.___hPartialFunc1
     && TagFamily(Tclass._System.___hPartialFunc1(#$T0, #$R))
       == tytagFamily$_#PartialFunc1);

function Tclass._System.___hPartialFunc1_0(Ty) : Ty;

// Tclass._System.___hPartialFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tclass._System.___hPartialFunc1_0(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc1_1(Ty) : Ty;

// Tclass._System.___hPartialFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc1(#$T0, #$R) } 
  Tclass._System.___hPartialFunc1_1(Tclass._System.___hPartialFunc1(#$T0, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc1(#$T0, #$R)));

// $Is axiom for subset type _System._#PartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc1(#$T0, #$R))
       && (forall x0#0: Box :: 
        $IsBox(x0#0, #$T0)
           ==> Set#Equal(Reads1(#$T0, #$R, $OneHeap, f#0, x0#0), Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc1(#$T0, #$R), $h));

function Tclass._System.___hTotalFunc1(Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc1: TyTag;

// Tclass._System.___hTotalFunc1 Tag
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tag(Tclass._System.___hTotalFunc1(#$T0, #$R)) == Tagclass._System.___hTotalFunc1
     && TagFamily(Tclass._System.___hTotalFunc1(#$T0, #$R)) == tytagFamily$_#TotalFunc1);

function Tclass._System.___hTotalFunc1_0(Ty) : Ty;

// Tclass._System.___hTotalFunc1 injectivity 0
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tclass._System.___hTotalFunc1_0(Tclass._System.___hTotalFunc1(#$T0, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc1_1(Ty) : Ty;

// Tclass._System.___hTotalFunc1 injectivity 1
axiom (forall #$T0: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc1(#$T0, #$R) } 
  Tclass._System.___hTotalFunc1_1(Tclass._System.___hTotalFunc1(#$T0, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc1(#$T0, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc1(#$T0, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc1(#$T0, #$R)));

// $Is axiom for subset type _System._#TotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R))
       && (forall x0#0: Box :: 
        $IsBox(x0#0, #$T0) ==> Requires1(#$T0, #$R, $OneHeap, f#0, x0#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc1
axiom (forall #$T0: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc1(#$T0, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc1(#$T0, #$R), $h));

function Tclass._System.___hFunc0(Ty) : Ty;

const unique Tagclass._System.___hFunc0: TyTag;

// Tclass._System.___hFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hFunc0(#$R) } 
  Tag(Tclass._System.___hFunc0(#$R)) == Tagclass._System.___hFunc0
     && TagFamily(Tclass._System.___hFunc0(#$R)) == tytagFamily$_#Func0);

function Tclass._System.___hFunc0_0(Ty) : Ty;

// Tclass._System.___hFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hFunc0(#$R) } 
  Tclass._System.___hFunc0_0(Tclass._System.___hFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc0(#$R)));

function Handle0([Heap]Box, [Heap]bool, [Heap]Set) : HandleType;

function Apply0(Ty, Heap, HandleType) : Box;

function Requires0(Ty, Heap, HandleType) : bool;

function Reads0(Ty, Heap, HandleType) : Set;

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set :: 
  { Apply0(t0, heap, Handle0(h, r, rd)) } 
  Apply0(t0, heap, Handle0(h, r, rd)) == h[heap]);

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set :: 
  { Requires0(t0, heap, Handle0(h, r, rd)) } 
  r[heap] ==> Requires0(t0, heap, Handle0(h, r, rd)));

axiom (forall t0: Ty, heap: Heap, h: [Heap]Box, r: [Heap]bool, rd: [Heap]Set, bx: Box :: 
  { Set#IsMember(Reads0(t0, heap, Handle0(h, r, rd)), bx) } 
  Set#IsMember(Reads0(t0, heap, Handle0(h, r, rd)), bx)
     == Set#IsMember(rd[heap], bx));

function {:inline} Requires0#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

function {:inline} Reads0#canCall(t0: Ty, heap: Heap, f: HandleType) : bool
{
  true
}

// frame axiom for Reads0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, h0, f) == Reads0(t0, h1, f));

// frame axiom for Reads0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Reads0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads0(t0, h0, f) == Reads0(t0, h1, f));

// frame axiom for Requires0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, h0, f) == Requires0(t0, h1, f));

// frame axiom for Requires0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Requires0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires0(t0, h0, f) == Requires0(t0, h1, f));

// frame axiom for Apply0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h0, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, h0, f) == Apply0(t0, h1, f));

// frame axiom for Apply0
axiom (forall t0: Ty, h0: Heap, h1: Heap, f: HandleType :: 
  { $HeapSucc(h0, h1), Apply0(t0, h1, f) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads0(t0, h1, f), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply0(t0, h0, f) == Apply0(t0, h1, f));

// empty-reads property for Reads0 
axiom (forall t0: Ty, heap: Heap, f: HandleType :: 
  { Reads0(t0, $OneHeap, f), $IsGoodHeap(heap) } { Reads0(t0, heap, f) } 
  $IsGoodHeap(heap) && $Is(f, Tclass._System.___hFunc0(t0))
     ==> (Set#Equal(Reads0(t0, $OneHeap, f), Set#Empty(): Set)
       <==> Set#Equal(Reads0(t0, heap, f), Set#Empty(): Set)));

// empty-reads property for Requires0
axiom (forall t0: Ty, heap: Heap, f: HandleType :: 
  { Requires0(t0, $OneHeap, f), $IsGoodHeap(heap) } { Requires0(t0, heap, f) } 
  $IsGoodHeap(heap)
       && $Is(f, Tclass._System.___hFunc0(t0))
       && Set#Equal(Reads0(t0, $OneHeap, f), Set#Empty(): Set)
     ==> Requires0(t0, $OneHeap, f) == Requires0(t0, heap, f));

axiom (forall f: HandleType, t0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
     <==> (forall h: Heap :: 
      { Apply0(t0, h, f) } 
      $IsGoodHeap(h) && Requires0(t0, h, f) ==> $IsBox(Apply0(t0, h, f), t0)));

axiom (forall f: HandleType, t0: Ty, u0: Ty :: 
  { $Is(f, Tclass._System.___hFunc0(t0)), $Is(f, Tclass._System.___hFunc0(u0)) } 
  $Is(f, Tclass._System.___hFunc0(t0))
       && (forall bx: Box :: 
        { $IsBox(bx, t0) } { $IsBox(bx, u0) } 
        $IsBox(bx, t0) ==> $IsBox(bx, u0))
     ==> $Is(f, Tclass._System.___hFunc0(u0)));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc0(t0), h)
       <==> Requires0(t0, h, f)
         ==> (forall r: ref :: 
          { Set#IsMember(Reads0(t0, h, f), $Box(r)) } 
          r != null && Set#IsMember(Reads0(t0, h, f), $Box(r))
             ==> $Unbox(read(h, r, alloc)): bool)));

axiom (forall f: HandleType, t0: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc0(t0), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc0(t0), h)
     ==> 
    Requires0(t0, h, f)
     ==> $IsAllocBox(Apply0(t0, h, f), t0, h));

function Tclass._System.___hPartialFunc0(Ty) : Ty;

const unique Tagclass._System.___hPartialFunc0: TyTag;

// Tclass._System.___hPartialFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hPartialFunc0(#$R) } 
  Tag(Tclass._System.___hPartialFunc0(#$R)) == Tagclass._System.___hPartialFunc0
     && TagFamily(Tclass._System.___hPartialFunc0(#$R)) == tytagFamily$_#PartialFunc0);

function Tclass._System.___hPartialFunc0_0(Ty) : Ty;

// Tclass._System.___hPartialFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hPartialFunc0(#$R) } 
  Tclass._System.___hPartialFunc0_0(Tclass._System.___hPartialFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc0(#$R)));

// $Is axiom for subset type _System._#PartialFunc0
axiom (forall #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc0(#$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc0(#$R))
     <==> $Is(f#0, Tclass._System.___hFunc0(#$R))
       && Set#Equal(Reads0(#$R, $OneHeap, f#0), Set#Empty(): Set));

// $IsAlloc axiom for subset type _System._#PartialFunc0
axiom (forall #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc0(#$R), $h));

function Tclass._System.___hTotalFunc0(Ty) : Ty;

const unique Tagclass._System.___hTotalFunc0: TyTag;

// Tclass._System.___hTotalFunc0 Tag
axiom (forall #$R: Ty :: 
  { Tclass._System.___hTotalFunc0(#$R) } 
  Tag(Tclass._System.___hTotalFunc0(#$R)) == Tagclass._System.___hTotalFunc0
     && TagFamily(Tclass._System.___hTotalFunc0(#$R)) == tytagFamily$_#TotalFunc0);

function Tclass._System.___hTotalFunc0_0(Ty) : Ty;

// Tclass._System.___hTotalFunc0 injectivity 0
axiom (forall #$R: Ty :: 
  { Tclass._System.___hTotalFunc0(#$R) } 
  Tclass._System.___hTotalFunc0_0(Tclass._System.___hTotalFunc0(#$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc0
axiom (forall #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc0(#$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc0(#$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc0(#$R)));

// $Is axiom for subset type _System._#TotalFunc0
axiom (forall #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc0(#$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc0(#$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc0(#$R)) && Requires0(#$R, $OneHeap, f#0));

// $IsAlloc axiom for subset type _System._#TotalFunc0
axiom (forall #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc0(#$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc0(#$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc0(#$R), $h));

const unique ##_System._tuple#2._#Make2: DtCtorId
uses {
// Constructor identifier
axiom (forall a#0#0#0: Box, a#0#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#0#0#0, a#0#1#0) } 
  DatatypeCtorId(#_System._tuple#2._#Make2(a#0#0#0, a#0#1#0))
     == ##_System._tuple#2._#Make2);
}

function _System.Tuple2.___hMake2_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d) } 
  _System.Tuple2.___hMake2_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#2._#Make2);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d) } 
  _System.Tuple2.___hMake2_q(d)
     ==> (exists a#1#0#0: Box, a#1#1#0: Box :: 
      d == #_System._tuple#2._#Make2(a#1#0#0, a#1#1#0)));

const unique Tagclass._System.Tuple2: TyTag;

// Tclass._System.Tuple2 Tag
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tag(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
       == Tagclass._System.Tuple2
     && TagFamily(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
       == tytagFamily$_tuple#2);

function Tclass._System.Tuple2_0(Ty) : Ty;

// Tclass._System.Tuple2 injectivity 0
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tclass._System.Tuple2_0(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     == _System._tuple#2$T0);

function Tclass._System.Tuple2_1(Ty) : Ty;

// Tclass._System.Tuple2 injectivity 1
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty :: 
  { Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1) } 
  Tclass._System.Tuple2_1(Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     == _System._tuple#2$T1);

// Box/unbox axiom for Tclass._System.Tuple2
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $IsBox(bx, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)));

// Constructor $Is
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, a#2#0#0: Box, a#2#1#0: Box :: 
  { $Is(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $Is(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     <==> $IsBox(a#2#0#0, _System._tuple#2$T0) && $IsBox(a#2#1#0, _System._tuple#2$T1));

// Constructor $IsAlloc
axiom (forall _System._tuple#2$T0: Ty, 
    _System._tuple#2$T1: Ty, 
    a#2#0#0: Box, 
    a#2#1#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
      Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#2._#Make2(a#2#0#0, a#2#1#0), 
        Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), 
        $h)
       <==> $IsAllocBox(a#2#0#0, _System._tuple#2$T0, $h)
         && $IsAllocBox(a#2#1#0, _System._tuple#2$T1, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#2$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple2._0(d), _System._tuple#2$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple2.___hMake2_q(d)
       && (exists _System._tuple#2$T1: Ty :: 
        { $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h) } 
        $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h))
     ==> $IsAllocBox(_System.Tuple2._0(d), _System._tuple#2$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#2$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple2._1(d), _System._tuple#2$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple2.___hMake2_q(d)
       && (exists _System._tuple#2$T0: Ty :: 
        { $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h) } 
        $IsAlloc(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1), $h))
     ==> $IsAllocBox(_System.Tuple2._1(d), _System._tuple#2$T1, $h));

// Constructor literal
axiom (forall a#3#0#0: Box, a#3#1#0: Box :: 
  { #_System._tuple#2._#Make2(Lit(a#3#0#0), Lit(a#3#1#0)) } 
  #_System._tuple#2._#Make2(Lit(a#3#0#0), Lit(a#3#1#0))
     == Lit(#_System._tuple#2._#Make2(a#3#0#0, a#3#1#0)));

// Constructor injectivity
axiom (forall a#4#0#0: Box, a#4#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#4#0#0, a#4#1#0) } 
  _System.Tuple2._0(#_System._tuple#2._#Make2(a#4#0#0, a#4#1#0)) == a#4#0#0);

// Inductive rank
axiom (forall a#5#0#0: Box, a#5#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#5#0#0, a#5#1#0) } 
  BoxRank(a#5#0#0) < DtRank(#_System._tuple#2._#Make2(a#5#0#0, a#5#1#0)));

// Constructor injectivity
axiom (forall a#6#0#0: Box, a#6#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#6#0#0, a#6#1#0) } 
  _System.Tuple2._1(#_System._tuple#2._#Make2(a#6#0#0, a#6#1#0)) == a#6#1#0);

// Inductive rank
axiom (forall a#7#0#0: Box, a#7#1#0: Box :: 
  { #_System._tuple#2._#Make2(a#7#0#0, a#7#1#0) } 
  BoxRank(a#7#1#0) < DtRank(#_System._tuple#2._#Make2(a#7#0#0, a#7#1#0)));

// Depth-one case-split function
function $IsA#_System.Tuple2(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple2(d) } 
  $IsA#_System.Tuple2(d) ==> _System.Tuple2.___hMake2_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#2$T0: Ty, _System._tuple#2$T1: Ty, d: DatatypeType :: 
  { _System.Tuple2.___hMake2_q(d), $Is(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1)) } 
  $Is(d, Tclass._System.Tuple2(_System._tuple#2$T0, _System._tuple#2$T1))
     ==> _System.Tuple2.___hMake2_q(d));

// Datatype extensional equality declaration
function _System.Tuple2#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#2._#Make2
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple2#Equal(a, b) } 
  _System.Tuple2#Equal(a, b)
     <==> _System.Tuple2._0(a) == _System.Tuple2._0(b)
       && _System.Tuple2._1(a) == _System.Tuple2._1(b));

// Datatype extensionality axiom: _System._tuple#2
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple2#Equal(a, b) } 
  _System.Tuple2#Equal(a, b) <==> a == b);

const unique class._System.Tuple2: ClassName;

// Constructor function declaration
function #_System._tuple#0._#Make0() : DatatypeType
uses {
// Constructor identifier
axiom DatatypeCtorId(#_System._tuple#0._#Make0()) == ##_System._tuple#0._#Make0;
// Constructor $Is
axiom $Is(#_System._tuple#0._#Make0(), Tclass._System.Tuple0());
// Constructor literal
axiom #_System._tuple#0._#Make0() == Lit(#_System._tuple#0._#Make0());
}

const unique ##_System._tuple#0._#Make0: DtCtorId
uses {
// Constructor identifier
axiom DatatypeCtorId(#_System._tuple#0._#Make0()) == ##_System._tuple#0._#Make0;
}

function _System.Tuple0.___hMake0_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d) } 
  _System.Tuple0.___hMake0_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#0._#Make0);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d) } 
  _System.Tuple0.___hMake0_q(d) ==> d == #_System._tuple#0._#Make0());

function Tclass._System.Tuple0() : Ty
uses {
// Tclass._System.Tuple0 Tag
axiom Tag(Tclass._System.Tuple0()) == Tagclass._System.Tuple0
   && TagFamily(Tclass._System.Tuple0()) == tytagFamily$_tuple#0;
}

const unique Tagclass._System.Tuple0: TyTag;

// Box/unbox axiom for Tclass._System.Tuple0
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._System.Tuple0()) } 
  $IsBox(bx, Tclass._System.Tuple0())
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, Tclass._System.Tuple0()));

// Datatype $IsAlloc
axiom (forall d: DatatypeType, $h: Heap :: 
  { $IsAlloc(d, Tclass._System.Tuple0(), $h) } 
  $IsGoodHeap($h) && $Is(d, Tclass._System.Tuple0())
     ==> $IsAlloc(d, Tclass._System.Tuple0(), $h));

// Depth-one case-split function
function $IsA#_System.Tuple0(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple0(d) } 
  $IsA#_System.Tuple0(d) ==> _System.Tuple0.___hMake0_q(d));

// Questionmark data type disjunctivity
axiom (forall d: DatatypeType :: 
  { _System.Tuple0.___hMake0_q(d), $Is(d, Tclass._System.Tuple0()) } 
  $Is(d, Tclass._System.Tuple0()) ==> _System.Tuple0.___hMake0_q(d));

// Datatype extensional equality declaration
function _System.Tuple0#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#0._#Make0
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple0#Equal(a, b) } 
  _System.Tuple0#Equal(a, b));

// Datatype extensionality axiom: _System._tuple#0
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple0#Equal(a, b) } 
  _System.Tuple0#Equal(a, b) <==> a == b);

const unique class._System.Tuple0: ClassName;

// Constructor function declaration
function #_System._tuple#2OG._#Make2(Box, Box) : DatatypeType;

const unique ##_System._tuple#2OG._#Make2: DtCtorId
uses {
// Constructor identifier
axiom (forall a#12#0#0: Box, a#12#1#0: Box :: 
  { #_System._tuple#2OG._#Make2(a#12#0#0, a#12#1#0) } 
  DatatypeCtorId(#_System._tuple#2OG._#Make2(a#12#0#0, a#12#1#0))
     == ##_System._tuple#2OG._#Make2);
}

function _System.Tuple2OG.___hMake2_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple2OG.___hMake2_q(d) } 
  _System.Tuple2OG.___hMake2_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#2OG._#Make2);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple2OG.___hMake2_q(d) } 
  _System.Tuple2OG.___hMake2_q(d)
     ==> (exists a#13#0#0: Box, a#13#1#0: Box :: 
      d == #_System._tuple#2OG._#Make2(a#13#0#0, a#13#1#0)));

function Tclass._System.Tuple2OG(Ty, Ty) : Ty;

const unique Tagclass._System.Tuple2OG: TyTag;

// Tclass._System.Tuple2OG Tag
axiom (forall _System._tuple#2OG$T0: Ty, _System._tuple#2OG$T1: Ty :: 
  { Tclass._System.Tuple2OG(_System._tuple#2OG$T0, _System._tuple#2OG$T1) } 
  Tag(Tclass._System.Tuple2OG(_System._tuple#2OG$T0, _System._tuple#2OG$T1))
       == Tagclass._System.Tuple2OG
     && TagFamily(Tclass._System.Tuple2OG(_System._tuple#2OG$T0, _System._tuple#2OG$T1))
       == tytagFamily$_tuple#2OG);

function Tclass._System.Tuple2OG_0(Ty) : Ty;

// Tclass._System.Tuple2OG injectivity 0
axiom (forall _System._tuple#2OG$T0: Ty, _System._tuple#2OG$T1: Ty :: 
  { Tclass._System.Tuple2OG(_System._tuple#2OG$T0, _System._tuple#2OG$T1) } 
  Tclass._System.Tuple2OG_0(Tclass._System.Tuple2OG(_System._tuple#2OG$T0, _System._tuple#2OG$T1))
     == _System._tuple#2OG$T0);

function Tclass._System.Tuple2OG_1(Ty) : Ty;

// Tclass._System.Tuple2OG injectivity 1
axiom (forall _System._tuple#2OG$T0: Ty, _System._tuple#2OG$T1: Ty :: 
  { Tclass._System.Tuple2OG(_System._tuple#2OG$T0, _System._tuple#2OG$T1) } 
  Tclass._System.Tuple2OG_1(Tclass._System.Tuple2OG(_System._tuple#2OG$T0, _System._tuple#2OG$T1))
     == _System._tuple#2OG$T1);

// Box/unbox axiom for Tclass._System.Tuple2OG
axiom (forall _System._tuple#2OG$T0: Ty, _System._tuple#2OG$T1: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.Tuple2OG(_System._tuple#2OG$T0, _System._tuple#2OG$T1)) } 
  $IsBox(bx, Tclass._System.Tuple2OG(_System._tuple#2OG$T0, _System._tuple#2OG$T1))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple2OG(_System._tuple#2OG$T0, _System._tuple#2OG$T1)));

// Constructor $Is
axiom (forall _System._tuple#2OG$T0: Ty, 
    _System._tuple#2OG$T1: Ty, 
    a#14#0#0: Box, 
    a#14#1#0: Box :: 
  { $Is(#_System._tuple#2OG._#Make2(a#14#0#0, a#14#1#0), 
      Tclass._System.Tuple2OG(_System._tuple#2OG$T0, _System._tuple#2OG$T1)) } 
  $Is(#_System._tuple#2OG._#Make2(a#14#0#0, a#14#1#0), 
      Tclass._System.Tuple2OG(_System._tuple#2OG$T0, _System._tuple#2OG$T1))
     <==> $IsBox(a#14#0#0, _System._tuple#2OG$T0)
       && $IsBox(a#14#1#0, _System._tuple#2OG$T1));

// Constructor $IsAlloc
axiom (forall _System._tuple#2OG$T0: Ty, 
    _System._tuple#2OG$T1: Ty, 
    a#14#0#0: Box, 
    a#14#1#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#2OG._#Make2(a#14#0#0, a#14#1#0), 
      Tclass._System.Tuple2OG(_System._tuple#2OG$T0, _System._tuple#2OG$T1), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#2OG._#Make2(a#14#0#0, a#14#1#0), 
        Tclass._System.Tuple2OG(_System._tuple#2OG$T0, _System._tuple#2OG$T1), 
        $h)
       <==> $IsAllocBox(a#14#0#0, _System._tuple#2OG$T0, $h)
         && $IsAllocBox(a#14#1#0, _System._tuple#2OG$T1, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#2OG$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple2OG._0(d), _System._tuple#2OG$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple2OG.___hMake2_q(d)
       && (exists _System._tuple#2OG$T1: Ty :: 
        { $IsAlloc(d, Tclass._System.Tuple2OG(_System._tuple#2OG$T0, _System._tuple#2OG$T1), $h) } 
        $IsAlloc(d, Tclass._System.Tuple2OG(_System._tuple#2OG$T0, _System._tuple#2OG$T1), $h))
     ==> $IsAllocBox(_System.Tuple2OG._0(d), _System._tuple#2OG$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#2OG$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple2OG._1(d), _System._tuple#2OG$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple2OG.___hMake2_q(d)
       && (exists _System._tuple#2OG$T0: Ty :: 
        { $IsAlloc(d, Tclass._System.Tuple2OG(_System._tuple#2OG$T0, _System._tuple#2OG$T1), $h) } 
        $IsAlloc(d, Tclass._System.Tuple2OG(_System._tuple#2OG$T0, _System._tuple#2OG$T1), $h))
     ==> $IsAllocBox(_System.Tuple2OG._1(d), _System._tuple#2OG$T1, $h));

// Constructor literal
axiom (forall a#15#0#0: Box, a#15#1#0: Box :: 
  { #_System._tuple#2OG._#Make2(Lit(a#15#0#0), Lit(a#15#1#0)) } 
  #_System._tuple#2OG._#Make2(Lit(a#15#0#0), Lit(a#15#1#0))
     == Lit(#_System._tuple#2OG._#Make2(a#15#0#0, a#15#1#0)));

function _System.Tuple2OG._0(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#16#0#0: Box, a#16#1#0: Box :: 
  { #_System._tuple#2OG._#Make2(a#16#0#0, a#16#1#0) } 
  _System.Tuple2OG._0(#_System._tuple#2OG._#Make2(a#16#0#0, a#16#1#0)) == a#16#0#0);

// Inductive rank
axiom (forall a#17#0#0: Box, a#17#1#0: Box :: 
  { #_System._tuple#2OG._#Make2(a#17#0#0, a#17#1#0) } 
  BoxRank(a#17#0#0) < DtRank(#_System._tuple#2OG._#Make2(a#17#0#0, a#17#1#0)));

function _System.Tuple2OG._1(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#18#0#0: Box, a#18#1#0: Box :: 
  { #_System._tuple#2OG._#Make2(a#18#0#0, a#18#1#0) } 
  _System.Tuple2OG._1(#_System._tuple#2OG._#Make2(a#18#0#0, a#18#1#0)) == a#18#1#0);

// Inductive rank
axiom (forall a#19#0#0: Box, a#19#1#0: Box :: 
  { #_System._tuple#2OG._#Make2(a#19#0#0, a#19#1#0) } 
  BoxRank(a#19#1#0) < DtRank(#_System._tuple#2OG._#Make2(a#19#0#0, a#19#1#0)));

// Depth-one case-split function
function $IsA#_System.Tuple2OG(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple2OG(d) } 
  $IsA#_System.Tuple2OG(d) ==> _System.Tuple2OG.___hMake2_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#2OG$T0: Ty, _System._tuple#2OG$T1: Ty, d: DatatypeType :: 
  { _System.Tuple2OG.___hMake2_q(d), $Is(d, Tclass._System.Tuple2OG(_System._tuple#2OG$T0, _System._tuple#2OG$T1)) } 
  $Is(d, Tclass._System.Tuple2OG(_System._tuple#2OG$T0, _System._tuple#2OG$T1))
     ==> _System.Tuple2OG.___hMake2_q(d));

// Datatype extensional equality declaration
function _System.Tuple2OG#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#2OG._#Make2
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple2OG#Equal(a, b) } 
  _System.Tuple2OG#Equal(a, b)
     <==> _System.Tuple2OG._0(a) == _System.Tuple2OG._0(b)
       && _System.Tuple2OG._1(a) == _System.Tuple2OG._1(b));

// Datatype extensionality axiom: _System._tuple#2OG
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple2OG#Equal(a, b) } 
  _System.Tuple2OG#Equal(a, b) <==> a == b);

const unique class._System.Tuple2OG: ClassName;

// Constructor function declaration
function #_System._tuple#3._#Make3(Box, Box, Box) : DatatypeType;

const unique ##_System._tuple#3._#Make3: DtCtorId
uses {
// Constructor identifier
axiom (forall a#20#0#0: Box, a#20#1#0: Box, a#20#2#0: Box :: 
  { #_System._tuple#3._#Make3(a#20#0#0, a#20#1#0, a#20#2#0) } 
  DatatypeCtorId(#_System._tuple#3._#Make3(a#20#0#0, a#20#1#0, a#20#2#0))
     == ##_System._tuple#3._#Make3);
}

function _System.Tuple3.___hMake3_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple3.___hMake3_q(d) } 
  _System.Tuple3.___hMake3_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#3._#Make3);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple3.___hMake3_q(d) } 
  _System.Tuple3.___hMake3_q(d)
     ==> (exists a#21#0#0: Box, a#21#1#0: Box, a#21#2#0: Box :: 
      d == #_System._tuple#3._#Make3(a#21#0#0, a#21#1#0, a#21#2#0)));

function Tclass._System.Tuple3(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.Tuple3: TyTag;

// Tclass._System.Tuple3 Tag
axiom (forall _System._tuple#3$T0: Ty, _System._tuple#3$T1: Ty, _System._tuple#3$T2: Ty :: 
  { Tclass._System.Tuple3(_System._tuple#3$T0, _System._tuple#3$T1, _System._tuple#3$T2) } 
  Tag(Tclass._System.Tuple3(_System._tuple#3$T0, _System._tuple#3$T1, _System._tuple#3$T2))
       == Tagclass._System.Tuple3
     && TagFamily(Tclass._System.Tuple3(_System._tuple#3$T0, _System._tuple#3$T1, _System._tuple#3$T2))
       == tytagFamily$_tuple#3);

function Tclass._System.Tuple3_0(Ty) : Ty;

// Tclass._System.Tuple3 injectivity 0
axiom (forall _System._tuple#3$T0: Ty, _System._tuple#3$T1: Ty, _System._tuple#3$T2: Ty :: 
  { Tclass._System.Tuple3(_System._tuple#3$T0, _System._tuple#3$T1, _System._tuple#3$T2) } 
  Tclass._System.Tuple3_0(Tclass._System.Tuple3(_System._tuple#3$T0, _System._tuple#3$T1, _System._tuple#3$T2))
     == _System._tuple#3$T0);

function Tclass._System.Tuple3_1(Ty) : Ty;

// Tclass._System.Tuple3 injectivity 1
axiom (forall _System._tuple#3$T0: Ty, _System._tuple#3$T1: Ty, _System._tuple#3$T2: Ty :: 
  { Tclass._System.Tuple3(_System._tuple#3$T0, _System._tuple#3$T1, _System._tuple#3$T2) } 
  Tclass._System.Tuple3_1(Tclass._System.Tuple3(_System._tuple#3$T0, _System._tuple#3$T1, _System._tuple#3$T2))
     == _System._tuple#3$T1);

function Tclass._System.Tuple3_2(Ty) : Ty;

// Tclass._System.Tuple3 injectivity 2
axiom (forall _System._tuple#3$T0: Ty, _System._tuple#3$T1: Ty, _System._tuple#3$T2: Ty :: 
  { Tclass._System.Tuple3(_System._tuple#3$T0, _System._tuple#3$T1, _System._tuple#3$T2) } 
  Tclass._System.Tuple3_2(Tclass._System.Tuple3(_System._tuple#3$T0, _System._tuple#3$T1, _System._tuple#3$T2))
     == _System._tuple#3$T2);

// Box/unbox axiom for Tclass._System.Tuple3
axiom (forall _System._tuple#3$T0: Ty, 
    _System._tuple#3$T1: Ty, 
    _System._tuple#3$T2: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.Tuple3(_System._tuple#3$T0, _System._tuple#3$T1, _System._tuple#3$T2)) } 
  $IsBox(bx, 
      Tclass._System.Tuple3(_System._tuple#3$T0, _System._tuple#3$T1, _System._tuple#3$T2))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple3(_System._tuple#3$T0, _System._tuple#3$T1, _System._tuple#3$T2)));

// Constructor $Is
axiom (forall _System._tuple#3$T0: Ty, 
    _System._tuple#3$T1: Ty, 
    _System._tuple#3$T2: Ty, 
    a#22#0#0: Box, 
    a#22#1#0: Box, 
    a#22#2#0: Box :: 
  { $Is(#_System._tuple#3._#Make3(a#22#0#0, a#22#1#0, a#22#2#0), 
      Tclass._System.Tuple3(_System._tuple#3$T0, _System._tuple#3$T1, _System._tuple#3$T2)) } 
  $Is(#_System._tuple#3._#Make3(a#22#0#0, a#22#1#0, a#22#2#0), 
      Tclass._System.Tuple3(_System._tuple#3$T0, _System._tuple#3$T1, _System._tuple#3$T2))
     <==> $IsBox(a#22#0#0, _System._tuple#3$T0)
       && $IsBox(a#22#1#0, _System._tuple#3$T1)
       && $IsBox(a#22#2#0, _System._tuple#3$T2));

// Constructor $IsAlloc
axiom (forall _System._tuple#3$T0: Ty, 
    _System._tuple#3$T1: Ty, 
    _System._tuple#3$T2: Ty, 
    a#22#0#0: Box, 
    a#22#1#0: Box, 
    a#22#2#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#3._#Make3(a#22#0#0, a#22#1#0, a#22#2#0), 
      Tclass._System.Tuple3(_System._tuple#3$T0, _System._tuple#3$T1, _System._tuple#3$T2), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#3._#Make3(a#22#0#0, a#22#1#0, a#22#2#0), 
        Tclass._System.Tuple3(_System._tuple#3$T0, _System._tuple#3$T1, _System._tuple#3$T2), 
        $h)
       <==> $IsAllocBox(a#22#0#0, _System._tuple#3$T0, $h)
         && $IsAllocBox(a#22#1#0, _System._tuple#3$T1, $h)
         && $IsAllocBox(a#22#2#0, _System._tuple#3$T2, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#3$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple3._0(d), _System._tuple#3$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple3.___hMake3_q(d)
       && (exists _System._tuple#3$T1: Ty, _System._tuple#3$T2: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple3(_System._tuple#3$T0, _System._tuple#3$T1, _System._tuple#3$T2), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple3(_System._tuple#3$T0, _System._tuple#3$T1, _System._tuple#3$T2), 
          $h))
     ==> $IsAllocBox(_System.Tuple3._0(d), _System._tuple#3$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#3$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple3._1(d), _System._tuple#3$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple3.___hMake3_q(d)
       && (exists _System._tuple#3$T0: Ty, _System._tuple#3$T2: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple3(_System._tuple#3$T0, _System._tuple#3$T1, _System._tuple#3$T2), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple3(_System._tuple#3$T0, _System._tuple#3$T1, _System._tuple#3$T2), 
          $h))
     ==> $IsAllocBox(_System.Tuple3._1(d), _System._tuple#3$T1, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#3$T2: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple3._2(d), _System._tuple#3$T2, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple3.___hMake3_q(d)
       && (exists _System._tuple#3$T0: Ty, _System._tuple#3$T1: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple3(_System._tuple#3$T0, _System._tuple#3$T1, _System._tuple#3$T2), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple3(_System._tuple#3$T0, _System._tuple#3$T1, _System._tuple#3$T2), 
          $h))
     ==> $IsAllocBox(_System.Tuple3._2(d), _System._tuple#3$T2, $h));

// Constructor literal
axiom (forall a#23#0#0: Box, a#23#1#0: Box, a#23#2#0: Box :: 
  { #_System._tuple#3._#Make3(Lit(a#23#0#0), Lit(a#23#1#0), Lit(a#23#2#0)) } 
  #_System._tuple#3._#Make3(Lit(a#23#0#0), Lit(a#23#1#0), Lit(a#23#2#0))
     == Lit(#_System._tuple#3._#Make3(a#23#0#0, a#23#1#0, a#23#2#0)));

function _System.Tuple3._0(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#24#0#0: Box, a#24#1#0: Box, a#24#2#0: Box :: 
  { #_System._tuple#3._#Make3(a#24#0#0, a#24#1#0, a#24#2#0) } 
  _System.Tuple3._0(#_System._tuple#3._#Make3(a#24#0#0, a#24#1#0, a#24#2#0))
     == a#24#0#0);

// Inductive rank
axiom (forall a#25#0#0: Box, a#25#1#0: Box, a#25#2#0: Box :: 
  { #_System._tuple#3._#Make3(a#25#0#0, a#25#1#0, a#25#2#0) } 
  BoxRank(a#25#0#0)
     < DtRank(#_System._tuple#3._#Make3(a#25#0#0, a#25#1#0, a#25#2#0)));

function _System.Tuple3._1(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#26#0#0: Box, a#26#1#0: Box, a#26#2#0: Box :: 
  { #_System._tuple#3._#Make3(a#26#0#0, a#26#1#0, a#26#2#0) } 
  _System.Tuple3._1(#_System._tuple#3._#Make3(a#26#0#0, a#26#1#0, a#26#2#0))
     == a#26#1#0);

// Inductive rank
axiom (forall a#27#0#0: Box, a#27#1#0: Box, a#27#2#0: Box :: 
  { #_System._tuple#3._#Make3(a#27#0#0, a#27#1#0, a#27#2#0) } 
  BoxRank(a#27#1#0)
     < DtRank(#_System._tuple#3._#Make3(a#27#0#0, a#27#1#0, a#27#2#0)));

function _System.Tuple3._2(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#28#0#0: Box, a#28#1#0: Box, a#28#2#0: Box :: 
  { #_System._tuple#3._#Make3(a#28#0#0, a#28#1#0, a#28#2#0) } 
  _System.Tuple3._2(#_System._tuple#3._#Make3(a#28#0#0, a#28#1#0, a#28#2#0))
     == a#28#2#0);

// Inductive rank
axiom (forall a#29#0#0: Box, a#29#1#0: Box, a#29#2#0: Box :: 
  { #_System._tuple#3._#Make3(a#29#0#0, a#29#1#0, a#29#2#0) } 
  BoxRank(a#29#2#0)
     < DtRank(#_System._tuple#3._#Make3(a#29#0#0, a#29#1#0, a#29#2#0)));

// Depth-one case-split function
function $IsA#_System.Tuple3(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple3(d) } 
  $IsA#_System.Tuple3(d) ==> _System.Tuple3.___hMake3_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#3$T0: Ty, 
    _System._tuple#3$T1: Ty, 
    _System._tuple#3$T2: Ty, 
    d: DatatypeType :: 
  { _System.Tuple3.___hMake3_q(d), $Is(d, 
      Tclass._System.Tuple3(_System._tuple#3$T0, _System._tuple#3$T1, _System._tuple#3$T2)) } 
  $Is(d, 
      Tclass._System.Tuple3(_System._tuple#3$T0, _System._tuple#3$T1, _System._tuple#3$T2))
     ==> _System.Tuple3.___hMake3_q(d));

// Datatype extensional equality declaration
function _System.Tuple3#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#3._#Make3
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple3#Equal(a, b) } 
  _System.Tuple3#Equal(a, b)
     <==> _System.Tuple3._0(a) == _System.Tuple3._0(b)
       && _System.Tuple3._1(a) == _System.Tuple3._1(b)
       && _System.Tuple3._2(a) == _System.Tuple3._2(b));

// Datatype extensionality axiom: _System._tuple#3
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple3#Equal(a, b) } 
  _System.Tuple3#Equal(a, b) <==> a == b);

const unique class._System.Tuple3: ClassName;

// Constructor function declaration
function #_System._tuple#4._#Make4(Box, Box, Box, Box) : DatatypeType;

const unique ##_System._tuple#4._#Make4: DtCtorId
uses {
// Constructor identifier
axiom (forall a#30#0#0: Box, a#30#1#0: Box, a#30#2#0: Box, a#30#3#0: Box :: 
  { #_System._tuple#4._#Make4(a#30#0#0, a#30#1#0, a#30#2#0, a#30#3#0) } 
  DatatypeCtorId(#_System._tuple#4._#Make4(a#30#0#0, a#30#1#0, a#30#2#0, a#30#3#0))
     == ##_System._tuple#4._#Make4);
}

function _System.Tuple4.___hMake4_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple4.___hMake4_q(d) } 
  _System.Tuple4.___hMake4_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#4._#Make4);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple4.___hMake4_q(d) } 
  _System.Tuple4.___hMake4_q(d)
     ==> (exists a#31#0#0: Box, a#31#1#0: Box, a#31#2#0: Box, a#31#3#0: Box :: 
      d == #_System._tuple#4._#Make4(a#31#0#0, a#31#1#0, a#31#2#0, a#31#3#0)));

function Tclass._System.Tuple4(Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.Tuple4: TyTag;

// Tclass._System.Tuple4 Tag
axiom (forall _System._tuple#4$T0: Ty, 
    _System._tuple#4$T1: Ty, 
    _System._tuple#4$T2: Ty, 
    _System._tuple#4$T3: Ty :: 
  { Tclass._System.Tuple4(_System._tuple#4$T0, 
      _System._tuple#4$T1, 
      _System._tuple#4$T2, 
      _System._tuple#4$T3) } 
  Tag(Tclass._System.Tuple4(_System._tuple#4$T0, 
          _System._tuple#4$T1, 
          _System._tuple#4$T2, 
          _System._tuple#4$T3))
       == Tagclass._System.Tuple4
     && TagFamily(Tclass._System.Tuple4(_System._tuple#4$T0, 
          _System._tuple#4$T1, 
          _System._tuple#4$T2, 
          _System._tuple#4$T3))
       == tytagFamily$_tuple#4);

function Tclass._System.Tuple4_0(Ty) : Ty;

// Tclass._System.Tuple4 injectivity 0
axiom (forall _System._tuple#4$T0: Ty, 
    _System._tuple#4$T1: Ty, 
    _System._tuple#4$T2: Ty, 
    _System._tuple#4$T3: Ty :: 
  { Tclass._System.Tuple4(_System._tuple#4$T0, 
      _System._tuple#4$T1, 
      _System._tuple#4$T2, 
      _System._tuple#4$T3) } 
  Tclass._System.Tuple4_0(Tclass._System.Tuple4(_System._tuple#4$T0, 
        _System._tuple#4$T1, 
        _System._tuple#4$T2, 
        _System._tuple#4$T3))
     == _System._tuple#4$T0);

function Tclass._System.Tuple4_1(Ty) : Ty;

// Tclass._System.Tuple4 injectivity 1
axiom (forall _System._tuple#4$T0: Ty, 
    _System._tuple#4$T1: Ty, 
    _System._tuple#4$T2: Ty, 
    _System._tuple#4$T3: Ty :: 
  { Tclass._System.Tuple4(_System._tuple#4$T0, 
      _System._tuple#4$T1, 
      _System._tuple#4$T2, 
      _System._tuple#4$T3) } 
  Tclass._System.Tuple4_1(Tclass._System.Tuple4(_System._tuple#4$T0, 
        _System._tuple#4$T1, 
        _System._tuple#4$T2, 
        _System._tuple#4$T3))
     == _System._tuple#4$T1);

function Tclass._System.Tuple4_2(Ty) : Ty;

// Tclass._System.Tuple4 injectivity 2
axiom (forall _System._tuple#4$T0: Ty, 
    _System._tuple#4$T1: Ty, 
    _System._tuple#4$T2: Ty, 
    _System._tuple#4$T3: Ty :: 
  { Tclass._System.Tuple4(_System._tuple#4$T0, 
      _System._tuple#4$T1, 
      _System._tuple#4$T2, 
      _System._tuple#4$T3) } 
  Tclass._System.Tuple4_2(Tclass._System.Tuple4(_System._tuple#4$T0, 
        _System._tuple#4$T1, 
        _System._tuple#4$T2, 
        _System._tuple#4$T3))
     == _System._tuple#4$T2);

function Tclass._System.Tuple4_3(Ty) : Ty;

// Tclass._System.Tuple4 injectivity 3
axiom (forall _System._tuple#4$T0: Ty, 
    _System._tuple#4$T1: Ty, 
    _System._tuple#4$T2: Ty, 
    _System._tuple#4$T3: Ty :: 
  { Tclass._System.Tuple4(_System._tuple#4$T0, 
      _System._tuple#4$T1, 
      _System._tuple#4$T2, 
      _System._tuple#4$T3) } 
  Tclass._System.Tuple4_3(Tclass._System.Tuple4(_System._tuple#4$T0, 
        _System._tuple#4$T1, 
        _System._tuple#4$T2, 
        _System._tuple#4$T3))
     == _System._tuple#4$T3);

// Box/unbox axiom for Tclass._System.Tuple4
axiom (forall _System._tuple#4$T0: Ty, 
    _System._tuple#4$T1: Ty, 
    _System._tuple#4$T2: Ty, 
    _System._tuple#4$T3: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.Tuple4(_System._tuple#4$T0, 
        _System._tuple#4$T1, 
        _System._tuple#4$T2, 
        _System._tuple#4$T3)) } 
  $IsBox(bx, 
      Tclass._System.Tuple4(_System._tuple#4$T0, 
        _System._tuple#4$T1, 
        _System._tuple#4$T2, 
        _System._tuple#4$T3))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple4(_System._tuple#4$T0, 
          _System._tuple#4$T1, 
          _System._tuple#4$T2, 
          _System._tuple#4$T3)));

// Constructor $Is
axiom (forall _System._tuple#4$T0: Ty, 
    _System._tuple#4$T1: Ty, 
    _System._tuple#4$T2: Ty, 
    _System._tuple#4$T3: Ty, 
    a#32#0#0: Box, 
    a#32#1#0: Box, 
    a#32#2#0: Box, 
    a#32#3#0: Box :: 
  { $Is(#_System._tuple#4._#Make4(a#32#0#0, a#32#1#0, a#32#2#0, a#32#3#0), 
      Tclass._System.Tuple4(_System._tuple#4$T0, 
        _System._tuple#4$T1, 
        _System._tuple#4$T2, 
        _System._tuple#4$T3)) } 
  $Is(#_System._tuple#4._#Make4(a#32#0#0, a#32#1#0, a#32#2#0, a#32#3#0), 
      Tclass._System.Tuple4(_System._tuple#4$T0, 
        _System._tuple#4$T1, 
        _System._tuple#4$T2, 
        _System._tuple#4$T3))
     <==> $IsBox(a#32#0#0, _System._tuple#4$T0)
       && $IsBox(a#32#1#0, _System._tuple#4$T1)
       && $IsBox(a#32#2#0, _System._tuple#4$T2)
       && $IsBox(a#32#3#0, _System._tuple#4$T3));

// Constructor $IsAlloc
axiom (forall _System._tuple#4$T0: Ty, 
    _System._tuple#4$T1: Ty, 
    _System._tuple#4$T2: Ty, 
    _System._tuple#4$T3: Ty, 
    a#32#0#0: Box, 
    a#32#1#0: Box, 
    a#32#2#0: Box, 
    a#32#3#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#4._#Make4(a#32#0#0, a#32#1#0, a#32#2#0, a#32#3#0), 
      Tclass._System.Tuple4(_System._tuple#4$T0, 
        _System._tuple#4$T1, 
        _System._tuple#4$T2, 
        _System._tuple#4$T3), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#4._#Make4(a#32#0#0, a#32#1#0, a#32#2#0, a#32#3#0), 
        Tclass._System.Tuple4(_System._tuple#4$T0, 
          _System._tuple#4$T1, 
          _System._tuple#4$T2, 
          _System._tuple#4$T3), 
        $h)
       <==> $IsAllocBox(a#32#0#0, _System._tuple#4$T0, $h)
         && $IsAllocBox(a#32#1#0, _System._tuple#4$T1, $h)
         && $IsAllocBox(a#32#2#0, _System._tuple#4$T2, $h)
         && $IsAllocBox(a#32#3#0, _System._tuple#4$T3, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#4$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple4._0(d), _System._tuple#4$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple4.___hMake4_q(d)
       && (exists _System._tuple#4$T1: Ty, _System._tuple#4$T2: Ty, _System._tuple#4$T3: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple4(_System._tuple#4$T0, 
              _System._tuple#4$T1, 
              _System._tuple#4$T2, 
              _System._tuple#4$T3), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple4(_System._tuple#4$T0, 
            _System._tuple#4$T1, 
            _System._tuple#4$T2, 
            _System._tuple#4$T3), 
          $h))
     ==> $IsAllocBox(_System.Tuple4._0(d), _System._tuple#4$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#4$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple4._1(d), _System._tuple#4$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple4.___hMake4_q(d)
       && (exists _System._tuple#4$T0: Ty, _System._tuple#4$T2: Ty, _System._tuple#4$T3: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple4(_System._tuple#4$T0, 
              _System._tuple#4$T1, 
              _System._tuple#4$T2, 
              _System._tuple#4$T3), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple4(_System._tuple#4$T0, 
            _System._tuple#4$T1, 
            _System._tuple#4$T2, 
            _System._tuple#4$T3), 
          $h))
     ==> $IsAllocBox(_System.Tuple4._1(d), _System._tuple#4$T1, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#4$T2: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple4._2(d), _System._tuple#4$T2, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple4.___hMake4_q(d)
       && (exists _System._tuple#4$T0: Ty, _System._tuple#4$T1: Ty, _System._tuple#4$T3: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple4(_System._tuple#4$T0, 
              _System._tuple#4$T1, 
              _System._tuple#4$T2, 
              _System._tuple#4$T3), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple4(_System._tuple#4$T0, 
            _System._tuple#4$T1, 
            _System._tuple#4$T2, 
            _System._tuple#4$T3), 
          $h))
     ==> $IsAllocBox(_System.Tuple4._2(d), _System._tuple#4$T2, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#4$T3: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple4._3(d), _System._tuple#4$T3, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple4.___hMake4_q(d)
       && (exists _System._tuple#4$T0: Ty, _System._tuple#4$T1: Ty, _System._tuple#4$T2: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple4(_System._tuple#4$T0, 
              _System._tuple#4$T1, 
              _System._tuple#4$T2, 
              _System._tuple#4$T3), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple4(_System._tuple#4$T0, 
            _System._tuple#4$T1, 
            _System._tuple#4$T2, 
            _System._tuple#4$T3), 
          $h))
     ==> $IsAllocBox(_System.Tuple4._3(d), _System._tuple#4$T3, $h));

// Constructor literal
axiom (forall a#33#0#0: Box, a#33#1#0: Box, a#33#2#0: Box, a#33#3#0: Box :: 
  { #_System._tuple#4._#Make4(Lit(a#33#0#0), Lit(a#33#1#0), Lit(a#33#2#0), Lit(a#33#3#0)) } 
  #_System._tuple#4._#Make4(Lit(a#33#0#0), Lit(a#33#1#0), Lit(a#33#2#0), Lit(a#33#3#0))
     == Lit(#_System._tuple#4._#Make4(a#33#0#0, a#33#1#0, a#33#2#0, a#33#3#0)));

function _System.Tuple4._0(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#34#0#0: Box, a#34#1#0: Box, a#34#2#0: Box, a#34#3#0: Box :: 
  { #_System._tuple#4._#Make4(a#34#0#0, a#34#1#0, a#34#2#0, a#34#3#0) } 
  _System.Tuple4._0(#_System._tuple#4._#Make4(a#34#0#0, a#34#1#0, a#34#2#0, a#34#3#0))
     == a#34#0#0);

// Inductive rank
axiom (forall a#35#0#0: Box, a#35#1#0: Box, a#35#2#0: Box, a#35#3#0: Box :: 
  { #_System._tuple#4._#Make4(a#35#0#0, a#35#1#0, a#35#2#0, a#35#3#0) } 
  BoxRank(a#35#0#0)
     < DtRank(#_System._tuple#4._#Make4(a#35#0#0, a#35#1#0, a#35#2#0, a#35#3#0)));

function _System.Tuple4._1(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#36#0#0: Box, a#36#1#0: Box, a#36#2#0: Box, a#36#3#0: Box :: 
  { #_System._tuple#4._#Make4(a#36#0#0, a#36#1#0, a#36#2#0, a#36#3#0) } 
  _System.Tuple4._1(#_System._tuple#4._#Make4(a#36#0#0, a#36#1#0, a#36#2#0, a#36#3#0))
     == a#36#1#0);

// Inductive rank
axiom (forall a#37#0#0: Box, a#37#1#0: Box, a#37#2#0: Box, a#37#3#0: Box :: 
  { #_System._tuple#4._#Make4(a#37#0#0, a#37#1#0, a#37#2#0, a#37#3#0) } 
  BoxRank(a#37#1#0)
     < DtRank(#_System._tuple#4._#Make4(a#37#0#0, a#37#1#0, a#37#2#0, a#37#3#0)));

function _System.Tuple4._2(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#38#0#0: Box, a#38#1#0: Box, a#38#2#0: Box, a#38#3#0: Box :: 
  { #_System._tuple#4._#Make4(a#38#0#0, a#38#1#0, a#38#2#0, a#38#3#0) } 
  _System.Tuple4._2(#_System._tuple#4._#Make4(a#38#0#0, a#38#1#0, a#38#2#0, a#38#3#0))
     == a#38#2#0);

// Inductive rank
axiom (forall a#39#0#0: Box, a#39#1#0: Box, a#39#2#0: Box, a#39#3#0: Box :: 
  { #_System._tuple#4._#Make4(a#39#0#0, a#39#1#0, a#39#2#0, a#39#3#0) } 
  BoxRank(a#39#2#0)
     < DtRank(#_System._tuple#4._#Make4(a#39#0#0, a#39#1#0, a#39#2#0, a#39#3#0)));

function _System.Tuple4._3(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#40#0#0: Box, a#40#1#0: Box, a#40#2#0: Box, a#40#3#0: Box :: 
  { #_System._tuple#4._#Make4(a#40#0#0, a#40#1#0, a#40#2#0, a#40#3#0) } 
  _System.Tuple4._3(#_System._tuple#4._#Make4(a#40#0#0, a#40#1#0, a#40#2#0, a#40#3#0))
     == a#40#3#0);

// Inductive rank
axiom (forall a#41#0#0: Box, a#41#1#0: Box, a#41#2#0: Box, a#41#3#0: Box :: 
  { #_System._tuple#4._#Make4(a#41#0#0, a#41#1#0, a#41#2#0, a#41#3#0) } 
  BoxRank(a#41#3#0)
     < DtRank(#_System._tuple#4._#Make4(a#41#0#0, a#41#1#0, a#41#2#0, a#41#3#0)));

// Depth-one case-split function
function $IsA#_System.Tuple4(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple4(d) } 
  $IsA#_System.Tuple4(d) ==> _System.Tuple4.___hMake4_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#4$T0: Ty, 
    _System._tuple#4$T1: Ty, 
    _System._tuple#4$T2: Ty, 
    _System._tuple#4$T3: Ty, 
    d: DatatypeType :: 
  { _System.Tuple4.___hMake4_q(d), $Is(d, 
      Tclass._System.Tuple4(_System._tuple#4$T0, 
        _System._tuple#4$T1, 
        _System._tuple#4$T2, 
        _System._tuple#4$T3)) } 
  $Is(d, 
      Tclass._System.Tuple4(_System._tuple#4$T0, 
        _System._tuple#4$T1, 
        _System._tuple#4$T2, 
        _System._tuple#4$T3))
     ==> _System.Tuple4.___hMake4_q(d));

// Datatype extensional equality declaration
function _System.Tuple4#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#4._#Make4
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple4#Equal(a, b) } 
  _System.Tuple4#Equal(a, b)
     <==> _System.Tuple4._0(a) == _System.Tuple4._0(b)
       && _System.Tuple4._1(a) == _System.Tuple4._1(b)
       && _System.Tuple4._2(a) == _System.Tuple4._2(b)
       && _System.Tuple4._3(a) == _System.Tuple4._3(b));

// Datatype extensionality axiom: _System._tuple#4
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple4#Equal(a, b) } 
  _System.Tuple4#Equal(a, b) <==> a == b);

const unique class._System.Tuple4: ClassName;

// Constructor function declaration
function #_System._tuple#5._#Make5(Box, Box, Box, Box, Box) : DatatypeType;

const unique ##_System._tuple#5._#Make5: DtCtorId
uses {
// Constructor identifier
axiom (forall a#42#0#0: Box, a#42#1#0: Box, a#42#2#0: Box, a#42#3#0: Box, a#42#4#0: Box :: 
  { #_System._tuple#5._#Make5(a#42#0#0, a#42#1#0, a#42#2#0, a#42#3#0, a#42#4#0) } 
  DatatypeCtorId(#_System._tuple#5._#Make5(a#42#0#0, a#42#1#0, a#42#2#0, a#42#3#0, a#42#4#0))
     == ##_System._tuple#5._#Make5);
}

function _System.Tuple5.___hMake5_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple5.___hMake5_q(d) } 
  _System.Tuple5.___hMake5_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#5._#Make5);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple5.___hMake5_q(d) } 
  _System.Tuple5.___hMake5_q(d)
     ==> (exists a#43#0#0: Box, a#43#1#0: Box, a#43#2#0: Box, a#43#3#0: Box, a#43#4#0: Box :: 
      d == #_System._tuple#5._#Make5(a#43#0#0, a#43#1#0, a#43#2#0, a#43#3#0, a#43#4#0)));

function Tclass._System.Tuple5(Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.Tuple5: TyTag;

// Tclass._System.Tuple5 Tag
axiom (forall _System._tuple#5$T0: Ty, 
    _System._tuple#5$T1: Ty, 
    _System._tuple#5$T2: Ty, 
    _System._tuple#5$T3: Ty, 
    _System._tuple#5$T4: Ty :: 
  { Tclass._System.Tuple5(_System._tuple#5$T0, 
      _System._tuple#5$T1, 
      _System._tuple#5$T2, 
      _System._tuple#5$T3, 
      _System._tuple#5$T4) } 
  Tag(Tclass._System.Tuple5(_System._tuple#5$T0, 
          _System._tuple#5$T1, 
          _System._tuple#5$T2, 
          _System._tuple#5$T3, 
          _System._tuple#5$T4))
       == Tagclass._System.Tuple5
     && TagFamily(Tclass._System.Tuple5(_System._tuple#5$T0, 
          _System._tuple#5$T1, 
          _System._tuple#5$T2, 
          _System._tuple#5$T3, 
          _System._tuple#5$T4))
       == tytagFamily$_tuple#5);

function Tclass._System.Tuple5_0(Ty) : Ty;

// Tclass._System.Tuple5 injectivity 0
axiom (forall _System._tuple#5$T0: Ty, 
    _System._tuple#5$T1: Ty, 
    _System._tuple#5$T2: Ty, 
    _System._tuple#5$T3: Ty, 
    _System._tuple#5$T4: Ty :: 
  { Tclass._System.Tuple5(_System._tuple#5$T0, 
      _System._tuple#5$T1, 
      _System._tuple#5$T2, 
      _System._tuple#5$T3, 
      _System._tuple#5$T4) } 
  Tclass._System.Tuple5_0(Tclass._System.Tuple5(_System._tuple#5$T0, 
        _System._tuple#5$T1, 
        _System._tuple#5$T2, 
        _System._tuple#5$T3, 
        _System._tuple#5$T4))
     == _System._tuple#5$T0);

function Tclass._System.Tuple5_1(Ty) : Ty;

// Tclass._System.Tuple5 injectivity 1
axiom (forall _System._tuple#5$T0: Ty, 
    _System._tuple#5$T1: Ty, 
    _System._tuple#5$T2: Ty, 
    _System._tuple#5$T3: Ty, 
    _System._tuple#5$T4: Ty :: 
  { Tclass._System.Tuple5(_System._tuple#5$T0, 
      _System._tuple#5$T1, 
      _System._tuple#5$T2, 
      _System._tuple#5$T3, 
      _System._tuple#5$T4) } 
  Tclass._System.Tuple5_1(Tclass._System.Tuple5(_System._tuple#5$T0, 
        _System._tuple#5$T1, 
        _System._tuple#5$T2, 
        _System._tuple#5$T3, 
        _System._tuple#5$T4))
     == _System._tuple#5$T1);

function Tclass._System.Tuple5_2(Ty) : Ty;

// Tclass._System.Tuple5 injectivity 2
axiom (forall _System._tuple#5$T0: Ty, 
    _System._tuple#5$T1: Ty, 
    _System._tuple#5$T2: Ty, 
    _System._tuple#5$T3: Ty, 
    _System._tuple#5$T4: Ty :: 
  { Tclass._System.Tuple5(_System._tuple#5$T0, 
      _System._tuple#5$T1, 
      _System._tuple#5$T2, 
      _System._tuple#5$T3, 
      _System._tuple#5$T4) } 
  Tclass._System.Tuple5_2(Tclass._System.Tuple5(_System._tuple#5$T0, 
        _System._tuple#5$T1, 
        _System._tuple#5$T2, 
        _System._tuple#5$T3, 
        _System._tuple#5$T4))
     == _System._tuple#5$T2);

function Tclass._System.Tuple5_3(Ty) : Ty;

// Tclass._System.Tuple5 injectivity 3
axiom (forall _System._tuple#5$T0: Ty, 
    _System._tuple#5$T1: Ty, 
    _System._tuple#5$T2: Ty, 
    _System._tuple#5$T3: Ty, 
    _System._tuple#5$T4: Ty :: 
  { Tclass._System.Tuple5(_System._tuple#5$T0, 
      _System._tuple#5$T1, 
      _System._tuple#5$T2, 
      _System._tuple#5$T3, 
      _System._tuple#5$T4) } 
  Tclass._System.Tuple5_3(Tclass._System.Tuple5(_System._tuple#5$T0, 
        _System._tuple#5$T1, 
        _System._tuple#5$T2, 
        _System._tuple#5$T3, 
        _System._tuple#5$T4))
     == _System._tuple#5$T3);

function Tclass._System.Tuple5_4(Ty) : Ty;

// Tclass._System.Tuple5 injectivity 4
axiom (forall _System._tuple#5$T0: Ty, 
    _System._tuple#5$T1: Ty, 
    _System._tuple#5$T2: Ty, 
    _System._tuple#5$T3: Ty, 
    _System._tuple#5$T4: Ty :: 
  { Tclass._System.Tuple5(_System._tuple#5$T0, 
      _System._tuple#5$T1, 
      _System._tuple#5$T2, 
      _System._tuple#5$T3, 
      _System._tuple#5$T4) } 
  Tclass._System.Tuple5_4(Tclass._System.Tuple5(_System._tuple#5$T0, 
        _System._tuple#5$T1, 
        _System._tuple#5$T2, 
        _System._tuple#5$T3, 
        _System._tuple#5$T4))
     == _System._tuple#5$T4);

// Box/unbox axiom for Tclass._System.Tuple5
axiom (forall _System._tuple#5$T0: Ty, 
    _System._tuple#5$T1: Ty, 
    _System._tuple#5$T2: Ty, 
    _System._tuple#5$T3: Ty, 
    _System._tuple#5$T4: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.Tuple5(_System._tuple#5$T0, 
        _System._tuple#5$T1, 
        _System._tuple#5$T2, 
        _System._tuple#5$T3, 
        _System._tuple#5$T4)) } 
  $IsBox(bx, 
      Tclass._System.Tuple5(_System._tuple#5$T0, 
        _System._tuple#5$T1, 
        _System._tuple#5$T2, 
        _System._tuple#5$T3, 
        _System._tuple#5$T4))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple5(_System._tuple#5$T0, 
          _System._tuple#5$T1, 
          _System._tuple#5$T2, 
          _System._tuple#5$T3, 
          _System._tuple#5$T4)));

// Constructor $Is
axiom (forall _System._tuple#5$T0: Ty, 
    _System._tuple#5$T1: Ty, 
    _System._tuple#5$T2: Ty, 
    _System._tuple#5$T3: Ty, 
    _System._tuple#5$T4: Ty, 
    a#44#0#0: Box, 
    a#44#1#0: Box, 
    a#44#2#0: Box, 
    a#44#3#0: Box, 
    a#44#4#0: Box :: 
  { $Is(#_System._tuple#5._#Make5(a#44#0#0, a#44#1#0, a#44#2#0, a#44#3#0, a#44#4#0), 
      Tclass._System.Tuple5(_System._tuple#5$T0, 
        _System._tuple#5$T1, 
        _System._tuple#5$T2, 
        _System._tuple#5$T3, 
        _System._tuple#5$T4)) } 
  $Is(#_System._tuple#5._#Make5(a#44#0#0, a#44#1#0, a#44#2#0, a#44#3#0, a#44#4#0), 
      Tclass._System.Tuple5(_System._tuple#5$T0, 
        _System._tuple#5$T1, 
        _System._tuple#5$T2, 
        _System._tuple#5$T3, 
        _System._tuple#5$T4))
     <==> $IsBox(a#44#0#0, _System._tuple#5$T0)
       && $IsBox(a#44#1#0, _System._tuple#5$T1)
       && $IsBox(a#44#2#0, _System._tuple#5$T2)
       && $IsBox(a#44#3#0, _System._tuple#5$T3)
       && $IsBox(a#44#4#0, _System._tuple#5$T4));

// Constructor $IsAlloc
axiom (forall _System._tuple#5$T0: Ty, 
    _System._tuple#5$T1: Ty, 
    _System._tuple#5$T2: Ty, 
    _System._tuple#5$T3: Ty, 
    _System._tuple#5$T4: Ty, 
    a#44#0#0: Box, 
    a#44#1#0: Box, 
    a#44#2#0: Box, 
    a#44#3#0: Box, 
    a#44#4#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#5._#Make5(a#44#0#0, a#44#1#0, a#44#2#0, a#44#3#0, a#44#4#0), 
      Tclass._System.Tuple5(_System._tuple#5$T0, 
        _System._tuple#5$T1, 
        _System._tuple#5$T2, 
        _System._tuple#5$T3, 
        _System._tuple#5$T4), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#5._#Make5(a#44#0#0, a#44#1#0, a#44#2#0, a#44#3#0, a#44#4#0), 
        Tclass._System.Tuple5(_System._tuple#5$T0, 
          _System._tuple#5$T1, 
          _System._tuple#5$T2, 
          _System._tuple#5$T3, 
          _System._tuple#5$T4), 
        $h)
       <==> $IsAllocBox(a#44#0#0, _System._tuple#5$T0, $h)
         && $IsAllocBox(a#44#1#0, _System._tuple#5$T1, $h)
         && $IsAllocBox(a#44#2#0, _System._tuple#5$T2, $h)
         && $IsAllocBox(a#44#3#0, _System._tuple#5$T3, $h)
         && $IsAllocBox(a#44#4#0, _System._tuple#5$T4, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#5$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple5._0(d), _System._tuple#5$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple5.___hMake5_q(d)
       && (exists _System._tuple#5$T1: Ty, 
          _System._tuple#5$T2: Ty, 
          _System._tuple#5$T3: Ty, 
          _System._tuple#5$T4: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple5(_System._tuple#5$T0, 
              _System._tuple#5$T1, 
              _System._tuple#5$T2, 
              _System._tuple#5$T3, 
              _System._tuple#5$T4), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple5(_System._tuple#5$T0, 
            _System._tuple#5$T1, 
            _System._tuple#5$T2, 
            _System._tuple#5$T3, 
            _System._tuple#5$T4), 
          $h))
     ==> $IsAllocBox(_System.Tuple5._0(d), _System._tuple#5$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#5$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple5._1(d), _System._tuple#5$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple5.___hMake5_q(d)
       && (exists _System._tuple#5$T0: Ty, 
          _System._tuple#5$T2: Ty, 
          _System._tuple#5$T3: Ty, 
          _System._tuple#5$T4: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple5(_System._tuple#5$T0, 
              _System._tuple#5$T1, 
              _System._tuple#5$T2, 
              _System._tuple#5$T3, 
              _System._tuple#5$T4), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple5(_System._tuple#5$T0, 
            _System._tuple#5$T1, 
            _System._tuple#5$T2, 
            _System._tuple#5$T3, 
            _System._tuple#5$T4), 
          $h))
     ==> $IsAllocBox(_System.Tuple5._1(d), _System._tuple#5$T1, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#5$T2: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple5._2(d), _System._tuple#5$T2, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple5.___hMake5_q(d)
       && (exists _System._tuple#5$T0: Ty, 
          _System._tuple#5$T1: Ty, 
          _System._tuple#5$T3: Ty, 
          _System._tuple#5$T4: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple5(_System._tuple#5$T0, 
              _System._tuple#5$T1, 
              _System._tuple#5$T2, 
              _System._tuple#5$T3, 
              _System._tuple#5$T4), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple5(_System._tuple#5$T0, 
            _System._tuple#5$T1, 
            _System._tuple#5$T2, 
            _System._tuple#5$T3, 
            _System._tuple#5$T4), 
          $h))
     ==> $IsAllocBox(_System.Tuple5._2(d), _System._tuple#5$T2, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#5$T3: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple5._3(d), _System._tuple#5$T3, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple5.___hMake5_q(d)
       && (exists _System._tuple#5$T0: Ty, 
          _System._tuple#5$T1: Ty, 
          _System._tuple#5$T2: Ty, 
          _System._tuple#5$T4: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple5(_System._tuple#5$T0, 
              _System._tuple#5$T1, 
              _System._tuple#5$T2, 
              _System._tuple#5$T3, 
              _System._tuple#5$T4), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple5(_System._tuple#5$T0, 
            _System._tuple#5$T1, 
            _System._tuple#5$T2, 
            _System._tuple#5$T3, 
            _System._tuple#5$T4), 
          $h))
     ==> $IsAllocBox(_System.Tuple5._3(d), _System._tuple#5$T3, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#5$T4: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple5._4(d), _System._tuple#5$T4, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple5.___hMake5_q(d)
       && (exists _System._tuple#5$T0: Ty, 
          _System._tuple#5$T1: Ty, 
          _System._tuple#5$T2: Ty, 
          _System._tuple#5$T3: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple5(_System._tuple#5$T0, 
              _System._tuple#5$T1, 
              _System._tuple#5$T2, 
              _System._tuple#5$T3, 
              _System._tuple#5$T4), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple5(_System._tuple#5$T0, 
            _System._tuple#5$T1, 
            _System._tuple#5$T2, 
            _System._tuple#5$T3, 
            _System._tuple#5$T4), 
          $h))
     ==> $IsAllocBox(_System.Tuple5._4(d), _System._tuple#5$T4, $h));

// Constructor literal
axiom (forall a#45#0#0: Box, a#45#1#0: Box, a#45#2#0: Box, a#45#3#0: Box, a#45#4#0: Box :: 
  { #_System._tuple#5._#Make5(Lit(a#45#0#0), Lit(a#45#1#0), Lit(a#45#2#0), Lit(a#45#3#0), Lit(a#45#4#0)) } 
  #_System._tuple#5._#Make5(Lit(a#45#0#0), Lit(a#45#1#0), Lit(a#45#2#0), Lit(a#45#3#0), Lit(a#45#4#0))
     == Lit(#_System._tuple#5._#Make5(a#45#0#0, a#45#1#0, a#45#2#0, a#45#3#0, a#45#4#0)));

function _System.Tuple5._0(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#46#0#0: Box, a#46#1#0: Box, a#46#2#0: Box, a#46#3#0: Box, a#46#4#0: Box :: 
  { #_System._tuple#5._#Make5(a#46#0#0, a#46#1#0, a#46#2#0, a#46#3#0, a#46#4#0) } 
  _System.Tuple5._0(#_System._tuple#5._#Make5(a#46#0#0, a#46#1#0, a#46#2#0, a#46#3#0, a#46#4#0))
     == a#46#0#0);

// Inductive rank
axiom (forall a#47#0#0: Box, a#47#1#0: Box, a#47#2#0: Box, a#47#3#0: Box, a#47#4#0: Box :: 
  { #_System._tuple#5._#Make5(a#47#0#0, a#47#1#0, a#47#2#0, a#47#3#0, a#47#4#0) } 
  BoxRank(a#47#0#0)
     < DtRank(#_System._tuple#5._#Make5(a#47#0#0, a#47#1#0, a#47#2#0, a#47#3#0, a#47#4#0)));

function _System.Tuple5._1(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#48#0#0: Box, a#48#1#0: Box, a#48#2#0: Box, a#48#3#0: Box, a#48#4#0: Box :: 
  { #_System._tuple#5._#Make5(a#48#0#0, a#48#1#0, a#48#2#0, a#48#3#0, a#48#4#0) } 
  _System.Tuple5._1(#_System._tuple#5._#Make5(a#48#0#0, a#48#1#0, a#48#2#0, a#48#3#0, a#48#4#0))
     == a#48#1#0);

// Inductive rank
axiom (forall a#49#0#0: Box, a#49#1#0: Box, a#49#2#0: Box, a#49#3#0: Box, a#49#4#0: Box :: 
  { #_System._tuple#5._#Make5(a#49#0#0, a#49#1#0, a#49#2#0, a#49#3#0, a#49#4#0) } 
  BoxRank(a#49#1#0)
     < DtRank(#_System._tuple#5._#Make5(a#49#0#0, a#49#1#0, a#49#2#0, a#49#3#0, a#49#4#0)));

function _System.Tuple5._2(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#50#0#0: Box, a#50#1#0: Box, a#50#2#0: Box, a#50#3#0: Box, a#50#4#0: Box :: 
  { #_System._tuple#5._#Make5(a#50#0#0, a#50#1#0, a#50#2#0, a#50#3#0, a#50#4#0) } 
  _System.Tuple5._2(#_System._tuple#5._#Make5(a#50#0#0, a#50#1#0, a#50#2#0, a#50#3#0, a#50#4#0))
     == a#50#2#0);

// Inductive rank
axiom (forall a#51#0#0: Box, a#51#1#0: Box, a#51#2#0: Box, a#51#3#0: Box, a#51#4#0: Box :: 
  { #_System._tuple#5._#Make5(a#51#0#0, a#51#1#0, a#51#2#0, a#51#3#0, a#51#4#0) } 
  BoxRank(a#51#2#0)
     < DtRank(#_System._tuple#5._#Make5(a#51#0#0, a#51#1#0, a#51#2#0, a#51#3#0, a#51#4#0)));

function _System.Tuple5._3(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#52#0#0: Box, a#52#1#0: Box, a#52#2#0: Box, a#52#3#0: Box, a#52#4#0: Box :: 
  { #_System._tuple#5._#Make5(a#52#0#0, a#52#1#0, a#52#2#0, a#52#3#0, a#52#4#0) } 
  _System.Tuple5._3(#_System._tuple#5._#Make5(a#52#0#0, a#52#1#0, a#52#2#0, a#52#3#0, a#52#4#0))
     == a#52#3#0);

// Inductive rank
axiom (forall a#53#0#0: Box, a#53#1#0: Box, a#53#2#0: Box, a#53#3#0: Box, a#53#4#0: Box :: 
  { #_System._tuple#5._#Make5(a#53#0#0, a#53#1#0, a#53#2#0, a#53#3#0, a#53#4#0) } 
  BoxRank(a#53#3#0)
     < DtRank(#_System._tuple#5._#Make5(a#53#0#0, a#53#1#0, a#53#2#0, a#53#3#0, a#53#4#0)));

function _System.Tuple5._4(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#54#0#0: Box, a#54#1#0: Box, a#54#2#0: Box, a#54#3#0: Box, a#54#4#0: Box :: 
  { #_System._tuple#5._#Make5(a#54#0#0, a#54#1#0, a#54#2#0, a#54#3#0, a#54#4#0) } 
  _System.Tuple5._4(#_System._tuple#5._#Make5(a#54#0#0, a#54#1#0, a#54#2#0, a#54#3#0, a#54#4#0))
     == a#54#4#0);

// Inductive rank
axiom (forall a#55#0#0: Box, a#55#1#0: Box, a#55#2#0: Box, a#55#3#0: Box, a#55#4#0: Box :: 
  { #_System._tuple#5._#Make5(a#55#0#0, a#55#1#0, a#55#2#0, a#55#3#0, a#55#4#0) } 
  BoxRank(a#55#4#0)
     < DtRank(#_System._tuple#5._#Make5(a#55#0#0, a#55#1#0, a#55#2#0, a#55#3#0, a#55#4#0)));

// Depth-one case-split function
function $IsA#_System.Tuple5(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple5(d) } 
  $IsA#_System.Tuple5(d) ==> _System.Tuple5.___hMake5_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#5$T0: Ty, 
    _System._tuple#5$T1: Ty, 
    _System._tuple#5$T2: Ty, 
    _System._tuple#5$T3: Ty, 
    _System._tuple#5$T4: Ty, 
    d: DatatypeType :: 
  { _System.Tuple5.___hMake5_q(d), $Is(d, 
      Tclass._System.Tuple5(_System._tuple#5$T0, 
        _System._tuple#5$T1, 
        _System._tuple#5$T2, 
        _System._tuple#5$T3, 
        _System._tuple#5$T4)) } 
  $Is(d, 
      Tclass._System.Tuple5(_System._tuple#5$T0, 
        _System._tuple#5$T1, 
        _System._tuple#5$T2, 
        _System._tuple#5$T3, 
        _System._tuple#5$T4))
     ==> _System.Tuple5.___hMake5_q(d));

// Datatype extensional equality declaration
function _System.Tuple5#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#5._#Make5
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple5#Equal(a, b) } 
  _System.Tuple5#Equal(a, b)
     <==> _System.Tuple5._0(a) == _System.Tuple5._0(b)
       && _System.Tuple5._1(a) == _System.Tuple5._1(b)
       && _System.Tuple5._2(a) == _System.Tuple5._2(b)
       && _System.Tuple5._3(a) == _System.Tuple5._3(b)
       && _System.Tuple5._4(a) == _System.Tuple5._4(b));

// Datatype extensionality axiom: _System._tuple#5
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple5#Equal(a, b) } 
  _System.Tuple5#Equal(a, b) <==> a == b);

const unique class._System.Tuple5: ClassName;

// Constructor function declaration
function #_System._tuple#6._#Make6(Box, Box, Box, Box, Box, Box) : DatatypeType;

const unique ##_System._tuple#6._#Make6: DtCtorId
uses {
// Constructor identifier
axiom (forall a#56#0#0: Box, 
    a#56#1#0: Box, 
    a#56#2#0: Box, 
    a#56#3#0: Box, 
    a#56#4#0: Box, 
    a#56#5#0: Box :: 
  { #_System._tuple#6._#Make6(a#56#0#0, a#56#1#0, a#56#2#0, a#56#3#0, a#56#4#0, a#56#5#0) } 
  DatatypeCtorId(#_System._tuple#6._#Make6(a#56#0#0, a#56#1#0, a#56#2#0, a#56#3#0, a#56#4#0, a#56#5#0))
     == ##_System._tuple#6._#Make6);
}

function _System.Tuple6.___hMake6_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple6.___hMake6_q(d) } 
  _System.Tuple6.___hMake6_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#6._#Make6);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple6.___hMake6_q(d) } 
  _System.Tuple6.___hMake6_q(d)
     ==> (exists a#57#0#0: Box, 
        a#57#1#0: Box, 
        a#57#2#0: Box, 
        a#57#3#0: Box, 
        a#57#4#0: Box, 
        a#57#5#0: Box :: 
      d
         == #_System._tuple#6._#Make6(a#57#0#0, a#57#1#0, a#57#2#0, a#57#3#0, a#57#4#0, a#57#5#0)));

function Tclass._System.Tuple6(Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.Tuple6: TyTag;

// Tclass._System.Tuple6 Tag
axiom (forall _System._tuple#6$T0: Ty, 
    _System._tuple#6$T1: Ty, 
    _System._tuple#6$T2: Ty, 
    _System._tuple#6$T3: Ty, 
    _System._tuple#6$T4: Ty, 
    _System._tuple#6$T5: Ty :: 
  { Tclass._System.Tuple6(_System._tuple#6$T0, 
      _System._tuple#6$T1, 
      _System._tuple#6$T2, 
      _System._tuple#6$T3, 
      _System._tuple#6$T4, 
      _System._tuple#6$T5) } 
  Tag(Tclass._System.Tuple6(_System._tuple#6$T0, 
          _System._tuple#6$T1, 
          _System._tuple#6$T2, 
          _System._tuple#6$T3, 
          _System._tuple#6$T4, 
          _System._tuple#6$T5))
       == Tagclass._System.Tuple6
     && TagFamily(Tclass._System.Tuple6(_System._tuple#6$T0, 
          _System._tuple#6$T1, 
          _System._tuple#6$T2, 
          _System._tuple#6$T3, 
          _System._tuple#6$T4, 
          _System._tuple#6$T5))
       == tytagFamily$_tuple#6);

function Tclass._System.Tuple6_0(Ty) : Ty;

// Tclass._System.Tuple6 injectivity 0
axiom (forall _System._tuple#6$T0: Ty, 
    _System._tuple#6$T1: Ty, 
    _System._tuple#6$T2: Ty, 
    _System._tuple#6$T3: Ty, 
    _System._tuple#6$T4: Ty, 
    _System._tuple#6$T5: Ty :: 
  { Tclass._System.Tuple6(_System._tuple#6$T0, 
      _System._tuple#6$T1, 
      _System._tuple#6$T2, 
      _System._tuple#6$T3, 
      _System._tuple#6$T4, 
      _System._tuple#6$T5) } 
  Tclass._System.Tuple6_0(Tclass._System.Tuple6(_System._tuple#6$T0, 
        _System._tuple#6$T1, 
        _System._tuple#6$T2, 
        _System._tuple#6$T3, 
        _System._tuple#6$T4, 
        _System._tuple#6$T5))
     == _System._tuple#6$T0);

function Tclass._System.Tuple6_1(Ty) : Ty;

// Tclass._System.Tuple6 injectivity 1
axiom (forall _System._tuple#6$T0: Ty, 
    _System._tuple#6$T1: Ty, 
    _System._tuple#6$T2: Ty, 
    _System._tuple#6$T3: Ty, 
    _System._tuple#6$T4: Ty, 
    _System._tuple#6$T5: Ty :: 
  { Tclass._System.Tuple6(_System._tuple#6$T0, 
      _System._tuple#6$T1, 
      _System._tuple#6$T2, 
      _System._tuple#6$T3, 
      _System._tuple#6$T4, 
      _System._tuple#6$T5) } 
  Tclass._System.Tuple6_1(Tclass._System.Tuple6(_System._tuple#6$T0, 
        _System._tuple#6$T1, 
        _System._tuple#6$T2, 
        _System._tuple#6$T3, 
        _System._tuple#6$T4, 
        _System._tuple#6$T5))
     == _System._tuple#6$T1);

function Tclass._System.Tuple6_2(Ty) : Ty;

// Tclass._System.Tuple6 injectivity 2
axiom (forall _System._tuple#6$T0: Ty, 
    _System._tuple#6$T1: Ty, 
    _System._tuple#6$T2: Ty, 
    _System._tuple#6$T3: Ty, 
    _System._tuple#6$T4: Ty, 
    _System._tuple#6$T5: Ty :: 
  { Tclass._System.Tuple6(_System._tuple#6$T0, 
      _System._tuple#6$T1, 
      _System._tuple#6$T2, 
      _System._tuple#6$T3, 
      _System._tuple#6$T4, 
      _System._tuple#6$T5) } 
  Tclass._System.Tuple6_2(Tclass._System.Tuple6(_System._tuple#6$T0, 
        _System._tuple#6$T1, 
        _System._tuple#6$T2, 
        _System._tuple#6$T3, 
        _System._tuple#6$T4, 
        _System._tuple#6$T5))
     == _System._tuple#6$T2);

function Tclass._System.Tuple6_3(Ty) : Ty;

// Tclass._System.Tuple6 injectivity 3
axiom (forall _System._tuple#6$T0: Ty, 
    _System._tuple#6$T1: Ty, 
    _System._tuple#6$T2: Ty, 
    _System._tuple#6$T3: Ty, 
    _System._tuple#6$T4: Ty, 
    _System._tuple#6$T5: Ty :: 
  { Tclass._System.Tuple6(_System._tuple#6$T0, 
      _System._tuple#6$T1, 
      _System._tuple#6$T2, 
      _System._tuple#6$T3, 
      _System._tuple#6$T4, 
      _System._tuple#6$T5) } 
  Tclass._System.Tuple6_3(Tclass._System.Tuple6(_System._tuple#6$T0, 
        _System._tuple#6$T1, 
        _System._tuple#6$T2, 
        _System._tuple#6$T3, 
        _System._tuple#6$T4, 
        _System._tuple#6$T5))
     == _System._tuple#6$T3);

function Tclass._System.Tuple6_4(Ty) : Ty;

// Tclass._System.Tuple6 injectivity 4
axiom (forall _System._tuple#6$T0: Ty, 
    _System._tuple#6$T1: Ty, 
    _System._tuple#6$T2: Ty, 
    _System._tuple#6$T3: Ty, 
    _System._tuple#6$T4: Ty, 
    _System._tuple#6$T5: Ty :: 
  { Tclass._System.Tuple6(_System._tuple#6$T0, 
      _System._tuple#6$T1, 
      _System._tuple#6$T2, 
      _System._tuple#6$T3, 
      _System._tuple#6$T4, 
      _System._tuple#6$T5) } 
  Tclass._System.Tuple6_4(Tclass._System.Tuple6(_System._tuple#6$T0, 
        _System._tuple#6$T1, 
        _System._tuple#6$T2, 
        _System._tuple#6$T3, 
        _System._tuple#6$T4, 
        _System._tuple#6$T5))
     == _System._tuple#6$T4);

function Tclass._System.Tuple6_5(Ty) : Ty;

// Tclass._System.Tuple6 injectivity 5
axiom (forall _System._tuple#6$T0: Ty, 
    _System._tuple#6$T1: Ty, 
    _System._tuple#6$T2: Ty, 
    _System._tuple#6$T3: Ty, 
    _System._tuple#6$T4: Ty, 
    _System._tuple#6$T5: Ty :: 
  { Tclass._System.Tuple6(_System._tuple#6$T0, 
      _System._tuple#6$T1, 
      _System._tuple#6$T2, 
      _System._tuple#6$T3, 
      _System._tuple#6$T4, 
      _System._tuple#6$T5) } 
  Tclass._System.Tuple6_5(Tclass._System.Tuple6(_System._tuple#6$T0, 
        _System._tuple#6$T1, 
        _System._tuple#6$T2, 
        _System._tuple#6$T3, 
        _System._tuple#6$T4, 
        _System._tuple#6$T5))
     == _System._tuple#6$T5);

// Box/unbox axiom for Tclass._System.Tuple6
axiom (forall _System._tuple#6$T0: Ty, 
    _System._tuple#6$T1: Ty, 
    _System._tuple#6$T2: Ty, 
    _System._tuple#6$T3: Ty, 
    _System._tuple#6$T4: Ty, 
    _System._tuple#6$T5: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.Tuple6(_System._tuple#6$T0, 
        _System._tuple#6$T1, 
        _System._tuple#6$T2, 
        _System._tuple#6$T3, 
        _System._tuple#6$T4, 
        _System._tuple#6$T5)) } 
  $IsBox(bx, 
      Tclass._System.Tuple6(_System._tuple#6$T0, 
        _System._tuple#6$T1, 
        _System._tuple#6$T2, 
        _System._tuple#6$T3, 
        _System._tuple#6$T4, 
        _System._tuple#6$T5))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple6(_System._tuple#6$T0, 
          _System._tuple#6$T1, 
          _System._tuple#6$T2, 
          _System._tuple#6$T3, 
          _System._tuple#6$T4, 
          _System._tuple#6$T5)));

// Constructor $Is
axiom (forall _System._tuple#6$T0: Ty, 
    _System._tuple#6$T1: Ty, 
    _System._tuple#6$T2: Ty, 
    _System._tuple#6$T3: Ty, 
    _System._tuple#6$T4: Ty, 
    _System._tuple#6$T5: Ty, 
    a#58#0#0: Box, 
    a#58#1#0: Box, 
    a#58#2#0: Box, 
    a#58#3#0: Box, 
    a#58#4#0: Box, 
    a#58#5#0: Box :: 
  { $Is(#_System._tuple#6._#Make6(a#58#0#0, a#58#1#0, a#58#2#0, a#58#3#0, a#58#4#0, a#58#5#0), 
      Tclass._System.Tuple6(_System._tuple#6$T0, 
        _System._tuple#6$T1, 
        _System._tuple#6$T2, 
        _System._tuple#6$T3, 
        _System._tuple#6$T4, 
        _System._tuple#6$T5)) } 
  $Is(#_System._tuple#6._#Make6(a#58#0#0, a#58#1#0, a#58#2#0, a#58#3#0, a#58#4#0, a#58#5#0), 
      Tclass._System.Tuple6(_System._tuple#6$T0, 
        _System._tuple#6$T1, 
        _System._tuple#6$T2, 
        _System._tuple#6$T3, 
        _System._tuple#6$T4, 
        _System._tuple#6$T5))
     <==> $IsBox(a#58#0#0, _System._tuple#6$T0)
       && $IsBox(a#58#1#0, _System._tuple#6$T1)
       && $IsBox(a#58#2#0, _System._tuple#6$T2)
       && $IsBox(a#58#3#0, _System._tuple#6$T3)
       && $IsBox(a#58#4#0, _System._tuple#6$T4)
       && $IsBox(a#58#5#0, _System._tuple#6$T5));

// Constructor $IsAlloc
axiom (forall _System._tuple#6$T0: Ty, 
    _System._tuple#6$T1: Ty, 
    _System._tuple#6$T2: Ty, 
    _System._tuple#6$T3: Ty, 
    _System._tuple#6$T4: Ty, 
    _System._tuple#6$T5: Ty, 
    a#58#0#0: Box, 
    a#58#1#0: Box, 
    a#58#2#0: Box, 
    a#58#3#0: Box, 
    a#58#4#0: Box, 
    a#58#5#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#6._#Make6(a#58#0#0, a#58#1#0, a#58#2#0, a#58#3#0, a#58#4#0, a#58#5#0), 
      Tclass._System.Tuple6(_System._tuple#6$T0, 
        _System._tuple#6$T1, 
        _System._tuple#6$T2, 
        _System._tuple#6$T3, 
        _System._tuple#6$T4, 
        _System._tuple#6$T5), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#6._#Make6(a#58#0#0, a#58#1#0, a#58#2#0, a#58#3#0, a#58#4#0, a#58#5#0), 
        Tclass._System.Tuple6(_System._tuple#6$T0, 
          _System._tuple#6$T1, 
          _System._tuple#6$T2, 
          _System._tuple#6$T3, 
          _System._tuple#6$T4, 
          _System._tuple#6$T5), 
        $h)
       <==> $IsAllocBox(a#58#0#0, _System._tuple#6$T0, $h)
         && $IsAllocBox(a#58#1#0, _System._tuple#6$T1, $h)
         && $IsAllocBox(a#58#2#0, _System._tuple#6$T2, $h)
         && $IsAllocBox(a#58#3#0, _System._tuple#6$T3, $h)
         && $IsAllocBox(a#58#4#0, _System._tuple#6$T4, $h)
         && $IsAllocBox(a#58#5#0, _System._tuple#6$T5, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#6$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple6._0(d), _System._tuple#6$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple6.___hMake6_q(d)
       && (exists _System._tuple#6$T1: Ty, 
          _System._tuple#6$T2: Ty, 
          _System._tuple#6$T3: Ty, 
          _System._tuple#6$T4: Ty, 
          _System._tuple#6$T5: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple6(_System._tuple#6$T0, 
              _System._tuple#6$T1, 
              _System._tuple#6$T2, 
              _System._tuple#6$T3, 
              _System._tuple#6$T4, 
              _System._tuple#6$T5), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple6(_System._tuple#6$T0, 
            _System._tuple#6$T1, 
            _System._tuple#6$T2, 
            _System._tuple#6$T3, 
            _System._tuple#6$T4, 
            _System._tuple#6$T5), 
          $h))
     ==> $IsAllocBox(_System.Tuple6._0(d), _System._tuple#6$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#6$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple6._1(d), _System._tuple#6$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple6.___hMake6_q(d)
       && (exists _System._tuple#6$T0: Ty, 
          _System._tuple#6$T2: Ty, 
          _System._tuple#6$T3: Ty, 
          _System._tuple#6$T4: Ty, 
          _System._tuple#6$T5: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple6(_System._tuple#6$T0, 
              _System._tuple#6$T1, 
              _System._tuple#6$T2, 
              _System._tuple#6$T3, 
              _System._tuple#6$T4, 
              _System._tuple#6$T5), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple6(_System._tuple#6$T0, 
            _System._tuple#6$T1, 
            _System._tuple#6$T2, 
            _System._tuple#6$T3, 
            _System._tuple#6$T4, 
            _System._tuple#6$T5), 
          $h))
     ==> $IsAllocBox(_System.Tuple6._1(d), _System._tuple#6$T1, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#6$T2: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple6._2(d), _System._tuple#6$T2, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple6.___hMake6_q(d)
       && (exists _System._tuple#6$T0: Ty, 
          _System._tuple#6$T1: Ty, 
          _System._tuple#6$T3: Ty, 
          _System._tuple#6$T4: Ty, 
          _System._tuple#6$T5: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple6(_System._tuple#6$T0, 
              _System._tuple#6$T1, 
              _System._tuple#6$T2, 
              _System._tuple#6$T3, 
              _System._tuple#6$T4, 
              _System._tuple#6$T5), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple6(_System._tuple#6$T0, 
            _System._tuple#6$T1, 
            _System._tuple#6$T2, 
            _System._tuple#6$T3, 
            _System._tuple#6$T4, 
            _System._tuple#6$T5), 
          $h))
     ==> $IsAllocBox(_System.Tuple6._2(d), _System._tuple#6$T2, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#6$T3: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple6._3(d), _System._tuple#6$T3, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple6.___hMake6_q(d)
       && (exists _System._tuple#6$T0: Ty, 
          _System._tuple#6$T1: Ty, 
          _System._tuple#6$T2: Ty, 
          _System._tuple#6$T4: Ty, 
          _System._tuple#6$T5: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple6(_System._tuple#6$T0, 
              _System._tuple#6$T1, 
              _System._tuple#6$T2, 
              _System._tuple#6$T3, 
              _System._tuple#6$T4, 
              _System._tuple#6$T5), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple6(_System._tuple#6$T0, 
            _System._tuple#6$T1, 
            _System._tuple#6$T2, 
            _System._tuple#6$T3, 
            _System._tuple#6$T4, 
            _System._tuple#6$T5), 
          $h))
     ==> $IsAllocBox(_System.Tuple6._3(d), _System._tuple#6$T3, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#6$T4: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple6._4(d), _System._tuple#6$T4, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple6.___hMake6_q(d)
       && (exists _System._tuple#6$T0: Ty, 
          _System._tuple#6$T1: Ty, 
          _System._tuple#6$T2: Ty, 
          _System._tuple#6$T3: Ty, 
          _System._tuple#6$T5: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple6(_System._tuple#6$T0, 
              _System._tuple#6$T1, 
              _System._tuple#6$T2, 
              _System._tuple#6$T3, 
              _System._tuple#6$T4, 
              _System._tuple#6$T5), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple6(_System._tuple#6$T0, 
            _System._tuple#6$T1, 
            _System._tuple#6$T2, 
            _System._tuple#6$T3, 
            _System._tuple#6$T4, 
            _System._tuple#6$T5), 
          $h))
     ==> $IsAllocBox(_System.Tuple6._4(d), _System._tuple#6$T4, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#6$T5: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple6._5(d), _System._tuple#6$T5, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple6.___hMake6_q(d)
       && (exists _System._tuple#6$T0: Ty, 
          _System._tuple#6$T1: Ty, 
          _System._tuple#6$T2: Ty, 
          _System._tuple#6$T3: Ty, 
          _System._tuple#6$T4: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple6(_System._tuple#6$T0, 
              _System._tuple#6$T1, 
              _System._tuple#6$T2, 
              _System._tuple#6$T3, 
              _System._tuple#6$T4, 
              _System._tuple#6$T5), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple6(_System._tuple#6$T0, 
            _System._tuple#6$T1, 
            _System._tuple#6$T2, 
            _System._tuple#6$T3, 
            _System._tuple#6$T4, 
            _System._tuple#6$T5), 
          $h))
     ==> $IsAllocBox(_System.Tuple6._5(d), _System._tuple#6$T5, $h));

// Constructor literal
axiom (forall a#59#0#0: Box, 
    a#59#1#0: Box, 
    a#59#2#0: Box, 
    a#59#3#0: Box, 
    a#59#4#0: Box, 
    a#59#5#0: Box :: 
  { #_System._tuple#6._#Make6(Lit(a#59#0#0), 
      Lit(a#59#1#0), 
      Lit(a#59#2#0), 
      Lit(a#59#3#0), 
      Lit(a#59#4#0), 
      Lit(a#59#5#0)) } 
  #_System._tuple#6._#Make6(Lit(a#59#0#0), 
      Lit(a#59#1#0), 
      Lit(a#59#2#0), 
      Lit(a#59#3#0), 
      Lit(a#59#4#0), 
      Lit(a#59#5#0))
     == Lit(#_System._tuple#6._#Make6(a#59#0#0, a#59#1#0, a#59#2#0, a#59#3#0, a#59#4#0, a#59#5#0)));

function _System.Tuple6._0(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#60#0#0: Box, 
    a#60#1#0: Box, 
    a#60#2#0: Box, 
    a#60#3#0: Box, 
    a#60#4#0: Box, 
    a#60#5#0: Box :: 
  { #_System._tuple#6._#Make6(a#60#0#0, a#60#1#0, a#60#2#0, a#60#3#0, a#60#4#0, a#60#5#0) } 
  _System.Tuple6._0(#_System._tuple#6._#Make6(a#60#0#0, a#60#1#0, a#60#2#0, a#60#3#0, a#60#4#0, a#60#5#0))
     == a#60#0#0);

// Inductive rank
axiom (forall a#61#0#0: Box, 
    a#61#1#0: Box, 
    a#61#2#0: Box, 
    a#61#3#0: Box, 
    a#61#4#0: Box, 
    a#61#5#0: Box :: 
  { #_System._tuple#6._#Make6(a#61#0#0, a#61#1#0, a#61#2#0, a#61#3#0, a#61#4#0, a#61#5#0) } 
  BoxRank(a#61#0#0)
     < DtRank(#_System._tuple#6._#Make6(a#61#0#0, a#61#1#0, a#61#2#0, a#61#3#0, a#61#4#0, a#61#5#0)));

function _System.Tuple6._1(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#62#0#0: Box, 
    a#62#1#0: Box, 
    a#62#2#0: Box, 
    a#62#3#0: Box, 
    a#62#4#0: Box, 
    a#62#5#0: Box :: 
  { #_System._tuple#6._#Make6(a#62#0#0, a#62#1#0, a#62#2#0, a#62#3#0, a#62#4#0, a#62#5#0) } 
  _System.Tuple6._1(#_System._tuple#6._#Make6(a#62#0#0, a#62#1#0, a#62#2#0, a#62#3#0, a#62#4#0, a#62#5#0))
     == a#62#1#0);

// Inductive rank
axiom (forall a#63#0#0: Box, 
    a#63#1#0: Box, 
    a#63#2#0: Box, 
    a#63#3#0: Box, 
    a#63#4#0: Box, 
    a#63#5#0: Box :: 
  { #_System._tuple#6._#Make6(a#63#0#0, a#63#1#0, a#63#2#0, a#63#3#0, a#63#4#0, a#63#5#0) } 
  BoxRank(a#63#1#0)
     < DtRank(#_System._tuple#6._#Make6(a#63#0#0, a#63#1#0, a#63#2#0, a#63#3#0, a#63#4#0, a#63#5#0)));

function _System.Tuple6._2(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#64#0#0: Box, 
    a#64#1#0: Box, 
    a#64#2#0: Box, 
    a#64#3#0: Box, 
    a#64#4#0: Box, 
    a#64#5#0: Box :: 
  { #_System._tuple#6._#Make6(a#64#0#0, a#64#1#0, a#64#2#0, a#64#3#0, a#64#4#0, a#64#5#0) } 
  _System.Tuple6._2(#_System._tuple#6._#Make6(a#64#0#0, a#64#1#0, a#64#2#0, a#64#3#0, a#64#4#0, a#64#5#0))
     == a#64#2#0);

// Inductive rank
axiom (forall a#65#0#0: Box, 
    a#65#1#0: Box, 
    a#65#2#0: Box, 
    a#65#3#0: Box, 
    a#65#4#0: Box, 
    a#65#5#0: Box :: 
  { #_System._tuple#6._#Make6(a#65#0#0, a#65#1#0, a#65#2#0, a#65#3#0, a#65#4#0, a#65#5#0) } 
  BoxRank(a#65#2#0)
     < DtRank(#_System._tuple#6._#Make6(a#65#0#0, a#65#1#0, a#65#2#0, a#65#3#0, a#65#4#0, a#65#5#0)));

function _System.Tuple6._3(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#66#0#0: Box, 
    a#66#1#0: Box, 
    a#66#2#0: Box, 
    a#66#3#0: Box, 
    a#66#4#0: Box, 
    a#66#5#0: Box :: 
  { #_System._tuple#6._#Make6(a#66#0#0, a#66#1#0, a#66#2#0, a#66#3#0, a#66#4#0, a#66#5#0) } 
  _System.Tuple6._3(#_System._tuple#6._#Make6(a#66#0#0, a#66#1#0, a#66#2#0, a#66#3#0, a#66#4#0, a#66#5#0))
     == a#66#3#0);

// Inductive rank
axiom (forall a#67#0#0: Box, 
    a#67#1#0: Box, 
    a#67#2#0: Box, 
    a#67#3#0: Box, 
    a#67#4#0: Box, 
    a#67#5#0: Box :: 
  { #_System._tuple#6._#Make6(a#67#0#0, a#67#1#0, a#67#2#0, a#67#3#0, a#67#4#0, a#67#5#0) } 
  BoxRank(a#67#3#0)
     < DtRank(#_System._tuple#6._#Make6(a#67#0#0, a#67#1#0, a#67#2#0, a#67#3#0, a#67#4#0, a#67#5#0)));

function _System.Tuple6._4(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#68#0#0: Box, 
    a#68#1#0: Box, 
    a#68#2#0: Box, 
    a#68#3#0: Box, 
    a#68#4#0: Box, 
    a#68#5#0: Box :: 
  { #_System._tuple#6._#Make6(a#68#0#0, a#68#1#0, a#68#2#0, a#68#3#0, a#68#4#0, a#68#5#0) } 
  _System.Tuple6._4(#_System._tuple#6._#Make6(a#68#0#0, a#68#1#0, a#68#2#0, a#68#3#0, a#68#4#0, a#68#5#0))
     == a#68#4#0);

// Inductive rank
axiom (forall a#69#0#0: Box, 
    a#69#1#0: Box, 
    a#69#2#0: Box, 
    a#69#3#0: Box, 
    a#69#4#0: Box, 
    a#69#5#0: Box :: 
  { #_System._tuple#6._#Make6(a#69#0#0, a#69#1#0, a#69#2#0, a#69#3#0, a#69#4#0, a#69#5#0) } 
  BoxRank(a#69#4#0)
     < DtRank(#_System._tuple#6._#Make6(a#69#0#0, a#69#1#0, a#69#2#0, a#69#3#0, a#69#4#0, a#69#5#0)));

function _System.Tuple6._5(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#70#0#0: Box, 
    a#70#1#0: Box, 
    a#70#2#0: Box, 
    a#70#3#0: Box, 
    a#70#4#0: Box, 
    a#70#5#0: Box :: 
  { #_System._tuple#6._#Make6(a#70#0#0, a#70#1#0, a#70#2#0, a#70#3#0, a#70#4#0, a#70#5#0) } 
  _System.Tuple6._5(#_System._tuple#6._#Make6(a#70#0#0, a#70#1#0, a#70#2#0, a#70#3#0, a#70#4#0, a#70#5#0))
     == a#70#5#0);

// Inductive rank
axiom (forall a#71#0#0: Box, 
    a#71#1#0: Box, 
    a#71#2#0: Box, 
    a#71#3#0: Box, 
    a#71#4#0: Box, 
    a#71#5#0: Box :: 
  { #_System._tuple#6._#Make6(a#71#0#0, a#71#1#0, a#71#2#0, a#71#3#0, a#71#4#0, a#71#5#0) } 
  BoxRank(a#71#5#0)
     < DtRank(#_System._tuple#6._#Make6(a#71#0#0, a#71#1#0, a#71#2#0, a#71#3#0, a#71#4#0, a#71#5#0)));

// Depth-one case-split function
function $IsA#_System.Tuple6(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple6(d) } 
  $IsA#_System.Tuple6(d) ==> _System.Tuple6.___hMake6_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#6$T0: Ty, 
    _System._tuple#6$T1: Ty, 
    _System._tuple#6$T2: Ty, 
    _System._tuple#6$T3: Ty, 
    _System._tuple#6$T4: Ty, 
    _System._tuple#6$T5: Ty, 
    d: DatatypeType :: 
  { _System.Tuple6.___hMake6_q(d), $Is(d, 
      Tclass._System.Tuple6(_System._tuple#6$T0, 
        _System._tuple#6$T1, 
        _System._tuple#6$T2, 
        _System._tuple#6$T3, 
        _System._tuple#6$T4, 
        _System._tuple#6$T5)) } 
  $Is(d, 
      Tclass._System.Tuple6(_System._tuple#6$T0, 
        _System._tuple#6$T1, 
        _System._tuple#6$T2, 
        _System._tuple#6$T3, 
        _System._tuple#6$T4, 
        _System._tuple#6$T5))
     ==> _System.Tuple6.___hMake6_q(d));

// Datatype extensional equality declaration
function _System.Tuple6#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#6._#Make6
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple6#Equal(a, b) } 
  _System.Tuple6#Equal(a, b)
     <==> _System.Tuple6._0(a) == _System.Tuple6._0(b)
       && _System.Tuple6._1(a) == _System.Tuple6._1(b)
       && _System.Tuple6._2(a) == _System.Tuple6._2(b)
       && _System.Tuple6._3(a) == _System.Tuple6._3(b)
       && _System.Tuple6._4(a) == _System.Tuple6._4(b)
       && _System.Tuple6._5(a) == _System.Tuple6._5(b));

// Datatype extensionality axiom: _System._tuple#6
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple6#Equal(a, b) } 
  _System.Tuple6#Equal(a, b) <==> a == b);

const unique class._System.Tuple6: ClassName;

// Constructor function declaration
function #_System._tuple#7._#Make7(Box, Box, Box, Box, Box, Box, Box) : DatatypeType;

const unique ##_System._tuple#7._#Make7: DtCtorId
uses {
// Constructor identifier
axiom (forall a#72#0#0: Box, 
    a#72#1#0: Box, 
    a#72#2#0: Box, 
    a#72#3#0: Box, 
    a#72#4#0: Box, 
    a#72#5#0: Box, 
    a#72#6#0: Box :: 
  { #_System._tuple#7._#Make7(a#72#0#0, a#72#1#0, a#72#2#0, a#72#3#0, a#72#4#0, a#72#5#0, a#72#6#0) } 
  DatatypeCtorId(#_System._tuple#7._#Make7(a#72#0#0, a#72#1#0, a#72#2#0, a#72#3#0, a#72#4#0, a#72#5#0, a#72#6#0))
     == ##_System._tuple#7._#Make7);
}

function _System.Tuple7.___hMake7_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple7.___hMake7_q(d) } 
  _System.Tuple7.___hMake7_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#7._#Make7);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple7.___hMake7_q(d) } 
  _System.Tuple7.___hMake7_q(d)
     ==> (exists a#73#0#0: Box, 
        a#73#1#0: Box, 
        a#73#2#0: Box, 
        a#73#3#0: Box, 
        a#73#4#0: Box, 
        a#73#5#0: Box, 
        a#73#6#0: Box :: 
      d
         == #_System._tuple#7._#Make7(a#73#0#0, a#73#1#0, a#73#2#0, a#73#3#0, a#73#4#0, a#73#5#0, a#73#6#0)));

function Tclass._System.Tuple7(Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.Tuple7: TyTag;

// Tclass._System.Tuple7 Tag
axiom (forall _System._tuple#7$T0: Ty, 
    _System._tuple#7$T1: Ty, 
    _System._tuple#7$T2: Ty, 
    _System._tuple#7$T3: Ty, 
    _System._tuple#7$T4: Ty, 
    _System._tuple#7$T5: Ty, 
    _System._tuple#7$T6: Ty :: 
  { Tclass._System.Tuple7(_System._tuple#7$T0, 
      _System._tuple#7$T1, 
      _System._tuple#7$T2, 
      _System._tuple#7$T3, 
      _System._tuple#7$T4, 
      _System._tuple#7$T5, 
      _System._tuple#7$T6) } 
  Tag(Tclass._System.Tuple7(_System._tuple#7$T0, 
          _System._tuple#7$T1, 
          _System._tuple#7$T2, 
          _System._tuple#7$T3, 
          _System._tuple#7$T4, 
          _System._tuple#7$T5, 
          _System._tuple#7$T6))
       == Tagclass._System.Tuple7
     && TagFamily(Tclass._System.Tuple7(_System._tuple#7$T0, 
          _System._tuple#7$T1, 
          _System._tuple#7$T2, 
          _System._tuple#7$T3, 
          _System._tuple#7$T4, 
          _System._tuple#7$T5, 
          _System._tuple#7$T6))
       == tytagFamily$_tuple#7);

function Tclass._System.Tuple7_0(Ty) : Ty;

// Tclass._System.Tuple7 injectivity 0
axiom (forall _System._tuple#7$T0: Ty, 
    _System._tuple#7$T1: Ty, 
    _System._tuple#7$T2: Ty, 
    _System._tuple#7$T3: Ty, 
    _System._tuple#7$T4: Ty, 
    _System._tuple#7$T5: Ty, 
    _System._tuple#7$T6: Ty :: 
  { Tclass._System.Tuple7(_System._tuple#7$T0, 
      _System._tuple#7$T1, 
      _System._tuple#7$T2, 
      _System._tuple#7$T3, 
      _System._tuple#7$T4, 
      _System._tuple#7$T5, 
      _System._tuple#7$T6) } 
  Tclass._System.Tuple7_0(Tclass._System.Tuple7(_System._tuple#7$T0, 
        _System._tuple#7$T1, 
        _System._tuple#7$T2, 
        _System._tuple#7$T3, 
        _System._tuple#7$T4, 
        _System._tuple#7$T5, 
        _System._tuple#7$T6))
     == _System._tuple#7$T0);

function Tclass._System.Tuple7_1(Ty) : Ty;

// Tclass._System.Tuple7 injectivity 1
axiom (forall _System._tuple#7$T0: Ty, 
    _System._tuple#7$T1: Ty, 
    _System._tuple#7$T2: Ty, 
    _System._tuple#7$T3: Ty, 
    _System._tuple#7$T4: Ty, 
    _System._tuple#7$T5: Ty, 
    _System._tuple#7$T6: Ty :: 
  { Tclass._System.Tuple7(_System._tuple#7$T0, 
      _System._tuple#7$T1, 
      _System._tuple#7$T2, 
      _System._tuple#7$T3, 
      _System._tuple#7$T4, 
      _System._tuple#7$T5, 
      _System._tuple#7$T6) } 
  Tclass._System.Tuple7_1(Tclass._System.Tuple7(_System._tuple#7$T0, 
        _System._tuple#7$T1, 
        _System._tuple#7$T2, 
        _System._tuple#7$T3, 
        _System._tuple#7$T4, 
        _System._tuple#7$T5, 
        _System._tuple#7$T6))
     == _System._tuple#7$T1);

function Tclass._System.Tuple7_2(Ty) : Ty;

// Tclass._System.Tuple7 injectivity 2
axiom (forall _System._tuple#7$T0: Ty, 
    _System._tuple#7$T1: Ty, 
    _System._tuple#7$T2: Ty, 
    _System._tuple#7$T3: Ty, 
    _System._tuple#7$T4: Ty, 
    _System._tuple#7$T5: Ty, 
    _System._tuple#7$T6: Ty :: 
  { Tclass._System.Tuple7(_System._tuple#7$T0, 
      _System._tuple#7$T1, 
      _System._tuple#7$T2, 
      _System._tuple#7$T3, 
      _System._tuple#7$T4, 
      _System._tuple#7$T5, 
      _System._tuple#7$T6) } 
  Tclass._System.Tuple7_2(Tclass._System.Tuple7(_System._tuple#7$T0, 
        _System._tuple#7$T1, 
        _System._tuple#7$T2, 
        _System._tuple#7$T3, 
        _System._tuple#7$T4, 
        _System._tuple#7$T5, 
        _System._tuple#7$T6))
     == _System._tuple#7$T2);

function Tclass._System.Tuple7_3(Ty) : Ty;

// Tclass._System.Tuple7 injectivity 3
axiom (forall _System._tuple#7$T0: Ty, 
    _System._tuple#7$T1: Ty, 
    _System._tuple#7$T2: Ty, 
    _System._tuple#7$T3: Ty, 
    _System._tuple#7$T4: Ty, 
    _System._tuple#7$T5: Ty, 
    _System._tuple#7$T6: Ty :: 
  { Tclass._System.Tuple7(_System._tuple#7$T0, 
      _System._tuple#7$T1, 
      _System._tuple#7$T2, 
      _System._tuple#7$T3, 
      _System._tuple#7$T4, 
      _System._tuple#7$T5, 
      _System._tuple#7$T6) } 
  Tclass._System.Tuple7_3(Tclass._System.Tuple7(_System._tuple#7$T0, 
        _System._tuple#7$T1, 
        _System._tuple#7$T2, 
        _System._tuple#7$T3, 
        _System._tuple#7$T4, 
        _System._tuple#7$T5, 
        _System._tuple#7$T6))
     == _System._tuple#7$T3);

function Tclass._System.Tuple7_4(Ty) : Ty;

// Tclass._System.Tuple7 injectivity 4
axiom (forall _System._tuple#7$T0: Ty, 
    _System._tuple#7$T1: Ty, 
    _System._tuple#7$T2: Ty, 
    _System._tuple#7$T3: Ty, 
    _System._tuple#7$T4: Ty, 
    _System._tuple#7$T5: Ty, 
    _System._tuple#7$T6: Ty :: 
  { Tclass._System.Tuple7(_System._tuple#7$T0, 
      _System._tuple#7$T1, 
      _System._tuple#7$T2, 
      _System._tuple#7$T3, 
      _System._tuple#7$T4, 
      _System._tuple#7$T5, 
      _System._tuple#7$T6) } 
  Tclass._System.Tuple7_4(Tclass._System.Tuple7(_System._tuple#7$T0, 
        _System._tuple#7$T1, 
        _System._tuple#7$T2, 
        _System._tuple#7$T3, 
        _System._tuple#7$T4, 
        _System._tuple#7$T5, 
        _System._tuple#7$T6))
     == _System._tuple#7$T4);

function Tclass._System.Tuple7_5(Ty) : Ty;

// Tclass._System.Tuple7 injectivity 5
axiom (forall _System._tuple#7$T0: Ty, 
    _System._tuple#7$T1: Ty, 
    _System._tuple#7$T2: Ty, 
    _System._tuple#7$T3: Ty, 
    _System._tuple#7$T4: Ty, 
    _System._tuple#7$T5: Ty, 
    _System._tuple#7$T6: Ty :: 
  { Tclass._System.Tuple7(_System._tuple#7$T0, 
      _System._tuple#7$T1, 
      _System._tuple#7$T2, 
      _System._tuple#7$T3, 
      _System._tuple#7$T4, 
      _System._tuple#7$T5, 
      _System._tuple#7$T6) } 
  Tclass._System.Tuple7_5(Tclass._System.Tuple7(_System._tuple#7$T0, 
        _System._tuple#7$T1, 
        _System._tuple#7$T2, 
        _System._tuple#7$T3, 
        _System._tuple#7$T4, 
        _System._tuple#7$T5, 
        _System._tuple#7$T6))
     == _System._tuple#7$T5);

function Tclass._System.Tuple7_6(Ty) : Ty;

// Tclass._System.Tuple7 injectivity 6
axiom (forall _System._tuple#7$T0: Ty, 
    _System._tuple#7$T1: Ty, 
    _System._tuple#7$T2: Ty, 
    _System._tuple#7$T3: Ty, 
    _System._tuple#7$T4: Ty, 
    _System._tuple#7$T5: Ty, 
    _System._tuple#7$T6: Ty :: 
  { Tclass._System.Tuple7(_System._tuple#7$T0, 
      _System._tuple#7$T1, 
      _System._tuple#7$T2, 
      _System._tuple#7$T3, 
      _System._tuple#7$T4, 
      _System._tuple#7$T5, 
      _System._tuple#7$T6) } 
  Tclass._System.Tuple7_6(Tclass._System.Tuple7(_System._tuple#7$T0, 
        _System._tuple#7$T1, 
        _System._tuple#7$T2, 
        _System._tuple#7$T3, 
        _System._tuple#7$T4, 
        _System._tuple#7$T5, 
        _System._tuple#7$T6))
     == _System._tuple#7$T6);

// Box/unbox axiom for Tclass._System.Tuple7
axiom (forall _System._tuple#7$T0: Ty, 
    _System._tuple#7$T1: Ty, 
    _System._tuple#7$T2: Ty, 
    _System._tuple#7$T3: Ty, 
    _System._tuple#7$T4: Ty, 
    _System._tuple#7$T5: Ty, 
    _System._tuple#7$T6: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.Tuple7(_System._tuple#7$T0, 
        _System._tuple#7$T1, 
        _System._tuple#7$T2, 
        _System._tuple#7$T3, 
        _System._tuple#7$T4, 
        _System._tuple#7$T5, 
        _System._tuple#7$T6)) } 
  $IsBox(bx, 
      Tclass._System.Tuple7(_System._tuple#7$T0, 
        _System._tuple#7$T1, 
        _System._tuple#7$T2, 
        _System._tuple#7$T3, 
        _System._tuple#7$T4, 
        _System._tuple#7$T5, 
        _System._tuple#7$T6))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple7(_System._tuple#7$T0, 
          _System._tuple#7$T1, 
          _System._tuple#7$T2, 
          _System._tuple#7$T3, 
          _System._tuple#7$T4, 
          _System._tuple#7$T5, 
          _System._tuple#7$T6)));

// Constructor $Is
axiom (forall _System._tuple#7$T0: Ty, 
    _System._tuple#7$T1: Ty, 
    _System._tuple#7$T2: Ty, 
    _System._tuple#7$T3: Ty, 
    _System._tuple#7$T4: Ty, 
    _System._tuple#7$T5: Ty, 
    _System._tuple#7$T6: Ty, 
    a#74#0#0: Box, 
    a#74#1#0: Box, 
    a#74#2#0: Box, 
    a#74#3#0: Box, 
    a#74#4#0: Box, 
    a#74#5#0: Box, 
    a#74#6#0: Box :: 
  { $Is(#_System._tuple#7._#Make7(a#74#0#0, a#74#1#0, a#74#2#0, a#74#3#0, a#74#4#0, a#74#5#0, a#74#6#0), 
      Tclass._System.Tuple7(_System._tuple#7$T0, 
        _System._tuple#7$T1, 
        _System._tuple#7$T2, 
        _System._tuple#7$T3, 
        _System._tuple#7$T4, 
        _System._tuple#7$T5, 
        _System._tuple#7$T6)) } 
  $Is(#_System._tuple#7._#Make7(a#74#0#0, a#74#1#0, a#74#2#0, a#74#3#0, a#74#4#0, a#74#5#0, a#74#6#0), 
      Tclass._System.Tuple7(_System._tuple#7$T0, 
        _System._tuple#7$T1, 
        _System._tuple#7$T2, 
        _System._tuple#7$T3, 
        _System._tuple#7$T4, 
        _System._tuple#7$T5, 
        _System._tuple#7$T6))
     <==> $IsBox(a#74#0#0, _System._tuple#7$T0)
       && $IsBox(a#74#1#0, _System._tuple#7$T1)
       && $IsBox(a#74#2#0, _System._tuple#7$T2)
       && $IsBox(a#74#3#0, _System._tuple#7$T3)
       && $IsBox(a#74#4#0, _System._tuple#7$T4)
       && $IsBox(a#74#5#0, _System._tuple#7$T5)
       && $IsBox(a#74#6#0, _System._tuple#7$T6));

// Constructor $IsAlloc
axiom (forall _System._tuple#7$T0: Ty, 
    _System._tuple#7$T1: Ty, 
    _System._tuple#7$T2: Ty, 
    _System._tuple#7$T3: Ty, 
    _System._tuple#7$T4: Ty, 
    _System._tuple#7$T5: Ty, 
    _System._tuple#7$T6: Ty, 
    a#74#0#0: Box, 
    a#74#1#0: Box, 
    a#74#2#0: Box, 
    a#74#3#0: Box, 
    a#74#4#0: Box, 
    a#74#5#0: Box, 
    a#74#6#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#7._#Make7(a#74#0#0, a#74#1#0, a#74#2#0, a#74#3#0, a#74#4#0, a#74#5#0, a#74#6#0), 
      Tclass._System.Tuple7(_System._tuple#7$T0, 
        _System._tuple#7$T1, 
        _System._tuple#7$T2, 
        _System._tuple#7$T3, 
        _System._tuple#7$T4, 
        _System._tuple#7$T5, 
        _System._tuple#7$T6), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#7._#Make7(a#74#0#0, a#74#1#0, a#74#2#0, a#74#3#0, a#74#4#0, a#74#5#0, a#74#6#0), 
        Tclass._System.Tuple7(_System._tuple#7$T0, 
          _System._tuple#7$T1, 
          _System._tuple#7$T2, 
          _System._tuple#7$T3, 
          _System._tuple#7$T4, 
          _System._tuple#7$T5, 
          _System._tuple#7$T6), 
        $h)
       <==> $IsAllocBox(a#74#0#0, _System._tuple#7$T0, $h)
         && $IsAllocBox(a#74#1#0, _System._tuple#7$T1, $h)
         && $IsAllocBox(a#74#2#0, _System._tuple#7$T2, $h)
         && $IsAllocBox(a#74#3#0, _System._tuple#7$T3, $h)
         && $IsAllocBox(a#74#4#0, _System._tuple#7$T4, $h)
         && $IsAllocBox(a#74#5#0, _System._tuple#7$T5, $h)
         && $IsAllocBox(a#74#6#0, _System._tuple#7$T6, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#7$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple7._0(d), _System._tuple#7$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple7.___hMake7_q(d)
       && (exists _System._tuple#7$T1: Ty, 
          _System._tuple#7$T2: Ty, 
          _System._tuple#7$T3: Ty, 
          _System._tuple#7$T4: Ty, 
          _System._tuple#7$T5: Ty, 
          _System._tuple#7$T6: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple7(_System._tuple#7$T0, 
              _System._tuple#7$T1, 
              _System._tuple#7$T2, 
              _System._tuple#7$T3, 
              _System._tuple#7$T4, 
              _System._tuple#7$T5, 
              _System._tuple#7$T6), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple7(_System._tuple#7$T0, 
            _System._tuple#7$T1, 
            _System._tuple#7$T2, 
            _System._tuple#7$T3, 
            _System._tuple#7$T4, 
            _System._tuple#7$T5, 
            _System._tuple#7$T6), 
          $h))
     ==> $IsAllocBox(_System.Tuple7._0(d), _System._tuple#7$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#7$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple7._1(d), _System._tuple#7$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple7.___hMake7_q(d)
       && (exists _System._tuple#7$T0: Ty, 
          _System._tuple#7$T2: Ty, 
          _System._tuple#7$T3: Ty, 
          _System._tuple#7$T4: Ty, 
          _System._tuple#7$T5: Ty, 
          _System._tuple#7$T6: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple7(_System._tuple#7$T0, 
              _System._tuple#7$T1, 
              _System._tuple#7$T2, 
              _System._tuple#7$T3, 
              _System._tuple#7$T4, 
              _System._tuple#7$T5, 
              _System._tuple#7$T6), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple7(_System._tuple#7$T0, 
            _System._tuple#7$T1, 
            _System._tuple#7$T2, 
            _System._tuple#7$T3, 
            _System._tuple#7$T4, 
            _System._tuple#7$T5, 
            _System._tuple#7$T6), 
          $h))
     ==> $IsAllocBox(_System.Tuple7._1(d), _System._tuple#7$T1, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#7$T2: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple7._2(d), _System._tuple#7$T2, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple7.___hMake7_q(d)
       && (exists _System._tuple#7$T0: Ty, 
          _System._tuple#7$T1: Ty, 
          _System._tuple#7$T3: Ty, 
          _System._tuple#7$T4: Ty, 
          _System._tuple#7$T5: Ty, 
          _System._tuple#7$T6: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple7(_System._tuple#7$T0, 
              _System._tuple#7$T1, 
              _System._tuple#7$T2, 
              _System._tuple#7$T3, 
              _System._tuple#7$T4, 
              _System._tuple#7$T5, 
              _System._tuple#7$T6), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple7(_System._tuple#7$T0, 
            _System._tuple#7$T1, 
            _System._tuple#7$T2, 
            _System._tuple#7$T3, 
            _System._tuple#7$T4, 
            _System._tuple#7$T5, 
            _System._tuple#7$T6), 
          $h))
     ==> $IsAllocBox(_System.Tuple7._2(d), _System._tuple#7$T2, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#7$T3: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple7._3(d), _System._tuple#7$T3, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple7.___hMake7_q(d)
       && (exists _System._tuple#7$T0: Ty, 
          _System._tuple#7$T1: Ty, 
          _System._tuple#7$T2: Ty, 
          _System._tuple#7$T4: Ty, 
          _System._tuple#7$T5: Ty, 
          _System._tuple#7$T6: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple7(_System._tuple#7$T0, 
              _System._tuple#7$T1, 
              _System._tuple#7$T2, 
              _System._tuple#7$T3, 
              _System._tuple#7$T4, 
              _System._tuple#7$T5, 
              _System._tuple#7$T6), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple7(_System._tuple#7$T0, 
            _System._tuple#7$T1, 
            _System._tuple#7$T2, 
            _System._tuple#7$T3, 
            _System._tuple#7$T4, 
            _System._tuple#7$T5, 
            _System._tuple#7$T6), 
          $h))
     ==> $IsAllocBox(_System.Tuple7._3(d), _System._tuple#7$T3, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#7$T4: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple7._4(d), _System._tuple#7$T4, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple7.___hMake7_q(d)
       && (exists _System._tuple#7$T0: Ty, 
          _System._tuple#7$T1: Ty, 
          _System._tuple#7$T2: Ty, 
          _System._tuple#7$T3: Ty, 
          _System._tuple#7$T5: Ty, 
          _System._tuple#7$T6: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple7(_System._tuple#7$T0, 
              _System._tuple#7$T1, 
              _System._tuple#7$T2, 
              _System._tuple#7$T3, 
              _System._tuple#7$T4, 
              _System._tuple#7$T5, 
              _System._tuple#7$T6), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple7(_System._tuple#7$T0, 
            _System._tuple#7$T1, 
            _System._tuple#7$T2, 
            _System._tuple#7$T3, 
            _System._tuple#7$T4, 
            _System._tuple#7$T5, 
            _System._tuple#7$T6), 
          $h))
     ==> $IsAllocBox(_System.Tuple7._4(d), _System._tuple#7$T4, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#7$T5: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple7._5(d), _System._tuple#7$T5, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple7.___hMake7_q(d)
       && (exists _System._tuple#7$T0: Ty, 
          _System._tuple#7$T1: Ty, 
          _System._tuple#7$T2: Ty, 
          _System._tuple#7$T3: Ty, 
          _System._tuple#7$T4: Ty, 
          _System._tuple#7$T6: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple7(_System._tuple#7$T0, 
              _System._tuple#7$T1, 
              _System._tuple#7$T2, 
              _System._tuple#7$T3, 
              _System._tuple#7$T4, 
              _System._tuple#7$T5, 
              _System._tuple#7$T6), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple7(_System._tuple#7$T0, 
            _System._tuple#7$T1, 
            _System._tuple#7$T2, 
            _System._tuple#7$T3, 
            _System._tuple#7$T4, 
            _System._tuple#7$T5, 
            _System._tuple#7$T6), 
          $h))
     ==> $IsAllocBox(_System.Tuple7._5(d), _System._tuple#7$T5, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#7$T6: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple7._6(d), _System._tuple#7$T6, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple7.___hMake7_q(d)
       && (exists _System._tuple#7$T0: Ty, 
          _System._tuple#7$T1: Ty, 
          _System._tuple#7$T2: Ty, 
          _System._tuple#7$T3: Ty, 
          _System._tuple#7$T4: Ty, 
          _System._tuple#7$T5: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple7(_System._tuple#7$T0, 
              _System._tuple#7$T1, 
              _System._tuple#7$T2, 
              _System._tuple#7$T3, 
              _System._tuple#7$T4, 
              _System._tuple#7$T5, 
              _System._tuple#7$T6), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple7(_System._tuple#7$T0, 
            _System._tuple#7$T1, 
            _System._tuple#7$T2, 
            _System._tuple#7$T3, 
            _System._tuple#7$T4, 
            _System._tuple#7$T5, 
            _System._tuple#7$T6), 
          $h))
     ==> $IsAllocBox(_System.Tuple7._6(d), _System._tuple#7$T6, $h));

// Constructor literal
axiom (forall a#75#0#0: Box, 
    a#75#1#0: Box, 
    a#75#2#0: Box, 
    a#75#3#0: Box, 
    a#75#4#0: Box, 
    a#75#5#0: Box, 
    a#75#6#0: Box :: 
  { #_System._tuple#7._#Make7(Lit(a#75#0#0), 
      Lit(a#75#1#0), 
      Lit(a#75#2#0), 
      Lit(a#75#3#0), 
      Lit(a#75#4#0), 
      Lit(a#75#5#0), 
      Lit(a#75#6#0)) } 
  #_System._tuple#7._#Make7(Lit(a#75#0#0), 
      Lit(a#75#1#0), 
      Lit(a#75#2#0), 
      Lit(a#75#3#0), 
      Lit(a#75#4#0), 
      Lit(a#75#5#0), 
      Lit(a#75#6#0))
     == Lit(#_System._tuple#7._#Make7(a#75#0#0, a#75#1#0, a#75#2#0, a#75#3#0, a#75#4#0, a#75#5#0, a#75#6#0)));

function _System.Tuple7._0(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#76#0#0: Box, 
    a#76#1#0: Box, 
    a#76#2#0: Box, 
    a#76#3#0: Box, 
    a#76#4#0: Box, 
    a#76#5#0: Box, 
    a#76#6#0: Box :: 
  { #_System._tuple#7._#Make7(a#76#0#0, a#76#1#0, a#76#2#0, a#76#3#0, a#76#4#0, a#76#5#0, a#76#6#0) } 
  _System.Tuple7._0(#_System._tuple#7._#Make7(a#76#0#0, a#76#1#0, a#76#2#0, a#76#3#0, a#76#4#0, a#76#5#0, a#76#6#0))
     == a#76#0#0);

// Inductive rank
axiom (forall a#77#0#0: Box, 
    a#77#1#0: Box, 
    a#77#2#0: Box, 
    a#77#3#0: Box, 
    a#77#4#0: Box, 
    a#77#5#0: Box, 
    a#77#6#0: Box :: 
  { #_System._tuple#7._#Make7(a#77#0#0, a#77#1#0, a#77#2#0, a#77#3#0, a#77#4#0, a#77#5#0, a#77#6#0) } 
  BoxRank(a#77#0#0)
     < DtRank(#_System._tuple#7._#Make7(a#77#0#0, a#77#1#0, a#77#2#0, a#77#3#0, a#77#4#0, a#77#5#0, a#77#6#0)));

function _System.Tuple7._1(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#78#0#0: Box, 
    a#78#1#0: Box, 
    a#78#2#0: Box, 
    a#78#3#0: Box, 
    a#78#4#0: Box, 
    a#78#5#0: Box, 
    a#78#6#0: Box :: 
  { #_System._tuple#7._#Make7(a#78#0#0, a#78#1#0, a#78#2#0, a#78#3#0, a#78#4#0, a#78#5#0, a#78#6#0) } 
  _System.Tuple7._1(#_System._tuple#7._#Make7(a#78#0#0, a#78#1#0, a#78#2#0, a#78#3#0, a#78#4#0, a#78#5#0, a#78#6#0))
     == a#78#1#0);

// Inductive rank
axiom (forall a#79#0#0: Box, 
    a#79#1#0: Box, 
    a#79#2#0: Box, 
    a#79#3#0: Box, 
    a#79#4#0: Box, 
    a#79#5#0: Box, 
    a#79#6#0: Box :: 
  { #_System._tuple#7._#Make7(a#79#0#0, a#79#1#0, a#79#2#0, a#79#3#0, a#79#4#0, a#79#5#0, a#79#6#0) } 
  BoxRank(a#79#1#0)
     < DtRank(#_System._tuple#7._#Make7(a#79#0#0, a#79#1#0, a#79#2#0, a#79#3#0, a#79#4#0, a#79#5#0, a#79#6#0)));

function _System.Tuple7._2(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#80#0#0: Box, 
    a#80#1#0: Box, 
    a#80#2#0: Box, 
    a#80#3#0: Box, 
    a#80#4#0: Box, 
    a#80#5#0: Box, 
    a#80#6#0: Box :: 
  { #_System._tuple#7._#Make7(a#80#0#0, a#80#1#0, a#80#2#0, a#80#3#0, a#80#4#0, a#80#5#0, a#80#6#0) } 
  _System.Tuple7._2(#_System._tuple#7._#Make7(a#80#0#0, a#80#1#0, a#80#2#0, a#80#3#0, a#80#4#0, a#80#5#0, a#80#6#0))
     == a#80#2#0);

// Inductive rank
axiom (forall a#81#0#0: Box, 
    a#81#1#0: Box, 
    a#81#2#0: Box, 
    a#81#3#0: Box, 
    a#81#4#0: Box, 
    a#81#5#0: Box, 
    a#81#6#0: Box :: 
  { #_System._tuple#7._#Make7(a#81#0#0, a#81#1#0, a#81#2#0, a#81#3#0, a#81#4#0, a#81#5#0, a#81#6#0) } 
  BoxRank(a#81#2#0)
     < DtRank(#_System._tuple#7._#Make7(a#81#0#0, a#81#1#0, a#81#2#0, a#81#3#0, a#81#4#0, a#81#5#0, a#81#6#0)));

function _System.Tuple7._3(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#82#0#0: Box, 
    a#82#1#0: Box, 
    a#82#2#0: Box, 
    a#82#3#0: Box, 
    a#82#4#0: Box, 
    a#82#5#0: Box, 
    a#82#6#0: Box :: 
  { #_System._tuple#7._#Make7(a#82#0#0, a#82#1#0, a#82#2#0, a#82#3#0, a#82#4#0, a#82#5#0, a#82#6#0) } 
  _System.Tuple7._3(#_System._tuple#7._#Make7(a#82#0#0, a#82#1#0, a#82#2#0, a#82#3#0, a#82#4#0, a#82#5#0, a#82#6#0))
     == a#82#3#0);

// Inductive rank
axiom (forall a#83#0#0: Box, 
    a#83#1#0: Box, 
    a#83#2#0: Box, 
    a#83#3#0: Box, 
    a#83#4#0: Box, 
    a#83#5#0: Box, 
    a#83#6#0: Box :: 
  { #_System._tuple#7._#Make7(a#83#0#0, a#83#1#0, a#83#2#0, a#83#3#0, a#83#4#0, a#83#5#0, a#83#6#0) } 
  BoxRank(a#83#3#0)
     < DtRank(#_System._tuple#7._#Make7(a#83#0#0, a#83#1#0, a#83#2#0, a#83#3#0, a#83#4#0, a#83#5#0, a#83#6#0)));

function _System.Tuple7._4(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#84#0#0: Box, 
    a#84#1#0: Box, 
    a#84#2#0: Box, 
    a#84#3#0: Box, 
    a#84#4#0: Box, 
    a#84#5#0: Box, 
    a#84#6#0: Box :: 
  { #_System._tuple#7._#Make7(a#84#0#0, a#84#1#0, a#84#2#0, a#84#3#0, a#84#4#0, a#84#5#0, a#84#6#0) } 
  _System.Tuple7._4(#_System._tuple#7._#Make7(a#84#0#0, a#84#1#0, a#84#2#0, a#84#3#0, a#84#4#0, a#84#5#0, a#84#6#0))
     == a#84#4#0);

// Inductive rank
axiom (forall a#85#0#0: Box, 
    a#85#1#0: Box, 
    a#85#2#0: Box, 
    a#85#3#0: Box, 
    a#85#4#0: Box, 
    a#85#5#0: Box, 
    a#85#6#0: Box :: 
  { #_System._tuple#7._#Make7(a#85#0#0, a#85#1#0, a#85#2#0, a#85#3#0, a#85#4#0, a#85#5#0, a#85#6#0) } 
  BoxRank(a#85#4#0)
     < DtRank(#_System._tuple#7._#Make7(a#85#0#0, a#85#1#0, a#85#2#0, a#85#3#0, a#85#4#0, a#85#5#0, a#85#6#0)));

function _System.Tuple7._5(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#86#0#0: Box, 
    a#86#1#0: Box, 
    a#86#2#0: Box, 
    a#86#3#0: Box, 
    a#86#4#0: Box, 
    a#86#5#0: Box, 
    a#86#6#0: Box :: 
  { #_System._tuple#7._#Make7(a#86#0#0, a#86#1#0, a#86#2#0, a#86#3#0, a#86#4#0, a#86#5#0, a#86#6#0) } 
  _System.Tuple7._5(#_System._tuple#7._#Make7(a#86#0#0, a#86#1#0, a#86#2#0, a#86#3#0, a#86#4#0, a#86#5#0, a#86#6#0))
     == a#86#5#0);

// Inductive rank
axiom (forall a#87#0#0: Box, 
    a#87#1#0: Box, 
    a#87#2#0: Box, 
    a#87#3#0: Box, 
    a#87#4#0: Box, 
    a#87#5#0: Box, 
    a#87#6#0: Box :: 
  { #_System._tuple#7._#Make7(a#87#0#0, a#87#1#0, a#87#2#0, a#87#3#0, a#87#4#0, a#87#5#0, a#87#6#0) } 
  BoxRank(a#87#5#0)
     < DtRank(#_System._tuple#7._#Make7(a#87#0#0, a#87#1#0, a#87#2#0, a#87#3#0, a#87#4#0, a#87#5#0, a#87#6#0)));

function _System.Tuple7._6(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#88#0#0: Box, 
    a#88#1#0: Box, 
    a#88#2#0: Box, 
    a#88#3#0: Box, 
    a#88#4#0: Box, 
    a#88#5#0: Box, 
    a#88#6#0: Box :: 
  { #_System._tuple#7._#Make7(a#88#0#0, a#88#1#0, a#88#2#0, a#88#3#0, a#88#4#0, a#88#5#0, a#88#6#0) } 
  _System.Tuple7._6(#_System._tuple#7._#Make7(a#88#0#0, a#88#1#0, a#88#2#0, a#88#3#0, a#88#4#0, a#88#5#0, a#88#6#0))
     == a#88#6#0);

// Inductive rank
axiom (forall a#89#0#0: Box, 
    a#89#1#0: Box, 
    a#89#2#0: Box, 
    a#89#3#0: Box, 
    a#89#4#0: Box, 
    a#89#5#0: Box, 
    a#89#6#0: Box :: 
  { #_System._tuple#7._#Make7(a#89#0#0, a#89#1#0, a#89#2#0, a#89#3#0, a#89#4#0, a#89#5#0, a#89#6#0) } 
  BoxRank(a#89#6#0)
     < DtRank(#_System._tuple#7._#Make7(a#89#0#0, a#89#1#0, a#89#2#0, a#89#3#0, a#89#4#0, a#89#5#0, a#89#6#0)));

// Depth-one case-split function
function $IsA#_System.Tuple7(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple7(d) } 
  $IsA#_System.Tuple7(d) ==> _System.Tuple7.___hMake7_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#7$T0: Ty, 
    _System._tuple#7$T1: Ty, 
    _System._tuple#7$T2: Ty, 
    _System._tuple#7$T3: Ty, 
    _System._tuple#7$T4: Ty, 
    _System._tuple#7$T5: Ty, 
    _System._tuple#7$T6: Ty, 
    d: DatatypeType :: 
  { _System.Tuple7.___hMake7_q(d), $Is(d, 
      Tclass._System.Tuple7(_System._tuple#7$T0, 
        _System._tuple#7$T1, 
        _System._tuple#7$T2, 
        _System._tuple#7$T3, 
        _System._tuple#7$T4, 
        _System._tuple#7$T5, 
        _System._tuple#7$T6)) } 
  $Is(d, 
      Tclass._System.Tuple7(_System._tuple#7$T0, 
        _System._tuple#7$T1, 
        _System._tuple#7$T2, 
        _System._tuple#7$T3, 
        _System._tuple#7$T4, 
        _System._tuple#7$T5, 
        _System._tuple#7$T6))
     ==> _System.Tuple7.___hMake7_q(d));

// Datatype extensional equality declaration
function _System.Tuple7#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#7._#Make7
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple7#Equal(a, b) } 
  _System.Tuple7#Equal(a, b)
     <==> _System.Tuple7._0(a) == _System.Tuple7._0(b)
       && _System.Tuple7._1(a) == _System.Tuple7._1(b)
       && _System.Tuple7._2(a) == _System.Tuple7._2(b)
       && _System.Tuple7._3(a) == _System.Tuple7._3(b)
       && _System.Tuple7._4(a) == _System.Tuple7._4(b)
       && _System.Tuple7._5(a) == _System.Tuple7._5(b)
       && _System.Tuple7._6(a) == _System.Tuple7._6(b));

// Datatype extensionality axiom: _System._tuple#7
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple7#Equal(a, b) } 
  _System.Tuple7#Equal(a, b) <==> a == b);

const unique class._System.Tuple7: ClassName;

// Constructor function declaration
function #_System._tuple#8._#Make8(Box, Box, Box, Box, Box, Box, Box, Box) : DatatypeType;

const unique ##_System._tuple#8._#Make8: DtCtorId
uses {
// Constructor identifier
axiom (forall a#90#0#0: Box, 
    a#90#1#0: Box, 
    a#90#2#0: Box, 
    a#90#3#0: Box, 
    a#90#4#0: Box, 
    a#90#5#0: Box, 
    a#90#6#0: Box, 
    a#90#7#0: Box :: 
  { #_System._tuple#8._#Make8(a#90#0#0, a#90#1#0, a#90#2#0, a#90#3#0, a#90#4#0, a#90#5#0, a#90#6#0, a#90#7#0) } 
  DatatypeCtorId(#_System._tuple#8._#Make8(a#90#0#0, a#90#1#0, a#90#2#0, a#90#3#0, a#90#4#0, a#90#5#0, a#90#6#0, a#90#7#0))
     == ##_System._tuple#8._#Make8);
}

function _System.Tuple8.___hMake8_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple8.___hMake8_q(d) } 
  _System.Tuple8.___hMake8_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#8._#Make8);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple8.___hMake8_q(d) } 
  _System.Tuple8.___hMake8_q(d)
     ==> (exists a#91#0#0: Box, 
        a#91#1#0: Box, 
        a#91#2#0: Box, 
        a#91#3#0: Box, 
        a#91#4#0: Box, 
        a#91#5#0: Box, 
        a#91#6#0: Box, 
        a#91#7#0: Box :: 
      d
         == #_System._tuple#8._#Make8(a#91#0#0, a#91#1#0, a#91#2#0, a#91#3#0, a#91#4#0, a#91#5#0, a#91#6#0, a#91#7#0)));

function Tclass._System.Tuple8(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.Tuple8: TyTag;

// Tclass._System.Tuple8 Tag
axiom (forall _System._tuple#8$T0: Ty, 
    _System._tuple#8$T1: Ty, 
    _System._tuple#8$T2: Ty, 
    _System._tuple#8$T3: Ty, 
    _System._tuple#8$T4: Ty, 
    _System._tuple#8$T5: Ty, 
    _System._tuple#8$T6: Ty, 
    _System._tuple#8$T7: Ty :: 
  { Tclass._System.Tuple8(_System._tuple#8$T0, 
      _System._tuple#8$T1, 
      _System._tuple#8$T2, 
      _System._tuple#8$T3, 
      _System._tuple#8$T4, 
      _System._tuple#8$T5, 
      _System._tuple#8$T6, 
      _System._tuple#8$T7) } 
  Tag(Tclass._System.Tuple8(_System._tuple#8$T0, 
          _System._tuple#8$T1, 
          _System._tuple#8$T2, 
          _System._tuple#8$T3, 
          _System._tuple#8$T4, 
          _System._tuple#8$T5, 
          _System._tuple#8$T6, 
          _System._tuple#8$T7))
       == Tagclass._System.Tuple8
     && TagFamily(Tclass._System.Tuple8(_System._tuple#8$T0, 
          _System._tuple#8$T1, 
          _System._tuple#8$T2, 
          _System._tuple#8$T3, 
          _System._tuple#8$T4, 
          _System._tuple#8$T5, 
          _System._tuple#8$T6, 
          _System._tuple#8$T7))
       == tytagFamily$_tuple#8);

function Tclass._System.Tuple8_0(Ty) : Ty;

// Tclass._System.Tuple8 injectivity 0
axiom (forall _System._tuple#8$T0: Ty, 
    _System._tuple#8$T1: Ty, 
    _System._tuple#8$T2: Ty, 
    _System._tuple#8$T3: Ty, 
    _System._tuple#8$T4: Ty, 
    _System._tuple#8$T5: Ty, 
    _System._tuple#8$T6: Ty, 
    _System._tuple#8$T7: Ty :: 
  { Tclass._System.Tuple8(_System._tuple#8$T0, 
      _System._tuple#8$T1, 
      _System._tuple#8$T2, 
      _System._tuple#8$T3, 
      _System._tuple#8$T4, 
      _System._tuple#8$T5, 
      _System._tuple#8$T6, 
      _System._tuple#8$T7) } 
  Tclass._System.Tuple8_0(Tclass._System.Tuple8(_System._tuple#8$T0, 
        _System._tuple#8$T1, 
        _System._tuple#8$T2, 
        _System._tuple#8$T3, 
        _System._tuple#8$T4, 
        _System._tuple#8$T5, 
        _System._tuple#8$T6, 
        _System._tuple#8$T7))
     == _System._tuple#8$T0);

function Tclass._System.Tuple8_1(Ty) : Ty;

// Tclass._System.Tuple8 injectivity 1
axiom (forall _System._tuple#8$T0: Ty, 
    _System._tuple#8$T1: Ty, 
    _System._tuple#8$T2: Ty, 
    _System._tuple#8$T3: Ty, 
    _System._tuple#8$T4: Ty, 
    _System._tuple#8$T5: Ty, 
    _System._tuple#8$T6: Ty, 
    _System._tuple#8$T7: Ty :: 
  { Tclass._System.Tuple8(_System._tuple#8$T0, 
      _System._tuple#8$T1, 
      _System._tuple#8$T2, 
      _System._tuple#8$T3, 
      _System._tuple#8$T4, 
      _System._tuple#8$T5, 
      _System._tuple#8$T6, 
      _System._tuple#8$T7) } 
  Tclass._System.Tuple8_1(Tclass._System.Tuple8(_System._tuple#8$T0, 
        _System._tuple#8$T1, 
        _System._tuple#8$T2, 
        _System._tuple#8$T3, 
        _System._tuple#8$T4, 
        _System._tuple#8$T5, 
        _System._tuple#8$T6, 
        _System._tuple#8$T7))
     == _System._tuple#8$T1);

function Tclass._System.Tuple8_2(Ty) : Ty;

// Tclass._System.Tuple8 injectivity 2
axiom (forall _System._tuple#8$T0: Ty, 
    _System._tuple#8$T1: Ty, 
    _System._tuple#8$T2: Ty, 
    _System._tuple#8$T3: Ty, 
    _System._tuple#8$T4: Ty, 
    _System._tuple#8$T5: Ty, 
    _System._tuple#8$T6: Ty, 
    _System._tuple#8$T7: Ty :: 
  { Tclass._System.Tuple8(_System._tuple#8$T0, 
      _System._tuple#8$T1, 
      _System._tuple#8$T2, 
      _System._tuple#8$T3, 
      _System._tuple#8$T4, 
      _System._tuple#8$T5, 
      _System._tuple#8$T6, 
      _System._tuple#8$T7) } 
  Tclass._System.Tuple8_2(Tclass._System.Tuple8(_System._tuple#8$T0, 
        _System._tuple#8$T1, 
        _System._tuple#8$T2, 
        _System._tuple#8$T3, 
        _System._tuple#8$T4, 
        _System._tuple#8$T5, 
        _System._tuple#8$T6, 
        _System._tuple#8$T7))
     == _System._tuple#8$T2);

function Tclass._System.Tuple8_3(Ty) : Ty;

// Tclass._System.Tuple8 injectivity 3
axiom (forall _System._tuple#8$T0: Ty, 
    _System._tuple#8$T1: Ty, 
    _System._tuple#8$T2: Ty, 
    _System._tuple#8$T3: Ty, 
    _System._tuple#8$T4: Ty, 
    _System._tuple#8$T5: Ty, 
    _System._tuple#8$T6: Ty, 
    _System._tuple#8$T7: Ty :: 
  { Tclass._System.Tuple8(_System._tuple#8$T0, 
      _System._tuple#8$T1, 
      _System._tuple#8$T2, 
      _System._tuple#8$T3, 
      _System._tuple#8$T4, 
      _System._tuple#8$T5, 
      _System._tuple#8$T6, 
      _System._tuple#8$T7) } 
  Tclass._System.Tuple8_3(Tclass._System.Tuple8(_System._tuple#8$T0, 
        _System._tuple#8$T1, 
        _System._tuple#8$T2, 
        _System._tuple#8$T3, 
        _System._tuple#8$T4, 
        _System._tuple#8$T5, 
        _System._tuple#8$T6, 
        _System._tuple#8$T7))
     == _System._tuple#8$T3);

function Tclass._System.Tuple8_4(Ty) : Ty;

// Tclass._System.Tuple8 injectivity 4
axiom (forall _System._tuple#8$T0: Ty, 
    _System._tuple#8$T1: Ty, 
    _System._tuple#8$T2: Ty, 
    _System._tuple#8$T3: Ty, 
    _System._tuple#8$T4: Ty, 
    _System._tuple#8$T5: Ty, 
    _System._tuple#8$T6: Ty, 
    _System._tuple#8$T7: Ty :: 
  { Tclass._System.Tuple8(_System._tuple#8$T0, 
      _System._tuple#8$T1, 
      _System._tuple#8$T2, 
      _System._tuple#8$T3, 
      _System._tuple#8$T4, 
      _System._tuple#8$T5, 
      _System._tuple#8$T6, 
      _System._tuple#8$T7) } 
  Tclass._System.Tuple8_4(Tclass._System.Tuple8(_System._tuple#8$T0, 
        _System._tuple#8$T1, 
        _System._tuple#8$T2, 
        _System._tuple#8$T3, 
        _System._tuple#8$T4, 
        _System._tuple#8$T5, 
        _System._tuple#8$T6, 
        _System._tuple#8$T7))
     == _System._tuple#8$T4);

function Tclass._System.Tuple8_5(Ty) : Ty;

// Tclass._System.Tuple8 injectivity 5
axiom (forall _System._tuple#8$T0: Ty, 
    _System._tuple#8$T1: Ty, 
    _System._tuple#8$T2: Ty, 
    _System._tuple#8$T3: Ty, 
    _System._tuple#8$T4: Ty, 
    _System._tuple#8$T5: Ty, 
    _System._tuple#8$T6: Ty, 
    _System._tuple#8$T7: Ty :: 
  { Tclass._System.Tuple8(_System._tuple#8$T0, 
      _System._tuple#8$T1, 
      _System._tuple#8$T2, 
      _System._tuple#8$T3, 
      _System._tuple#8$T4, 
      _System._tuple#8$T5, 
      _System._tuple#8$T6, 
      _System._tuple#8$T7) } 
  Tclass._System.Tuple8_5(Tclass._System.Tuple8(_System._tuple#8$T0, 
        _System._tuple#8$T1, 
        _System._tuple#8$T2, 
        _System._tuple#8$T3, 
        _System._tuple#8$T4, 
        _System._tuple#8$T5, 
        _System._tuple#8$T6, 
        _System._tuple#8$T7))
     == _System._tuple#8$T5);

function Tclass._System.Tuple8_6(Ty) : Ty;

// Tclass._System.Tuple8 injectivity 6
axiom (forall _System._tuple#8$T0: Ty, 
    _System._tuple#8$T1: Ty, 
    _System._tuple#8$T2: Ty, 
    _System._tuple#8$T3: Ty, 
    _System._tuple#8$T4: Ty, 
    _System._tuple#8$T5: Ty, 
    _System._tuple#8$T6: Ty, 
    _System._tuple#8$T7: Ty :: 
  { Tclass._System.Tuple8(_System._tuple#8$T0, 
      _System._tuple#8$T1, 
      _System._tuple#8$T2, 
      _System._tuple#8$T3, 
      _System._tuple#8$T4, 
      _System._tuple#8$T5, 
      _System._tuple#8$T6, 
      _System._tuple#8$T7) } 
  Tclass._System.Tuple8_6(Tclass._System.Tuple8(_System._tuple#8$T0, 
        _System._tuple#8$T1, 
        _System._tuple#8$T2, 
        _System._tuple#8$T3, 
        _System._tuple#8$T4, 
        _System._tuple#8$T5, 
        _System._tuple#8$T6, 
        _System._tuple#8$T7))
     == _System._tuple#8$T6);

function Tclass._System.Tuple8_7(Ty) : Ty;

// Tclass._System.Tuple8 injectivity 7
axiom (forall _System._tuple#8$T0: Ty, 
    _System._tuple#8$T1: Ty, 
    _System._tuple#8$T2: Ty, 
    _System._tuple#8$T3: Ty, 
    _System._tuple#8$T4: Ty, 
    _System._tuple#8$T5: Ty, 
    _System._tuple#8$T6: Ty, 
    _System._tuple#8$T7: Ty :: 
  { Tclass._System.Tuple8(_System._tuple#8$T0, 
      _System._tuple#8$T1, 
      _System._tuple#8$T2, 
      _System._tuple#8$T3, 
      _System._tuple#8$T4, 
      _System._tuple#8$T5, 
      _System._tuple#8$T6, 
      _System._tuple#8$T7) } 
  Tclass._System.Tuple8_7(Tclass._System.Tuple8(_System._tuple#8$T0, 
        _System._tuple#8$T1, 
        _System._tuple#8$T2, 
        _System._tuple#8$T3, 
        _System._tuple#8$T4, 
        _System._tuple#8$T5, 
        _System._tuple#8$T6, 
        _System._tuple#8$T7))
     == _System._tuple#8$T7);

// Box/unbox axiom for Tclass._System.Tuple8
axiom (forall _System._tuple#8$T0: Ty, 
    _System._tuple#8$T1: Ty, 
    _System._tuple#8$T2: Ty, 
    _System._tuple#8$T3: Ty, 
    _System._tuple#8$T4: Ty, 
    _System._tuple#8$T5: Ty, 
    _System._tuple#8$T6: Ty, 
    _System._tuple#8$T7: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.Tuple8(_System._tuple#8$T0, 
        _System._tuple#8$T1, 
        _System._tuple#8$T2, 
        _System._tuple#8$T3, 
        _System._tuple#8$T4, 
        _System._tuple#8$T5, 
        _System._tuple#8$T6, 
        _System._tuple#8$T7)) } 
  $IsBox(bx, 
      Tclass._System.Tuple8(_System._tuple#8$T0, 
        _System._tuple#8$T1, 
        _System._tuple#8$T2, 
        _System._tuple#8$T3, 
        _System._tuple#8$T4, 
        _System._tuple#8$T5, 
        _System._tuple#8$T6, 
        _System._tuple#8$T7))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple8(_System._tuple#8$T0, 
          _System._tuple#8$T1, 
          _System._tuple#8$T2, 
          _System._tuple#8$T3, 
          _System._tuple#8$T4, 
          _System._tuple#8$T5, 
          _System._tuple#8$T6, 
          _System._tuple#8$T7)));

// Constructor $Is
axiom (forall _System._tuple#8$T0: Ty, 
    _System._tuple#8$T1: Ty, 
    _System._tuple#8$T2: Ty, 
    _System._tuple#8$T3: Ty, 
    _System._tuple#8$T4: Ty, 
    _System._tuple#8$T5: Ty, 
    _System._tuple#8$T6: Ty, 
    _System._tuple#8$T7: Ty, 
    a#92#0#0: Box, 
    a#92#1#0: Box, 
    a#92#2#0: Box, 
    a#92#3#0: Box, 
    a#92#4#0: Box, 
    a#92#5#0: Box, 
    a#92#6#0: Box, 
    a#92#7#0: Box :: 
  { $Is(#_System._tuple#8._#Make8(a#92#0#0, a#92#1#0, a#92#2#0, a#92#3#0, a#92#4#0, a#92#5#0, a#92#6#0, a#92#7#0), 
      Tclass._System.Tuple8(_System._tuple#8$T0, 
        _System._tuple#8$T1, 
        _System._tuple#8$T2, 
        _System._tuple#8$T3, 
        _System._tuple#8$T4, 
        _System._tuple#8$T5, 
        _System._tuple#8$T6, 
        _System._tuple#8$T7)) } 
  $Is(#_System._tuple#8._#Make8(a#92#0#0, a#92#1#0, a#92#2#0, a#92#3#0, a#92#4#0, a#92#5#0, a#92#6#0, a#92#7#0), 
      Tclass._System.Tuple8(_System._tuple#8$T0, 
        _System._tuple#8$T1, 
        _System._tuple#8$T2, 
        _System._tuple#8$T3, 
        _System._tuple#8$T4, 
        _System._tuple#8$T5, 
        _System._tuple#8$T6, 
        _System._tuple#8$T7))
     <==> $IsBox(a#92#0#0, _System._tuple#8$T0)
       && $IsBox(a#92#1#0, _System._tuple#8$T1)
       && $IsBox(a#92#2#0, _System._tuple#8$T2)
       && $IsBox(a#92#3#0, _System._tuple#8$T3)
       && $IsBox(a#92#4#0, _System._tuple#8$T4)
       && $IsBox(a#92#5#0, _System._tuple#8$T5)
       && $IsBox(a#92#6#0, _System._tuple#8$T6)
       && $IsBox(a#92#7#0, _System._tuple#8$T7));

// Constructor $IsAlloc
axiom (forall _System._tuple#8$T0: Ty, 
    _System._tuple#8$T1: Ty, 
    _System._tuple#8$T2: Ty, 
    _System._tuple#8$T3: Ty, 
    _System._tuple#8$T4: Ty, 
    _System._tuple#8$T5: Ty, 
    _System._tuple#8$T6: Ty, 
    _System._tuple#8$T7: Ty, 
    a#92#0#0: Box, 
    a#92#1#0: Box, 
    a#92#2#0: Box, 
    a#92#3#0: Box, 
    a#92#4#0: Box, 
    a#92#5#0: Box, 
    a#92#6#0: Box, 
    a#92#7#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#8._#Make8(a#92#0#0, a#92#1#0, a#92#2#0, a#92#3#0, a#92#4#0, a#92#5#0, a#92#6#0, a#92#7#0), 
      Tclass._System.Tuple8(_System._tuple#8$T0, 
        _System._tuple#8$T1, 
        _System._tuple#8$T2, 
        _System._tuple#8$T3, 
        _System._tuple#8$T4, 
        _System._tuple#8$T5, 
        _System._tuple#8$T6, 
        _System._tuple#8$T7), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#8._#Make8(a#92#0#0, a#92#1#0, a#92#2#0, a#92#3#0, a#92#4#0, a#92#5#0, a#92#6#0, a#92#7#0), 
        Tclass._System.Tuple8(_System._tuple#8$T0, 
          _System._tuple#8$T1, 
          _System._tuple#8$T2, 
          _System._tuple#8$T3, 
          _System._tuple#8$T4, 
          _System._tuple#8$T5, 
          _System._tuple#8$T6, 
          _System._tuple#8$T7), 
        $h)
       <==> $IsAllocBox(a#92#0#0, _System._tuple#8$T0, $h)
         && $IsAllocBox(a#92#1#0, _System._tuple#8$T1, $h)
         && $IsAllocBox(a#92#2#0, _System._tuple#8$T2, $h)
         && $IsAllocBox(a#92#3#0, _System._tuple#8$T3, $h)
         && $IsAllocBox(a#92#4#0, _System._tuple#8$T4, $h)
         && $IsAllocBox(a#92#5#0, _System._tuple#8$T5, $h)
         && $IsAllocBox(a#92#6#0, _System._tuple#8$T6, $h)
         && $IsAllocBox(a#92#7#0, _System._tuple#8$T7, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#8$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple8._0(d), _System._tuple#8$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple8.___hMake8_q(d)
       && (exists _System._tuple#8$T1: Ty, 
          _System._tuple#8$T2: Ty, 
          _System._tuple#8$T3: Ty, 
          _System._tuple#8$T4: Ty, 
          _System._tuple#8$T5: Ty, 
          _System._tuple#8$T6: Ty, 
          _System._tuple#8$T7: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple8(_System._tuple#8$T0, 
              _System._tuple#8$T1, 
              _System._tuple#8$T2, 
              _System._tuple#8$T3, 
              _System._tuple#8$T4, 
              _System._tuple#8$T5, 
              _System._tuple#8$T6, 
              _System._tuple#8$T7), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple8(_System._tuple#8$T0, 
            _System._tuple#8$T1, 
            _System._tuple#8$T2, 
            _System._tuple#8$T3, 
            _System._tuple#8$T4, 
            _System._tuple#8$T5, 
            _System._tuple#8$T6, 
            _System._tuple#8$T7), 
          $h))
     ==> $IsAllocBox(_System.Tuple8._0(d), _System._tuple#8$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#8$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple8._1(d), _System._tuple#8$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple8.___hMake8_q(d)
       && (exists _System._tuple#8$T0: Ty, 
          _System._tuple#8$T2: Ty, 
          _System._tuple#8$T3: Ty, 
          _System._tuple#8$T4: Ty, 
          _System._tuple#8$T5: Ty, 
          _System._tuple#8$T6: Ty, 
          _System._tuple#8$T7: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple8(_System._tuple#8$T0, 
              _System._tuple#8$T1, 
              _System._tuple#8$T2, 
              _System._tuple#8$T3, 
              _System._tuple#8$T4, 
              _System._tuple#8$T5, 
              _System._tuple#8$T6, 
              _System._tuple#8$T7), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple8(_System._tuple#8$T0, 
            _System._tuple#8$T1, 
            _System._tuple#8$T2, 
            _System._tuple#8$T3, 
            _System._tuple#8$T4, 
            _System._tuple#8$T5, 
            _System._tuple#8$T6, 
            _System._tuple#8$T7), 
          $h))
     ==> $IsAllocBox(_System.Tuple8._1(d), _System._tuple#8$T1, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#8$T2: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple8._2(d), _System._tuple#8$T2, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple8.___hMake8_q(d)
       && (exists _System._tuple#8$T0: Ty, 
          _System._tuple#8$T1: Ty, 
          _System._tuple#8$T3: Ty, 
          _System._tuple#8$T4: Ty, 
          _System._tuple#8$T5: Ty, 
          _System._tuple#8$T6: Ty, 
          _System._tuple#8$T7: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple8(_System._tuple#8$T0, 
              _System._tuple#8$T1, 
              _System._tuple#8$T2, 
              _System._tuple#8$T3, 
              _System._tuple#8$T4, 
              _System._tuple#8$T5, 
              _System._tuple#8$T6, 
              _System._tuple#8$T7), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple8(_System._tuple#8$T0, 
            _System._tuple#8$T1, 
            _System._tuple#8$T2, 
            _System._tuple#8$T3, 
            _System._tuple#8$T4, 
            _System._tuple#8$T5, 
            _System._tuple#8$T6, 
            _System._tuple#8$T7), 
          $h))
     ==> $IsAllocBox(_System.Tuple8._2(d), _System._tuple#8$T2, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#8$T3: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple8._3(d), _System._tuple#8$T3, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple8.___hMake8_q(d)
       && (exists _System._tuple#8$T0: Ty, 
          _System._tuple#8$T1: Ty, 
          _System._tuple#8$T2: Ty, 
          _System._tuple#8$T4: Ty, 
          _System._tuple#8$T5: Ty, 
          _System._tuple#8$T6: Ty, 
          _System._tuple#8$T7: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple8(_System._tuple#8$T0, 
              _System._tuple#8$T1, 
              _System._tuple#8$T2, 
              _System._tuple#8$T3, 
              _System._tuple#8$T4, 
              _System._tuple#8$T5, 
              _System._tuple#8$T6, 
              _System._tuple#8$T7), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple8(_System._tuple#8$T0, 
            _System._tuple#8$T1, 
            _System._tuple#8$T2, 
            _System._tuple#8$T3, 
            _System._tuple#8$T4, 
            _System._tuple#8$T5, 
            _System._tuple#8$T6, 
            _System._tuple#8$T7), 
          $h))
     ==> $IsAllocBox(_System.Tuple8._3(d), _System._tuple#8$T3, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#8$T4: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple8._4(d), _System._tuple#8$T4, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple8.___hMake8_q(d)
       && (exists _System._tuple#8$T0: Ty, 
          _System._tuple#8$T1: Ty, 
          _System._tuple#8$T2: Ty, 
          _System._tuple#8$T3: Ty, 
          _System._tuple#8$T5: Ty, 
          _System._tuple#8$T6: Ty, 
          _System._tuple#8$T7: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple8(_System._tuple#8$T0, 
              _System._tuple#8$T1, 
              _System._tuple#8$T2, 
              _System._tuple#8$T3, 
              _System._tuple#8$T4, 
              _System._tuple#8$T5, 
              _System._tuple#8$T6, 
              _System._tuple#8$T7), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple8(_System._tuple#8$T0, 
            _System._tuple#8$T1, 
            _System._tuple#8$T2, 
            _System._tuple#8$T3, 
            _System._tuple#8$T4, 
            _System._tuple#8$T5, 
            _System._tuple#8$T6, 
            _System._tuple#8$T7), 
          $h))
     ==> $IsAllocBox(_System.Tuple8._4(d), _System._tuple#8$T4, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#8$T5: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple8._5(d), _System._tuple#8$T5, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple8.___hMake8_q(d)
       && (exists _System._tuple#8$T0: Ty, 
          _System._tuple#8$T1: Ty, 
          _System._tuple#8$T2: Ty, 
          _System._tuple#8$T3: Ty, 
          _System._tuple#8$T4: Ty, 
          _System._tuple#8$T6: Ty, 
          _System._tuple#8$T7: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple8(_System._tuple#8$T0, 
              _System._tuple#8$T1, 
              _System._tuple#8$T2, 
              _System._tuple#8$T3, 
              _System._tuple#8$T4, 
              _System._tuple#8$T5, 
              _System._tuple#8$T6, 
              _System._tuple#8$T7), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple8(_System._tuple#8$T0, 
            _System._tuple#8$T1, 
            _System._tuple#8$T2, 
            _System._tuple#8$T3, 
            _System._tuple#8$T4, 
            _System._tuple#8$T5, 
            _System._tuple#8$T6, 
            _System._tuple#8$T7), 
          $h))
     ==> $IsAllocBox(_System.Tuple8._5(d), _System._tuple#8$T5, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#8$T6: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple8._6(d), _System._tuple#8$T6, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple8.___hMake8_q(d)
       && (exists _System._tuple#8$T0: Ty, 
          _System._tuple#8$T1: Ty, 
          _System._tuple#8$T2: Ty, 
          _System._tuple#8$T3: Ty, 
          _System._tuple#8$T4: Ty, 
          _System._tuple#8$T5: Ty, 
          _System._tuple#8$T7: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple8(_System._tuple#8$T0, 
              _System._tuple#8$T1, 
              _System._tuple#8$T2, 
              _System._tuple#8$T3, 
              _System._tuple#8$T4, 
              _System._tuple#8$T5, 
              _System._tuple#8$T6, 
              _System._tuple#8$T7), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple8(_System._tuple#8$T0, 
            _System._tuple#8$T1, 
            _System._tuple#8$T2, 
            _System._tuple#8$T3, 
            _System._tuple#8$T4, 
            _System._tuple#8$T5, 
            _System._tuple#8$T6, 
            _System._tuple#8$T7), 
          $h))
     ==> $IsAllocBox(_System.Tuple8._6(d), _System._tuple#8$T6, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#8$T7: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple8._7(d), _System._tuple#8$T7, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple8.___hMake8_q(d)
       && (exists _System._tuple#8$T0: Ty, 
          _System._tuple#8$T1: Ty, 
          _System._tuple#8$T2: Ty, 
          _System._tuple#8$T3: Ty, 
          _System._tuple#8$T4: Ty, 
          _System._tuple#8$T5: Ty, 
          _System._tuple#8$T6: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple8(_System._tuple#8$T0, 
              _System._tuple#8$T1, 
              _System._tuple#8$T2, 
              _System._tuple#8$T3, 
              _System._tuple#8$T4, 
              _System._tuple#8$T5, 
              _System._tuple#8$T6, 
              _System._tuple#8$T7), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple8(_System._tuple#8$T0, 
            _System._tuple#8$T1, 
            _System._tuple#8$T2, 
            _System._tuple#8$T3, 
            _System._tuple#8$T4, 
            _System._tuple#8$T5, 
            _System._tuple#8$T6, 
            _System._tuple#8$T7), 
          $h))
     ==> $IsAllocBox(_System.Tuple8._7(d), _System._tuple#8$T7, $h));

// Constructor literal
axiom (forall a#93#0#0: Box, 
    a#93#1#0: Box, 
    a#93#2#0: Box, 
    a#93#3#0: Box, 
    a#93#4#0: Box, 
    a#93#5#0: Box, 
    a#93#6#0: Box, 
    a#93#7#0: Box :: 
  { #_System._tuple#8._#Make8(Lit(a#93#0#0), 
      Lit(a#93#1#0), 
      Lit(a#93#2#0), 
      Lit(a#93#3#0), 
      Lit(a#93#4#0), 
      Lit(a#93#5#0), 
      Lit(a#93#6#0), 
      Lit(a#93#7#0)) } 
  #_System._tuple#8._#Make8(Lit(a#93#0#0), 
      Lit(a#93#1#0), 
      Lit(a#93#2#0), 
      Lit(a#93#3#0), 
      Lit(a#93#4#0), 
      Lit(a#93#5#0), 
      Lit(a#93#6#0), 
      Lit(a#93#7#0))
     == Lit(#_System._tuple#8._#Make8(a#93#0#0, a#93#1#0, a#93#2#0, a#93#3#0, a#93#4#0, a#93#5#0, a#93#6#0, a#93#7#0)));

function _System.Tuple8._0(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#94#0#0: Box, 
    a#94#1#0: Box, 
    a#94#2#0: Box, 
    a#94#3#0: Box, 
    a#94#4#0: Box, 
    a#94#5#0: Box, 
    a#94#6#0: Box, 
    a#94#7#0: Box :: 
  { #_System._tuple#8._#Make8(a#94#0#0, a#94#1#0, a#94#2#0, a#94#3#0, a#94#4#0, a#94#5#0, a#94#6#0, a#94#7#0) } 
  _System.Tuple8._0(#_System._tuple#8._#Make8(a#94#0#0, a#94#1#0, a#94#2#0, a#94#3#0, a#94#4#0, a#94#5#0, a#94#6#0, a#94#7#0))
     == a#94#0#0);

// Inductive rank
axiom (forall a#95#0#0: Box, 
    a#95#1#0: Box, 
    a#95#2#0: Box, 
    a#95#3#0: Box, 
    a#95#4#0: Box, 
    a#95#5#0: Box, 
    a#95#6#0: Box, 
    a#95#7#0: Box :: 
  { #_System._tuple#8._#Make8(a#95#0#0, a#95#1#0, a#95#2#0, a#95#3#0, a#95#4#0, a#95#5#0, a#95#6#0, a#95#7#0) } 
  BoxRank(a#95#0#0)
     < DtRank(#_System._tuple#8._#Make8(a#95#0#0, a#95#1#0, a#95#2#0, a#95#3#0, a#95#4#0, a#95#5#0, a#95#6#0, a#95#7#0)));

function _System.Tuple8._1(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#96#0#0: Box, 
    a#96#1#0: Box, 
    a#96#2#0: Box, 
    a#96#3#0: Box, 
    a#96#4#0: Box, 
    a#96#5#0: Box, 
    a#96#6#0: Box, 
    a#96#7#0: Box :: 
  { #_System._tuple#8._#Make8(a#96#0#0, a#96#1#0, a#96#2#0, a#96#3#0, a#96#4#0, a#96#5#0, a#96#6#0, a#96#7#0) } 
  _System.Tuple8._1(#_System._tuple#8._#Make8(a#96#0#0, a#96#1#0, a#96#2#0, a#96#3#0, a#96#4#0, a#96#5#0, a#96#6#0, a#96#7#0))
     == a#96#1#0);

// Inductive rank
axiom (forall a#97#0#0: Box, 
    a#97#1#0: Box, 
    a#97#2#0: Box, 
    a#97#3#0: Box, 
    a#97#4#0: Box, 
    a#97#5#0: Box, 
    a#97#6#0: Box, 
    a#97#7#0: Box :: 
  { #_System._tuple#8._#Make8(a#97#0#0, a#97#1#0, a#97#2#0, a#97#3#0, a#97#4#0, a#97#5#0, a#97#6#0, a#97#7#0) } 
  BoxRank(a#97#1#0)
     < DtRank(#_System._tuple#8._#Make8(a#97#0#0, a#97#1#0, a#97#2#0, a#97#3#0, a#97#4#0, a#97#5#0, a#97#6#0, a#97#7#0)));

function _System.Tuple8._2(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#98#0#0: Box, 
    a#98#1#0: Box, 
    a#98#2#0: Box, 
    a#98#3#0: Box, 
    a#98#4#0: Box, 
    a#98#5#0: Box, 
    a#98#6#0: Box, 
    a#98#7#0: Box :: 
  { #_System._tuple#8._#Make8(a#98#0#0, a#98#1#0, a#98#2#0, a#98#3#0, a#98#4#0, a#98#5#0, a#98#6#0, a#98#7#0) } 
  _System.Tuple8._2(#_System._tuple#8._#Make8(a#98#0#0, a#98#1#0, a#98#2#0, a#98#3#0, a#98#4#0, a#98#5#0, a#98#6#0, a#98#7#0))
     == a#98#2#0);

// Inductive rank
axiom (forall a#99#0#0: Box, 
    a#99#1#0: Box, 
    a#99#2#0: Box, 
    a#99#3#0: Box, 
    a#99#4#0: Box, 
    a#99#5#0: Box, 
    a#99#6#0: Box, 
    a#99#7#0: Box :: 
  { #_System._tuple#8._#Make8(a#99#0#0, a#99#1#0, a#99#2#0, a#99#3#0, a#99#4#0, a#99#5#0, a#99#6#0, a#99#7#0) } 
  BoxRank(a#99#2#0)
     < DtRank(#_System._tuple#8._#Make8(a#99#0#0, a#99#1#0, a#99#2#0, a#99#3#0, a#99#4#0, a#99#5#0, a#99#6#0, a#99#7#0)));

function _System.Tuple8._3(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#100#0#0: Box, 
    a#100#1#0: Box, 
    a#100#2#0: Box, 
    a#100#3#0: Box, 
    a#100#4#0: Box, 
    a#100#5#0: Box, 
    a#100#6#0: Box, 
    a#100#7#0: Box :: 
  { #_System._tuple#8._#Make8(a#100#0#0, 
      a#100#1#0, 
      a#100#2#0, 
      a#100#3#0, 
      a#100#4#0, 
      a#100#5#0, 
      a#100#6#0, 
      a#100#7#0) } 
  _System.Tuple8._3(#_System._tuple#8._#Make8(a#100#0#0, 
        a#100#1#0, 
        a#100#2#0, 
        a#100#3#0, 
        a#100#4#0, 
        a#100#5#0, 
        a#100#6#0, 
        a#100#7#0))
     == a#100#3#0);

// Inductive rank
axiom (forall a#101#0#0: Box, 
    a#101#1#0: Box, 
    a#101#2#0: Box, 
    a#101#3#0: Box, 
    a#101#4#0: Box, 
    a#101#5#0: Box, 
    a#101#6#0: Box, 
    a#101#7#0: Box :: 
  { #_System._tuple#8._#Make8(a#101#0#0, 
      a#101#1#0, 
      a#101#2#0, 
      a#101#3#0, 
      a#101#4#0, 
      a#101#5#0, 
      a#101#6#0, 
      a#101#7#0) } 
  BoxRank(a#101#3#0)
     < DtRank(#_System._tuple#8._#Make8(a#101#0#0, 
        a#101#1#0, 
        a#101#2#0, 
        a#101#3#0, 
        a#101#4#0, 
        a#101#5#0, 
        a#101#6#0, 
        a#101#7#0)));

function _System.Tuple8._4(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#102#0#0: Box, 
    a#102#1#0: Box, 
    a#102#2#0: Box, 
    a#102#3#0: Box, 
    a#102#4#0: Box, 
    a#102#5#0: Box, 
    a#102#6#0: Box, 
    a#102#7#0: Box :: 
  { #_System._tuple#8._#Make8(a#102#0#0, 
      a#102#1#0, 
      a#102#2#0, 
      a#102#3#0, 
      a#102#4#0, 
      a#102#5#0, 
      a#102#6#0, 
      a#102#7#0) } 
  _System.Tuple8._4(#_System._tuple#8._#Make8(a#102#0#0, 
        a#102#1#0, 
        a#102#2#0, 
        a#102#3#0, 
        a#102#4#0, 
        a#102#5#0, 
        a#102#6#0, 
        a#102#7#0))
     == a#102#4#0);

// Inductive rank
axiom (forall a#103#0#0: Box, 
    a#103#1#0: Box, 
    a#103#2#0: Box, 
    a#103#3#0: Box, 
    a#103#4#0: Box, 
    a#103#5#0: Box, 
    a#103#6#0: Box, 
    a#103#7#0: Box :: 
  { #_System._tuple#8._#Make8(a#103#0#0, 
      a#103#1#0, 
      a#103#2#0, 
      a#103#3#0, 
      a#103#4#0, 
      a#103#5#0, 
      a#103#6#0, 
      a#103#7#0) } 
  BoxRank(a#103#4#0)
     < DtRank(#_System._tuple#8._#Make8(a#103#0#0, 
        a#103#1#0, 
        a#103#2#0, 
        a#103#3#0, 
        a#103#4#0, 
        a#103#5#0, 
        a#103#6#0, 
        a#103#7#0)));

function _System.Tuple8._5(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#104#0#0: Box, 
    a#104#1#0: Box, 
    a#104#2#0: Box, 
    a#104#3#0: Box, 
    a#104#4#0: Box, 
    a#104#5#0: Box, 
    a#104#6#0: Box, 
    a#104#7#0: Box :: 
  { #_System._tuple#8._#Make8(a#104#0#0, 
      a#104#1#0, 
      a#104#2#0, 
      a#104#3#0, 
      a#104#4#0, 
      a#104#5#0, 
      a#104#6#0, 
      a#104#7#0) } 
  _System.Tuple8._5(#_System._tuple#8._#Make8(a#104#0#0, 
        a#104#1#0, 
        a#104#2#0, 
        a#104#3#0, 
        a#104#4#0, 
        a#104#5#0, 
        a#104#6#0, 
        a#104#7#0))
     == a#104#5#0);

// Inductive rank
axiom (forall a#105#0#0: Box, 
    a#105#1#0: Box, 
    a#105#2#0: Box, 
    a#105#3#0: Box, 
    a#105#4#0: Box, 
    a#105#5#0: Box, 
    a#105#6#0: Box, 
    a#105#7#0: Box :: 
  { #_System._tuple#8._#Make8(a#105#0#0, 
      a#105#1#0, 
      a#105#2#0, 
      a#105#3#0, 
      a#105#4#0, 
      a#105#5#0, 
      a#105#6#0, 
      a#105#7#0) } 
  BoxRank(a#105#5#0)
     < DtRank(#_System._tuple#8._#Make8(a#105#0#0, 
        a#105#1#0, 
        a#105#2#0, 
        a#105#3#0, 
        a#105#4#0, 
        a#105#5#0, 
        a#105#6#0, 
        a#105#7#0)));

function _System.Tuple8._6(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#106#0#0: Box, 
    a#106#1#0: Box, 
    a#106#2#0: Box, 
    a#106#3#0: Box, 
    a#106#4#0: Box, 
    a#106#5#0: Box, 
    a#106#6#0: Box, 
    a#106#7#0: Box :: 
  { #_System._tuple#8._#Make8(a#106#0#0, 
      a#106#1#0, 
      a#106#2#0, 
      a#106#3#0, 
      a#106#4#0, 
      a#106#5#0, 
      a#106#6#0, 
      a#106#7#0) } 
  _System.Tuple8._6(#_System._tuple#8._#Make8(a#106#0#0, 
        a#106#1#0, 
        a#106#2#0, 
        a#106#3#0, 
        a#106#4#0, 
        a#106#5#0, 
        a#106#6#0, 
        a#106#7#0))
     == a#106#6#0);

// Inductive rank
axiom (forall a#107#0#0: Box, 
    a#107#1#0: Box, 
    a#107#2#0: Box, 
    a#107#3#0: Box, 
    a#107#4#0: Box, 
    a#107#5#0: Box, 
    a#107#6#0: Box, 
    a#107#7#0: Box :: 
  { #_System._tuple#8._#Make8(a#107#0#0, 
      a#107#1#0, 
      a#107#2#0, 
      a#107#3#0, 
      a#107#4#0, 
      a#107#5#0, 
      a#107#6#0, 
      a#107#7#0) } 
  BoxRank(a#107#6#0)
     < DtRank(#_System._tuple#8._#Make8(a#107#0#0, 
        a#107#1#0, 
        a#107#2#0, 
        a#107#3#0, 
        a#107#4#0, 
        a#107#5#0, 
        a#107#6#0, 
        a#107#7#0)));

function _System.Tuple8._7(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#108#0#0: Box, 
    a#108#1#0: Box, 
    a#108#2#0: Box, 
    a#108#3#0: Box, 
    a#108#4#0: Box, 
    a#108#5#0: Box, 
    a#108#6#0: Box, 
    a#108#7#0: Box :: 
  { #_System._tuple#8._#Make8(a#108#0#0, 
      a#108#1#0, 
      a#108#2#0, 
      a#108#3#0, 
      a#108#4#0, 
      a#108#5#0, 
      a#108#6#0, 
      a#108#7#0) } 
  _System.Tuple8._7(#_System._tuple#8._#Make8(a#108#0#0, 
        a#108#1#0, 
        a#108#2#0, 
        a#108#3#0, 
        a#108#4#0, 
        a#108#5#0, 
        a#108#6#0, 
        a#108#7#0))
     == a#108#7#0);

// Inductive rank
axiom (forall a#109#0#0: Box, 
    a#109#1#0: Box, 
    a#109#2#0: Box, 
    a#109#3#0: Box, 
    a#109#4#0: Box, 
    a#109#5#0: Box, 
    a#109#6#0: Box, 
    a#109#7#0: Box :: 
  { #_System._tuple#8._#Make8(a#109#0#0, 
      a#109#1#0, 
      a#109#2#0, 
      a#109#3#0, 
      a#109#4#0, 
      a#109#5#0, 
      a#109#6#0, 
      a#109#7#0) } 
  BoxRank(a#109#7#0)
     < DtRank(#_System._tuple#8._#Make8(a#109#0#0, 
        a#109#1#0, 
        a#109#2#0, 
        a#109#3#0, 
        a#109#4#0, 
        a#109#5#0, 
        a#109#6#0, 
        a#109#7#0)));

// Depth-one case-split function
function $IsA#_System.Tuple8(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple8(d) } 
  $IsA#_System.Tuple8(d) ==> _System.Tuple8.___hMake8_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#8$T0: Ty, 
    _System._tuple#8$T1: Ty, 
    _System._tuple#8$T2: Ty, 
    _System._tuple#8$T3: Ty, 
    _System._tuple#8$T4: Ty, 
    _System._tuple#8$T5: Ty, 
    _System._tuple#8$T6: Ty, 
    _System._tuple#8$T7: Ty, 
    d: DatatypeType :: 
  { _System.Tuple8.___hMake8_q(d), $Is(d, 
      Tclass._System.Tuple8(_System._tuple#8$T0, 
        _System._tuple#8$T1, 
        _System._tuple#8$T2, 
        _System._tuple#8$T3, 
        _System._tuple#8$T4, 
        _System._tuple#8$T5, 
        _System._tuple#8$T6, 
        _System._tuple#8$T7)) } 
  $Is(d, 
      Tclass._System.Tuple8(_System._tuple#8$T0, 
        _System._tuple#8$T1, 
        _System._tuple#8$T2, 
        _System._tuple#8$T3, 
        _System._tuple#8$T4, 
        _System._tuple#8$T5, 
        _System._tuple#8$T6, 
        _System._tuple#8$T7))
     ==> _System.Tuple8.___hMake8_q(d));

// Datatype extensional equality declaration
function _System.Tuple8#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#8._#Make8
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple8#Equal(a, b) } 
  _System.Tuple8#Equal(a, b)
     <==> _System.Tuple8._0(a) == _System.Tuple8._0(b)
       && _System.Tuple8._1(a) == _System.Tuple8._1(b)
       && _System.Tuple8._2(a) == _System.Tuple8._2(b)
       && _System.Tuple8._3(a) == _System.Tuple8._3(b)
       && _System.Tuple8._4(a) == _System.Tuple8._4(b)
       && _System.Tuple8._5(a) == _System.Tuple8._5(b)
       && _System.Tuple8._6(a) == _System.Tuple8._6(b)
       && _System.Tuple8._7(a) == _System.Tuple8._7(b));

// Datatype extensionality axiom: _System._tuple#8
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple8#Equal(a, b) } 
  _System.Tuple8#Equal(a, b) <==> a == b);

const unique class._System.Tuple8: ClassName;

// Constructor function declaration
function #_System._tuple#9._#Make9(Box, Box, Box, Box, Box, Box, Box, Box, Box) : DatatypeType;

const unique ##_System._tuple#9._#Make9: DtCtorId
uses {
// Constructor identifier
axiom (forall a#110#0#0: Box, 
    a#110#1#0: Box, 
    a#110#2#0: Box, 
    a#110#3#0: Box, 
    a#110#4#0: Box, 
    a#110#5#0: Box, 
    a#110#6#0: Box, 
    a#110#7#0: Box, 
    a#110#8#0: Box :: 
  { #_System._tuple#9._#Make9(a#110#0#0, 
      a#110#1#0, 
      a#110#2#0, 
      a#110#3#0, 
      a#110#4#0, 
      a#110#5#0, 
      a#110#6#0, 
      a#110#7#0, 
      a#110#8#0) } 
  DatatypeCtorId(#_System._tuple#9._#Make9(a#110#0#0, 
        a#110#1#0, 
        a#110#2#0, 
        a#110#3#0, 
        a#110#4#0, 
        a#110#5#0, 
        a#110#6#0, 
        a#110#7#0, 
        a#110#8#0))
     == ##_System._tuple#9._#Make9);
}

function _System.Tuple9.___hMake9_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple9.___hMake9_q(d) } 
  _System.Tuple9.___hMake9_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#9._#Make9);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple9.___hMake9_q(d) } 
  _System.Tuple9.___hMake9_q(d)
     ==> (exists a#111#0#0: Box, 
        a#111#1#0: Box, 
        a#111#2#0: Box, 
        a#111#3#0: Box, 
        a#111#4#0: Box, 
        a#111#5#0: Box, 
        a#111#6#0: Box, 
        a#111#7#0: Box, 
        a#111#8#0: Box :: 
      d
         == #_System._tuple#9._#Make9(a#111#0#0, 
          a#111#1#0, 
          a#111#2#0, 
          a#111#3#0, 
          a#111#4#0, 
          a#111#5#0, 
          a#111#6#0, 
          a#111#7#0, 
          a#111#8#0)));

function Tclass._System.Tuple9(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.Tuple9: TyTag;

// Tclass._System.Tuple9 Tag
axiom (forall _System._tuple#9$T0: Ty, 
    _System._tuple#9$T1: Ty, 
    _System._tuple#9$T2: Ty, 
    _System._tuple#9$T3: Ty, 
    _System._tuple#9$T4: Ty, 
    _System._tuple#9$T5: Ty, 
    _System._tuple#9$T6: Ty, 
    _System._tuple#9$T7: Ty, 
    _System._tuple#9$T8: Ty :: 
  { Tclass._System.Tuple9(_System._tuple#9$T0, 
      _System._tuple#9$T1, 
      _System._tuple#9$T2, 
      _System._tuple#9$T3, 
      _System._tuple#9$T4, 
      _System._tuple#9$T5, 
      _System._tuple#9$T6, 
      _System._tuple#9$T7, 
      _System._tuple#9$T8) } 
  Tag(Tclass._System.Tuple9(_System._tuple#9$T0, 
          _System._tuple#9$T1, 
          _System._tuple#9$T2, 
          _System._tuple#9$T3, 
          _System._tuple#9$T4, 
          _System._tuple#9$T5, 
          _System._tuple#9$T6, 
          _System._tuple#9$T7, 
          _System._tuple#9$T8))
       == Tagclass._System.Tuple9
     && TagFamily(Tclass._System.Tuple9(_System._tuple#9$T0, 
          _System._tuple#9$T1, 
          _System._tuple#9$T2, 
          _System._tuple#9$T3, 
          _System._tuple#9$T4, 
          _System._tuple#9$T5, 
          _System._tuple#9$T6, 
          _System._tuple#9$T7, 
          _System._tuple#9$T8))
       == tytagFamily$_tuple#9);

function Tclass._System.Tuple9_0(Ty) : Ty;

// Tclass._System.Tuple9 injectivity 0
axiom (forall _System._tuple#9$T0: Ty, 
    _System._tuple#9$T1: Ty, 
    _System._tuple#9$T2: Ty, 
    _System._tuple#9$T3: Ty, 
    _System._tuple#9$T4: Ty, 
    _System._tuple#9$T5: Ty, 
    _System._tuple#9$T6: Ty, 
    _System._tuple#9$T7: Ty, 
    _System._tuple#9$T8: Ty :: 
  { Tclass._System.Tuple9(_System._tuple#9$T0, 
      _System._tuple#9$T1, 
      _System._tuple#9$T2, 
      _System._tuple#9$T3, 
      _System._tuple#9$T4, 
      _System._tuple#9$T5, 
      _System._tuple#9$T6, 
      _System._tuple#9$T7, 
      _System._tuple#9$T8) } 
  Tclass._System.Tuple9_0(Tclass._System.Tuple9(_System._tuple#9$T0, 
        _System._tuple#9$T1, 
        _System._tuple#9$T2, 
        _System._tuple#9$T3, 
        _System._tuple#9$T4, 
        _System._tuple#9$T5, 
        _System._tuple#9$T6, 
        _System._tuple#9$T7, 
        _System._tuple#9$T8))
     == _System._tuple#9$T0);

function Tclass._System.Tuple9_1(Ty) : Ty;

// Tclass._System.Tuple9 injectivity 1
axiom (forall _System._tuple#9$T0: Ty, 
    _System._tuple#9$T1: Ty, 
    _System._tuple#9$T2: Ty, 
    _System._tuple#9$T3: Ty, 
    _System._tuple#9$T4: Ty, 
    _System._tuple#9$T5: Ty, 
    _System._tuple#9$T6: Ty, 
    _System._tuple#9$T7: Ty, 
    _System._tuple#9$T8: Ty :: 
  { Tclass._System.Tuple9(_System._tuple#9$T0, 
      _System._tuple#9$T1, 
      _System._tuple#9$T2, 
      _System._tuple#9$T3, 
      _System._tuple#9$T4, 
      _System._tuple#9$T5, 
      _System._tuple#9$T6, 
      _System._tuple#9$T7, 
      _System._tuple#9$T8) } 
  Tclass._System.Tuple9_1(Tclass._System.Tuple9(_System._tuple#9$T0, 
        _System._tuple#9$T1, 
        _System._tuple#9$T2, 
        _System._tuple#9$T3, 
        _System._tuple#9$T4, 
        _System._tuple#9$T5, 
        _System._tuple#9$T6, 
        _System._tuple#9$T7, 
        _System._tuple#9$T8))
     == _System._tuple#9$T1);

function Tclass._System.Tuple9_2(Ty) : Ty;

// Tclass._System.Tuple9 injectivity 2
axiom (forall _System._tuple#9$T0: Ty, 
    _System._tuple#9$T1: Ty, 
    _System._tuple#9$T2: Ty, 
    _System._tuple#9$T3: Ty, 
    _System._tuple#9$T4: Ty, 
    _System._tuple#9$T5: Ty, 
    _System._tuple#9$T6: Ty, 
    _System._tuple#9$T7: Ty, 
    _System._tuple#9$T8: Ty :: 
  { Tclass._System.Tuple9(_System._tuple#9$T0, 
      _System._tuple#9$T1, 
      _System._tuple#9$T2, 
      _System._tuple#9$T3, 
      _System._tuple#9$T4, 
      _System._tuple#9$T5, 
      _System._tuple#9$T6, 
      _System._tuple#9$T7, 
      _System._tuple#9$T8) } 
  Tclass._System.Tuple9_2(Tclass._System.Tuple9(_System._tuple#9$T0, 
        _System._tuple#9$T1, 
        _System._tuple#9$T2, 
        _System._tuple#9$T3, 
        _System._tuple#9$T4, 
        _System._tuple#9$T5, 
        _System._tuple#9$T6, 
        _System._tuple#9$T7, 
        _System._tuple#9$T8))
     == _System._tuple#9$T2);

function Tclass._System.Tuple9_3(Ty) : Ty;

// Tclass._System.Tuple9 injectivity 3
axiom (forall _System._tuple#9$T0: Ty, 
    _System._tuple#9$T1: Ty, 
    _System._tuple#9$T2: Ty, 
    _System._tuple#9$T3: Ty, 
    _System._tuple#9$T4: Ty, 
    _System._tuple#9$T5: Ty, 
    _System._tuple#9$T6: Ty, 
    _System._tuple#9$T7: Ty, 
    _System._tuple#9$T8: Ty :: 
  { Tclass._System.Tuple9(_System._tuple#9$T0, 
      _System._tuple#9$T1, 
      _System._tuple#9$T2, 
      _System._tuple#9$T3, 
      _System._tuple#9$T4, 
      _System._tuple#9$T5, 
      _System._tuple#9$T6, 
      _System._tuple#9$T7, 
      _System._tuple#9$T8) } 
  Tclass._System.Tuple9_3(Tclass._System.Tuple9(_System._tuple#9$T0, 
        _System._tuple#9$T1, 
        _System._tuple#9$T2, 
        _System._tuple#9$T3, 
        _System._tuple#9$T4, 
        _System._tuple#9$T5, 
        _System._tuple#9$T6, 
        _System._tuple#9$T7, 
        _System._tuple#9$T8))
     == _System._tuple#9$T3);

function Tclass._System.Tuple9_4(Ty) : Ty;

// Tclass._System.Tuple9 injectivity 4
axiom (forall _System._tuple#9$T0: Ty, 
    _System._tuple#9$T1: Ty, 
    _System._tuple#9$T2: Ty, 
    _System._tuple#9$T3: Ty, 
    _System._tuple#9$T4: Ty, 
    _System._tuple#9$T5: Ty, 
    _System._tuple#9$T6: Ty, 
    _System._tuple#9$T7: Ty, 
    _System._tuple#9$T8: Ty :: 
  { Tclass._System.Tuple9(_System._tuple#9$T0, 
      _System._tuple#9$T1, 
      _System._tuple#9$T2, 
      _System._tuple#9$T3, 
      _System._tuple#9$T4, 
      _System._tuple#9$T5, 
      _System._tuple#9$T6, 
      _System._tuple#9$T7, 
      _System._tuple#9$T8) } 
  Tclass._System.Tuple9_4(Tclass._System.Tuple9(_System._tuple#9$T0, 
        _System._tuple#9$T1, 
        _System._tuple#9$T2, 
        _System._tuple#9$T3, 
        _System._tuple#9$T4, 
        _System._tuple#9$T5, 
        _System._tuple#9$T6, 
        _System._tuple#9$T7, 
        _System._tuple#9$T8))
     == _System._tuple#9$T4);

function Tclass._System.Tuple9_5(Ty) : Ty;

// Tclass._System.Tuple9 injectivity 5
axiom (forall _System._tuple#9$T0: Ty, 
    _System._tuple#9$T1: Ty, 
    _System._tuple#9$T2: Ty, 
    _System._tuple#9$T3: Ty, 
    _System._tuple#9$T4: Ty, 
    _System._tuple#9$T5: Ty, 
    _System._tuple#9$T6: Ty, 
    _System._tuple#9$T7: Ty, 
    _System._tuple#9$T8: Ty :: 
  { Tclass._System.Tuple9(_System._tuple#9$T0, 
      _System._tuple#9$T1, 
      _System._tuple#9$T2, 
      _System._tuple#9$T3, 
      _System._tuple#9$T4, 
      _System._tuple#9$T5, 
      _System._tuple#9$T6, 
      _System._tuple#9$T7, 
      _System._tuple#9$T8) } 
  Tclass._System.Tuple9_5(Tclass._System.Tuple9(_System._tuple#9$T0, 
        _System._tuple#9$T1, 
        _System._tuple#9$T2, 
        _System._tuple#9$T3, 
        _System._tuple#9$T4, 
        _System._tuple#9$T5, 
        _System._tuple#9$T6, 
        _System._tuple#9$T7, 
        _System._tuple#9$T8))
     == _System._tuple#9$T5);

function Tclass._System.Tuple9_6(Ty) : Ty;

// Tclass._System.Tuple9 injectivity 6
axiom (forall _System._tuple#9$T0: Ty, 
    _System._tuple#9$T1: Ty, 
    _System._tuple#9$T2: Ty, 
    _System._tuple#9$T3: Ty, 
    _System._tuple#9$T4: Ty, 
    _System._tuple#9$T5: Ty, 
    _System._tuple#9$T6: Ty, 
    _System._tuple#9$T7: Ty, 
    _System._tuple#9$T8: Ty :: 
  { Tclass._System.Tuple9(_System._tuple#9$T0, 
      _System._tuple#9$T1, 
      _System._tuple#9$T2, 
      _System._tuple#9$T3, 
      _System._tuple#9$T4, 
      _System._tuple#9$T5, 
      _System._tuple#9$T6, 
      _System._tuple#9$T7, 
      _System._tuple#9$T8) } 
  Tclass._System.Tuple9_6(Tclass._System.Tuple9(_System._tuple#9$T0, 
        _System._tuple#9$T1, 
        _System._tuple#9$T2, 
        _System._tuple#9$T3, 
        _System._tuple#9$T4, 
        _System._tuple#9$T5, 
        _System._tuple#9$T6, 
        _System._tuple#9$T7, 
        _System._tuple#9$T8))
     == _System._tuple#9$T6);

function Tclass._System.Tuple9_7(Ty) : Ty;

// Tclass._System.Tuple9 injectivity 7
axiom (forall _System._tuple#9$T0: Ty, 
    _System._tuple#9$T1: Ty, 
    _System._tuple#9$T2: Ty, 
    _System._tuple#9$T3: Ty, 
    _System._tuple#9$T4: Ty, 
    _System._tuple#9$T5: Ty, 
    _System._tuple#9$T6: Ty, 
    _System._tuple#9$T7: Ty, 
    _System._tuple#9$T8: Ty :: 
  { Tclass._System.Tuple9(_System._tuple#9$T0, 
      _System._tuple#9$T1, 
      _System._tuple#9$T2, 
      _System._tuple#9$T3, 
      _System._tuple#9$T4, 
      _System._tuple#9$T5, 
      _System._tuple#9$T6, 
      _System._tuple#9$T7, 
      _System._tuple#9$T8) } 
  Tclass._System.Tuple9_7(Tclass._System.Tuple9(_System._tuple#9$T0, 
        _System._tuple#9$T1, 
        _System._tuple#9$T2, 
        _System._tuple#9$T3, 
        _System._tuple#9$T4, 
        _System._tuple#9$T5, 
        _System._tuple#9$T6, 
        _System._tuple#9$T7, 
        _System._tuple#9$T8))
     == _System._tuple#9$T7);

function Tclass._System.Tuple9_8(Ty) : Ty;

// Tclass._System.Tuple9 injectivity 8
axiom (forall _System._tuple#9$T0: Ty, 
    _System._tuple#9$T1: Ty, 
    _System._tuple#9$T2: Ty, 
    _System._tuple#9$T3: Ty, 
    _System._tuple#9$T4: Ty, 
    _System._tuple#9$T5: Ty, 
    _System._tuple#9$T6: Ty, 
    _System._tuple#9$T7: Ty, 
    _System._tuple#9$T8: Ty :: 
  { Tclass._System.Tuple9(_System._tuple#9$T0, 
      _System._tuple#9$T1, 
      _System._tuple#9$T2, 
      _System._tuple#9$T3, 
      _System._tuple#9$T4, 
      _System._tuple#9$T5, 
      _System._tuple#9$T6, 
      _System._tuple#9$T7, 
      _System._tuple#9$T8) } 
  Tclass._System.Tuple9_8(Tclass._System.Tuple9(_System._tuple#9$T0, 
        _System._tuple#9$T1, 
        _System._tuple#9$T2, 
        _System._tuple#9$T3, 
        _System._tuple#9$T4, 
        _System._tuple#9$T5, 
        _System._tuple#9$T6, 
        _System._tuple#9$T7, 
        _System._tuple#9$T8))
     == _System._tuple#9$T8);

// Box/unbox axiom for Tclass._System.Tuple9
axiom (forall _System._tuple#9$T0: Ty, 
    _System._tuple#9$T1: Ty, 
    _System._tuple#9$T2: Ty, 
    _System._tuple#9$T3: Ty, 
    _System._tuple#9$T4: Ty, 
    _System._tuple#9$T5: Ty, 
    _System._tuple#9$T6: Ty, 
    _System._tuple#9$T7: Ty, 
    _System._tuple#9$T8: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.Tuple9(_System._tuple#9$T0, 
        _System._tuple#9$T1, 
        _System._tuple#9$T2, 
        _System._tuple#9$T3, 
        _System._tuple#9$T4, 
        _System._tuple#9$T5, 
        _System._tuple#9$T6, 
        _System._tuple#9$T7, 
        _System._tuple#9$T8)) } 
  $IsBox(bx, 
      Tclass._System.Tuple9(_System._tuple#9$T0, 
        _System._tuple#9$T1, 
        _System._tuple#9$T2, 
        _System._tuple#9$T3, 
        _System._tuple#9$T4, 
        _System._tuple#9$T5, 
        _System._tuple#9$T6, 
        _System._tuple#9$T7, 
        _System._tuple#9$T8))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple9(_System._tuple#9$T0, 
          _System._tuple#9$T1, 
          _System._tuple#9$T2, 
          _System._tuple#9$T3, 
          _System._tuple#9$T4, 
          _System._tuple#9$T5, 
          _System._tuple#9$T6, 
          _System._tuple#9$T7, 
          _System._tuple#9$T8)));

// Constructor $Is
axiom (forall _System._tuple#9$T0: Ty, 
    _System._tuple#9$T1: Ty, 
    _System._tuple#9$T2: Ty, 
    _System._tuple#9$T3: Ty, 
    _System._tuple#9$T4: Ty, 
    _System._tuple#9$T5: Ty, 
    _System._tuple#9$T6: Ty, 
    _System._tuple#9$T7: Ty, 
    _System._tuple#9$T8: Ty, 
    a#112#0#0: Box, 
    a#112#1#0: Box, 
    a#112#2#0: Box, 
    a#112#3#0: Box, 
    a#112#4#0: Box, 
    a#112#5#0: Box, 
    a#112#6#0: Box, 
    a#112#7#0: Box, 
    a#112#8#0: Box :: 
  { $Is(#_System._tuple#9._#Make9(a#112#0#0, 
        a#112#1#0, 
        a#112#2#0, 
        a#112#3#0, 
        a#112#4#0, 
        a#112#5#0, 
        a#112#6#0, 
        a#112#7#0, 
        a#112#8#0), 
      Tclass._System.Tuple9(_System._tuple#9$T0, 
        _System._tuple#9$T1, 
        _System._tuple#9$T2, 
        _System._tuple#9$T3, 
        _System._tuple#9$T4, 
        _System._tuple#9$T5, 
        _System._tuple#9$T6, 
        _System._tuple#9$T7, 
        _System._tuple#9$T8)) } 
  $Is(#_System._tuple#9._#Make9(a#112#0#0, 
        a#112#1#0, 
        a#112#2#0, 
        a#112#3#0, 
        a#112#4#0, 
        a#112#5#0, 
        a#112#6#0, 
        a#112#7#0, 
        a#112#8#0), 
      Tclass._System.Tuple9(_System._tuple#9$T0, 
        _System._tuple#9$T1, 
        _System._tuple#9$T2, 
        _System._tuple#9$T3, 
        _System._tuple#9$T4, 
        _System._tuple#9$T5, 
        _System._tuple#9$T6, 
        _System._tuple#9$T7, 
        _System._tuple#9$T8))
     <==> $IsBox(a#112#0#0, _System._tuple#9$T0)
       && $IsBox(a#112#1#0, _System._tuple#9$T1)
       && $IsBox(a#112#2#0, _System._tuple#9$T2)
       && $IsBox(a#112#3#0, _System._tuple#9$T3)
       && $IsBox(a#112#4#0, _System._tuple#9$T4)
       && $IsBox(a#112#5#0, _System._tuple#9$T5)
       && $IsBox(a#112#6#0, _System._tuple#9$T6)
       && $IsBox(a#112#7#0, _System._tuple#9$T7)
       && $IsBox(a#112#8#0, _System._tuple#9$T8));

// Constructor $IsAlloc
axiom (forall _System._tuple#9$T0: Ty, 
    _System._tuple#9$T1: Ty, 
    _System._tuple#9$T2: Ty, 
    _System._tuple#9$T3: Ty, 
    _System._tuple#9$T4: Ty, 
    _System._tuple#9$T5: Ty, 
    _System._tuple#9$T6: Ty, 
    _System._tuple#9$T7: Ty, 
    _System._tuple#9$T8: Ty, 
    a#112#0#0: Box, 
    a#112#1#0: Box, 
    a#112#2#0: Box, 
    a#112#3#0: Box, 
    a#112#4#0: Box, 
    a#112#5#0: Box, 
    a#112#6#0: Box, 
    a#112#7#0: Box, 
    a#112#8#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#9._#Make9(a#112#0#0, 
        a#112#1#0, 
        a#112#2#0, 
        a#112#3#0, 
        a#112#4#0, 
        a#112#5#0, 
        a#112#6#0, 
        a#112#7#0, 
        a#112#8#0), 
      Tclass._System.Tuple9(_System._tuple#9$T0, 
        _System._tuple#9$T1, 
        _System._tuple#9$T2, 
        _System._tuple#9$T3, 
        _System._tuple#9$T4, 
        _System._tuple#9$T5, 
        _System._tuple#9$T6, 
        _System._tuple#9$T7, 
        _System._tuple#9$T8), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#9._#Make9(a#112#0#0, 
          a#112#1#0, 
          a#112#2#0, 
          a#112#3#0, 
          a#112#4#0, 
          a#112#5#0, 
          a#112#6#0, 
          a#112#7#0, 
          a#112#8#0), 
        Tclass._System.Tuple9(_System._tuple#9$T0, 
          _System._tuple#9$T1, 
          _System._tuple#9$T2, 
          _System._tuple#9$T3, 
          _System._tuple#9$T4, 
          _System._tuple#9$T5, 
          _System._tuple#9$T6, 
          _System._tuple#9$T7, 
          _System._tuple#9$T8), 
        $h)
       <==> $IsAllocBox(a#112#0#0, _System._tuple#9$T0, $h)
         && $IsAllocBox(a#112#1#0, _System._tuple#9$T1, $h)
         && $IsAllocBox(a#112#2#0, _System._tuple#9$T2, $h)
         && $IsAllocBox(a#112#3#0, _System._tuple#9$T3, $h)
         && $IsAllocBox(a#112#4#0, _System._tuple#9$T4, $h)
         && $IsAllocBox(a#112#5#0, _System._tuple#9$T5, $h)
         && $IsAllocBox(a#112#6#0, _System._tuple#9$T6, $h)
         && $IsAllocBox(a#112#7#0, _System._tuple#9$T7, $h)
         && $IsAllocBox(a#112#8#0, _System._tuple#9$T8, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#9$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple9._0(d), _System._tuple#9$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple9.___hMake9_q(d)
       && (exists _System._tuple#9$T1: Ty, 
          _System._tuple#9$T2: Ty, 
          _System._tuple#9$T3: Ty, 
          _System._tuple#9$T4: Ty, 
          _System._tuple#9$T5: Ty, 
          _System._tuple#9$T6: Ty, 
          _System._tuple#9$T7: Ty, 
          _System._tuple#9$T8: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple9(_System._tuple#9$T0, 
              _System._tuple#9$T1, 
              _System._tuple#9$T2, 
              _System._tuple#9$T3, 
              _System._tuple#9$T4, 
              _System._tuple#9$T5, 
              _System._tuple#9$T6, 
              _System._tuple#9$T7, 
              _System._tuple#9$T8), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple9(_System._tuple#9$T0, 
            _System._tuple#9$T1, 
            _System._tuple#9$T2, 
            _System._tuple#9$T3, 
            _System._tuple#9$T4, 
            _System._tuple#9$T5, 
            _System._tuple#9$T6, 
            _System._tuple#9$T7, 
            _System._tuple#9$T8), 
          $h))
     ==> $IsAllocBox(_System.Tuple9._0(d), _System._tuple#9$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#9$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple9._1(d), _System._tuple#9$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple9.___hMake9_q(d)
       && (exists _System._tuple#9$T0: Ty, 
          _System._tuple#9$T2: Ty, 
          _System._tuple#9$T3: Ty, 
          _System._tuple#9$T4: Ty, 
          _System._tuple#9$T5: Ty, 
          _System._tuple#9$T6: Ty, 
          _System._tuple#9$T7: Ty, 
          _System._tuple#9$T8: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple9(_System._tuple#9$T0, 
              _System._tuple#9$T1, 
              _System._tuple#9$T2, 
              _System._tuple#9$T3, 
              _System._tuple#9$T4, 
              _System._tuple#9$T5, 
              _System._tuple#9$T6, 
              _System._tuple#9$T7, 
              _System._tuple#9$T8), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple9(_System._tuple#9$T0, 
            _System._tuple#9$T1, 
            _System._tuple#9$T2, 
            _System._tuple#9$T3, 
            _System._tuple#9$T4, 
            _System._tuple#9$T5, 
            _System._tuple#9$T6, 
            _System._tuple#9$T7, 
            _System._tuple#9$T8), 
          $h))
     ==> $IsAllocBox(_System.Tuple9._1(d), _System._tuple#9$T1, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#9$T2: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple9._2(d), _System._tuple#9$T2, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple9.___hMake9_q(d)
       && (exists _System._tuple#9$T0: Ty, 
          _System._tuple#9$T1: Ty, 
          _System._tuple#9$T3: Ty, 
          _System._tuple#9$T4: Ty, 
          _System._tuple#9$T5: Ty, 
          _System._tuple#9$T6: Ty, 
          _System._tuple#9$T7: Ty, 
          _System._tuple#9$T8: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple9(_System._tuple#9$T0, 
              _System._tuple#9$T1, 
              _System._tuple#9$T2, 
              _System._tuple#9$T3, 
              _System._tuple#9$T4, 
              _System._tuple#9$T5, 
              _System._tuple#9$T6, 
              _System._tuple#9$T7, 
              _System._tuple#9$T8), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple9(_System._tuple#9$T0, 
            _System._tuple#9$T1, 
            _System._tuple#9$T2, 
            _System._tuple#9$T3, 
            _System._tuple#9$T4, 
            _System._tuple#9$T5, 
            _System._tuple#9$T6, 
            _System._tuple#9$T7, 
            _System._tuple#9$T8), 
          $h))
     ==> $IsAllocBox(_System.Tuple9._2(d), _System._tuple#9$T2, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#9$T3: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple9._3(d), _System._tuple#9$T3, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple9.___hMake9_q(d)
       && (exists _System._tuple#9$T0: Ty, 
          _System._tuple#9$T1: Ty, 
          _System._tuple#9$T2: Ty, 
          _System._tuple#9$T4: Ty, 
          _System._tuple#9$T5: Ty, 
          _System._tuple#9$T6: Ty, 
          _System._tuple#9$T7: Ty, 
          _System._tuple#9$T8: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple9(_System._tuple#9$T0, 
              _System._tuple#9$T1, 
              _System._tuple#9$T2, 
              _System._tuple#9$T3, 
              _System._tuple#9$T4, 
              _System._tuple#9$T5, 
              _System._tuple#9$T6, 
              _System._tuple#9$T7, 
              _System._tuple#9$T8), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple9(_System._tuple#9$T0, 
            _System._tuple#9$T1, 
            _System._tuple#9$T2, 
            _System._tuple#9$T3, 
            _System._tuple#9$T4, 
            _System._tuple#9$T5, 
            _System._tuple#9$T6, 
            _System._tuple#9$T7, 
            _System._tuple#9$T8), 
          $h))
     ==> $IsAllocBox(_System.Tuple9._3(d), _System._tuple#9$T3, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#9$T4: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple9._4(d), _System._tuple#9$T4, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple9.___hMake9_q(d)
       && (exists _System._tuple#9$T0: Ty, 
          _System._tuple#9$T1: Ty, 
          _System._tuple#9$T2: Ty, 
          _System._tuple#9$T3: Ty, 
          _System._tuple#9$T5: Ty, 
          _System._tuple#9$T6: Ty, 
          _System._tuple#9$T7: Ty, 
          _System._tuple#9$T8: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple9(_System._tuple#9$T0, 
              _System._tuple#9$T1, 
              _System._tuple#9$T2, 
              _System._tuple#9$T3, 
              _System._tuple#9$T4, 
              _System._tuple#9$T5, 
              _System._tuple#9$T6, 
              _System._tuple#9$T7, 
              _System._tuple#9$T8), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple9(_System._tuple#9$T0, 
            _System._tuple#9$T1, 
            _System._tuple#9$T2, 
            _System._tuple#9$T3, 
            _System._tuple#9$T4, 
            _System._tuple#9$T5, 
            _System._tuple#9$T6, 
            _System._tuple#9$T7, 
            _System._tuple#9$T8), 
          $h))
     ==> $IsAllocBox(_System.Tuple9._4(d), _System._tuple#9$T4, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#9$T5: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple9._5(d), _System._tuple#9$T5, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple9.___hMake9_q(d)
       && (exists _System._tuple#9$T0: Ty, 
          _System._tuple#9$T1: Ty, 
          _System._tuple#9$T2: Ty, 
          _System._tuple#9$T3: Ty, 
          _System._tuple#9$T4: Ty, 
          _System._tuple#9$T6: Ty, 
          _System._tuple#9$T7: Ty, 
          _System._tuple#9$T8: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple9(_System._tuple#9$T0, 
              _System._tuple#9$T1, 
              _System._tuple#9$T2, 
              _System._tuple#9$T3, 
              _System._tuple#9$T4, 
              _System._tuple#9$T5, 
              _System._tuple#9$T6, 
              _System._tuple#9$T7, 
              _System._tuple#9$T8), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple9(_System._tuple#9$T0, 
            _System._tuple#9$T1, 
            _System._tuple#9$T2, 
            _System._tuple#9$T3, 
            _System._tuple#9$T4, 
            _System._tuple#9$T5, 
            _System._tuple#9$T6, 
            _System._tuple#9$T7, 
            _System._tuple#9$T8), 
          $h))
     ==> $IsAllocBox(_System.Tuple9._5(d), _System._tuple#9$T5, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#9$T6: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple9._6(d), _System._tuple#9$T6, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple9.___hMake9_q(d)
       && (exists _System._tuple#9$T0: Ty, 
          _System._tuple#9$T1: Ty, 
          _System._tuple#9$T2: Ty, 
          _System._tuple#9$T3: Ty, 
          _System._tuple#9$T4: Ty, 
          _System._tuple#9$T5: Ty, 
          _System._tuple#9$T7: Ty, 
          _System._tuple#9$T8: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple9(_System._tuple#9$T0, 
              _System._tuple#9$T1, 
              _System._tuple#9$T2, 
              _System._tuple#9$T3, 
              _System._tuple#9$T4, 
              _System._tuple#9$T5, 
              _System._tuple#9$T6, 
              _System._tuple#9$T7, 
              _System._tuple#9$T8), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple9(_System._tuple#9$T0, 
            _System._tuple#9$T1, 
            _System._tuple#9$T2, 
            _System._tuple#9$T3, 
            _System._tuple#9$T4, 
            _System._tuple#9$T5, 
            _System._tuple#9$T6, 
            _System._tuple#9$T7, 
            _System._tuple#9$T8), 
          $h))
     ==> $IsAllocBox(_System.Tuple9._6(d), _System._tuple#9$T6, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#9$T7: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple9._7(d), _System._tuple#9$T7, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple9.___hMake9_q(d)
       && (exists _System._tuple#9$T0: Ty, 
          _System._tuple#9$T1: Ty, 
          _System._tuple#9$T2: Ty, 
          _System._tuple#9$T3: Ty, 
          _System._tuple#9$T4: Ty, 
          _System._tuple#9$T5: Ty, 
          _System._tuple#9$T6: Ty, 
          _System._tuple#9$T8: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple9(_System._tuple#9$T0, 
              _System._tuple#9$T1, 
              _System._tuple#9$T2, 
              _System._tuple#9$T3, 
              _System._tuple#9$T4, 
              _System._tuple#9$T5, 
              _System._tuple#9$T6, 
              _System._tuple#9$T7, 
              _System._tuple#9$T8), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple9(_System._tuple#9$T0, 
            _System._tuple#9$T1, 
            _System._tuple#9$T2, 
            _System._tuple#9$T3, 
            _System._tuple#9$T4, 
            _System._tuple#9$T5, 
            _System._tuple#9$T6, 
            _System._tuple#9$T7, 
            _System._tuple#9$T8), 
          $h))
     ==> $IsAllocBox(_System.Tuple9._7(d), _System._tuple#9$T7, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#9$T8: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple9._8(d), _System._tuple#9$T8, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple9.___hMake9_q(d)
       && (exists _System._tuple#9$T0: Ty, 
          _System._tuple#9$T1: Ty, 
          _System._tuple#9$T2: Ty, 
          _System._tuple#9$T3: Ty, 
          _System._tuple#9$T4: Ty, 
          _System._tuple#9$T5: Ty, 
          _System._tuple#9$T6: Ty, 
          _System._tuple#9$T7: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple9(_System._tuple#9$T0, 
              _System._tuple#9$T1, 
              _System._tuple#9$T2, 
              _System._tuple#9$T3, 
              _System._tuple#9$T4, 
              _System._tuple#9$T5, 
              _System._tuple#9$T6, 
              _System._tuple#9$T7, 
              _System._tuple#9$T8), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple9(_System._tuple#9$T0, 
            _System._tuple#9$T1, 
            _System._tuple#9$T2, 
            _System._tuple#9$T3, 
            _System._tuple#9$T4, 
            _System._tuple#9$T5, 
            _System._tuple#9$T6, 
            _System._tuple#9$T7, 
            _System._tuple#9$T8), 
          $h))
     ==> $IsAllocBox(_System.Tuple9._8(d), _System._tuple#9$T8, $h));

// Constructor literal
axiom (forall a#113#0#0: Box, 
    a#113#1#0: Box, 
    a#113#2#0: Box, 
    a#113#3#0: Box, 
    a#113#4#0: Box, 
    a#113#5#0: Box, 
    a#113#6#0: Box, 
    a#113#7#0: Box, 
    a#113#8#0: Box :: 
  { #_System._tuple#9._#Make9(Lit(a#113#0#0), 
      Lit(a#113#1#0), 
      Lit(a#113#2#0), 
      Lit(a#113#3#0), 
      Lit(a#113#4#0), 
      Lit(a#113#5#0), 
      Lit(a#113#6#0), 
      Lit(a#113#7#0), 
      Lit(a#113#8#0)) } 
  #_System._tuple#9._#Make9(Lit(a#113#0#0), 
      Lit(a#113#1#0), 
      Lit(a#113#2#0), 
      Lit(a#113#3#0), 
      Lit(a#113#4#0), 
      Lit(a#113#5#0), 
      Lit(a#113#6#0), 
      Lit(a#113#7#0), 
      Lit(a#113#8#0))
     == Lit(#_System._tuple#9._#Make9(a#113#0#0, 
        a#113#1#0, 
        a#113#2#0, 
        a#113#3#0, 
        a#113#4#0, 
        a#113#5#0, 
        a#113#6#0, 
        a#113#7#0, 
        a#113#8#0)));

function _System.Tuple9._0(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#114#0#0: Box, 
    a#114#1#0: Box, 
    a#114#2#0: Box, 
    a#114#3#0: Box, 
    a#114#4#0: Box, 
    a#114#5#0: Box, 
    a#114#6#0: Box, 
    a#114#7#0: Box, 
    a#114#8#0: Box :: 
  { #_System._tuple#9._#Make9(a#114#0#0, 
      a#114#1#0, 
      a#114#2#0, 
      a#114#3#0, 
      a#114#4#0, 
      a#114#5#0, 
      a#114#6#0, 
      a#114#7#0, 
      a#114#8#0) } 
  _System.Tuple9._0(#_System._tuple#9._#Make9(a#114#0#0, 
        a#114#1#0, 
        a#114#2#0, 
        a#114#3#0, 
        a#114#4#0, 
        a#114#5#0, 
        a#114#6#0, 
        a#114#7#0, 
        a#114#8#0))
     == a#114#0#0);

// Inductive rank
axiom (forall a#115#0#0: Box, 
    a#115#1#0: Box, 
    a#115#2#0: Box, 
    a#115#3#0: Box, 
    a#115#4#0: Box, 
    a#115#5#0: Box, 
    a#115#6#0: Box, 
    a#115#7#0: Box, 
    a#115#8#0: Box :: 
  { #_System._tuple#9._#Make9(a#115#0#0, 
      a#115#1#0, 
      a#115#2#0, 
      a#115#3#0, 
      a#115#4#0, 
      a#115#5#0, 
      a#115#6#0, 
      a#115#7#0, 
      a#115#8#0) } 
  BoxRank(a#115#0#0)
     < DtRank(#_System._tuple#9._#Make9(a#115#0#0, 
        a#115#1#0, 
        a#115#2#0, 
        a#115#3#0, 
        a#115#4#0, 
        a#115#5#0, 
        a#115#6#0, 
        a#115#7#0, 
        a#115#8#0)));

function _System.Tuple9._1(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#116#0#0: Box, 
    a#116#1#0: Box, 
    a#116#2#0: Box, 
    a#116#3#0: Box, 
    a#116#4#0: Box, 
    a#116#5#0: Box, 
    a#116#6#0: Box, 
    a#116#7#0: Box, 
    a#116#8#0: Box :: 
  { #_System._tuple#9._#Make9(a#116#0#0, 
      a#116#1#0, 
      a#116#2#0, 
      a#116#3#0, 
      a#116#4#0, 
      a#116#5#0, 
      a#116#6#0, 
      a#116#7#0, 
      a#116#8#0) } 
  _System.Tuple9._1(#_System._tuple#9._#Make9(a#116#0#0, 
        a#116#1#0, 
        a#116#2#0, 
        a#116#3#0, 
        a#116#4#0, 
        a#116#5#0, 
        a#116#6#0, 
        a#116#7#0, 
        a#116#8#0))
     == a#116#1#0);

// Inductive rank
axiom (forall a#117#0#0: Box, 
    a#117#1#0: Box, 
    a#117#2#0: Box, 
    a#117#3#0: Box, 
    a#117#4#0: Box, 
    a#117#5#0: Box, 
    a#117#6#0: Box, 
    a#117#7#0: Box, 
    a#117#8#0: Box :: 
  { #_System._tuple#9._#Make9(a#117#0#0, 
      a#117#1#0, 
      a#117#2#0, 
      a#117#3#0, 
      a#117#4#0, 
      a#117#5#0, 
      a#117#6#0, 
      a#117#7#0, 
      a#117#8#0) } 
  BoxRank(a#117#1#0)
     < DtRank(#_System._tuple#9._#Make9(a#117#0#0, 
        a#117#1#0, 
        a#117#2#0, 
        a#117#3#0, 
        a#117#4#0, 
        a#117#5#0, 
        a#117#6#0, 
        a#117#7#0, 
        a#117#8#0)));

function _System.Tuple9._2(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#118#0#0: Box, 
    a#118#1#0: Box, 
    a#118#2#0: Box, 
    a#118#3#0: Box, 
    a#118#4#0: Box, 
    a#118#5#0: Box, 
    a#118#6#0: Box, 
    a#118#7#0: Box, 
    a#118#8#0: Box :: 
  { #_System._tuple#9._#Make9(a#118#0#0, 
      a#118#1#0, 
      a#118#2#0, 
      a#118#3#0, 
      a#118#4#0, 
      a#118#5#0, 
      a#118#6#0, 
      a#118#7#0, 
      a#118#8#0) } 
  _System.Tuple9._2(#_System._tuple#9._#Make9(a#118#0#0, 
        a#118#1#0, 
        a#118#2#0, 
        a#118#3#0, 
        a#118#4#0, 
        a#118#5#0, 
        a#118#6#0, 
        a#118#7#0, 
        a#118#8#0))
     == a#118#2#0);

// Inductive rank
axiom (forall a#119#0#0: Box, 
    a#119#1#0: Box, 
    a#119#2#0: Box, 
    a#119#3#0: Box, 
    a#119#4#0: Box, 
    a#119#5#0: Box, 
    a#119#6#0: Box, 
    a#119#7#0: Box, 
    a#119#8#0: Box :: 
  { #_System._tuple#9._#Make9(a#119#0#0, 
      a#119#1#0, 
      a#119#2#0, 
      a#119#3#0, 
      a#119#4#0, 
      a#119#5#0, 
      a#119#6#0, 
      a#119#7#0, 
      a#119#8#0) } 
  BoxRank(a#119#2#0)
     < DtRank(#_System._tuple#9._#Make9(a#119#0#0, 
        a#119#1#0, 
        a#119#2#0, 
        a#119#3#0, 
        a#119#4#0, 
        a#119#5#0, 
        a#119#6#0, 
        a#119#7#0, 
        a#119#8#0)));

function _System.Tuple9._3(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#120#0#0: Box, 
    a#120#1#0: Box, 
    a#120#2#0: Box, 
    a#120#3#0: Box, 
    a#120#4#0: Box, 
    a#120#5#0: Box, 
    a#120#6#0: Box, 
    a#120#7#0: Box, 
    a#120#8#0: Box :: 
  { #_System._tuple#9._#Make9(a#120#0#0, 
      a#120#1#0, 
      a#120#2#0, 
      a#120#3#0, 
      a#120#4#0, 
      a#120#5#0, 
      a#120#6#0, 
      a#120#7#0, 
      a#120#8#0) } 
  _System.Tuple9._3(#_System._tuple#9._#Make9(a#120#0#0, 
        a#120#1#0, 
        a#120#2#0, 
        a#120#3#0, 
        a#120#4#0, 
        a#120#5#0, 
        a#120#6#0, 
        a#120#7#0, 
        a#120#8#0))
     == a#120#3#0);

// Inductive rank
axiom (forall a#121#0#0: Box, 
    a#121#1#0: Box, 
    a#121#2#0: Box, 
    a#121#3#0: Box, 
    a#121#4#0: Box, 
    a#121#5#0: Box, 
    a#121#6#0: Box, 
    a#121#7#0: Box, 
    a#121#8#0: Box :: 
  { #_System._tuple#9._#Make9(a#121#0#0, 
      a#121#1#0, 
      a#121#2#0, 
      a#121#3#0, 
      a#121#4#0, 
      a#121#5#0, 
      a#121#6#0, 
      a#121#7#0, 
      a#121#8#0) } 
  BoxRank(a#121#3#0)
     < DtRank(#_System._tuple#9._#Make9(a#121#0#0, 
        a#121#1#0, 
        a#121#2#0, 
        a#121#3#0, 
        a#121#4#0, 
        a#121#5#0, 
        a#121#6#0, 
        a#121#7#0, 
        a#121#8#0)));

function _System.Tuple9._4(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#122#0#0: Box, 
    a#122#1#0: Box, 
    a#122#2#0: Box, 
    a#122#3#0: Box, 
    a#122#4#0: Box, 
    a#122#5#0: Box, 
    a#122#6#0: Box, 
    a#122#7#0: Box, 
    a#122#8#0: Box :: 
  { #_System._tuple#9._#Make9(a#122#0#0, 
      a#122#1#0, 
      a#122#2#0, 
      a#122#3#0, 
      a#122#4#0, 
      a#122#5#0, 
      a#122#6#0, 
      a#122#7#0, 
      a#122#8#0) } 
  _System.Tuple9._4(#_System._tuple#9._#Make9(a#122#0#0, 
        a#122#1#0, 
        a#122#2#0, 
        a#122#3#0, 
        a#122#4#0, 
        a#122#5#0, 
        a#122#6#0, 
        a#122#7#0, 
        a#122#8#0))
     == a#122#4#0);

// Inductive rank
axiom (forall a#123#0#0: Box, 
    a#123#1#0: Box, 
    a#123#2#0: Box, 
    a#123#3#0: Box, 
    a#123#4#0: Box, 
    a#123#5#0: Box, 
    a#123#6#0: Box, 
    a#123#7#0: Box, 
    a#123#8#0: Box :: 
  { #_System._tuple#9._#Make9(a#123#0#0, 
      a#123#1#0, 
      a#123#2#0, 
      a#123#3#0, 
      a#123#4#0, 
      a#123#5#0, 
      a#123#6#0, 
      a#123#7#0, 
      a#123#8#0) } 
  BoxRank(a#123#4#0)
     < DtRank(#_System._tuple#9._#Make9(a#123#0#0, 
        a#123#1#0, 
        a#123#2#0, 
        a#123#3#0, 
        a#123#4#0, 
        a#123#5#0, 
        a#123#6#0, 
        a#123#7#0, 
        a#123#8#0)));

function _System.Tuple9._5(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#124#0#0: Box, 
    a#124#1#0: Box, 
    a#124#2#0: Box, 
    a#124#3#0: Box, 
    a#124#4#0: Box, 
    a#124#5#0: Box, 
    a#124#6#0: Box, 
    a#124#7#0: Box, 
    a#124#8#0: Box :: 
  { #_System._tuple#9._#Make9(a#124#0#0, 
      a#124#1#0, 
      a#124#2#0, 
      a#124#3#0, 
      a#124#4#0, 
      a#124#5#0, 
      a#124#6#0, 
      a#124#7#0, 
      a#124#8#0) } 
  _System.Tuple9._5(#_System._tuple#9._#Make9(a#124#0#0, 
        a#124#1#0, 
        a#124#2#0, 
        a#124#3#0, 
        a#124#4#0, 
        a#124#5#0, 
        a#124#6#0, 
        a#124#7#0, 
        a#124#8#0))
     == a#124#5#0);

// Inductive rank
axiom (forall a#125#0#0: Box, 
    a#125#1#0: Box, 
    a#125#2#0: Box, 
    a#125#3#0: Box, 
    a#125#4#0: Box, 
    a#125#5#0: Box, 
    a#125#6#0: Box, 
    a#125#7#0: Box, 
    a#125#8#0: Box :: 
  { #_System._tuple#9._#Make9(a#125#0#0, 
      a#125#1#0, 
      a#125#2#0, 
      a#125#3#0, 
      a#125#4#0, 
      a#125#5#0, 
      a#125#6#0, 
      a#125#7#0, 
      a#125#8#0) } 
  BoxRank(a#125#5#0)
     < DtRank(#_System._tuple#9._#Make9(a#125#0#0, 
        a#125#1#0, 
        a#125#2#0, 
        a#125#3#0, 
        a#125#4#0, 
        a#125#5#0, 
        a#125#6#0, 
        a#125#7#0, 
        a#125#8#0)));

function _System.Tuple9._6(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#126#0#0: Box, 
    a#126#1#0: Box, 
    a#126#2#0: Box, 
    a#126#3#0: Box, 
    a#126#4#0: Box, 
    a#126#5#0: Box, 
    a#126#6#0: Box, 
    a#126#7#0: Box, 
    a#126#8#0: Box :: 
  { #_System._tuple#9._#Make9(a#126#0#0, 
      a#126#1#0, 
      a#126#2#0, 
      a#126#3#0, 
      a#126#4#0, 
      a#126#5#0, 
      a#126#6#0, 
      a#126#7#0, 
      a#126#8#0) } 
  _System.Tuple9._6(#_System._tuple#9._#Make9(a#126#0#0, 
        a#126#1#0, 
        a#126#2#0, 
        a#126#3#0, 
        a#126#4#0, 
        a#126#5#0, 
        a#126#6#0, 
        a#126#7#0, 
        a#126#8#0))
     == a#126#6#0);

// Inductive rank
axiom (forall a#127#0#0: Box, 
    a#127#1#0: Box, 
    a#127#2#0: Box, 
    a#127#3#0: Box, 
    a#127#4#0: Box, 
    a#127#5#0: Box, 
    a#127#6#0: Box, 
    a#127#7#0: Box, 
    a#127#8#0: Box :: 
  { #_System._tuple#9._#Make9(a#127#0#0, 
      a#127#1#0, 
      a#127#2#0, 
      a#127#3#0, 
      a#127#4#0, 
      a#127#5#0, 
      a#127#6#0, 
      a#127#7#0, 
      a#127#8#0) } 
  BoxRank(a#127#6#0)
     < DtRank(#_System._tuple#9._#Make9(a#127#0#0, 
        a#127#1#0, 
        a#127#2#0, 
        a#127#3#0, 
        a#127#4#0, 
        a#127#5#0, 
        a#127#6#0, 
        a#127#7#0, 
        a#127#8#0)));

function _System.Tuple9._7(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#128#0#0: Box, 
    a#128#1#0: Box, 
    a#128#2#0: Box, 
    a#128#3#0: Box, 
    a#128#4#0: Box, 
    a#128#5#0: Box, 
    a#128#6#0: Box, 
    a#128#7#0: Box, 
    a#128#8#0: Box :: 
  { #_System._tuple#9._#Make9(a#128#0#0, 
      a#128#1#0, 
      a#128#2#0, 
      a#128#3#0, 
      a#128#4#0, 
      a#128#5#0, 
      a#128#6#0, 
      a#128#7#0, 
      a#128#8#0) } 
  _System.Tuple9._7(#_System._tuple#9._#Make9(a#128#0#0, 
        a#128#1#0, 
        a#128#2#0, 
        a#128#3#0, 
        a#128#4#0, 
        a#128#5#0, 
        a#128#6#0, 
        a#128#7#0, 
        a#128#8#0))
     == a#128#7#0);

// Inductive rank
axiom (forall a#129#0#0: Box, 
    a#129#1#0: Box, 
    a#129#2#0: Box, 
    a#129#3#0: Box, 
    a#129#4#0: Box, 
    a#129#5#0: Box, 
    a#129#6#0: Box, 
    a#129#7#0: Box, 
    a#129#8#0: Box :: 
  { #_System._tuple#9._#Make9(a#129#0#0, 
      a#129#1#0, 
      a#129#2#0, 
      a#129#3#0, 
      a#129#4#0, 
      a#129#5#0, 
      a#129#6#0, 
      a#129#7#0, 
      a#129#8#0) } 
  BoxRank(a#129#7#0)
     < DtRank(#_System._tuple#9._#Make9(a#129#0#0, 
        a#129#1#0, 
        a#129#2#0, 
        a#129#3#0, 
        a#129#4#0, 
        a#129#5#0, 
        a#129#6#0, 
        a#129#7#0, 
        a#129#8#0)));

function _System.Tuple9._8(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#130#0#0: Box, 
    a#130#1#0: Box, 
    a#130#2#0: Box, 
    a#130#3#0: Box, 
    a#130#4#0: Box, 
    a#130#5#0: Box, 
    a#130#6#0: Box, 
    a#130#7#0: Box, 
    a#130#8#0: Box :: 
  { #_System._tuple#9._#Make9(a#130#0#0, 
      a#130#1#0, 
      a#130#2#0, 
      a#130#3#0, 
      a#130#4#0, 
      a#130#5#0, 
      a#130#6#0, 
      a#130#7#0, 
      a#130#8#0) } 
  _System.Tuple9._8(#_System._tuple#9._#Make9(a#130#0#0, 
        a#130#1#0, 
        a#130#2#0, 
        a#130#3#0, 
        a#130#4#0, 
        a#130#5#0, 
        a#130#6#0, 
        a#130#7#0, 
        a#130#8#0))
     == a#130#8#0);

// Inductive rank
axiom (forall a#131#0#0: Box, 
    a#131#1#0: Box, 
    a#131#2#0: Box, 
    a#131#3#0: Box, 
    a#131#4#0: Box, 
    a#131#5#0: Box, 
    a#131#6#0: Box, 
    a#131#7#0: Box, 
    a#131#8#0: Box :: 
  { #_System._tuple#9._#Make9(a#131#0#0, 
      a#131#1#0, 
      a#131#2#0, 
      a#131#3#0, 
      a#131#4#0, 
      a#131#5#0, 
      a#131#6#0, 
      a#131#7#0, 
      a#131#8#0) } 
  BoxRank(a#131#8#0)
     < DtRank(#_System._tuple#9._#Make9(a#131#0#0, 
        a#131#1#0, 
        a#131#2#0, 
        a#131#3#0, 
        a#131#4#0, 
        a#131#5#0, 
        a#131#6#0, 
        a#131#7#0, 
        a#131#8#0)));

// Depth-one case-split function
function $IsA#_System.Tuple9(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple9(d) } 
  $IsA#_System.Tuple9(d) ==> _System.Tuple9.___hMake9_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#9$T0: Ty, 
    _System._tuple#9$T1: Ty, 
    _System._tuple#9$T2: Ty, 
    _System._tuple#9$T3: Ty, 
    _System._tuple#9$T4: Ty, 
    _System._tuple#9$T5: Ty, 
    _System._tuple#9$T6: Ty, 
    _System._tuple#9$T7: Ty, 
    _System._tuple#9$T8: Ty, 
    d: DatatypeType :: 
  { _System.Tuple9.___hMake9_q(d), $Is(d, 
      Tclass._System.Tuple9(_System._tuple#9$T0, 
        _System._tuple#9$T1, 
        _System._tuple#9$T2, 
        _System._tuple#9$T3, 
        _System._tuple#9$T4, 
        _System._tuple#9$T5, 
        _System._tuple#9$T6, 
        _System._tuple#9$T7, 
        _System._tuple#9$T8)) } 
  $Is(d, 
      Tclass._System.Tuple9(_System._tuple#9$T0, 
        _System._tuple#9$T1, 
        _System._tuple#9$T2, 
        _System._tuple#9$T3, 
        _System._tuple#9$T4, 
        _System._tuple#9$T5, 
        _System._tuple#9$T6, 
        _System._tuple#9$T7, 
        _System._tuple#9$T8))
     ==> _System.Tuple9.___hMake9_q(d));

// Datatype extensional equality declaration
function _System.Tuple9#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#9._#Make9
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple9#Equal(a, b) } 
  _System.Tuple9#Equal(a, b)
     <==> _System.Tuple9._0(a) == _System.Tuple9._0(b)
       && _System.Tuple9._1(a) == _System.Tuple9._1(b)
       && _System.Tuple9._2(a) == _System.Tuple9._2(b)
       && _System.Tuple9._3(a) == _System.Tuple9._3(b)
       && _System.Tuple9._4(a) == _System.Tuple9._4(b)
       && _System.Tuple9._5(a) == _System.Tuple9._5(b)
       && _System.Tuple9._6(a) == _System.Tuple9._6(b)
       && _System.Tuple9._7(a) == _System.Tuple9._7(b)
       && _System.Tuple9._8(a) == _System.Tuple9._8(b));

// Datatype extensionality axiom: _System._tuple#9
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple9#Equal(a, b) } 
  _System.Tuple9#Equal(a, b) <==> a == b);

const unique class._System.Tuple9: ClassName;

// Constructor function declaration
function #_System._tuple#10._#Make10(Box, Box, Box, Box, Box, Box, Box, Box, Box, Box) : DatatypeType;

const unique ##_System._tuple#10._#Make10: DtCtorId
uses {
// Constructor identifier
axiom (forall a#132#0#0: Box, 
    a#132#1#0: Box, 
    a#132#2#0: Box, 
    a#132#3#0: Box, 
    a#132#4#0: Box, 
    a#132#5#0: Box, 
    a#132#6#0: Box, 
    a#132#7#0: Box, 
    a#132#8#0: Box, 
    a#132#9#0: Box :: 
  { #_System._tuple#10._#Make10(a#132#0#0, 
      a#132#1#0, 
      a#132#2#0, 
      a#132#3#0, 
      a#132#4#0, 
      a#132#5#0, 
      a#132#6#0, 
      a#132#7#0, 
      a#132#8#0, 
      a#132#9#0) } 
  DatatypeCtorId(#_System._tuple#10._#Make10(a#132#0#0, 
        a#132#1#0, 
        a#132#2#0, 
        a#132#3#0, 
        a#132#4#0, 
        a#132#5#0, 
        a#132#6#0, 
        a#132#7#0, 
        a#132#8#0, 
        a#132#9#0))
     == ##_System._tuple#10._#Make10);
}

function _System.Tuple10.___hMake10_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple10.___hMake10_q(d) } 
  _System.Tuple10.___hMake10_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#10._#Make10);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple10.___hMake10_q(d) } 
  _System.Tuple10.___hMake10_q(d)
     ==> (exists a#133#0#0: Box, 
        a#133#1#0: Box, 
        a#133#2#0: Box, 
        a#133#3#0: Box, 
        a#133#4#0: Box, 
        a#133#5#0: Box, 
        a#133#6#0: Box, 
        a#133#7#0: Box, 
        a#133#8#0: Box, 
        a#133#9#0: Box :: 
      d
         == #_System._tuple#10._#Make10(a#133#0#0, 
          a#133#1#0, 
          a#133#2#0, 
          a#133#3#0, 
          a#133#4#0, 
          a#133#5#0, 
          a#133#6#0, 
          a#133#7#0, 
          a#133#8#0, 
          a#133#9#0)));

function Tclass._System.Tuple10(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.Tuple10: TyTag;

// Tclass._System.Tuple10 Tag
axiom (forall _System._tuple#10$T0: Ty, 
    _System._tuple#10$T1: Ty, 
    _System._tuple#10$T2: Ty, 
    _System._tuple#10$T3: Ty, 
    _System._tuple#10$T4: Ty, 
    _System._tuple#10$T5: Ty, 
    _System._tuple#10$T6: Ty, 
    _System._tuple#10$T7: Ty, 
    _System._tuple#10$T8: Ty, 
    _System._tuple#10$T9: Ty :: 
  { Tclass._System.Tuple10(_System._tuple#10$T0, 
      _System._tuple#10$T1, 
      _System._tuple#10$T2, 
      _System._tuple#10$T3, 
      _System._tuple#10$T4, 
      _System._tuple#10$T5, 
      _System._tuple#10$T6, 
      _System._tuple#10$T7, 
      _System._tuple#10$T8, 
      _System._tuple#10$T9) } 
  Tag(Tclass._System.Tuple10(_System._tuple#10$T0, 
          _System._tuple#10$T1, 
          _System._tuple#10$T2, 
          _System._tuple#10$T3, 
          _System._tuple#10$T4, 
          _System._tuple#10$T5, 
          _System._tuple#10$T6, 
          _System._tuple#10$T7, 
          _System._tuple#10$T8, 
          _System._tuple#10$T9))
       == Tagclass._System.Tuple10
     && TagFamily(Tclass._System.Tuple10(_System._tuple#10$T0, 
          _System._tuple#10$T1, 
          _System._tuple#10$T2, 
          _System._tuple#10$T3, 
          _System._tuple#10$T4, 
          _System._tuple#10$T5, 
          _System._tuple#10$T6, 
          _System._tuple#10$T7, 
          _System._tuple#10$T8, 
          _System._tuple#10$T9))
       == tytagFamily$_tuple#10);

function Tclass._System.Tuple10_0(Ty) : Ty;

// Tclass._System.Tuple10 injectivity 0
axiom (forall _System._tuple#10$T0: Ty, 
    _System._tuple#10$T1: Ty, 
    _System._tuple#10$T2: Ty, 
    _System._tuple#10$T3: Ty, 
    _System._tuple#10$T4: Ty, 
    _System._tuple#10$T5: Ty, 
    _System._tuple#10$T6: Ty, 
    _System._tuple#10$T7: Ty, 
    _System._tuple#10$T8: Ty, 
    _System._tuple#10$T9: Ty :: 
  { Tclass._System.Tuple10(_System._tuple#10$T0, 
      _System._tuple#10$T1, 
      _System._tuple#10$T2, 
      _System._tuple#10$T3, 
      _System._tuple#10$T4, 
      _System._tuple#10$T5, 
      _System._tuple#10$T6, 
      _System._tuple#10$T7, 
      _System._tuple#10$T8, 
      _System._tuple#10$T9) } 
  Tclass._System.Tuple10_0(Tclass._System.Tuple10(_System._tuple#10$T0, 
        _System._tuple#10$T1, 
        _System._tuple#10$T2, 
        _System._tuple#10$T3, 
        _System._tuple#10$T4, 
        _System._tuple#10$T5, 
        _System._tuple#10$T6, 
        _System._tuple#10$T7, 
        _System._tuple#10$T8, 
        _System._tuple#10$T9))
     == _System._tuple#10$T0);

function Tclass._System.Tuple10_1(Ty) : Ty;

// Tclass._System.Tuple10 injectivity 1
axiom (forall _System._tuple#10$T0: Ty, 
    _System._tuple#10$T1: Ty, 
    _System._tuple#10$T2: Ty, 
    _System._tuple#10$T3: Ty, 
    _System._tuple#10$T4: Ty, 
    _System._tuple#10$T5: Ty, 
    _System._tuple#10$T6: Ty, 
    _System._tuple#10$T7: Ty, 
    _System._tuple#10$T8: Ty, 
    _System._tuple#10$T9: Ty :: 
  { Tclass._System.Tuple10(_System._tuple#10$T0, 
      _System._tuple#10$T1, 
      _System._tuple#10$T2, 
      _System._tuple#10$T3, 
      _System._tuple#10$T4, 
      _System._tuple#10$T5, 
      _System._tuple#10$T6, 
      _System._tuple#10$T7, 
      _System._tuple#10$T8, 
      _System._tuple#10$T9) } 
  Tclass._System.Tuple10_1(Tclass._System.Tuple10(_System._tuple#10$T0, 
        _System._tuple#10$T1, 
        _System._tuple#10$T2, 
        _System._tuple#10$T3, 
        _System._tuple#10$T4, 
        _System._tuple#10$T5, 
        _System._tuple#10$T6, 
        _System._tuple#10$T7, 
        _System._tuple#10$T8, 
        _System._tuple#10$T9))
     == _System._tuple#10$T1);

function Tclass._System.Tuple10_2(Ty) : Ty;

// Tclass._System.Tuple10 injectivity 2
axiom (forall _System._tuple#10$T0: Ty, 
    _System._tuple#10$T1: Ty, 
    _System._tuple#10$T2: Ty, 
    _System._tuple#10$T3: Ty, 
    _System._tuple#10$T4: Ty, 
    _System._tuple#10$T5: Ty, 
    _System._tuple#10$T6: Ty, 
    _System._tuple#10$T7: Ty, 
    _System._tuple#10$T8: Ty, 
    _System._tuple#10$T9: Ty :: 
  { Tclass._System.Tuple10(_System._tuple#10$T0, 
      _System._tuple#10$T1, 
      _System._tuple#10$T2, 
      _System._tuple#10$T3, 
      _System._tuple#10$T4, 
      _System._tuple#10$T5, 
      _System._tuple#10$T6, 
      _System._tuple#10$T7, 
      _System._tuple#10$T8, 
      _System._tuple#10$T9) } 
  Tclass._System.Tuple10_2(Tclass._System.Tuple10(_System._tuple#10$T0, 
        _System._tuple#10$T1, 
        _System._tuple#10$T2, 
        _System._tuple#10$T3, 
        _System._tuple#10$T4, 
        _System._tuple#10$T5, 
        _System._tuple#10$T6, 
        _System._tuple#10$T7, 
        _System._tuple#10$T8, 
        _System._tuple#10$T9))
     == _System._tuple#10$T2);

function Tclass._System.Tuple10_3(Ty) : Ty;

// Tclass._System.Tuple10 injectivity 3
axiom (forall _System._tuple#10$T0: Ty, 
    _System._tuple#10$T1: Ty, 
    _System._tuple#10$T2: Ty, 
    _System._tuple#10$T3: Ty, 
    _System._tuple#10$T4: Ty, 
    _System._tuple#10$T5: Ty, 
    _System._tuple#10$T6: Ty, 
    _System._tuple#10$T7: Ty, 
    _System._tuple#10$T8: Ty, 
    _System._tuple#10$T9: Ty :: 
  { Tclass._System.Tuple10(_System._tuple#10$T0, 
      _System._tuple#10$T1, 
      _System._tuple#10$T2, 
      _System._tuple#10$T3, 
      _System._tuple#10$T4, 
      _System._tuple#10$T5, 
      _System._tuple#10$T6, 
      _System._tuple#10$T7, 
      _System._tuple#10$T8, 
      _System._tuple#10$T9) } 
  Tclass._System.Tuple10_3(Tclass._System.Tuple10(_System._tuple#10$T0, 
        _System._tuple#10$T1, 
        _System._tuple#10$T2, 
        _System._tuple#10$T3, 
        _System._tuple#10$T4, 
        _System._tuple#10$T5, 
        _System._tuple#10$T6, 
        _System._tuple#10$T7, 
        _System._tuple#10$T8, 
        _System._tuple#10$T9))
     == _System._tuple#10$T3);

function Tclass._System.Tuple10_4(Ty) : Ty;

// Tclass._System.Tuple10 injectivity 4
axiom (forall _System._tuple#10$T0: Ty, 
    _System._tuple#10$T1: Ty, 
    _System._tuple#10$T2: Ty, 
    _System._tuple#10$T3: Ty, 
    _System._tuple#10$T4: Ty, 
    _System._tuple#10$T5: Ty, 
    _System._tuple#10$T6: Ty, 
    _System._tuple#10$T7: Ty, 
    _System._tuple#10$T8: Ty, 
    _System._tuple#10$T9: Ty :: 
  { Tclass._System.Tuple10(_System._tuple#10$T0, 
      _System._tuple#10$T1, 
      _System._tuple#10$T2, 
      _System._tuple#10$T3, 
      _System._tuple#10$T4, 
      _System._tuple#10$T5, 
      _System._tuple#10$T6, 
      _System._tuple#10$T7, 
      _System._tuple#10$T8, 
      _System._tuple#10$T9) } 
  Tclass._System.Tuple10_4(Tclass._System.Tuple10(_System._tuple#10$T0, 
        _System._tuple#10$T1, 
        _System._tuple#10$T2, 
        _System._tuple#10$T3, 
        _System._tuple#10$T4, 
        _System._tuple#10$T5, 
        _System._tuple#10$T6, 
        _System._tuple#10$T7, 
        _System._tuple#10$T8, 
        _System._tuple#10$T9))
     == _System._tuple#10$T4);

function Tclass._System.Tuple10_5(Ty) : Ty;

// Tclass._System.Tuple10 injectivity 5
axiom (forall _System._tuple#10$T0: Ty, 
    _System._tuple#10$T1: Ty, 
    _System._tuple#10$T2: Ty, 
    _System._tuple#10$T3: Ty, 
    _System._tuple#10$T4: Ty, 
    _System._tuple#10$T5: Ty, 
    _System._tuple#10$T6: Ty, 
    _System._tuple#10$T7: Ty, 
    _System._tuple#10$T8: Ty, 
    _System._tuple#10$T9: Ty :: 
  { Tclass._System.Tuple10(_System._tuple#10$T0, 
      _System._tuple#10$T1, 
      _System._tuple#10$T2, 
      _System._tuple#10$T3, 
      _System._tuple#10$T4, 
      _System._tuple#10$T5, 
      _System._tuple#10$T6, 
      _System._tuple#10$T7, 
      _System._tuple#10$T8, 
      _System._tuple#10$T9) } 
  Tclass._System.Tuple10_5(Tclass._System.Tuple10(_System._tuple#10$T0, 
        _System._tuple#10$T1, 
        _System._tuple#10$T2, 
        _System._tuple#10$T3, 
        _System._tuple#10$T4, 
        _System._tuple#10$T5, 
        _System._tuple#10$T6, 
        _System._tuple#10$T7, 
        _System._tuple#10$T8, 
        _System._tuple#10$T9))
     == _System._tuple#10$T5);

function Tclass._System.Tuple10_6(Ty) : Ty;

// Tclass._System.Tuple10 injectivity 6
axiom (forall _System._tuple#10$T0: Ty, 
    _System._tuple#10$T1: Ty, 
    _System._tuple#10$T2: Ty, 
    _System._tuple#10$T3: Ty, 
    _System._tuple#10$T4: Ty, 
    _System._tuple#10$T5: Ty, 
    _System._tuple#10$T6: Ty, 
    _System._tuple#10$T7: Ty, 
    _System._tuple#10$T8: Ty, 
    _System._tuple#10$T9: Ty :: 
  { Tclass._System.Tuple10(_System._tuple#10$T0, 
      _System._tuple#10$T1, 
      _System._tuple#10$T2, 
      _System._tuple#10$T3, 
      _System._tuple#10$T4, 
      _System._tuple#10$T5, 
      _System._tuple#10$T6, 
      _System._tuple#10$T7, 
      _System._tuple#10$T8, 
      _System._tuple#10$T9) } 
  Tclass._System.Tuple10_6(Tclass._System.Tuple10(_System._tuple#10$T0, 
        _System._tuple#10$T1, 
        _System._tuple#10$T2, 
        _System._tuple#10$T3, 
        _System._tuple#10$T4, 
        _System._tuple#10$T5, 
        _System._tuple#10$T6, 
        _System._tuple#10$T7, 
        _System._tuple#10$T8, 
        _System._tuple#10$T9))
     == _System._tuple#10$T6);

function Tclass._System.Tuple10_7(Ty) : Ty;

// Tclass._System.Tuple10 injectivity 7
axiom (forall _System._tuple#10$T0: Ty, 
    _System._tuple#10$T1: Ty, 
    _System._tuple#10$T2: Ty, 
    _System._tuple#10$T3: Ty, 
    _System._tuple#10$T4: Ty, 
    _System._tuple#10$T5: Ty, 
    _System._tuple#10$T6: Ty, 
    _System._tuple#10$T7: Ty, 
    _System._tuple#10$T8: Ty, 
    _System._tuple#10$T9: Ty :: 
  { Tclass._System.Tuple10(_System._tuple#10$T0, 
      _System._tuple#10$T1, 
      _System._tuple#10$T2, 
      _System._tuple#10$T3, 
      _System._tuple#10$T4, 
      _System._tuple#10$T5, 
      _System._tuple#10$T6, 
      _System._tuple#10$T7, 
      _System._tuple#10$T8, 
      _System._tuple#10$T9) } 
  Tclass._System.Tuple10_7(Tclass._System.Tuple10(_System._tuple#10$T0, 
        _System._tuple#10$T1, 
        _System._tuple#10$T2, 
        _System._tuple#10$T3, 
        _System._tuple#10$T4, 
        _System._tuple#10$T5, 
        _System._tuple#10$T6, 
        _System._tuple#10$T7, 
        _System._tuple#10$T8, 
        _System._tuple#10$T9))
     == _System._tuple#10$T7);

function Tclass._System.Tuple10_8(Ty) : Ty;

// Tclass._System.Tuple10 injectivity 8
axiom (forall _System._tuple#10$T0: Ty, 
    _System._tuple#10$T1: Ty, 
    _System._tuple#10$T2: Ty, 
    _System._tuple#10$T3: Ty, 
    _System._tuple#10$T4: Ty, 
    _System._tuple#10$T5: Ty, 
    _System._tuple#10$T6: Ty, 
    _System._tuple#10$T7: Ty, 
    _System._tuple#10$T8: Ty, 
    _System._tuple#10$T9: Ty :: 
  { Tclass._System.Tuple10(_System._tuple#10$T0, 
      _System._tuple#10$T1, 
      _System._tuple#10$T2, 
      _System._tuple#10$T3, 
      _System._tuple#10$T4, 
      _System._tuple#10$T5, 
      _System._tuple#10$T6, 
      _System._tuple#10$T7, 
      _System._tuple#10$T8, 
      _System._tuple#10$T9) } 
  Tclass._System.Tuple10_8(Tclass._System.Tuple10(_System._tuple#10$T0, 
        _System._tuple#10$T1, 
        _System._tuple#10$T2, 
        _System._tuple#10$T3, 
        _System._tuple#10$T4, 
        _System._tuple#10$T5, 
        _System._tuple#10$T6, 
        _System._tuple#10$T7, 
        _System._tuple#10$T8, 
        _System._tuple#10$T9))
     == _System._tuple#10$T8);

function Tclass._System.Tuple10_9(Ty) : Ty;

// Tclass._System.Tuple10 injectivity 9
axiom (forall _System._tuple#10$T0: Ty, 
    _System._tuple#10$T1: Ty, 
    _System._tuple#10$T2: Ty, 
    _System._tuple#10$T3: Ty, 
    _System._tuple#10$T4: Ty, 
    _System._tuple#10$T5: Ty, 
    _System._tuple#10$T6: Ty, 
    _System._tuple#10$T7: Ty, 
    _System._tuple#10$T8: Ty, 
    _System._tuple#10$T9: Ty :: 
  { Tclass._System.Tuple10(_System._tuple#10$T0, 
      _System._tuple#10$T1, 
      _System._tuple#10$T2, 
      _System._tuple#10$T3, 
      _System._tuple#10$T4, 
      _System._tuple#10$T5, 
      _System._tuple#10$T6, 
      _System._tuple#10$T7, 
      _System._tuple#10$T8, 
      _System._tuple#10$T9) } 
  Tclass._System.Tuple10_9(Tclass._System.Tuple10(_System._tuple#10$T0, 
        _System._tuple#10$T1, 
        _System._tuple#10$T2, 
        _System._tuple#10$T3, 
        _System._tuple#10$T4, 
        _System._tuple#10$T5, 
        _System._tuple#10$T6, 
        _System._tuple#10$T7, 
        _System._tuple#10$T8, 
        _System._tuple#10$T9))
     == _System._tuple#10$T9);

// Box/unbox axiom for Tclass._System.Tuple10
axiom (forall _System._tuple#10$T0: Ty, 
    _System._tuple#10$T1: Ty, 
    _System._tuple#10$T2: Ty, 
    _System._tuple#10$T3: Ty, 
    _System._tuple#10$T4: Ty, 
    _System._tuple#10$T5: Ty, 
    _System._tuple#10$T6: Ty, 
    _System._tuple#10$T7: Ty, 
    _System._tuple#10$T8: Ty, 
    _System._tuple#10$T9: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.Tuple10(_System._tuple#10$T0, 
        _System._tuple#10$T1, 
        _System._tuple#10$T2, 
        _System._tuple#10$T3, 
        _System._tuple#10$T4, 
        _System._tuple#10$T5, 
        _System._tuple#10$T6, 
        _System._tuple#10$T7, 
        _System._tuple#10$T8, 
        _System._tuple#10$T9)) } 
  $IsBox(bx, 
      Tclass._System.Tuple10(_System._tuple#10$T0, 
        _System._tuple#10$T1, 
        _System._tuple#10$T2, 
        _System._tuple#10$T3, 
        _System._tuple#10$T4, 
        _System._tuple#10$T5, 
        _System._tuple#10$T6, 
        _System._tuple#10$T7, 
        _System._tuple#10$T8, 
        _System._tuple#10$T9))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple10(_System._tuple#10$T0, 
          _System._tuple#10$T1, 
          _System._tuple#10$T2, 
          _System._tuple#10$T3, 
          _System._tuple#10$T4, 
          _System._tuple#10$T5, 
          _System._tuple#10$T6, 
          _System._tuple#10$T7, 
          _System._tuple#10$T8, 
          _System._tuple#10$T9)));

// Constructor $Is
axiom (forall _System._tuple#10$T0: Ty, 
    _System._tuple#10$T1: Ty, 
    _System._tuple#10$T2: Ty, 
    _System._tuple#10$T3: Ty, 
    _System._tuple#10$T4: Ty, 
    _System._tuple#10$T5: Ty, 
    _System._tuple#10$T6: Ty, 
    _System._tuple#10$T7: Ty, 
    _System._tuple#10$T8: Ty, 
    _System._tuple#10$T9: Ty, 
    a#134#0#0: Box, 
    a#134#1#0: Box, 
    a#134#2#0: Box, 
    a#134#3#0: Box, 
    a#134#4#0: Box, 
    a#134#5#0: Box, 
    a#134#6#0: Box, 
    a#134#7#0: Box, 
    a#134#8#0: Box, 
    a#134#9#0: Box :: 
  { $Is(#_System._tuple#10._#Make10(a#134#0#0, 
        a#134#1#0, 
        a#134#2#0, 
        a#134#3#0, 
        a#134#4#0, 
        a#134#5#0, 
        a#134#6#0, 
        a#134#7#0, 
        a#134#8#0, 
        a#134#9#0), 
      Tclass._System.Tuple10(_System._tuple#10$T0, 
        _System._tuple#10$T1, 
        _System._tuple#10$T2, 
        _System._tuple#10$T3, 
        _System._tuple#10$T4, 
        _System._tuple#10$T5, 
        _System._tuple#10$T6, 
        _System._tuple#10$T7, 
        _System._tuple#10$T8, 
        _System._tuple#10$T9)) } 
  $Is(#_System._tuple#10._#Make10(a#134#0#0, 
        a#134#1#0, 
        a#134#2#0, 
        a#134#3#0, 
        a#134#4#0, 
        a#134#5#0, 
        a#134#6#0, 
        a#134#7#0, 
        a#134#8#0, 
        a#134#9#0), 
      Tclass._System.Tuple10(_System._tuple#10$T0, 
        _System._tuple#10$T1, 
        _System._tuple#10$T2, 
        _System._tuple#10$T3, 
        _System._tuple#10$T4, 
        _System._tuple#10$T5, 
        _System._tuple#10$T6, 
        _System._tuple#10$T7, 
        _System._tuple#10$T8, 
        _System._tuple#10$T9))
     <==> $IsBox(a#134#0#0, _System._tuple#10$T0)
       && $IsBox(a#134#1#0, _System._tuple#10$T1)
       && $IsBox(a#134#2#0, _System._tuple#10$T2)
       && $IsBox(a#134#3#0, _System._tuple#10$T3)
       && $IsBox(a#134#4#0, _System._tuple#10$T4)
       && $IsBox(a#134#5#0, _System._tuple#10$T5)
       && $IsBox(a#134#6#0, _System._tuple#10$T6)
       && $IsBox(a#134#7#0, _System._tuple#10$T7)
       && $IsBox(a#134#8#0, _System._tuple#10$T8)
       && $IsBox(a#134#9#0, _System._tuple#10$T9));

// Constructor $IsAlloc
axiom (forall _System._tuple#10$T0: Ty, 
    _System._tuple#10$T1: Ty, 
    _System._tuple#10$T2: Ty, 
    _System._tuple#10$T3: Ty, 
    _System._tuple#10$T4: Ty, 
    _System._tuple#10$T5: Ty, 
    _System._tuple#10$T6: Ty, 
    _System._tuple#10$T7: Ty, 
    _System._tuple#10$T8: Ty, 
    _System._tuple#10$T9: Ty, 
    a#134#0#0: Box, 
    a#134#1#0: Box, 
    a#134#2#0: Box, 
    a#134#3#0: Box, 
    a#134#4#0: Box, 
    a#134#5#0: Box, 
    a#134#6#0: Box, 
    a#134#7#0: Box, 
    a#134#8#0: Box, 
    a#134#9#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#10._#Make10(a#134#0#0, 
        a#134#1#0, 
        a#134#2#0, 
        a#134#3#0, 
        a#134#4#0, 
        a#134#5#0, 
        a#134#6#0, 
        a#134#7#0, 
        a#134#8#0, 
        a#134#9#0), 
      Tclass._System.Tuple10(_System._tuple#10$T0, 
        _System._tuple#10$T1, 
        _System._tuple#10$T2, 
        _System._tuple#10$T3, 
        _System._tuple#10$T4, 
        _System._tuple#10$T5, 
        _System._tuple#10$T6, 
        _System._tuple#10$T7, 
        _System._tuple#10$T8, 
        _System._tuple#10$T9), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#10._#Make10(a#134#0#0, 
          a#134#1#0, 
          a#134#2#0, 
          a#134#3#0, 
          a#134#4#0, 
          a#134#5#0, 
          a#134#6#0, 
          a#134#7#0, 
          a#134#8#0, 
          a#134#9#0), 
        Tclass._System.Tuple10(_System._tuple#10$T0, 
          _System._tuple#10$T1, 
          _System._tuple#10$T2, 
          _System._tuple#10$T3, 
          _System._tuple#10$T4, 
          _System._tuple#10$T5, 
          _System._tuple#10$T6, 
          _System._tuple#10$T7, 
          _System._tuple#10$T8, 
          _System._tuple#10$T9), 
        $h)
       <==> $IsAllocBox(a#134#0#0, _System._tuple#10$T0, $h)
         && $IsAllocBox(a#134#1#0, _System._tuple#10$T1, $h)
         && $IsAllocBox(a#134#2#0, _System._tuple#10$T2, $h)
         && $IsAllocBox(a#134#3#0, _System._tuple#10$T3, $h)
         && $IsAllocBox(a#134#4#0, _System._tuple#10$T4, $h)
         && $IsAllocBox(a#134#5#0, _System._tuple#10$T5, $h)
         && $IsAllocBox(a#134#6#0, _System._tuple#10$T6, $h)
         && $IsAllocBox(a#134#7#0, _System._tuple#10$T7, $h)
         && $IsAllocBox(a#134#8#0, _System._tuple#10$T8, $h)
         && $IsAllocBox(a#134#9#0, _System._tuple#10$T9, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#10$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple10._0(d), _System._tuple#10$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple10.___hMake10_q(d)
       && (exists _System._tuple#10$T1: Ty, 
          _System._tuple#10$T2: Ty, 
          _System._tuple#10$T3: Ty, 
          _System._tuple#10$T4: Ty, 
          _System._tuple#10$T5: Ty, 
          _System._tuple#10$T6: Ty, 
          _System._tuple#10$T7: Ty, 
          _System._tuple#10$T8: Ty, 
          _System._tuple#10$T9: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple10(_System._tuple#10$T0, 
              _System._tuple#10$T1, 
              _System._tuple#10$T2, 
              _System._tuple#10$T3, 
              _System._tuple#10$T4, 
              _System._tuple#10$T5, 
              _System._tuple#10$T6, 
              _System._tuple#10$T7, 
              _System._tuple#10$T8, 
              _System._tuple#10$T9), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple10(_System._tuple#10$T0, 
            _System._tuple#10$T1, 
            _System._tuple#10$T2, 
            _System._tuple#10$T3, 
            _System._tuple#10$T4, 
            _System._tuple#10$T5, 
            _System._tuple#10$T6, 
            _System._tuple#10$T7, 
            _System._tuple#10$T8, 
            _System._tuple#10$T9), 
          $h))
     ==> $IsAllocBox(_System.Tuple10._0(d), _System._tuple#10$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#10$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple10._1(d), _System._tuple#10$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple10.___hMake10_q(d)
       && (exists _System._tuple#10$T0: Ty, 
          _System._tuple#10$T2: Ty, 
          _System._tuple#10$T3: Ty, 
          _System._tuple#10$T4: Ty, 
          _System._tuple#10$T5: Ty, 
          _System._tuple#10$T6: Ty, 
          _System._tuple#10$T7: Ty, 
          _System._tuple#10$T8: Ty, 
          _System._tuple#10$T9: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple10(_System._tuple#10$T0, 
              _System._tuple#10$T1, 
              _System._tuple#10$T2, 
              _System._tuple#10$T3, 
              _System._tuple#10$T4, 
              _System._tuple#10$T5, 
              _System._tuple#10$T6, 
              _System._tuple#10$T7, 
              _System._tuple#10$T8, 
              _System._tuple#10$T9), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple10(_System._tuple#10$T0, 
            _System._tuple#10$T1, 
            _System._tuple#10$T2, 
            _System._tuple#10$T3, 
            _System._tuple#10$T4, 
            _System._tuple#10$T5, 
            _System._tuple#10$T6, 
            _System._tuple#10$T7, 
            _System._tuple#10$T8, 
            _System._tuple#10$T9), 
          $h))
     ==> $IsAllocBox(_System.Tuple10._1(d), _System._tuple#10$T1, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#10$T2: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple10._2(d), _System._tuple#10$T2, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple10.___hMake10_q(d)
       && (exists _System._tuple#10$T0: Ty, 
          _System._tuple#10$T1: Ty, 
          _System._tuple#10$T3: Ty, 
          _System._tuple#10$T4: Ty, 
          _System._tuple#10$T5: Ty, 
          _System._tuple#10$T6: Ty, 
          _System._tuple#10$T7: Ty, 
          _System._tuple#10$T8: Ty, 
          _System._tuple#10$T9: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple10(_System._tuple#10$T0, 
              _System._tuple#10$T1, 
              _System._tuple#10$T2, 
              _System._tuple#10$T3, 
              _System._tuple#10$T4, 
              _System._tuple#10$T5, 
              _System._tuple#10$T6, 
              _System._tuple#10$T7, 
              _System._tuple#10$T8, 
              _System._tuple#10$T9), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple10(_System._tuple#10$T0, 
            _System._tuple#10$T1, 
            _System._tuple#10$T2, 
            _System._tuple#10$T3, 
            _System._tuple#10$T4, 
            _System._tuple#10$T5, 
            _System._tuple#10$T6, 
            _System._tuple#10$T7, 
            _System._tuple#10$T8, 
            _System._tuple#10$T9), 
          $h))
     ==> $IsAllocBox(_System.Tuple10._2(d), _System._tuple#10$T2, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#10$T3: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple10._3(d), _System._tuple#10$T3, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple10.___hMake10_q(d)
       && (exists _System._tuple#10$T0: Ty, 
          _System._tuple#10$T1: Ty, 
          _System._tuple#10$T2: Ty, 
          _System._tuple#10$T4: Ty, 
          _System._tuple#10$T5: Ty, 
          _System._tuple#10$T6: Ty, 
          _System._tuple#10$T7: Ty, 
          _System._tuple#10$T8: Ty, 
          _System._tuple#10$T9: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple10(_System._tuple#10$T0, 
              _System._tuple#10$T1, 
              _System._tuple#10$T2, 
              _System._tuple#10$T3, 
              _System._tuple#10$T4, 
              _System._tuple#10$T5, 
              _System._tuple#10$T6, 
              _System._tuple#10$T7, 
              _System._tuple#10$T8, 
              _System._tuple#10$T9), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple10(_System._tuple#10$T0, 
            _System._tuple#10$T1, 
            _System._tuple#10$T2, 
            _System._tuple#10$T3, 
            _System._tuple#10$T4, 
            _System._tuple#10$T5, 
            _System._tuple#10$T6, 
            _System._tuple#10$T7, 
            _System._tuple#10$T8, 
            _System._tuple#10$T9), 
          $h))
     ==> $IsAllocBox(_System.Tuple10._3(d), _System._tuple#10$T3, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#10$T4: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple10._4(d), _System._tuple#10$T4, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple10.___hMake10_q(d)
       && (exists _System._tuple#10$T0: Ty, 
          _System._tuple#10$T1: Ty, 
          _System._tuple#10$T2: Ty, 
          _System._tuple#10$T3: Ty, 
          _System._tuple#10$T5: Ty, 
          _System._tuple#10$T6: Ty, 
          _System._tuple#10$T7: Ty, 
          _System._tuple#10$T8: Ty, 
          _System._tuple#10$T9: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple10(_System._tuple#10$T0, 
              _System._tuple#10$T1, 
              _System._tuple#10$T2, 
              _System._tuple#10$T3, 
              _System._tuple#10$T4, 
              _System._tuple#10$T5, 
              _System._tuple#10$T6, 
              _System._tuple#10$T7, 
              _System._tuple#10$T8, 
              _System._tuple#10$T9), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple10(_System._tuple#10$T0, 
            _System._tuple#10$T1, 
            _System._tuple#10$T2, 
            _System._tuple#10$T3, 
            _System._tuple#10$T4, 
            _System._tuple#10$T5, 
            _System._tuple#10$T6, 
            _System._tuple#10$T7, 
            _System._tuple#10$T8, 
            _System._tuple#10$T9), 
          $h))
     ==> $IsAllocBox(_System.Tuple10._4(d), _System._tuple#10$T4, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#10$T5: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple10._5(d), _System._tuple#10$T5, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple10.___hMake10_q(d)
       && (exists _System._tuple#10$T0: Ty, 
          _System._tuple#10$T1: Ty, 
          _System._tuple#10$T2: Ty, 
          _System._tuple#10$T3: Ty, 
          _System._tuple#10$T4: Ty, 
          _System._tuple#10$T6: Ty, 
          _System._tuple#10$T7: Ty, 
          _System._tuple#10$T8: Ty, 
          _System._tuple#10$T9: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple10(_System._tuple#10$T0, 
              _System._tuple#10$T1, 
              _System._tuple#10$T2, 
              _System._tuple#10$T3, 
              _System._tuple#10$T4, 
              _System._tuple#10$T5, 
              _System._tuple#10$T6, 
              _System._tuple#10$T7, 
              _System._tuple#10$T8, 
              _System._tuple#10$T9), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple10(_System._tuple#10$T0, 
            _System._tuple#10$T1, 
            _System._tuple#10$T2, 
            _System._tuple#10$T3, 
            _System._tuple#10$T4, 
            _System._tuple#10$T5, 
            _System._tuple#10$T6, 
            _System._tuple#10$T7, 
            _System._tuple#10$T8, 
            _System._tuple#10$T9), 
          $h))
     ==> $IsAllocBox(_System.Tuple10._5(d), _System._tuple#10$T5, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#10$T6: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple10._6(d), _System._tuple#10$T6, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple10.___hMake10_q(d)
       && (exists _System._tuple#10$T0: Ty, 
          _System._tuple#10$T1: Ty, 
          _System._tuple#10$T2: Ty, 
          _System._tuple#10$T3: Ty, 
          _System._tuple#10$T4: Ty, 
          _System._tuple#10$T5: Ty, 
          _System._tuple#10$T7: Ty, 
          _System._tuple#10$T8: Ty, 
          _System._tuple#10$T9: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple10(_System._tuple#10$T0, 
              _System._tuple#10$T1, 
              _System._tuple#10$T2, 
              _System._tuple#10$T3, 
              _System._tuple#10$T4, 
              _System._tuple#10$T5, 
              _System._tuple#10$T6, 
              _System._tuple#10$T7, 
              _System._tuple#10$T8, 
              _System._tuple#10$T9), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple10(_System._tuple#10$T0, 
            _System._tuple#10$T1, 
            _System._tuple#10$T2, 
            _System._tuple#10$T3, 
            _System._tuple#10$T4, 
            _System._tuple#10$T5, 
            _System._tuple#10$T6, 
            _System._tuple#10$T7, 
            _System._tuple#10$T8, 
            _System._tuple#10$T9), 
          $h))
     ==> $IsAllocBox(_System.Tuple10._6(d), _System._tuple#10$T6, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#10$T7: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple10._7(d), _System._tuple#10$T7, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple10.___hMake10_q(d)
       && (exists _System._tuple#10$T0: Ty, 
          _System._tuple#10$T1: Ty, 
          _System._tuple#10$T2: Ty, 
          _System._tuple#10$T3: Ty, 
          _System._tuple#10$T4: Ty, 
          _System._tuple#10$T5: Ty, 
          _System._tuple#10$T6: Ty, 
          _System._tuple#10$T8: Ty, 
          _System._tuple#10$T9: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple10(_System._tuple#10$T0, 
              _System._tuple#10$T1, 
              _System._tuple#10$T2, 
              _System._tuple#10$T3, 
              _System._tuple#10$T4, 
              _System._tuple#10$T5, 
              _System._tuple#10$T6, 
              _System._tuple#10$T7, 
              _System._tuple#10$T8, 
              _System._tuple#10$T9), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple10(_System._tuple#10$T0, 
            _System._tuple#10$T1, 
            _System._tuple#10$T2, 
            _System._tuple#10$T3, 
            _System._tuple#10$T4, 
            _System._tuple#10$T5, 
            _System._tuple#10$T6, 
            _System._tuple#10$T7, 
            _System._tuple#10$T8, 
            _System._tuple#10$T9), 
          $h))
     ==> $IsAllocBox(_System.Tuple10._7(d), _System._tuple#10$T7, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#10$T8: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple10._8(d), _System._tuple#10$T8, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple10.___hMake10_q(d)
       && (exists _System._tuple#10$T0: Ty, 
          _System._tuple#10$T1: Ty, 
          _System._tuple#10$T2: Ty, 
          _System._tuple#10$T3: Ty, 
          _System._tuple#10$T4: Ty, 
          _System._tuple#10$T5: Ty, 
          _System._tuple#10$T6: Ty, 
          _System._tuple#10$T7: Ty, 
          _System._tuple#10$T9: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple10(_System._tuple#10$T0, 
              _System._tuple#10$T1, 
              _System._tuple#10$T2, 
              _System._tuple#10$T3, 
              _System._tuple#10$T4, 
              _System._tuple#10$T5, 
              _System._tuple#10$T6, 
              _System._tuple#10$T7, 
              _System._tuple#10$T8, 
              _System._tuple#10$T9), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple10(_System._tuple#10$T0, 
            _System._tuple#10$T1, 
            _System._tuple#10$T2, 
            _System._tuple#10$T3, 
            _System._tuple#10$T4, 
            _System._tuple#10$T5, 
            _System._tuple#10$T6, 
            _System._tuple#10$T7, 
            _System._tuple#10$T8, 
            _System._tuple#10$T9), 
          $h))
     ==> $IsAllocBox(_System.Tuple10._8(d), _System._tuple#10$T8, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#10$T9: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple10._9(d), _System._tuple#10$T9, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple10.___hMake10_q(d)
       && (exists _System._tuple#10$T0: Ty, 
          _System._tuple#10$T1: Ty, 
          _System._tuple#10$T2: Ty, 
          _System._tuple#10$T3: Ty, 
          _System._tuple#10$T4: Ty, 
          _System._tuple#10$T5: Ty, 
          _System._tuple#10$T6: Ty, 
          _System._tuple#10$T7: Ty, 
          _System._tuple#10$T8: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple10(_System._tuple#10$T0, 
              _System._tuple#10$T1, 
              _System._tuple#10$T2, 
              _System._tuple#10$T3, 
              _System._tuple#10$T4, 
              _System._tuple#10$T5, 
              _System._tuple#10$T6, 
              _System._tuple#10$T7, 
              _System._tuple#10$T8, 
              _System._tuple#10$T9), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple10(_System._tuple#10$T0, 
            _System._tuple#10$T1, 
            _System._tuple#10$T2, 
            _System._tuple#10$T3, 
            _System._tuple#10$T4, 
            _System._tuple#10$T5, 
            _System._tuple#10$T6, 
            _System._tuple#10$T7, 
            _System._tuple#10$T8, 
            _System._tuple#10$T9), 
          $h))
     ==> $IsAllocBox(_System.Tuple10._9(d), _System._tuple#10$T9, $h));

// Constructor literal
axiom (forall a#135#0#0: Box, 
    a#135#1#0: Box, 
    a#135#2#0: Box, 
    a#135#3#0: Box, 
    a#135#4#0: Box, 
    a#135#5#0: Box, 
    a#135#6#0: Box, 
    a#135#7#0: Box, 
    a#135#8#0: Box, 
    a#135#9#0: Box :: 
  { #_System._tuple#10._#Make10(Lit(a#135#0#0), 
      Lit(a#135#1#0), 
      Lit(a#135#2#0), 
      Lit(a#135#3#0), 
      Lit(a#135#4#0), 
      Lit(a#135#5#0), 
      Lit(a#135#6#0), 
      Lit(a#135#7#0), 
      Lit(a#135#8#0), 
      Lit(a#135#9#0)) } 
  #_System._tuple#10._#Make10(Lit(a#135#0#0), 
      Lit(a#135#1#0), 
      Lit(a#135#2#0), 
      Lit(a#135#3#0), 
      Lit(a#135#4#0), 
      Lit(a#135#5#0), 
      Lit(a#135#6#0), 
      Lit(a#135#7#0), 
      Lit(a#135#8#0), 
      Lit(a#135#9#0))
     == Lit(#_System._tuple#10._#Make10(a#135#0#0, 
        a#135#1#0, 
        a#135#2#0, 
        a#135#3#0, 
        a#135#4#0, 
        a#135#5#0, 
        a#135#6#0, 
        a#135#7#0, 
        a#135#8#0, 
        a#135#9#0)));

function _System.Tuple10._0(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#136#0#0: Box, 
    a#136#1#0: Box, 
    a#136#2#0: Box, 
    a#136#3#0: Box, 
    a#136#4#0: Box, 
    a#136#5#0: Box, 
    a#136#6#0: Box, 
    a#136#7#0: Box, 
    a#136#8#0: Box, 
    a#136#9#0: Box :: 
  { #_System._tuple#10._#Make10(a#136#0#0, 
      a#136#1#0, 
      a#136#2#0, 
      a#136#3#0, 
      a#136#4#0, 
      a#136#5#0, 
      a#136#6#0, 
      a#136#7#0, 
      a#136#8#0, 
      a#136#9#0) } 
  _System.Tuple10._0(#_System._tuple#10._#Make10(a#136#0#0, 
        a#136#1#0, 
        a#136#2#0, 
        a#136#3#0, 
        a#136#4#0, 
        a#136#5#0, 
        a#136#6#0, 
        a#136#7#0, 
        a#136#8#0, 
        a#136#9#0))
     == a#136#0#0);

// Inductive rank
axiom (forall a#137#0#0: Box, 
    a#137#1#0: Box, 
    a#137#2#0: Box, 
    a#137#3#0: Box, 
    a#137#4#0: Box, 
    a#137#5#0: Box, 
    a#137#6#0: Box, 
    a#137#7#0: Box, 
    a#137#8#0: Box, 
    a#137#9#0: Box :: 
  { #_System._tuple#10._#Make10(a#137#0#0, 
      a#137#1#0, 
      a#137#2#0, 
      a#137#3#0, 
      a#137#4#0, 
      a#137#5#0, 
      a#137#6#0, 
      a#137#7#0, 
      a#137#8#0, 
      a#137#9#0) } 
  BoxRank(a#137#0#0)
     < DtRank(#_System._tuple#10._#Make10(a#137#0#0, 
        a#137#1#0, 
        a#137#2#0, 
        a#137#3#0, 
        a#137#4#0, 
        a#137#5#0, 
        a#137#6#0, 
        a#137#7#0, 
        a#137#8#0, 
        a#137#9#0)));

function _System.Tuple10._1(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#138#0#0: Box, 
    a#138#1#0: Box, 
    a#138#2#0: Box, 
    a#138#3#0: Box, 
    a#138#4#0: Box, 
    a#138#5#0: Box, 
    a#138#6#0: Box, 
    a#138#7#0: Box, 
    a#138#8#0: Box, 
    a#138#9#0: Box :: 
  { #_System._tuple#10._#Make10(a#138#0#0, 
      a#138#1#0, 
      a#138#2#0, 
      a#138#3#0, 
      a#138#4#0, 
      a#138#5#0, 
      a#138#6#0, 
      a#138#7#0, 
      a#138#8#0, 
      a#138#9#0) } 
  _System.Tuple10._1(#_System._tuple#10._#Make10(a#138#0#0, 
        a#138#1#0, 
        a#138#2#0, 
        a#138#3#0, 
        a#138#4#0, 
        a#138#5#0, 
        a#138#6#0, 
        a#138#7#0, 
        a#138#8#0, 
        a#138#9#0))
     == a#138#1#0);

// Inductive rank
axiom (forall a#139#0#0: Box, 
    a#139#1#0: Box, 
    a#139#2#0: Box, 
    a#139#3#0: Box, 
    a#139#4#0: Box, 
    a#139#5#0: Box, 
    a#139#6#0: Box, 
    a#139#7#0: Box, 
    a#139#8#0: Box, 
    a#139#9#0: Box :: 
  { #_System._tuple#10._#Make10(a#139#0#0, 
      a#139#1#0, 
      a#139#2#0, 
      a#139#3#0, 
      a#139#4#0, 
      a#139#5#0, 
      a#139#6#0, 
      a#139#7#0, 
      a#139#8#0, 
      a#139#9#0) } 
  BoxRank(a#139#1#0)
     < DtRank(#_System._tuple#10._#Make10(a#139#0#0, 
        a#139#1#0, 
        a#139#2#0, 
        a#139#3#0, 
        a#139#4#0, 
        a#139#5#0, 
        a#139#6#0, 
        a#139#7#0, 
        a#139#8#0, 
        a#139#9#0)));

function _System.Tuple10._2(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#140#0#0: Box, 
    a#140#1#0: Box, 
    a#140#2#0: Box, 
    a#140#3#0: Box, 
    a#140#4#0: Box, 
    a#140#5#0: Box, 
    a#140#6#0: Box, 
    a#140#7#0: Box, 
    a#140#8#0: Box, 
    a#140#9#0: Box :: 
  { #_System._tuple#10._#Make10(a#140#0#0, 
      a#140#1#0, 
      a#140#2#0, 
      a#140#3#0, 
      a#140#4#0, 
      a#140#5#0, 
      a#140#6#0, 
      a#140#7#0, 
      a#140#8#0, 
      a#140#9#0) } 
  _System.Tuple10._2(#_System._tuple#10._#Make10(a#140#0#0, 
        a#140#1#0, 
        a#140#2#0, 
        a#140#3#0, 
        a#140#4#0, 
        a#140#5#0, 
        a#140#6#0, 
        a#140#7#0, 
        a#140#8#0, 
        a#140#9#0))
     == a#140#2#0);

// Inductive rank
axiom (forall a#141#0#0: Box, 
    a#141#1#0: Box, 
    a#141#2#0: Box, 
    a#141#3#0: Box, 
    a#141#4#0: Box, 
    a#141#5#0: Box, 
    a#141#6#0: Box, 
    a#141#7#0: Box, 
    a#141#8#0: Box, 
    a#141#9#0: Box :: 
  { #_System._tuple#10._#Make10(a#141#0#0, 
      a#141#1#0, 
      a#141#2#0, 
      a#141#3#0, 
      a#141#4#0, 
      a#141#5#0, 
      a#141#6#0, 
      a#141#7#0, 
      a#141#8#0, 
      a#141#9#0) } 
  BoxRank(a#141#2#0)
     < DtRank(#_System._tuple#10._#Make10(a#141#0#0, 
        a#141#1#0, 
        a#141#2#0, 
        a#141#3#0, 
        a#141#4#0, 
        a#141#5#0, 
        a#141#6#0, 
        a#141#7#0, 
        a#141#8#0, 
        a#141#9#0)));

function _System.Tuple10._3(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#142#0#0: Box, 
    a#142#1#0: Box, 
    a#142#2#0: Box, 
    a#142#3#0: Box, 
    a#142#4#0: Box, 
    a#142#5#0: Box, 
    a#142#6#0: Box, 
    a#142#7#0: Box, 
    a#142#8#0: Box, 
    a#142#9#0: Box :: 
  { #_System._tuple#10._#Make10(a#142#0#0, 
      a#142#1#0, 
      a#142#2#0, 
      a#142#3#0, 
      a#142#4#0, 
      a#142#5#0, 
      a#142#6#0, 
      a#142#7#0, 
      a#142#8#0, 
      a#142#9#0) } 
  _System.Tuple10._3(#_System._tuple#10._#Make10(a#142#0#0, 
        a#142#1#0, 
        a#142#2#0, 
        a#142#3#0, 
        a#142#4#0, 
        a#142#5#0, 
        a#142#6#0, 
        a#142#7#0, 
        a#142#8#0, 
        a#142#9#0))
     == a#142#3#0);

// Inductive rank
axiom (forall a#143#0#0: Box, 
    a#143#1#0: Box, 
    a#143#2#0: Box, 
    a#143#3#0: Box, 
    a#143#4#0: Box, 
    a#143#5#0: Box, 
    a#143#6#0: Box, 
    a#143#7#0: Box, 
    a#143#8#0: Box, 
    a#143#9#0: Box :: 
  { #_System._tuple#10._#Make10(a#143#0#0, 
      a#143#1#0, 
      a#143#2#0, 
      a#143#3#0, 
      a#143#4#0, 
      a#143#5#0, 
      a#143#6#0, 
      a#143#7#0, 
      a#143#8#0, 
      a#143#9#0) } 
  BoxRank(a#143#3#0)
     < DtRank(#_System._tuple#10._#Make10(a#143#0#0, 
        a#143#1#0, 
        a#143#2#0, 
        a#143#3#0, 
        a#143#4#0, 
        a#143#5#0, 
        a#143#6#0, 
        a#143#7#0, 
        a#143#8#0, 
        a#143#9#0)));

function _System.Tuple10._4(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#144#0#0: Box, 
    a#144#1#0: Box, 
    a#144#2#0: Box, 
    a#144#3#0: Box, 
    a#144#4#0: Box, 
    a#144#5#0: Box, 
    a#144#6#0: Box, 
    a#144#7#0: Box, 
    a#144#8#0: Box, 
    a#144#9#0: Box :: 
  { #_System._tuple#10._#Make10(a#144#0#0, 
      a#144#1#0, 
      a#144#2#0, 
      a#144#3#0, 
      a#144#4#0, 
      a#144#5#0, 
      a#144#6#0, 
      a#144#7#0, 
      a#144#8#0, 
      a#144#9#0) } 
  _System.Tuple10._4(#_System._tuple#10._#Make10(a#144#0#0, 
        a#144#1#0, 
        a#144#2#0, 
        a#144#3#0, 
        a#144#4#0, 
        a#144#5#0, 
        a#144#6#0, 
        a#144#7#0, 
        a#144#8#0, 
        a#144#9#0))
     == a#144#4#0);

// Inductive rank
axiom (forall a#145#0#0: Box, 
    a#145#1#0: Box, 
    a#145#2#0: Box, 
    a#145#3#0: Box, 
    a#145#4#0: Box, 
    a#145#5#0: Box, 
    a#145#6#0: Box, 
    a#145#7#0: Box, 
    a#145#8#0: Box, 
    a#145#9#0: Box :: 
  { #_System._tuple#10._#Make10(a#145#0#0, 
      a#145#1#0, 
      a#145#2#0, 
      a#145#3#0, 
      a#145#4#0, 
      a#145#5#0, 
      a#145#6#0, 
      a#145#7#0, 
      a#145#8#0, 
      a#145#9#0) } 
  BoxRank(a#145#4#0)
     < DtRank(#_System._tuple#10._#Make10(a#145#0#0, 
        a#145#1#0, 
        a#145#2#0, 
        a#145#3#0, 
        a#145#4#0, 
        a#145#5#0, 
        a#145#6#0, 
        a#145#7#0, 
        a#145#8#0, 
        a#145#9#0)));

function _System.Tuple10._5(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#146#0#0: Box, 
    a#146#1#0: Box, 
    a#146#2#0: Box, 
    a#146#3#0: Box, 
    a#146#4#0: Box, 
    a#146#5#0: Box, 
    a#146#6#0: Box, 
    a#146#7#0: Box, 
    a#146#8#0: Box, 
    a#146#9#0: Box :: 
  { #_System._tuple#10._#Make10(a#146#0#0, 
      a#146#1#0, 
      a#146#2#0, 
      a#146#3#0, 
      a#146#4#0, 
      a#146#5#0, 
      a#146#6#0, 
      a#146#7#0, 
      a#146#8#0, 
      a#146#9#0) } 
  _System.Tuple10._5(#_System._tuple#10._#Make10(a#146#0#0, 
        a#146#1#0, 
        a#146#2#0, 
        a#146#3#0, 
        a#146#4#0, 
        a#146#5#0, 
        a#146#6#0, 
        a#146#7#0, 
        a#146#8#0, 
        a#146#9#0))
     == a#146#5#0);

// Inductive rank
axiom (forall a#147#0#0: Box, 
    a#147#1#0: Box, 
    a#147#2#0: Box, 
    a#147#3#0: Box, 
    a#147#4#0: Box, 
    a#147#5#0: Box, 
    a#147#6#0: Box, 
    a#147#7#0: Box, 
    a#147#8#0: Box, 
    a#147#9#0: Box :: 
  { #_System._tuple#10._#Make10(a#147#0#0, 
      a#147#1#0, 
      a#147#2#0, 
      a#147#3#0, 
      a#147#4#0, 
      a#147#5#0, 
      a#147#6#0, 
      a#147#7#0, 
      a#147#8#0, 
      a#147#9#0) } 
  BoxRank(a#147#5#0)
     < DtRank(#_System._tuple#10._#Make10(a#147#0#0, 
        a#147#1#0, 
        a#147#2#0, 
        a#147#3#0, 
        a#147#4#0, 
        a#147#5#0, 
        a#147#6#0, 
        a#147#7#0, 
        a#147#8#0, 
        a#147#9#0)));

function _System.Tuple10._6(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#148#0#0: Box, 
    a#148#1#0: Box, 
    a#148#2#0: Box, 
    a#148#3#0: Box, 
    a#148#4#0: Box, 
    a#148#5#0: Box, 
    a#148#6#0: Box, 
    a#148#7#0: Box, 
    a#148#8#0: Box, 
    a#148#9#0: Box :: 
  { #_System._tuple#10._#Make10(a#148#0#0, 
      a#148#1#0, 
      a#148#2#0, 
      a#148#3#0, 
      a#148#4#0, 
      a#148#5#0, 
      a#148#6#0, 
      a#148#7#0, 
      a#148#8#0, 
      a#148#9#0) } 
  _System.Tuple10._6(#_System._tuple#10._#Make10(a#148#0#0, 
        a#148#1#0, 
        a#148#2#0, 
        a#148#3#0, 
        a#148#4#0, 
        a#148#5#0, 
        a#148#6#0, 
        a#148#7#0, 
        a#148#8#0, 
        a#148#9#0))
     == a#148#6#0);

// Inductive rank
axiom (forall a#149#0#0: Box, 
    a#149#1#0: Box, 
    a#149#2#0: Box, 
    a#149#3#0: Box, 
    a#149#4#0: Box, 
    a#149#5#0: Box, 
    a#149#6#0: Box, 
    a#149#7#0: Box, 
    a#149#8#0: Box, 
    a#149#9#0: Box :: 
  { #_System._tuple#10._#Make10(a#149#0#0, 
      a#149#1#0, 
      a#149#2#0, 
      a#149#3#0, 
      a#149#4#0, 
      a#149#5#0, 
      a#149#6#0, 
      a#149#7#0, 
      a#149#8#0, 
      a#149#9#0) } 
  BoxRank(a#149#6#0)
     < DtRank(#_System._tuple#10._#Make10(a#149#0#0, 
        a#149#1#0, 
        a#149#2#0, 
        a#149#3#0, 
        a#149#4#0, 
        a#149#5#0, 
        a#149#6#0, 
        a#149#7#0, 
        a#149#8#0, 
        a#149#9#0)));

function _System.Tuple10._7(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#150#0#0: Box, 
    a#150#1#0: Box, 
    a#150#2#0: Box, 
    a#150#3#0: Box, 
    a#150#4#0: Box, 
    a#150#5#0: Box, 
    a#150#6#0: Box, 
    a#150#7#0: Box, 
    a#150#8#0: Box, 
    a#150#9#0: Box :: 
  { #_System._tuple#10._#Make10(a#150#0#0, 
      a#150#1#0, 
      a#150#2#0, 
      a#150#3#0, 
      a#150#4#0, 
      a#150#5#0, 
      a#150#6#0, 
      a#150#7#0, 
      a#150#8#0, 
      a#150#9#0) } 
  _System.Tuple10._7(#_System._tuple#10._#Make10(a#150#0#0, 
        a#150#1#0, 
        a#150#2#0, 
        a#150#3#0, 
        a#150#4#0, 
        a#150#5#0, 
        a#150#6#0, 
        a#150#7#0, 
        a#150#8#0, 
        a#150#9#0))
     == a#150#7#0);

// Inductive rank
axiom (forall a#151#0#0: Box, 
    a#151#1#0: Box, 
    a#151#2#0: Box, 
    a#151#3#0: Box, 
    a#151#4#0: Box, 
    a#151#5#0: Box, 
    a#151#6#0: Box, 
    a#151#7#0: Box, 
    a#151#8#0: Box, 
    a#151#9#0: Box :: 
  { #_System._tuple#10._#Make10(a#151#0#0, 
      a#151#1#0, 
      a#151#2#0, 
      a#151#3#0, 
      a#151#4#0, 
      a#151#5#0, 
      a#151#6#0, 
      a#151#7#0, 
      a#151#8#0, 
      a#151#9#0) } 
  BoxRank(a#151#7#0)
     < DtRank(#_System._tuple#10._#Make10(a#151#0#0, 
        a#151#1#0, 
        a#151#2#0, 
        a#151#3#0, 
        a#151#4#0, 
        a#151#5#0, 
        a#151#6#0, 
        a#151#7#0, 
        a#151#8#0, 
        a#151#9#0)));

function _System.Tuple10._8(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#152#0#0: Box, 
    a#152#1#0: Box, 
    a#152#2#0: Box, 
    a#152#3#0: Box, 
    a#152#4#0: Box, 
    a#152#5#0: Box, 
    a#152#6#0: Box, 
    a#152#7#0: Box, 
    a#152#8#0: Box, 
    a#152#9#0: Box :: 
  { #_System._tuple#10._#Make10(a#152#0#0, 
      a#152#1#0, 
      a#152#2#0, 
      a#152#3#0, 
      a#152#4#0, 
      a#152#5#0, 
      a#152#6#0, 
      a#152#7#0, 
      a#152#8#0, 
      a#152#9#0) } 
  _System.Tuple10._8(#_System._tuple#10._#Make10(a#152#0#0, 
        a#152#1#0, 
        a#152#2#0, 
        a#152#3#0, 
        a#152#4#0, 
        a#152#5#0, 
        a#152#6#0, 
        a#152#7#0, 
        a#152#8#0, 
        a#152#9#0))
     == a#152#8#0);

// Inductive rank
axiom (forall a#153#0#0: Box, 
    a#153#1#0: Box, 
    a#153#2#0: Box, 
    a#153#3#0: Box, 
    a#153#4#0: Box, 
    a#153#5#0: Box, 
    a#153#6#0: Box, 
    a#153#7#0: Box, 
    a#153#8#0: Box, 
    a#153#9#0: Box :: 
  { #_System._tuple#10._#Make10(a#153#0#0, 
      a#153#1#0, 
      a#153#2#0, 
      a#153#3#0, 
      a#153#4#0, 
      a#153#5#0, 
      a#153#6#0, 
      a#153#7#0, 
      a#153#8#0, 
      a#153#9#0) } 
  BoxRank(a#153#8#0)
     < DtRank(#_System._tuple#10._#Make10(a#153#0#0, 
        a#153#1#0, 
        a#153#2#0, 
        a#153#3#0, 
        a#153#4#0, 
        a#153#5#0, 
        a#153#6#0, 
        a#153#7#0, 
        a#153#8#0, 
        a#153#9#0)));

function _System.Tuple10._9(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#154#0#0: Box, 
    a#154#1#0: Box, 
    a#154#2#0: Box, 
    a#154#3#0: Box, 
    a#154#4#0: Box, 
    a#154#5#0: Box, 
    a#154#6#0: Box, 
    a#154#7#0: Box, 
    a#154#8#0: Box, 
    a#154#9#0: Box :: 
  { #_System._tuple#10._#Make10(a#154#0#0, 
      a#154#1#0, 
      a#154#2#0, 
      a#154#3#0, 
      a#154#4#0, 
      a#154#5#0, 
      a#154#6#0, 
      a#154#7#0, 
      a#154#8#0, 
      a#154#9#0) } 
  _System.Tuple10._9(#_System._tuple#10._#Make10(a#154#0#0, 
        a#154#1#0, 
        a#154#2#0, 
        a#154#3#0, 
        a#154#4#0, 
        a#154#5#0, 
        a#154#6#0, 
        a#154#7#0, 
        a#154#8#0, 
        a#154#9#0))
     == a#154#9#0);

// Inductive rank
axiom (forall a#155#0#0: Box, 
    a#155#1#0: Box, 
    a#155#2#0: Box, 
    a#155#3#0: Box, 
    a#155#4#0: Box, 
    a#155#5#0: Box, 
    a#155#6#0: Box, 
    a#155#7#0: Box, 
    a#155#8#0: Box, 
    a#155#9#0: Box :: 
  { #_System._tuple#10._#Make10(a#155#0#0, 
      a#155#1#0, 
      a#155#2#0, 
      a#155#3#0, 
      a#155#4#0, 
      a#155#5#0, 
      a#155#6#0, 
      a#155#7#0, 
      a#155#8#0, 
      a#155#9#0) } 
  BoxRank(a#155#9#0)
     < DtRank(#_System._tuple#10._#Make10(a#155#0#0, 
        a#155#1#0, 
        a#155#2#0, 
        a#155#3#0, 
        a#155#4#0, 
        a#155#5#0, 
        a#155#6#0, 
        a#155#7#0, 
        a#155#8#0, 
        a#155#9#0)));

// Depth-one case-split function
function $IsA#_System.Tuple10(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple10(d) } 
  $IsA#_System.Tuple10(d) ==> _System.Tuple10.___hMake10_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#10$T0: Ty, 
    _System._tuple#10$T1: Ty, 
    _System._tuple#10$T2: Ty, 
    _System._tuple#10$T3: Ty, 
    _System._tuple#10$T4: Ty, 
    _System._tuple#10$T5: Ty, 
    _System._tuple#10$T6: Ty, 
    _System._tuple#10$T7: Ty, 
    _System._tuple#10$T8: Ty, 
    _System._tuple#10$T9: Ty, 
    d: DatatypeType :: 
  { _System.Tuple10.___hMake10_q(d), $Is(d, 
      Tclass._System.Tuple10(_System._tuple#10$T0, 
        _System._tuple#10$T1, 
        _System._tuple#10$T2, 
        _System._tuple#10$T3, 
        _System._tuple#10$T4, 
        _System._tuple#10$T5, 
        _System._tuple#10$T6, 
        _System._tuple#10$T7, 
        _System._tuple#10$T8, 
        _System._tuple#10$T9)) } 
  $Is(d, 
      Tclass._System.Tuple10(_System._tuple#10$T0, 
        _System._tuple#10$T1, 
        _System._tuple#10$T2, 
        _System._tuple#10$T3, 
        _System._tuple#10$T4, 
        _System._tuple#10$T5, 
        _System._tuple#10$T6, 
        _System._tuple#10$T7, 
        _System._tuple#10$T8, 
        _System._tuple#10$T9))
     ==> _System.Tuple10.___hMake10_q(d));

// Datatype extensional equality declaration
function _System.Tuple10#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#10._#Make10
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple10#Equal(a, b) } 
  _System.Tuple10#Equal(a, b)
     <==> _System.Tuple10._0(a) == _System.Tuple10._0(b)
       && _System.Tuple10._1(a) == _System.Tuple10._1(b)
       && _System.Tuple10._2(a) == _System.Tuple10._2(b)
       && _System.Tuple10._3(a) == _System.Tuple10._3(b)
       && _System.Tuple10._4(a) == _System.Tuple10._4(b)
       && _System.Tuple10._5(a) == _System.Tuple10._5(b)
       && _System.Tuple10._6(a) == _System.Tuple10._6(b)
       && _System.Tuple10._7(a) == _System.Tuple10._7(b)
       && _System.Tuple10._8(a) == _System.Tuple10._8(b)
       && _System.Tuple10._9(a) == _System.Tuple10._9(b));

// Datatype extensionality axiom: _System._tuple#10
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple10#Equal(a, b) } 
  _System.Tuple10#Equal(a, b) <==> a == b);

const unique class._System.Tuple10: ClassName;

// Constructor function declaration
function #_System._tuple#11._#Make11(Box, Box, Box, Box, Box, Box, Box, Box, Box, Box, Box) : DatatypeType;

const unique ##_System._tuple#11._#Make11: DtCtorId
uses {
// Constructor identifier
axiom (forall a#156#0#0: Box, 
    a#156#1#0: Box, 
    a#156#2#0: Box, 
    a#156#3#0: Box, 
    a#156#4#0: Box, 
    a#156#5#0: Box, 
    a#156#6#0: Box, 
    a#156#7#0: Box, 
    a#156#8#0: Box, 
    a#156#9#0: Box, 
    a#156#10#0: Box :: 
  { #_System._tuple#11._#Make11(a#156#0#0, 
      a#156#1#0, 
      a#156#2#0, 
      a#156#3#0, 
      a#156#4#0, 
      a#156#5#0, 
      a#156#6#0, 
      a#156#7#0, 
      a#156#8#0, 
      a#156#9#0, 
      a#156#10#0) } 
  DatatypeCtorId(#_System._tuple#11._#Make11(a#156#0#0, 
        a#156#1#0, 
        a#156#2#0, 
        a#156#3#0, 
        a#156#4#0, 
        a#156#5#0, 
        a#156#6#0, 
        a#156#7#0, 
        a#156#8#0, 
        a#156#9#0, 
        a#156#10#0))
     == ##_System._tuple#11._#Make11);
}

function _System.Tuple11.___hMake11_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple11.___hMake11_q(d) } 
  _System.Tuple11.___hMake11_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#11._#Make11);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple11.___hMake11_q(d) } 
  _System.Tuple11.___hMake11_q(d)
     ==> (exists a#157#0#0: Box, 
        a#157#1#0: Box, 
        a#157#2#0: Box, 
        a#157#3#0: Box, 
        a#157#4#0: Box, 
        a#157#5#0: Box, 
        a#157#6#0: Box, 
        a#157#7#0: Box, 
        a#157#8#0: Box, 
        a#157#9#0: Box, 
        a#157#10#0: Box :: 
      d
         == #_System._tuple#11._#Make11(a#157#0#0, 
          a#157#1#0, 
          a#157#2#0, 
          a#157#3#0, 
          a#157#4#0, 
          a#157#5#0, 
          a#157#6#0, 
          a#157#7#0, 
          a#157#8#0, 
          a#157#9#0, 
          a#157#10#0)));

function Tclass._System.Tuple11(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.Tuple11: TyTag;

// Tclass._System.Tuple11 Tag
axiom (forall _System._tuple#11$T0: Ty, 
    _System._tuple#11$T1: Ty, 
    _System._tuple#11$T2: Ty, 
    _System._tuple#11$T3: Ty, 
    _System._tuple#11$T4: Ty, 
    _System._tuple#11$T5: Ty, 
    _System._tuple#11$T6: Ty, 
    _System._tuple#11$T7: Ty, 
    _System._tuple#11$T8: Ty, 
    _System._tuple#11$T9: Ty, 
    _System._tuple#11$T10: Ty :: 
  { Tclass._System.Tuple11(_System._tuple#11$T0, 
      _System._tuple#11$T1, 
      _System._tuple#11$T2, 
      _System._tuple#11$T3, 
      _System._tuple#11$T4, 
      _System._tuple#11$T5, 
      _System._tuple#11$T6, 
      _System._tuple#11$T7, 
      _System._tuple#11$T8, 
      _System._tuple#11$T9, 
      _System._tuple#11$T10) } 
  Tag(Tclass._System.Tuple11(_System._tuple#11$T0, 
          _System._tuple#11$T1, 
          _System._tuple#11$T2, 
          _System._tuple#11$T3, 
          _System._tuple#11$T4, 
          _System._tuple#11$T5, 
          _System._tuple#11$T6, 
          _System._tuple#11$T7, 
          _System._tuple#11$T8, 
          _System._tuple#11$T9, 
          _System._tuple#11$T10))
       == Tagclass._System.Tuple11
     && TagFamily(Tclass._System.Tuple11(_System._tuple#11$T0, 
          _System._tuple#11$T1, 
          _System._tuple#11$T2, 
          _System._tuple#11$T3, 
          _System._tuple#11$T4, 
          _System._tuple#11$T5, 
          _System._tuple#11$T6, 
          _System._tuple#11$T7, 
          _System._tuple#11$T8, 
          _System._tuple#11$T9, 
          _System._tuple#11$T10))
       == tytagFamily$_tuple#11);

function Tclass._System.Tuple11_0(Ty) : Ty;

// Tclass._System.Tuple11 injectivity 0
axiom (forall _System._tuple#11$T0: Ty, 
    _System._tuple#11$T1: Ty, 
    _System._tuple#11$T2: Ty, 
    _System._tuple#11$T3: Ty, 
    _System._tuple#11$T4: Ty, 
    _System._tuple#11$T5: Ty, 
    _System._tuple#11$T6: Ty, 
    _System._tuple#11$T7: Ty, 
    _System._tuple#11$T8: Ty, 
    _System._tuple#11$T9: Ty, 
    _System._tuple#11$T10: Ty :: 
  { Tclass._System.Tuple11(_System._tuple#11$T0, 
      _System._tuple#11$T1, 
      _System._tuple#11$T2, 
      _System._tuple#11$T3, 
      _System._tuple#11$T4, 
      _System._tuple#11$T5, 
      _System._tuple#11$T6, 
      _System._tuple#11$T7, 
      _System._tuple#11$T8, 
      _System._tuple#11$T9, 
      _System._tuple#11$T10) } 
  Tclass._System.Tuple11_0(Tclass._System.Tuple11(_System._tuple#11$T0, 
        _System._tuple#11$T1, 
        _System._tuple#11$T2, 
        _System._tuple#11$T3, 
        _System._tuple#11$T4, 
        _System._tuple#11$T5, 
        _System._tuple#11$T6, 
        _System._tuple#11$T7, 
        _System._tuple#11$T8, 
        _System._tuple#11$T9, 
        _System._tuple#11$T10))
     == _System._tuple#11$T0);

function Tclass._System.Tuple11_1(Ty) : Ty;

// Tclass._System.Tuple11 injectivity 1
axiom (forall _System._tuple#11$T0: Ty, 
    _System._tuple#11$T1: Ty, 
    _System._tuple#11$T2: Ty, 
    _System._tuple#11$T3: Ty, 
    _System._tuple#11$T4: Ty, 
    _System._tuple#11$T5: Ty, 
    _System._tuple#11$T6: Ty, 
    _System._tuple#11$T7: Ty, 
    _System._tuple#11$T8: Ty, 
    _System._tuple#11$T9: Ty, 
    _System._tuple#11$T10: Ty :: 
  { Tclass._System.Tuple11(_System._tuple#11$T0, 
      _System._tuple#11$T1, 
      _System._tuple#11$T2, 
      _System._tuple#11$T3, 
      _System._tuple#11$T4, 
      _System._tuple#11$T5, 
      _System._tuple#11$T6, 
      _System._tuple#11$T7, 
      _System._tuple#11$T8, 
      _System._tuple#11$T9, 
      _System._tuple#11$T10) } 
  Tclass._System.Tuple11_1(Tclass._System.Tuple11(_System._tuple#11$T0, 
        _System._tuple#11$T1, 
        _System._tuple#11$T2, 
        _System._tuple#11$T3, 
        _System._tuple#11$T4, 
        _System._tuple#11$T5, 
        _System._tuple#11$T6, 
        _System._tuple#11$T7, 
        _System._tuple#11$T8, 
        _System._tuple#11$T9, 
        _System._tuple#11$T10))
     == _System._tuple#11$T1);

function Tclass._System.Tuple11_2(Ty) : Ty;

// Tclass._System.Tuple11 injectivity 2
axiom (forall _System._tuple#11$T0: Ty, 
    _System._tuple#11$T1: Ty, 
    _System._tuple#11$T2: Ty, 
    _System._tuple#11$T3: Ty, 
    _System._tuple#11$T4: Ty, 
    _System._tuple#11$T5: Ty, 
    _System._tuple#11$T6: Ty, 
    _System._tuple#11$T7: Ty, 
    _System._tuple#11$T8: Ty, 
    _System._tuple#11$T9: Ty, 
    _System._tuple#11$T10: Ty :: 
  { Tclass._System.Tuple11(_System._tuple#11$T0, 
      _System._tuple#11$T1, 
      _System._tuple#11$T2, 
      _System._tuple#11$T3, 
      _System._tuple#11$T4, 
      _System._tuple#11$T5, 
      _System._tuple#11$T6, 
      _System._tuple#11$T7, 
      _System._tuple#11$T8, 
      _System._tuple#11$T9, 
      _System._tuple#11$T10) } 
  Tclass._System.Tuple11_2(Tclass._System.Tuple11(_System._tuple#11$T0, 
        _System._tuple#11$T1, 
        _System._tuple#11$T2, 
        _System._tuple#11$T3, 
        _System._tuple#11$T4, 
        _System._tuple#11$T5, 
        _System._tuple#11$T6, 
        _System._tuple#11$T7, 
        _System._tuple#11$T8, 
        _System._tuple#11$T9, 
        _System._tuple#11$T10))
     == _System._tuple#11$T2);

function Tclass._System.Tuple11_3(Ty) : Ty;

// Tclass._System.Tuple11 injectivity 3
axiom (forall _System._tuple#11$T0: Ty, 
    _System._tuple#11$T1: Ty, 
    _System._tuple#11$T2: Ty, 
    _System._tuple#11$T3: Ty, 
    _System._tuple#11$T4: Ty, 
    _System._tuple#11$T5: Ty, 
    _System._tuple#11$T6: Ty, 
    _System._tuple#11$T7: Ty, 
    _System._tuple#11$T8: Ty, 
    _System._tuple#11$T9: Ty, 
    _System._tuple#11$T10: Ty :: 
  { Tclass._System.Tuple11(_System._tuple#11$T0, 
      _System._tuple#11$T1, 
      _System._tuple#11$T2, 
      _System._tuple#11$T3, 
      _System._tuple#11$T4, 
      _System._tuple#11$T5, 
      _System._tuple#11$T6, 
      _System._tuple#11$T7, 
      _System._tuple#11$T8, 
      _System._tuple#11$T9, 
      _System._tuple#11$T10) } 
  Tclass._System.Tuple11_3(Tclass._System.Tuple11(_System._tuple#11$T0, 
        _System._tuple#11$T1, 
        _System._tuple#11$T2, 
        _System._tuple#11$T3, 
        _System._tuple#11$T4, 
        _System._tuple#11$T5, 
        _System._tuple#11$T6, 
        _System._tuple#11$T7, 
        _System._tuple#11$T8, 
        _System._tuple#11$T9, 
        _System._tuple#11$T10))
     == _System._tuple#11$T3);

function Tclass._System.Tuple11_4(Ty) : Ty;

// Tclass._System.Tuple11 injectivity 4
axiom (forall _System._tuple#11$T0: Ty, 
    _System._tuple#11$T1: Ty, 
    _System._tuple#11$T2: Ty, 
    _System._tuple#11$T3: Ty, 
    _System._tuple#11$T4: Ty, 
    _System._tuple#11$T5: Ty, 
    _System._tuple#11$T6: Ty, 
    _System._tuple#11$T7: Ty, 
    _System._tuple#11$T8: Ty, 
    _System._tuple#11$T9: Ty, 
    _System._tuple#11$T10: Ty :: 
  { Tclass._System.Tuple11(_System._tuple#11$T0, 
      _System._tuple#11$T1, 
      _System._tuple#11$T2, 
      _System._tuple#11$T3, 
      _System._tuple#11$T4, 
      _System._tuple#11$T5, 
      _System._tuple#11$T6, 
      _System._tuple#11$T7, 
      _System._tuple#11$T8, 
      _System._tuple#11$T9, 
      _System._tuple#11$T10) } 
  Tclass._System.Tuple11_4(Tclass._System.Tuple11(_System._tuple#11$T0, 
        _System._tuple#11$T1, 
        _System._tuple#11$T2, 
        _System._tuple#11$T3, 
        _System._tuple#11$T4, 
        _System._tuple#11$T5, 
        _System._tuple#11$T6, 
        _System._tuple#11$T7, 
        _System._tuple#11$T8, 
        _System._tuple#11$T9, 
        _System._tuple#11$T10))
     == _System._tuple#11$T4);

function Tclass._System.Tuple11_5(Ty) : Ty;

// Tclass._System.Tuple11 injectivity 5
axiom (forall _System._tuple#11$T0: Ty, 
    _System._tuple#11$T1: Ty, 
    _System._tuple#11$T2: Ty, 
    _System._tuple#11$T3: Ty, 
    _System._tuple#11$T4: Ty, 
    _System._tuple#11$T5: Ty, 
    _System._tuple#11$T6: Ty, 
    _System._tuple#11$T7: Ty, 
    _System._tuple#11$T8: Ty, 
    _System._tuple#11$T9: Ty, 
    _System._tuple#11$T10: Ty :: 
  { Tclass._System.Tuple11(_System._tuple#11$T0, 
      _System._tuple#11$T1, 
      _System._tuple#11$T2, 
      _System._tuple#11$T3, 
      _System._tuple#11$T4, 
      _System._tuple#11$T5, 
      _System._tuple#11$T6, 
      _System._tuple#11$T7, 
      _System._tuple#11$T8, 
      _System._tuple#11$T9, 
      _System._tuple#11$T10) } 
  Tclass._System.Tuple11_5(Tclass._System.Tuple11(_System._tuple#11$T0, 
        _System._tuple#11$T1, 
        _System._tuple#11$T2, 
        _System._tuple#11$T3, 
        _System._tuple#11$T4, 
        _System._tuple#11$T5, 
        _System._tuple#11$T6, 
        _System._tuple#11$T7, 
        _System._tuple#11$T8, 
        _System._tuple#11$T9, 
        _System._tuple#11$T10))
     == _System._tuple#11$T5);

function Tclass._System.Tuple11_6(Ty) : Ty;

// Tclass._System.Tuple11 injectivity 6
axiom (forall _System._tuple#11$T0: Ty, 
    _System._tuple#11$T1: Ty, 
    _System._tuple#11$T2: Ty, 
    _System._tuple#11$T3: Ty, 
    _System._tuple#11$T4: Ty, 
    _System._tuple#11$T5: Ty, 
    _System._tuple#11$T6: Ty, 
    _System._tuple#11$T7: Ty, 
    _System._tuple#11$T8: Ty, 
    _System._tuple#11$T9: Ty, 
    _System._tuple#11$T10: Ty :: 
  { Tclass._System.Tuple11(_System._tuple#11$T0, 
      _System._tuple#11$T1, 
      _System._tuple#11$T2, 
      _System._tuple#11$T3, 
      _System._tuple#11$T4, 
      _System._tuple#11$T5, 
      _System._tuple#11$T6, 
      _System._tuple#11$T7, 
      _System._tuple#11$T8, 
      _System._tuple#11$T9, 
      _System._tuple#11$T10) } 
  Tclass._System.Tuple11_6(Tclass._System.Tuple11(_System._tuple#11$T0, 
        _System._tuple#11$T1, 
        _System._tuple#11$T2, 
        _System._tuple#11$T3, 
        _System._tuple#11$T4, 
        _System._tuple#11$T5, 
        _System._tuple#11$T6, 
        _System._tuple#11$T7, 
        _System._tuple#11$T8, 
        _System._tuple#11$T9, 
        _System._tuple#11$T10))
     == _System._tuple#11$T6);

function Tclass._System.Tuple11_7(Ty) : Ty;

// Tclass._System.Tuple11 injectivity 7
axiom (forall _System._tuple#11$T0: Ty, 
    _System._tuple#11$T1: Ty, 
    _System._tuple#11$T2: Ty, 
    _System._tuple#11$T3: Ty, 
    _System._tuple#11$T4: Ty, 
    _System._tuple#11$T5: Ty, 
    _System._tuple#11$T6: Ty, 
    _System._tuple#11$T7: Ty, 
    _System._tuple#11$T8: Ty, 
    _System._tuple#11$T9: Ty, 
    _System._tuple#11$T10: Ty :: 
  { Tclass._System.Tuple11(_System._tuple#11$T0, 
      _System._tuple#11$T1, 
      _System._tuple#11$T2, 
      _System._tuple#11$T3, 
      _System._tuple#11$T4, 
      _System._tuple#11$T5, 
      _System._tuple#11$T6, 
      _System._tuple#11$T7, 
      _System._tuple#11$T8, 
      _System._tuple#11$T9, 
      _System._tuple#11$T10) } 
  Tclass._System.Tuple11_7(Tclass._System.Tuple11(_System._tuple#11$T0, 
        _System._tuple#11$T1, 
        _System._tuple#11$T2, 
        _System._tuple#11$T3, 
        _System._tuple#11$T4, 
        _System._tuple#11$T5, 
        _System._tuple#11$T6, 
        _System._tuple#11$T7, 
        _System._tuple#11$T8, 
        _System._tuple#11$T9, 
        _System._tuple#11$T10))
     == _System._tuple#11$T7);

function Tclass._System.Tuple11_8(Ty) : Ty;

// Tclass._System.Tuple11 injectivity 8
axiom (forall _System._tuple#11$T0: Ty, 
    _System._tuple#11$T1: Ty, 
    _System._tuple#11$T2: Ty, 
    _System._tuple#11$T3: Ty, 
    _System._tuple#11$T4: Ty, 
    _System._tuple#11$T5: Ty, 
    _System._tuple#11$T6: Ty, 
    _System._tuple#11$T7: Ty, 
    _System._tuple#11$T8: Ty, 
    _System._tuple#11$T9: Ty, 
    _System._tuple#11$T10: Ty :: 
  { Tclass._System.Tuple11(_System._tuple#11$T0, 
      _System._tuple#11$T1, 
      _System._tuple#11$T2, 
      _System._tuple#11$T3, 
      _System._tuple#11$T4, 
      _System._tuple#11$T5, 
      _System._tuple#11$T6, 
      _System._tuple#11$T7, 
      _System._tuple#11$T8, 
      _System._tuple#11$T9, 
      _System._tuple#11$T10) } 
  Tclass._System.Tuple11_8(Tclass._System.Tuple11(_System._tuple#11$T0, 
        _System._tuple#11$T1, 
        _System._tuple#11$T2, 
        _System._tuple#11$T3, 
        _System._tuple#11$T4, 
        _System._tuple#11$T5, 
        _System._tuple#11$T6, 
        _System._tuple#11$T7, 
        _System._tuple#11$T8, 
        _System._tuple#11$T9, 
        _System._tuple#11$T10))
     == _System._tuple#11$T8);

function Tclass._System.Tuple11_9(Ty) : Ty;

// Tclass._System.Tuple11 injectivity 9
axiom (forall _System._tuple#11$T0: Ty, 
    _System._tuple#11$T1: Ty, 
    _System._tuple#11$T2: Ty, 
    _System._tuple#11$T3: Ty, 
    _System._tuple#11$T4: Ty, 
    _System._tuple#11$T5: Ty, 
    _System._tuple#11$T6: Ty, 
    _System._tuple#11$T7: Ty, 
    _System._tuple#11$T8: Ty, 
    _System._tuple#11$T9: Ty, 
    _System._tuple#11$T10: Ty :: 
  { Tclass._System.Tuple11(_System._tuple#11$T0, 
      _System._tuple#11$T1, 
      _System._tuple#11$T2, 
      _System._tuple#11$T3, 
      _System._tuple#11$T4, 
      _System._tuple#11$T5, 
      _System._tuple#11$T6, 
      _System._tuple#11$T7, 
      _System._tuple#11$T8, 
      _System._tuple#11$T9, 
      _System._tuple#11$T10) } 
  Tclass._System.Tuple11_9(Tclass._System.Tuple11(_System._tuple#11$T0, 
        _System._tuple#11$T1, 
        _System._tuple#11$T2, 
        _System._tuple#11$T3, 
        _System._tuple#11$T4, 
        _System._tuple#11$T5, 
        _System._tuple#11$T6, 
        _System._tuple#11$T7, 
        _System._tuple#11$T8, 
        _System._tuple#11$T9, 
        _System._tuple#11$T10))
     == _System._tuple#11$T9);

function Tclass._System.Tuple11_10(Ty) : Ty;

// Tclass._System.Tuple11 injectivity 10
axiom (forall _System._tuple#11$T0: Ty, 
    _System._tuple#11$T1: Ty, 
    _System._tuple#11$T2: Ty, 
    _System._tuple#11$T3: Ty, 
    _System._tuple#11$T4: Ty, 
    _System._tuple#11$T5: Ty, 
    _System._tuple#11$T6: Ty, 
    _System._tuple#11$T7: Ty, 
    _System._tuple#11$T8: Ty, 
    _System._tuple#11$T9: Ty, 
    _System._tuple#11$T10: Ty :: 
  { Tclass._System.Tuple11(_System._tuple#11$T0, 
      _System._tuple#11$T1, 
      _System._tuple#11$T2, 
      _System._tuple#11$T3, 
      _System._tuple#11$T4, 
      _System._tuple#11$T5, 
      _System._tuple#11$T6, 
      _System._tuple#11$T7, 
      _System._tuple#11$T8, 
      _System._tuple#11$T9, 
      _System._tuple#11$T10) } 
  Tclass._System.Tuple11_10(Tclass._System.Tuple11(_System._tuple#11$T0, 
        _System._tuple#11$T1, 
        _System._tuple#11$T2, 
        _System._tuple#11$T3, 
        _System._tuple#11$T4, 
        _System._tuple#11$T5, 
        _System._tuple#11$T6, 
        _System._tuple#11$T7, 
        _System._tuple#11$T8, 
        _System._tuple#11$T9, 
        _System._tuple#11$T10))
     == _System._tuple#11$T10);

// Box/unbox axiom for Tclass._System.Tuple11
axiom (forall _System._tuple#11$T0: Ty, 
    _System._tuple#11$T1: Ty, 
    _System._tuple#11$T2: Ty, 
    _System._tuple#11$T3: Ty, 
    _System._tuple#11$T4: Ty, 
    _System._tuple#11$T5: Ty, 
    _System._tuple#11$T6: Ty, 
    _System._tuple#11$T7: Ty, 
    _System._tuple#11$T8: Ty, 
    _System._tuple#11$T9: Ty, 
    _System._tuple#11$T10: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.Tuple11(_System._tuple#11$T0, 
        _System._tuple#11$T1, 
        _System._tuple#11$T2, 
        _System._tuple#11$T3, 
        _System._tuple#11$T4, 
        _System._tuple#11$T5, 
        _System._tuple#11$T6, 
        _System._tuple#11$T7, 
        _System._tuple#11$T8, 
        _System._tuple#11$T9, 
        _System._tuple#11$T10)) } 
  $IsBox(bx, 
      Tclass._System.Tuple11(_System._tuple#11$T0, 
        _System._tuple#11$T1, 
        _System._tuple#11$T2, 
        _System._tuple#11$T3, 
        _System._tuple#11$T4, 
        _System._tuple#11$T5, 
        _System._tuple#11$T6, 
        _System._tuple#11$T7, 
        _System._tuple#11$T8, 
        _System._tuple#11$T9, 
        _System._tuple#11$T10))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple11(_System._tuple#11$T0, 
          _System._tuple#11$T1, 
          _System._tuple#11$T2, 
          _System._tuple#11$T3, 
          _System._tuple#11$T4, 
          _System._tuple#11$T5, 
          _System._tuple#11$T6, 
          _System._tuple#11$T7, 
          _System._tuple#11$T8, 
          _System._tuple#11$T9, 
          _System._tuple#11$T10)));

// Constructor $Is
axiom (forall _System._tuple#11$T0: Ty, 
    _System._tuple#11$T1: Ty, 
    _System._tuple#11$T2: Ty, 
    _System._tuple#11$T3: Ty, 
    _System._tuple#11$T4: Ty, 
    _System._tuple#11$T5: Ty, 
    _System._tuple#11$T6: Ty, 
    _System._tuple#11$T7: Ty, 
    _System._tuple#11$T8: Ty, 
    _System._tuple#11$T9: Ty, 
    _System._tuple#11$T10: Ty, 
    a#158#0#0: Box, 
    a#158#1#0: Box, 
    a#158#2#0: Box, 
    a#158#3#0: Box, 
    a#158#4#0: Box, 
    a#158#5#0: Box, 
    a#158#6#0: Box, 
    a#158#7#0: Box, 
    a#158#8#0: Box, 
    a#158#9#0: Box, 
    a#158#10#0: Box :: 
  { $Is(#_System._tuple#11._#Make11(a#158#0#0, 
        a#158#1#0, 
        a#158#2#0, 
        a#158#3#0, 
        a#158#4#0, 
        a#158#5#0, 
        a#158#6#0, 
        a#158#7#0, 
        a#158#8#0, 
        a#158#9#0, 
        a#158#10#0), 
      Tclass._System.Tuple11(_System._tuple#11$T0, 
        _System._tuple#11$T1, 
        _System._tuple#11$T2, 
        _System._tuple#11$T3, 
        _System._tuple#11$T4, 
        _System._tuple#11$T5, 
        _System._tuple#11$T6, 
        _System._tuple#11$T7, 
        _System._tuple#11$T8, 
        _System._tuple#11$T9, 
        _System._tuple#11$T10)) } 
  $Is(#_System._tuple#11._#Make11(a#158#0#0, 
        a#158#1#0, 
        a#158#2#0, 
        a#158#3#0, 
        a#158#4#0, 
        a#158#5#0, 
        a#158#6#0, 
        a#158#7#0, 
        a#158#8#0, 
        a#158#9#0, 
        a#158#10#0), 
      Tclass._System.Tuple11(_System._tuple#11$T0, 
        _System._tuple#11$T1, 
        _System._tuple#11$T2, 
        _System._tuple#11$T3, 
        _System._tuple#11$T4, 
        _System._tuple#11$T5, 
        _System._tuple#11$T6, 
        _System._tuple#11$T7, 
        _System._tuple#11$T8, 
        _System._tuple#11$T9, 
        _System._tuple#11$T10))
     <==> $IsBox(a#158#0#0, _System._tuple#11$T0)
       && $IsBox(a#158#1#0, _System._tuple#11$T1)
       && $IsBox(a#158#2#0, _System._tuple#11$T2)
       && $IsBox(a#158#3#0, _System._tuple#11$T3)
       && $IsBox(a#158#4#0, _System._tuple#11$T4)
       && $IsBox(a#158#5#0, _System._tuple#11$T5)
       && $IsBox(a#158#6#0, _System._tuple#11$T6)
       && $IsBox(a#158#7#0, _System._tuple#11$T7)
       && $IsBox(a#158#8#0, _System._tuple#11$T8)
       && $IsBox(a#158#9#0, _System._tuple#11$T9)
       && $IsBox(a#158#10#0, _System._tuple#11$T10));

// Constructor $IsAlloc
axiom (forall _System._tuple#11$T0: Ty, 
    _System._tuple#11$T1: Ty, 
    _System._tuple#11$T2: Ty, 
    _System._tuple#11$T3: Ty, 
    _System._tuple#11$T4: Ty, 
    _System._tuple#11$T5: Ty, 
    _System._tuple#11$T6: Ty, 
    _System._tuple#11$T7: Ty, 
    _System._tuple#11$T8: Ty, 
    _System._tuple#11$T9: Ty, 
    _System._tuple#11$T10: Ty, 
    a#158#0#0: Box, 
    a#158#1#0: Box, 
    a#158#2#0: Box, 
    a#158#3#0: Box, 
    a#158#4#0: Box, 
    a#158#5#0: Box, 
    a#158#6#0: Box, 
    a#158#7#0: Box, 
    a#158#8#0: Box, 
    a#158#9#0: Box, 
    a#158#10#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#11._#Make11(a#158#0#0, 
        a#158#1#0, 
        a#158#2#0, 
        a#158#3#0, 
        a#158#4#0, 
        a#158#5#0, 
        a#158#6#0, 
        a#158#7#0, 
        a#158#8#0, 
        a#158#9#0, 
        a#158#10#0), 
      Tclass._System.Tuple11(_System._tuple#11$T0, 
        _System._tuple#11$T1, 
        _System._tuple#11$T2, 
        _System._tuple#11$T3, 
        _System._tuple#11$T4, 
        _System._tuple#11$T5, 
        _System._tuple#11$T6, 
        _System._tuple#11$T7, 
        _System._tuple#11$T8, 
        _System._tuple#11$T9, 
        _System._tuple#11$T10), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#11._#Make11(a#158#0#0, 
          a#158#1#0, 
          a#158#2#0, 
          a#158#3#0, 
          a#158#4#0, 
          a#158#5#0, 
          a#158#6#0, 
          a#158#7#0, 
          a#158#8#0, 
          a#158#9#0, 
          a#158#10#0), 
        Tclass._System.Tuple11(_System._tuple#11$T0, 
          _System._tuple#11$T1, 
          _System._tuple#11$T2, 
          _System._tuple#11$T3, 
          _System._tuple#11$T4, 
          _System._tuple#11$T5, 
          _System._tuple#11$T6, 
          _System._tuple#11$T7, 
          _System._tuple#11$T8, 
          _System._tuple#11$T9, 
          _System._tuple#11$T10), 
        $h)
       <==> $IsAllocBox(a#158#0#0, _System._tuple#11$T0, $h)
         && $IsAllocBox(a#158#1#0, _System._tuple#11$T1, $h)
         && $IsAllocBox(a#158#2#0, _System._tuple#11$T2, $h)
         && $IsAllocBox(a#158#3#0, _System._tuple#11$T3, $h)
         && $IsAllocBox(a#158#4#0, _System._tuple#11$T4, $h)
         && $IsAllocBox(a#158#5#0, _System._tuple#11$T5, $h)
         && $IsAllocBox(a#158#6#0, _System._tuple#11$T6, $h)
         && $IsAllocBox(a#158#7#0, _System._tuple#11$T7, $h)
         && $IsAllocBox(a#158#8#0, _System._tuple#11$T8, $h)
         && $IsAllocBox(a#158#9#0, _System._tuple#11$T9, $h)
         && $IsAllocBox(a#158#10#0, _System._tuple#11$T10, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#11$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple11._0(d), _System._tuple#11$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple11.___hMake11_q(d)
       && (exists _System._tuple#11$T1: Ty, 
          _System._tuple#11$T2: Ty, 
          _System._tuple#11$T3: Ty, 
          _System._tuple#11$T4: Ty, 
          _System._tuple#11$T5: Ty, 
          _System._tuple#11$T6: Ty, 
          _System._tuple#11$T7: Ty, 
          _System._tuple#11$T8: Ty, 
          _System._tuple#11$T9: Ty, 
          _System._tuple#11$T10: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple11(_System._tuple#11$T0, 
              _System._tuple#11$T1, 
              _System._tuple#11$T2, 
              _System._tuple#11$T3, 
              _System._tuple#11$T4, 
              _System._tuple#11$T5, 
              _System._tuple#11$T6, 
              _System._tuple#11$T7, 
              _System._tuple#11$T8, 
              _System._tuple#11$T9, 
              _System._tuple#11$T10), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple11(_System._tuple#11$T0, 
            _System._tuple#11$T1, 
            _System._tuple#11$T2, 
            _System._tuple#11$T3, 
            _System._tuple#11$T4, 
            _System._tuple#11$T5, 
            _System._tuple#11$T6, 
            _System._tuple#11$T7, 
            _System._tuple#11$T8, 
            _System._tuple#11$T9, 
            _System._tuple#11$T10), 
          $h))
     ==> $IsAllocBox(_System.Tuple11._0(d), _System._tuple#11$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#11$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple11._1(d), _System._tuple#11$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple11.___hMake11_q(d)
       && (exists _System._tuple#11$T0: Ty, 
          _System._tuple#11$T2: Ty, 
          _System._tuple#11$T3: Ty, 
          _System._tuple#11$T4: Ty, 
          _System._tuple#11$T5: Ty, 
          _System._tuple#11$T6: Ty, 
          _System._tuple#11$T7: Ty, 
          _System._tuple#11$T8: Ty, 
          _System._tuple#11$T9: Ty, 
          _System._tuple#11$T10: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple11(_System._tuple#11$T0, 
              _System._tuple#11$T1, 
              _System._tuple#11$T2, 
              _System._tuple#11$T3, 
              _System._tuple#11$T4, 
              _System._tuple#11$T5, 
              _System._tuple#11$T6, 
              _System._tuple#11$T7, 
              _System._tuple#11$T8, 
              _System._tuple#11$T9, 
              _System._tuple#11$T10), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple11(_System._tuple#11$T0, 
            _System._tuple#11$T1, 
            _System._tuple#11$T2, 
            _System._tuple#11$T3, 
            _System._tuple#11$T4, 
            _System._tuple#11$T5, 
            _System._tuple#11$T6, 
            _System._tuple#11$T7, 
            _System._tuple#11$T8, 
            _System._tuple#11$T9, 
            _System._tuple#11$T10), 
          $h))
     ==> $IsAllocBox(_System.Tuple11._1(d), _System._tuple#11$T1, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#11$T2: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple11._2(d), _System._tuple#11$T2, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple11.___hMake11_q(d)
       && (exists _System._tuple#11$T0: Ty, 
          _System._tuple#11$T1: Ty, 
          _System._tuple#11$T3: Ty, 
          _System._tuple#11$T4: Ty, 
          _System._tuple#11$T5: Ty, 
          _System._tuple#11$T6: Ty, 
          _System._tuple#11$T7: Ty, 
          _System._tuple#11$T8: Ty, 
          _System._tuple#11$T9: Ty, 
          _System._tuple#11$T10: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple11(_System._tuple#11$T0, 
              _System._tuple#11$T1, 
              _System._tuple#11$T2, 
              _System._tuple#11$T3, 
              _System._tuple#11$T4, 
              _System._tuple#11$T5, 
              _System._tuple#11$T6, 
              _System._tuple#11$T7, 
              _System._tuple#11$T8, 
              _System._tuple#11$T9, 
              _System._tuple#11$T10), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple11(_System._tuple#11$T0, 
            _System._tuple#11$T1, 
            _System._tuple#11$T2, 
            _System._tuple#11$T3, 
            _System._tuple#11$T4, 
            _System._tuple#11$T5, 
            _System._tuple#11$T6, 
            _System._tuple#11$T7, 
            _System._tuple#11$T8, 
            _System._tuple#11$T9, 
            _System._tuple#11$T10), 
          $h))
     ==> $IsAllocBox(_System.Tuple11._2(d), _System._tuple#11$T2, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#11$T3: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple11._3(d), _System._tuple#11$T3, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple11.___hMake11_q(d)
       && (exists _System._tuple#11$T0: Ty, 
          _System._tuple#11$T1: Ty, 
          _System._tuple#11$T2: Ty, 
          _System._tuple#11$T4: Ty, 
          _System._tuple#11$T5: Ty, 
          _System._tuple#11$T6: Ty, 
          _System._tuple#11$T7: Ty, 
          _System._tuple#11$T8: Ty, 
          _System._tuple#11$T9: Ty, 
          _System._tuple#11$T10: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple11(_System._tuple#11$T0, 
              _System._tuple#11$T1, 
              _System._tuple#11$T2, 
              _System._tuple#11$T3, 
              _System._tuple#11$T4, 
              _System._tuple#11$T5, 
              _System._tuple#11$T6, 
              _System._tuple#11$T7, 
              _System._tuple#11$T8, 
              _System._tuple#11$T9, 
              _System._tuple#11$T10), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple11(_System._tuple#11$T0, 
            _System._tuple#11$T1, 
            _System._tuple#11$T2, 
            _System._tuple#11$T3, 
            _System._tuple#11$T4, 
            _System._tuple#11$T5, 
            _System._tuple#11$T6, 
            _System._tuple#11$T7, 
            _System._tuple#11$T8, 
            _System._tuple#11$T9, 
            _System._tuple#11$T10), 
          $h))
     ==> $IsAllocBox(_System.Tuple11._3(d), _System._tuple#11$T3, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#11$T4: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple11._4(d), _System._tuple#11$T4, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple11.___hMake11_q(d)
       && (exists _System._tuple#11$T0: Ty, 
          _System._tuple#11$T1: Ty, 
          _System._tuple#11$T2: Ty, 
          _System._tuple#11$T3: Ty, 
          _System._tuple#11$T5: Ty, 
          _System._tuple#11$T6: Ty, 
          _System._tuple#11$T7: Ty, 
          _System._tuple#11$T8: Ty, 
          _System._tuple#11$T9: Ty, 
          _System._tuple#11$T10: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple11(_System._tuple#11$T0, 
              _System._tuple#11$T1, 
              _System._tuple#11$T2, 
              _System._tuple#11$T3, 
              _System._tuple#11$T4, 
              _System._tuple#11$T5, 
              _System._tuple#11$T6, 
              _System._tuple#11$T7, 
              _System._tuple#11$T8, 
              _System._tuple#11$T9, 
              _System._tuple#11$T10), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple11(_System._tuple#11$T0, 
            _System._tuple#11$T1, 
            _System._tuple#11$T2, 
            _System._tuple#11$T3, 
            _System._tuple#11$T4, 
            _System._tuple#11$T5, 
            _System._tuple#11$T6, 
            _System._tuple#11$T7, 
            _System._tuple#11$T8, 
            _System._tuple#11$T9, 
            _System._tuple#11$T10), 
          $h))
     ==> $IsAllocBox(_System.Tuple11._4(d), _System._tuple#11$T4, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#11$T5: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple11._5(d), _System._tuple#11$T5, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple11.___hMake11_q(d)
       && (exists _System._tuple#11$T0: Ty, 
          _System._tuple#11$T1: Ty, 
          _System._tuple#11$T2: Ty, 
          _System._tuple#11$T3: Ty, 
          _System._tuple#11$T4: Ty, 
          _System._tuple#11$T6: Ty, 
          _System._tuple#11$T7: Ty, 
          _System._tuple#11$T8: Ty, 
          _System._tuple#11$T9: Ty, 
          _System._tuple#11$T10: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple11(_System._tuple#11$T0, 
              _System._tuple#11$T1, 
              _System._tuple#11$T2, 
              _System._tuple#11$T3, 
              _System._tuple#11$T4, 
              _System._tuple#11$T5, 
              _System._tuple#11$T6, 
              _System._tuple#11$T7, 
              _System._tuple#11$T8, 
              _System._tuple#11$T9, 
              _System._tuple#11$T10), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple11(_System._tuple#11$T0, 
            _System._tuple#11$T1, 
            _System._tuple#11$T2, 
            _System._tuple#11$T3, 
            _System._tuple#11$T4, 
            _System._tuple#11$T5, 
            _System._tuple#11$T6, 
            _System._tuple#11$T7, 
            _System._tuple#11$T8, 
            _System._tuple#11$T9, 
            _System._tuple#11$T10), 
          $h))
     ==> $IsAllocBox(_System.Tuple11._5(d), _System._tuple#11$T5, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#11$T6: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple11._6(d), _System._tuple#11$T6, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple11.___hMake11_q(d)
       && (exists _System._tuple#11$T0: Ty, 
          _System._tuple#11$T1: Ty, 
          _System._tuple#11$T2: Ty, 
          _System._tuple#11$T3: Ty, 
          _System._tuple#11$T4: Ty, 
          _System._tuple#11$T5: Ty, 
          _System._tuple#11$T7: Ty, 
          _System._tuple#11$T8: Ty, 
          _System._tuple#11$T9: Ty, 
          _System._tuple#11$T10: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple11(_System._tuple#11$T0, 
              _System._tuple#11$T1, 
              _System._tuple#11$T2, 
              _System._tuple#11$T3, 
              _System._tuple#11$T4, 
              _System._tuple#11$T5, 
              _System._tuple#11$T6, 
              _System._tuple#11$T7, 
              _System._tuple#11$T8, 
              _System._tuple#11$T9, 
              _System._tuple#11$T10), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple11(_System._tuple#11$T0, 
            _System._tuple#11$T1, 
            _System._tuple#11$T2, 
            _System._tuple#11$T3, 
            _System._tuple#11$T4, 
            _System._tuple#11$T5, 
            _System._tuple#11$T6, 
            _System._tuple#11$T7, 
            _System._tuple#11$T8, 
            _System._tuple#11$T9, 
            _System._tuple#11$T10), 
          $h))
     ==> $IsAllocBox(_System.Tuple11._6(d), _System._tuple#11$T6, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#11$T7: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple11._7(d), _System._tuple#11$T7, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple11.___hMake11_q(d)
       && (exists _System._tuple#11$T0: Ty, 
          _System._tuple#11$T1: Ty, 
          _System._tuple#11$T2: Ty, 
          _System._tuple#11$T3: Ty, 
          _System._tuple#11$T4: Ty, 
          _System._tuple#11$T5: Ty, 
          _System._tuple#11$T6: Ty, 
          _System._tuple#11$T8: Ty, 
          _System._tuple#11$T9: Ty, 
          _System._tuple#11$T10: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple11(_System._tuple#11$T0, 
              _System._tuple#11$T1, 
              _System._tuple#11$T2, 
              _System._tuple#11$T3, 
              _System._tuple#11$T4, 
              _System._tuple#11$T5, 
              _System._tuple#11$T6, 
              _System._tuple#11$T7, 
              _System._tuple#11$T8, 
              _System._tuple#11$T9, 
              _System._tuple#11$T10), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple11(_System._tuple#11$T0, 
            _System._tuple#11$T1, 
            _System._tuple#11$T2, 
            _System._tuple#11$T3, 
            _System._tuple#11$T4, 
            _System._tuple#11$T5, 
            _System._tuple#11$T6, 
            _System._tuple#11$T7, 
            _System._tuple#11$T8, 
            _System._tuple#11$T9, 
            _System._tuple#11$T10), 
          $h))
     ==> $IsAllocBox(_System.Tuple11._7(d), _System._tuple#11$T7, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#11$T8: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple11._8(d), _System._tuple#11$T8, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple11.___hMake11_q(d)
       && (exists _System._tuple#11$T0: Ty, 
          _System._tuple#11$T1: Ty, 
          _System._tuple#11$T2: Ty, 
          _System._tuple#11$T3: Ty, 
          _System._tuple#11$T4: Ty, 
          _System._tuple#11$T5: Ty, 
          _System._tuple#11$T6: Ty, 
          _System._tuple#11$T7: Ty, 
          _System._tuple#11$T9: Ty, 
          _System._tuple#11$T10: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple11(_System._tuple#11$T0, 
              _System._tuple#11$T1, 
              _System._tuple#11$T2, 
              _System._tuple#11$T3, 
              _System._tuple#11$T4, 
              _System._tuple#11$T5, 
              _System._tuple#11$T6, 
              _System._tuple#11$T7, 
              _System._tuple#11$T8, 
              _System._tuple#11$T9, 
              _System._tuple#11$T10), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple11(_System._tuple#11$T0, 
            _System._tuple#11$T1, 
            _System._tuple#11$T2, 
            _System._tuple#11$T3, 
            _System._tuple#11$T4, 
            _System._tuple#11$T5, 
            _System._tuple#11$T6, 
            _System._tuple#11$T7, 
            _System._tuple#11$T8, 
            _System._tuple#11$T9, 
            _System._tuple#11$T10), 
          $h))
     ==> $IsAllocBox(_System.Tuple11._8(d), _System._tuple#11$T8, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#11$T9: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple11._9(d), _System._tuple#11$T9, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple11.___hMake11_q(d)
       && (exists _System._tuple#11$T0: Ty, 
          _System._tuple#11$T1: Ty, 
          _System._tuple#11$T2: Ty, 
          _System._tuple#11$T3: Ty, 
          _System._tuple#11$T4: Ty, 
          _System._tuple#11$T5: Ty, 
          _System._tuple#11$T6: Ty, 
          _System._tuple#11$T7: Ty, 
          _System._tuple#11$T8: Ty, 
          _System._tuple#11$T10: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple11(_System._tuple#11$T0, 
              _System._tuple#11$T1, 
              _System._tuple#11$T2, 
              _System._tuple#11$T3, 
              _System._tuple#11$T4, 
              _System._tuple#11$T5, 
              _System._tuple#11$T6, 
              _System._tuple#11$T7, 
              _System._tuple#11$T8, 
              _System._tuple#11$T9, 
              _System._tuple#11$T10), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple11(_System._tuple#11$T0, 
            _System._tuple#11$T1, 
            _System._tuple#11$T2, 
            _System._tuple#11$T3, 
            _System._tuple#11$T4, 
            _System._tuple#11$T5, 
            _System._tuple#11$T6, 
            _System._tuple#11$T7, 
            _System._tuple#11$T8, 
            _System._tuple#11$T9, 
            _System._tuple#11$T10), 
          $h))
     ==> $IsAllocBox(_System.Tuple11._9(d), _System._tuple#11$T9, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#11$T10: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple11._10(d), _System._tuple#11$T10, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple11.___hMake11_q(d)
       && (exists _System._tuple#11$T0: Ty, 
          _System._tuple#11$T1: Ty, 
          _System._tuple#11$T2: Ty, 
          _System._tuple#11$T3: Ty, 
          _System._tuple#11$T4: Ty, 
          _System._tuple#11$T5: Ty, 
          _System._tuple#11$T6: Ty, 
          _System._tuple#11$T7: Ty, 
          _System._tuple#11$T8: Ty, 
          _System._tuple#11$T9: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple11(_System._tuple#11$T0, 
              _System._tuple#11$T1, 
              _System._tuple#11$T2, 
              _System._tuple#11$T3, 
              _System._tuple#11$T4, 
              _System._tuple#11$T5, 
              _System._tuple#11$T6, 
              _System._tuple#11$T7, 
              _System._tuple#11$T8, 
              _System._tuple#11$T9, 
              _System._tuple#11$T10), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple11(_System._tuple#11$T0, 
            _System._tuple#11$T1, 
            _System._tuple#11$T2, 
            _System._tuple#11$T3, 
            _System._tuple#11$T4, 
            _System._tuple#11$T5, 
            _System._tuple#11$T6, 
            _System._tuple#11$T7, 
            _System._tuple#11$T8, 
            _System._tuple#11$T9, 
            _System._tuple#11$T10), 
          $h))
     ==> $IsAllocBox(_System.Tuple11._10(d), _System._tuple#11$T10, $h));

// Constructor literal
axiom (forall a#159#0#0: Box, 
    a#159#1#0: Box, 
    a#159#2#0: Box, 
    a#159#3#0: Box, 
    a#159#4#0: Box, 
    a#159#5#0: Box, 
    a#159#6#0: Box, 
    a#159#7#0: Box, 
    a#159#8#0: Box, 
    a#159#9#0: Box, 
    a#159#10#0: Box :: 
  { #_System._tuple#11._#Make11(Lit(a#159#0#0), 
      Lit(a#159#1#0), 
      Lit(a#159#2#0), 
      Lit(a#159#3#0), 
      Lit(a#159#4#0), 
      Lit(a#159#5#0), 
      Lit(a#159#6#0), 
      Lit(a#159#7#0), 
      Lit(a#159#8#0), 
      Lit(a#159#9#0), 
      Lit(a#159#10#0)) } 
  #_System._tuple#11._#Make11(Lit(a#159#0#0), 
      Lit(a#159#1#0), 
      Lit(a#159#2#0), 
      Lit(a#159#3#0), 
      Lit(a#159#4#0), 
      Lit(a#159#5#0), 
      Lit(a#159#6#0), 
      Lit(a#159#7#0), 
      Lit(a#159#8#0), 
      Lit(a#159#9#0), 
      Lit(a#159#10#0))
     == Lit(#_System._tuple#11._#Make11(a#159#0#0, 
        a#159#1#0, 
        a#159#2#0, 
        a#159#3#0, 
        a#159#4#0, 
        a#159#5#0, 
        a#159#6#0, 
        a#159#7#0, 
        a#159#8#0, 
        a#159#9#0, 
        a#159#10#0)));

function _System.Tuple11._0(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#160#0#0: Box, 
    a#160#1#0: Box, 
    a#160#2#0: Box, 
    a#160#3#0: Box, 
    a#160#4#0: Box, 
    a#160#5#0: Box, 
    a#160#6#0: Box, 
    a#160#7#0: Box, 
    a#160#8#0: Box, 
    a#160#9#0: Box, 
    a#160#10#0: Box :: 
  { #_System._tuple#11._#Make11(a#160#0#0, 
      a#160#1#0, 
      a#160#2#0, 
      a#160#3#0, 
      a#160#4#0, 
      a#160#5#0, 
      a#160#6#0, 
      a#160#7#0, 
      a#160#8#0, 
      a#160#9#0, 
      a#160#10#0) } 
  _System.Tuple11._0(#_System._tuple#11._#Make11(a#160#0#0, 
        a#160#1#0, 
        a#160#2#0, 
        a#160#3#0, 
        a#160#4#0, 
        a#160#5#0, 
        a#160#6#0, 
        a#160#7#0, 
        a#160#8#0, 
        a#160#9#0, 
        a#160#10#0))
     == a#160#0#0);

// Inductive rank
axiom (forall a#161#0#0: Box, 
    a#161#1#0: Box, 
    a#161#2#0: Box, 
    a#161#3#0: Box, 
    a#161#4#0: Box, 
    a#161#5#0: Box, 
    a#161#6#0: Box, 
    a#161#7#0: Box, 
    a#161#8#0: Box, 
    a#161#9#0: Box, 
    a#161#10#0: Box :: 
  { #_System._tuple#11._#Make11(a#161#0#0, 
      a#161#1#0, 
      a#161#2#0, 
      a#161#3#0, 
      a#161#4#0, 
      a#161#5#0, 
      a#161#6#0, 
      a#161#7#0, 
      a#161#8#0, 
      a#161#9#0, 
      a#161#10#0) } 
  BoxRank(a#161#0#0)
     < DtRank(#_System._tuple#11._#Make11(a#161#0#0, 
        a#161#1#0, 
        a#161#2#0, 
        a#161#3#0, 
        a#161#4#0, 
        a#161#5#0, 
        a#161#6#0, 
        a#161#7#0, 
        a#161#8#0, 
        a#161#9#0, 
        a#161#10#0)));

function _System.Tuple11._1(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#162#0#0: Box, 
    a#162#1#0: Box, 
    a#162#2#0: Box, 
    a#162#3#0: Box, 
    a#162#4#0: Box, 
    a#162#5#0: Box, 
    a#162#6#0: Box, 
    a#162#7#0: Box, 
    a#162#8#0: Box, 
    a#162#9#0: Box, 
    a#162#10#0: Box :: 
  { #_System._tuple#11._#Make11(a#162#0#0, 
      a#162#1#0, 
      a#162#2#0, 
      a#162#3#0, 
      a#162#4#0, 
      a#162#5#0, 
      a#162#6#0, 
      a#162#7#0, 
      a#162#8#0, 
      a#162#9#0, 
      a#162#10#0) } 
  _System.Tuple11._1(#_System._tuple#11._#Make11(a#162#0#0, 
        a#162#1#0, 
        a#162#2#0, 
        a#162#3#0, 
        a#162#4#0, 
        a#162#5#0, 
        a#162#6#0, 
        a#162#7#0, 
        a#162#8#0, 
        a#162#9#0, 
        a#162#10#0))
     == a#162#1#0);

// Inductive rank
axiom (forall a#163#0#0: Box, 
    a#163#1#0: Box, 
    a#163#2#0: Box, 
    a#163#3#0: Box, 
    a#163#4#0: Box, 
    a#163#5#0: Box, 
    a#163#6#0: Box, 
    a#163#7#0: Box, 
    a#163#8#0: Box, 
    a#163#9#0: Box, 
    a#163#10#0: Box :: 
  { #_System._tuple#11._#Make11(a#163#0#0, 
      a#163#1#0, 
      a#163#2#0, 
      a#163#3#0, 
      a#163#4#0, 
      a#163#5#0, 
      a#163#6#0, 
      a#163#7#0, 
      a#163#8#0, 
      a#163#9#0, 
      a#163#10#0) } 
  BoxRank(a#163#1#0)
     < DtRank(#_System._tuple#11._#Make11(a#163#0#0, 
        a#163#1#0, 
        a#163#2#0, 
        a#163#3#0, 
        a#163#4#0, 
        a#163#5#0, 
        a#163#6#0, 
        a#163#7#0, 
        a#163#8#0, 
        a#163#9#0, 
        a#163#10#0)));

function _System.Tuple11._2(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#164#0#0: Box, 
    a#164#1#0: Box, 
    a#164#2#0: Box, 
    a#164#3#0: Box, 
    a#164#4#0: Box, 
    a#164#5#0: Box, 
    a#164#6#0: Box, 
    a#164#7#0: Box, 
    a#164#8#0: Box, 
    a#164#9#0: Box, 
    a#164#10#0: Box :: 
  { #_System._tuple#11._#Make11(a#164#0#0, 
      a#164#1#0, 
      a#164#2#0, 
      a#164#3#0, 
      a#164#4#0, 
      a#164#5#0, 
      a#164#6#0, 
      a#164#7#0, 
      a#164#8#0, 
      a#164#9#0, 
      a#164#10#0) } 
  _System.Tuple11._2(#_System._tuple#11._#Make11(a#164#0#0, 
        a#164#1#0, 
        a#164#2#0, 
        a#164#3#0, 
        a#164#4#0, 
        a#164#5#0, 
        a#164#6#0, 
        a#164#7#0, 
        a#164#8#0, 
        a#164#9#0, 
        a#164#10#0))
     == a#164#2#0);

// Inductive rank
axiom (forall a#165#0#0: Box, 
    a#165#1#0: Box, 
    a#165#2#0: Box, 
    a#165#3#0: Box, 
    a#165#4#0: Box, 
    a#165#5#0: Box, 
    a#165#6#0: Box, 
    a#165#7#0: Box, 
    a#165#8#0: Box, 
    a#165#9#0: Box, 
    a#165#10#0: Box :: 
  { #_System._tuple#11._#Make11(a#165#0#0, 
      a#165#1#0, 
      a#165#2#0, 
      a#165#3#0, 
      a#165#4#0, 
      a#165#5#0, 
      a#165#6#0, 
      a#165#7#0, 
      a#165#8#0, 
      a#165#9#0, 
      a#165#10#0) } 
  BoxRank(a#165#2#0)
     < DtRank(#_System._tuple#11._#Make11(a#165#0#0, 
        a#165#1#0, 
        a#165#2#0, 
        a#165#3#0, 
        a#165#4#0, 
        a#165#5#0, 
        a#165#6#0, 
        a#165#7#0, 
        a#165#8#0, 
        a#165#9#0, 
        a#165#10#0)));

function _System.Tuple11._3(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#166#0#0: Box, 
    a#166#1#0: Box, 
    a#166#2#0: Box, 
    a#166#3#0: Box, 
    a#166#4#0: Box, 
    a#166#5#0: Box, 
    a#166#6#0: Box, 
    a#166#7#0: Box, 
    a#166#8#0: Box, 
    a#166#9#0: Box, 
    a#166#10#0: Box :: 
  { #_System._tuple#11._#Make11(a#166#0#0, 
      a#166#1#0, 
      a#166#2#0, 
      a#166#3#0, 
      a#166#4#0, 
      a#166#5#0, 
      a#166#6#0, 
      a#166#7#0, 
      a#166#8#0, 
      a#166#9#0, 
      a#166#10#0) } 
  _System.Tuple11._3(#_System._tuple#11._#Make11(a#166#0#0, 
        a#166#1#0, 
        a#166#2#0, 
        a#166#3#0, 
        a#166#4#0, 
        a#166#5#0, 
        a#166#6#0, 
        a#166#7#0, 
        a#166#8#0, 
        a#166#9#0, 
        a#166#10#0))
     == a#166#3#0);

// Inductive rank
axiom (forall a#167#0#0: Box, 
    a#167#1#0: Box, 
    a#167#2#0: Box, 
    a#167#3#0: Box, 
    a#167#4#0: Box, 
    a#167#5#0: Box, 
    a#167#6#0: Box, 
    a#167#7#0: Box, 
    a#167#8#0: Box, 
    a#167#9#0: Box, 
    a#167#10#0: Box :: 
  { #_System._tuple#11._#Make11(a#167#0#0, 
      a#167#1#0, 
      a#167#2#0, 
      a#167#3#0, 
      a#167#4#0, 
      a#167#5#0, 
      a#167#6#0, 
      a#167#7#0, 
      a#167#8#0, 
      a#167#9#0, 
      a#167#10#0) } 
  BoxRank(a#167#3#0)
     < DtRank(#_System._tuple#11._#Make11(a#167#0#0, 
        a#167#1#0, 
        a#167#2#0, 
        a#167#3#0, 
        a#167#4#0, 
        a#167#5#0, 
        a#167#6#0, 
        a#167#7#0, 
        a#167#8#0, 
        a#167#9#0, 
        a#167#10#0)));

function _System.Tuple11._4(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#168#0#0: Box, 
    a#168#1#0: Box, 
    a#168#2#0: Box, 
    a#168#3#0: Box, 
    a#168#4#0: Box, 
    a#168#5#0: Box, 
    a#168#6#0: Box, 
    a#168#7#0: Box, 
    a#168#8#0: Box, 
    a#168#9#0: Box, 
    a#168#10#0: Box :: 
  { #_System._tuple#11._#Make11(a#168#0#0, 
      a#168#1#0, 
      a#168#2#0, 
      a#168#3#0, 
      a#168#4#0, 
      a#168#5#0, 
      a#168#6#0, 
      a#168#7#0, 
      a#168#8#0, 
      a#168#9#0, 
      a#168#10#0) } 
  _System.Tuple11._4(#_System._tuple#11._#Make11(a#168#0#0, 
        a#168#1#0, 
        a#168#2#0, 
        a#168#3#0, 
        a#168#4#0, 
        a#168#5#0, 
        a#168#6#0, 
        a#168#7#0, 
        a#168#8#0, 
        a#168#9#0, 
        a#168#10#0))
     == a#168#4#0);

// Inductive rank
axiom (forall a#169#0#0: Box, 
    a#169#1#0: Box, 
    a#169#2#0: Box, 
    a#169#3#0: Box, 
    a#169#4#0: Box, 
    a#169#5#0: Box, 
    a#169#6#0: Box, 
    a#169#7#0: Box, 
    a#169#8#0: Box, 
    a#169#9#0: Box, 
    a#169#10#0: Box :: 
  { #_System._tuple#11._#Make11(a#169#0#0, 
      a#169#1#0, 
      a#169#2#0, 
      a#169#3#0, 
      a#169#4#0, 
      a#169#5#0, 
      a#169#6#0, 
      a#169#7#0, 
      a#169#8#0, 
      a#169#9#0, 
      a#169#10#0) } 
  BoxRank(a#169#4#0)
     < DtRank(#_System._tuple#11._#Make11(a#169#0#0, 
        a#169#1#0, 
        a#169#2#0, 
        a#169#3#0, 
        a#169#4#0, 
        a#169#5#0, 
        a#169#6#0, 
        a#169#7#0, 
        a#169#8#0, 
        a#169#9#0, 
        a#169#10#0)));

function _System.Tuple11._5(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#170#0#0: Box, 
    a#170#1#0: Box, 
    a#170#2#0: Box, 
    a#170#3#0: Box, 
    a#170#4#0: Box, 
    a#170#5#0: Box, 
    a#170#6#0: Box, 
    a#170#7#0: Box, 
    a#170#8#0: Box, 
    a#170#9#0: Box, 
    a#170#10#0: Box :: 
  { #_System._tuple#11._#Make11(a#170#0#0, 
      a#170#1#0, 
      a#170#2#0, 
      a#170#3#0, 
      a#170#4#0, 
      a#170#5#0, 
      a#170#6#0, 
      a#170#7#0, 
      a#170#8#0, 
      a#170#9#0, 
      a#170#10#0) } 
  _System.Tuple11._5(#_System._tuple#11._#Make11(a#170#0#0, 
        a#170#1#0, 
        a#170#2#0, 
        a#170#3#0, 
        a#170#4#0, 
        a#170#5#0, 
        a#170#6#0, 
        a#170#7#0, 
        a#170#8#0, 
        a#170#9#0, 
        a#170#10#0))
     == a#170#5#0);

// Inductive rank
axiom (forall a#171#0#0: Box, 
    a#171#1#0: Box, 
    a#171#2#0: Box, 
    a#171#3#0: Box, 
    a#171#4#0: Box, 
    a#171#5#0: Box, 
    a#171#6#0: Box, 
    a#171#7#0: Box, 
    a#171#8#0: Box, 
    a#171#9#0: Box, 
    a#171#10#0: Box :: 
  { #_System._tuple#11._#Make11(a#171#0#0, 
      a#171#1#0, 
      a#171#2#0, 
      a#171#3#0, 
      a#171#4#0, 
      a#171#5#0, 
      a#171#6#0, 
      a#171#7#0, 
      a#171#8#0, 
      a#171#9#0, 
      a#171#10#0) } 
  BoxRank(a#171#5#0)
     < DtRank(#_System._tuple#11._#Make11(a#171#0#0, 
        a#171#1#0, 
        a#171#2#0, 
        a#171#3#0, 
        a#171#4#0, 
        a#171#5#0, 
        a#171#6#0, 
        a#171#7#0, 
        a#171#8#0, 
        a#171#9#0, 
        a#171#10#0)));

function _System.Tuple11._6(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#172#0#0: Box, 
    a#172#1#0: Box, 
    a#172#2#0: Box, 
    a#172#3#0: Box, 
    a#172#4#0: Box, 
    a#172#5#0: Box, 
    a#172#6#0: Box, 
    a#172#7#0: Box, 
    a#172#8#0: Box, 
    a#172#9#0: Box, 
    a#172#10#0: Box :: 
  { #_System._tuple#11._#Make11(a#172#0#0, 
      a#172#1#0, 
      a#172#2#0, 
      a#172#3#0, 
      a#172#4#0, 
      a#172#5#0, 
      a#172#6#0, 
      a#172#7#0, 
      a#172#8#0, 
      a#172#9#0, 
      a#172#10#0) } 
  _System.Tuple11._6(#_System._tuple#11._#Make11(a#172#0#0, 
        a#172#1#0, 
        a#172#2#0, 
        a#172#3#0, 
        a#172#4#0, 
        a#172#5#0, 
        a#172#6#0, 
        a#172#7#0, 
        a#172#8#0, 
        a#172#9#0, 
        a#172#10#0))
     == a#172#6#0);

// Inductive rank
axiom (forall a#173#0#0: Box, 
    a#173#1#0: Box, 
    a#173#2#0: Box, 
    a#173#3#0: Box, 
    a#173#4#0: Box, 
    a#173#5#0: Box, 
    a#173#6#0: Box, 
    a#173#7#0: Box, 
    a#173#8#0: Box, 
    a#173#9#0: Box, 
    a#173#10#0: Box :: 
  { #_System._tuple#11._#Make11(a#173#0#0, 
      a#173#1#0, 
      a#173#2#0, 
      a#173#3#0, 
      a#173#4#0, 
      a#173#5#0, 
      a#173#6#0, 
      a#173#7#0, 
      a#173#8#0, 
      a#173#9#0, 
      a#173#10#0) } 
  BoxRank(a#173#6#0)
     < DtRank(#_System._tuple#11._#Make11(a#173#0#0, 
        a#173#1#0, 
        a#173#2#0, 
        a#173#3#0, 
        a#173#4#0, 
        a#173#5#0, 
        a#173#6#0, 
        a#173#7#0, 
        a#173#8#0, 
        a#173#9#0, 
        a#173#10#0)));

function _System.Tuple11._7(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#174#0#0: Box, 
    a#174#1#0: Box, 
    a#174#2#0: Box, 
    a#174#3#0: Box, 
    a#174#4#0: Box, 
    a#174#5#0: Box, 
    a#174#6#0: Box, 
    a#174#7#0: Box, 
    a#174#8#0: Box, 
    a#174#9#0: Box, 
    a#174#10#0: Box :: 
  { #_System._tuple#11._#Make11(a#174#0#0, 
      a#174#1#0, 
      a#174#2#0, 
      a#174#3#0, 
      a#174#4#0, 
      a#174#5#0, 
      a#174#6#0, 
      a#174#7#0, 
      a#174#8#0, 
      a#174#9#0, 
      a#174#10#0) } 
  _System.Tuple11._7(#_System._tuple#11._#Make11(a#174#0#0, 
        a#174#1#0, 
        a#174#2#0, 
        a#174#3#0, 
        a#174#4#0, 
        a#174#5#0, 
        a#174#6#0, 
        a#174#7#0, 
        a#174#8#0, 
        a#174#9#0, 
        a#174#10#0))
     == a#174#7#0);

// Inductive rank
axiom (forall a#175#0#0: Box, 
    a#175#1#0: Box, 
    a#175#2#0: Box, 
    a#175#3#0: Box, 
    a#175#4#0: Box, 
    a#175#5#0: Box, 
    a#175#6#0: Box, 
    a#175#7#0: Box, 
    a#175#8#0: Box, 
    a#175#9#0: Box, 
    a#175#10#0: Box :: 
  { #_System._tuple#11._#Make11(a#175#0#0, 
      a#175#1#0, 
      a#175#2#0, 
      a#175#3#0, 
      a#175#4#0, 
      a#175#5#0, 
      a#175#6#0, 
      a#175#7#0, 
      a#175#8#0, 
      a#175#9#0, 
      a#175#10#0) } 
  BoxRank(a#175#7#0)
     < DtRank(#_System._tuple#11._#Make11(a#175#0#0, 
        a#175#1#0, 
        a#175#2#0, 
        a#175#3#0, 
        a#175#4#0, 
        a#175#5#0, 
        a#175#6#0, 
        a#175#7#0, 
        a#175#8#0, 
        a#175#9#0, 
        a#175#10#0)));

function _System.Tuple11._8(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#176#0#0: Box, 
    a#176#1#0: Box, 
    a#176#2#0: Box, 
    a#176#3#0: Box, 
    a#176#4#0: Box, 
    a#176#5#0: Box, 
    a#176#6#0: Box, 
    a#176#7#0: Box, 
    a#176#8#0: Box, 
    a#176#9#0: Box, 
    a#176#10#0: Box :: 
  { #_System._tuple#11._#Make11(a#176#0#0, 
      a#176#1#0, 
      a#176#2#0, 
      a#176#3#0, 
      a#176#4#0, 
      a#176#5#0, 
      a#176#6#0, 
      a#176#7#0, 
      a#176#8#0, 
      a#176#9#0, 
      a#176#10#0) } 
  _System.Tuple11._8(#_System._tuple#11._#Make11(a#176#0#0, 
        a#176#1#0, 
        a#176#2#0, 
        a#176#3#0, 
        a#176#4#0, 
        a#176#5#0, 
        a#176#6#0, 
        a#176#7#0, 
        a#176#8#0, 
        a#176#9#0, 
        a#176#10#0))
     == a#176#8#0);

// Inductive rank
axiom (forall a#177#0#0: Box, 
    a#177#1#0: Box, 
    a#177#2#0: Box, 
    a#177#3#0: Box, 
    a#177#4#0: Box, 
    a#177#5#0: Box, 
    a#177#6#0: Box, 
    a#177#7#0: Box, 
    a#177#8#0: Box, 
    a#177#9#0: Box, 
    a#177#10#0: Box :: 
  { #_System._tuple#11._#Make11(a#177#0#0, 
      a#177#1#0, 
      a#177#2#0, 
      a#177#3#0, 
      a#177#4#0, 
      a#177#5#0, 
      a#177#6#0, 
      a#177#7#0, 
      a#177#8#0, 
      a#177#9#0, 
      a#177#10#0) } 
  BoxRank(a#177#8#0)
     < DtRank(#_System._tuple#11._#Make11(a#177#0#0, 
        a#177#1#0, 
        a#177#2#0, 
        a#177#3#0, 
        a#177#4#0, 
        a#177#5#0, 
        a#177#6#0, 
        a#177#7#0, 
        a#177#8#0, 
        a#177#9#0, 
        a#177#10#0)));

function _System.Tuple11._9(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#178#0#0: Box, 
    a#178#1#0: Box, 
    a#178#2#0: Box, 
    a#178#3#0: Box, 
    a#178#4#0: Box, 
    a#178#5#0: Box, 
    a#178#6#0: Box, 
    a#178#7#0: Box, 
    a#178#8#0: Box, 
    a#178#9#0: Box, 
    a#178#10#0: Box :: 
  { #_System._tuple#11._#Make11(a#178#0#0, 
      a#178#1#0, 
      a#178#2#0, 
      a#178#3#0, 
      a#178#4#0, 
      a#178#5#0, 
      a#178#6#0, 
      a#178#7#0, 
      a#178#8#0, 
      a#178#9#0, 
      a#178#10#0) } 
  _System.Tuple11._9(#_System._tuple#11._#Make11(a#178#0#0, 
        a#178#1#0, 
        a#178#2#0, 
        a#178#3#0, 
        a#178#4#0, 
        a#178#5#0, 
        a#178#6#0, 
        a#178#7#0, 
        a#178#8#0, 
        a#178#9#0, 
        a#178#10#0))
     == a#178#9#0);

// Inductive rank
axiom (forall a#179#0#0: Box, 
    a#179#1#0: Box, 
    a#179#2#0: Box, 
    a#179#3#0: Box, 
    a#179#4#0: Box, 
    a#179#5#0: Box, 
    a#179#6#0: Box, 
    a#179#7#0: Box, 
    a#179#8#0: Box, 
    a#179#9#0: Box, 
    a#179#10#0: Box :: 
  { #_System._tuple#11._#Make11(a#179#0#0, 
      a#179#1#0, 
      a#179#2#0, 
      a#179#3#0, 
      a#179#4#0, 
      a#179#5#0, 
      a#179#6#0, 
      a#179#7#0, 
      a#179#8#0, 
      a#179#9#0, 
      a#179#10#0) } 
  BoxRank(a#179#9#0)
     < DtRank(#_System._tuple#11._#Make11(a#179#0#0, 
        a#179#1#0, 
        a#179#2#0, 
        a#179#3#0, 
        a#179#4#0, 
        a#179#5#0, 
        a#179#6#0, 
        a#179#7#0, 
        a#179#8#0, 
        a#179#9#0, 
        a#179#10#0)));

function _System.Tuple11._10(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#180#0#0: Box, 
    a#180#1#0: Box, 
    a#180#2#0: Box, 
    a#180#3#0: Box, 
    a#180#4#0: Box, 
    a#180#5#0: Box, 
    a#180#6#0: Box, 
    a#180#7#0: Box, 
    a#180#8#0: Box, 
    a#180#9#0: Box, 
    a#180#10#0: Box :: 
  { #_System._tuple#11._#Make11(a#180#0#0, 
      a#180#1#0, 
      a#180#2#0, 
      a#180#3#0, 
      a#180#4#0, 
      a#180#5#0, 
      a#180#6#0, 
      a#180#7#0, 
      a#180#8#0, 
      a#180#9#0, 
      a#180#10#0) } 
  _System.Tuple11._10(#_System._tuple#11._#Make11(a#180#0#0, 
        a#180#1#0, 
        a#180#2#0, 
        a#180#3#0, 
        a#180#4#0, 
        a#180#5#0, 
        a#180#6#0, 
        a#180#7#0, 
        a#180#8#0, 
        a#180#9#0, 
        a#180#10#0))
     == a#180#10#0);

// Inductive rank
axiom (forall a#181#0#0: Box, 
    a#181#1#0: Box, 
    a#181#2#0: Box, 
    a#181#3#0: Box, 
    a#181#4#0: Box, 
    a#181#5#0: Box, 
    a#181#6#0: Box, 
    a#181#7#0: Box, 
    a#181#8#0: Box, 
    a#181#9#0: Box, 
    a#181#10#0: Box :: 
  { #_System._tuple#11._#Make11(a#181#0#0, 
      a#181#1#0, 
      a#181#2#0, 
      a#181#3#0, 
      a#181#4#0, 
      a#181#5#0, 
      a#181#6#0, 
      a#181#7#0, 
      a#181#8#0, 
      a#181#9#0, 
      a#181#10#0) } 
  BoxRank(a#181#10#0)
     < DtRank(#_System._tuple#11._#Make11(a#181#0#0, 
        a#181#1#0, 
        a#181#2#0, 
        a#181#3#0, 
        a#181#4#0, 
        a#181#5#0, 
        a#181#6#0, 
        a#181#7#0, 
        a#181#8#0, 
        a#181#9#0, 
        a#181#10#0)));

// Depth-one case-split function
function $IsA#_System.Tuple11(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple11(d) } 
  $IsA#_System.Tuple11(d) ==> _System.Tuple11.___hMake11_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#11$T0: Ty, 
    _System._tuple#11$T1: Ty, 
    _System._tuple#11$T2: Ty, 
    _System._tuple#11$T3: Ty, 
    _System._tuple#11$T4: Ty, 
    _System._tuple#11$T5: Ty, 
    _System._tuple#11$T6: Ty, 
    _System._tuple#11$T7: Ty, 
    _System._tuple#11$T8: Ty, 
    _System._tuple#11$T9: Ty, 
    _System._tuple#11$T10: Ty, 
    d: DatatypeType :: 
  { _System.Tuple11.___hMake11_q(d), $Is(d, 
      Tclass._System.Tuple11(_System._tuple#11$T0, 
        _System._tuple#11$T1, 
        _System._tuple#11$T2, 
        _System._tuple#11$T3, 
        _System._tuple#11$T4, 
        _System._tuple#11$T5, 
        _System._tuple#11$T6, 
        _System._tuple#11$T7, 
        _System._tuple#11$T8, 
        _System._tuple#11$T9, 
        _System._tuple#11$T10)) } 
  $Is(d, 
      Tclass._System.Tuple11(_System._tuple#11$T0, 
        _System._tuple#11$T1, 
        _System._tuple#11$T2, 
        _System._tuple#11$T3, 
        _System._tuple#11$T4, 
        _System._tuple#11$T5, 
        _System._tuple#11$T6, 
        _System._tuple#11$T7, 
        _System._tuple#11$T8, 
        _System._tuple#11$T9, 
        _System._tuple#11$T10))
     ==> _System.Tuple11.___hMake11_q(d));

// Datatype extensional equality declaration
function _System.Tuple11#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#11._#Make11
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple11#Equal(a, b) } 
  _System.Tuple11#Equal(a, b)
     <==> _System.Tuple11._0(a) == _System.Tuple11._0(b)
       && _System.Tuple11._1(a) == _System.Tuple11._1(b)
       && _System.Tuple11._2(a) == _System.Tuple11._2(b)
       && _System.Tuple11._3(a) == _System.Tuple11._3(b)
       && _System.Tuple11._4(a) == _System.Tuple11._4(b)
       && _System.Tuple11._5(a) == _System.Tuple11._5(b)
       && _System.Tuple11._6(a) == _System.Tuple11._6(b)
       && _System.Tuple11._7(a) == _System.Tuple11._7(b)
       && _System.Tuple11._8(a) == _System.Tuple11._8(b)
       && _System.Tuple11._9(a) == _System.Tuple11._9(b)
       && _System.Tuple11._10(a) == _System.Tuple11._10(b));

// Datatype extensionality axiom: _System._tuple#11
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple11#Equal(a, b) } 
  _System.Tuple11#Equal(a, b) <==> a == b);

const unique class._System.Tuple11: ClassName;

// Constructor function declaration
function #_System._tuple#12._#Make12(Box, Box, Box, Box, Box, Box, Box, Box, Box, Box, Box, Box) : DatatypeType;

const unique ##_System._tuple#12._#Make12: DtCtorId
uses {
// Constructor identifier
axiom (forall a#182#0#0: Box, 
    a#182#1#0: Box, 
    a#182#2#0: Box, 
    a#182#3#0: Box, 
    a#182#4#0: Box, 
    a#182#5#0: Box, 
    a#182#6#0: Box, 
    a#182#7#0: Box, 
    a#182#8#0: Box, 
    a#182#9#0: Box, 
    a#182#10#0: Box, 
    a#182#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#182#0#0, 
      a#182#1#0, 
      a#182#2#0, 
      a#182#3#0, 
      a#182#4#0, 
      a#182#5#0, 
      a#182#6#0, 
      a#182#7#0, 
      a#182#8#0, 
      a#182#9#0, 
      a#182#10#0, 
      a#182#11#0) } 
  DatatypeCtorId(#_System._tuple#12._#Make12(a#182#0#0, 
        a#182#1#0, 
        a#182#2#0, 
        a#182#3#0, 
        a#182#4#0, 
        a#182#5#0, 
        a#182#6#0, 
        a#182#7#0, 
        a#182#8#0, 
        a#182#9#0, 
        a#182#10#0, 
        a#182#11#0))
     == ##_System._tuple#12._#Make12);
}

function _System.Tuple12.___hMake12_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple12.___hMake12_q(d) } 
  _System.Tuple12.___hMake12_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#12._#Make12);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple12.___hMake12_q(d) } 
  _System.Tuple12.___hMake12_q(d)
     ==> (exists a#183#0#0: Box, 
        a#183#1#0: Box, 
        a#183#2#0: Box, 
        a#183#3#0: Box, 
        a#183#4#0: Box, 
        a#183#5#0: Box, 
        a#183#6#0: Box, 
        a#183#7#0: Box, 
        a#183#8#0: Box, 
        a#183#9#0: Box, 
        a#183#10#0: Box, 
        a#183#11#0: Box :: 
      d
         == #_System._tuple#12._#Make12(a#183#0#0, 
          a#183#1#0, 
          a#183#2#0, 
          a#183#3#0, 
          a#183#4#0, 
          a#183#5#0, 
          a#183#6#0, 
          a#183#7#0, 
          a#183#8#0, 
          a#183#9#0, 
          a#183#10#0, 
          a#183#11#0)));

function Tclass._System.Tuple12(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.Tuple12: TyTag;

// Tclass._System.Tuple12 Tag
axiom (forall _System._tuple#12$T0: Ty, 
    _System._tuple#12$T1: Ty, 
    _System._tuple#12$T2: Ty, 
    _System._tuple#12$T3: Ty, 
    _System._tuple#12$T4: Ty, 
    _System._tuple#12$T5: Ty, 
    _System._tuple#12$T6: Ty, 
    _System._tuple#12$T7: Ty, 
    _System._tuple#12$T8: Ty, 
    _System._tuple#12$T9: Ty, 
    _System._tuple#12$T10: Ty, 
    _System._tuple#12$T11: Ty :: 
  { Tclass._System.Tuple12(_System._tuple#12$T0, 
      _System._tuple#12$T1, 
      _System._tuple#12$T2, 
      _System._tuple#12$T3, 
      _System._tuple#12$T4, 
      _System._tuple#12$T5, 
      _System._tuple#12$T6, 
      _System._tuple#12$T7, 
      _System._tuple#12$T8, 
      _System._tuple#12$T9, 
      _System._tuple#12$T10, 
      _System._tuple#12$T11) } 
  Tag(Tclass._System.Tuple12(_System._tuple#12$T0, 
          _System._tuple#12$T1, 
          _System._tuple#12$T2, 
          _System._tuple#12$T3, 
          _System._tuple#12$T4, 
          _System._tuple#12$T5, 
          _System._tuple#12$T6, 
          _System._tuple#12$T7, 
          _System._tuple#12$T8, 
          _System._tuple#12$T9, 
          _System._tuple#12$T10, 
          _System._tuple#12$T11))
       == Tagclass._System.Tuple12
     && TagFamily(Tclass._System.Tuple12(_System._tuple#12$T0, 
          _System._tuple#12$T1, 
          _System._tuple#12$T2, 
          _System._tuple#12$T3, 
          _System._tuple#12$T4, 
          _System._tuple#12$T5, 
          _System._tuple#12$T6, 
          _System._tuple#12$T7, 
          _System._tuple#12$T8, 
          _System._tuple#12$T9, 
          _System._tuple#12$T10, 
          _System._tuple#12$T11))
       == tytagFamily$_tuple#12);

function Tclass._System.Tuple12_0(Ty) : Ty;

// Tclass._System.Tuple12 injectivity 0
axiom (forall _System._tuple#12$T0: Ty, 
    _System._tuple#12$T1: Ty, 
    _System._tuple#12$T2: Ty, 
    _System._tuple#12$T3: Ty, 
    _System._tuple#12$T4: Ty, 
    _System._tuple#12$T5: Ty, 
    _System._tuple#12$T6: Ty, 
    _System._tuple#12$T7: Ty, 
    _System._tuple#12$T8: Ty, 
    _System._tuple#12$T9: Ty, 
    _System._tuple#12$T10: Ty, 
    _System._tuple#12$T11: Ty :: 
  { Tclass._System.Tuple12(_System._tuple#12$T0, 
      _System._tuple#12$T1, 
      _System._tuple#12$T2, 
      _System._tuple#12$T3, 
      _System._tuple#12$T4, 
      _System._tuple#12$T5, 
      _System._tuple#12$T6, 
      _System._tuple#12$T7, 
      _System._tuple#12$T8, 
      _System._tuple#12$T9, 
      _System._tuple#12$T10, 
      _System._tuple#12$T11) } 
  Tclass._System.Tuple12_0(Tclass._System.Tuple12(_System._tuple#12$T0, 
        _System._tuple#12$T1, 
        _System._tuple#12$T2, 
        _System._tuple#12$T3, 
        _System._tuple#12$T4, 
        _System._tuple#12$T5, 
        _System._tuple#12$T6, 
        _System._tuple#12$T7, 
        _System._tuple#12$T8, 
        _System._tuple#12$T9, 
        _System._tuple#12$T10, 
        _System._tuple#12$T11))
     == _System._tuple#12$T0);

function Tclass._System.Tuple12_1(Ty) : Ty;

// Tclass._System.Tuple12 injectivity 1
axiom (forall _System._tuple#12$T0: Ty, 
    _System._tuple#12$T1: Ty, 
    _System._tuple#12$T2: Ty, 
    _System._tuple#12$T3: Ty, 
    _System._tuple#12$T4: Ty, 
    _System._tuple#12$T5: Ty, 
    _System._tuple#12$T6: Ty, 
    _System._tuple#12$T7: Ty, 
    _System._tuple#12$T8: Ty, 
    _System._tuple#12$T9: Ty, 
    _System._tuple#12$T10: Ty, 
    _System._tuple#12$T11: Ty :: 
  { Tclass._System.Tuple12(_System._tuple#12$T0, 
      _System._tuple#12$T1, 
      _System._tuple#12$T2, 
      _System._tuple#12$T3, 
      _System._tuple#12$T4, 
      _System._tuple#12$T5, 
      _System._tuple#12$T6, 
      _System._tuple#12$T7, 
      _System._tuple#12$T8, 
      _System._tuple#12$T9, 
      _System._tuple#12$T10, 
      _System._tuple#12$T11) } 
  Tclass._System.Tuple12_1(Tclass._System.Tuple12(_System._tuple#12$T0, 
        _System._tuple#12$T1, 
        _System._tuple#12$T2, 
        _System._tuple#12$T3, 
        _System._tuple#12$T4, 
        _System._tuple#12$T5, 
        _System._tuple#12$T6, 
        _System._tuple#12$T7, 
        _System._tuple#12$T8, 
        _System._tuple#12$T9, 
        _System._tuple#12$T10, 
        _System._tuple#12$T11))
     == _System._tuple#12$T1);

function Tclass._System.Tuple12_2(Ty) : Ty;

// Tclass._System.Tuple12 injectivity 2
axiom (forall _System._tuple#12$T0: Ty, 
    _System._tuple#12$T1: Ty, 
    _System._tuple#12$T2: Ty, 
    _System._tuple#12$T3: Ty, 
    _System._tuple#12$T4: Ty, 
    _System._tuple#12$T5: Ty, 
    _System._tuple#12$T6: Ty, 
    _System._tuple#12$T7: Ty, 
    _System._tuple#12$T8: Ty, 
    _System._tuple#12$T9: Ty, 
    _System._tuple#12$T10: Ty, 
    _System._tuple#12$T11: Ty :: 
  { Tclass._System.Tuple12(_System._tuple#12$T0, 
      _System._tuple#12$T1, 
      _System._tuple#12$T2, 
      _System._tuple#12$T3, 
      _System._tuple#12$T4, 
      _System._tuple#12$T5, 
      _System._tuple#12$T6, 
      _System._tuple#12$T7, 
      _System._tuple#12$T8, 
      _System._tuple#12$T9, 
      _System._tuple#12$T10, 
      _System._tuple#12$T11) } 
  Tclass._System.Tuple12_2(Tclass._System.Tuple12(_System._tuple#12$T0, 
        _System._tuple#12$T1, 
        _System._tuple#12$T2, 
        _System._tuple#12$T3, 
        _System._tuple#12$T4, 
        _System._tuple#12$T5, 
        _System._tuple#12$T6, 
        _System._tuple#12$T7, 
        _System._tuple#12$T8, 
        _System._tuple#12$T9, 
        _System._tuple#12$T10, 
        _System._tuple#12$T11))
     == _System._tuple#12$T2);

function Tclass._System.Tuple12_3(Ty) : Ty;

// Tclass._System.Tuple12 injectivity 3
axiom (forall _System._tuple#12$T0: Ty, 
    _System._tuple#12$T1: Ty, 
    _System._tuple#12$T2: Ty, 
    _System._tuple#12$T3: Ty, 
    _System._tuple#12$T4: Ty, 
    _System._tuple#12$T5: Ty, 
    _System._tuple#12$T6: Ty, 
    _System._tuple#12$T7: Ty, 
    _System._tuple#12$T8: Ty, 
    _System._tuple#12$T9: Ty, 
    _System._tuple#12$T10: Ty, 
    _System._tuple#12$T11: Ty :: 
  { Tclass._System.Tuple12(_System._tuple#12$T0, 
      _System._tuple#12$T1, 
      _System._tuple#12$T2, 
      _System._tuple#12$T3, 
      _System._tuple#12$T4, 
      _System._tuple#12$T5, 
      _System._tuple#12$T6, 
      _System._tuple#12$T7, 
      _System._tuple#12$T8, 
      _System._tuple#12$T9, 
      _System._tuple#12$T10, 
      _System._tuple#12$T11) } 
  Tclass._System.Tuple12_3(Tclass._System.Tuple12(_System._tuple#12$T0, 
        _System._tuple#12$T1, 
        _System._tuple#12$T2, 
        _System._tuple#12$T3, 
        _System._tuple#12$T4, 
        _System._tuple#12$T5, 
        _System._tuple#12$T6, 
        _System._tuple#12$T7, 
        _System._tuple#12$T8, 
        _System._tuple#12$T9, 
        _System._tuple#12$T10, 
        _System._tuple#12$T11))
     == _System._tuple#12$T3);

function Tclass._System.Tuple12_4(Ty) : Ty;

// Tclass._System.Tuple12 injectivity 4
axiom (forall _System._tuple#12$T0: Ty, 
    _System._tuple#12$T1: Ty, 
    _System._tuple#12$T2: Ty, 
    _System._tuple#12$T3: Ty, 
    _System._tuple#12$T4: Ty, 
    _System._tuple#12$T5: Ty, 
    _System._tuple#12$T6: Ty, 
    _System._tuple#12$T7: Ty, 
    _System._tuple#12$T8: Ty, 
    _System._tuple#12$T9: Ty, 
    _System._tuple#12$T10: Ty, 
    _System._tuple#12$T11: Ty :: 
  { Tclass._System.Tuple12(_System._tuple#12$T0, 
      _System._tuple#12$T1, 
      _System._tuple#12$T2, 
      _System._tuple#12$T3, 
      _System._tuple#12$T4, 
      _System._tuple#12$T5, 
      _System._tuple#12$T6, 
      _System._tuple#12$T7, 
      _System._tuple#12$T8, 
      _System._tuple#12$T9, 
      _System._tuple#12$T10, 
      _System._tuple#12$T11) } 
  Tclass._System.Tuple12_4(Tclass._System.Tuple12(_System._tuple#12$T0, 
        _System._tuple#12$T1, 
        _System._tuple#12$T2, 
        _System._tuple#12$T3, 
        _System._tuple#12$T4, 
        _System._tuple#12$T5, 
        _System._tuple#12$T6, 
        _System._tuple#12$T7, 
        _System._tuple#12$T8, 
        _System._tuple#12$T9, 
        _System._tuple#12$T10, 
        _System._tuple#12$T11))
     == _System._tuple#12$T4);

function Tclass._System.Tuple12_5(Ty) : Ty;

// Tclass._System.Tuple12 injectivity 5
axiom (forall _System._tuple#12$T0: Ty, 
    _System._tuple#12$T1: Ty, 
    _System._tuple#12$T2: Ty, 
    _System._tuple#12$T3: Ty, 
    _System._tuple#12$T4: Ty, 
    _System._tuple#12$T5: Ty, 
    _System._tuple#12$T6: Ty, 
    _System._tuple#12$T7: Ty, 
    _System._tuple#12$T8: Ty, 
    _System._tuple#12$T9: Ty, 
    _System._tuple#12$T10: Ty, 
    _System._tuple#12$T11: Ty :: 
  { Tclass._System.Tuple12(_System._tuple#12$T0, 
      _System._tuple#12$T1, 
      _System._tuple#12$T2, 
      _System._tuple#12$T3, 
      _System._tuple#12$T4, 
      _System._tuple#12$T5, 
      _System._tuple#12$T6, 
      _System._tuple#12$T7, 
      _System._tuple#12$T8, 
      _System._tuple#12$T9, 
      _System._tuple#12$T10, 
      _System._tuple#12$T11) } 
  Tclass._System.Tuple12_5(Tclass._System.Tuple12(_System._tuple#12$T0, 
        _System._tuple#12$T1, 
        _System._tuple#12$T2, 
        _System._tuple#12$T3, 
        _System._tuple#12$T4, 
        _System._tuple#12$T5, 
        _System._tuple#12$T6, 
        _System._tuple#12$T7, 
        _System._tuple#12$T8, 
        _System._tuple#12$T9, 
        _System._tuple#12$T10, 
        _System._tuple#12$T11))
     == _System._tuple#12$T5);

function Tclass._System.Tuple12_6(Ty) : Ty;

// Tclass._System.Tuple12 injectivity 6
axiom (forall _System._tuple#12$T0: Ty, 
    _System._tuple#12$T1: Ty, 
    _System._tuple#12$T2: Ty, 
    _System._tuple#12$T3: Ty, 
    _System._tuple#12$T4: Ty, 
    _System._tuple#12$T5: Ty, 
    _System._tuple#12$T6: Ty, 
    _System._tuple#12$T7: Ty, 
    _System._tuple#12$T8: Ty, 
    _System._tuple#12$T9: Ty, 
    _System._tuple#12$T10: Ty, 
    _System._tuple#12$T11: Ty :: 
  { Tclass._System.Tuple12(_System._tuple#12$T0, 
      _System._tuple#12$T1, 
      _System._tuple#12$T2, 
      _System._tuple#12$T3, 
      _System._tuple#12$T4, 
      _System._tuple#12$T5, 
      _System._tuple#12$T6, 
      _System._tuple#12$T7, 
      _System._tuple#12$T8, 
      _System._tuple#12$T9, 
      _System._tuple#12$T10, 
      _System._tuple#12$T11) } 
  Tclass._System.Tuple12_6(Tclass._System.Tuple12(_System._tuple#12$T0, 
        _System._tuple#12$T1, 
        _System._tuple#12$T2, 
        _System._tuple#12$T3, 
        _System._tuple#12$T4, 
        _System._tuple#12$T5, 
        _System._tuple#12$T6, 
        _System._tuple#12$T7, 
        _System._tuple#12$T8, 
        _System._tuple#12$T9, 
        _System._tuple#12$T10, 
        _System._tuple#12$T11))
     == _System._tuple#12$T6);

function Tclass._System.Tuple12_7(Ty) : Ty;

// Tclass._System.Tuple12 injectivity 7
axiom (forall _System._tuple#12$T0: Ty, 
    _System._tuple#12$T1: Ty, 
    _System._tuple#12$T2: Ty, 
    _System._tuple#12$T3: Ty, 
    _System._tuple#12$T4: Ty, 
    _System._tuple#12$T5: Ty, 
    _System._tuple#12$T6: Ty, 
    _System._tuple#12$T7: Ty, 
    _System._tuple#12$T8: Ty, 
    _System._tuple#12$T9: Ty, 
    _System._tuple#12$T10: Ty, 
    _System._tuple#12$T11: Ty :: 
  { Tclass._System.Tuple12(_System._tuple#12$T0, 
      _System._tuple#12$T1, 
      _System._tuple#12$T2, 
      _System._tuple#12$T3, 
      _System._tuple#12$T4, 
      _System._tuple#12$T5, 
      _System._tuple#12$T6, 
      _System._tuple#12$T7, 
      _System._tuple#12$T8, 
      _System._tuple#12$T9, 
      _System._tuple#12$T10, 
      _System._tuple#12$T11) } 
  Tclass._System.Tuple12_7(Tclass._System.Tuple12(_System._tuple#12$T0, 
        _System._tuple#12$T1, 
        _System._tuple#12$T2, 
        _System._tuple#12$T3, 
        _System._tuple#12$T4, 
        _System._tuple#12$T5, 
        _System._tuple#12$T6, 
        _System._tuple#12$T7, 
        _System._tuple#12$T8, 
        _System._tuple#12$T9, 
        _System._tuple#12$T10, 
        _System._tuple#12$T11))
     == _System._tuple#12$T7);

function Tclass._System.Tuple12_8(Ty) : Ty;

// Tclass._System.Tuple12 injectivity 8
axiom (forall _System._tuple#12$T0: Ty, 
    _System._tuple#12$T1: Ty, 
    _System._tuple#12$T2: Ty, 
    _System._tuple#12$T3: Ty, 
    _System._tuple#12$T4: Ty, 
    _System._tuple#12$T5: Ty, 
    _System._tuple#12$T6: Ty, 
    _System._tuple#12$T7: Ty, 
    _System._tuple#12$T8: Ty, 
    _System._tuple#12$T9: Ty, 
    _System._tuple#12$T10: Ty, 
    _System._tuple#12$T11: Ty :: 
  { Tclass._System.Tuple12(_System._tuple#12$T0, 
      _System._tuple#12$T1, 
      _System._tuple#12$T2, 
      _System._tuple#12$T3, 
      _System._tuple#12$T4, 
      _System._tuple#12$T5, 
      _System._tuple#12$T6, 
      _System._tuple#12$T7, 
      _System._tuple#12$T8, 
      _System._tuple#12$T9, 
      _System._tuple#12$T10, 
      _System._tuple#12$T11) } 
  Tclass._System.Tuple12_8(Tclass._System.Tuple12(_System._tuple#12$T0, 
        _System._tuple#12$T1, 
        _System._tuple#12$T2, 
        _System._tuple#12$T3, 
        _System._tuple#12$T4, 
        _System._tuple#12$T5, 
        _System._tuple#12$T6, 
        _System._tuple#12$T7, 
        _System._tuple#12$T8, 
        _System._tuple#12$T9, 
        _System._tuple#12$T10, 
        _System._tuple#12$T11))
     == _System._tuple#12$T8);

function Tclass._System.Tuple12_9(Ty) : Ty;

// Tclass._System.Tuple12 injectivity 9
axiom (forall _System._tuple#12$T0: Ty, 
    _System._tuple#12$T1: Ty, 
    _System._tuple#12$T2: Ty, 
    _System._tuple#12$T3: Ty, 
    _System._tuple#12$T4: Ty, 
    _System._tuple#12$T5: Ty, 
    _System._tuple#12$T6: Ty, 
    _System._tuple#12$T7: Ty, 
    _System._tuple#12$T8: Ty, 
    _System._tuple#12$T9: Ty, 
    _System._tuple#12$T10: Ty, 
    _System._tuple#12$T11: Ty :: 
  { Tclass._System.Tuple12(_System._tuple#12$T0, 
      _System._tuple#12$T1, 
      _System._tuple#12$T2, 
      _System._tuple#12$T3, 
      _System._tuple#12$T4, 
      _System._tuple#12$T5, 
      _System._tuple#12$T6, 
      _System._tuple#12$T7, 
      _System._tuple#12$T8, 
      _System._tuple#12$T9, 
      _System._tuple#12$T10, 
      _System._tuple#12$T11) } 
  Tclass._System.Tuple12_9(Tclass._System.Tuple12(_System._tuple#12$T0, 
        _System._tuple#12$T1, 
        _System._tuple#12$T2, 
        _System._tuple#12$T3, 
        _System._tuple#12$T4, 
        _System._tuple#12$T5, 
        _System._tuple#12$T6, 
        _System._tuple#12$T7, 
        _System._tuple#12$T8, 
        _System._tuple#12$T9, 
        _System._tuple#12$T10, 
        _System._tuple#12$T11))
     == _System._tuple#12$T9);

function Tclass._System.Tuple12_10(Ty) : Ty;

// Tclass._System.Tuple12 injectivity 10
axiom (forall _System._tuple#12$T0: Ty, 
    _System._tuple#12$T1: Ty, 
    _System._tuple#12$T2: Ty, 
    _System._tuple#12$T3: Ty, 
    _System._tuple#12$T4: Ty, 
    _System._tuple#12$T5: Ty, 
    _System._tuple#12$T6: Ty, 
    _System._tuple#12$T7: Ty, 
    _System._tuple#12$T8: Ty, 
    _System._tuple#12$T9: Ty, 
    _System._tuple#12$T10: Ty, 
    _System._tuple#12$T11: Ty :: 
  { Tclass._System.Tuple12(_System._tuple#12$T0, 
      _System._tuple#12$T1, 
      _System._tuple#12$T2, 
      _System._tuple#12$T3, 
      _System._tuple#12$T4, 
      _System._tuple#12$T5, 
      _System._tuple#12$T6, 
      _System._tuple#12$T7, 
      _System._tuple#12$T8, 
      _System._tuple#12$T9, 
      _System._tuple#12$T10, 
      _System._tuple#12$T11) } 
  Tclass._System.Tuple12_10(Tclass._System.Tuple12(_System._tuple#12$T0, 
        _System._tuple#12$T1, 
        _System._tuple#12$T2, 
        _System._tuple#12$T3, 
        _System._tuple#12$T4, 
        _System._tuple#12$T5, 
        _System._tuple#12$T6, 
        _System._tuple#12$T7, 
        _System._tuple#12$T8, 
        _System._tuple#12$T9, 
        _System._tuple#12$T10, 
        _System._tuple#12$T11))
     == _System._tuple#12$T10);

function Tclass._System.Tuple12_11(Ty) : Ty;

// Tclass._System.Tuple12 injectivity 11
axiom (forall _System._tuple#12$T0: Ty, 
    _System._tuple#12$T1: Ty, 
    _System._tuple#12$T2: Ty, 
    _System._tuple#12$T3: Ty, 
    _System._tuple#12$T4: Ty, 
    _System._tuple#12$T5: Ty, 
    _System._tuple#12$T6: Ty, 
    _System._tuple#12$T7: Ty, 
    _System._tuple#12$T8: Ty, 
    _System._tuple#12$T9: Ty, 
    _System._tuple#12$T10: Ty, 
    _System._tuple#12$T11: Ty :: 
  { Tclass._System.Tuple12(_System._tuple#12$T0, 
      _System._tuple#12$T1, 
      _System._tuple#12$T2, 
      _System._tuple#12$T3, 
      _System._tuple#12$T4, 
      _System._tuple#12$T5, 
      _System._tuple#12$T6, 
      _System._tuple#12$T7, 
      _System._tuple#12$T8, 
      _System._tuple#12$T9, 
      _System._tuple#12$T10, 
      _System._tuple#12$T11) } 
  Tclass._System.Tuple12_11(Tclass._System.Tuple12(_System._tuple#12$T0, 
        _System._tuple#12$T1, 
        _System._tuple#12$T2, 
        _System._tuple#12$T3, 
        _System._tuple#12$T4, 
        _System._tuple#12$T5, 
        _System._tuple#12$T6, 
        _System._tuple#12$T7, 
        _System._tuple#12$T8, 
        _System._tuple#12$T9, 
        _System._tuple#12$T10, 
        _System._tuple#12$T11))
     == _System._tuple#12$T11);

// Box/unbox axiom for Tclass._System.Tuple12
axiom (forall _System._tuple#12$T0: Ty, 
    _System._tuple#12$T1: Ty, 
    _System._tuple#12$T2: Ty, 
    _System._tuple#12$T3: Ty, 
    _System._tuple#12$T4: Ty, 
    _System._tuple#12$T5: Ty, 
    _System._tuple#12$T6: Ty, 
    _System._tuple#12$T7: Ty, 
    _System._tuple#12$T8: Ty, 
    _System._tuple#12$T9: Ty, 
    _System._tuple#12$T10: Ty, 
    _System._tuple#12$T11: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.Tuple12(_System._tuple#12$T0, 
        _System._tuple#12$T1, 
        _System._tuple#12$T2, 
        _System._tuple#12$T3, 
        _System._tuple#12$T4, 
        _System._tuple#12$T5, 
        _System._tuple#12$T6, 
        _System._tuple#12$T7, 
        _System._tuple#12$T8, 
        _System._tuple#12$T9, 
        _System._tuple#12$T10, 
        _System._tuple#12$T11)) } 
  $IsBox(bx, 
      Tclass._System.Tuple12(_System._tuple#12$T0, 
        _System._tuple#12$T1, 
        _System._tuple#12$T2, 
        _System._tuple#12$T3, 
        _System._tuple#12$T4, 
        _System._tuple#12$T5, 
        _System._tuple#12$T6, 
        _System._tuple#12$T7, 
        _System._tuple#12$T8, 
        _System._tuple#12$T9, 
        _System._tuple#12$T10, 
        _System._tuple#12$T11))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple12(_System._tuple#12$T0, 
          _System._tuple#12$T1, 
          _System._tuple#12$T2, 
          _System._tuple#12$T3, 
          _System._tuple#12$T4, 
          _System._tuple#12$T5, 
          _System._tuple#12$T6, 
          _System._tuple#12$T7, 
          _System._tuple#12$T8, 
          _System._tuple#12$T9, 
          _System._tuple#12$T10, 
          _System._tuple#12$T11)));

// Constructor $Is
axiom (forall _System._tuple#12$T0: Ty, 
    _System._tuple#12$T1: Ty, 
    _System._tuple#12$T2: Ty, 
    _System._tuple#12$T3: Ty, 
    _System._tuple#12$T4: Ty, 
    _System._tuple#12$T5: Ty, 
    _System._tuple#12$T6: Ty, 
    _System._tuple#12$T7: Ty, 
    _System._tuple#12$T8: Ty, 
    _System._tuple#12$T9: Ty, 
    _System._tuple#12$T10: Ty, 
    _System._tuple#12$T11: Ty, 
    a#184#0#0: Box, 
    a#184#1#0: Box, 
    a#184#2#0: Box, 
    a#184#3#0: Box, 
    a#184#4#0: Box, 
    a#184#5#0: Box, 
    a#184#6#0: Box, 
    a#184#7#0: Box, 
    a#184#8#0: Box, 
    a#184#9#0: Box, 
    a#184#10#0: Box, 
    a#184#11#0: Box :: 
  { $Is(#_System._tuple#12._#Make12(a#184#0#0, 
        a#184#1#0, 
        a#184#2#0, 
        a#184#3#0, 
        a#184#4#0, 
        a#184#5#0, 
        a#184#6#0, 
        a#184#7#0, 
        a#184#8#0, 
        a#184#9#0, 
        a#184#10#0, 
        a#184#11#0), 
      Tclass._System.Tuple12(_System._tuple#12$T0, 
        _System._tuple#12$T1, 
        _System._tuple#12$T2, 
        _System._tuple#12$T3, 
        _System._tuple#12$T4, 
        _System._tuple#12$T5, 
        _System._tuple#12$T6, 
        _System._tuple#12$T7, 
        _System._tuple#12$T8, 
        _System._tuple#12$T9, 
        _System._tuple#12$T10, 
        _System._tuple#12$T11)) } 
  $Is(#_System._tuple#12._#Make12(a#184#0#0, 
        a#184#1#0, 
        a#184#2#0, 
        a#184#3#0, 
        a#184#4#0, 
        a#184#5#0, 
        a#184#6#0, 
        a#184#7#0, 
        a#184#8#0, 
        a#184#9#0, 
        a#184#10#0, 
        a#184#11#0), 
      Tclass._System.Tuple12(_System._tuple#12$T0, 
        _System._tuple#12$T1, 
        _System._tuple#12$T2, 
        _System._tuple#12$T3, 
        _System._tuple#12$T4, 
        _System._tuple#12$T5, 
        _System._tuple#12$T6, 
        _System._tuple#12$T7, 
        _System._tuple#12$T8, 
        _System._tuple#12$T9, 
        _System._tuple#12$T10, 
        _System._tuple#12$T11))
     <==> $IsBox(a#184#0#0, _System._tuple#12$T0)
       && $IsBox(a#184#1#0, _System._tuple#12$T1)
       && $IsBox(a#184#2#0, _System._tuple#12$T2)
       && $IsBox(a#184#3#0, _System._tuple#12$T3)
       && $IsBox(a#184#4#0, _System._tuple#12$T4)
       && $IsBox(a#184#5#0, _System._tuple#12$T5)
       && $IsBox(a#184#6#0, _System._tuple#12$T6)
       && $IsBox(a#184#7#0, _System._tuple#12$T7)
       && $IsBox(a#184#8#0, _System._tuple#12$T8)
       && $IsBox(a#184#9#0, _System._tuple#12$T9)
       && $IsBox(a#184#10#0, _System._tuple#12$T10)
       && $IsBox(a#184#11#0, _System._tuple#12$T11));

// Constructor $IsAlloc
axiom (forall _System._tuple#12$T0: Ty, 
    _System._tuple#12$T1: Ty, 
    _System._tuple#12$T2: Ty, 
    _System._tuple#12$T3: Ty, 
    _System._tuple#12$T4: Ty, 
    _System._tuple#12$T5: Ty, 
    _System._tuple#12$T6: Ty, 
    _System._tuple#12$T7: Ty, 
    _System._tuple#12$T8: Ty, 
    _System._tuple#12$T9: Ty, 
    _System._tuple#12$T10: Ty, 
    _System._tuple#12$T11: Ty, 
    a#184#0#0: Box, 
    a#184#1#0: Box, 
    a#184#2#0: Box, 
    a#184#3#0: Box, 
    a#184#4#0: Box, 
    a#184#5#0: Box, 
    a#184#6#0: Box, 
    a#184#7#0: Box, 
    a#184#8#0: Box, 
    a#184#9#0: Box, 
    a#184#10#0: Box, 
    a#184#11#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#12._#Make12(a#184#0#0, 
        a#184#1#0, 
        a#184#2#0, 
        a#184#3#0, 
        a#184#4#0, 
        a#184#5#0, 
        a#184#6#0, 
        a#184#7#0, 
        a#184#8#0, 
        a#184#9#0, 
        a#184#10#0, 
        a#184#11#0), 
      Tclass._System.Tuple12(_System._tuple#12$T0, 
        _System._tuple#12$T1, 
        _System._tuple#12$T2, 
        _System._tuple#12$T3, 
        _System._tuple#12$T4, 
        _System._tuple#12$T5, 
        _System._tuple#12$T6, 
        _System._tuple#12$T7, 
        _System._tuple#12$T8, 
        _System._tuple#12$T9, 
        _System._tuple#12$T10, 
        _System._tuple#12$T11), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#12._#Make12(a#184#0#0, 
          a#184#1#0, 
          a#184#2#0, 
          a#184#3#0, 
          a#184#4#0, 
          a#184#5#0, 
          a#184#6#0, 
          a#184#7#0, 
          a#184#8#0, 
          a#184#9#0, 
          a#184#10#0, 
          a#184#11#0), 
        Tclass._System.Tuple12(_System._tuple#12$T0, 
          _System._tuple#12$T1, 
          _System._tuple#12$T2, 
          _System._tuple#12$T3, 
          _System._tuple#12$T4, 
          _System._tuple#12$T5, 
          _System._tuple#12$T6, 
          _System._tuple#12$T7, 
          _System._tuple#12$T8, 
          _System._tuple#12$T9, 
          _System._tuple#12$T10, 
          _System._tuple#12$T11), 
        $h)
       <==> $IsAllocBox(a#184#0#0, _System._tuple#12$T0, $h)
         && $IsAllocBox(a#184#1#0, _System._tuple#12$T1, $h)
         && $IsAllocBox(a#184#2#0, _System._tuple#12$T2, $h)
         && $IsAllocBox(a#184#3#0, _System._tuple#12$T3, $h)
         && $IsAllocBox(a#184#4#0, _System._tuple#12$T4, $h)
         && $IsAllocBox(a#184#5#0, _System._tuple#12$T5, $h)
         && $IsAllocBox(a#184#6#0, _System._tuple#12$T6, $h)
         && $IsAllocBox(a#184#7#0, _System._tuple#12$T7, $h)
         && $IsAllocBox(a#184#8#0, _System._tuple#12$T8, $h)
         && $IsAllocBox(a#184#9#0, _System._tuple#12$T9, $h)
         && $IsAllocBox(a#184#10#0, _System._tuple#12$T10, $h)
         && $IsAllocBox(a#184#11#0, _System._tuple#12$T11, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#12$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple12._0(d), _System._tuple#12$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple12.___hMake12_q(d)
       && (exists _System._tuple#12$T1: Ty, 
          _System._tuple#12$T2: Ty, 
          _System._tuple#12$T3: Ty, 
          _System._tuple#12$T4: Ty, 
          _System._tuple#12$T5: Ty, 
          _System._tuple#12$T6: Ty, 
          _System._tuple#12$T7: Ty, 
          _System._tuple#12$T8: Ty, 
          _System._tuple#12$T9: Ty, 
          _System._tuple#12$T10: Ty, 
          _System._tuple#12$T11: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple12(_System._tuple#12$T0, 
              _System._tuple#12$T1, 
              _System._tuple#12$T2, 
              _System._tuple#12$T3, 
              _System._tuple#12$T4, 
              _System._tuple#12$T5, 
              _System._tuple#12$T6, 
              _System._tuple#12$T7, 
              _System._tuple#12$T8, 
              _System._tuple#12$T9, 
              _System._tuple#12$T10, 
              _System._tuple#12$T11), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple12(_System._tuple#12$T0, 
            _System._tuple#12$T1, 
            _System._tuple#12$T2, 
            _System._tuple#12$T3, 
            _System._tuple#12$T4, 
            _System._tuple#12$T5, 
            _System._tuple#12$T6, 
            _System._tuple#12$T7, 
            _System._tuple#12$T8, 
            _System._tuple#12$T9, 
            _System._tuple#12$T10, 
            _System._tuple#12$T11), 
          $h))
     ==> $IsAllocBox(_System.Tuple12._0(d), _System._tuple#12$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#12$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple12._1(d), _System._tuple#12$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple12.___hMake12_q(d)
       && (exists _System._tuple#12$T0: Ty, 
          _System._tuple#12$T2: Ty, 
          _System._tuple#12$T3: Ty, 
          _System._tuple#12$T4: Ty, 
          _System._tuple#12$T5: Ty, 
          _System._tuple#12$T6: Ty, 
          _System._tuple#12$T7: Ty, 
          _System._tuple#12$T8: Ty, 
          _System._tuple#12$T9: Ty, 
          _System._tuple#12$T10: Ty, 
          _System._tuple#12$T11: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple12(_System._tuple#12$T0, 
              _System._tuple#12$T1, 
              _System._tuple#12$T2, 
              _System._tuple#12$T3, 
              _System._tuple#12$T4, 
              _System._tuple#12$T5, 
              _System._tuple#12$T6, 
              _System._tuple#12$T7, 
              _System._tuple#12$T8, 
              _System._tuple#12$T9, 
              _System._tuple#12$T10, 
              _System._tuple#12$T11), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple12(_System._tuple#12$T0, 
            _System._tuple#12$T1, 
            _System._tuple#12$T2, 
            _System._tuple#12$T3, 
            _System._tuple#12$T4, 
            _System._tuple#12$T5, 
            _System._tuple#12$T6, 
            _System._tuple#12$T7, 
            _System._tuple#12$T8, 
            _System._tuple#12$T9, 
            _System._tuple#12$T10, 
            _System._tuple#12$T11), 
          $h))
     ==> $IsAllocBox(_System.Tuple12._1(d), _System._tuple#12$T1, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#12$T2: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple12._2(d), _System._tuple#12$T2, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple12.___hMake12_q(d)
       && (exists _System._tuple#12$T0: Ty, 
          _System._tuple#12$T1: Ty, 
          _System._tuple#12$T3: Ty, 
          _System._tuple#12$T4: Ty, 
          _System._tuple#12$T5: Ty, 
          _System._tuple#12$T6: Ty, 
          _System._tuple#12$T7: Ty, 
          _System._tuple#12$T8: Ty, 
          _System._tuple#12$T9: Ty, 
          _System._tuple#12$T10: Ty, 
          _System._tuple#12$T11: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple12(_System._tuple#12$T0, 
              _System._tuple#12$T1, 
              _System._tuple#12$T2, 
              _System._tuple#12$T3, 
              _System._tuple#12$T4, 
              _System._tuple#12$T5, 
              _System._tuple#12$T6, 
              _System._tuple#12$T7, 
              _System._tuple#12$T8, 
              _System._tuple#12$T9, 
              _System._tuple#12$T10, 
              _System._tuple#12$T11), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple12(_System._tuple#12$T0, 
            _System._tuple#12$T1, 
            _System._tuple#12$T2, 
            _System._tuple#12$T3, 
            _System._tuple#12$T4, 
            _System._tuple#12$T5, 
            _System._tuple#12$T6, 
            _System._tuple#12$T7, 
            _System._tuple#12$T8, 
            _System._tuple#12$T9, 
            _System._tuple#12$T10, 
            _System._tuple#12$T11), 
          $h))
     ==> $IsAllocBox(_System.Tuple12._2(d), _System._tuple#12$T2, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#12$T3: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple12._3(d), _System._tuple#12$T3, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple12.___hMake12_q(d)
       && (exists _System._tuple#12$T0: Ty, 
          _System._tuple#12$T1: Ty, 
          _System._tuple#12$T2: Ty, 
          _System._tuple#12$T4: Ty, 
          _System._tuple#12$T5: Ty, 
          _System._tuple#12$T6: Ty, 
          _System._tuple#12$T7: Ty, 
          _System._tuple#12$T8: Ty, 
          _System._tuple#12$T9: Ty, 
          _System._tuple#12$T10: Ty, 
          _System._tuple#12$T11: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple12(_System._tuple#12$T0, 
              _System._tuple#12$T1, 
              _System._tuple#12$T2, 
              _System._tuple#12$T3, 
              _System._tuple#12$T4, 
              _System._tuple#12$T5, 
              _System._tuple#12$T6, 
              _System._tuple#12$T7, 
              _System._tuple#12$T8, 
              _System._tuple#12$T9, 
              _System._tuple#12$T10, 
              _System._tuple#12$T11), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple12(_System._tuple#12$T0, 
            _System._tuple#12$T1, 
            _System._tuple#12$T2, 
            _System._tuple#12$T3, 
            _System._tuple#12$T4, 
            _System._tuple#12$T5, 
            _System._tuple#12$T6, 
            _System._tuple#12$T7, 
            _System._tuple#12$T8, 
            _System._tuple#12$T9, 
            _System._tuple#12$T10, 
            _System._tuple#12$T11), 
          $h))
     ==> $IsAllocBox(_System.Tuple12._3(d), _System._tuple#12$T3, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#12$T4: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple12._4(d), _System._tuple#12$T4, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple12.___hMake12_q(d)
       && (exists _System._tuple#12$T0: Ty, 
          _System._tuple#12$T1: Ty, 
          _System._tuple#12$T2: Ty, 
          _System._tuple#12$T3: Ty, 
          _System._tuple#12$T5: Ty, 
          _System._tuple#12$T6: Ty, 
          _System._tuple#12$T7: Ty, 
          _System._tuple#12$T8: Ty, 
          _System._tuple#12$T9: Ty, 
          _System._tuple#12$T10: Ty, 
          _System._tuple#12$T11: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple12(_System._tuple#12$T0, 
              _System._tuple#12$T1, 
              _System._tuple#12$T2, 
              _System._tuple#12$T3, 
              _System._tuple#12$T4, 
              _System._tuple#12$T5, 
              _System._tuple#12$T6, 
              _System._tuple#12$T7, 
              _System._tuple#12$T8, 
              _System._tuple#12$T9, 
              _System._tuple#12$T10, 
              _System._tuple#12$T11), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple12(_System._tuple#12$T0, 
            _System._tuple#12$T1, 
            _System._tuple#12$T2, 
            _System._tuple#12$T3, 
            _System._tuple#12$T4, 
            _System._tuple#12$T5, 
            _System._tuple#12$T6, 
            _System._tuple#12$T7, 
            _System._tuple#12$T8, 
            _System._tuple#12$T9, 
            _System._tuple#12$T10, 
            _System._tuple#12$T11), 
          $h))
     ==> $IsAllocBox(_System.Tuple12._4(d), _System._tuple#12$T4, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#12$T5: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple12._5(d), _System._tuple#12$T5, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple12.___hMake12_q(d)
       && (exists _System._tuple#12$T0: Ty, 
          _System._tuple#12$T1: Ty, 
          _System._tuple#12$T2: Ty, 
          _System._tuple#12$T3: Ty, 
          _System._tuple#12$T4: Ty, 
          _System._tuple#12$T6: Ty, 
          _System._tuple#12$T7: Ty, 
          _System._tuple#12$T8: Ty, 
          _System._tuple#12$T9: Ty, 
          _System._tuple#12$T10: Ty, 
          _System._tuple#12$T11: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple12(_System._tuple#12$T0, 
              _System._tuple#12$T1, 
              _System._tuple#12$T2, 
              _System._tuple#12$T3, 
              _System._tuple#12$T4, 
              _System._tuple#12$T5, 
              _System._tuple#12$T6, 
              _System._tuple#12$T7, 
              _System._tuple#12$T8, 
              _System._tuple#12$T9, 
              _System._tuple#12$T10, 
              _System._tuple#12$T11), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple12(_System._tuple#12$T0, 
            _System._tuple#12$T1, 
            _System._tuple#12$T2, 
            _System._tuple#12$T3, 
            _System._tuple#12$T4, 
            _System._tuple#12$T5, 
            _System._tuple#12$T6, 
            _System._tuple#12$T7, 
            _System._tuple#12$T8, 
            _System._tuple#12$T9, 
            _System._tuple#12$T10, 
            _System._tuple#12$T11), 
          $h))
     ==> $IsAllocBox(_System.Tuple12._5(d), _System._tuple#12$T5, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#12$T6: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple12._6(d), _System._tuple#12$T6, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple12.___hMake12_q(d)
       && (exists _System._tuple#12$T0: Ty, 
          _System._tuple#12$T1: Ty, 
          _System._tuple#12$T2: Ty, 
          _System._tuple#12$T3: Ty, 
          _System._tuple#12$T4: Ty, 
          _System._tuple#12$T5: Ty, 
          _System._tuple#12$T7: Ty, 
          _System._tuple#12$T8: Ty, 
          _System._tuple#12$T9: Ty, 
          _System._tuple#12$T10: Ty, 
          _System._tuple#12$T11: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple12(_System._tuple#12$T0, 
              _System._tuple#12$T1, 
              _System._tuple#12$T2, 
              _System._tuple#12$T3, 
              _System._tuple#12$T4, 
              _System._tuple#12$T5, 
              _System._tuple#12$T6, 
              _System._tuple#12$T7, 
              _System._tuple#12$T8, 
              _System._tuple#12$T9, 
              _System._tuple#12$T10, 
              _System._tuple#12$T11), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple12(_System._tuple#12$T0, 
            _System._tuple#12$T1, 
            _System._tuple#12$T2, 
            _System._tuple#12$T3, 
            _System._tuple#12$T4, 
            _System._tuple#12$T5, 
            _System._tuple#12$T6, 
            _System._tuple#12$T7, 
            _System._tuple#12$T8, 
            _System._tuple#12$T9, 
            _System._tuple#12$T10, 
            _System._tuple#12$T11), 
          $h))
     ==> $IsAllocBox(_System.Tuple12._6(d), _System._tuple#12$T6, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#12$T7: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple12._7(d), _System._tuple#12$T7, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple12.___hMake12_q(d)
       && (exists _System._tuple#12$T0: Ty, 
          _System._tuple#12$T1: Ty, 
          _System._tuple#12$T2: Ty, 
          _System._tuple#12$T3: Ty, 
          _System._tuple#12$T4: Ty, 
          _System._tuple#12$T5: Ty, 
          _System._tuple#12$T6: Ty, 
          _System._tuple#12$T8: Ty, 
          _System._tuple#12$T9: Ty, 
          _System._tuple#12$T10: Ty, 
          _System._tuple#12$T11: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple12(_System._tuple#12$T0, 
              _System._tuple#12$T1, 
              _System._tuple#12$T2, 
              _System._tuple#12$T3, 
              _System._tuple#12$T4, 
              _System._tuple#12$T5, 
              _System._tuple#12$T6, 
              _System._tuple#12$T7, 
              _System._tuple#12$T8, 
              _System._tuple#12$T9, 
              _System._tuple#12$T10, 
              _System._tuple#12$T11), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple12(_System._tuple#12$T0, 
            _System._tuple#12$T1, 
            _System._tuple#12$T2, 
            _System._tuple#12$T3, 
            _System._tuple#12$T4, 
            _System._tuple#12$T5, 
            _System._tuple#12$T6, 
            _System._tuple#12$T7, 
            _System._tuple#12$T8, 
            _System._tuple#12$T9, 
            _System._tuple#12$T10, 
            _System._tuple#12$T11), 
          $h))
     ==> $IsAllocBox(_System.Tuple12._7(d), _System._tuple#12$T7, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#12$T8: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple12._8(d), _System._tuple#12$T8, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple12.___hMake12_q(d)
       && (exists _System._tuple#12$T0: Ty, 
          _System._tuple#12$T1: Ty, 
          _System._tuple#12$T2: Ty, 
          _System._tuple#12$T3: Ty, 
          _System._tuple#12$T4: Ty, 
          _System._tuple#12$T5: Ty, 
          _System._tuple#12$T6: Ty, 
          _System._tuple#12$T7: Ty, 
          _System._tuple#12$T9: Ty, 
          _System._tuple#12$T10: Ty, 
          _System._tuple#12$T11: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple12(_System._tuple#12$T0, 
              _System._tuple#12$T1, 
              _System._tuple#12$T2, 
              _System._tuple#12$T3, 
              _System._tuple#12$T4, 
              _System._tuple#12$T5, 
              _System._tuple#12$T6, 
              _System._tuple#12$T7, 
              _System._tuple#12$T8, 
              _System._tuple#12$T9, 
              _System._tuple#12$T10, 
              _System._tuple#12$T11), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple12(_System._tuple#12$T0, 
            _System._tuple#12$T1, 
            _System._tuple#12$T2, 
            _System._tuple#12$T3, 
            _System._tuple#12$T4, 
            _System._tuple#12$T5, 
            _System._tuple#12$T6, 
            _System._tuple#12$T7, 
            _System._tuple#12$T8, 
            _System._tuple#12$T9, 
            _System._tuple#12$T10, 
            _System._tuple#12$T11), 
          $h))
     ==> $IsAllocBox(_System.Tuple12._8(d), _System._tuple#12$T8, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#12$T9: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple12._9(d), _System._tuple#12$T9, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple12.___hMake12_q(d)
       && (exists _System._tuple#12$T0: Ty, 
          _System._tuple#12$T1: Ty, 
          _System._tuple#12$T2: Ty, 
          _System._tuple#12$T3: Ty, 
          _System._tuple#12$T4: Ty, 
          _System._tuple#12$T5: Ty, 
          _System._tuple#12$T6: Ty, 
          _System._tuple#12$T7: Ty, 
          _System._tuple#12$T8: Ty, 
          _System._tuple#12$T10: Ty, 
          _System._tuple#12$T11: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple12(_System._tuple#12$T0, 
              _System._tuple#12$T1, 
              _System._tuple#12$T2, 
              _System._tuple#12$T3, 
              _System._tuple#12$T4, 
              _System._tuple#12$T5, 
              _System._tuple#12$T6, 
              _System._tuple#12$T7, 
              _System._tuple#12$T8, 
              _System._tuple#12$T9, 
              _System._tuple#12$T10, 
              _System._tuple#12$T11), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple12(_System._tuple#12$T0, 
            _System._tuple#12$T1, 
            _System._tuple#12$T2, 
            _System._tuple#12$T3, 
            _System._tuple#12$T4, 
            _System._tuple#12$T5, 
            _System._tuple#12$T6, 
            _System._tuple#12$T7, 
            _System._tuple#12$T8, 
            _System._tuple#12$T9, 
            _System._tuple#12$T10, 
            _System._tuple#12$T11), 
          $h))
     ==> $IsAllocBox(_System.Tuple12._9(d), _System._tuple#12$T9, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#12$T10: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple12._10(d), _System._tuple#12$T10, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple12.___hMake12_q(d)
       && (exists _System._tuple#12$T0: Ty, 
          _System._tuple#12$T1: Ty, 
          _System._tuple#12$T2: Ty, 
          _System._tuple#12$T3: Ty, 
          _System._tuple#12$T4: Ty, 
          _System._tuple#12$T5: Ty, 
          _System._tuple#12$T6: Ty, 
          _System._tuple#12$T7: Ty, 
          _System._tuple#12$T8: Ty, 
          _System._tuple#12$T9: Ty, 
          _System._tuple#12$T11: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple12(_System._tuple#12$T0, 
              _System._tuple#12$T1, 
              _System._tuple#12$T2, 
              _System._tuple#12$T3, 
              _System._tuple#12$T4, 
              _System._tuple#12$T5, 
              _System._tuple#12$T6, 
              _System._tuple#12$T7, 
              _System._tuple#12$T8, 
              _System._tuple#12$T9, 
              _System._tuple#12$T10, 
              _System._tuple#12$T11), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple12(_System._tuple#12$T0, 
            _System._tuple#12$T1, 
            _System._tuple#12$T2, 
            _System._tuple#12$T3, 
            _System._tuple#12$T4, 
            _System._tuple#12$T5, 
            _System._tuple#12$T6, 
            _System._tuple#12$T7, 
            _System._tuple#12$T8, 
            _System._tuple#12$T9, 
            _System._tuple#12$T10, 
            _System._tuple#12$T11), 
          $h))
     ==> $IsAllocBox(_System.Tuple12._10(d), _System._tuple#12$T10, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#12$T11: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple12._11(d), _System._tuple#12$T11, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple12.___hMake12_q(d)
       && (exists _System._tuple#12$T0: Ty, 
          _System._tuple#12$T1: Ty, 
          _System._tuple#12$T2: Ty, 
          _System._tuple#12$T3: Ty, 
          _System._tuple#12$T4: Ty, 
          _System._tuple#12$T5: Ty, 
          _System._tuple#12$T6: Ty, 
          _System._tuple#12$T7: Ty, 
          _System._tuple#12$T8: Ty, 
          _System._tuple#12$T9: Ty, 
          _System._tuple#12$T10: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple12(_System._tuple#12$T0, 
              _System._tuple#12$T1, 
              _System._tuple#12$T2, 
              _System._tuple#12$T3, 
              _System._tuple#12$T4, 
              _System._tuple#12$T5, 
              _System._tuple#12$T6, 
              _System._tuple#12$T7, 
              _System._tuple#12$T8, 
              _System._tuple#12$T9, 
              _System._tuple#12$T10, 
              _System._tuple#12$T11), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple12(_System._tuple#12$T0, 
            _System._tuple#12$T1, 
            _System._tuple#12$T2, 
            _System._tuple#12$T3, 
            _System._tuple#12$T4, 
            _System._tuple#12$T5, 
            _System._tuple#12$T6, 
            _System._tuple#12$T7, 
            _System._tuple#12$T8, 
            _System._tuple#12$T9, 
            _System._tuple#12$T10, 
            _System._tuple#12$T11), 
          $h))
     ==> $IsAllocBox(_System.Tuple12._11(d), _System._tuple#12$T11, $h));

// Constructor literal
axiom (forall a#185#0#0: Box, 
    a#185#1#0: Box, 
    a#185#2#0: Box, 
    a#185#3#0: Box, 
    a#185#4#0: Box, 
    a#185#5#0: Box, 
    a#185#6#0: Box, 
    a#185#7#0: Box, 
    a#185#8#0: Box, 
    a#185#9#0: Box, 
    a#185#10#0: Box, 
    a#185#11#0: Box :: 
  { #_System._tuple#12._#Make12(Lit(a#185#0#0), 
      Lit(a#185#1#0), 
      Lit(a#185#2#0), 
      Lit(a#185#3#0), 
      Lit(a#185#4#0), 
      Lit(a#185#5#0), 
      Lit(a#185#6#0), 
      Lit(a#185#7#0), 
      Lit(a#185#8#0), 
      Lit(a#185#9#0), 
      Lit(a#185#10#0), 
      Lit(a#185#11#0)) } 
  #_System._tuple#12._#Make12(Lit(a#185#0#0), 
      Lit(a#185#1#0), 
      Lit(a#185#2#0), 
      Lit(a#185#3#0), 
      Lit(a#185#4#0), 
      Lit(a#185#5#0), 
      Lit(a#185#6#0), 
      Lit(a#185#7#0), 
      Lit(a#185#8#0), 
      Lit(a#185#9#0), 
      Lit(a#185#10#0), 
      Lit(a#185#11#0))
     == Lit(#_System._tuple#12._#Make12(a#185#0#0, 
        a#185#1#0, 
        a#185#2#0, 
        a#185#3#0, 
        a#185#4#0, 
        a#185#5#0, 
        a#185#6#0, 
        a#185#7#0, 
        a#185#8#0, 
        a#185#9#0, 
        a#185#10#0, 
        a#185#11#0)));

function _System.Tuple12._0(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#186#0#0: Box, 
    a#186#1#0: Box, 
    a#186#2#0: Box, 
    a#186#3#0: Box, 
    a#186#4#0: Box, 
    a#186#5#0: Box, 
    a#186#6#0: Box, 
    a#186#7#0: Box, 
    a#186#8#0: Box, 
    a#186#9#0: Box, 
    a#186#10#0: Box, 
    a#186#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#186#0#0, 
      a#186#1#0, 
      a#186#2#0, 
      a#186#3#0, 
      a#186#4#0, 
      a#186#5#0, 
      a#186#6#0, 
      a#186#7#0, 
      a#186#8#0, 
      a#186#9#0, 
      a#186#10#0, 
      a#186#11#0) } 
  _System.Tuple12._0(#_System._tuple#12._#Make12(a#186#0#0, 
        a#186#1#0, 
        a#186#2#0, 
        a#186#3#0, 
        a#186#4#0, 
        a#186#5#0, 
        a#186#6#0, 
        a#186#7#0, 
        a#186#8#0, 
        a#186#9#0, 
        a#186#10#0, 
        a#186#11#0))
     == a#186#0#0);

// Inductive rank
axiom (forall a#187#0#0: Box, 
    a#187#1#0: Box, 
    a#187#2#0: Box, 
    a#187#3#0: Box, 
    a#187#4#0: Box, 
    a#187#5#0: Box, 
    a#187#6#0: Box, 
    a#187#7#0: Box, 
    a#187#8#0: Box, 
    a#187#9#0: Box, 
    a#187#10#0: Box, 
    a#187#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#187#0#0, 
      a#187#1#0, 
      a#187#2#0, 
      a#187#3#0, 
      a#187#4#0, 
      a#187#5#0, 
      a#187#6#0, 
      a#187#7#0, 
      a#187#8#0, 
      a#187#9#0, 
      a#187#10#0, 
      a#187#11#0) } 
  BoxRank(a#187#0#0)
     < DtRank(#_System._tuple#12._#Make12(a#187#0#0, 
        a#187#1#0, 
        a#187#2#0, 
        a#187#3#0, 
        a#187#4#0, 
        a#187#5#0, 
        a#187#6#0, 
        a#187#7#0, 
        a#187#8#0, 
        a#187#9#0, 
        a#187#10#0, 
        a#187#11#0)));

function _System.Tuple12._1(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#188#0#0: Box, 
    a#188#1#0: Box, 
    a#188#2#0: Box, 
    a#188#3#0: Box, 
    a#188#4#0: Box, 
    a#188#5#0: Box, 
    a#188#6#0: Box, 
    a#188#7#0: Box, 
    a#188#8#0: Box, 
    a#188#9#0: Box, 
    a#188#10#0: Box, 
    a#188#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#188#0#0, 
      a#188#1#0, 
      a#188#2#0, 
      a#188#3#0, 
      a#188#4#0, 
      a#188#5#0, 
      a#188#6#0, 
      a#188#7#0, 
      a#188#8#0, 
      a#188#9#0, 
      a#188#10#0, 
      a#188#11#0) } 
  _System.Tuple12._1(#_System._tuple#12._#Make12(a#188#0#0, 
        a#188#1#0, 
        a#188#2#0, 
        a#188#3#0, 
        a#188#4#0, 
        a#188#5#0, 
        a#188#6#0, 
        a#188#7#0, 
        a#188#8#0, 
        a#188#9#0, 
        a#188#10#0, 
        a#188#11#0))
     == a#188#1#0);

// Inductive rank
axiom (forall a#189#0#0: Box, 
    a#189#1#0: Box, 
    a#189#2#0: Box, 
    a#189#3#0: Box, 
    a#189#4#0: Box, 
    a#189#5#0: Box, 
    a#189#6#0: Box, 
    a#189#7#0: Box, 
    a#189#8#0: Box, 
    a#189#9#0: Box, 
    a#189#10#0: Box, 
    a#189#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#189#0#0, 
      a#189#1#0, 
      a#189#2#0, 
      a#189#3#0, 
      a#189#4#0, 
      a#189#5#0, 
      a#189#6#0, 
      a#189#7#0, 
      a#189#8#0, 
      a#189#9#0, 
      a#189#10#0, 
      a#189#11#0) } 
  BoxRank(a#189#1#0)
     < DtRank(#_System._tuple#12._#Make12(a#189#0#0, 
        a#189#1#0, 
        a#189#2#0, 
        a#189#3#0, 
        a#189#4#0, 
        a#189#5#0, 
        a#189#6#0, 
        a#189#7#0, 
        a#189#8#0, 
        a#189#9#0, 
        a#189#10#0, 
        a#189#11#0)));

function _System.Tuple12._2(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#190#0#0: Box, 
    a#190#1#0: Box, 
    a#190#2#0: Box, 
    a#190#3#0: Box, 
    a#190#4#0: Box, 
    a#190#5#0: Box, 
    a#190#6#0: Box, 
    a#190#7#0: Box, 
    a#190#8#0: Box, 
    a#190#9#0: Box, 
    a#190#10#0: Box, 
    a#190#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#190#0#0, 
      a#190#1#0, 
      a#190#2#0, 
      a#190#3#0, 
      a#190#4#0, 
      a#190#5#0, 
      a#190#6#0, 
      a#190#7#0, 
      a#190#8#0, 
      a#190#9#0, 
      a#190#10#0, 
      a#190#11#0) } 
  _System.Tuple12._2(#_System._tuple#12._#Make12(a#190#0#0, 
        a#190#1#0, 
        a#190#2#0, 
        a#190#3#0, 
        a#190#4#0, 
        a#190#5#0, 
        a#190#6#0, 
        a#190#7#0, 
        a#190#8#0, 
        a#190#9#0, 
        a#190#10#0, 
        a#190#11#0))
     == a#190#2#0);

// Inductive rank
axiom (forall a#191#0#0: Box, 
    a#191#1#0: Box, 
    a#191#2#0: Box, 
    a#191#3#0: Box, 
    a#191#4#0: Box, 
    a#191#5#0: Box, 
    a#191#6#0: Box, 
    a#191#7#0: Box, 
    a#191#8#0: Box, 
    a#191#9#0: Box, 
    a#191#10#0: Box, 
    a#191#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#191#0#0, 
      a#191#1#0, 
      a#191#2#0, 
      a#191#3#0, 
      a#191#4#0, 
      a#191#5#0, 
      a#191#6#0, 
      a#191#7#0, 
      a#191#8#0, 
      a#191#9#0, 
      a#191#10#0, 
      a#191#11#0) } 
  BoxRank(a#191#2#0)
     < DtRank(#_System._tuple#12._#Make12(a#191#0#0, 
        a#191#1#0, 
        a#191#2#0, 
        a#191#3#0, 
        a#191#4#0, 
        a#191#5#0, 
        a#191#6#0, 
        a#191#7#0, 
        a#191#8#0, 
        a#191#9#0, 
        a#191#10#0, 
        a#191#11#0)));

function _System.Tuple12._3(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#192#0#0: Box, 
    a#192#1#0: Box, 
    a#192#2#0: Box, 
    a#192#3#0: Box, 
    a#192#4#0: Box, 
    a#192#5#0: Box, 
    a#192#6#0: Box, 
    a#192#7#0: Box, 
    a#192#8#0: Box, 
    a#192#9#0: Box, 
    a#192#10#0: Box, 
    a#192#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#192#0#0, 
      a#192#1#0, 
      a#192#2#0, 
      a#192#3#0, 
      a#192#4#0, 
      a#192#5#0, 
      a#192#6#0, 
      a#192#7#0, 
      a#192#8#0, 
      a#192#9#0, 
      a#192#10#0, 
      a#192#11#0) } 
  _System.Tuple12._3(#_System._tuple#12._#Make12(a#192#0#0, 
        a#192#1#0, 
        a#192#2#0, 
        a#192#3#0, 
        a#192#4#0, 
        a#192#5#0, 
        a#192#6#0, 
        a#192#7#0, 
        a#192#8#0, 
        a#192#9#0, 
        a#192#10#0, 
        a#192#11#0))
     == a#192#3#0);

// Inductive rank
axiom (forall a#193#0#0: Box, 
    a#193#1#0: Box, 
    a#193#2#0: Box, 
    a#193#3#0: Box, 
    a#193#4#0: Box, 
    a#193#5#0: Box, 
    a#193#6#0: Box, 
    a#193#7#0: Box, 
    a#193#8#0: Box, 
    a#193#9#0: Box, 
    a#193#10#0: Box, 
    a#193#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#193#0#0, 
      a#193#1#0, 
      a#193#2#0, 
      a#193#3#0, 
      a#193#4#0, 
      a#193#5#0, 
      a#193#6#0, 
      a#193#7#0, 
      a#193#8#0, 
      a#193#9#0, 
      a#193#10#0, 
      a#193#11#0) } 
  BoxRank(a#193#3#0)
     < DtRank(#_System._tuple#12._#Make12(a#193#0#0, 
        a#193#1#0, 
        a#193#2#0, 
        a#193#3#0, 
        a#193#4#0, 
        a#193#5#0, 
        a#193#6#0, 
        a#193#7#0, 
        a#193#8#0, 
        a#193#9#0, 
        a#193#10#0, 
        a#193#11#0)));

function _System.Tuple12._4(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#194#0#0: Box, 
    a#194#1#0: Box, 
    a#194#2#0: Box, 
    a#194#3#0: Box, 
    a#194#4#0: Box, 
    a#194#5#0: Box, 
    a#194#6#0: Box, 
    a#194#7#0: Box, 
    a#194#8#0: Box, 
    a#194#9#0: Box, 
    a#194#10#0: Box, 
    a#194#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#194#0#0, 
      a#194#1#0, 
      a#194#2#0, 
      a#194#3#0, 
      a#194#4#0, 
      a#194#5#0, 
      a#194#6#0, 
      a#194#7#0, 
      a#194#8#0, 
      a#194#9#0, 
      a#194#10#0, 
      a#194#11#0) } 
  _System.Tuple12._4(#_System._tuple#12._#Make12(a#194#0#0, 
        a#194#1#0, 
        a#194#2#0, 
        a#194#3#0, 
        a#194#4#0, 
        a#194#5#0, 
        a#194#6#0, 
        a#194#7#0, 
        a#194#8#0, 
        a#194#9#0, 
        a#194#10#0, 
        a#194#11#0))
     == a#194#4#0);

// Inductive rank
axiom (forall a#195#0#0: Box, 
    a#195#1#0: Box, 
    a#195#2#0: Box, 
    a#195#3#0: Box, 
    a#195#4#0: Box, 
    a#195#5#0: Box, 
    a#195#6#0: Box, 
    a#195#7#0: Box, 
    a#195#8#0: Box, 
    a#195#9#0: Box, 
    a#195#10#0: Box, 
    a#195#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#195#0#0, 
      a#195#1#0, 
      a#195#2#0, 
      a#195#3#0, 
      a#195#4#0, 
      a#195#5#0, 
      a#195#6#0, 
      a#195#7#0, 
      a#195#8#0, 
      a#195#9#0, 
      a#195#10#0, 
      a#195#11#0) } 
  BoxRank(a#195#4#0)
     < DtRank(#_System._tuple#12._#Make12(a#195#0#0, 
        a#195#1#0, 
        a#195#2#0, 
        a#195#3#0, 
        a#195#4#0, 
        a#195#5#0, 
        a#195#6#0, 
        a#195#7#0, 
        a#195#8#0, 
        a#195#9#0, 
        a#195#10#0, 
        a#195#11#0)));

function _System.Tuple12._5(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#196#0#0: Box, 
    a#196#1#0: Box, 
    a#196#2#0: Box, 
    a#196#3#0: Box, 
    a#196#4#0: Box, 
    a#196#5#0: Box, 
    a#196#6#0: Box, 
    a#196#7#0: Box, 
    a#196#8#0: Box, 
    a#196#9#0: Box, 
    a#196#10#0: Box, 
    a#196#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#196#0#0, 
      a#196#1#0, 
      a#196#2#0, 
      a#196#3#0, 
      a#196#4#0, 
      a#196#5#0, 
      a#196#6#0, 
      a#196#7#0, 
      a#196#8#0, 
      a#196#9#0, 
      a#196#10#0, 
      a#196#11#0) } 
  _System.Tuple12._5(#_System._tuple#12._#Make12(a#196#0#0, 
        a#196#1#0, 
        a#196#2#0, 
        a#196#3#0, 
        a#196#4#0, 
        a#196#5#0, 
        a#196#6#0, 
        a#196#7#0, 
        a#196#8#0, 
        a#196#9#0, 
        a#196#10#0, 
        a#196#11#0))
     == a#196#5#0);

// Inductive rank
axiom (forall a#197#0#0: Box, 
    a#197#1#0: Box, 
    a#197#2#0: Box, 
    a#197#3#0: Box, 
    a#197#4#0: Box, 
    a#197#5#0: Box, 
    a#197#6#0: Box, 
    a#197#7#0: Box, 
    a#197#8#0: Box, 
    a#197#9#0: Box, 
    a#197#10#0: Box, 
    a#197#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#197#0#0, 
      a#197#1#0, 
      a#197#2#0, 
      a#197#3#0, 
      a#197#4#0, 
      a#197#5#0, 
      a#197#6#0, 
      a#197#7#0, 
      a#197#8#0, 
      a#197#9#0, 
      a#197#10#0, 
      a#197#11#0) } 
  BoxRank(a#197#5#0)
     < DtRank(#_System._tuple#12._#Make12(a#197#0#0, 
        a#197#1#0, 
        a#197#2#0, 
        a#197#3#0, 
        a#197#4#0, 
        a#197#5#0, 
        a#197#6#0, 
        a#197#7#0, 
        a#197#8#0, 
        a#197#9#0, 
        a#197#10#0, 
        a#197#11#0)));

function _System.Tuple12._6(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#198#0#0: Box, 
    a#198#1#0: Box, 
    a#198#2#0: Box, 
    a#198#3#0: Box, 
    a#198#4#0: Box, 
    a#198#5#0: Box, 
    a#198#6#0: Box, 
    a#198#7#0: Box, 
    a#198#8#0: Box, 
    a#198#9#0: Box, 
    a#198#10#0: Box, 
    a#198#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#198#0#0, 
      a#198#1#0, 
      a#198#2#0, 
      a#198#3#0, 
      a#198#4#0, 
      a#198#5#0, 
      a#198#6#0, 
      a#198#7#0, 
      a#198#8#0, 
      a#198#9#0, 
      a#198#10#0, 
      a#198#11#0) } 
  _System.Tuple12._6(#_System._tuple#12._#Make12(a#198#0#0, 
        a#198#1#0, 
        a#198#2#0, 
        a#198#3#0, 
        a#198#4#0, 
        a#198#5#0, 
        a#198#6#0, 
        a#198#7#0, 
        a#198#8#0, 
        a#198#9#0, 
        a#198#10#0, 
        a#198#11#0))
     == a#198#6#0);

// Inductive rank
axiom (forall a#199#0#0: Box, 
    a#199#1#0: Box, 
    a#199#2#0: Box, 
    a#199#3#0: Box, 
    a#199#4#0: Box, 
    a#199#5#0: Box, 
    a#199#6#0: Box, 
    a#199#7#0: Box, 
    a#199#8#0: Box, 
    a#199#9#0: Box, 
    a#199#10#0: Box, 
    a#199#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#199#0#0, 
      a#199#1#0, 
      a#199#2#0, 
      a#199#3#0, 
      a#199#4#0, 
      a#199#5#0, 
      a#199#6#0, 
      a#199#7#0, 
      a#199#8#0, 
      a#199#9#0, 
      a#199#10#0, 
      a#199#11#0) } 
  BoxRank(a#199#6#0)
     < DtRank(#_System._tuple#12._#Make12(a#199#0#0, 
        a#199#1#0, 
        a#199#2#0, 
        a#199#3#0, 
        a#199#4#0, 
        a#199#5#0, 
        a#199#6#0, 
        a#199#7#0, 
        a#199#8#0, 
        a#199#9#0, 
        a#199#10#0, 
        a#199#11#0)));

function _System.Tuple12._7(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#200#0#0: Box, 
    a#200#1#0: Box, 
    a#200#2#0: Box, 
    a#200#3#0: Box, 
    a#200#4#0: Box, 
    a#200#5#0: Box, 
    a#200#6#0: Box, 
    a#200#7#0: Box, 
    a#200#8#0: Box, 
    a#200#9#0: Box, 
    a#200#10#0: Box, 
    a#200#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#200#0#0, 
      a#200#1#0, 
      a#200#2#0, 
      a#200#3#0, 
      a#200#4#0, 
      a#200#5#0, 
      a#200#6#0, 
      a#200#7#0, 
      a#200#8#0, 
      a#200#9#0, 
      a#200#10#0, 
      a#200#11#0) } 
  _System.Tuple12._7(#_System._tuple#12._#Make12(a#200#0#0, 
        a#200#1#0, 
        a#200#2#0, 
        a#200#3#0, 
        a#200#4#0, 
        a#200#5#0, 
        a#200#6#0, 
        a#200#7#0, 
        a#200#8#0, 
        a#200#9#0, 
        a#200#10#0, 
        a#200#11#0))
     == a#200#7#0);

// Inductive rank
axiom (forall a#201#0#0: Box, 
    a#201#1#0: Box, 
    a#201#2#0: Box, 
    a#201#3#0: Box, 
    a#201#4#0: Box, 
    a#201#5#0: Box, 
    a#201#6#0: Box, 
    a#201#7#0: Box, 
    a#201#8#0: Box, 
    a#201#9#0: Box, 
    a#201#10#0: Box, 
    a#201#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#201#0#0, 
      a#201#1#0, 
      a#201#2#0, 
      a#201#3#0, 
      a#201#4#0, 
      a#201#5#0, 
      a#201#6#0, 
      a#201#7#0, 
      a#201#8#0, 
      a#201#9#0, 
      a#201#10#0, 
      a#201#11#0) } 
  BoxRank(a#201#7#0)
     < DtRank(#_System._tuple#12._#Make12(a#201#0#0, 
        a#201#1#0, 
        a#201#2#0, 
        a#201#3#0, 
        a#201#4#0, 
        a#201#5#0, 
        a#201#6#0, 
        a#201#7#0, 
        a#201#8#0, 
        a#201#9#0, 
        a#201#10#0, 
        a#201#11#0)));

function _System.Tuple12._8(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#202#0#0: Box, 
    a#202#1#0: Box, 
    a#202#2#0: Box, 
    a#202#3#0: Box, 
    a#202#4#0: Box, 
    a#202#5#0: Box, 
    a#202#6#0: Box, 
    a#202#7#0: Box, 
    a#202#8#0: Box, 
    a#202#9#0: Box, 
    a#202#10#0: Box, 
    a#202#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#202#0#0, 
      a#202#1#0, 
      a#202#2#0, 
      a#202#3#0, 
      a#202#4#0, 
      a#202#5#0, 
      a#202#6#0, 
      a#202#7#0, 
      a#202#8#0, 
      a#202#9#0, 
      a#202#10#0, 
      a#202#11#0) } 
  _System.Tuple12._8(#_System._tuple#12._#Make12(a#202#0#0, 
        a#202#1#0, 
        a#202#2#0, 
        a#202#3#0, 
        a#202#4#0, 
        a#202#5#0, 
        a#202#6#0, 
        a#202#7#0, 
        a#202#8#0, 
        a#202#9#0, 
        a#202#10#0, 
        a#202#11#0))
     == a#202#8#0);

// Inductive rank
axiom (forall a#203#0#0: Box, 
    a#203#1#0: Box, 
    a#203#2#0: Box, 
    a#203#3#0: Box, 
    a#203#4#0: Box, 
    a#203#5#0: Box, 
    a#203#6#0: Box, 
    a#203#7#0: Box, 
    a#203#8#0: Box, 
    a#203#9#0: Box, 
    a#203#10#0: Box, 
    a#203#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#203#0#0, 
      a#203#1#0, 
      a#203#2#0, 
      a#203#3#0, 
      a#203#4#0, 
      a#203#5#0, 
      a#203#6#0, 
      a#203#7#0, 
      a#203#8#0, 
      a#203#9#0, 
      a#203#10#0, 
      a#203#11#0) } 
  BoxRank(a#203#8#0)
     < DtRank(#_System._tuple#12._#Make12(a#203#0#0, 
        a#203#1#0, 
        a#203#2#0, 
        a#203#3#0, 
        a#203#4#0, 
        a#203#5#0, 
        a#203#6#0, 
        a#203#7#0, 
        a#203#8#0, 
        a#203#9#0, 
        a#203#10#0, 
        a#203#11#0)));

function _System.Tuple12._9(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#204#0#0: Box, 
    a#204#1#0: Box, 
    a#204#2#0: Box, 
    a#204#3#0: Box, 
    a#204#4#0: Box, 
    a#204#5#0: Box, 
    a#204#6#0: Box, 
    a#204#7#0: Box, 
    a#204#8#0: Box, 
    a#204#9#0: Box, 
    a#204#10#0: Box, 
    a#204#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#204#0#0, 
      a#204#1#0, 
      a#204#2#0, 
      a#204#3#0, 
      a#204#4#0, 
      a#204#5#0, 
      a#204#6#0, 
      a#204#7#0, 
      a#204#8#0, 
      a#204#9#0, 
      a#204#10#0, 
      a#204#11#0) } 
  _System.Tuple12._9(#_System._tuple#12._#Make12(a#204#0#0, 
        a#204#1#0, 
        a#204#2#0, 
        a#204#3#0, 
        a#204#4#0, 
        a#204#5#0, 
        a#204#6#0, 
        a#204#7#0, 
        a#204#8#0, 
        a#204#9#0, 
        a#204#10#0, 
        a#204#11#0))
     == a#204#9#0);

// Inductive rank
axiom (forall a#205#0#0: Box, 
    a#205#1#0: Box, 
    a#205#2#0: Box, 
    a#205#3#0: Box, 
    a#205#4#0: Box, 
    a#205#5#0: Box, 
    a#205#6#0: Box, 
    a#205#7#0: Box, 
    a#205#8#0: Box, 
    a#205#9#0: Box, 
    a#205#10#0: Box, 
    a#205#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#205#0#0, 
      a#205#1#0, 
      a#205#2#0, 
      a#205#3#0, 
      a#205#4#0, 
      a#205#5#0, 
      a#205#6#0, 
      a#205#7#0, 
      a#205#8#0, 
      a#205#9#0, 
      a#205#10#0, 
      a#205#11#0) } 
  BoxRank(a#205#9#0)
     < DtRank(#_System._tuple#12._#Make12(a#205#0#0, 
        a#205#1#0, 
        a#205#2#0, 
        a#205#3#0, 
        a#205#4#0, 
        a#205#5#0, 
        a#205#6#0, 
        a#205#7#0, 
        a#205#8#0, 
        a#205#9#0, 
        a#205#10#0, 
        a#205#11#0)));

function _System.Tuple12._10(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#206#0#0: Box, 
    a#206#1#0: Box, 
    a#206#2#0: Box, 
    a#206#3#0: Box, 
    a#206#4#0: Box, 
    a#206#5#0: Box, 
    a#206#6#0: Box, 
    a#206#7#0: Box, 
    a#206#8#0: Box, 
    a#206#9#0: Box, 
    a#206#10#0: Box, 
    a#206#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#206#0#0, 
      a#206#1#0, 
      a#206#2#0, 
      a#206#3#0, 
      a#206#4#0, 
      a#206#5#0, 
      a#206#6#0, 
      a#206#7#0, 
      a#206#8#0, 
      a#206#9#0, 
      a#206#10#0, 
      a#206#11#0) } 
  _System.Tuple12._10(#_System._tuple#12._#Make12(a#206#0#0, 
        a#206#1#0, 
        a#206#2#0, 
        a#206#3#0, 
        a#206#4#0, 
        a#206#5#0, 
        a#206#6#0, 
        a#206#7#0, 
        a#206#8#0, 
        a#206#9#0, 
        a#206#10#0, 
        a#206#11#0))
     == a#206#10#0);

// Inductive rank
axiom (forall a#207#0#0: Box, 
    a#207#1#0: Box, 
    a#207#2#0: Box, 
    a#207#3#0: Box, 
    a#207#4#0: Box, 
    a#207#5#0: Box, 
    a#207#6#0: Box, 
    a#207#7#0: Box, 
    a#207#8#0: Box, 
    a#207#9#0: Box, 
    a#207#10#0: Box, 
    a#207#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#207#0#0, 
      a#207#1#0, 
      a#207#2#0, 
      a#207#3#0, 
      a#207#4#0, 
      a#207#5#0, 
      a#207#6#0, 
      a#207#7#0, 
      a#207#8#0, 
      a#207#9#0, 
      a#207#10#0, 
      a#207#11#0) } 
  BoxRank(a#207#10#0)
     < DtRank(#_System._tuple#12._#Make12(a#207#0#0, 
        a#207#1#0, 
        a#207#2#0, 
        a#207#3#0, 
        a#207#4#0, 
        a#207#5#0, 
        a#207#6#0, 
        a#207#7#0, 
        a#207#8#0, 
        a#207#9#0, 
        a#207#10#0, 
        a#207#11#0)));

function _System.Tuple12._11(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#208#0#0: Box, 
    a#208#1#0: Box, 
    a#208#2#0: Box, 
    a#208#3#0: Box, 
    a#208#4#0: Box, 
    a#208#5#0: Box, 
    a#208#6#0: Box, 
    a#208#7#0: Box, 
    a#208#8#0: Box, 
    a#208#9#0: Box, 
    a#208#10#0: Box, 
    a#208#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#208#0#0, 
      a#208#1#0, 
      a#208#2#0, 
      a#208#3#0, 
      a#208#4#0, 
      a#208#5#0, 
      a#208#6#0, 
      a#208#7#0, 
      a#208#8#0, 
      a#208#9#0, 
      a#208#10#0, 
      a#208#11#0) } 
  _System.Tuple12._11(#_System._tuple#12._#Make12(a#208#0#0, 
        a#208#1#0, 
        a#208#2#0, 
        a#208#3#0, 
        a#208#4#0, 
        a#208#5#0, 
        a#208#6#0, 
        a#208#7#0, 
        a#208#8#0, 
        a#208#9#0, 
        a#208#10#0, 
        a#208#11#0))
     == a#208#11#0);

// Inductive rank
axiom (forall a#209#0#0: Box, 
    a#209#1#0: Box, 
    a#209#2#0: Box, 
    a#209#3#0: Box, 
    a#209#4#0: Box, 
    a#209#5#0: Box, 
    a#209#6#0: Box, 
    a#209#7#0: Box, 
    a#209#8#0: Box, 
    a#209#9#0: Box, 
    a#209#10#0: Box, 
    a#209#11#0: Box :: 
  { #_System._tuple#12._#Make12(a#209#0#0, 
      a#209#1#0, 
      a#209#2#0, 
      a#209#3#0, 
      a#209#4#0, 
      a#209#5#0, 
      a#209#6#0, 
      a#209#7#0, 
      a#209#8#0, 
      a#209#9#0, 
      a#209#10#0, 
      a#209#11#0) } 
  BoxRank(a#209#11#0)
     < DtRank(#_System._tuple#12._#Make12(a#209#0#0, 
        a#209#1#0, 
        a#209#2#0, 
        a#209#3#0, 
        a#209#4#0, 
        a#209#5#0, 
        a#209#6#0, 
        a#209#7#0, 
        a#209#8#0, 
        a#209#9#0, 
        a#209#10#0, 
        a#209#11#0)));

// Depth-one case-split function
function $IsA#_System.Tuple12(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple12(d) } 
  $IsA#_System.Tuple12(d) ==> _System.Tuple12.___hMake12_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#12$T0: Ty, 
    _System._tuple#12$T1: Ty, 
    _System._tuple#12$T2: Ty, 
    _System._tuple#12$T3: Ty, 
    _System._tuple#12$T4: Ty, 
    _System._tuple#12$T5: Ty, 
    _System._tuple#12$T6: Ty, 
    _System._tuple#12$T7: Ty, 
    _System._tuple#12$T8: Ty, 
    _System._tuple#12$T9: Ty, 
    _System._tuple#12$T10: Ty, 
    _System._tuple#12$T11: Ty, 
    d: DatatypeType :: 
  { _System.Tuple12.___hMake12_q(d), $Is(d, 
      Tclass._System.Tuple12(_System._tuple#12$T0, 
        _System._tuple#12$T1, 
        _System._tuple#12$T2, 
        _System._tuple#12$T3, 
        _System._tuple#12$T4, 
        _System._tuple#12$T5, 
        _System._tuple#12$T6, 
        _System._tuple#12$T7, 
        _System._tuple#12$T8, 
        _System._tuple#12$T9, 
        _System._tuple#12$T10, 
        _System._tuple#12$T11)) } 
  $Is(d, 
      Tclass._System.Tuple12(_System._tuple#12$T0, 
        _System._tuple#12$T1, 
        _System._tuple#12$T2, 
        _System._tuple#12$T3, 
        _System._tuple#12$T4, 
        _System._tuple#12$T5, 
        _System._tuple#12$T6, 
        _System._tuple#12$T7, 
        _System._tuple#12$T8, 
        _System._tuple#12$T9, 
        _System._tuple#12$T10, 
        _System._tuple#12$T11))
     ==> _System.Tuple12.___hMake12_q(d));

// Datatype extensional equality declaration
function _System.Tuple12#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#12._#Make12
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple12#Equal(a, b) } 
  _System.Tuple12#Equal(a, b)
     <==> _System.Tuple12._0(a) == _System.Tuple12._0(b)
       && _System.Tuple12._1(a) == _System.Tuple12._1(b)
       && _System.Tuple12._2(a) == _System.Tuple12._2(b)
       && _System.Tuple12._3(a) == _System.Tuple12._3(b)
       && _System.Tuple12._4(a) == _System.Tuple12._4(b)
       && _System.Tuple12._5(a) == _System.Tuple12._5(b)
       && _System.Tuple12._6(a) == _System.Tuple12._6(b)
       && _System.Tuple12._7(a) == _System.Tuple12._7(b)
       && _System.Tuple12._8(a) == _System.Tuple12._8(b)
       && _System.Tuple12._9(a) == _System.Tuple12._9(b)
       && _System.Tuple12._10(a) == _System.Tuple12._10(b)
       && _System.Tuple12._11(a) == _System.Tuple12._11(b));

// Datatype extensionality axiom: _System._tuple#12
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple12#Equal(a, b) } 
  _System.Tuple12#Equal(a, b) <==> a == b);

const unique class._System.Tuple12: ClassName;

// Constructor function declaration
function #_System._tuple#13._#Make13(Box, Box, Box, Box, Box, Box, Box, Box, Box, Box, Box, Box, Box) : DatatypeType;

const unique ##_System._tuple#13._#Make13: DtCtorId
uses {
// Constructor identifier
axiom (forall a#210#0#0: Box, 
    a#210#1#0: Box, 
    a#210#2#0: Box, 
    a#210#3#0: Box, 
    a#210#4#0: Box, 
    a#210#5#0: Box, 
    a#210#6#0: Box, 
    a#210#7#0: Box, 
    a#210#8#0: Box, 
    a#210#9#0: Box, 
    a#210#10#0: Box, 
    a#210#11#0: Box, 
    a#210#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#210#0#0, 
      a#210#1#0, 
      a#210#2#0, 
      a#210#3#0, 
      a#210#4#0, 
      a#210#5#0, 
      a#210#6#0, 
      a#210#7#0, 
      a#210#8#0, 
      a#210#9#0, 
      a#210#10#0, 
      a#210#11#0, 
      a#210#12#0) } 
  DatatypeCtorId(#_System._tuple#13._#Make13(a#210#0#0, 
        a#210#1#0, 
        a#210#2#0, 
        a#210#3#0, 
        a#210#4#0, 
        a#210#5#0, 
        a#210#6#0, 
        a#210#7#0, 
        a#210#8#0, 
        a#210#9#0, 
        a#210#10#0, 
        a#210#11#0, 
        a#210#12#0))
     == ##_System._tuple#13._#Make13);
}

function _System.Tuple13.___hMake13_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple13.___hMake13_q(d) } 
  _System.Tuple13.___hMake13_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#13._#Make13);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple13.___hMake13_q(d) } 
  _System.Tuple13.___hMake13_q(d)
     ==> (exists a#211#0#0: Box, 
        a#211#1#0: Box, 
        a#211#2#0: Box, 
        a#211#3#0: Box, 
        a#211#4#0: Box, 
        a#211#5#0: Box, 
        a#211#6#0: Box, 
        a#211#7#0: Box, 
        a#211#8#0: Box, 
        a#211#9#0: Box, 
        a#211#10#0: Box, 
        a#211#11#0: Box, 
        a#211#12#0: Box :: 
      d
         == #_System._tuple#13._#Make13(a#211#0#0, 
          a#211#1#0, 
          a#211#2#0, 
          a#211#3#0, 
          a#211#4#0, 
          a#211#5#0, 
          a#211#6#0, 
          a#211#7#0, 
          a#211#8#0, 
          a#211#9#0, 
          a#211#10#0, 
          a#211#11#0, 
          a#211#12#0)));

function Tclass._System.Tuple13(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.Tuple13: TyTag;

// Tclass._System.Tuple13 Tag
axiom (forall _System._tuple#13$T0: Ty, 
    _System._tuple#13$T1: Ty, 
    _System._tuple#13$T2: Ty, 
    _System._tuple#13$T3: Ty, 
    _System._tuple#13$T4: Ty, 
    _System._tuple#13$T5: Ty, 
    _System._tuple#13$T6: Ty, 
    _System._tuple#13$T7: Ty, 
    _System._tuple#13$T8: Ty, 
    _System._tuple#13$T9: Ty, 
    _System._tuple#13$T10: Ty, 
    _System._tuple#13$T11: Ty, 
    _System._tuple#13$T12: Ty :: 
  { Tclass._System.Tuple13(_System._tuple#13$T0, 
      _System._tuple#13$T1, 
      _System._tuple#13$T2, 
      _System._tuple#13$T3, 
      _System._tuple#13$T4, 
      _System._tuple#13$T5, 
      _System._tuple#13$T6, 
      _System._tuple#13$T7, 
      _System._tuple#13$T8, 
      _System._tuple#13$T9, 
      _System._tuple#13$T10, 
      _System._tuple#13$T11, 
      _System._tuple#13$T12) } 
  Tag(Tclass._System.Tuple13(_System._tuple#13$T0, 
          _System._tuple#13$T1, 
          _System._tuple#13$T2, 
          _System._tuple#13$T3, 
          _System._tuple#13$T4, 
          _System._tuple#13$T5, 
          _System._tuple#13$T6, 
          _System._tuple#13$T7, 
          _System._tuple#13$T8, 
          _System._tuple#13$T9, 
          _System._tuple#13$T10, 
          _System._tuple#13$T11, 
          _System._tuple#13$T12))
       == Tagclass._System.Tuple13
     && TagFamily(Tclass._System.Tuple13(_System._tuple#13$T0, 
          _System._tuple#13$T1, 
          _System._tuple#13$T2, 
          _System._tuple#13$T3, 
          _System._tuple#13$T4, 
          _System._tuple#13$T5, 
          _System._tuple#13$T6, 
          _System._tuple#13$T7, 
          _System._tuple#13$T8, 
          _System._tuple#13$T9, 
          _System._tuple#13$T10, 
          _System._tuple#13$T11, 
          _System._tuple#13$T12))
       == tytagFamily$_tuple#13);

function Tclass._System.Tuple13_0(Ty) : Ty;

// Tclass._System.Tuple13 injectivity 0
axiom (forall _System._tuple#13$T0: Ty, 
    _System._tuple#13$T1: Ty, 
    _System._tuple#13$T2: Ty, 
    _System._tuple#13$T3: Ty, 
    _System._tuple#13$T4: Ty, 
    _System._tuple#13$T5: Ty, 
    _System._tuple#13$T6: Ty, 
    _System._tuple#13$T7: Ty, 
    _System._tuple#13$T8: Ty, 
    _System._tuple#13$T9: Ty, 
    _System._tuple#13$T10: Ty, 
    _System._tuple#13$T11: Ty, 
    _System._tuple#13$T12: Ty :: 
  { Tclass._System.Tuple13(_System._tuple#13$T0, 
      _System._tuple#13$T1, 
      _System._tuple#13$T2, 
      _System._tuple#13$T3, 
      _System._tuple#13$T4, 
      _System._tuple#13$T5, 
      _System._tuple#13$T6, 
      _System._tuple#13$T7, 
      _System._tuple#13$T8, 
      _System._tuple#13$T9, 
      _System._tuple#13$T10, 
      _System._tuple#13$T11, 
      _System._tuple#13$T12) } 
  Tclass._System.Tuple13_0(Tclass._System.Tuple13(_System._tuple#13$T0, 
        _System._tuple#13$T1, 
        _System._tuple#13$T2, 
        _System._tuple#13$T3, 
        _System._tuple#13$T4, 
        _System._tuple#13$T5, 
        _System._tuple#13$T6, 
        _System._tuple#13$T7, 
        _System._tuple#13$T8, 
        _System._tuple#13$T9, 
        _System._tuple#13$T10, 
        _System._tuple#13$T11, 
        _System._tuple#13$T12))
     == _System._tuple#13$T0);

function Tclass._System.Tuple13_1(Ty) : Ty;

// Tclass._System.Tuple13 injectivity 1
axiom (forall _System._tuple#13$T0: Ty, 
    _System._tuple#13$T1: Ty, 
    _System._tuple#13$T2: Ty, 
    _System._tuple#13$T3: Ty, 
    _System._tuple#13$T4: Ty, 
    _System._tuple#13$T5: Ty, 
    _System._tuple#13$T6: Ty, 
    _System._tuple#13$T7: Ty, 
    _System._tuple#13$T8: Ty, 
    _System._tuple#13$T9: Ty, 
    _System._tuple#13$T10: Ty, 
    _System._tuple#13$T11: Ty, 
    _System._tuple#13$T12: Ty :: 
  { Tclass._System.Tuple13(_System._tuple#13$T0, 
      _System._tuple#13$T1, 
      _System._tuple#13$T2, 
      _System._tuple#13$T3, 
      _System._tuple#13$T4, 
      _System._tuple#13$T5, 
      _System._tuple#13$T6, 
      _System._tuple#13$T7, 
      _System._tuple#13$T8, 
      _System._tuple#13$T9, 
      _System._tuple#13$T10, 
      _System._tuple#13$T11, 
      _System._tuple#13$T12) } 
  Tclass._System.Tuple13_1(Tclass._System.Tuple13(_System._tuple#13$T0, 
        _System._tuple#13$T1, 
        _System._tuple#13$T2, 
        _System._tuple#13$T3, 
        _System._tuple#13$T4, 
        _System._tuple#13$T5, 
        _System._tuple#13$T6, 
        _System._tuple#13$T7, 
        _System._tuple#13$T8, 
        _System._tuple#13$T9, 
        _System._tuple#13$T10, 
        _System._tuple#13$T11, 
        _System._tuple#13$T12))
     == _System._tuple#13$T1);

function Tclass._System.Tuple13_2(Ty) : Ty;

// Tclass._System.Tuple13 injectivity 2
axiom (forall _System._tuple#13$T0: Ty, 
    _System._tuple#13$T1: Ty, 
    _System._tuple#13$T2: Ty, 
    _System._tuple#13$T3: Ty, 
    _System._tuple#13$T4: Ty, 
    _System._tuple#13$T5: Ty, 
    _System._tuple#13$T6: Ty, 
    _System._tuple#13$T7: Ty, 
    _System._tuple#13$T8: Ty, 
    _System._tuple#13$T9: Ty, 
    _System._tuple#13$T10: Ty, 
    _System._tuple#13$T11: Ty, 
    _System._tuple#13$T12: Ty :: 
  { Tclass._System.Tuple13(_System._tuple#13$T0, 
      _System._tuple#13$T1, 
      _System._tuple#13$T2, 
      _System._tuple#13$T3, 
      _System._tuple#13$T4, 
      _System._tuple#13$T5, 
      _System._tuple#13$T6, 
      _System._tuple#13$T7, 
      _System._tuple#13$T8, 
      _System._tuple#13$T9, 
      _System._tuple#13$T10, 
      _System._tuple#13$T11, 
      _System._tuple#13$T12) } 
  Tclass._System.Tuple13_2(Tclass._System.Tuple13(_System._tuple#13$T0, 
        _System._tuple#13$T1, 
        _System._tuple#13$T2, 
        _System._tuple#13$T3, 
        _System._tuple#13$T4, 
        _System._tuple#13$T5, 
        _System._tuple#13$T6, 
        _System._tuple#13$T7, 
        _System._tuple#13$T8, 
        _System._tuple#13$T9, 
        _System._tuple#13$T10, 
        _System._tuple#13$T11, 
        _System._tuple#13$T12))
     == _System._tuple#13$T2);

function Tclass._System.Tuple13_3(Ty) : Ty;

// Tclass._System.Tuple13 injectivity 3
axiom (forall _System._tuple#13$T0: Ty, 
    _System._tuple#13$T1: Ty, 
    _System._tuple#13$T2: Ty, 
    _System._tuple#13$T3: Ty, 
    _System._tuple#13$T4: Ty, 
    _System._tuple#13$T5: Ty, 
    _System._tuple#13$T6: Ty, 
    _System._tuple#13$T7: Ty, 
    _System._tuple#13$T8: Ty, 
    _System._tuple#13$T9: Ty, 
    _System._tuple#13$T10: Ty, 
    _System._tuple#13$T11: Ty, 
    _System._tuple#13$T12: Ty :: 
  { Tclass._System.Tuple13(_System._tuple#13$T0, 
      _System._tuple#13$T1, 
      _System._tuple#13$T2, 
      _System._tuple#13$T3, 
      _System._tuple#13$T4, 
      _System._tuple#13$T5, 
      _System._tuple#13$T6, 
      _System._tuple#13$T7, 
      _System._tuple#13$T8, 
      _System._tuple#13$T9, 
      _System._tuple#13$T10, 
      _System._tuple#13$T11, 
      _System._tuple#13$T12) } 
  Tclass._System.Tuple13_3(Tclass._System.Tuple13(_System._tuple#13$T0, 
        _System._tuple#13$T1, 
        _System._tuple#13$T2, 
        _System._tuple#13$T3, 
        _System._tuple#13$T4, 
        _System._tuple#13$T5, 
        _System._tuple#13$T6, 
        _System._tuple#13$T7, 
        _System._tuple#13$T8, 
        _System._tuple#13$T9, 
        _System._tuple#13$T10, 
        _System._tuple#13$T11, 
        _System._tuple#13$T12))
     == _System._tuple#13$T3);

function Tclass._System.Tuple13_4(Ty) : Ty;

// Tclass._System.Tuple13 injectivity 4
axiom (forall _System._tuple#13$T0: Ty, 
    _System._tuple#13$T1: Ty, 
    _System._tuple#13$T2: Ty, 
    _System._tuple#13$T3: Ty, 
    _System._tuple#13$T4: Ty, 
    _System._tuple#13$T5: Ty, 
    _System._tuple#13$T6: Ty, 
    _System._tuple#13$T7: Ty, 
    _System._tuple#13$T8: Ty, 
    _System._tuple#13$T9: Ty, 
    _System._tuple#13$T10: Ty, 
    _System._tuple#13$T11: Ty, 
    _System._tuple#13$T12: Ty :: 
  { Tclass._System.Tuple13(_System._tuple#13$T0, 
      _System._tuple#13$T1, 
      _System._tuple#13$T2, 
      _System._tuple#13$T3, 
      _System._tuple#13$T4, 
      _System._tuple#13$T5, 
      _System._tuple#13$T6, 
      _System._tuple#13$T7, 
      _System._tuple#13$T8, 
      _System._tuple#13$T9, 
      _System._tuple#13$T10, 
      _System._tuple#13$T11, 
      _System._tuple#13$T12) } 
  Tclass._System.Tuple13_4(Tclass._System.Tuple13(_System._tuple#13$T0, 
        _System._tuple#13$T1, 
        _System._tuple#13$T2, 
        _System._tuple#13$T3, 
        _System._tuple#13$T4, 
        _System._tuple#13$T5, 
        _System._tuple#13$T6, 
        _System._tuple#13$T7, 
        _System._tuple#13$T8, 
        _System._tuple#13$T9, 
        _System._tuple#13$T10, 
        _System._tuple#13$T11, 
        _System._tuple#13$T12))
     == _System._tuple#13$T4);

function Tclass._System.Tuple13_5(Ty) : Ty;

// Tclass._System.Tuple13 injectivity 5
axiom (forall _System._tuple#13$T0: Ty, 
    _System._tuple#13$T1: Ty, 
    _System._tuple#13$T2: Ty, 
    _System._tuple#13$T3: Ty, 
    _System._tuple#13$T4: Ty, 
    _System._tuple#13$T5: Ty, 
    _System._tuple#13$T6: Ty, 
    _System._tuple#13$T7: Ty, 
    _System._tuple#13$T8: Ty, 
    _System._tuple#13$T9: Ty, 
    _System._tuple#13$T10: Ty, 
    _System._tuple#13$T11: Ty, 
    _System._tuple#13$T12: Ty :: 
  { Tclass._System.Tuple13(_System._tuple#13$T0, 
      _System._tuple#13$T1, 
      _System._tuple#13$T2, 
      _System._tuple#13$T3, 
      _System._tuple#13$T4, 
      _System._tuple#13$T5, 
      _System._tuple#13$T6, 
      _System._tuple#13$T7, 
      _System._tuple#13$T8, 
      _System._tuple#13$T9, 
      _System._tuple#13$T10, 
      _System._tuple#13$T11, 
      _System._tuple#13$T12) } 
  Tclass._System.Tuple13_5(Tclass._System.Tuple13(_System._tuple#13$T0, 
        _System._tuple#13$T1, 
        _System._tuple#13$T2, 
        _System._tuple#13$T3, 
        _System._tuple#13$T4, 
        _System._tuple#13$T5, 
        _System._tuple#13$T6, 
        _System._tuple#13$T7, 
        _System._tuple#13$T8, 
        _System._tuple#13$T9, 
        _System._tuple#13$T10, 
        _System._tuple#13$T11, 
        _System._tuple#13$T12))
     == _System._tuple#13$T5);

function Tclass._System.Tuple13_6(Ty) : Ty;

// Tclass._System.Tuple13 injectivity 6
axiom (forall _System._tuple#13$T0: Ty, 
    _System._tuple#13$T1: Ty, 
    _System._tuple#13$T2: Ty, 
    _System._tuple#13$T3: Ty, 
    _System._tuple#13$T4: Ty, 
    _System._tuple#13$T5: Ty, 
    _System._tuple#13$T6: Ty, 
    _System._tuple#13$T7: Ty, 
    _System._tuple#13$T8: Ty, 
    _System._tuple#13$T9: Ty, 
    _System._tuple#13$T10: Ty, 
    _System._tuple#13$T11: Ty, 
    _System._tuple#13$T12: Ty :: 
  { Tclass._System.Tuple13(_System._tuple#13$T0, 
      _System._tuple#13$T1, 
      _System._tuple#13$T2, 
      _System._tuple#13$T3, 
      _System._tuple#13$T4, 
      _System._tuple#13$T5, 
      _System._tuple#13$T6, 
      _System._tuple#13$T7, 
      _System._tuple#13$T8, 
      _System._tuple#13$T9, 
      _System._tuple#13$T10, 
      _System._tuple#13$T11, 
      _System._tuple#13$T12) } 
  Tclass._System.Tuple13_6(Tclass._System.Tuple13(_System._tuple#13$T0, 
        _System._tuple#13$T1, 
        _System._tuple#13$T2, 
        _System._tuple#13$T3, 
        _System._tuple#13$T4, 
        _System._tuple#13$T5, 
        _System._tuple#13$T6, 
        _System._tuple#13$T7, 
        _System._tuple#13$T8, 
        _System._tuple#13$T9, 
        _System._tuple#13$T10, 
        _System._tuple#13$T11, 
        _System._tuple#13$T12))
     == _System._tuple#13$T6);

function Tclass._System.Tuple13_7(Ty) : Ty;

// Tclass._System.Tuple13 injectivity 7
axiom (forall _System._tuple#13$T0: Ty, 
    _System._tuple#13$T1: Ty, 
    _System._tuple#13$T2: Ty, 
    _System._tuple#13$T3: Ty, 
    _System._tuple#13$T4: Ty, 
    _System._tuple#13$T5: Ty, 
    _System._tuple#13$T6: Ty, 
    _System._tuple#13$T7: Ty, 
    _System._tuple#13$T8: Ty, 
    _System._tuple#13$T9: Ty, 
    _System._tuple#13$T10: Ty, 
    _System._tuple#13$T11: Ty, 
    _System._tuple#13$T12: Ty :: 
  { Tclass._System.Tuple13(_System._tuple#13$T0, 
      _System._tuple#13$T1, 
      _System._tuple#13$T2, 
      _System._tuple#13$T3, 
      _System._tuple#13$T4, 
      _System._tuple#13$T5, 
      _System._tuple#13$T6, 
      _System._tuple#13$T7, 
      _System._tuple#13$T8, 
      _System._tuple#13$T9, 
      _System._tuple#13$T10, 
      _System._tuple#13$T11, 
      _System._tuple#13$T12) } 
  Tclass._System.Tuple13_7(Tclass._System.Tuple13(_System._tuple#13$T0, 
        _System._tuple#13$T1, 
        _System._tuple#13$T2, 
        _System._tuple#13$T3, 
        _System._tuple#13$T4, 
        _System._tuple#13$T5, 
        _System._tuple#13$T6, 
        _System._tuple#13$T7, 
        _System._tuple#13$T8, 
        _System._tuple#13$T9, 
        _System._tuple#13$T10, 
        _System._tuple#13$T11, 
        _System._tuple#13$T12))
     == _System._tuple#13$T7);

function Tclass._System.Tuple13_8(Ty) : Ty;

// Tclass._System.Tuple13 injectivity 8
axiom (forall _System._tuple#13$T0: Ty, 
    _System._tuple#13$T1: Ty, 
    _System._tuple#13$T2: Ty, 
    _System._tuple#13$T3: Ty, 
    _System._tuple#13$T4: Ty, 
    _System._tuple#13$T5: Ty, 
    _System._tuple#13$T6: Ty, 
    _System._tuple#13$T7: Ty, 
    _System._tuple#13$T8: Ty, 
    _System._tuple#13$T9: Ty, 
    _System._tuple#13$T10: Ty, 
    _System._tuple#13$T11: Ty, 
    _System._tuple#13$T12: Ty :: 
  { Tclass._System.Tuple13(_System._tuple#13$T0, 
      _System._tuple#13$T1, 
      _System._tuple#13$T2, 
      _System._tuple#13$T3, 
      _System._tuple#13$T4, 
      _System._tuple#13$T5, 
      _System._tuple#13$T6, 
      _System._tuple#13$T7, 
      _System._tuple#13$T8, 
      _System._tuple#13$T9, 
      _System._tuple#13$T10, 
      _System._tuple#13$T11, 
      _System._tuple#13$T12) } 
  Tclass._System.Tuple13_8(Tclass._System.Tuple13(_System._tuple#13$T0, 
        _System._tuple#13$T1, 
        _System._tuple#13$T2, 
        _System._tuple#13$T3, 
        _System._tuple#13$T4, 
        _System._tuple#13$T5, 
        _System._tuple#13$T6, 
        _System._tuple#13$T7, 
        _System._tuple#13$T8, 
        _System._tuple#13$T9, 
        _System._tuple#13$T10, 
        _System._tuple#13$T11, 
        _System._tuple#13$T12))
     == _System._tuple#13$T8);

function Tclass._System.Tuple13_9(Ty) : Ty;

// Tclass._System.Tuple13 injectivity 9
axiom (forall _System._tuple#13$T0: Ty, 
    _System._tuple#13$T1: Ty, 
    _System._tuple#13$T2: Ty, 
    _System._tuple#13$T3: Ty, 
    _System._tuple#13$T4: Ty, 
    _System._tuple#13$T5: Ty, 
    _System._tuple#13$T6: Ty, 
    _System._tuple#13$T7: Ty, 
    _System._tuple#13$T8: Ty, 
    _System._tuple#13$T9: Ty, 
    _System._tuple#13$T10: Ty, 
    _System._tuple#13$T11: Ty, 
    _System._tuple#13$T12: Ty :: 
  { Tclass._System.Tuple13(_System._tuple#13$T0, 
      _System._tuple#13$T1, 
      _System._tuple#13$T2, 
      _System._tuple#13$T3, 
      _System._tuple#13$T4, 
      _System._tuple#13$T5, 
      _System._tuple#13$T6, 
      _System._tuple#13$T7, 
      _System._tuple#13$T8, 
      _System._tuple#13$T9, 
      _System._tuple#13$T10, 
      _System._tuple#13$T11, 
      _System._tuple#13$T12) } 
  Tclass._System.Tuple13_9(Tclass._System.Tuple13(_System._tuple#13$T0, 
        _System._tuple#13$T1, 
        _System._tuple#13$T2, 
        _System._tuple#13$T3, 
        _System._tuple#13$T4, 
        _System._tuple#13$T5, 
        _System._tuple#13$T6, 
        _System._tuple#13$T7, 
        _System._tuple#13$T8, 
        _System._tuple#13$T9, 
        _System._tuple#13$T10, 
        _System._tuple#13$T11, 
        _System._tuple#13$T12))
     == _System._tuple#13$T9);

function Tclass._System.Tuple13_10(Ty) : Ty;

// Tclass._System.Tuple13 injectivity 10
axiom (forall _System._tuple#13$T0: Ty, 
    _System._tuple#13$T1: Ty, 
    _System._tuple#13$T2: Ty, 
    _System._tuple#13$T3: Ty, 
    _System._tuple#13$T4: Ty, 
    _System._tuple#13$T5: Ty, 
    _System._tuple#13$T6: Ty, 
    _System._tuple#13$T7: Ty, 
    _System._tuple#13$T8: Ty, 
    _System._tuple#13$T9: Ty, 
    _System._tuple#13$T10: Ty, 
    _System._tuple#13$T11: Ty, 
    _System._tuple#13$T12: Ty :: 
  { Tclass._System.Tuple13(_System._tuple#13$T0, 
      _System._tuple#13$T1, 
      _System._tuple#13$T2, 
      _System._tuple#13$T3, 
      _System._tuple#13$T4, 
      _System._tuple#13$T5, 
      _System._tuple#13$T6, 
      _System._tuple#13$T7, 
      _System._tuple#13$T8, 
      _System._tuple#13$T9, 
      _System._tuple#13$T10, 
      _System._tuple#13$T11, 
      _System._tuple#13$T12) } 
  Tclass._System.Tuple13_10(Tclass._System.Tuple13(_System._tuple#13$T0, 
        _System._tuple#13$T1, 
        _System._tuple#13$T2, 
        _System._tuple#13$T3, 
        _System._tuple#13$T4, 
        _System._tuple#13$T5, 
        _System._tuple#13$T6, 
        _System._tuple#13$T7, 
        _System._tuple#13$T8, 
        _System._tuple#13$T9, 
        _System._tuple#13$T10, 
        _System._tuple#13$T11, 
        _System._tuple#13$T12))
     == _System._tuple#13$T10);

function Tclass._System.Tuple13_11(Ty) : Ty;

// Tclass._System.Tuple13 injectivity 11
axiom (forall _System._tuple#13$T0: Ty, 
    _System._tuple#13$T1: Ty, 
    _System._tuple#13$T2: Ty, 
    _System._tuple#13$T3: Ty, 
    _System._tuple#13$T4: Ty, 
    _System._tuple#13$T5: Ty, 
    _System._tuple#13$T6: Ty, 
    _System._tuple#13$T7: Ty, 
    _System._tuple#13$T8: Ty, 
    _System._tuple#13$T9: Ty, 
    _System._tuple#13$T10: Ty, 
    _System._tuple#13$T11: Ty, 
    _System._tuple#13$T12: Ty :: 
  { Tclass._System.Tuple13(_System._tuple#13$T0, 
      _System._tuple#13$T1, 
      _System._tuple#13$T2, 
      _System._tuple#13$T3, 
      _System._tuple#13$T4, 
      _System._tuple#13$T5, 
      _System._tuple#13$T6, 
      _System._tuple#13$T7, 
      _System._tuple#13$T8, 
      _System._tuple#13$T9, 
      _System._tuple#13$T10, 
      _System._tuple#13$T11, 
      _System._tuple#13$T12) } 
  Tclass._System.Tuple13_11(Tclass._System.Tuple13(_System._tuple#13$T0, 
        _System._tuple#13$T1, 
        _System._tuple#13$T2, 
        _System._tuple#13$T3, 
        _System._tuple#13$T4, 
        _System._tuple#13$T5, 
        _System._tuple#13$T6, 
        _System._tuple#13$T7, 
        _System._tuple#13$T8, 
        _System._tuple#13$T9, 
        _System._tuple#13$T10, 
        _System._tuple#13$T11, 
        _System._tuple#13$T12))
     == _System._tuple#13$T11);

function Tclass._System.Tuple13_12(Ty) : Ty;

// Tclass._System.Tuple13 injectivity 12
axiom (forall _System._tuple#13$T0: Ty, 
    _System._tuple#13$T1: Ty, 
    _System._tuple#13$T2: Ty, 
    _System._tuple#13$T3: Ty, 
    _System._tuple#13$T4: Ty, 
    _System._tuple#13$T5: Ty, 
    _System._tuple#13$T6: Ty, 
    _System._tuple#13$T7: Ty, 
    _System._tuple#13$T8: Ty, 
    _System._tuple#13$T9: Ty, 
    _System._tuple#13$T10: Ty, 
    _System._tuple#13$T11: Ty, 
    _System._tuple#13$T12: Ty :: 
  { Tclass._System.Tuple13(_System._tuple#13$T0, 
      _System._tuple#13$T1, 
      _System._tuple#13$T2, 
      _System._tuple#13$T3, 
      _System._tuple#13$T4, 
      _System._tuple#13$T5, 
      _System._tuple#13$T6, 
      _System._tuple#13$T7, 
      _System._tuple#13$T8, 
      _System._tuple#13$T9, 
      _System._tuple#13$T10, 
      _System._tuple#13$T11, 
      _System._tuple#13$T12) } 
  Tclass._System.Tuple13_12(Tclass._System.Tuple13(_System._tuple#13$T0, 
        _System._tuple#13$T1, 
        _System._tuple#13$T2, 
        _System._tuple#13$T3, 
        _System._tuple#13$T4, 
        _System._tuple#13$T5, 
        _System._tuple#13$T6, 
        _System._tuple#13$T7, 
        _System._tuple#13$T8, 
        _System._tuple#13$T9, 
        _System._tuple#13$T10, 
        _System._tuple#13$T11, 
        _System._tuple#13$T12))
     == _System._tuple#13$T12);

// Box/unbox axiom for Tclass._System.Tuple13
axiom (forall _System._tuple#13$T0: Ty, 
    _System._tuple#13$T1: Ty, 
    _System._tuple#13$T2: Ty, 
    _System._tuple#13$T3: Ty, 
    _System._tuple#13$T4: Ty, 
    _System._tuple#13$T5: Ty, 
    _System._tuple#13$T6: Ty, 
    _System._tuple#13$T7: Ty, 
    _System._tuple#13$T8: Ty, 
    _System._tuple#13$T9: Ty, 
    _System._tuple#13$T10: Ty, 
    _System._tuple#13$T11: Ty, 
    _System._tuple#13$T12: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.Tuple13(_System._tuple#13$T0, 
        _System._tuple#13$T1, 
        _System._tuple#13$T2, 
        _System._tuple#13$T3, 
        _System._tuple#13$T4, 
        _System._tuple#13$T5, 
        _System._tuple#13$T6, 
        _System._tuple#13$T7, 
        _System._tuple#13$T8, 
        _System._tuple#13$T9, 
        _System._tuple#13$T10, 
        _System._tuple#13$T11, 
        _System._tuple#13$T12)) } 
  $IsBox(bx, 
      Tclass._System.Tuple13(_System._tuple#13$T0, 
        _System._tuple#13$T1, 
        _System._tuple#13$T2, 
        _System._tuple#13$T3, 
        _System._tuple#13$T4, 
        _System._tuple#13$T5, 
        _System._tuple#13$T6, 
        _System._tuple#13$T7, 
        _System._tuple#13$T8, 
        _System._tuple#13$T9, 
        _System._tuple#13$T10, 
        _System._tuple#13$T11, 
        _System._tuple#13$T12))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple13(_System._tuple#13$T0, 
          _System._tuple#13$T1, 
          _System._tuple#13$T2, 
          _System._tuple#13$T3, 
          _System._tuple#13$T4, 
          _System._tuple#13$T5, 
          _System._tuple#13$T6, 
          _System._tuple#13$T7, 
          _System._tuple#13$T8, 
          _System._tuple#13$T9, 
          _System._tuple#13$T10, 
          _System._tuple#13$T11, 
          _System._tuple#13$T12)));

// Constructor $Is
axiom (forall _System._tuple#13$T0: Ty, 
    _System._tuple#13$T1: Ty, 
    _System._tuple#13$T2: Ty, 
    _System._tuple#13$T3: Ty, 
    _System._tuple#13$T4: Ty, 
    _System._tuple#13$T5: Ty, 
    _System._tuple#13$T6: Ty, 
    _System._tuple#13$T7: Ty, 
    _System._tuple#13$T8: Ty, 
    _System._tuple#13$T9: Ty, 
    _System._tuple#13$T10: Ty, 
    _System._tuple#13$T11: Ty, 
    _System._tuple#13$T12: Ty, 
    a#212#0#0: Box, 
    a#212#1#0: Box, 
    a#212#2#0: Box, 
    a#212#3#0: Box, 
    a#212#4#0: Box, 
    a#212#5#0: Box, 
    a#212#6#0: Box, 
    a#212#7#0: Box, 
    a#212#8#0: Box, 
    a#212#9#0: Box, 
    a#212#10#0: Box, 
    a#212#11#0: Box, 
    a#212#12#0: Box :: 
  { $Is(#_System._tuple#13._#Make13(a#212#0#0, 
        a#212#1#0, 
        a#212#2#0, 
        a#212#3#0, 
        a#212#4#0, 
        a#212#5#0, 
        a#212#6#0, 
        a#212#7#0, 
        a#212#8#0, 
        a#212#9#0, 
        a#212#10#0, 
        a#212#11#0, 
        a#212#12#0), 
      Tclass._System.Tuple13(_System._tuple#13$T0, 
        _System._tuple#13$T1, 
        _System._tuple#13$T2, 
        _System._tuple#13$T3, 
        _System._tuple#13$T4, 
        _System._tuple#13$T5, 
        _System._tuple#13$T6, 
        _System._tuple#13$T7, 
        _System._tuple#13$T8, 
        _System._tuple#13$T9, 
        _System._tuple#13$T10, 
        _System._tuple#13$T11, 
        _System._tuple#13$T12)) } 
  $Is(#_System._tuple#13._#Make13(a#212#0#0, 
        a#212#1#0, 
        a#212#2#0, 
        a#212#3#0, 
        a#212#4#0, 
        a#212#5#0, 
        a#212#6#0, 
        a#212#7#0, 
        a#212#8#0, 
        a#212#9#0, 
        a#212#10#0, 
        a#212#11#0, 
        a#212#12#0), 
      Tclass._System.Tuple13(_System._tuple#13$T0, 
        _System._tuple#13$T1, 
        _System._tuple#13$T2, 
        _System._tuple#13$T3, 
        _System._tuple#13$T4, 
        _System._tuple#13$T5, 
        _System._tuple#13$T6, 
        _System._tuple#13$T7, 
        _System._tuple#13$T8, 
        _System._tuple#13$T9, 
        _System._tuple#13$T10, 
        _System._tuple#13$T11, 
        _System._tuple#13$T12))
     <==> $IsBox(a#212#0#0, _System._tuple#13$T0)
       && $IsBox(a#212#1#0, _System._tuple#13$T1)
       && $IsBox(a#212#2#0, _System._tuple#13$T2)
       && $IsBox(a#212#3#0, _System._tuple#13$T3)
       && $IsBox(a#212#4#0, _System._tuple#13$T4)
       && $IsBox(a#212#5#0, _System._tuple#13$T5)
       && $IsBox(a#212#6#0, _System._tuple#13$T6)
       && $IsBox(a#212#7#0, _System._tuple#13$T7)
       && $IsBox(a#212#8#0, _System._tuple#13$T8)
       && $IsBox(a#212#9#0, _System._tuple#13$T9)
       && $IsBox(a#212#10#0, _System._tuple#13$T10)
       && $IsBox(a#212#11#0, _System._tuple#13$T11)
       && $IsBox(a#212#12#0, _System._tuple#13$T12));

// Constructor $IsAlloc
axiom (forall _System._tuple#13$T0: Ty, 
    _System._tuple#13$T1: Ty, 
    _System._tuple#13$T2: Ty, 
    _System._tuple#13$T3: Ty, 
    _System._tuple#13$T4: Ty, 
    _System._tuple#13$T5: Ty, 
    _System._tuple#13$T6: Ty, 
    _System._tuple#13$T7: Ty, 
    _System._tuple#13$T8: Ty, 
    _System._tuple#13$T9: Ty, 
    _System._tuple#13$T10: Ty, 
    _System._tuple#13$T11: Ty, 
    _System._tuple#13$T12: Ty, 
    a#212#0#0: Box, 
    a#212#1#0: Box, 
    a#212#2#0: Box, 
    a#212#3#0: Box, 
    a#212#4#0: Box, 
    a#212#5#0: Box, 
    a#212#6#0: Box, 
    a#212#7#0: Box, 
    a#212#8#0: Box, 
    a#212#9#0: Box, 
    a#212#10#0: Box, 
    a#212#11#0: Box, 
    a#212#12#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#13._#Make13(a#212#0#0, 
        a#212#1#0, 
        a#212#2#0, 
        a#212#3#0, 
        a#212#4#0, 
        a#212#5#0, 
        a#212#6#0, 
        a#212#7#0, 
        a#212#8#0, 
        a#212#9#0, 
        a#212#10#0, 
        a#212#11#0, 
        a#212#12#0), 
      Tclass._System.Tuple13(_System._tuple#13$T0, 
        _System._tuple#13$T1, 
        _System._tuple#13$T2, 
        _System._tuple#13$T3, 
        _System._tuple#13$T4, 
        _System._tuple#13$T5, 
        _System._tuple#13$T6, 
        _System._tuple#13$T7, 
        _System._tuple#13$T8, 
        _System._tuple#13$T9, 
        _System._tuple#13$T10, 
        _System._tuple#13$T11, 
        _System._tuple#13$T12), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#13._#Make13(a#212#0#0, 
          a#212#1#0, 
          a#212#2#0, 
          a#212#3#0, 
          a#212#4#0, 
          a#212#5#0, 
          a#212#6#0, 
          a#212#7#0, 
          a#212#8#0, 
          a#212#9#0, 
          a#212#10#0, 
          a#212#11#0, 
          a#212#12#0), 
        Tclass._System.Tuple13(_System._tuple#13$T0, 
          _System._tuple#13$T1, 
          _System._tuple#13$T2, 
          _System._tuple#13$T3, 
          _System._tuple#13$T4, 
          _System._tuple#13$T5, 
          _System._tuple#13$T6, 
          _System._tuple#13$T7, 
          _System._tuple#13$T8, 
          _System._tuple#13$T9, 
          _System._tuple#13$T10, 
          _System._tuple#13$T11, 
          _System._tuple#13$T12), 
        $h)
       <==> $IsAllocBox(a#212#0#0, _System._tuple#13$T0, $h)
         && $IsAllocBox(a#212#1#0, _System._tuple#13$T1, $h)
         && $IsAllocBox(a#212#2#0, _System._tuple#13$T2, $h)
         && $IsAllocBox(a#212#3#0, _System._tuple#13$T3, $h)
         && $IsAllocBox(a#212#4#0, _System._tuple#13$T4, $h)
         && $IsAllocBox(a#212#5#0, _System._tuple#13$T5, $h)
         && $IsAllocBox(a#212#6#0, _System._tuple#13$T6, $h)
         && $IsAllocBox(a#212#7#0, _System._tuple#13$T7, $h)
         && $IsAllocBox(a#212#8#0, _System._tuple#13$T8, $h)
         && $IsAllocBox(a#212#9#0, _System._tuple#13$T9, $h)
         && $IsAllocBox(a#212#10#0, _System._tuple#13$T10, $h)
         && $IsAllocBox(a#212#11#0, _System._tuple#13$T11, $h)
         && $IsAllocBox(a#212#12#0, _System._tuple#13$T12, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#13$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple13._0(d), _System._tuple#13$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple13.___hMake13_q(d)
       && (exists _System._tuple#13$T1: Ty, 
          _System._tuple#13$T2: Ty, 
          _System._tuple#13$T3: Ty, 
          _System._tuple#13$T4: Ty, 
          _System._tuple#13$T5: Ty, 
          _System._tuple#13$T6: Ty, 
          _System._tuple#13$T7: Ty, 
          _System._tuple#13$T8: Ty, 
          _System._tuple#13$T9: Ty, 
          _System._tuple#13$T10: Ty, 
          _System._tuple#13$T11: Ty, 
          _System._tuple#13$T12: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple13(_System._tuple#13$T0, 
              _System._tuple#13$T1, 
              _System._tuple#13$T2, 
              _System._tuple#13$T3, 
              _System._tuple#13$T4, 
              _System._tuple#13$T5, 
              _System._tuple#13$T6, 
              _System._tuple#13$T7, 
              _System._tuple#13$T8, 
              _System._tuple#13$T9, 
              _System._tuple#13$T10, 
              _System._tuple#13$T11, 
              _System._tuple#13$T12), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple13(_System._tuple#13$T0, 
            _System._tuple#13$T1, 
            _System._tuple#13$T2, 
            _System._tuple#13$T3, 
            _System._tuple#13$T4, 
            _System._tuple#13$T5, 
            _System._tuple#13$T6, 
            _System._tuple#13$T7, 
            _System._tuple#13$T8, 
            _System._tuple#13$T9, 
            _System._tuple#13$T10, 
            _System._tuple#13$T11, 
            _System._tuple#13$T12), 
          $h))
     ==> $IsAllocBox(_System.Tuple13._0(d), _System._tuple#13$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#13$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple13._1(d), _System._tuple#13$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple13.___hMake13_q(d)
       && (exists _System._tuple#13$T0: Ty, 
          _System._tuple#13$T2: Ty, 
          _System._tuple#13$T3: Ty, 
          _System._tuple#13$T4: Ty, 
          _System._tuple#13$T5: Ty, 
          _System._tuple#13$T6: Ty, 
          _System._tuple#13$T7: Ty, 
          _System._tuple#13$T8: Ty, 
          _System._tuple#13$T9: Ty, 
          _System._tuple#13$T10: Ty, 
          _System._tuple#13$T11: Ty, 
          _System._tuple#13$T12: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple13(_System._tuple#13$T0, 
              _System._tuple#13$T1, 
              _System._tuple#13$T2, 
              _System._tuple#13$T3, 
              _System._tuple#13$T4, 
              _System._tuple#13$T5, 
              _System._tuple#13$T6, 
              _System._tuple#13$T7, 
              _System._tuple#13$T8, 
              _System._tuple#13$T9, 
              _System._tuple#13$T10, 
              _System._tuple#13$T11, 
              _System._tuple#13$T12), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple13(_System._tuple#13$T0, 
            _System._tuple#13$T1, 
            _System._tuple#13$T2, 
            _System._tuple#13$T3, 
            _System._tuple#13$T4, 
            _System._tuple#13$T5, 
            _System._tuple#13$T6, 
            _System._tuple#13$T7, 
            _System._tuple#13$T8, 
            _System._tuple#13$T9, 
            _System._tuple#13$T10, 
            _System._tuple#13$T11, 
            _System._tuple#13$T12), 
          $h))
     ==> $IsAllocBox(_System.Tuple13._1(d), _System._tuple#13$T1, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#13$T2: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple13._2(d), _System._tuple#13$T2, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple13.___hMake13_q(d)
       && (exists _System._tuple#13$T0: Ty, 
          _System._tuple#13$T1: Ty, 
          _System._tuple#13$T3: Ty, 
          _System._tuple#13$T4: Ty, 
          _System._tuple#13$T5: Ty, 
          _System._tuple#13$T6: Ty, 
          _System._tuple#13$T7: Ty, 
          _System._tuple#13$T8: Ty, 
          _System._tuple#13$T9: Ty, 
          _System._tuple#13$T10: Ty, 
          _System._tuple#13$T11: Ty, 
          _System._tuple#13$T12: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple13(_System._tuple#13$T0, 
              _System._tuple#13$T1, 
              _System._tuple#13$T2, 
              _System._tuple#13$T3, 
              _System._tuple#13$T4, 
              _System._tuple#13$T5, 
              _System._tuple#13$T6, 
              _System._tuple#13$T7, 
              _System._tuple#13$T8, 
              _System._tuple#13$T9, 
              _System._tuple#13$T10, 
              _System._tuple#13$T11, 
              _System._tuple#13$T12), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple13(_System._tuple#13$T0, 
            _System._tuple#13$T1, 
            _System._tuple#13$T2, 
            _System._tuple#13$T3, 
            _System._tuple#13$T4, 
            _System._tuple#13$T5, 
            _System._tuple#13$T6, 
            _System._tuple#13$T7, 
            _System._tuple#13$T8, 
            _System._tuple#13$T9, 
            _System._tuple#13$T10, 
            _System._tuple#13$T11, 
            _System._tuple#13$T12), 
          $h))
     ==> $IsAllocBox(_System.Tuple13._2(d), _System._tuple#13$T2, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#13$T3: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple13._3(d), _System._tuple#13$T3, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple13.___hMake13_q(d)
       && (exists _System._tuple#13$T0: Ty, 
          _System._tuple#13$T1: Ty, 
          _System._tuple#13$T2: Ty, 
          _System._tuple#13$T4: Ty, 
          _System._tuple#13$T5: Ty, 
          _System._tuple#13$T6: Ty, 
          _System._tuple#13$T7: Ty, 
          _System._tuple#13$T8: Ty, 
          _System._tuple#13$T9: Ty, 
          _System._tuple#13$T10: Ty, 
          _System._tuple#13$T11: Ty, 
          _System._tuple#13$T12: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple13(_System._tuple#13$T0, 
              _System._tuple#13$T1, 
              _System._tuple#13$T2, 
              _System._tuple#13$T3, 
              _System._tuple#13$T4, 
              _System._tuple#13$T5, 
              _System._tuple#13$T6, 
              _System._tuple#13$T7, 
              _System._tuple#13$T8, 
              _System._tuple#13$T9, 
              _System._tuple#13$T10, 
              _System._tuple#13$T11, 
              _System._tuple#13$T12), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple13(_System._tuple#13$T0, 
            _System._tuple#13$T1, 
            _System._tuple#13$T2, 
            _System._tuple#13$T3, 
            _System._tuple#13$T4, 
            _System._tuple#13$T5, 
            _System._tuple#13$T6, 
            _System._tuple#13$T7, 
            _System._tuple#13$T8, 
            _System._tuple#13$T9, 
            _System._tuple#13$T10, 
            _System._tuple#13$T11, 
            _System._tuple#13$T12), 
          $h))
     ==> $IsAllocBox(_System.Tuple13._3(d), _System._tuple#13$T3, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#13$T4: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple13._4(d), _System._tuple#13$T4, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple13.___hMake13_q(d)
       && (exists _System._tuple#13$T0: Ty, 
          _System._tuple#13$T1: Ty, 
          _System._tuple#13$T2: Ty, 
          _System._tuple#13$T3: Ty, 
          _System._tuple#13$T5: Ty, 
          _System._tuple#13$T6: Ty, 
          _System._tuple#13$T7: Ty, 
          _System._tuple#13$T8: Ty, 
          _System._tuple#13$T9: Ty, 
          _System._tuple#13$T10: Ty, 
          _System._tuple#13$T11: Ty, 
          _System._tuple#13$T12: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple13(_System._tuple#13$T0, 
              _System._tuple#13$T1, 
              _System._tuple#13$T2, 
              _System._tuple#13$T3, 
              _System._tuple#13$T4, 
              _System._tuple#13$T5, 
              _System._tuple#13$T6, 
              _System._tuple#13$T7, 
              _System._tuple#13$T8, 
              _System._tuple#13$T9, 
              _System._tuple#13$T10, 
              _System._tuple#13$T11, 
              _System._tuple#13$T12), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple13(_System._tuple#13$T0, 
            _System._tuple#13$T1, 
            _System._tuple#13$T2, 
            _System._tuple#13$T3, 
            _System._tuple#13$T4, 
            _System._tuple#13$T5, 
            _System._tuple#13$T6, 
            _System._tuple#13$T7, 
            _System._tuple#13$T8, 
            _System._tuple#13$T9, 
            _System._tuple#13$T10, 
            _System._tuple#13$T11, 
            _System._tuple#13$T12), 
          $h))
     ==> $IsAllocBox(_System.Tuple13._4(d), _System._tuple#13$T4, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#13$T5: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple13._5(d), _System._tuple#13$T5, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple13.___hMake13_q(d)
       && (exists _System._tuple#13$T0: Ty, 
          _System._tuple#13$T1: Ty, 
          _System._tuple#13$T2: Ty, 
          _System._tuple#13$T3: Ty, 
          _System._tuple#13$T4: Ty, 
          _System._tuple#13$T6: Ty, 
          _System._tuple#13$T7: Ty, 
          _System._tuple#13$T8: Ty, 
          _System._tuple#13$T9: Ty, 
          _System._tuple#13$T10: Ty, 
          _System._tuple#13$T11: Ty, 
          _System._tuple#13$T12: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple13(_System._tuple#13$T0, 
              _System._tuple#13$T1, 
              _System._tuple#13$T2, 
              _System._tuple#13$T3, 
              _System._tuple#13$T4, 
              _System._tuple#13$T5, 
              _System._tuple#13$T6, 
              _System._tuple#13$T7, 
              _System._tuple#13$T8, 
              _System._tuple#13$T9, 
              _System._tuple#13$T10, 
              _System._tuple#13$T11, 
              _System._tuple#13$T12), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple13(_System._tuple#13$T0, 
            _System._tuple#13$T1, 
            _System._tuple#13$T2, 
            _System._tuple#13$T3, 
            _System._tuple#13$T4, 
            _System._tuple#13$T5, 
            _System._tuple#13$T6, 
            _System._tuple#13$T7, 
            _System._tuple#13$T8, 
            _System._tuple#13$T9, 
            _System._tuple#13$T10, 
            _System._tuple#13$T11, 
            _System._tuple#13$T12), 
          $h))
     ==> $IsAllocBox(_System.Tuple13._5(d), _System._tuple#13$T5, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#13$T6: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple13._6(d), _System._tuple#13$T6, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple13.___hMake13_q(d)
       && (exists _System._tuple#13$T0: Ty, 
          _System._tuple#13$T1: Ty, 
          _System._tuple#13$T2: Ty, 
          _System._tuple#13$T3: Ty, 
          _System._tuple#13$T4: Ty, 
          _System._tuple#13$T5: Ty, 
          _System._tuple#13$T7: Ty, 
          _System._tuple#13$T8: Ty, 
          _System._tuple#13$T9: Ty, 
          _System._tuple#13$T10: Ty, 
          _System._tuple#13$T11: Ty, 
          _System._tuple#13$T12: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple13(_System._tuple#13$T0, 
              _System._tuple#13$T1, 
              _System._tuple#13$T2, 
              _System._tuple#13$T3, 
              _System._tuple#13$T4, 
              _System._tuple#13$T5, 
              _System._tuple#13$T6, 
              _System._tuple#13$T7, 
              _System._tuple#13$T8, 
              _System._tuple#13$T9, 
              _System._tuple#13$T10, 
              _System._tuple#13$T11, 
              _System._tuple#13$T12), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple13(_System._tuple#13$T0, 
            _System._tuple#13$T1, 
            _System._tuple#13$T2, 
            _System._tuple#13$T3, 
            _System._tuple#13$T4, 
            _System._tuple#13$T5, 
            _System._tuple#13$T6, 
            _System._tuple#13$T7, 
            _System._tuple#13$T8, 
            _System._tuple#13$T9, 
            _System._tuple#13$T10, 
            _System._tuple#13$T11, 
            _System._tuple#13$T12), 
          $h))
     ==> $IsAllocBox(_System.Tuple13._6(d), _System._tuple#13$T6, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#13$T7: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple13._7(d), _System._tuple#13$T7, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple13.___hMake13_q(d)
       && (exists _System._tuple#13$T0: Ty, 
          _System._tuple#13$T1: Ty, 
          _System._tuple#13$T2: Ty, 
          _System._tuple#13$T3: Ty, 
          _System._tuple#13$T4: Ty, 
          _System._tuple#13$T5: Ty, 
          _System._tuple#13$T6: Ty, 
          _System._tuple#13$T8: Ty, 
          _System._tuple#13$T9: Ty, 
          _System._tuple#13$T10: Ty, 
          _System._tuple#13$T11: Ty, 
          _System._tuple#13$T12: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple13(_System._tuple#13$T0, 
              _System._tuple#13$T1, 
              _System._tuple#13$T2, 
              _System._tuple#13$T3, 
              _System._tuple#13$T4, 
              _System._tuple#13$T5, 
              _System._tuple#13$T6, 
              _System._tuple#13$T7, 
              _System._tuple#13$T8, 
              _System._tuple#13$T9, 
              _System._tuple#13$T10, 
              _System._tuple#13$T11, 
              _System._tuple#13$T12), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple13(_System._tuple#13$T0, 
            _System._tuple#13$T1, 
            _System._tuple#13$T2, 
            _System._tuple#13$T3, 
            _System._tuple#13$T4, 
            _System._tuple#13$T5, 
            _System._tuple#13$T6, 
            _System._tuple#13$T7, 
            _System._tuple#13$T8, 
            _System._tuple#13$T9, 
            _System._tuple#13$T10, 
            _System._tuple#13$T11, 
            _System._tuple#13$T12), 
          $h))
     ==> $IsAllocBox(_System.Tuple13._7(d), _System._tuple#13$T7, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#13$T8: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple13._8(d), _System._tuple#13$T8, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple13.___hMake13_q(d)
       && (exists _System._tuple#13$T0: Ty, 
          _System._tuple#13$T1: Ty, 
          _System._tuple#13$T2: Ty, 
          _System._tuple#13$T3: Ty, 
          _System._tuple#13$T4: Ty, 
          _System._tuple#13$T5: Ty, 
          _System._tuple#13$T6: Ty, 
          _System._tuple#13$T7: Ty, 
          _System._tuple#13$T9: Ty, 
          _System._tuple#13$T10: Ty, 
          _System._tuple#13$T11: Ty, 
          _System._tuple#13$T12: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple13(_System._tuple#13$T0, 
              _System._tuple#13$T1, 
              _System._tuple#13$T2, 
              _System._tuple#13$T3, 
              _System._tuple#13$T4, 
              _System._tuple#13$T5, 
              _System._tuple#13$T6, 
              _System._tuple#13$T7, 
              _System._tuple#13$T8, 
              _System._tuple#13$T9, 
              _System._tuple#13$T10, 
              _System._tuple#13$T11, 
              _System._tuple#13$T12), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple13(_System._tuple#13$T0, 
            _System._tuple#13$T1, 
            _System._tuple#13$T2, 
            _System._tuple#13$T3, 
            _System._tuple#13$T4, 
            _System._tuple#13$T5, 
            _System._tuple#13$T6, 
            _System._tuple#13$T7, 
            _System._tuple#13$T8, 
            _System._tuple#13$T9, 
            _System._tuple#13$T10, 
            _System._tuple#13$T11, 
            _System._tuple#13$T12), 
          $h))
     ==> $IsAllocBox(_System.Tuple13._8(d), _System._tuple#13$T8, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#13$T9: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple13._9(d), _System._tuple#13$T9, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple13.___hMake13_q(d)
       && (exists _System._tuple#13$T0: Ty, 
          _System._tuple#13$T1: Ty, 
          _System._tuple#13$T2: Ty, 
          _System._tuple#13$T3: Ty, 
          _System._tuple#13$T4: Ty, 
          _System._tuple#13$T5: Ty, 
          _System._tuple#13$T6: Ty, 
          _System._tuple#13$T7: Ty, 
          _System._tuple#13$T8: Ty, 
          _System._tuple#13$T10: Ty, 
          _System._tuple#13$T11: Ty, 
          _System._tuple#13$T12: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple13(_System._tuple#13$T0, 
              _System._tuple#13$T1, 
              _System._tuple#13$T2, 
              _System._tuple#13$T3, 
              _System._tuple#13$T4, 
              _System._tuple#13$T5, 
              _System._tuple#13$T6, 
              _System._tuple#13$T7, 
              _System._tuple#13$T8, 
              _System._tuple#13$T9, 
              _System._tuple#13$T10, 
              _System._tuple#13$T11, 
              _System._tuple#13$T12), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple13(_System._tuple#13$T0, 
            _System._tuple#13$T1, 
            _System._tuple#13$T2, 
            _System._tuple#13$T3, 
            _System._tuple#13$T4, 
            _System._tuple#13$T5, 
            _System._tuple#13$T6, 
            _System._tuple#13$T7, 
            _System._tuple#13$T8, 
            _System._tuple#13$T9, 
            _System._tuple#13$T10, 
            _System._tuple#13$T11, 
            _System._tuple#13$T12), 
          $h))
     ==> $IsAllocBox(_System.Tuple13._9(d), _System._tuple#13$T9, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#13$T10: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple13._10(d), _System._tuple#13$T10, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple13.___hMake13_q(d)
       && (exists _System._tuple#13$T0: Ty, 
          _System._tuple#13$T1: Ty, 
          _System._tuple#13$T2: Ty, 
          _System._tuple#13$T3: Ty, 
          _System._tuple#13$T4: Ty, 
          _System._tuple#13$T5: Ty, 
          _System._tuple#13$T6: Ty, 
          _System._tuple#13$T7: Ty, 
          _System._tuple#13$T8: Ty, 
          _System._tuple#13$T9: Ty, 
          _System._tuple#13$T11: Ty, 
          _System._tuple#13$T12: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple13(_System._tuple#13$T0, 
              _System._tuple#13$T1, 
              _System._tuple#13$T2, 
              _System._tuple#13$T3, 
              _System._tuple#13$T4, 
              _System._tuple#13$T5, 
              _System._tuple#13$T6, 
              _System._tuple#13$T7, 
              _System._tuple#13$T8, 
              _System._tuple#13$T9, 
              _System._tuple#13$T10, 
              _System._tuple#13$T11, 
              _System._tuple#13$T12), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple13(_System._tuple#13$T0, 
            _System._tuple#13$T1, 
            _System._tuple#13$T2, 
            _System._tuple#13$T3, 
            _System._tuple#13$T4, 
            _System._tuple#13$T5, 
            _System._tuple#13$T6, 
            _System._tuple#13$T7, 
            _System._tuple#13$T8, 
            _System._tuple#13$T9, 
            _System._tuple#13$T10, 
            _System._tuple#13$T11, 
            _System._tuple#13$T12), 
          $h))
     ==> $IsAllocBox(_System.Tuple13._10(d), _System._tuple#13$T10, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#13$T11: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple13._11(d), _System._tuple#13$T11, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple13.___hMake13_q(d)
       && (exists _System._tuple#13$T0: Ty, 
          _System._tuple#13$T1: Ty, 
          _System._tuple#13$T2: Ty, 
          _System._tuple#13$T3: Ty, 
          _System._tuple#13$T4: Ty, 
          _System._tuple#13$T5: Ty, 
          _System._tuple#13$T6: Ty, 
          _System._tuple#13$T7: Ty, 
          _System._tuple#13$T8: Ty, 
          _System._tuple#13$T9: Ty, 
          _System._tuple#13$T10: Ty, 
          _System._tuple#13$T12: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple13(_System._tuple#13$T0, 
              _System._tuple#13$T1, 
              _System._tuple#13$T2, 
              _System._tuple#13$T3, 
              _System._tuple#13$T4, 
              _System._tuple#13$T5, 
              _System._tuple#13$T6, 
              _System._tuple#13$T7, 
              _System._tuple#13$T8, 
              _System._tuple#13$T9, 
              _System._tuple#13$T10, 
              _System._tuple#13$T11, 
              _System._tuple#13$T12), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple13(_System._tuple#13$T0, 
            _System._tuple#13$T1, 
            _System._tuple#13$T2, 
            _System._tuple#13$T3, 
            _System._tuple#13$T4, 
            _System._tuple#13$T5, 
            _System._tuple#13$T6, 
            _System._tuple#13$T7, 
            _System._tuple#13$T8, 
            _System._tuple#13$T9, 
            _System._tuple#13$T10, 
            _System._tuple#13$T11, 
            _System._tuple#13$T12), 
          $h))
     ==> $IsAllocBox(_System.Tuple13._11(d), _System._tuple#13$T11, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#13$T12: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple13._12(d), _System._tuple#13$T12, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple13.___hMake13_q(d)
       && (exists _System._tuple#13$T0: Ty, 
          _System._tuple#13$T1: Ty, 
          _System._tuple#13$T2: Ty, 
          _System._tuple#13$T3: Ty, 
          _System._tuple#13$T4: Ty, 
          _System._tuple#13$T5: Ty, 
          _System._tuple#13$T6: Ty, 
          _System._tuple#13$T7: Ty, 
          _System._tuple#13$T8: Ty, 
          _System._tuple#13$T9: Ty, 
          _System._tuple#13$T10: Ty, 
          _System._tuple#13$T11: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple13(_System._tuple#13$T0, 
              _System._tuple#13$T1, 
              _System._tuple#13$T2, 
              _System._tuple#13$T3, 
              _System._tuple#13$T4, 
              _System._tuple#13$T5, 
              _System._tuple#13$T6, 
              _System._tuple#13$T7, 
              _System._tuple#13$T8, 
              _System._tuple#13$T9, 
              _System._tuple#13$T10, 
              _System._tuple#13$T11, 
              _System._tuple#13$T12), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple13(_System._tuple#13$T0, 
            _System._tuple#13$T1, 
            _System._tuple#13$T2, 
            _System._tuple#13$T3, 
            _System._tuple#13$T4, 
            _System._tuple#13$T5, 
            _System._tuple#13$T6, 
            _System._tuple#13$T7, 
            _System._tuple#13$T8, 
            _System._tuple#13$T9, 
            _System._tuple#13$T10, 
            _System._tuple#13$T11, 
            _System._tuple#13$T12), 
          $h))
     ==> $IsAllocBox(_System.Tuple13._12(d), _System._tuple#13$T12, $h));

// Constructor literal
axiom (forall a#213#0#0: Box, 
    a#213#1#0: Box, 
    a#213#2#0: Box, 
    a#213#3#0: Box, 
    a#213#4#0: Box, 
    a#213#5#0: Box, 
    a#213#6#0: Box, 
    a#213#7#0: Box, 
    a#213#8#0: Box, 
    a#213#9#0: Box, 
    a#213#10#0: Box, 
    a#213#11#0: Box, 
    a#213#12#0: Box :: 
  { #_System._tuple#13._#Make13(Lit(a#213#0#0), 
      Lit(a#213#1#0), 
      Lit(a#213#2#0), 
      Lit(a#213#3#0), 
      Lit(a#213#4#0), 
      Lit(a#213#5#0), 
      Lit(a#213#6#0), 
      Lit(a#213#7#0), 
      Lit(a#213#8#0), 
      Lit(a#213#9#0), 
      Lit(a#213#10#0), 
      Lit(a#213#11#0), 
      Lit(a#213#12#0)) } 
  #_System._tuple#13._#Make13(Lit(a#213#0#0), 
      Lit(a#213#1#0), 
      Lit(a#213#2#0), 
      Lit(a#213#3#0), 
      Lit(a#213#4#0), 
      Lit(a#213#5#0), 
      Lit(a#213#6#0), 
      Lit(a#213#7#0), 
      Lit(a#213#8#0), 
      Lit(a#213#9#0), 
      Lit(a#213#10#0), 
      Lit(a#213#11#0), 
      Lit(a#213#12#0))
     == Lit(#_System._tuple#13._#Make13(a#213#0#0, 
        a#213#1#0, 
        a#213#2#0, 
        a#213#3#0, 
        a#213#4#0, 
        a#213#5#0, 
        a#213#6#0, 
        a#213#7#0, 
        a#213#8#0, 
        a#213#9#0, 
        a#213#10#0, 
        a#213#11#0, 
        a#213#12#0)));

function _System.Tuple13._0(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#214#0#0: Box, 
    a#214#1#0: Box, 
    a#214#2#0: Box, 
    a#214#3#0: Box, 
    a#214#4#0: Box, 
    a#214#5#0: Box, 
    a#214#6#0: Box, 
    a#214#7#0: Box, 
    a#214#8#0: Box, 
    a#214#9#0: Box, 
    a#214#10#0: Box, 
    a#214#11#0: Box, 
    a#214#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#214#0#0, 
      a#214#1#0, 
      a#214#2#0, 
      a#214#3#0, 
      a#214#4#0, 
      a#214#5#0, 
      a#214#6#0, 
      a#214#7#0, 
      a#214#8#0, 
      a#214#9#0, 
      a#214#10#0, 
      a#214#11#0, 
      a#214#12#0) } 
  _System.Tuple13._0(#_System._tuple#13._#Make13(a#214#0#0, 
        a#214#1#0, 
        a#214#2#0, 
        a#214#3#0, 
        a#214#4#0, 
        a#214#5#0, 
        a#214#6#0, 
        a#214#7#0, 
        a#214#8#0, 
        a#214#9#0, 
        a#214#10#0, 
        a#214#11#0, 
        a#214#12#0))
     == a#214#0#0);

// Inductive rank
axiom (forall a#215#0#0: Box, 
    a#215#1#0: Box, 
    a#215#2#0: Box, 
    a#215#3#0: Box, 
    a#215#4#0: Box, 
    a#215#5#0: Box, 
    a#215#6#0: Box, 
    a#215#7#0: Box, 
    a#215#8#0: Box, 
    a#215#9#0: Box, 
    a#215#10#0: Box, 
    a#215#11#0: Box, 
    a#215#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#215#0#0, 
      a#215#1#0, 
      a#215#2#0, 
      a#215#3#0, 
      a#215#4#0, 
      a#215#5#0, 
      a#215#6#0, 
      a#215#7#0, 
      a#215#8#0, 
      a#215#9#0, 
      a#215#10#0, 
      a#215#11#0, 
      a#215#12#0) } 
  BoxRank(a#215#0#0)
     < DtRank(#_System._tuple#13._#Make13(a#215#0#0, 
        a#215#1#0, 
        a#215#2#0, 
        a#215#3#0, 
        a#215#4#0, 
        a#215#5#0, 
        a#215#6#0, 
        a#215#7#0, 
        a#215#8#0, 
        a#215#9#0, 
        a#215#10#0, 
        a#215#11#0, 
        a#215#12#0)));

function _System.Tuple13._1(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#216#0#0: Box, 
    a#216#1#0: Box, 
    a#216#2#0: Box, 
    a#216#3#0: Box, 
    a#216#4#0: Box, 
    a#216#5#0: Box, 
    a#216#6#0: Box, 
    a#216#7#0: Box, 
    a#216#8#0: Box, 
    a#216#9#0: Box, 
    a#216#10#0: Box, 
    a#216#11#0: Box, 
    a#216#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#216#0#0, 
      a#216#1#0, 
      a#216#2#0, 
      a#216#3#0, 
      a#216#4#0, 
      a#216#5#0, 
      a#216#6#0, 
      a#216#7#0, 
      a#216#8#0, 
      a#216#9#0, 
      a#216#10#0, 
      a#216#11#0, 
      a#216#12#0) } 
  _System.Tuple13._1(#_System._tuple#13._#Make13(a#216#0#0, 
        a#216#1#0, 
        a#216#2#0, 
        a#216#3#0, 
        a#216#4#0, 
        a#216#5#0, 
        a#216#6#0, 
        a#216#7#0, 
        a#216#8#0, 
        a#216#9#0, 
        a#216#10#0, 
        a#216#11#0, 
        a#216#12#0))
     == a#216#1#0);

// Inductive rank
axiom (forall a#217#0#0: Box, 
    a#217#1#0: Box, 
    a#217#2#0: Box, 
    a#217#3#0: Box, 
    a#217#4#0: Box, 
    a#217#5#0: Box, 
    a#217#6#0: Box, 
    a#217#7#0: Box, 
    a#217#8#0: Box, 
    a#217#9#0: Box, 
    a#217#10#0: Box, 
    a#217#11#0: Box, 
    a#217#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#217#0#0, 
      a#217#1#0, 
      a#217#2#0, 
      a#217#3#0, 
      a#217#4#0, 
      a#217#5#0, 
      a#217#6#0, 
      a#217#7#0, 
      a#217#8#0, 
      a#217#9#0, 
      a#217#10#0, 
      a#217#11#0, 
      a#217#12#0) } 
  BoxRank(a#217#1#0)
     < DtRank(#_System._tuple#13._#Make13(a#217#0#0, 
        a#217#1#0, 
        a#217#2#0, 
        a#217#3#0, 
        a#217#4#0, 
        a#217#5#0, 
        a#217#6#0, 
        a#217#7#0, 
        a#217#8#0, 
        a#217#9#0, 
        a#217#10#0, 
        a#217#11#0, 
        a#217#12#0)));

function _System.Tuple13._2(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#218#0#0: Box, 
    a#218#1#0: Box, 
    a#218#2#0: Box, 
    a#218#3#0: Box, 
    a#218#4#0: Box, 
    a#218#5#0: Box, 
    a#218#6#0: Box, 
    a#218#7#0: Box, 
    a#218#8#0: Box, 
    a#218#9#0: Box, 
    a#218#10#0: Box, 
    a#218#11#0: Box, 
    a#218#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#218#0#0, 
      a#218#1#0, 
      a#218#2#0, 
      a#218#3#0, 
      a#218#4#0, 
      a#218#5#0, 
      a#218#6#0, 
      a#218#7#0, 
      a#218#8#0, 
      a#218#9#0, 
      a#218#10#0, 
      a#218#11#0, 
      a#218#12#0) } 
  _System.Tuple13._2(#_System._tuple#13._#Make13(a#218#0#0, 
        a#218#1#0, 
        a#218#2#0, 
        a#218#3#0, 
        a#218#4#0, 
        a#218#5#0, 
        a#218#6#0, 
        a#218#7#0, 
        a#218#8#0, 
        a#218#9#0, 
        a#218#10#0, 
        a#218#11#0, 
        a#218#12#0))
     == a#218#2#0);

// Inductive rank
axiom (forall a#219#0#0: Box, 
    a#219#1#0: Box, 
    a#219#2#0: Box, 
    a#219#3#0: Box, 
    a#219#4#0: Box, 
    a#219#5#0: Box, 
    a#219#6#0: Box, 
    a#219#7#0: Box, 
    a#219#8#0: Box, 
    a#219#9#0: Box, 
    a#219#10#0: Box, 
    a#219#11#0: Box, 
    a#219#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#219#0#0, 
      a#219#1#0, 
      a#219#2#0, 
      a#219#3#0, 
      a#219#4#0, 
      a#219#5#0, 
      a#219#6#0, 
      a#219#7#0, 
      a#219#8#0, 
      a#219#9#0, 
      a#219#10#0, 
      a#219#11#0, 
      a#219#12#0) } 
  BoxRank(a#219#2#0)
     < DtRank(#_System._tuple#13._#Make13(a#219#0#0, 
        a#219#1#0, 
        a#219#2#0, 
        a#219#3#0, 
        a#219#4#0, 
        a#219#5#0, 
        a#219#6#0, 
        a#219#7#0, 
        a#219#8#0, 
        a#219#9#0, 
        a#219#10#0, 
        a#219#11#0, 
        a#219#12#0)));

function _System.Tuple13._3(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#220#0#0: Box, 
    a#220#1#0: Box, 
    a#220#2#0: Box, 
    a#220#3#0: Box, 
    a#220#4#0: Box, 
    a#220#5#0: Box, 
    a#220#6#0: Box, 
    a#220#7#0: Box, 
    a#220#8#0: Box, 
    a#220#9#0: Box, 
    a#220#10#0: Box, 
    a#220#11#0: Box, 
    a#220#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#220#0#0, 
      a#220#1#0, 
      a#220#2#0, 
      a#220#3#0, 
      a#220#4#0, 
      a#220#5#0, 
      a#220#6#0, 
      a#220#7#0, 
      a#220#8#0, 
      a#220#9#0, 
      a#220#10#0, 
      a#220#11#0, 
      a#220#12#0) } 
  _System.Tuple13._3(#_System._tuple#13._#Make13(a#220#0#0, 
        a#220#1#0, 
        a#220#2#0, 
        a#220#3#0, 
        a#220#4#0, 
        a#220#5#0, 
        a#220#6#0, 
        a#220#7#0, 
        a#220#8#0, 
        a#220#9#0, 
        a#220#10#0, 
        a#220#11#0, 
        a#220#12#0))
     == a#220#3#0);

// Inductive rank
axiom (forall a#221#0#0: Box, 
    a#221#1#0: Box, 
    a#221#2#0: Box, 
    a#221#3#0: Box, 
    a#221#4#0: Box, 
    a#221#5#0: Box, 
    a#221#6#0: Box, 
    a#221#7#0: Box, 
    a#221#8#0: Box, 
    a#221#9#0: Box, 
    a#221#10#0: Box, 
    a#221#11#0: Box, 
    a#221#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#221#0#0, 
      a#221#1#0, 
      a#221#2#0, 
      a#221#3#0, 
      a#221#4#0, 
      a#221#5#0, 
      a#221#6#0, 
      a#221#7#0, 
      a#221#8#0, 
      a#221#9#0, 
      a#221#10#0, 
      a#221#11#0, 
      a#221#12#0) } 
  BoxRank(a#221#3#0)
     < DtRank(#_System._tuple#13._#Make13(a#221#0#0, 
        a#221#1#0, 
        a#221#2#0, 
        a#221#3#0, 
        a#221#4#0, 
        a#221#5#0, 
        a#221#6#0, 
        a#221#7#0, 
        a#221#8#0, 
        a#221#9#0, 
        a#221#10#0, 
        a#221#11#0, 
        a#221#12#0)));

function _System.Tuple13._4(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#222#0#0: Box, 
    a#222#1#0: Box, 
    a#222#2#0: Box, 
    a#222#3#0: Box, 
    a#222#4#0: Box, 
    a#222#5#0: Box, 
    a#222#6#0: Box, 
    a#222#7#0: Box, 
    a#222#8#0: Box, 
    a#222#9#0: Box, 
    a#222#10#0: Box, 
    a#222#11#0: Box, 
    a#222#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#222#0#0, 
      a#222#1#0, 
      a#222#2#0, 
      a#222#3#0, 
      a#222#4#0, 
      a#222#5#0, 
      a#222#6#0, 
      a#222#7#0, 
      a#222#8#0, 
      a#222#9#0, 
      a#222#10#0, 
      a#222#11#0, 
      a#222#12#0) } 
  _System.Tuple13._4(#_System._tuple#13._#Make13(a#222#0#0, 
        a#222#1#0, 
        a#222#2#0, 
        a#222#3#0, 
        a#222#4#0, 
        a#222#5#0, 
        a#222#6#0, 
        a#222#7#0, 
        a#222#8#0, 
        a#222#9#0, 
        a#222#10#0, 
        a#222#11#0, 
        a#222#12#0))
     == a#222#4#0);

// Inductive rank
axiom (forall a#223#0#0: Box, 
    a#223#1#0: Box, 
    a#223#2#0: Box, 
    a#223#3#0: Box, 
    a#223#4#0: Box, 
    a#223#5#0: Box, 
    a#223#6#0: Box, 
    a#223#7#0: Box, 
    a#223#8#0: Box, 
    a#223#9#0: Box, 
    a#223#10#0: Box, 
    a#223#11#0: Box, 
    a#223#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#223#0#0, 
      a#223#1#0, 
      a#223#2#0, 
      a#223#3#0, 
      a#223#4#0, 
      a#223#5#0, 
      a#223#6#0, 
      a#223#7#0, 
      a#223#8#0, 
      a#223#9#0, 
      a#223#10#0, 
      a#223#11#0, 
      a#223#12#0) } 
  BoxRank(a#223#4#0)
     < DtRank(#_System._tuple#13._#Make13(a#223#0#0, 
        a#223#1#0, 
        a#223#2#0, 
        a#223#3#0, 
        a#223#4#0, 
        a#223#5#0, 
        a#223#6#0, 
        a#223#7#0, 
        a#223#8#0, 
        a#223#9#0, 
        a#223#10#0, 
        a#223#11#0, 
        a#223#12#0)));

function _System.Tuple13._5(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#224#0#0: Box, 
    a#224#1#0: Box, 
    a#224#2#0: Box, 
    a#224#3#0: Box, 
    a#224#4#0: Box, 
    a#224#5#0: Box, 
    a#224#6#0: Box, 
    a#224#7#0: Box, 
    a#224#8#0: Box, 
    a#224#9#0: Box, 
    a#224#10#0: Box, 
    a#224#11#0: Box, 
    a#224#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#224#0#0, 
      a#224#1#0, 
      a#224#2#0, 
      a#224#3#0, 
      a#224#4#0, 
      a#224#5#0, 
      a#224#6#0, 
      a#224#7#0, 
      a#224#8#0, 
      a#224#9#0, 
      a#224#10#0, 
      a#224#11#0, 
      a#224#12#0) } 
  _System.Tuple13._5(#_System._tuple#13._#Make13(a#224#0#0, 
        a#224#1#0, 
        a#224#2#0, 
        a#224#3#0, 
        a#224#4#0, 
        a#224#5#0, 
        a#224#6#0, 
        a#224#7#0, 
        a#224#8#0, 
        a#224#9#0, 
        a#224#10#0, 
        a#224#11#0, 
        a#224#12#0))
     == a#224#5#0);

// Inductive rank
axiom (forall a#225#0#0: Box, 
    a#225#1#0: Box, 
    a#225#2#0: Box, 
    a#225#3#0: Box, 
    a#225#4#0: Box, 
    a#225#5#0: Box, 
    a#225#6#0: Box, 
    a#225#7#0: Box, 
    a#225#8#0: Box, 
    a#225#9#0: Box, 
    a#225#10#0: Box, 
    a#225#11#0: Box, 
    a#225#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#225#0#0, 
      a#225#1#0, 
      a#225#2#0, 
      a#225#3#0, 
      a#225#4#0, 
      a#225#5#0, 
      a#225#6#0, 
      a#225#7#0, 
      a#225#8#0, 
      a#225#9#0, 
      a#225#10#0, 
      a#225#11#0, 
      a#225#12#0) } 
  BoxRank(a#225#5#0)
     < DtRank(#_System._tuple#13._#Make13(a#225#0#0, 
        a#225#1#0, 
        a#225#2#0, 
        a#225#3#0, 
        a#225#4#0, 
        a#225#5#0, 
        a#225#6#0, 
        a#225#7#0, 
        a#225#8#0, 
        a#225#9#0, 
        a#225#10#0, 
        a#225#11#0, 
        a#225#12#0)));

function _System.Tuple13._6(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#226#0#0: Box, 
    a#226#1#0: Box, 
    a#226#2#0: Box, 
    a#226#3#0: Box, 
    a#226#4#0: Box, 
    a#226#5#0: Box, 
    a#226#6#0: Box, 
    a#226#7#0: Box, 
    a#226#8#0: Box, 
    a#226#9#0: Box, 
    a#226#10#0: Box, 
    a#226#11#0: Box, 
    a#226#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#226#0#0, 
      a#226#1#0, 
      a#226#2#0, 
      a#226#3#0, 
      a#226#4#0, 
      a#226#5#0, 
      a#226#6#0, 
      a#226#7#0, 
      a#226#8#0, 
      a#226#9#0, 
      a#226#10#0, 
      a#226#11#0, 
      a#226#12#0) } 
  _System.Tuple13._6(#_System._tuple#13._#Make13(a#226#0#0, 
        a#226#1#0, 
        a#226#2#0, 
        a#226#3#0, 
        a#226#4#0, 
        a#226#5#0, 
        a#226#6#0, 
        a#226#7#0, 
        a#226#8#0, 
        a#226#9#0, 
        a#226#10#0, 
        a#226#11#0, 
        a#226#12#0))
     == a#226#6#0);

// Inductive rank
axiom (forall a#227#0#0: Box, 
    a#227#1#0: Box, 
    a#227#2#0: Box, 
    a#227#3#0: Box, 
    a#227#4#0: Box, 
    a#227#5#0: Box, 
    a#227#6#0: Box, 
    a#227#7#0: Box, 
    a#227#8#0: Box, 
    a#227#9#0: Box, 
    a#227#10#0: Box, 
    a#227#11#0: Box, 
    a#227#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#227#0#0, 
      a#227#1#0, 
      a#227#2#0, 
      a#227#3#0, 
      a#227#4#0, 
      a#227#5#0, 
      a#227#6#0, 
      a#227#7#0, 
      a#227#8#0, 
      a#227#9#0, 
      a#227#10#0, 
      a#227#11#0, 
      a#227#12#0) } 
  BoxRank(a#227#6#0)
     < DtRank(#_System._tuple#13._#Make13(a#227#0#0, 
        a#227#1#0, 
        a#227#2#0, 
        a#227#3#0, 
        a#227#4#0, 
        a#227#5#0, 
        a#227#6#0, 
        a#227#7#0, 
        a#227#8#0, 
        a#227#9#0, 
        a#227#10#0, 
        a#227#11#0, 
        a#227#12#0)));

function _System.Tuple13._7(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#228#0#0: Box, 
    a#228#1#0: Box, 
    a#228#2#0: Box, 
    a#228#3#0: Box, 
    a#228#4#0: Box, 
    a#228#5#0: Box, 
    a#228#6#0: Box, 
    a#228#7#0: Box, 
    a#228#8#0: Box, 
    a#228#9#0: Box, 
    a#228#10#0: Box, 
    a#228#11#0: Box, 
    a#228#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#228#0#0, 
      a#228#1#0, 
      a#228#2#0, 
      a#228#3#0, 
      a#228#4#0, 
      a#228#5#0, 
      a#228#6#0, 
      a#228#7#0, 
      a#228#8#0, 
      a#228#9#0, 
      a#228#10#0, 
      a#228#11#0, 
      a#228#12#0) } 
  _System.Tuple13._7(#_System._tuple#13._#Make13(a#228#0#0, 
        a#228#1#0, 
        a#228#2#0, 
        a#228#3#0, 
        a#228#4#0, 
        a#228#5#0, 
        a#228#6#0, 
        a#228#7#0, 
        a#228#8#0, 
        a#228#9#0, 
        a#228#10#0, 
        a#228#11#0, 
        a#228#12#0))
     == a#228#7#0);

// Inductive rank
axiom (forall a#229#0#0: Box, 
    a#229#1#0: Box, 
    a#229#2#0: Box, 
    a#229#3#0: Box, 
    a#229#4#0: Box, 
    a#229#5#0: Box, 
    a#229#6#0: Box, 
    a#229#7#0: Box, 
    a#229#8#0: Box, 
    a#229#9#0: Box, 
    a#229#10#0: Box, 
    a#229#11#0: Box, 
    a#229#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#229#0#0, 
      a#229#1#0, 
      a#229#2#0, 
      a#229#3#0, 
      a#229#4#0, 
      a#229#5#0, 
      a#229#6#0, 
      a#229#7#0, 
      a#229#8#0, 
      a#229#9#0, 
      a#229#10#0, 
      a#229#11#0, 
      a#229#12#0) } 
  BoxRank(a#229#7#0)
     < DtRank(#_System._tuple#13._#Make13(a#229#0#0, 
        a#229#1#0, 
        a#229#2#0, 
        a#229#3#0, 
        a#229#4#0, 
        a#229#5#0, 
        a#229#6#0, 
        a#229#7#0, 
        a#229#8#0, 
        a#229#9#0, 
        a#229#10#0, 
        a#229#11#0, 
        a#229#12#0)));

function _System.Tuple13._8(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#230#0#0: Box, 
    a#230#1#0: Box, 
    a#230#2#0: Box, 
    a#230#3#0: Box, 
    a#230#4#0: Box, 
    a#230#5#0: Box, 
    a#230#6#0: Box, 
    a#230#7#0: Box, 
    a#230#8#0: Box, 
    a#230#9#0: Box, 
    a#230#10#0: Box, 
    a#230#11#0: Box, 
    a#230#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#230#0#0, 
      a#230#1#0, 
      a#230#2#0, 
      a#230#3#0, 
      a#230#4#0, 
      a#230#5#0, 
      a#230#6#0, 
      a#230#7#0, 
      a#230#8#0, 
      a#230#9#0, 
      a#230#10#0, 
      a#230#11#0, 
      a#230#12#0) } 
  _System.Tuple13._8(#_System._tuple#13._#Make13(a#230#0#0, 
        a#230#1#0, 
        a#230#2#0, 
        a#230#3#0, 
        a#230#4#0, 
        a#230#5#0, 
        a#230#6#0, 
        a#230#7#0, 
        a#230#8#0, 
        a#230#9#0, 
        a#230#10#0, 
        a#230#11#0, 
        a#230#12#0))
     == a#230#8#0);

// Inductive rank
axiom (forall a#231#0#0: Box, 
    a#231#1#0: Box, 
    a#231#2#0: Box, 
    a#231#3#0: Box, 
    a#231#4#0: Box, 
    a#231#5#0: Box, 
    a#231#6#0: Box, 
    a#231#7#0: Box, 
    a#231#8#0: Box, 
    a#231#9#0: Box, 
    a#231#10#0: Box, 
    a#231#11#0: Box, 
    a#231#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#231#0#0, 
      a#231#1#0, 
      a#231#2#0, 
      a#231#3#0, 
      a#231#4#0, 
      a#231#5#0, 
      a#231#6#0, 
      a#231#7#0, 
      a#231#8#0, 
      a#231#9#0, 
      a#231#10#0, 
      a#231#11#0, 
      a#231#12#0) } 
  BoxRank(a#231#8#0)
     < DtRank(#_System._tuple#13._#Make13(a#231#0#0, 
        a#231#1#0, 
        a#231#2#0, 
        a#231#3#0, 
        a#231#4#0, 
        a#231#5#0, 
        a#231#6#0, 
        a#231#7#0, 
        a#231#8#0, 
        a#231#9#0, 
        a#231#10#0, 
        a#231#11#0, 
        a#231#12#0)));

function _System.Tuple13._9(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#232#0#0: Box, 
    a#232#1#0: Box, 
    a#232#2#0: Box, 
    a#232#3#0: Box, 
    a#232#4#0: Box, 
    a#232#5#0: Box, 
    a#232#6#0: Box, 
    a#232#7#0: Box, 
    a#232#8#0: Box, 
    a#232#9#0: Box, 
    a#232#10#0: Box, 
    a#232#11#0: Box, 
    a#232#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#232#0#0, 
      a#232#1#0, 
      a#232#2#0, 
      a#232#3#0, 
      a#232#4#0, 
      a#232#5#0, 
      a#232#6#0, 
      a#232#7#0, 
      a#232#8#0, 
      a#232#9#0, 
      a#232#10#0, 
      a#232#11#0, 
      a#232#12#0) } 
  _System.Tuple13._9(#_System._tuple#13._#Make13(a#232#0#0, 
        a#232#1#0, 
        a#232#2#0, 
        a#232#3#0, 
        a#232#4#0, 
        a#232#5#0, 
        a#232#6#0, 
        a#232#7#0, 
        a#232#8#0, 
        a#232#9#0, 
        a#232#10#0, 
        a#232#11#0, 
        a#232#12#0))
     == a#232#9#0);

// Inductive rank
axiom (forall a#233#0#0: Box, 
    a#233#1#0: Box, 
    a#233#2#0: Box, 
    a#233#3#0: Box, 
    a#233#4#0: Box, 
    a#233#5#0: Box, 
    a#233#6#0: Box, 
    a#233#7#0: Box, 
    a#233#8#0: Box, 
    a#233#9#0: Box, 
    a#233#10#0: Box, 
    a#233#11#0: Box, 
    a#233#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#233#0#0, 
      a#233#1#0, 
      a#233#2#0, 
      a#233#3#0, 
      a#233#4#0, 
      a#233#5#0, 
      a#233#6#0, 
      a#233#7#0, 
      a#233#8#0, 
      a#233#9#0, 
      a#233#10#0, 
      a#233#11#0, 
      a#233#12#0) } 
  BoxRank(a#233#9#0)
     < DtRank(#_System._tuple#13._#Make13(a#233#0#0, 
        a#233#1#0, 
        a#233#2#0, 
        a#233#3#0, 
        a#233#4#0, 
        a#233#5#0, 
        a#233#6#0, 
        a#233#7#0, 
        a#233#8#0, 
        a#233#9#0, 
        a#233#10#0, 
        a#233#11#0, 
        a#233#12#0)));

function _System.Tuple13._10(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#234#0#0: Box, 
    a#234#1#0: Box, 
    a#234#2#0: Box, 
    a#234#3#0: Box, 
    a#234#4#0: Box, 
    a#234#5#0: Box, 
    a#234#6#0: Box, 
    a#234#7#0: Box, 
    a#234#8#0: Box, 
    a#234#9#0: Box, 
    a#234#10#0: Box, 
    a#234#11#0: Box, 
    a#234#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#234#0#0, 
      a#234#1#0, 
      a#234#2#0, 
      a#234#3#0, 
      a#234#4#0, 
      a#234#5#0, 
      a#234#6#0, 
      a#234#7#0, 
      a#234#8#0, 
      a#234#9#0, 
      a#234#10#0, 
      a#234#11#0, 
      a#234#12#0) } 
  _System.Tuple13._10(#_System._tuple#13._#Make13(a#234#0#0, 
        a#234#1#0, 
        a#234#2#0, 
        a#234#3#0, 
        a#234#4#0, 
        a#234#5#0, 
        a#234#6#0, 
        a#234#7#0, 
        a#234#8#0, 
        a#234#9#0, 
        a#234#10#0, 
        a#234#11#0, 
        a#234#12#0))
     == a#234#10#0);

// Inductive rank
axiom (forall a#235#0#0: Box, 
    a#235#1#0: Box, 
    a#235#2#0: Box, 
    a#235#3#0: Box, 
    a#235#4#0: Box, 
    a#235#5#0: Box, 
    a#235#6#0: Box, 
    a#235#7#0: Box, 
    a#235#8#0: Box, 
    a#235#9#0: Box, 
    a#235#10#0: Box, 
    a#235#11#0: Box, 
    a#235#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#235#0#0, 
      a#235#1#0, 
      a#235#2#0, 
      a#235#3#0, 
      a#235#4#0, 
      a#235#5#0, 
      a#235#6#0, 
      a#235#7#0, 
      a#235#8#0, 
      a#235#9#0, 
      a#235#10#0, 
      a#235#11#0, 
      a#235#12#0) } 
  BoxRank(a#235#10#0)
     < DtRank(#_System._tuple#13._#Make13(a#235#0#0, 
        a#235#1#0, 
        a#235#2#0, 
        a#235#3#0, 
        a#235#4#0, 
        a#235#5#0, 
        a#235#6#0, 
        a#235#7#0, 
        a#235#8#0, 
        a#235#9#0, 
        a#235#10#0, 
        a#235#11#0, 
        a#235#12#0)));

function _System.Tuple13._11(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#236#0#0: Box, 
    a#236#1#0: Box, 
    a#236#2#0: Box, 
    a#236#3#0: Box, 
    a#236#4#0: Box, 
    a#236#5#0: Box, 
    a#236#6#0: Box, 
    a#236#7#0: Box, 
    a#236#8#0: Box, 
    a#236#9#0: Box, 
    a#236#10#0: Box, 
    a#236#11#0: Box, 
    a#236#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#236#0#0, 
      a#236#1#0, 
      a#236#2#0, 
      a#236#3#0, 
      a#236#4#0, 
      a#236#5#0, 
      a#236#6#0, 
      a#236#7#0, 
      a#236#8#0, 
      a#236#9#0, 
      a#236#10#0, 
      a#236#11#0, 
      a#236#12#0) } 
  _System.Tuple13._11(#_System._tuple#13._#Make13(a#236#0#0, 
        a#236#1#0, 
        a#236#2#0, 
        a#236#3#0, 
        a#236#4#0, 
        a#236#5#0, 
        a#236#6#0, 
        a#236#7#0, 
        a#236#8#0, 
        a#236#9#0, 
        a#236#10#0, 
        a#236#11#0, 
        a#236#12#0))
     == a#236#11#0);

// Inductive rank
axiom (forall a#237#0#0: Box, 
    a#237#1#0: Box, 
    a#237#2#0: Box, 
    a#237#3#0: Box, 
    a#237#4#0: Box, 
    a#237#5#0: Box, 
    a#237#6#0: Box, 
    a#237#7#0: Box, 
    a#237#8#0: Box, 
    a#237#9#0: Box, 
    a#237#10#0: Box, 
    a#237#11#0: Box, 
    a#237#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#237#0#0, 
      a#237#1#0, 
      a#237#2#0, 
      a#237#3#0, 
      a#237#4#0, 
      a#237#5#0, 
      a#237#6#0, 
      a#237#7#0, 
      a#237#8#0, 
      a#237#9#0, 
      a#237#10#0, 
      a#237#11#0, 
      a#237#12#0) } 
  BoxRank(a#237#11#0)
     < DtRank(#_System._tuple#13._#Make13(a#237#0#0, 
        a#237#1#0, 
        a#237#2#0, 
        a#237#3#0, 
        a#237#4#0, 
        a#237#5#0, 
        a#237#6#0, 
        a#237#7#0, 
        a#237#8#0, 
        a#237#9#0, 
        a#237#10#0, 
        a#237#11#0, 
        a#237#12#0)));

function _System.Tuple13._12(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#238#0#0: Box, 
    a#238#1#0: Box, 
    a#238#2#0: Box, 
    a#238#3#0: Box, 
    a#238#4#0: Box, 
    a#238#5#0: Box, 
    a#238#6#0: Box, 
    a#238#7#0: Box, 
    a#238#8#0: Box, 
    a#238#9#0: Box, 
    a#238#10#0: Box, 
    a#238#11#0: Box, 
    a#238#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#238#0#0, 
      a#238#1#0, 
      a#238#2#0, 
      a#238#3#0, 
      a#238#4#0, 
      a#238#5#0, 
      a#238#6#0, 
      a#238#7#0, 
      a#238#8#0, 
      a#238#9#0, 
      a#238#10#0, 
      a#238#11#0, 
      a#238#12#0) } 
  _System.Tuple13._12(#_System._tuple#13._#Make13(a#238#0#0, 
        a#238#1#0, 
        a#238#2#0, 
        a#238#3#0, 
        a#238#4#0, 
        a#238#5#0, 
        a#238#6#0, 
        a#238#7#0, 
        a#238#8#0, 
        a#238#9#0, 
        a#238#10#0, 
        a#238#11#0, 
        a#238#12#0))
     == a#238#12#0);

// Inductive rank
axiom (forall a#239#0#0: Box, 
    a#239#1#0: Box, 
    a#239#2#0: Box, 
    a#239#3#0: Box, 
    a#239#4#0: Box, 
    a#239#5#0: Box, 
    a#239#6#0: Box, 
    a#239#7#0: Box, 
    a#239#8#0: Box, 
    a#239#9#0: Box, 
    a#239#10#0: Box, 
    a#239#11#0: Box, 
    a#239#12#0: Box :: 
  { #_System._tuple#13._#Make13(a#239#0#0, 
      a#239#1#0, 
      a#239#2#0, 
      a#239#3#0, 
      a#239#4#0, 
      a#239#5#0, 
      a#239#6#0, 
      a#239#7#0, 
      a#239#8#0, 
      a#239#9#0, 
      a#239#10#0, 
      a#239#11#0, 
      a#239#12#0) } 
  BoxRank(a#239#12#0)
     < DtRank(#_System._tuple#13._#Make13(a#239#0#0, 
        a#239#1#0, 
        a#239#2#0, 
        a#239#3#0, 
        a#239#4#0, 
        a#239#5#0, 
        a#239#6#0, 
        a#239#7#0, 
        a#239#8#0, 
        a#239#9#0, 
        a#239#10#0, 
        a#239#11#0, 
        a#239#12#0)));

// Depth-one case-split function
function $IsA#_System.Tuple13(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple13(d) } 
  $IsA#_System.Tuple13(d) ==> _System.Tuple13.___hMake13_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#13$T0: Ty, 
    _System._tuple#13$T1: Ty, 
    _System._tuple#13$T2: Ty, 
    _System._tuple#13$T3: Ty, 
    _System._tuple#13$T4: Ty, 
    _System._tuple#13$T5: Ty, 
    _System._tuple#13$T6: Ty, 
    _System._tuple#13$T7: Ty, 
    _System._tuple#13$T8: Ty, 
    _System._tuple#13$T9: Ty, 
    _System._tuple#13$T10: Ty, 
    _System._tuple#13$T11: Ty, 
    _System._tuple#13$T12: Ty, 
    d: DatatypeType :: 
  { _System.Tuple13.___hMake13_q(d), $Is(d, 
      Tclass._System.Tuple13(_System._tuple#13$T0, 
        _System._tuple#13$T1, 
        _System._tuple#13$T2, 
        _System._tuple#13$T3, 
        _System._tuple#13$T4, 
        _System._tuple#13$T5, 
        _System._tuple#13$T6, 
        _System._tuple#13$T7, 
        _System._tuple#13$T8, 
        _System._tuple#13$T9, 
        _System._tuple#13$T10, 
        _System._tuple#13$T11, 
        _System._tuple#13$T12)) } 
  $Is(d, 
      Tclass._System.Tuple13(_System._tuple#13$T0, 
        _System._tuple#13$T1, 
        _System._tuple#13$T2, 
        _System._tuple#13$T3, 
        _System._tuple#13$T4, 
        _System._tuple#13$T5, 
        _System._tuple#13$T6, 
        _System._tuple#13$T7, 
        _System._tuple#13$T8, 
        _System._tuple#13$T9, 
        _System._tuple#13$T10, 
        _System._tuple#13$T11, 
        _System._tuple#13$T12))
     ==> _System.Tuple13.___hMake13_q(d));

// Datatype extensional equality declaration
function _System.Tuple13#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#13._#Make13
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple13#Equal(a, b) } 
  _System.Tuple13#Equal(a, b)
     <==> _System.Tuple13._0(a) == _System.Tuple13._0(b)
       && _System.Tuple13._1(a) == _System.Tuple13._1(b)
       && _System.Tuple13._2(a) == _System.Tuple13._2(b)
       && _System.Tuple13._3(a) == _System.Tuple13._3(b)
       && _System.Tuple13._4(a) == _System.Tuple13._4(b)
       && _System.Tuple13._5(a) == _System.Tuple13._5(b)
       && _System.Tuple13._6(a) == _System.Tuple13._6(b)
       && _System.Tuple13._7(a) == _System.Tuple13._7(b)
       && _System.Tuple13._8(a) == _System.Tuple13._8(b)
       && _System.Tuple13._9(a) == _System.Tuple13._9(b)
       && _System.Tuple13._10(a) == _System.Tuple13._10(b)
       && _System.Tuple13._11(a) == _System.Tuple13._11(b)
       && _System.Tuple13._12(a) == _System.Tuple13._12(b));

// Datatype extensionality axiom: _System._tuple#13
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple13#Equal(a, b) } 
  _System.Tuple13#Equal(a, b) <==> a == b);

const unique class._System.Tuple13: ClassName;

// Constructor function declaration
function #_System._tuple#14._#Make14(Box, Box, Box, Box, Box, Box, Box, Box, Box, Box, Box, Box, Box, Box)
   : DatatypeType;

const unique ##_System._tuple#14._#Make14: DtCtorId
uses {
// Constructor identifier
axiom (forall a#240#0#0: Box, 
    a#240#1#0: Box, 
    a#240#2#0: Box, 
    a#240#3#0: Box, 
    a#240#4#0: Box, 
    a#240#5#0: Box, 
    a#240#6#0: Box, 
    a#240#7#0: Box, 
    a#240#8#0: Box, 
    a#240#9#0: Box, 
    a#240#10#0: Box, 
    a#240#11#0: Box, 
    a#240#12#0: Box, 
    a#240#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#240#0#0, 
      a#240#1#0, 
      a#240#2#0, 
      a#240#3#0, 
      a#240#4#0, 
      a#240#5#0, 
      a#240#6#0, 
      a#240#7#0, 
      a#240#8#0, 
      a#240#9#0, 
      a#240#10#0, 
      a#240#11#0, 
      a#240#12#0, 
      a#240#13#0) } 
  DatatypeCtorId(#_System._tuple#14._#Make14(a#240#0#0, 
        a#240#1#0, 
        a#240#2#0, 
        a#240#3#0, 
        a#240#4#0, 
        a#240#5#0, 
        a#240#6#0, 
        a#240#7#0, 
        a#240#8#0, 
        a#240#9#0, 
        a#240#10#0, 
        a#240#11#0, 
        a#240#12#0, 
        a#240#13#0))
     == ##_System._tuple#14._#Make14);
}

function _System.Tuple14.___hMake14_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple14.___hMake14_q(d) } 
  _System.Tuple14.___hMake14_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#14._#Make14);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple14.___hMake14_q(d) } 
  _System.Tuple14.___hMake14_q(d)
     ==> (exists a#241#0#0: Box, 
        a#241#1#0: Box, 
        a#241#2#0: Box, 
        a#241#3#0: Box, 
        a#241#4#0: Box, 
        a#241#5#0: Box, 
        a#241#6#0: Box, 
        a#241#7#0: Box, 
        a#241#8#0: Box, 
        a#241#9#0: Box, 
        a#241#10#0: Box, 
        a#241#11#0: Box, 
        a#241#12#0: Box, 
        a#241#13#0: Box :: 
      d
         == #_System._tuple#14._#Make14(a#241#0#0, 
          a#241#1#0, 
          a#241#2#0, 
          a#241#3#0, 
          a#241#4#0, 
          a#241#5#0, 
          a#241#6#0, 
          a#241#7#0, 
          a#241#8#0, 
          a#241#9#0, 
          a#241#10#0, 
          a#241#11#0, 
          a#241#12#0, 
          a#241#13#0)));

function Tclass._System.Tuple14(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.Tuple14: TyTag;

// Tclass._System.Tuple14 Tag
axiom (forall _System._tuple#14$T0: Ty, 
    _System._tuple#14$T1: Ty, 
    _System._tuple#14$T2: Ty, 
    _System._tuple#14$T3: Ty, 
    _System._tuple#14$T4: Ty, 
    _System._tuple#14$T5: Ty, 
    _System._tuple#14$T6: Ty, 
    _System._tuple#14$T7: Ty, 
    _System._tuple#14$T8: Ty, 
    _System._tuple#14$T9: Ty, 
    _System._tuple#14$T10: Ty, 
    _System._tuple#14$T11: Ty, 
    _System._tuple#14$T12: Ty, 
    _System._tuple#14$T13: Ty :: 
  { Tclass._System.Tuple14(_System._tuple#14$T0, 
      _System._tuple#14$T1, 
      _System._tuple#14$T2, 
      _System._tuple#14$T3, 
      _System._tuple#14$T4, 
      _System._tuple#14$T5, 
      _System._tuple#14$T6, 
      _System._tuple#14$T7, 
      _System._tuple#14$T8, 
      _System._tuple#14$T9, 
      _System._tuple#14$T10, 
      _System._tuple#14$T11, 
      _System._tuple#14$T12, 
      _System._tuple#14$T13) } 
  Tag(Tclass._System.Tuple14(_System._tuple#14$T0, 
          _System._tuple#14$T1, 
          _System._tuple#14$T2, 
          _System._tuple#14$T3, 
          _System._tuple#14$T4, 
          _System._tuple#14$T5, 
          _System._tuple#14$T6, 
          _System._tuple#14$T7, 
          _System._tuple#14$T8, 
          _System._tuple#14$T9, 
          _System._tuple#14$T10, 
          _System._tuple#14$T11, 
          _System._tuple#14$T12, 
          _System._tuple#14$T13))
       == Tagclass._System.Tuple14
     && TagFamily(Tclass._System.Tuple14(_System._tuple#14$T0, 
          _System._tuple#14$T1, 
          _System._tuple#14$T2, 
          _System._tuple#14$T3, 
          _System._tuple#14$T4, 
          _System._tuple#14$T5, 
          _System._tuple#14$T6, 
          _System._tuple#14$T7, 
          _System._tuple#14$T8, 
          _System._tuple#14$T9, 
          _System._tuple#14$T10, 
          _System._tuple#14$T11, 
          _System._tuple#14$T12, 
          _System._tuple#14$T13))
       == tytagFamily$_tuple#14);

function Tclass._System.Tuple14_0(Ty) : Ty;

// Tclass._System.Tuple14 injectivity 0
axiom (forall _System._tuple#14$T0: Ty, 
    _System._tuple#14$T1: Ty, 
    _System._tuple#14$T2: Ty, 
    _System._tuple#14$T3: Ty, 
    _System._tuple#14$T4: Ty, 
    _System._tuple#14$T5: Ty, 
    _System._tuple#14$T6: Ty, 
    _System._tuple#14$T7: Ty, 
    _System._tuple#14$T8: Ty, 
    _System._tuple#14$T9: Ty, 
    _System._tuple#14$T10: Ty, 
    _System._tuple#14$T11: Ty, 
    _System._tuple#14$T12: Ty, 
    _System._tuple#14$T13: Ty :: 
  { Tclass._System.Tuple14(_System._tuple#14$T0, 
      _System._tuple#14$T1, 
      _System._tuple#14$T2, 
      _System._tuple#14$T3, 
      _System._tuple#14$T4, 
      _System._tuple#14$T5, 
      _System._tuple#14$T6, 
      _System._tuple#14$T7, 
      _System._tuple#14$T8, 
      _System._tuple#14$T9, 
      _System._tuple#14$T10, 
      _System._tuple#14$T11, 
      _System._tuple#14$T12, 
      _System._tuple#14$T13) } 
  Tclass._System.Tuple14_0(Tclass._System.Tuple14(_System._tuple#14$T0, 
        _System._tuple#14$T1, 
        _System._tuple#14$T2, 
        _System._tuple#14$T3, 
        _System._tuple#14$T4, 
        _System._tuple#14$T5, 
        _System._tuple#14$T6, 
        _System._tuple#14$T7, 
        _System._tuple#14$T8, 
        _System._tuple#14$T9, 
        _System._tuple#14$T10, 
        _System._tuple#14$T11, 
        _System._tuple#14$T12, 
        _System._tuple#14$T13))
     == _System._tuple#14$T0);

function Tclass._System.Tuple14_1(Ty) : Ty;

// Tclass._System.Tuple14 injectivity 1
axiom (forall _System._tuple#14$T0: Ty, 
    _System._tuple#14$T1: Ty, 
    _System._tuple#14$T2: Ty, 
    _System._tuple#14$T3: Ty, 
    _System._tuple#14$T4: Ty, 
    _System._tuple#14$T5: Ty, 
    _System._tuple#14$T6: Ty, 
    _System._tuple#14$T7: Ty, 
    _System._tuple#14$T8: Ty, 
    _System._tuple#14$T9: Ty, 
    _System._tuple#14$T10: Ty, 
    _System._tuple#14$T11: Ty, 
    _System._tuple#14$T12: Ty, 
    _System._tuple#14$T13: Ty :: 
  { Tclass._System.Tuple14(_System._tuple#14$T0, 
      _System._tuple#14$T1, 
      _System._tuple#14$T2, 
      _System._tuple#14$T3, 
      _System._tuple#14$T4, 
      _System._tuple#14$T5, 
      _System._tuple#14$T6, 
      _System._tuple#14$T7, 
      _System._tuple#14$T8, 
      _System._tuple#14$T9, 
      _System._tuple#14$T10, 
      _System._tuple#14$T11, 
      _System._tuple#14$T12, 
      _System._tuple#14$T13) } 
  Tclass._System.Tuple14_1(Tclass._System.Tuple14(_System._tuple#14$T0, 
        _System._tuple#14$T1, 
        _System._tuple#14$T2, 
        _System._tuple#14$T3, 
        _System._tuple#14$T4, 
        _System._tuple#14$T5, 
        _System._tuple#14$T6, 
        _System._tuple#14$T7, 
        _System._tuple#14$T8, 
        _System._tuple#14$T9, 
        _System._tuple#14$T10, 
        _System._tuple#14$T11, 
        _System._tuple#14$T12, 
        _System._tuple#14$T13))
     == _System._tuple#14$T1);

function Tclass._System.Tuple14_2(Ty) : Ty;

// Tclass._System.Tuple14 injectivity 2
axiom (forall _System._tuple#14$T0: Ty, 
    _System._tuple#14$T1: Ty, 
    _System._tuple#14$T2: Ty, 
    _System._tuple#14$T3: Ty, 
    _System._tuple#14$T4: Ty, 
    _System._tuple#14$T5: Ty, 
    _System._tuple#14$T6: Ty, 
    _System._tuple#14$T7: Ty, 
    _System._tuple#14$T8: Ty, 
    _System._tuple#14$T9: Ty, 
    _System._tuple#14$T10: Ty, 
    _System._tuple#14$T11: Ty, 
    _System._tuple#14$T12: Ty, 
    _System._tuple#14$T13: Ty :: 
  { Tclass._System.Tuple14(_System._tuple#14$T0, 
      _System._tuple#14$T1, 
      _System._tuple#14$T2, 
      _System._tuple#14$T3, 
      _System._tuple#14$T4, 
      _System._tuple#14$T5, 
      _System._tuple#14$T6, 
      _System._tuple#14$T7, 
      _System._tuple#14$T8, 
      _System._tuple#14$T9, 
      _System._tuple#14$T10, 
      _System._tuple#14$T11, 
      _System._tuple#14$T12, 
      _System._tuple#14$T13) } 
  Tclass._System.Tuple14_2(Tclass._System.Tuple14(_System._tuple#14$T0, 
        _System._tuple#14$T1, 
        _System._tuple#14$T2, 
        _System._tuple#14$T3, 
        _System._tuple#14$T4, 
        _System._tuple#14$T5, 
        _System._tuple#14$T6, 
        _System._tuple#14$T7, 
        _System._tuple#14$T8, 
        _System._tuple#14$T9, 
        _System._tuple#14$T10, 
        _System._tuple#14$T11, 
        _System._tuple#14$T12, 
        _System._tuple#14$T13))
     == _System._tuple#14$T2);

function Tclass._System.Tuple14_3(Ty) : Ty;

// Tclass._System.Tuple14 injectivity 3
axiom (forall _System._tuple#14$T0: Ty, 
    _System._tuple#14$T1: Ty, 
    _System._tuple#14$T2: Ty, 
    _System._tuple#14$T3: Ty, 
    _System._tuple#14$T4: Ty, 
    _System._tuple#14$T5: Ty, 
    _System._tuple#14$T6: Ty, 
    _System._tuple#14$T7: Ty, 
    _System._tuple#14$T8: Ty, 
    _System._tuple#14$T9: Ty, 
    _System._tuple#14$T10: Ty, 
    _System._tuple#14$T11: Ty, 
    _System._tuple#14$T12: Ty, 
    _System._tuple#14$T13: Ty :: 
  { Tclass._System.Tuple14(_System._tuple#14$T0, 
      _System._tuple#14$T1, 
      _System._tuple#14$T2, 
      _System._tuple#14$T3, 
      _System._tuple#14$T4, 
      _System._tuple#14$T5, 
      _System._tuple#14$T6, 
      _System._tuple#14$T7, 
      _System._tuple#14$T8, 
      _System._tuple#14$T9, 
      _System._tuple#14$T10, 
      _System._tuple#14$T11, 
      _System._tuple#14$T12, 
      _System._tuple#14$T13) } 
  Tclass._System.Tuple14_3(Tclass._System.Tuple14(_System._tuple#14$T0, 
        _System._tuple#14$T1, 
        _System._tuple#14$T2, 
        _System._tuple#14$T3, 
        _System._tuple#14$T4, 
        _System._tuple#14$T5, 
        _System._tuple#14$T6, 
        _System._tuple#14$T7, 
        _System._tuple#14$T8, 
        _System._tuple#14$T9, 
        _System._tuple#14$T10, 
        _System._tuple#14$T11, 
        _System._tuple#14$T12, 
        _System._tuple#14$T13))
     == _System._tuple#14$T3);

function Tclass._System.Tuple14_4(Ty) : Ty;

// Tclass._System.Tuple14 injectivity 4
axiom (forall _System._tuple#14$T0: Ty, 
    _System._tuple#14$T1: Ty, 
    _System._tuple#14$T2: Ty, 
    _System._tuple#14$T3: Ty, 
    _System._tuple#14$T4: Ty, 
    _System._tuple#14$T5: Ty, 
    _System._tuple#14$T6: Ty, 
    _System._tuple#14$T7: Ty, 
    _System._tuple#14$T8: Ty, 
    _System._tuple#14$T9: Ty, 
    _System._tuple#14$T10: Ty, 
    _System._tuple#14$T11: Ty, 
    _System._tuple#14$T12: Ty, 
    _System._tuple#14$T13: Ty :: 
  { Tclass._System.Tuple14(_System._tuple#14$T0, 
      _System._tuple#14$T1, 
      _System._tuple#14$T2, 
      _System._tuple#14$T3, 
      _System._tuple#14$T4, 
      _System._tuple#14$T5, 
      _System._tuple#14$T6, 
      _System._tuple#14$T7, 
      _System._tuple#14$T8, 
      _System._tuple#14$T9, 
      _System._tuple#14$T10, 
      _System._tuple#14$T11, 
      _System._tuple#14$T12, 
      _System._tuple#14$T13) } 
  Tclass._System.Tuple14_4(Tclass._System.Tuple14(_System._tuple#14$T0, 
        _System._tuple#14$T1, 
        _System._tuple#14$T2, 
        _System._tuple#14$T3, 
        _System._tuple#14$T4, 
        _System._tuple#14$T5, 
        _System._tuple#14$T6, 
        _System._tuple#14$T7, 
        _System._tuple#14$T8, 
        _System._tuple#14$T9, 
        _System._tuple#14$T10, 
        _System._tuple#14$T11, 
        _System._tuple#14$T12, 
        _System._tuple#14$T13))
     == _System._tuple#14$T4);

function Tclass._System.Tuple14_5(Ty) : Ty;

// Tclass._System.Tuple14 injectivity 5
axiom (forall _System._tuple#14$T0: Ty, 
    _System._tuple#14$T1: Ty, 
    _System._tuple#14$T2: Ty, 
    _System._tuple#14$T3: Ty, 
    _System._tuple#14$T4: Ty, 
    _System._tuple#14$T5: Ty, 
    _System._tuple#14$T6: Ty, 
    _System._tuple#14$T7: Ty, 
    _System._tuple#14$T8: Ty, 
    _System._tuple#14$T9: Ty, 
    _System._tuple#14$T10: Ty, 
    _System._tuple#14$T11: Ty, 
    _System._tuple#14$T12: Ty, 
    _System._tuple#14$T13: Ty :: 
  { Tclass._System.Tuple14(_System._tuple#14$T0, 
      _System._tuple#14$T1, 
      _System._tuple#14$T2, 
      _System._tuple#14$T3, 
      _System._tuple#14$T4, 
      _System._tuple#14$T5, 
      _System._tuple#14$T6, 
      _System._tuple#14$T7, 
      _System._tuple#14$T8, 
      _System._tuple#14$T9, 
      _System._tuple#14$T10, 
      _System._tuple#14$T11, 
      _System._tuple#14$T12, 
      _System._tuple#14$T13) } 
  Tclass._System.Tuple14_5(Tclass._System.Tuple14(_System._tuple#14$T0, 
        _System._tuple#14$T1, 
        _System._tuple#14$T2, 
        _System._tuple#14$T3, 
        _System._tuple#14$T4, 
        _System._tuple#14$T5, 
        _System._tuple#14$T6, 
        _System._tuple#14$T7, 
        _System._tuple#14$T8, 
        _System._tuple#14$T9, 
        _System._tuple#14$T10, 
        _System._tuple#14$T11, 
        _System._tuple#14$T12, 
        _System._tuple#14$T13))
     == _System._tuple#14$T5);

function Tclass._System.Tuple14_6(Ty) : Ty;

// Tclass._System.Tuple14 injectivity 6
axiom (forall _System._tuple#14$T0: Ty, 
    _System._tuple#14$T1: Ty, 
    _System._tuple#14$T2: Ty, 
    _System._tuple#14$T3: Ty, 
    _System._tuple#14$T4: Ty, 
    _System._tuple#14$T5: Ty, 
    _System._tuple#14$T6: Ty, 
    _System._tuple#14$T7: Ty, 
    _System._tuple#14$T8: Ty, 
    _System._tuple#14$T9: Ty, 
    _System._tuple#14$T10: Ty, 
    _System._tuple#14$T11: Ty, 
    _System._tuple#14$T12: Ty, 
    _System._tuple#14$T13: Ty :: 
  { Tclass._System.Tuple14(_System._tuple#14$T0, 
      _System._tuple#14$T1, 
      _System._tuple#14$T2, 
      _System._tuple#14$T3, 
      _System._tuple#14$T4, 
      _System._tuple#14$T5, 
      _System._tuple#14$T6, 
      _System._tuple#14$T7, 
      _System._tuple#14$T8, 
      _System._tuple#14$T9, 
      _System._tuple#14$T10, 
      _System._tuple#14$T11, 
      _System._tuple#14$T12, 
      _System._tuple#14$T13) } 
  Tclass._System.Tuple14_6(Tclass._System.Tuple14(_System._tuple#14$T0, 
        _System._tuple#14$T1, 
        _System._tuple#14$T2, 
        _System._tuple#14$T3, 
        _System._tuple#14$T4, 
        _System._tuple#14$T5, 
        _System._tuple#14$T6, 
        _System._tuple#14$T7, 
        _System._tuple#14$T8, 
        _System._tuple#14$T9, 
        _System._tuple#14$T10, 
        _System._tuple#14$T11, 
        _System._tuple#14$T12, 
        _System._tuple#14$T13))
     == _System._tuple#14$T6);

function Tclass._System.Tuple14_7(Ty) : Ty;

// Tclass._System.Tuple14 injectivity 7
axiom (forall _System._tuple#14$T0: Ty, 
    _System._tuple#14$T1: Ty, 
    _System._tuple#14$T2: Ty, 
    _System._tuple#14$T3: Ty, 
    _System._tuple#14$T4: Ty, 
    _System._tuple#14$T5: Ty, 
    _System._tuple#14$T6: Ty, 
    _System._tuple#14$T7: Ty, 
    _System._tuple#14$T8: Ty, 
    _System._tuple#14$T9: Ty, 
    _System._tuple#14$T10: Ty, 
    _System._tuple#14$T11: Ty, 
    _System._tuple#14$T12: Ty, 
    _System._tuple#14$T13: Ty :: 
  { Tclass._System.Tuple14(_System._tuple#14$T0, 
      _System._tuple#14$T1, 
      _System._tuple#14$T2, 
      _System._tuple#14$T3, 
      _System._tuple#14$T4, 
      _System._tuple#14$T5, 
      _System._tuple#14$T6, 
      _System._tuple#14$T7, 
      _System._tuple#14$T8, 
      _System._tuple#14$T9, 
      _System._tuple#14$T10, 
      _System._tuple#14$T11, 
      _System._tuple#14$T12, 
      _System._tuple#14$T13) } 
  Tclass._System.Tuple14_7(Tclass._System.Tuple14(_System._tuple#14$T0, 
        _System._tuple#14$T1, 
        _System._tuple#14$T2, 
        _System._tuple#14$T3, 
        _System._tuple#14$T4, 
        _System._tuple#14$T5, 
        _System._tuple#14$T6, 
        _System._tuple#14$T7, 
        _System._tuple#14$T8, 
        _System._tuple#14$T9, 
        _System._tuple#14$T10, 
        _System._tuple#14$T11, 
        _System._tuple#14$T12, 
        _System._tuple#14$T13))
     == _System._tuple#14$T7);

function Tclass._System.Tuple14_8(Ty) : Ty;

// Tclass._System.Tuple14 injectivity 8
axiom (forall _System._tuple#14$T0: Ty, 
    _System._tuple#14$T1: Ty, 
    _System._tuple#14$T2: Ty, 
    _System._tuple#14$T3: Ty, 
    _System._tuple#14$T4: Ty, 
    _System._tuple#14$T5: Ty, 
    _System._tuple#14$T6: Ty, 
    _System._tuple#14$T7: Ty, 
    _System._tuple#14$T8: Ty, 
    _System._tuple#14$T9: Ty, 
    _System._tuple#14$T10: Ty, 
    _System._tuple#14$T11: Ty, 
    _System._tuple#14$T12: Ty, 
    _System._tuple#14$T13: Ty :: 
  { Tclass._System.Tuple14(_System._tuple#14$T0, 
      _System._tuple#14$T1, 
      _System._tuple#14$T2, 
      _System._tuple#14$T3, 
      _System._tuple#14$T4, 
      _System._tuple#14$T5, 
      _System._tuple#14$T6, 
      _System._tuple#14$T7, 
      _System._tuple#14$T8, 
      _System._tuple#14$T9, 
      _System._tuple#14$T10, 
      _System._tuple#14$T11, 
      _System._tuple#14$T12, 
      _System._tuple#14$T13) } 
  Tclass._System.Tuple14_8(Tclass._System.Tuple14(_System._tuple#14$T0, 
        _System._tuple#14$T1, 
        _System._tuple#14$T2, 
        _System._tuple#14$T3, 
        _System._tuple#14$T4, 
        _System._tuple#14$T5, 
        _System._tuple#14$T6, 
        _System._tuple#14$T7, 
        _System._tuple#14$T8, 
        _System._tuple#14$T9, 
        _System._tuple#14$T10, 
        _System._tuple#14$T11, 
        _System._tuple#14$T12, 
        _System._tuple#14$T13))
     == _System._tuple#14$T8);

function Tclass._System.Tuple14_9(Ty) : Ty;

// Tclass._System.Tuple14 injectivity 9
axiom (forall _System._tuple#14$T0: Ty, 
    _System._tuple#14$T1: Ty, 
    _System._tuple#14$T2: Ty, 
    _System._tuple#14$T3: Ty, 
    _System._tuple#14$T4: Ty, 
    _System._tuple#14$T5: Ty, 
    _System._tuple#14$T6: Ty, 
    _System._tuple#14$T7: Ty, 
    _System._tuple#14$T8: Ty, 
    _System._tuple#14$T9: Ty, 
    _System._tuple#14$T10: Ty, 
    _System._tuple#14$T11: Ty, 
    _System._tuple#14$T12: Ty, 
    _System._tuple#14$T13: Ty :: 
  { Tclass._System.Tuple14(_System._tuple#14$T0, 
      _System._tuple#14$T1, 
      _System._tuple#14$T2, 
      _System._tuple#14$T3, 
      _System._tuple#14$T4, 
      _System._tuple#14$T5, 
      _System._tuple#14$T6, 
      _System._tuple#14$T7, 
      _System._tuple#14$T8, 
      _System._tuple#14$T9, 
      _System._tuple#14$T10, 
      _System._tuple#14$T11, 
      _System._tuple#14$T12, 
      _System._tuple#14$T13) } 
  Tclass._System.Tuple14_9(Tclass._System.Tuple14(_System._tuple#14$T0, 
        _System._tuple#14$T1, 
        _System._tuple#14$T2, 
        _System._tuple#14$T3, 
        _System._tuple#14$T4, 
        _System._tuple#14$T5, 
        _System._tuple#14$T6, 
        _System._tuple#14$T7, 
        _System._tuple#14$T8, 
        _System._tuple#14$T9, 
        _System._tuple#14$T10, 
        _System._tuple#14$T11, 
        _System._tuple#14$T12, 
        _System._tuple#14$T13))
     == _System._tuple#14$T9);

function Tclass._System.Tuple14_10(Ty) : Ty;

// Tclass._System.Tuple14 injectivity 10
axiom (forall _System._tuple#14$T0: Ty, 
    _System._tuple#14$T1: Ty, 
    _System._tuple#14$T2: Ty, 
    _System._tuple#14$T3: Ty, 
    _System._tuple#14$T4: Ty, 
    _System._tuple#14$T5: Ty, 
    _System._tuple#14$T6: Ty, 
    _System._tuple#14$T7: Ty, 
    _System._tuple#14$T8: Ty, 
    _System._tuple#14$T9: Ty, 
    _System._tuple#14$T10: Ty, 
    _System._tuple#14$T11: Ty, 
    _System._tuple#14$T12: Ty, 
    _System._tuple#14$T13: Ty :: 
  { Tclass._System.Tuple14(_System._tuple#14$T0, 
      _System._tuple#14$T1, 
      _System._tuple#14$T2, 
      _System._tuple#14$T3, 
      _System._tuple#14$T4, 
      _System._tuple#14$T5, 
      _System._tuple#14$T6, 
      _System._tuple#14$T7, 
      _System._tuple#14$T8, 
      _System._tuple#14$T9, 
      _System._tuple#14$T10, 
      _System._tuple#14$T11, 
      _System._tuple#14$T12, 
      _System._tuple#14$T13) } 
  Tclass._System.Tuple14_10(Tclass._System.Tuple14(_System._tuple#14$T0, 
        _System._tuple#14$T1, 
        _System._tuple#14$T2, 
        _System._tuple#14$T3, 
        _System._tuple#14$T4, 
        _System._tuple#14$T5, 
        _System._tuple#14$T6, 
        _System._tuple#14$T7, 
        _System._tuple#14$T8, 
        _System._tuple#14$T9, 
        _System._tuple#14$T10, 
        _System._tuple#14$T11, 
        _System._tuple#14$T12, 
        _System._tuple#14$T13))
     == _System._tuple#14$T10);

function Tclass._System.Tuple14_11(Ty) : Ty;

// Tclass._System.Tuple14 injectivity 11
axiom (forall _System._tuple#14$T0: Ty, 
    _System._tuple#14$T1: Ty, 
    _System._tuple#14$T2: Ty, 
    _System._tuple#14$T3: Ty, 
    _System._tuple#14$T4: Ty, 
    _System._tuple#14$T5: Ty, 
    _System._tuple#14$T6: Ty, 
    _System._tuple#14$T7: Ty, 
    _System._tuple#14$T8: Ty, 
    _System._tuple#14$T9: Ty, 
    _System._tuple#14$T10: Ty, 
    _System._tuple#14$T11: Ty, 
    _System._tuple#14$T12: Ty, 
    _System._tuple#14$T13: Ty :: 
  { Tclass._System.Tuple14(_System._tuple#14$T0, 
      _System._tuple#14$T1, 
      _System._tuple#14$T2, 
      _System._tuple#14$T3, 
      _System._tuple#14$T4, 
      _System._tuple#14$T5, 
      _System._tuple#14$T6, 
      _System._tuple#14$T7, 
      _System._tuple#14$T8, 
      _System._tuple#14$T9, 
      _System._tuple#14$T10, 
      _System._tuple#14$T11, 
      _System._tuple#14$T12, 
      _System._tuple#14$T13) } 
  Tclass._System.Tuple14_11(Tclass._System.Tuple14(_System._tuple#14$T0, 
        _System._tuple#14$T1, 
        _System._tuple#14$T2, 
        _System._tuple#14$T3, 
        _System._tuple#14$T4, 
        _System._tuple#14$T5, 
        _System._tuple#14$T6, 
        _System._tuple#14$T7, 
        _System._tuple#14$T8, 
        _System._tuple#14$T9, 
        _System._tuple#14$T10, 
        _System._tuple#14$T11, 
        _System._tuple#14$T12, 
        _System._tuple#14$T13))
     == _System._tuple#14$T11);

function Tclass._System.Tuple14_12(Ty) : Ty;

// Tclass._System.Tuple14 injectivity 12
axiom (forall _System._tuple#14$T0: Ty, 
    _System._tuple#14$T1: Ty, 
    _System._tuple#14$T2: Ty, 
    _System._tuple#14$T3: Ty, 
    _System._tuple#14$T4: Ty, 
    _System._tuple#14$T5: Ty, 
    _System._tuple#14$T6: Ty, 
    _System._tuple#14$T7: Ty, 
    _System._tuple#14$T8: Ty, 
    _System._tuple#14$T9: Ty, 
    _System._tuple#14$T10: Ty, 
    _System._tuple#14$T11: Ty, 
    _System._tuple#14$T12: Ty, 
    _System._tuple#14$T13: Ty :: 
  { Tclass._System.Tuple14(_System._tuple#14$T0, 
      _System._tuple#14$T1, 
      _System._tuple#14$T2, 
      _System._tuple#14$T3, 
      _System._tuple#14$T4, 
      _System._tuple#14$T5, 
      _System._tuple#14$T6, 
      _System._tuple#14$T7, 
      _System._tuple#14$T8, 
      _System._tuple#14$T9, 
      _System._tuple#14$T10, 
      _System._tuple#14$T11, 
      _System._tuple#14$T12, 
      _System._tuple#14$T13) } 
  Tclass._System.Tuple14_12(Tclass._System.Tuple14(_System._tuple#14$T0, 
        _System._tuple#14$T1, 
        _System._tuple#14$T2, 
        _System._tuple#14$T3, 
        _System._tuple#14$T4, 
        _System._tuple#14$T5, 
        _System._tuple#14$T6, 
        _System._tuple#14$T7, 
        _System._tuple#14$T8, 
        _System._tuple#14$T9, 
        _System._tuple#14$T10, 
        _System._tuple#14$T11, 
        _System._tuple#14$T12, 
        _System._tuple#14$T13))
     == _System._tuple#14$T12);

function Tclass._System.Tuple14_13(Ty) : Ty;

// Tclass._System.Tuple14 injectivity 13
axiom (forall _System._tuple#14$T0: Ty, 
    _System._tuple#14$T1: Ty, 
    _System._tuple#14$T2: Ty, 
    _System._tuple#14$T3: Ty, 
    _System._tuple#14$T4: Ty, 
    _System._tuple#14$T5: Ty, 
    _System._tuple#14$T6: Ty, 
    _System._tuple#14$T7: Ty, 
    _System._tuple#14$T8: Ty, 
    _System._tuple#14$T9: Ty, 
    _System._tuple#14$T10: Ty, 
    _System._tuple#14$T11: Ty, 
    _System._tuple#14$T12: Ty, 
    _System._tuple#14$T13: Ty :: 
  { Tclass._System.Tuple14(_System._tuple#14$T0, 
      _System._tuple#14$T1, 
      _System._tuple#14$T2, 
      _System._tuple#14$T3, 
      _System._tuple#14$T4, 
      _System._tuple#14$T5, 
      _System._tuple#14$T6, 
      _System._tuple#14$T7, 
      _System._tuple#14$T8, 
      _System._tuple#14$T9, 
      _System._tuple#14$T10, 
      _System._tuple#14$T11, 
      _System._tuple#14$T12, 
      _System._tuple#14$T13) } 
  Tclass._System.Tuple14_13(Tclass._System.Tuple14(_System._tuple#14$T0, 
        _System._tuple#14$T1, 
        _System._tuple#14$T2, 
        _System._tuple#14$T3, 
        _System._tuple#14$T4, 
        _System._tuple#14$T5, 
        _System._tuple#14$T6, 
        _System._tuple#14$T7, 
        _System._tuple#14$T8, 
        _System._tuple#14$T9, 
        _System._tuple#14$T10, 
        _System._tuple#14$T11, 
        _System._tuple#14$T12, 
        _System._tuple#14$T13))
     == _System._tuple#14$T13);

// Box/unbox axiom for Tclass._System.Tuple14
axiom (forall _System._tuple#14$T0: Ty, 
    _System._tuple#14$T1: Ty, 
    _System._tuple#14$T2: Ty, 
    _System._tuple#14$T3: Ty, 
    _System._tuple#14$T4: Ty, 
    _System._tuple#14$T5: Ty, 
    _System._tuple#14$T6: Ty, 
    _System._tuple#14$T7: Ty, 
    _System._tuple#14$T8: Ty, 
    _System._tuple#14$T9: Ty, 
    _System._tuple#14$T10: Ty, 
    _System._tuple#14$T11: Ty, 
    _System._tuple#14$T12: Ty, 
    _System._tuple#14$T13: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.Tuple14(_System._tuple#14$T0, 
        _System._tuple#14$T1, 
        _System._tuple#14$T2, 
        _System._tuple#14$T3, 
        _System._tuple#14$T4, 
        _System._tuple#14$T5, 
        _System._tuple#14$T6, 
        _System._tuple#14$T7, 
        _System._tuple#14$T8, 
        _System._tuple#14$T9, 
        _System._tuple#14$T10, 
        _System._tuple#14$T11, 
        _System._tuple#14$T12, 
        _System._tuple#14$T13)) } 
  $IsBox(bx, 
      Tclass._System.Tuple14(_System._tuple#14$T0, 
        _System._tuple#14$T1, 
        _System._tuple#14$T2, 
        _System._tuple#14$T3, 
        _System._tuple#14$T4, 
        _System._tuple#14$T5, 
        _System._tuple#14$T6, 
        _System._tuple#14$T7, 
        _System._tuple#14$T8, 
        _System._tuple#14$T9, 
        _System._tuple#14$T10, 
        _System._tuple#14$T11, 
        _System._tuple#14$T12, 
        _System._tuple#14$T13))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple14(_System._tuple#14$T0, 
          _System._tuple#14$T1, 
          _System._tuple#14$T2, 
          _System._tuple#14$T3, 
          _System._tuple#14$T4, 
          _System._tuple#14$T5, 
          _System._tuple#14$T6, 
          _System._tuple#14$T7, 
          _System._tuple#14$T8, 
          _System._tuple#14$T9, 
          _System._tuple#14$T10, 
          _System._tuple#14$T11, 
          _System._tuple#14$T12, 
          _System._tuple#14$T13)));

// Constructor $Is
axiom (forall _System._tuple#14$T0: Ty, 
    _System._tuple#14$T1: Ty, 
    _System._tuple#14$T2: Ty, 
    _System._tuple#14$T3: Ty, 
    _System._tuple#14$T4: Ty, 
    _System._tuple#14$T5: Ty, 
    _System._tuple#14$T6: Ty, 
    _System._tuple#14$T7: Ty, 
    _System._tuple#14$T8: Ty, 
    _System._tuple#14$T9: Ty, 
    _System._tuple#14$T10: Ty, 
    _System._tuple#14$T11: Ty, 
    _System._tuple#14$T12: Ty, 
    _System._tuple#14$T13: Ty, 
    a#242#0#0: Box, 
    a#242#1#0: Box, 
    a#242#2#0: Box, 
    a#242#3#0: Box, 
    a#242#4#0: Box, 
    a#242#5#0: Box, 
    a#242#6#0: Box, 
    a#242#7#0: Box, 
    a#242#8#0: Box, 
    a#242#9#0: Box, 
    a#242#10#0: Box, 
    a#242#11#0: Box, 
    a#242#12#0: Box, 
    a#242#13#0: Box :: 
  { $Is(#_System._tuple#14._#Make14(a#242#0#0, 
        a#242#1#0, 
        a#242#2#0, 
        a#242#3#0, 
        a#242#4#0, 
        a#242#5#0, 
        a#242#6#0, 
        a#242#7#0, 
        a#242#8#0, 
        a#242#9#0, 
        a#242#10#0, 
        a#242#11#0, 
        a#242#12#0, 
        a#242#13#0), 
      Tclass._System.Tuple14(_System._tuple#14$T0, 
        _System._tuple#14$T1, 
        _System._tuple#14$T2, 
        _System._tuple#14$T3, 
        _System._tuple#14$T4, 
        _System._tuple#14$T5, 
        _System._tuple#14$T6, 
        _System._tuple#14$T7, 
        _System._tuple#14$T8, 
        _System._tuple#14$T9, 
        _System._tuple#14$T10, 
        _System._tuple#14$T11, 
        _System._tuple#14$T12, 
        _System._tuple#14$T13)) } 
  $Is(#_System._tuple#14._#Make14(a#242#0#0, 
        a#242#1#0, 
        a#242#2#0, 
        a#242#3#0, 
        a#242#4#0, 
        a#242#5#0, 
        a#242#6#0, 
        a#242#7#0, 
        a#242#8#0, 
        a#242#9#0, 
        a#242#10#0, 
        a#242#11#0, 
        a#242#12#0, 
        a#242#13#0), 
      Tclass._System.Tuple14(_System._tuple#14$T0, 
        _System._tuple#14$T1, 
        _System._tuple#14$T2, 
        _System._tuple#14$T3, 
        _System._tuple#14$T4, 
        _System._tuple#14$T5, 
        _System._tuple#14$T6, 
        _System._tuple#14$T7, 
        _System._tuple#14$T8, 
        _System._tuple#14$T9, 
        _System._tuple#14$T10, 
        _System._tuple#14$T11, 
        _System._tuple#14$T12, 
        _System._tuple#14$T13))
     <==> $IsBox(a#242#0#0, _System._tuple#14$T0)
       && $IsBox(a#242#1#0, _System._tuple#14$T1)
       && $IsBox(a#242#2#0, _System._tuple#14$T2)
       && $IsBox(a#242#3#0, _System._tuple#14$T3)
       && $IsBox(a#242#4#0, _System._tuple#14$T4)
       && $IsBox(a#242#5#0, _System._tuple#14$T5)
       && $IsBox(a#242#6#0, _System._tuple#14$T6)
       && $IsBox(a#242#7#0, _System._tuple#14$T7)
       && $IsBox(a#242#8#0, _System._tuple#14$T8)
       && $IsBox(a#242#9#0, _System._tuple#14$T9)
       && $IsBox(a#242#10#0, _System._tuple#14$T10)
       && $IsBox(a#242#11#0, _System._tuple#14$T11)
       && $IsBox(a#242#12#0, _System._tuple#14$T12)
       && $IsBox(a#242#13#0, _System._tuple#14$T13));

// Constructor $IsAlloc
axiom (forall _System._tuple#14$T0: Ty, 
    _System._tuple#14$T1: Ty, 
    _System._tuple#14$T2: Ty, 
    _System._tuple#14$T3: Ty, 
    _System._tuple#14$T4: Ty, 
    _System._tuple#14$T5: Ty, 
    _System._tuple#14$T6: Ty, 
    _System._tuple#14$T7: Ty, 
    _System._tuple#14$T8: Ty, 
    _System._tuple#14$T9: Ty, 
    _System._tuple#14$T10: Ty, 
    _System._tuple#14$T11: Ty, 
    _System._tuple#14$T12: Ty, 
    _System._tuple#14$T13: Ty, 
    a#242#0#0: Box, 
    a#242#1#0: Box, 
    a#242#2#0: Box, 
    a#242#3#0: Box, 
    a#242#4#0: Box, 
    a#242#5#0: Box, 
    a#242#6#0: Box, 
    a#242#7#0: Box, 
    a#242#8#0: Box, 
    a#242#9#0: Box, 
    a#242#10#0: Box, 
    a#242#11#0: Box, 
    a#242#12#0: Box, 
    a#242#13#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#14._#Make14(a#242#0#0, 
        a#242#1#0, 
        a#242#2#0, 
        a#242#3#0, 
        a#242#4#0, 
        a#242#5#0, 
        a#242#6#0, 
        a#242#7#0, 
        a#242#8#0, 
        a#242#9#0, 
        a#242#10#0, 
        a#242#11#0, 
        a#242#12#0, 
        a#242#13#0), 
      Tclass._System.Tuple14(_System._tuple#14$T0, 
        _System._tuple#14$T1, 
        _System._tuple#14$T2, 
        _System._tuple#14$T3, 
        _System._tuple#14$T4, 
        _System._tuple#14$T5, 
        _System._tuple#14$T6, 
        _System._tuple#14$T7, 
        _System._tuple#14$T8, 
        _System._tuple#14$T9, 
        _System._tuple#14$T10, 
        _System._tuple#14$T11, 
        _System._tuple#14$T12, 
        _System._tuple#14$T13), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#14._#Make14(a#242#0#0, 
          a#242#1#0, 
          a#242#2#0, 
          a#242#3#0, 
          a#242#4#0, 
          a#242#5#0, 
          a#242#6#0, 
          a#242#7#0, 
          a#242#8#0, 
          a#242#9#0, 
          a#242#10#0, 
          a#242#11#0, 
          a#242#12#0, 
          a#242#13#0), 
        Tclass._System.Tuple14(_System._tuple#14$T0, 
          _System._tuple#14$T1, 
          _System._tuple#14$T2, 
          _System._tuple#14$T3, 
          _System._tuple#14$T4, 
          _System._tuple#14$T5, 
          _System._tuple#14$T6, 
          _System._tuple#14$T7, 
          _System._tuple#14$T8, 
          _System._tuple#14$T9, 
          _System._tuple#14$T10, 
          _System._tuple#14$T11, 
          _System._tuple#14$T12, 
          _System._tuple#14$T13), 
        $h)
       <==> $IsAllocBox(a#242#0#0, _System._tuple#14$T0, $h)
         && $IsAllocBox(a#242#1#0, _System._tuple#14$T1, $h)
         && $IsAllocBox(a#242#2#0, _System._tuple#14$T2, $h)
         && $IsAllocBox(a#242#3#0, _System._tuple#14$T3, $h)
         && $IsAllocBox(a#242#4#0, _System._tuple#14$T4, $h)
         && $IsAllocBox(a#242#5#0, _System._tuple#14$T5, $h)
         && $IsAllocBox(a#242#6#0, _System._tuple#14$T6, $h)
         && $IsAllocBox(a#242#7#0, _System._tuple#14$T7, $h)
         && $IsAllocBox(a#242#8#0, _System._tuple#14$T8, $h)
         && $IsAllocBox(a#242#9#0, _System._tuple#14$T9, $h)
         && $IsAllocBox(a#242#10#0, _System._tuple#14$T10, $h)
         && $IsAllocBox(a#242#11#0, _System._tuple#14$T11, $h)
         && $IsAllocBox(a#242#12#0, _System._tuple#14$T12, $h)
         && $IsAllocBox(a#242#13#0, _System._tuple#14$T13, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#14$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple14._0(d), _System._tuple#14$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple14.___hMake14_q(d)
       && (exists _System._tuple#14$T1: Ty, 
          _System._tuple#14$T2: Ty, 
          _System._tuple#14$T3: Ty, 
          _System._tuple#14$T4: Ty, 
          _System._tuple#14$T5: Ty, 
          _System._tuple#14$T6: Ty, 
          _System._tuple#14$T7: Ty, 
          _System._tuple#14$T8: Ty, 
          _System._tuple#14$T9: Ty, 
          _System._tuple#14$T10: Ty, 
          _System._tuple#14$T11: Ty, 
          _System._tuple#14$T12: Ty, 
          _System._tuple#14$T13: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple14(_System._tuple#14$T0, 
              _System._tuple#14$T1, 
              _System._tuple#14$T2, 
              _System._tuple#14$T3, 
              _System._tuple#14$T4, 
              _System._tuple#14$T5, 
              _System._tuple#14$T6, 
              _System._tuple#14$T7, 
              _System._tuple#14$T8, 
              _System._tuple#14$T9, 
              _System._tuple#14$T10, 
              _System._tuple#14$T11, 
              _System._tuple#14$T12, 
              _System._tuple#14$T13), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple14(_System._tuple#14$T0, 
            _System._tuple#14$T1, 
            _System._tuple#14$T2, 
            _System._tuple#14$T3, 
            _System._tuple#14$T4, 
            _System._tuple#14$T5, 
            _System._tuple#14$T6, 
            _System._tuple#14$T7, 
            _System._tuple#14$T8, 
            _System._tuple#14$T9, 
            _System._tuple#14$T10, 
            _System._tuple#14$T11, 
            _System._tuple#14$T12, 
            _System._tuple#14$T13), 
          $h))
     ==> $IsAllocBox(_System.Tuple14._0(d), _System._tuple#14$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#14$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple14._1(d), _System._tuple#14$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple14.___hMake14_q(d)
       && (exists _System._tuple#14$T0: Ty, 
          _System._tuple#14$T2: Ty, 
          _System._tuple#14$T3: Ty, 
          _System._tuple#14$T4: Ty, 
          _System._tuple#14$T5: Ty, 
          _System._tuple#14$T6: Ty, 
          _System._tuple#14$T7: Ty, 
          _System._tuple#14$T8: Ty, 
          _System._tuple#14$T9: Ty, 
          _System._tuple#14$T10: Ty, 
          _System._tuple#14$T11: Ty, 
          _System._tuple#14$T12: Ty, 
          _System._tuple#14$T13: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple14(_System._tuple#14$T0, 
              _System._tuple#14$T1, 
              _System._tuple#14$T2, 
              _System._tuple#14$T3, 
              _System._tuple#14$T4, 
              _System._tuple#14$T5, 
              _System._tuple#14$T6, 
              _System._tuple#14$T7, 
              _System._tuple#14$T8, 
              _System._tuple#14$T9, 
              _System._tuple#14$T10, 
              _System._tuple#14$T11, 
              _System._tuple#14$T12, 
              _System._tuple#14$T13), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple14(_System._tuple#14$T0, 
            _System._tuple#14$T1, 
            _System._tuple#14$T2, 
            _System._tuple#14$T3, 
            _System._tuple#14$T4, 
            _System._tuple#14$T5, 
            _System._tuple#14$T6, 
            _System._tuple#14$T7, 
            _System._tuple#14$T8, 
            _System._tuple#14$T9, 
            _System._tuple#14$T10, 
            _System._tuple#14$T11, 
            _System._tuple#14$T12, 
            _System._tuple#14$T13), 
          $h))
     ==> $IsAllocBox(_System.Tuple14._1(d), _System._tuple#14$T1, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#14$T2: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple14._2(d), _System._tuple#14$T2, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple14.___hMake14_q(d)
       && (exists _System._tuple#14$T0: Ty, 
          _System._tuple#14$T1: Ty, 
          _System._tuple#14$T3: Ty, 
          _System._tuple#14$T4: Ty, 
          _System._tuple#14$T5: Ty, 
          _System._tuple#14$T6: Ty, 
          _System._tuple#14$T7: Ty, 
          _System._tuple#14$T8: Ty, 
          _System._tuple#14$T9: Ty, 
          _System._tuple#14$T10: Ty, 
          _System._tuple#14$T11: Ty, 
          _System._tuple#14$T12: Ty, 
          _System._tuple#14$T13: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple14(_System._tuple#14$T0, 
              _System._tuple#14$T1, 
              _System._tuple#14$T2, 
              _System._tuple#14$T3, 
              _System._tuple#14$T4, 
              _System._tuple#14$T5, 
              _System._tuple#14$T6, 
              _System._tuple#14$T7, 
              _System._tuple#14$T8, 
              _System._tuple#14$T9, 
              _System._tuple#14$T10, 
              _System._tuple#14$T11, 
              _System._tuple#14$T12, 
              _System._tuple#14$T13), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple14(_System._tuple#14$T0, 
            _System._tuple#14$T1, 
            _System._tuple#14$T2, 
            _System._tuple#14$T3, 
            _System._tuple#14$T4, 
            _System._tuple#14$T5, 
            _System._tuple#14$T6, 
            _System._tuple#14$T7, 
            _System._tuple#14$T8, 
            _System._tuple#14$T9, 
            _System._tuple#14$T10, 
            _System._tuple#14$T11, 
            _System._tuple#14$T12, 
            _System._tuple#14$T13), 
          $h))
     ==> $IsAllocBox(_System.Tuple14._2(d), _System._tuple#14$T2, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#14$T3: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple14._3(d), _System._tuple#14$T3, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple14.___hMake14_q(d)
       && (exists _System._tuple#14$T0: Ty, 
          _System._tuple#14$T1: Ty, 
          _System._tuple#14$T2: Ty, 
          _System._tuple#14$T4: Ty, 
          _System._tuple#14$T5: Ty, 
          _System._tuple#14$T6: Ty, 
          _System._tuple#14$T7: Ty, 
          _System._tuple#14$T8: Ty, 
          _System._tuple#14$T9: Ty, 
          _System._tuple#14$T10: Ty, 
          _System._tuple#14$T11: Ty, 
          _System._tuple#14$T12: Ty, 
          _System._tuple#14$T13: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple14(_System._tuple#14$T0, 
              _System._tuple#14$T1, 
              _System._tuple#14$T2, 
              _System._tuple#14$T3, 
              _System._tuple#14$T4, 
              _System._tuple#14$T5, 
              _System._tuple#14$T6, 
              _System._tuple#14$T7, 
              _System._tuple#14$T8, 
              _System._tuple#14$T9, 
              _System._tuple#14$T10, 
              _System._tuple#14$T11, 
              _System._tuple#14$T12, 
              _System._tuple#14$T13), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple14(_System._tuple#14$T0, 
            _System._tuple#14$T1, 
            _System._tuple#14$T2, 
            _System._tuple#14$T3, 
            _System._tuple#14$T4, 
            _System._tuple#14$T5, 
            _System._tuple#14$T6, 
            _System._tuple#14$T7, 
            _System._tuple#14$T8, 
            _System._tuple#14$T9, 
            _System._tuple#14$T10, 
            _System._tuple#14$T11, 
            _System._tuple#14$T12, 
            _System._tuple#14$T13), 
          $h))
     ==> $IsAllocBox(_System.Tuple14._3(d), _System._tuple#14$T3, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#14$T4: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple14._4(d), _System._tuple#14$T4, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple14.___hMake14_q(d)
       && (exists _System._tuple#14$T0: Ty, 
          _System._tuple#14$T1: Ty, 
          _System._tuple#14$T2: Ty, 
          _System._tuple#14$T3: Ty, 
          _System._tuple#14$T5: Ty, 
          _System._tuple#14$T6: Ty, 
          _System._tuple#14$T7: Ty, 
          _System._tuple#14$T8: Ty, 
          _System._tuple#14$T9: Ty, 
          _System._tuple#14$T10: Ty, 
          _System._tuple#14$T11: Ty, 
          _System._tuple#14$T12: Ty, 
          _System._tuple#14$T13: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple14(_System._tuple#14$T0, 
              _System._tuple#14$T1, 
              _System._tuple#14$T2, 
              _System._tuple#14$T3, 
              _System._tuple#14$T4, 
              _System._tuple#14$T5, 
              _System._tuple#14$T6, 
              _System._tuple#14$T7, 
              _System._tuple#14$T8, 
              _System._tuple#14$T9, 
              _System._tuple#14$T10, 
              _System._tuple#14$T11, 
              _System._tuple#14$T12, 
              _System._tuple#14$T13), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple14(_System._tuple#14$T0, 
            _System._tuple#14$T1, 
            _System._tuple#14$T2, 
            _System._tuple#14$T3, 
            _System._tuple#14$T4, 
            _System._tuple#14$T5, 
            _System._tuple#14$T6, 
            _System._tuple#14$T7, 
            _System._tuple#14$T8, 
            _System._tuple#14$T9, 
            _System._tuple#14$T10, 
            _System._tuple#14$T11, 
            _System._tuple#14$T12, 
            _System._tuple#14$T13), 
          $h))
     ==> $IsAllocBox(_System.Tuple14._4(d), _System._tuple#14$T4, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#14$T5: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple14._5(d), _System._tuple#14$T5, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple14.___hMake14_q(d)
       && (exists _System._tuple#14$T0: Ty, 
          _System._tuple#14$T1: Ty, 
          _System._tuple#14$T2: Ty, 
          _System._tuple#14$T3: Ty, 
          _System._tuple#14$T4: Ty, 
          _System._tuple#14$T6: Ty, 
          _System._tuple#14$T7: Ty, 
          _System._tuple#14$T8: Ty, 
          _System._tuple#14$T9: Ty, 
          _System._tuple#14$T10: Ty, 
          _System._tuple#14$T11: Ty, 
          _System._tuple#14$T12: Ty, 
          _System._tuple#14$T13: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple14(_System._tuple#14$T0, 
              _System._tuple#14$T1, 
              _System._tuple#14$T2, 
              _System._tuple#14$T3, 
              _System._tuple#14$T4, 
              _System._tuple#14$T5, 
              _System._tuple#14$T6, 
              _System._tuple#14$T7, 
              _System._tuple#14$T8, 
              _System._tuple#14$T9, 
              _System._tuple#14$T10, 
              _System._tuple#14$T11, 
              _System._tuple#14$T12, 
              _System._tuple#14$T13), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple14(_System._tuple#14$T0, 
            _System._tuple#14$T1, 
            _System._tuple#14$T2, 
            _System._tuple#14$T3, 
            _System._tuple#14$T4, 
            _System._tuple#14$T5, 
            _System._tuple#14$T6, 
            _System._tuple#14$T7, 
            _System._tuple#14$T8, 
            _System._tuple#14$T9, 
            _System._tuple#14$T10, 
            _System._tuple#14$T11, 
            _System._tuple#14$T12, 
            _System._tuple#14$T13), 
          $h))
     ==> $IsAllocBox(_System.Tuple14._5(d), _System._tuple#14$T5, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#14$T6: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple14._6(d), _System._tuple#14$T6, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple14.___hMake14_q(d)
       && (exists _System._tuple#14$T0: Ty, 
          _System._tuple#14$T1: Ty, 
          _System._tuple#14$T2: Ty, 
          _System._tuple#14$T3: Ty, 
          _System._tuple#14$T4: Ty, 
          _System._tuple#14$T5: Ty, 
          _System._tuple#14$T7: Ty, 
          _System._tuple#14$T8: Ty, 
          _System._tuple#14$T9: Ty, 
          _System._tuple#14$T10: Ty, 
          _System._tuple#14$T11: Ty, 
          _System._tuple#14$T12: Ty, 
          _System._tuple#14$T13: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple14(_System._tuple#14$T0, 
              _System._tuple#14$T1, 
              _System._tuple#14$T2, 
              _System._tuple#14$T3, 
              _System._tuple#14$T4, 
              _System._tuple#14$T5, 
              _System._tuple#14$T6, 
              _System._tuple#14$T7, 
              _System._tuple#14$T8, 
              _System._tuple#14$T9, 
              _System._tuple#14$T10, 
              _System._tuple#14$T11, 
              _System._tuple#14$T12, 
              _System._tuple#14$T13), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple14(_System._tuple#14$T0, 
            _System._tuple#14$T1, 
            _System._tuple#14$T2, 
            _System._tuple#14$T3, 
            _System._tuple#14$T4, 
            _System._tuple#14$T5, 
            _System._tuple#14$T6, 
            _System._tuple#14$T7, 
            _System._tuple#14$T8, 
            _System._tuple#14$T9, 
            _System._tuple#14$T10, 
            _System._tuple#14$T11, 
            _System._tuple#14$T12, 
            _System._tuple#14$T13), 
          $h))
     ==> $IsAllocBox(_System.Tuple14._6(d), _System._tuple#14$T6, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#14$T7: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple14._7(d), _System._tuple#14$T7, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple14.___hMake14_q(d)
       && (exists _System._tuple#14$T0: Ty, 
          _System._tuple#14$T1: Ty, 
          _System._tuple#14$T2: Ty, 
          _System._tuple#14$T3: Ty, 
          _System._tuple#14$T4: Ty, 
          _System._tuple#14$T5: Ty, 
          _System._tuple#14$T6: Ty, 
          _System._tuple#14$T8: Ty, 
          _System._tuple#14$T9: Ty, 
          _System._tuple#14$T10: Ty, 
          _System._tuple#14$T11: Ty, 
          _System._tuple#14$T12: Ty, 
          _System._tuple#14$T13: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple14(_System._tuple#14$T0, 
              _System._tuple#14$T1, 
              _System._tuple#14$T2, 
              _System._tuple#14$T3, 
              _System._tuple#14$T4, 
              _System._tuple#14$T5, 
              _System._tuple#14$T6, 
              _System._tuple#14$T7, 
              _System._tuple#14$T8, 
              _System._tuple#14$T9, 
              _System._tuple#14$T10, 
              _System._tuple#14$T11, 
              _System._tuple#14$T12, 
              _System._tuple#14$T13), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple14(_System._tuple#14$T0, 
            _System._tuple#14$T1, 
            _System._tuple#14$T2, 
            _System._tuple#14$T3, 
            _System._tuple#14$T4, 
            _System._tuple#14$T5, 
            _System._tuple#14$T6, 
            _System._tuple#14$T7, 
            _System._tuple#14$T8, 
            _System._tuple#14$T9, 
            _System._tuple#14$T10, 
            _System._tuple#14$T11, 
            _System._tuple#14$T12, 
            _System._tuple#14$T13), 
          $h))
     ==> $IsAllocBox(_System.Tuple14._7(d), _System._tuple#14$T7, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#14$T8: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple14._8(d), _System._tuple#14$T8, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple14.___hMake14_q(d)
       && (exists _System._tuple#14$T0: Ty, 
          _System._tuple#14$T1: Ty, 
          _System._tuple#14$T2: Ty, 
          _System._tuple#14$T3: Ty, 
          _System._tuple#14$T4: Ty, 
          _System._tuple#14$T5: Ty, 
          _System._tuple#14$T6: Ty, 
          _System._tuple#14$T7: Ty, 
          _System._tuple#14$T9: Ty, 
          _System._tuple#14$T10: Ty, 
          _System._tuple#14$T11: Ty, 
          _System._tuple#14$T12: Ty, 
          _System._tuple#14$T13: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple14(_System._tuple#14$T0, 
              _System._tuple#14$T1, 
              _System._tuple#14$T2, 
              _System._tuple#14$T3, 
              _System._tuple#14$T4, 
              _System._tuple#14$T5, 
              _System._tuple#14$T6, 
              _System._tuple#14$T7, 
              _System._tuple#14$T8, 
              _System._tuple#14$T9, 
              _System._tuple#14$T10, 
              _System._tuple#14$T11, 
              _System._tuple#14$T12, 
              _System._tuple#14$T13), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple14(_System._tuple#14$T0, 
            _System._tuple#14$T1, 
            _System._tuple#14$T2, 
            _System._tuple#14$T3, 
            _System._tuple#14$T4, 
            _System._tuple#14$T5, 
            _System._tuple#14$T6, 
            _System._tuple#14$T7, 
            _System._tuple#14$T8, 
            _System._tuple#14$T9, 
            _System._tuple#14$T10, 
            _System._tuple#14$T11, 
            _System._tuple#14$T12, 
            _System._tuple#14$T13), 
          $h))
     ==> $IsAllocBox(_System.Tuple14._8(d), _System._tuple#14$T8, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#14$T9: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple14._9(d), _System._tuple#14$T9, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple14.___hMake14_q(d)
       && (exists _System._tuple#14$T0: Ty, 
          _System._tuple#14$T1: Ty, 
          _System._tuple#14$T2: Ty, 
          _System._tuple#14$T3: Ty, 
          _System._tuple#14$T4: Ty, 
          _System._tuple#14$T5: Ty, 
          _System._tuple#14$T6: Ty, 
          _System._tuple#14$T7: Ty, 
          _System._tuple#14$T8: Ty, 
          _System._tuple#14$T10: Ty, 
          _System._tuple#14$T11: Ty, 
          _System._tuple#14$T12: Ty, 
          _System._tuple#14$T13: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple14(_System._tuple#14$T0, 
              _System._tuple#14$T1, 
              _System._tuple#14$T2, 
              _System._tuple#14$T3, 
              _System._tuple#14$T4, 
              _System._tuple#14$T5, 
              _System._tuple#14$T6, 
              _System._tuple#14$T7, 
              _System._tuple#14$T8, 
              _System._tuple#14$T9, 
              _System._tuple#14$T10, 
              _System._tuple#14$T11, 
              _System._tuple#14$T12, 
              _System._tuple#14$T13), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple14(_System._tuple#14$T0, 
            _System._tuple#14$T1, 
            _System._tuple#14$T2, 
            _System._tuple#14$T3, 
            _System._tuple#14$T4, 
            _System._tuple#14$T5, 
            _System._tuple#14$T6, 
            _System._tuple#14$T7, 
            _System._tuple#14$T8, 
            _System._tuple#14$T9, 
            _System._tuple#14$T10, 
            _System._tuple#14$T11, 
            _System._tuple#14$T12, 
            _System._tuple#14$T13), 
          $h))
     ==> $IsAllocBox(_System.Tuple14._9(d), _System._tuple#14$T9, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#14$T10: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple14._10(d), _System._tuple#14$T10, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple14.___hMake14_q(d)
       && (exists _System._tuple#14$T0: Ty, 
          _System._tuple#14$T1: Ty, 
          _System._tuple#14$T2: Ty, 
          _System._tuple#14$T3: Ty, 
          _System._tuple#14$T4: Ty, 
          _System._tuple#14$T5: Ty, 
          _System._tuple#14$T6: Ty, 
          _System._tuple#14$T7: Ty, 
          _System._tuple#14$T8: Ty, 
          _System._tuple#14$T9: Ty, 
          _System._tuple#14$T11: Ty, 
          _System._tuple#14$T12: Ty, 
          _System._tuple#14$T13: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple14(_System._tuple#14$T0, 
              _System._tuple#14$T1, 
              _System._tuple#14$T2, 
              _System._tuple#14$T3, 
              _System._tuple#14$T4, 
              _System._tuple#14$T5, 
              _System._tuple#14$T6, 
              _System._tuple#14$T7, 
              _System._tuple#14$T8, 
              _System._tuple#14$T9, 
              _System._tuple#14$T10, 
              _System._tuple#14$T11, 
              _System._tuple#14$T12, 
              _System._tuple#14$T13), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple14(_System._tuple#14$T0, 
            _System._tuple#14$T1, 
            _System._tuple#14$T2, 
            _System._tuple#14$T3, 
            _System._tuple#14$T4, 
            _System._tuple#14$T5, 
            _System._tuple#14$T6, 
            _System._tuple#14$T7, 
            _System._tuple#14$T8, 
            _System._tuple#14$T9, 
            _System._tuple#14$T10, 
            _System._tuple#14$T11, 
            _System._tuple#14$T12, 
            _System._tuple#14$T13), 
          $h))
     ==> $IsAllocBox(_System.Tuple14._10(d), _System._tuple#14$T10, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#14$T11: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple14._11(d), _System._tuple#14$T11, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple14.___hMake14_q(d)
       && (exists _System._tuple#14$T0: Ty, 
          _System._tuple#14$T1: Ty, 
          _System._tuple#14$T2: Ty, 
          _System._tuple#14$T3: Ty, 
          _System._tuple#14$T4: Ty, 
          _System._tuple#14$T5: Ty, 
          _System._tuple#14$T6: Ty, 
          _System._tuple#14$T7: Ty, 
          _System._tuple#14$T8: Ty, 
          _System._tuple#14$T9: Ty, 
          _System._tuple#14$T10: Ty, 
          _System._tuple#14$T12: Ty, 
          _System._tuple#14$T13: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple14(_System._tuple#14$T0, 
              _System._tuple#14$T1, 
              _System._tuple#14$T2, 
              _System._tuple#14$T3, 
              _System._tuple#14$T4, 
              _System._tuple#14$T5, 
              _System._tuple#14$T6, 
              _System._tuple#14$T7, 
              _System._tuple#14$T8, 
              _System._tuple#14$T9, 
              _System._tuple#14$T10, 
              _System._tuple#14$T11, 
              _System._tuple#14$T12, 
              _System._tuple#14$T13), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple14(_System._tuple#14$T0, 
            _System._tuple#14$T1, 
            _System._tuple#14$T2, 
            _System._tuple#14$T3, 
            _System._tuple#14$T4, 
            _System._tuple#14$T5, 
            _System._tuple#14$T6, 
            _System._tuple#14$T7, 
            _System._tuple#14$T8, 
            _System._tuple#14$T9, 
            _System._tuple#14$T10, 
            _System._tuple#14$T11, 
            _System._tuple#14$T12, 
            _System._tuple#14$T13), 
          $h))
     ==> $IsAllocBox(_System.Tuple14._11(d), _System._tuple#14$T11, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#14$T12: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple14._12(d), _System._tuple#14$T12, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple14.___hMake14_q(d)
       && (exists _System._tuple#14$T0: Ty, 
          _System._tuple#14$T1: Ty, 
          _System._tuple#14$T2: Ty, 
          _System._tuple#14$T3: Ty, 
          _System._tuple#14$T4: Ty, 
          _System._tuple#14$T5: Ty, 
          _System._tuple#14$T6: Ty, 
          _System._tuple#14$T7: Ty, 
          _System._tuple#14$T8: Ty, 
          _System._tuple#14$T9: Ty, 
          _System._tuple#14$T10: Ty, 
          _System._tuple#14$T11: Ty, 
          _System._tuple#14$T13: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple14(_System._tuple#14$T0, 
              _System._tuple#14$T1, 
              _System._tuple#14$T2, 
              _System._tuple#14$T3, 
              _System._tuple#14$T4, 
              _System._tuple#14$T5, 
              _System._tuple#14$T6, 
              _System._tuple#14$T7, 
              _System._tuple#14$T8, 
              _System._tuple#14$T9, 
              _System._tuple#14$T10, 
              _System._tuple#14$T11, 
              _System._tuple#14$T12, 
              _System._tuple#14$T13), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple14(_System._tuple#14$T0, 
            _System._tuple#14$T1, 
            _System._tuple#14$T2, 
            _System._tuple#14$T3, 
            _System._tuple#14$T4, 
            _System._tuple#14$T5, 
            _System._tuple#14$T6, 
            _System._tuple#14$T7, 
            _System._tuple#14$T8, 
            _System._tuple#14$T9, 
            _System._tuple#14$T10, 
            _System._tuple#14$T11, 
            _System._tuple#14$T12, 
            _System._tuple#14$T13), 
          $h))
     ==> $IsAllocBox(_System.Tuple14._12(d), _System._tuple#14$T12, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#14$T13: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple14._13(d), _System._tuple#14$T13, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple14.___hMake14_q(d)
       && (exists _System._tuple#14$T0: Ty, 
          _System._tuple#14$T1: Ty, 
          _System._tuple#14$T2: Ty, 
          _System._tuple#14$T3: Ty, 
          _System._tuple#14$T4: Ty, 
          _System._tuple#14$T5: Ty, 
          _System._tuple#14$T6: Ty, 
          _System._tuple#14$T7: Ty, 
          _System._tuple#14$T8: Ty, 
          _System._tuple#14$T9: Ty, 
          _System._tuple#14$T10: Ty, 
          _System._tuple#14$T11: Ty, 
          _System._tuple#14$T12: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple14(_System._tuple#14$T0, 
              _System._tuple#14$T1, 
              _System._tuple#14$T2, 
              _System._tuple#14$T3, 
              _System._tuple#14$T4, 
              _System._tuple#14$T5, 
              _System._tuple#14$T6, 
              _System._tuple#14$T7, 
              _System._tuple#14$T8, 
              _System._tuple#14$T9, 
              _System._tuple#14$T10, 
              _System._tuple#14$T11, 
              _System._tuple#14$T12, 
              _System._tuple#14$T13), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple14(_System._tuple#14$T0, 
            _System._tuple#14$T1, 
            _System._tuple#14$T2, 
            _System._tuple#14$T3, 
            _System._tuple#14$T4, 
            _System._tuple#14$T5, 
            _System._tuple#14$T6, 
            _System._tuple#14$T7, 
            _System._tuple#14$T8, 
            _System._tuple#14$T9, 
            _System._tuple#14$T10, 
            _System._tuple#14$T11, 
            _System._tuple#14$T12, 
            _System._tuple#14$T13), 
          $h))
     ==> $IsAllocBox(_System.Tuple14._13(d), _System._tuple#14$T13, $h));

// Constructor literal
axiom (forall a#243#0#0: Box, 
    a#243#1#0: Box, 
    a#243#2#0: Box, 
    a#243#3#0: Box, 
    a#243#4#0: Box, 
    a#243#5#0: Box, 
    a#243#6#0: Box, 
    a#243#7#0: Box, 
    a#243#8#0: Box, 
    a#243#9#0: Box, 
    a#243#10#0: Box, 
    a#243#11#0: Box, 
    a#243#12#0: Box, 
    a#243#13#0: Box :: 
  { #_System._tuple#14._#Make14(Lit(a#243#0#0), 
      Lit(a#243#1#0), 
      Lit(a#243#2#0), 
      Lit(a#243#3#0), 
      Lit(a#243#4#0), 
      Lit(a#243#5#0), 
      Lit(a#243#6#0), 
      Lit(a#243#7#0), 
      Lit(a#243#8#0), 
      Lit(a#243#9#0), 
      Lit(a#243#10#0), 
      Lit(a#243#11#0), 
      Lit(a#243#12#0), 
      Lit(a#243#13#0)) } 
  #_System._tuple#14._#Make14(Lit(a#243#0#0), 
      Lit(a#243#1#0), 
      Lit(a#243#2#0), 
      Lit(a#243#3#0), 
      Lit(a#243#4#0), 
      Lit(a#243#5#0), 
      Lit(a#243#6#0), 
      Lit(a#243#7#0), 
      Lit(a#243#8#0), 
      Lit(a#243#9#0), 
      Lit(a#243#10#0), 
      Lit(a#243#11#0), 
      Lit(a#243#12#0), 
      Lit(a#243#13#0))
     == Lit(#_System._tuple#14._#Make14(a#243#0#0, 
        a#243#1#0, 
        a#243#2#0, 
        a#243#3#0, 
        a#243#4#0, 
        a#243#5#0, 
        a#243#6#0, 
        a#243#7#0, 
        a#243#8#0, 
        a#243#9#0, 
        a#243#10#0, 
        a#243#11#0, 
        a#243#12#0, 
        a#243#13#0)));

function _System.Tuple14._0(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#244#0#0: Box, 
    a#244#1#0: Box, 
    a#244#2#0: Box, 
    a#244#3#0: Box, 
    a#244#4#0: Box, 
    a#244#5#0: Box, 
    a#244#6#0: Box, 
    a#244#7#0: Box, 
    a#244#8#0: Box, 
    a#244#9#0: Box, 
    a#244#10#0: Box, 
    a#244#11#0: Box, 
    a#244#12#0: Box, 
    a#244#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#244#0#0, 
      a#244#1#0, 
      a#244#2#0, 
      a#244#3#0, 
      a#244#4#0, 
      a#244#5#0, 
      a#244#6#0, 
      a#244#7#0, 
      a#244#8#0, 
      a#244#9#0, 
      a#244#10#0, 
      a#244#11#0, 
      a#244#12#0, 
      a#244#13#0) } 
  _System.Tuple14._0(#_System._tuple#14._#Make14(a#244#0#0, 
        a#244#1#0, 
        a#244#2#0, 
        a#244#3#0, 
        a#244#4#0, 
        a#244#5#0, 
        a#244#6#0, 
        a#244#7#0, 
        a#244#8#0, 
        a#244#9#0, 
        a#244#10#0, 
        a#244#11#0, 
        a#244#12#0, 
        a#244#13#0))
     == a#244#0#0);

// Inductive rank
axiom (forall a#245#0#0: Box, 
    a#245#1#0: Box, 
    a#245#2#0: Box, 
    a#245#3#0: Box, 
    a#245#4#0: Box, 
    a#245#5#0: Box, 
    a#245#6#0: Box, 
    a#245#7#0: Box, 
    a#245#8#0: Box, 
    a#245#9#0: Box, 
    a#245#10#0: Box, 
    a#245#11#0: Box, 
    a#245#12#0: Box, 
    a#245#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#245#0#0, 
      a#245#1#0, 
      a#245#2#0, 
      a#245#3#0, 
      a#245#4#0, 
      a#245#5#0, 
      a#245#6#0, 
      a#245#7#0, 
      a#245#8#0, 
      a#245#9#0, 
      a#245#10#0, 
      a#245#11#0, 
      a#245#12#0, 
      a#245#13#0) } 
  BoxRank(a#245#0#0)
     < DtRank(#_System._tuple#14._#Make14(a#245#0#0, 
        a#245#1#0, 
        a#245#2#0, 
        a#245#3#0, 
        a#245#4#0, 
        a#245#5#0, 
        a#245#6#0, 
        a#245#7#0, 
        a#245#8#0, 
        a#245#9#0, 
        a#245#10#0, 
        a#245#11#0, 
        a#245#12#0, 
        a#245#13#0)));

function _System.Tuple14._1(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#246#0#0: Box, 
    a#246#1#0: Box, 
    a#246#2#0: Box, 
    a#246#3#0: Box, 
    a#246#4#0: Box, 
    a#246#5#0: Box, 
    a#246#6#0: Box, 
    a#246#7#0: Box, 
    a#246#8#0: Box, 
    a#246#9#0: Box, 
    a#246#10#0: Box, 
    a#246#11#0: Box, 
    a#246#12#0: Box, 
    a#246#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#246#0#0, 
      a#246#1#0, 
      a#246#2#0, 
      a#246#3#0, 
      a#246#4#0, 
      a#246#5#0, 
      a#246#6#0, 
      a#246#7#0, 
      a#246#8#0, 
      a#246#9#0, 
      a#246#10#0, 
      a#246#11#0, 
      a#246#12#0, 
      a#246#13#0) } 
  _System.Tuple14._1(#_System._tuple#14._#Make14(a#246#0#0, 
        a#246#1#0, 
        a#246#2#0, 
        a#246#3#0, 
        a#246#4#0, 
        a#246#5#0, 
        a#246#6#0, 
        a#246#7#0, 
        a#246#8#0, 
        a#246#9#0, 
        a#246#10#0, 
        a#246#11#0, 
        a#246#12#0, 
        a#246#13#0))
     == a#246#1#0);

// Inductive rank
axiom (forall a#247#0#0: Box, 
    a#247#1#0: Box, 
    a#247#2#0: Box, 
    a#247#3#0: Box, 
    a#247#4#0: Box, 
    a#247#5#0: Box, 
    a#247#6#0: Box, 
    a#247#7#0: Box, 
    a#247#8#0: Box, 
    a#247#9#0: Box, 
    a#247#10#0: Box, 
    a#247#11#0: Box, 
    a#247#12#0: Box, 
    a#247#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#247#0#0, 
      a#247#1#0, 
      a#247#2#0, 
      a#247#3#0, 
      a#247#4#0, 
      a#247#5#0, 
      a#247#6#0, 
      a#247#7#0, 
      a#247#8#0, 
      a#247#9#0, 
      a#247#10#0, 
      a#247#11#0, 
      a#247#12#0, 
      a#247#13#0) } 
  BoxRank(a#247#1#0)
     < DtRank(#_System._tuple#14._#Make14(a#247#0#0, 
        a#247#1#0, 
        a#247#2#0, 
        a#247#3#0, 
        a#247#4#0, 
        a#247#5#0, 
        a#247#6#0, 
        a#247#7#0, 
        a#247#8#0, 
        a#247#9#0, 
        a#247#10#0, 
        a#247#11#0, 
        a#247#12#0, 
        a#247#13#0)));

function _System.Tuple14._2(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#248#0#0: Box, 
    a#248#1#0: Box, 
    a#248#2#0: Box, 
    a#248#3#0: Box, 
    a#248#4#0: Box, 
    a#248#5#0: Box, 
    a#248#6#0: Box, 
    a#248#7#0: Box, 
    a#248#8#0: Box, 
    a#248#9#0: Box, 
    a#248#10#0: Box, 
    a#248#11#0: Box, 
    a#248#12#0: Box, 
    a#248#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#248#0#0, 
      a#248#1#0, 
      a#248#2#0, 
      a#248#3#0, 
      a#248#4#0, 
      a#248#5#0, 
      a#248#6#0, 
      a#248#7#0, 
      a#248#8#0, 
      a#248#9#0, 
      a#248#10#0, 
      a#248#11#0, 
      a#248#12#0, 
      a#248#13#0) } 
  _System.Tuple14._2(#_System._tuple#14._#Make14(a#248#0#0, 
        a#248#1#0, 
        a#248#2#0, 
        a#248#3#0, 
        a#248#4#0, 
        a#248#5#0, 
        a#248#6#0, 
        a#248#7#0, 
        a#248#8#0, 
        a#248#9#0, 
        a#248#10#0, 
        a#248#11#0, 
        a#248#12#0, 
        a#248#13#0))
     == a#248#2#0);

// Inductive rank
axiom (forall a#249#0#0: Box, 
    a#249#1#0: Box, 
    a#249#2#0: Box, 
    a#249#3#0: Box, 
    a#249#4#0: Box, 
    a#249#5#0: Box, 
    a#249#6#0: Box, 
    a#249#7#0: Box, 
    a#249#8#0: Box, 
    a#249#9#0: Box, 
    a#249#10#0: Box, 
    a#249#11#0: Box, 
    a#249#12#0: Box, 
    a#249#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#249#0#0, 
      a#249#1#0, 
      a#249#2#0, 
      a#249#3#0, 
      a#249#4#0, 
      a#249#5#0, 
      a#249#6#0, 
      a#249#7#0, 
      a#249#8#0, 
      a#249#9#0, 
      a#249#10#0, 
      a#249#11#0, 
      a#249#12#0, 
      a#249#13#0) } 
  BoxRank(a#249#2#0)
     < DtRank(#_System._tuple#14._#Make14(a#249#0#0, 
        a#249#1#0, 
        a#249#2#0, 
        a#249#3#0, 
        a#249#4#0, 
        a#249#5#0, 
        a#249#6#0, 
        a#249#7#0, 
        a#249#8#0, 
        a#249#9#0, 
        a#249#10#0, 
        a#249#11#0, 
        a#249#12#0, 
        a#249#13#0)));

function _System.Tuple14._3(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#250#0#0: Box, 
    a#250#1#0: Box, 
    a#250#2#0: Box, 
    a#250#3#0: Box, 
    a#250#4#0: Box, 
    a#250#5#0: Box, 
    a#250#6#0: Box, 
    a#250#7#0: Box, 
    a#250#8#0: Box, 
    a#250#9#0: Box, 
    a#250#10#0: Box, 
    a#250#11#0: Box, 
    a#250#12#0: Box, 
    a#250#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#250#0#0, 
      a#250#1#0, 
      a#250#2#0, 
      a#250#3#0, 
      a#250#4#0, 
      a#250#5#0, 
      a#250#6#0, 
      a#250#7#0, 
      a#250#8#0, 
      a#250#9#0, 
      a#250#10#0, 
      a#250#11#0, 
      a#250#12#0, 
      a#250#13#0) } 
  _System.Tuple14._3(#_System._tuple#14._#Make14(a#250#0#0, 
        a#250#1#0, 
        a#250#2#0, 
        a#250#3#0, 
        a#250#4#0, 
        a#250#5#0, 
        a#250#6#0, 
        a#250#7#0, 
        a#250#8#0, 
        a#250#9#0, 
        a#250#10#0, 
        a#250#11#0, 
        a#250#12#0, 
        a#250#13#0))
     == a#250#3#0);

// Inductive rank
axiom (forall a#251#0#0: Box, 
    a#251#1#0: Box, 
    a#251#2#0: Box, 
    a#251#3#0: Box, 
    a#251#4#0: Box, 
    a#251#5#0: Box, 
    a#251#6#0: Box, 
    a#251#7#0: Box, 
    a#251#8#0: Box, 
    a#251#9#0: Box, 
    a#251#10#0: Box, 
    a#251#11#0: Box, 
    a#251#12#0: Box, 
    a#251#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#251#0#0, 
      a#251#1#0, 
      a#251#2#0, 
      a#251#3#0, 
      a#251#4#0, 
      a#251#5#0, 
      a#251#6#0, 
      a#251#7#0, 
      a#251#8#0, 
      a#251#9#0, 
      a#251#10#0, 
      a#251#11#0, 
      a#251#12#0, 
      a#251#13#0) } 
  BoxRank(a#251#3#0)
     < DtRank(#_System._tuple#14._#Make14(a#251#0#0, 
        a#251#1#0, 
        a#251#2#0, 
        a#251#3#0, 
        a#251#4#0, 
        a#251#5#0, 
        a#251#6#0, 
        a#251#7#0, 
        a#251#8#0, 
        a#251#9#0, 
        a#251#10#0, 
        a#251#11#0, 
        a#251#12#0, 
        a#251#13#0)));

function _System.Tuple14._4(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#252#0#0: Box, 
    a#252#1#0: Box, 
    a#252#2#0: Box, 
    a#252#3#0: Box, 
    a#252#4#0: Box, 
    a#252#5#0: Box, 
    a#252#6#0: Box, 
    a#252#7#0: Box, 
    a#252#8#0: Box, 
    a#252#9#0: Box, 
    a#252#10#0: Box, 
    a#252#11#0: Box, 
    a#252#12#0: Box, 
    a#252#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#252#0#0, 
      a#252#1#0, 
      a#252#2#0, 
      a#252#3#0, 
      a#252#4#0, 
      a#252#5#0, 
      a#252#6#0, 
      a#252#7#0, 
      a#252#8#0, 
      a#252#9#0, 
      a#252#10#0, 
      a#252#11#0, 
      a#252#12#0, 
      a#252#13#0) } 
  _System.Tuple14._4(#_System._tuple#14._#Make14(a#252#0#0, 
        a#252#1#0, 
        a#252#2#0, 
        a#252#3#0, 
        a#252#4#0, 
        a#252#5#0, 
        a#252#6#0, 
        a#252#7#0, 
        a#252#8#0, 
        a#252#9#0, 
        a#252#10#0, 
        a#252#11#0, 
        a#252#12#0, 
        a#252#13#0))
     == a#252#4#0);

// Inductive rank
axiom (forall a#253#0#0: Box, 
    a#253#1#0: Box, 
    a#253#2#0: Box, 
    a#253#3#0: Box, 
    a#253#4#0: Box, 
    a#253#5#0: Box, 
    a#253#6#0: Box, 
    a#253#7#0: Box, 
    a#253#8#0: Box, 
    a#253#9#0: Box, 
    a#253#10#0: Box, 
    a#253#11#0: Box, 
    a#253#12#0: Box, 
    a#253#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#253#0#0, 
      a#253#1#0, 
      a#253#2#0, 
      a#253#3#0, 
      a#253#4#0, 
      a#253#5#0, 
      a#253#6#0, 
      a#253#7#0, 
      a#253#8#0, 
      a#253#9#0, 
      a#253#10#0, 
      a#253#11#0, 
      a#253#12#0, 
      a#253#13#0) } 
  BoxRank(a#253#4#0)
     < DtRank(#_System._tuple#14._#Make14(a#253#0#0, 
        a#253#1#0, 
        a#253#2#0, 
        a#253#3#0, 
        a#253#4#0, 
        a#253#5#0, 
        a#253#6#0, 
        a#253#7#0, 
        a#253#8#0, 
        a#253#9#0, 
        a#253#10#0, 
        a#253#11#0, 
        a#253#12#0, 
        a#253#13#0)));

function _System.Tuple14._5(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#254#0#0: Box, 
    a#254#1#0: Box, 
    a#254#2#0: Box, 
    a#254#3#0: Box, 
    a#254#4#0: Box, 
    a#254#5#0: Box, 
    a#254#6#0: Box, 
    a#254#7#0: Box, 
    a#254#8#0: Box, 
    a#254#9#0: Box, 
    a#254#10#0: Box, 
    a#254#11#0: Box, 
    a#254#12#0: Box, 
    a#254#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#254#0#0, 
      a#254#1#0, 
      a#254#2#0, 
      a#254#3#0, 
      a#254#4#0, 
      a#254#5#0, 
      a#254#6#0, 
      a#254#7#0, 
      a#254#8#0, 
      a#254#9#0, 
      a#254#10#0, 
      a#254#11#0, 
      a#254#12#0, 
      a#254#13#0) } 
  _System.Tuple14._5(#_System._tuple#14._#Make14(a#254#0#0, 
        a#254#1#0, 
        a#254#2#0, 
        a#254#3#0, 
        a#254#4#0, 
        a#254#5#0, 
        a#254#6#0, 
        a#254#7#0, 
        a#254#8#0, 
        a#254#9#0, 
        a#254#10#0, 
        a#254#11#0, 
        a#254#12#0, 
        a#254#13#0))
     == a#254#5#0);

// Inductive rank
axiom (forall a#255#0#0: Box, 
    a#255#1#0: Box, 
    a#255#2#0: Box, 
    a#255#3#0: Box, 
    a#255#4#0: Box, 
    a#255#5#0: Box, 
    a#255#6#0: Box, 
    a#255#7#0: Box, 
    a#255#8#0: Box, 
    a#255#9#0: Box, 
    a#255#10#0: Box, 
    a#255#11#0: Box, 
    a#255#12#0: Box, 
    a#255#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#255#0#0, 
      a#255#1#0, 
      a#255#2#0, 
      a#255#3#0, 
      a#255#4#0, 
      a#255#5#0, 
      a#255#6#0, 
      a#255#7#0, 
      a#255#8#0, 
      a#255#9#0, 
      a#255#10#0, 
      a#255#11#0, 
      a#255#12#0, 
      a#255#13#0) } 
  BoxRank(a#255#5#0)
     < DtRank(#_System._tuple#14._#Make14(a#255#0#0, 
        a#255#1#0, 
        a#255#2#0, 
        a#255#3#0, 
        a#255#4#0, 
        a#255#5#0, 
        a#255#6#0, 
        a#255#7#0, 
        a#255#8#0, 
        a#255#9#0, 
        a#255#10#0, 
        a#255#11#0, 
        a#255#12#0, 
        a#255#13#0)));

function _System.Tuple14._6(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#256#0#0: Box, 
    a#256#1#0: Box, 
    a#256#2#0: Box, 
    a#256#3#0: Box, 
    a#256#4#0: Box, 
    a#256#5#0: Box, 
    a#256#6#0: Box, 
    a#256#7#0: Box, 
    a#256#8#0: Box, 
    a#256#9#0: Box, 
    a#256#10#0: Box, 
    a#256#11#0: Box, 
    a#256#12#0: Box, 
    a#256#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#256#0#0, 
      a#256#1#0, 
      a#256#2#0, 
      a#256#3#0, 
      a#256#4#0, 
      a#256#5#0, 
      a#256#6#0, 
      a#256#7#0, 
      a#256#8#0, 
      a#256#9#0, 
      a#256#10#0, 
      a#256#11#0, 
      a#256#12#0, 
      a#256#13#0) } 
  _System.Tuple14._6(#_System._tuple#14._#Make14(a#256#0#0, 
        a#256#1#0, 
        a#256#2#0, 
        a#256#3#0, 
        a#256#4#0, 
        a#256#5#0, 
        a#256#6#0, 
        a#256#7#0, 
        a#256#8#0, 
        a#256#9#0, 
        a#256#10#0, 
        a#256#11#0, 
        a#256#12#0, 
        a#256#13#0))
     == a#256#6#0);

// Inductive rank
axiom (forall a#257#0#0: Box, 
    a#257#1#0: Box, 
    a#257#2#0: Box, 
    a#257#3#0: Box, 
    a#257#4#0: Box, 
    a#257#5#0: Box, 
    a#257#6#0: Box, 
    a#257#7#0: Box, 
    a#257#8#0: Box, 
    a#257#9#0: Box, 
    a#257#10#0: Box, 
    a#257#11#0: Box, 
    a#257#12#0: Box, 
    a#257#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#257#0#0, 
      a#257#1#0, 
      a#257#2#0, 
      a#257#3#0, 
      a#257#4#0, 
      a#257#5#0, 
      a#257#6#0, 
      a#257#7#0, 
      a#257#8#0, 
      a#257#9#0, 
      a#257#10#0, 
      a#257#11#0, 
      a#257#12#0, 
      a#257#13#0) } 
  BoxRank(a#257#6#0)
     < DtRank(#_System._tuple#14._#Make14(a#257#0#0, 
        a#257#1#0, 
        a#257#2#0, 
        a#257#3#0, 
        a#257#4#0, 
        a#257#5#0, 
        a#257#6#0, 
        a#257#7#0, 
        a#257#8#0, 
        a#257#9#0, 
        a#257#10#0, 
        a#257#11#0, 
        a#257#12#0, 
        a#257#13#0)));

function _System.Tuple14._7(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#258#0#0: Box, 
    a#258#1#0: Box, 
    a#258#2#0: Box, 
    a#258#3#0: Box, 
    a#258#4#0: Box, 
    a#258#5#0: Box, 
    a#258#6#0: Box, 
    a#258#7#0: Box, 
    a#258#8#0: Box, 
    a#258#9#0: Box, 
    a#258#10#0: Box, 
    a#258#11#0: Box, 
    a#258#12#0: Box, 
    a#258#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#258#0#0, 
      a#258#1#0, 
      a#258#2#0, 
      a#258#3#0, 
      a#258#4#0, 
      a#258#5#0, 
      a#258#6#0, 
      a#258#7#0, 
      a#258#8#0, 
      a#258#9#0, 
      a#258#10#0, 
      a#258#11#0, 
      a#258#12#0, 
      a#258#13#0) } 
  _System.Tuple14._7(#_System._tuple#14._#Make14(a#258#0#0, 
        a#258#1#0, 
        a#258#2#0, 
        a#258#3#0, 
        a#258#4#0, 
        a#258#5#0, 
        a#258#6#0, 
        a#258#7#0, 
        a#258#8#0, 
        a#258#9#0, 
        a#258#10#0, 
        a#258#11#0, 
        a#258#12#0, 
        a#258#13#0))
     == a#258#7#0);

// Inductive rank
axiom (forall a#259#0#0: Box, 
    a#259#1#0: Box, 
    a#259#2#0: Box, 
    a#259#3#0: Box, 
    a#259#4#0: Box, 
    a#259#5#0: Box, 
    a#259#6#0: Box, 
    a#259#7#0: Box, 
    a#259#8#0: Box, 
    a#259#9#0: Box, 
    a#259#10#0: Box, 
    a#259#11#0: Box, 
    a#259#12#0: Box, 
    a#259#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#259#0#0, 
      a#259#1#0, 
      a#259#2#0, 
      a#259#3#0, 
      a#259#4#0, 
      a#259#5#0, 
      a#259#6#0, 
      a#259#7#0, 
      a#259#8#0, 
      a#259#9#0, 
      a#259#10#0, 
      a#259#11#0, 
      a#259#12#0, 
      a#259#13#0) } 
  BoxRank(a#259#7#0)
     < DtRank(#_System._tuple#14._#Make14(a#259#0#0, 
        a#259#1#0, 
        a#259#2#0, 
        a#259#3#0, 
        a#259#4#0, 
        a#259#5#0, 
        a#259#6#0, 
        a#259#7#0, 
        a#259#8#0, 
        a#259#9#0, 
        a#259#10#0, 
        a#259#11#0, 
        a#259#12#0, 
        a#259#13#0)));

function _System.Tuple14._8(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#260#0#0: Box, 
    a#260#1#0: Box, 
    a#260#2#0: Box, 
    a#260#3#0: Box, 
    a#260#4#0: Box, 
    a#260#5#0: Box, 
    a#260#6#0: Box, 
    a#260#7#0: Box, 
    a#260#8#0: Box, 
    a#260#9#0: Box, 
    a#260#10#0: Box, 
    a#260#11#0: Box, 
    a#260#12#0: Box, 
    a#260#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#260#0#0, 
      a#260#1#0, 
      a#260#2#0, 
      a#260#3#0, 
      a#260#4#0, 
      a#260#5#0, 
      a#260#6#0, 
      a#260#7#0, 
      a#260#8#0, 
      a#260#9#0, 
      a#260#10#0, 
      a#260#11#0, 
      a#260#12#0, 
      a#260#13#0) } 
  _System.Tuple14._8(#_System._tuple#14._#Make14(a#260#0#0, 
        a#260#1#0, 
        a#260#2#0, 
        a#260#3#0, 
        a#260#4#0, 
        a#260#5#0, 
        a#260#6#0, 
        a#260#7#0, 
        a#260#8#0, 
        a#260#9#0, 
        a#260#10#0, 
        a#260#11#0, 
        a#260#12#0, 
        a#260#13#0))
     == a#260#8#0);

// Inductive rank
axiom (forall a#261#0#0: Box, 
    a#261#1#0: Box, 
    a#261#2#0: Box, 
    a#261#3#0: Box, 
    a#261#4#0: Box, 
    a#261#5#0: Box, 
    a#261#6#0: Box, 
    a#261#7#0: Box, 
    a#261#8#0: Box, 
    a#261#9#0: Box, 
    a#261#10#0: Box, 
    a#261#11#0: Box, 
    a#261#12#0: Box, 
    a#261#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#261#0#0, 
      a#261#1#0, 
      a#261#2#0, 
      a#261#3#0, 
      a#261#4#0, 
      a#261#5#0, 
      a#261#6#0, 
      a#261#7#0, 
      a#261#8#0, 
      a#261#9#0, 
      a#261#10#0, 
      a#261#11#0, 
      a#261#12#0, 
      a#261#13#0) } 
  BoxRank(a#261#8#0)
     < DtRank(#_System._tuple#14._#Make14(a#261#0#0, 
        a#261#1#0, 
        a#261#2#0, 
        a#261#3#0, 
        a#261#4#0, 
        a#261#5#0, 
        a#261#6#0, 
        a#261#7#0, 
        a#261#8#0, 
        a#261#9#0, 
        a#261#10#0, 
        a#261#11#0, 
        a#261#12#0, 
        a#261#13#0)));

function _System.Tuple14._9(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#262#0#0: Box, 
    a#262#1#0: Box, 
    a#262#2#0: Box, 
    a#262#3#0: Box, 
    a#262#4#0: Box, 
    a#262#5#0: Box, 
    a#262#6#0: Box, 
    a#262#7#0: Box, 
    a#262#8#0: Box, 
    a#262#9#0: Box, 
    a#262#10#0: Box, 
    a#262#11#0: Box, 
    a#262#12#0: Box, 
    a#262#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#262#0#0, 
      a#262#1#0, 
      a#262#2#0, 
      a#262#3#0, 
      a#262#4#0, 
      a#262#5#0, 
      a#262#6#0, 
      a#262#7#0, 
      a#262#8#0, 
      a#262#9#0, 
      a#262#10#0, 
      a#262#11#0, 
      a#262#12#0, 
      a#262#13#0) } 
  _System.Tuple14._9(#_System._tuple#14._#Make14(a#262#0#0, 
        a#262#1#0, 
        a#262#2#0, 
        a#262#3#0, 
        a#262#4#0, 
        a#262#5#0, 
        a#262#6#0, 
        a#262#7#0, 
        a#262#8#0, 
        a#262#9#0, 
        a#262#10#0, 
        a#262#11#0, 
        a#262#12#0, 
        a#262#13#0))
     == a#262#9#0);

// Inductive rank
axiom (forall a#263#0#0: Box, 
    a#263#1#0: Box, 
    a#263#2#0: Box, 
    a#263#3#0: Box, 
    a#263#4#0: Box, 
    a#263#5#0: Box, 
    a#263#6#0: Box, 
    a#263#7#0: Box, 
    a#263#8#0: Box, 
    a#263#9#0: Box, 
    a#263#10#0: Box, 
    a#263#11#0: Box, 
    a#263#12#0: Box, 
    a#263#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#263#0#0, 
      a#263#1#0, 
      a#263#2#0, 
      a#263#3#0, 
      a#263#4#0, 
      a#263#5#0, 
      a#263#6#0, 
      a#263#7#0, 
      a#263#8#0, 
      a#263#9#0, 
      a#263#10#0, 
      a#263#11#0, 
      a#263#12#0, 
      a#263#13#0) } 
  BoxRank(a#263#9#0)
     < DtRank(#_System._tuple#14._#Make14(a#263#0#0, 
        a#263#1#0, 
        a#263#2#0, 
        a#263#3#0, 
        a#263#4#0, 
        a#263#5#0, 
        a#263#6#0, 
        a#263#7#0, 
        a#263#8#0, 
        a#263#9#0, 
        a#263#10#0, 
        a#263#11#0, 
        a#263#12#0, 
        a#263#13#0)));

function _System.Tuple14._10(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#264#0#0: Box, 
    a#264#1#0: Box, 
    a#264#2#0: Box, 
    a#264#3#0: Box, 
    a#264#4#0: Box, 
    a#264#5#0: Box, 
    a#264#6#0: Box, 
    a#264#7#0: Box, 
    a#264#8#0: Box, 
    a#264#9#0: Box, 
    a#264#10#0: Box, 
    a#264#11#0: Box, 
    a#264#12#0: Box, 
    a#264#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#264#0#0, 
      a#264#1#0, 
      a#264#2#0, 
      a#264#3#0, 
      a#264#4#0, 
      a#264#5#0, 
      a#264#6#0, 
      a#264#7#0, 
      a#264#8#0, 
      a#264#9#0, 
      a#264#10#0, 
      a#264#11#0, 
      a#264#12#0, 
      a#264#13#0) } 
  _System.Tuple14._10(#_System._tuple#14._#Make14(a#264#0#0, 
        a#264#1#0, 
        a#264#2#0, 
        a#264#3#0, 
        a#264#4#0, 
        a#264#5#0, 
        a#264#6#0, 
        a#264#7#0, 
        a#264#8#0, 
        a#264#9#0, 
        a#264#10#0, 
        a#264#11#0, 
        a#264#12#0, 
        a#264#13#0))
     == a#264#10#0);

// Inductive rank
axiom (forall a#265#0#0: Box, 
    a#265#1#0: Box, 
    a#265#2#0: Box, 
    a#265#3#0: Box, 
    a#265#4#0: Box, 
    a#265#5#0: Box, 
    a#265#6#0: Box, 
    a#265#7#0: Box, 
    a#265#8#0: Box, 
    a#265#9#0: Box, 
    a#265#10#0: Box, 
    a#265#11#0: Box, 
    a#265#12#0: Box, 
    a#265#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#265#0#0, 
      a#265#1#0, 
      a#265#2#0, 
      a#265#3#0, 
      a#265#4#0, 
      a#265#5#0, 
      a#265#6#0, 
      a#265#7#0, 
      a#265#8#0, 
      a#265#9#0, 
      a#265#10#0, 
      a#265#11#0, 
      a#265#12#0, 
      a#265#13#0) } 
  BoxRank(a#265#10#0)
     < DtRank(#_System._tuple#14._#Make14(a#265#0#0, 
        a#265#1#0, 
        a#265#2#0, 
        a#265#3#0, 
        a#265#4#0, 
        a#265#5#0, 
        a#265#6#0, 
        a#265#7#0, 
        a#265#8#0, 
        a#265#9#0, 
        a#265#10#0, 
        a#265#11#0, 
        a#265#12#0, 
        a#265#13#0)));

function _System.Tuple14._11(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#266#0#0: Box, 
    a#266#1#0: Box, 
    a#266#2#0: Box, 
    a#266#3#0: Box, 
    a#266#4#0: Box, 
    a#266#5#0: Box, 
    a#266#6#0: Box, 
    a#266#7#0: Box, 
    a#266#8#0: Box, 
    a#266#9#0: Box, 
    a#266#10#0: Box, 
    a#266#11#0: Box, 
    a#266#12#0: Box, 
    a#266#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#266#0#0, 
      a#266#1#0, 
      a#266#2#0, 
      a#266#3#0, 
      a#266#4#0, 
      a#266#5#0, 
      a#266#6#0, 
      a#266#7#0, 
      a#266#8#0, 
      a#266#9#0, 
      a#266#10#0, 
      a#266#11#0, 
      a#266#12#0, 
      a#266#13#0) } 
  _System.Tuple14._11(#_System._tuple#14._#Make14(a#266#0#0, 
        a#266#1#0, 
        a#266#2#0, 
        a#266#3#0, 
        a#266#4#0, 
        a#266#5#0, 
        a#266#6#0, 
        a#266#7#0, 
        a#266#8#0, 
        a#266#9#0, 
        a#266#10#0, 
        a#266#11#0, 
        a#266#12#0, 
        a#266#13#0))
     == a#266#11#0);

// Inductive rank
axiom (forall a#267#0#0: Box, 
    a#267#1#0: Box, 
    a#267#2#0: Box, 
    a#267#3#0: Box, 
    a#267#4#0: Box, 
    a#267#5#0: Box, 
    a#267#6#0: Box, 
    a#267#7#0: Box, 
    a#267#8#0: Box, 
    a#267#9#0: Box, 
    a#267#10#0: Box, 
    a#267#11#0: Box, 
    a#267#12#0: Box, 
    a#267#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#267#0#0, 
      a#267#1#0, 
      a#267#2#0, 
      a#267#3#0, 
      a#267#4#0, 
      a#267#5#0, 
      a#267#6#0, 
      a#267#7#0, 
      a#267#8#0, 
      a#267#9#0, 
      a#267#10#0, 
      a#267#11#0, 
      a#267#12#0, 
      a#267#13#0) } 
  BoxRank(a#267#11#0)
     < DtRank(#_System._tuple#14._#Make14(a#267#0#0, 
        a#267#1#0, 
        a#267#2#0, 
        a#267#3#0, 
        a#267#4#0, 
        a#267#5#0, 
        a#267#6#0, 
        a#267#7#0, 
        a#267#8#0, 
        a#267#9#0, 
        a#267#10#0, 
        a#267#11#0, 
        a#267#12#0, 
        a#267#13#0)));

function _System.Tuple14._12(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#268#0#0: Box, 
    a#268#1#0: Box, 
    a#268#2#0: Box, 
    a#268#3#0: Box, 
    a#268#4#0: Box, 
    a#268#5#0: Box, 
    a#268#6#0: Box, 
    a#268#7#0: Box, 
    a#268#8#0: Box, 
    a#268#9#0: Box, 
    a#268#10#0: Box, 
    a#268#11#0: Box, 
    a#268#12#0: Box, 
    a#268#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#268#0#0, 
      a#268#1#0, 
      a#268#2#0, 
      a#268#3#0, 
      a#268#4#0, 
      a#268#5#0, 
      a#268#6#0, 
      a#268#7#0, 
      a#268#8#0, 
      a#268#9#0, 
      a#268#10#0, 
      a#268#11#0, 
      a#268#12#0, 
      a#268#13#0) } 
  _System.Tuple14._12(#_System._tuple#14._#Make14(a#268#0#0, 
        a#268#1#0, 
        a#268#2#0, 
        a#268#3#0, 
        a#268#4#0, 
        a#268#5#0, 
        a#268#6#0, 
        a#268#7#0, 
        a#268#8#0, 
        a#268#9#0, 
        a#268#10#0, 
        a#268#11#0, 
        a#268#12#0, 
        a#268#13#0))
     == a#268#12#0);

// Inductive rank
axiom (forall a#269#0#0: Box, 
    a#269#1#0: Box, 
    a#269#2#0: Box, 
    a#269#3#0: Box, 
    a#269#4#0: Box, 
    a#269#5#0: Box, 
    a#269#6#0: Box, 
    a#269#7#0: Box, 
    a#269#8#0: Box, 
    a#269#9#0: Box, 
    a#269#10#0: Box, 
    a#269#11#0: Box, 
    a#269#12#0: Box, 
    a#269#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#269#0#0, 
      a#269#1#0, 
      a#269#2#0, 
      a#269#3#0, 
      a#269#4#0, 
      a#269#5#0, 
      a#269#6#0, 
      a#269#7#0, 
      a#269#8#0, 
      a#269#9#0, 
      a#269#10#0, 
      a#269#11#0, 
      a#269#12#0, 
      a#269#13#0) } 
  BoxRank(a#269#12#0)
     < DtRank(#_System._tuple#14._#Make14(a#269#0#0, 
        a#269#1#0, 
        a#269#2#0, 
        a#269#3#0, 
        a#269#4#0, 
        a#269#5#0, 
        a#269#6#0, 
        a#269#7#0, 
        a#269#8#0, 
        a#269#9#0, 
        a#269#10#0, 
        a#269#11#0, 
        a#269#12#0, 
        a#269#13#0)));

function _System.Tuple14._13(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#270#0#0: Box, 
    a#270#1#0: Box, 
    a#270#2#0: Box, 
    a#270#3#0: Box, 
    a#270#4#0: Box, 
    a#270#5#0: Box, 
    a#270#6#0: Box, 
    a#270#7#0: Box, 
    a#270#8#0: Box, 
    a#270#9#0: Box, 
    a#270#10#0: Box, 
    a#270#11#0: Box, 
    a#270#12#0: Box, 
    a#270#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#270#0#0, 
      a#270#1#0, 
      a#270#2#0, 
      a#270#3#0, 
      a#270#4#0, 
      a#270#5#0, 
      a#270#6#0, 
      a#270#7#0, 
      a#270#8#0, 
      a#270#9#0, 
      a#270#10#0, 
      a#270#11#0, 
      a#270#12#0, 
      a#270#13#0) } 
  _System.Tuple14._13(#_System._tuple#14._#Make14(a#270#0#0, 
        a#270#1#0, 
        a#270#2#0, 
        a#270#3#0, 
        a#270#4#0, 
        a#270#5#0, 
        a#270#6#0, 
        a#270#7#0, 
        a#270#8#0, 
        a#270#9#0, 
        a#270#10#0, 
        a#270#11#0, 
        a#270#12#0, 
        a#270#13#0))
     == a#270#13#0);

// Inductive rank
axiom (forall a#271#0#0: Box, 
    a#271#1#0: Box, 
    a#271#2#0: Box, 
    a#271#3#0: Box, 
    a#271#4#0: Box, 
    a#271#5#0: Box, 
    a#271#6#0: Box, 
    a#271#7#0: Box, 
    a#271#8#0: Box, 
    a#271#9#0: Box, 
    a#271#10#0: Box, 
    a#271#11#0: Box, 
    a#271#12#0: Box, 
    a#271#13#0: Box :: 
  { #_System._tuple#14._#Make14(a#271#0#0, 
      a#271#1#0, 
      a#271#2#0, 
      a#271#3#0, 
      a#271#4#0, 
      a#271#5#0, 
      a#271#6#0, 
      a#271#7#0, 
      a#271#8#0, 
      a#271#9#0, 
      a#271#10#0, 
      a#271#11#0, 
      a#271#12#0, 
      a#271#13#0) } 
  BoxRank(a#271#13#0)
     < DtRank(#_System._tuple#14._#Make14(a#271#0#0, 
        a#271#1#0, 
        a#271#2#0, 
        a#271#3#0, 
        a#271#4#0, 
        a#271#5#0, 
        a#271#6#0, 
        a#271#7#0, 
        a#271#8#0, 
        a#271#9#0, 
        a#271#10#0, 
        a#271#11#0, 
        a#271#12#0, 
        a#271#13#0)));

// Depth-one case-split function
function $IsA#_System.Tuple14(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple14(d) } 
  $IsA#_System.Tuple14(d) ==> _System.Tuple14.___hMake14_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#14$T0: Ty, 
    _System._tuple#14$T1: Ty, 
    _System._tuple#14$T2: Ty, 
    _System._tuple#14$T3: Ty, 
    _System._tuple#14$T4: Ty, 
    _System._tuple#14$T5: Ty, 
    _System._tuple#14$T6: Ty, 
    _System._tuple#14$T7: Ty, 
    _System._tuple#14$T8: Ty, 
    _System._tuple#14$T9: Ty, 
    _System._tuple#14$T10: Ty, 
    _System._tuple#14$T11: Ty, 
    _System._tuple#14$T12: Ty, 
    _System._tuple#14$T13: Ty, 
    d: DatatypeType :: 
  { _System.Tuple14.___hMake14_q(d), $Is(d, 
      Tclass._System.Tuple14(_System._tuple#14$T0, 
        _System._tuple#14$T1, 
        _System._tuple#14$T2, 
        _System._tuple#14$T3, 
        _System._tuple#14$T4, 
        _System._tuple#14$T5, 
        _System._tuple#14$T6, 
        _System._tuple#14$T7, 
        _System._tuple#14$T8, 
        _System._tuple#14$T9, 
        _System._tuple#14$T10, 
        _System._tuple#14$T11, 
        _System._tuple#14$T12, 
        _System._tuple#14$T13)) } 
  $Is(d, 
      Tclass._System.Tuple14(_System._tuple#14$T0, 
        _System._tuple#14$T1, 
        _System._tuple#14$T2, 
        _System._tuple#14$T3, 
        _System._tuple#14$T4, 
        _System._tuple#14$T5, 
        _System._tuple#14$T6, 
        _System._tuple#14$T7, 
        _System._tuple#14$T8, 
        _System._tuple#14$T9, 
        _System._tuple#14$T10, 
        _System._tuple#14$T11, 
        _System._tuple#14$T12, 
        _System._tuple#14$T13))
     ==> _System.Tuple14.___hMake14_q(d));

// Datatype extensional equality declaration
function _System.Tuple14#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#14._#Make14
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple14#Equal(a, b) } 
  _System.Tuple14#Equal(a, b)
     <==> _System.Tuple14._0(a) == _System.Tuple14._0(b)
       && _System.Tuple14._1(a) == _System.Tuple14._1(b)
       && _System.Tuple14._2(a) == _System.Tuple14._2(b)
       && _System.Tuple14._3(a) == _System.Tuple14._3(b)
       && _System.Tuple14._4(a) == _System.Tuple14._4(b)
       && _System.Tuple14._5(a) == _System.Tuple14._5(b)
       && _System.Tuple14._6(a) == _System.Tuple14._6(b)
       && _System.Tuple14._7(a) == _System.Tuple14._7(b)
       && _System.Tuple14._8(a) == _System.Tuple14._8(b)
       && _System.Tuple14._9(a) == _System.Tuple14._9(b)
       && _System.Tuple14._10(a) == _System.Tuple14._10(b)
       && _System.Tuple14._11(a) == _System.Tuple14._11(b)
       && _System.Tuple14._12(a) == _System.Tuple14._12(b)
       && _System.Tuple14._13(a) == _System.Tuple14._13(b));

// Datatype extensionality axiom: _System._tuple#14
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple14#Equal(a, b) } 
  _System.Tuple14#Equal(a, b) <==> a == b);

const unique class._System.Tuple14: ClassName;

// Constructor function declaration
function #_System._tuple#15._#Make15(Box, Box, Box, Box, Box, Box, Box, Box, Box, Box, Box, Box, Box, Box, Box)
   : DatatypeType;

const unique ##_System._tuple#15._#Make15: DtCtorId
uses {
// Constructor identifier
axiom (forall a#272#0#0: Box, 
    a#272#1#0: Box, 
    a#272#2#0: Box, 
    a#272#3#0: Box, 
    a#272#4#0: Box, 
    a#272#5#0: Box, 
    a#272#6#0: Box, 
    a#272#7#0: Box, 
    a#272#8#0: Box, 
    a#272#9#0: Box, 
    a#272#10#0: Box, 
    a#272#11#0: Box, 
    a#272#12#0: Box, 
    a#272#13#0: Box, 
    a#272#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#272#0#0, 
      a#272#1#0, 
      a#272#2#0, 
      a#272#3#0, 
      a#272#4#0, 
      a#272#5#0, 
      a#272#6#0, 
      a#272#7#0, 
      a#272#8#0, 
      a#272#9#0, 
      a#272#10#0, 
      a#272#11#0, 
      a#272#12#0, 
      a#272#13#0, 
      a#272#14#0) } 
  DatatypeCtorId(#_System._tuple#15._#Make15(a#272#0#0, 
        a#272#1#0, 
        a#272#2#0, 
        a#272#3#0, 
        a#272#4#0, 
        a#272#5#0, 
        a#272#6#0, 
        a#272#7#0, 
        a#272#8#0, 
        a#272#9#0, 
        a#272#10#0, 
        a#272#11#0, 
        a#272#12#0, 
        a#272#13#0, 
        a#272#14#0))
     == ##_System._tuple#15._#Make15);
}

function _System.Tuple15.___hMake15_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple15.___hMake15_q(d) } 
  _System.Tuple15.___hMake15_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#15._#Make15);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple15.___hMake15_q(d) } 
  _System.Tuple15.___hMake15_q(d)
     ==> (exists a#273#0#0: Box, 
        a#273#1#0: Box, 
        a#273#2#0: Box, 
        a#273#3#0: Box, 
        a#273#4#0: Box, 
        a#273#5#0: Box, 
        a#273#6#0: Box, 
        a#273#7#0: Box, 
        a#273#8#0: Box, 
        a#273#9#0: Box, 
        a#273#10#0: Box, 
        a#273#11#0: Box, 
        a#273#12#0: Box, 
        a#273#13#0: Box, 
        a#273#14#0: Box :: 
      d
         == #_System._tuple#15._#Make15(a#273#0#0, 
          a#273#1#0, 
          a#273#2#0, 
          a#273#3#0, 
          a#273#4#0, 
          a#273#5#0, 
          a#273#6#0, 
          a#273#7#0, 
          a#273#8#0, 
          a#273#9#0, 
          a#273#10#0, 
          a#273#11#0, 
          a#273#12#0, 
          a#273#13#0, 
          a#273#14#0)));

function Tclass._System.Tuple15(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.Tuple15: TyTag;

// Tclass._System.Tuple15 Tag
axiom (forall _System._tuple#15$T0: Ty, 
    _System._tuple#15$T1: Ty, 
    _System._tuple#15$T2: Ty, 
    _System._tuple#15$T3: Ty, 
    _System._tuple#15$T4: Ty, 
    _System._tuple#15$T5: Ty, 
    _System._tuple#15$T6: Ty, 
    _System._tuple#15$T7: Ty, 
    _System._tuple#15$T8: Ty, 
    _System._tuple#15$T9: Ty, 
    _System._tuple#15$T10: Ty, 
    _System._tuple#15$T11: Ty, 
    _System._tuple#15$T12: Ty, 
    _System._tuple#15$T13: Ty, 
    _System._tuple#15$T14: Ty :: 
  { Tclass._System.Tuple15(_System._tuple#15$T0, 
      _System._tuple#15$T1, 
      _System._tuple#15$T2, 
      _System._tuple#15$T3, 
      _System._tuple#15$T4, 
      _System._tuple#15$T5, 
      _System._tuple#15$T6, 
      _System._tuple#15$T7, 
      _System._tuple#15$T8, 
      _System._tuple#15$T9, 
      _System._tuple#15$T10, 
      _System._tuple#15$T11, 
      _System._tuple#15$T12, 
      _System._tuple#15$T13, 
      _System._tuple#15$T14) } 
  Tag(Tclass._System.Tuple15(_System._tuple#15$T0, 
          _System._tuple#15$T1, 
          _System._tuple#15$T2, 
          _System._tuple#15$T3, 
          _System._tuple#15$T4, 
          _System._tuple#15$T5, 
          _System._tuple#15$T6, 
          _System._tuple#15$T7, 
          _System._tuple#15$T8, 
          _System._tuple#15$T9, 
          _System._tuple#15$T10, 
          _System._tuple#15$T11, 
          _System._tuple#15$T12, 
          _System._tuple#15$T13, 
          _System._tuple#15$T14))
       == Tagclass._System.Tuple15
     && TagFamily(Tclass._System.Tuple15(_System._tuple#15$T0, 
          _System._tuple#15$T1, 
          _System._tuple#15$T2, 
          _System._tuple#15$T3, 
          _System._tuple#15$T4, 
          _System._tuple#15$T5, 
          _System._tuple#15$T6, 
          _System._tuple#15$T7, 
          _System._tuple#15$T8, 
          _System._tuple#15$T9, 
          _System._tuple#15$T10, 
          _System._tuple#15$T11, 
          _System._tuple#15$T12, 
          _System._tuple#15$T13, 
          _System._tuple#15$T14))
       == tytagFamily$_tuple#15);

function Tclass._System.Tuple15_0(Ty) : Ty;

// Tclass._System.Tuple15 injectivity 0
axiom (forall _System._tuple#15$T0: Ty, 
    _System._tuple#15$T1: Ty, 
    _System._tuple#15$T2: Ty, 
    _System._tuple#15$T3: Ty, 
    _System._tuple#15$T4: Ty, 
    _System._tuple#15$T5: Ty, 
    _System._tuple#15$T6: Ty, 
    _System._tuple#15$T7: Ty, 
    _System._tuple#15$T8: Ty, 
    _System._tuple#15$T9: Ty, 
    _System._tuple#15$T10: Ty, 
    _System._tuple#15$T11: Ty, 
    _System._tuple#15$T12: Ty, 
    _System._tuple#15$T13: Ty, 
    _System._tuple#15$T14: Ty :: 
  { Tclass._System.Tuple15(_System._tuple#15$T0, 
      _System._tuple#15$T1, 
      _System._tuple#15$T2, 
      _System._tuple#15$T3, 
      _System._tuple#15$T4, 
      _System._tuple#15$T5, 
      _System._tuple#15$T6, 
      _System._tuple#15$T7, 
      _System._tuple#15$T8, 
      _System._tuple#15$T9, 
      _System._tuple#15$T10, 
      _System._tuple#15$T11, 
      _System._tuple#15$T12, 
      _System._tuple#15$T13, 
      _System._tuple#15$T14) } 
  Tclass._System.Tuple15_0(Tclass._System.Tuple15(_System._tuple#15$T0, 
        _System._tuple#15$T1, 
        _System._tuple#15$T2, 
        _System._tuple#15$T3, 
        _System._tuple#15$T4, 
        _System._tuple#15$T5, 
        _System._tuple#15$T6, 
        _System._tuple#15$T7, 
        _System._tuple#15$T8, 
        _System._tuple#15$T9, 
        _System._tuple#15$T10, 
        _System._tuple#15$T11, 
        _System._tuple#15$T12, 
        _System._tuple#15$T13, 
        _System._tuple#15$T14))
     == _System._tuple#15$T0);

function Tclass._System.Tuple15_1(Ty) : Ty;

// Tclass._System.Tuple15 injectivity 1
axiom (forall _System._tuple#15$T0: Ty, 
    _System._tuple#15$T1: Ty, 
    _System._tuple#15$T2: Ty, 
    _System._tuple#15$T3: Ty, 
    _System._tuple#15$T4: Ty, 
    _System._tuple#15$T5: Ty, 
    _System._tuple#15$T6: Ty, 
    _System._tuple#15$T7: Ty, 
    _System._tuple#15$T8: Ty, 
    _System._tuple#15$T9: Ty, 
    _System._tuple#15$T10: Ty, 
    _System._tuple#15$T11: Ty, 
    _System._tuple#15$T12: Ty, 
    _System._tuple#15$T13: Ty, 
    _System._tuple#15$T14: Ty :: 
  { Tclass._System.Tuple15(_System._tuple#15$T0, 
      _System._tuple#15$T1, 
      _System._tuple#15$T2, 
      _System._tuple#15$T3, 
      _System._tuple#15$T4, 
      _System._tuple#15$T5, 
      _System._tuple#15$T6, 
      _System._tuple#15$T7, 
      _System._tuple#15$T8, 
      _System._tuple#15$T9, 
      _System._tuple#15$T10, 
      _System._tuple#15$T11, 
      _System._tuple#15$T12, 
      _System._tuple#15$T13, 
      _System._tuple#15$T14) } 
  Tclass._System.Tuple15_1(Tclass._System.Tuple15(_System._tuple#15$T0, 
        _System._tuple#15$T1, 
        _System._tuple#15$T2, 
        _System._tuple#15$T3, 
        _System._tuple#15$T4, 
        _System._tuple#15$T5, 
        _System._tuple#15$T6, 
        _System._tuple#15$T7, 
        _System._tuple#15$T8, 
        _System._tuple#15$T9, 
        _System._tuple#15$T10, 
        _System._tuple#15$T11, 
        _System._tuple#15$T12, 
        _System._tuple#15$T13, 
        _System._tuple#15$T14))
     == _System._tuple#15$T1);

function Tclass._System.Tuple15_2(Ty) : Ty;

// Tclass._System.Tuple15 injectivity 2
axiom (forall _System._tuple#15$T0: Ty, 
    _System._tuple#15$T1: Ty, 
    _System._tuple#15$T2: Ty, 
    _System._tuple#15$T3: Ty, 
    _System._tuple#15$T4: Ty, 
    _System._tuple#15$T5: Ty, 
    _System._tuple#15$T6: Ty, 
    _System._tuple#15$T7: Ty, 
    _System._tuple#15$T8: Ty, 
    _System._tuple#15$T9: Ty, 
    _System._tuple#15$T10: Ty, 
    _System._tuple#15$T11: Ty, 
    _System._tuple#15$T12: Ty, 
    _System._tuple#15$T13: Ty, 
    _System._tuple#15$T14: Ty :: 
  { Tclass._System.Tuple15(_System._tuple#15$T0, 
      _System._tuple#15$T1, 
      _System._tuple#15$T2, 
      _System._tuple#15$T3, 
      _System._tuple#15$T4, 
      _System._tuple#15$T5, 
      _System._tuple#15$T6, 
      _System._tuple#15$T7, 
      _System._tuple#15$T8, 
      _System._tuple#15$T9, 
      _System._tuple#15$T10, 
      _System._tuple#15$T11, 
      _System._tuple#15$T12, 
      _System._tuple#15$T13, 
      _System._tuple#15$T14) } 
  Tclass._System.Tuple15_2(Tclass._System.Tuple15(_System._tuple#15$T0, 
        _System._tuple#15$T1, 
        _System._tuple#15$T2, 
        _System._tuple#15$T3, 
        _System._tuple#15$T4, 
        _System._tuple#15$T5, 
        _System._tuple#15$T6, 
        _System._tuple#15$T7, 
        _System._tuple#15$T8, 
        _System._tuple#15$T9, 
        _System._tuple#15$T10, 
        _System._tuple#15$T11, 
        _System._tuple#15$T12, 
        _System._tuple#15$T13, 
        _System._tuple#15$T14))
     == _System._tuple#15$T2);

function Tclass._System.Tuple15_3(Ty) : Ty;

// Tclass._System.Tuple15 injectivity 3
axiom (forall _System._tuple#15$T0: Ty, 
    _System._tuple#15$T1: Ty, 
    _System._tuple#15$T2: Ty, 
    _System._tuple#15$T3: Ty, 
    _System._tuple#15$T4: Ty, 
    _System._tuple#15$T5: Ty, 
    _System._tuple#15$T6: Ty, 
    _System._tuple#15$T7: Ty, 
    _System._tuple#15$T8: Ty, 
    _System._tuple#15$T9: Ty, 
    _System._tuple#15$T10: Ty, 
    _System._tuple#15$T11: Ty, 
    _System._tuple#15$T12: Ty, 
    _System._tuple#15$T13: Ty, 
    _System._tuple#15$T14: Ty :: 
  { Tclass._System.Tuple15(_System._tuple#15$T0, 
      _System._tuple#15$T1, 
      _System._tuple#15$T2, 
      _System._tuple#15$T3, 
      _System._tuple#15$T4, 
      _System._tuple#15$T5, 
      _System._tuple#15$T6, 
      _System._tuple#15$T7, 
      _System._tuple#15$T8, 
      _System._tuple#15$T9, 
      _System._tuple#15$T10, 
      _System._tuple#15$T11, 
      _System._tuple#15$T12, 
      _System._tuple#15$T13, 
      _System._tuple#15$T14) } 
  Tclass._System.Tuple15_3(Tclass._System.Tuple15(_System._tuple#15$T0, 
        _System._tuple#15$T1, 
        _System._tuple#15$T2, 
        _System._tuple#15$T3, 
        _System._tuple#15$T4, 
        _System._tuple#15$T5, 
        _System._tuple#15$T6, 
        _System._tuple#15$T7, 
        _System._tuple#15$T8, 
        _System._tuple#15$T9, 
        _System._tuple#15$T10, 
        _System._tuple#15$T11, 
        _System._tuple#15$T12, 
        _System._tuple#15$T13, 
        _System._tuple#15$T14))
     == _System._tuple#15$T3);

function Tclass._System.Tuple15_4(Ty) : Ty;

// Tclass._System.Tuple15 injectivity 4
axiom (forall _System._tuple#15$T0: Ty, 
    _System._tuple#15$T1: Ty, 
    _System._tuple#15$T2: Ty, 
    _System._tuple#15$T3: Ty, 
    _System._tuple#15$T4: Ty, 
    _System._tuple#15$T5: Ty, 
    _System._tuple#15$T6: Ty, 
    _System._tuple#15$T7: Ty, 
    _System._tuple#15$T8: Ty, 
    _System._tuple#15$T9: Ty, 
    _System._tuple#15$T10: Ty, 
    _System._tuple#15$T11: Ty, 
    _System._tuple#15$T12: Ty, 
    _System._tuple#15$T13: Ty, 
    _System._tuple#15$T14: Ty :: 
  { Tclass._System.Tuple15(_System._tuple#15$T0, 
      _System._tuple#15$T1, 
      _System._tuple#15$T2, 
      _System._tuple#15$T3, 
      _System._tuple#15$T4, 
      _System._tuple#15$T5, 
      _System._tuple#15$T6, 
      _System._tuple#15$T7, 
      _System._tuple#15$T8, 
      _System._tuple#15$T9, 
      _System._tuple#15$T10, 
      _System._tuple#15$T11, 
      _System._tuple#15$T12, 
      _System._tuple#15$T13, 
      _System._tuple#15$T14) } 
  Tclass._System.Tuple15_4(Tclass._System.Tuple15(_System._tuple#15$T0, 
        _System._tuple#15$T1, 
        _System._tuple#15$T2, 
        _System._tuple#15$T3, 
        _System._tuple#15$T4, 
        _System._tuple#15$T5, 
        _System._tuple#15$T6, 
        _System._tuple#15$T7, 
        _System._tuple#15$T8, 
        _System._tuple#15$T9, 
        _System._tuple#15$T10, 
        _System._tuple#15$T11, 
        _System._tuple#15$T12, 
        _System._tuple#15$T13, 
        _System._tuple#15$T14))
     == _System._tuple#15$T4);

function Tclass._System.Tuple15_5(Ty) : Ty;

// Tclass._System.Tuple15 injectivity 5
axiom (forall _System._tuple#15$T0: Ty, 
    _System._tuple#15$T1: Ty, 
    _System._tuple#15$T2: Ty, 
    _System._tuple#15$T3: Ty, 
    _System._tuple#15$T4: Ty, 
    _System._tuple#15$T5: Ty, 
    _System._tuple#15$T6: Ty, 
    _System._tuple#15$T7: Ty, 
    _System._tuple#15$T8: Ty, 
    _System._tuple#15$T9: Ty, 
    _System._tuple#15$T10: Ty, 
    _System._tuple#15$T11: Ty, 
    _System._tuple#15$T12: Ty, 
    _System._tuple#15$T13: Ty, 
    _System._tuple#15$T14: Ty :: 
  { Tclass._System.Tuple15(_System._tuple#15$T0, 
      _System._tuple#15$T1, 
      _System._tuple#15$T2, 
      _System._tuple#15$T3, 
      _System._tuple#15$T4, 
      _System._tuple#15$T5, 
      _System._tuple#15$T6, 
      _System._tuple#15$T7, 
      _System._tuple#15$T8, 
      _System._tuple#15$T9, 
      _System._tuple#15$T10, 
      _System._tuple#15$T11, 
      _System._tuple#15$T12, 
      _System._tuple#15$T13, 
      _System._tuple#15$T14) } 
  Tclass._System.Tuple15_5(Tclass._System.Tuple15(_System._tuple#15$T0, 
        _System._tuple#15$T1, 
        _System._tuple#15$T2, 
        _System._tuple#15$T3, 
        _System._tuple#15$T4, 
        _System._tuple#15$T5, 
        _System._tuple#15$T6, 
        _System._tuple#15$T7, 
        _System._tuple#15$T8, 
        _System._tuple#15$T9, 
        _System._tuple#15$T10, 
        _System._tuple#15$T11, 
        _System._tuple#15$T12, 
        _System._tuple#15$T13, 
        _System._tuple#15$T14))
     == _System._tuple#15$T5);

function Tclass._System.Tuple15_6(Ty) : Ty;

// Tclass._System.Tuple15 injectivity 6
axiom (forall _System._tuple#15$T0: Ty, 
    _System._tuple#15$T1: Ty, 
    _System._tuple#15$T2: Ty, 
    _System._tuple#15$T3: Ty, 
    _System._tuple#15$T4: Ty, 
    _System._tuple#15$T5: Ty, 
    _System._tuple#15$T6: Ty, 
    _System._tuple#15$T7: Ty, 
    _System._tuple#15$T8: Ty, 
    _System._tuple#15$T9: Ty, 
    _System._tuple#15$T10: Ty, 
    _System._tuple#15$T11: Ty, 
    _System._tuple#15$T12: Ty, 
    _System._tuple#15$T13: Ty, 
    _System._tuple#15$T14: Ty :: 
  { Tclass._System.Tuple15(_System._tuple#15$T0, 
      _System._tuple#15$T1, 
      _System._tuple#15$T2, 
      _System._tuple#15$T3, 
      _System._tuple#15$T4, 
      _System._tuple#15$T5, 
      _System._tuple#15$T6, 
      _System._tuple#15$T7, 
      _System._tuple#15$T8, 
      _System._tuple#15$T9, 
      _System._tuple#15$T10, 
      _System._tuple#15$T11, 
      _System._tuple#15$T12, 
      _System._tuple#15$T13, 
      _System._tuple#15$T14) } 
  Tclass._System.Tuple15_6(Tclass._System.Tuple15(_System._tuple#15$T0, 
        _System._tuple#15$T1, 
        _System._tuple#15$T2, 
        _System._tuple#15$T3, 
        _System._tuple#15$T4, 
        _System._tuple#15$T5, 
        _System._tuple#15$T6, 
        _System._tuple#15$T7, 
        _System._tuple#15$T8, 
        _System._tuple#15$T9, 
        _System._tuple#15$T10, 
        _System._tuple#15$T11, 
        _System._tuple#15$T12, 
        _System._tuple#15$T13, 
        _System._tuple#15$T14))
     == _System._tuple#15$T6);

function Tclass._System.Tuple15_7(Ty) : Ty;

// Tclass._System.Tuple15 injectivity 7
axiom (forall _System._tuple#15$T0: Ty, 
    _System._tuple#15$T1: Ty, 
    _System._tuple#15$T2: Ty, 
    _System._tuple#15$T3: Ty, 
    _System._tuple#15$T4: Ty, 
    _System._tuple#15$T5: Ty, 
    _System._tuple#15$T6: Ty, 
    _System._tuple#15$T7: Ty, 
    _System._tuple#15$T8: Ty, 
    _System._tuple#15$T9: Ty, 
    _System._tuple#15$T10: Ty, 
    _System._tuple#15$T11: Ty, 
    _System._tuple#15$T12: Ty, 
    _System._tuple#15$T13: Ty, 
    _System._tuple#15$T14: Ty :: 
  { Tclass._System.Tuple15(_System._tuple#15$T0, 
      _System._tuple#15$T1, 
      _System._tuple#15$T2, 
      _System._tuple#15$T3, 
      _System._tuple#15$T4, 
      _System._tuple#15$T5, 
      _System._tuple#15$T6, 
      _System._tuple#15$T7, 
      _System._tuple#15$T8, 
      _System._tuple#15$T9, 
      _System._tuple#15$T10, 
      _System._tuple#15$T11, 
      _System._tuple#15$T12, 
      _System._tuple#15$T13, 
      _System._tuple#15$T14) } 
  Tclass._System.Tuple15_7(Tclass._System.Tuple15(_System._tuple#15$T0, 
        _System._tuple#15$T1, 
        _System._tuple#15$T2, 
        _System._tuple#15$T3, 
        _System._tuple#15$T4, 
        _System._tuple#15$T5, 
        _System._tuple#15$T6, 
        _System._tuple#15$T7, 
        _System._tuple#15$T8, 
        _System._tuple#15$T9, 
        _System._tuple#15$T10, 
        _System._tuple#15$T11, 
        _System._tuple#15$T12, 
        _System._tuple#15$T13, 
        _System._tuple#15$T14))
     == _System._tuple#15$T7);

function Tclass._System.Tuple15_8(Ty) : Ty;

// Tclass._System.Tuple15 injectivity 8
axiom (forall _System._tuple#15$T0: Ty, 
    _System._tuple#15$T1: Ty, 
    _System._tuple#15$T2: Ty, 
    _System._tuple#15$T3: Ty, 
    _System._tuple#15$T4: Ty, 
    _System._tuple#15$T5: Ty, 
    _System._tuple#15$T6: Ty, 
    _System._tuple#15$T7: Ty, 
    _System._tuple#15$T8: Ty, 
    _System._tuple#15$T9: Ty, 
    _System._tuple#15$T10: Ty, 
    _System._tuple#15$T11: Ty, 
    _System._tuple#15$T12: Ty, 
    _System._tuple#15$T13: Ty, 
    _System._tuple#15$T14: Ty :: 
  { Tclass._System.Tuple15(_System._tuple#15$T0, 
      _System._tuple#15$T1, 
      _System._tuple#15$T2, 
      _System._tuple#15$T3, 
      _System._tuple#15$T4, 
      _System._tuple#15$T5, 
      _System._tuple#15$T6, 
      _System._tuple#15$T7, 
      _System._tuple#15$T8, 
      _System._tuple#15$T9, 
      _System._tuple#15$T10, 
      _System._tuple#15$T11, 
      _System._tuple#15$T12, 
      _System._tuple#15$T13, 
      _System._tuple#15$T14) } 
  Tclass._System.Tuple15_8(Tclass._System.Tuple15(_System._tuple#15$T0, 
        _System._tuple#15$T1, 
        _System._tuple#15$T2, 
        _System._tuple#15$T3, 
        _System._tuple#15$T4, 
        _System._tuple#15$T5, 
        _System._tuple#15$T6, 
        _System._tuple#15$T7, 
        _System._tuple#15$T8, 
        _System._tuple#15$T9, 
        _System._tuple#15$T10, 
        _System._tuple#15$T11, 
        _System._tuple#15$T12, 
        _System._tuple#15$T13, 
        _System._tuple#15$T14))
     == _System._tuple#15$T8);

function Tclass._System.Tuple15_9(Ty) : Ty;

// Tclass._System.Tuple15 injectivity 9
axiom (forall _System._tuple#15$T0: Ty, 
    _System._tuple#15$T1: Ty, 
    _System._tuple#15$T2: Ty, 
    _System._tuple#15$T3: Ty, 
    _System._tuple#15$T4: Ty, 
    _System._tuple#15$T5: Ty, 
    _System._tuple#15$T6: Ty, 
    _System._tuple#15$T7: Ty, 
    _System._tuple#15$T8: Ty, 
    _System._tuple#15$T9: Ty, 
    _System._tuple#15$T10: Ty, 
    _System._tuple#15$T11: Ty, 
    _System._tuple#15$T12: Ty, 
    _System._tuple#15$T13: Ty, 
    _System._tuple#15$T14: Ty :: 
  { Tclass._System.Tuple15(_System._tuple#15$T0, 
      _System._tuple#15$T1, 
      _System._tuple#15$T2, 
      _System._tuple#15$T3, 
      _System._tuple#15$T4, 
      _System._tuple#15$T5, 
      _System._tuple#15$T6, 
      _System._tuple#15$T7, 
      _System._tuple#15$T8, 
      _System._tuple#15$T9, 
      _System._tuple#15$T10, 
      _System._tuple#15$T11, 
      _System._tuple#15$T12, 
      _System._tuple#15$T13, 
      _System._tuple#15$T14) } 
  Tclass._System.Tuple15_9(Tclass._System.Tuple15(_System._tuple#15$T0, 
        _System._tuple#15$T1, 
        _System._tuple#15$T2, 
        _System._tuple#15$T3, 
        _System._tuple#15$T4, 
        _System._tuple#15$T5, 
        _System._tuple#15$T6, 
        _System._tuple#15$T7, 
        _System._tuple#15$T8, 
        _System._tuple#15$T9, 
        _System._tuple#15$T10, 
        _System._tuple#15$T11, 
        _System._tuple#15$T12, 
        _System._tuple#15$T13, 
        _System._tuple#15$T14))
     == _System._tuple#15$T9);

function Tclass._System.Tuple15_10(Ty) : Ty;

// Tclass._System.Tuple15 injectivity 10
axiom (forall _System._tuple#15$T0: Ty, 
    _System._tuple#15$T1: Ty, 
    _System._tuple#15$T2: Ty, 
    _System._tuple#15$T3: Ty, 
    _System._tuple#15$T4: Ty, 
    _System._tuple#15$T5: Ty, 
    _System._tuple#15$T6: Ty, 
    _System._tuple#15$T7: Ty, 
    _System._tuple#15$T8: Ty, 
    _System._tuple#15$T9: Ty, 
    _System._tuple#15$T10: Ty, 
    _System._tuple#15$T11: Ty, 
    _System._tuple#15$T12: Ty, 
    _System._tuple#15$T13: Ty, 
    _System._tuple#15$T14: Ty :: 
  { Tclass._System.Tuple15(_System._tuple#15$T0, 
      _System._tuple#15$T1, 
      _System._tuple#15$T2, 
      _System._tuple#15$T3, 
      _System._tuple#15$T4, 
      _System._tuple#15$T5, 
      _System._tuple#15$T6, 
      _System._tuple#15$T7, 
      _System._tuple#15$T8, 
      _System._tuple#15$T9, 
      _System._tuple#15$T10, 
      _System._tuple#15$T11, 
      _System._tuple#15$T12, 
      _System._tuple#15$T13, 
      _System._tuple#15$T14) } 
  Tclass._System.Tuple15_10(Tclass._System.Tuple15(_System._tuple#15$T0, 
        _System._tuple#15$T1, 
        _System._tuple#15$T2, 
        _System._tuple#15$T3, 
        _System._tuple#15$T4, 
        _System._tuple#15$T5, 
        _System._tuple#15$T6, 
        _System._tuple#15$T7, 
        _System._tuple#15$T8, 
        _System._tuple#15$T9, 
        _System._tuple#15$T10, 
        _System._tuple#15$T11, 
        _System._tuple#15$T12, 
        _System._tuple#15$T13, 
        _System._tuple#15$T14))
     == _System._tuple#15$T10);

function Tclass._System.Tuple15_11(Ty) : Ty;

// Tclass._System.Tuple15 injectivity 11
axiom (forall _System._tuple#15$T0: Ty, 
    _System._tuple#15$T1: Ty, 
    _System._tuple#15$T2: Ty, 
    _System._tuple#15$T3: Ty, 
    _System._tuple#15$T4: Ty, 
    _System._tuple#15$T5: Ty, 
    _System._tuple#15$T6: Ty, 
    _System._tuple#15$T7: Ty, 
    _System._tuple#15$T8: Ty, 
    _System._tuple#15$T9: Ty, 
    _System._tuple#15$T10: Ty, 
    _System._tuple#15$T11: Ty, 
    _System._tuple#15$T12: Ty, 
    _System._tuple#15$T13: Ty, 
    _System._tuple#15$T14: Ty :: 
  { Tclass._System.Tuple15(_System._tuple#15$T0, 
      _System._tuple#15$T1, 
      _System._tuple#15$T2, 
      _System._tuple#15$T3, 
      _System._tuple#15$T4, 
      _System._tuple#15$T5, 
      _System._tuple#15$T6, 
      _System._tuple#15$T7, 
      _System._tuple#15$T8, 
      _System._tuple#15$T9, 
      _System._tuple#15$T10, 
      _System._tuple#15$T11, 
      _System._tuple#15$T12, 
      _System._tuple#15$T13, 
      _System._tuple#15$T14) } 
  Tclass._System.Tuple15_11(Tclass._System.Tuple15(_System._tuple#15$T0, 
        _System._tuple#15$T1, 
        _System._tuple#15$T2, 
        _System._tuple#15$T3, 
        _System._tuple#15$T4, 
        _System._tuple#15$T5, 
        _System._tuple#15$T6, 
        _System._tuple#15$T7, 
        _System._tuple#15$T8, 
        _System._tuple#15$T9, 
        _System._tuple#15$T10, 
        _System._tuple#15$T11, 
        _System._tuple#15$T12, 
        _System._tuple#15$T13, 
        _System._tuple#15$T14))
     == _System._tuple#15$T11);

function Tclass._System.Tuple15_12(Ty) : Ty;

// Tclass._System.Tuple15 injectivity 12
axiom (forall _System._tuple#15$T0: Ty, 
    _System._tuple#15$T1: Ty, 
    _System._tuple#15$T2: Ty, 
    _System._tuple#15$T3: Ty, 
    _System._tuple#15$T4: Ty, 
    _System._tuple#15$T5: Ty, 
    _System._tuple#15$T6: Ty, 
    _System._tuple#15$T7: Ty, 
    _System._tuple#15$T8: Ty, 
    _System._tuple#15$T9: Ty, 
    _System._tuple#15$T10: Ty, 
    _System._tuple#15$T11: Ty, 
    _System._tuple#15$T12: Ty, 
    _System._tuple#15$T13: Ty, 
    _System._tuple#15$T14: Ty :: 
  { Tclass._System.Tuple15(_System._tuple#15$T0, 
      _System._tuple#15$T1, 
      _System._tuple#15$T2, 
      _System._tuple#15$T3, 
      _System._tuple#15$T4, 
      _System._tuple#15$T5, 
      _System._tuple#15$T6, 
      _System._tuple#15$T7, 
      _System._tuple#15$T8, 
      _System._tuple#15$T9, 
      _System._tuple#15$T10, 
      _System._tuple#15$T11, 
      _System._tuple#15$T12, 
      _System._tuple#15$T13, 
      _System._tuple#15$T14) } 
  Tclass._System.Tuple15_12(Tclass._System.Tuple15(_System._tuple#15$T0, 
        _System._tuple#15$T1, 
        _System._tuple#15$T2, 
        _System._tuple#15$T3, 
        _System._tuple#15$T4, 
        _System._tuple#15$T5, 
        _System._tuple#15$T6, 
        _System._tuple#15$T7, 
        _System._tuple#15$T8, 
        _System._tuple#15$T9, 
        _System._tuple#15$T10, 
        _System._tuple#15$T11, 
        _System._tuple#15$T12, 
        _System._tuple#15$T13, 
        _System._tuple#15$T14))
     == _System._tuple#15$T12);

function Tclass._System.Tuple15_13(Ty) : Ty;

// Tclass._System.Tuple15 injectivity 13
axiom (forall _System._tuple#15$T0: Ty, 
    _System._tuple#15$T1: Ty, 
    _System._tuple#15$T2: Ty, 
    _System._tuple#15$T3: Ty, 
    _System._tuple#15$T4: Ty, 
    _System._tuple#15$T5: Ty, 
    _System._tuple#15$T6: Ty, 
    _System._tuple#15$T7: Ty, 
    _System._tuple#15$T8: Ty, 
    _System._tuple#15$T9: Ty, 
    _System._tuple#15$T10: Ty, 
    _System._tuple#15$T11: Ty, 
    _System._tuple#15$T12: Ty, 
    _System._tuple#15$T13: Ty, 
    _System._tuple#15$T14: Ty :: 
  { Tclass._System.Tuple15(_System._tuple#15$T0, 
      _System._tuple#15$T1, 
      _System._tuple#15$T2, 
      _System._tuple#15$T3, 
      _System._tuple#15$T4, 
      _System._tuple#15$T5, 
      _System._tuple#15$T6, 
      _System._tuple#15$T7, 
      _System._tuple#15$T8, 
      _System._tuple#15$T9, 
      _System._tuple#15$T10, 
      _System._tuple#15$T11, 
      _System._tuple#15$T12, 
      _System._tuple#15$T13, 
      _System._tuple#15$T14) } 
  Tclass._System.Tuple15_13(Tclass._System.Tuple15(_System._tuple#15$T0, 
        _System._tuple#15$T1, 
        _System._tuple#15$T2, 
        _System._tuple#15$T3, 
        _System._tuple#15$T4, 
        _System._tuple#15$T5, 
        _System._tuple#15$T6, 
        _System._tuple#15$T7, 
        _System._tuple#15$T8, 
        _System._tuple#15$T9, 
        _System._tuple#15$T10, 
        _System._tuple#15$T11, 
        _System._tuple#15$T12, 
        _System._tuple#15$T13, 
        _System._tuple#15$T14))
     == _System._tuple#15$T13);

function Tclass._System.Tuple15_14(Ty) : Ty;

// Tclass._System.Tuple15 injectivity 14
axiom (forall _System._tuple#15$T0: Ty, 
    _System._tuple#15$T1: Ty, 
    _System._tuple#15$T2: Ty, 
    _System._tuple#15$T3: Ty, 
    _System._tuple#15$T4: Ty, 
    _System._tuple#15$T5: Ty, 
    _System._tuple#15$T6: Ty, 
    _System._tuple#15$T7: Ty, 
    _System._tuple#15$T8: Ty, 
    _System._tuple#15$T9: Ty, 
    _System._tuple#15$T10: Ty, 
    _System._tuple#15$T11: Ty, 
    _System._tuple#15$T12: Ty, 
    _System._tuple#15$T13: Ty, 
    _System._tuple#15$T14: Ty :: 
  { Tclass._System.Tuple15(_System._tuple#15$T0, 
      _System._tuple#15$T1, 
      _System._tuple#15$T2, 
      _System._tuple#15$T3, 
      _System._tuple#15$T4, 
      _System._tuple#15$T5, 
      _System._tuple#15$T6, 
      _System._tuple#15$T7, 
      _System._tuple#15$T8, 
      _System._tuple#15$T9, 
      _System._tuple#15$T10, 
      _System._tuple#15$T11, 
      _System._tuple#15$T12, 
      _System._tuple#15$T13, 
      _System._tuple#15$T14) } 
  Tclass._System.Tuple15_14(Tclass._System.Tuple15(_System._tuple#15$T0, 
        _System._tuple#15$T1, 
        _System._tuple#15$T2, 
        _System._tuple#15$T3, 
        _System._tuple#15$T4, 
        _System._tuple#15$T5, 
        _System._tuple#15$T6, 
        _System._tuple#15$T7, 
        _System._tuple#15$T8, 
        _System._tuple#15$T9, 
        _System._tuple#15$T10, 
        _System._tuple#15$T11, 
        _System._tuple#15$T12, 
        _System._tuple#15$T13, 
        _System._tuple#15$T14))
     == _System._tuple#15$T14);

// Box/unbox axiom for Tclass._System.Tuple15
axiom (forall _System._tuple#15$T0: Ty, 
    _System._tuple#15$T1: Ty, 
    _System._tuple#15$T2: Ty, 
    _System._tuple#15$T3: Ty, 
    _System._tuple#15$T4: Ty, 
    _System._tuple#15$T5: Ty, 
    _System._tuple#15$T6: Ty, 
    _System._tuple#15$T7: Ty, 
    _System._tuple#15$T8: Ty, 
    _System._tuple#15$T9: Ty, 
    _System._tuple#15$T10: Ty, 
    _System._tuple#15$T11: Ty, 
    _System._tuple#15$T12: Ty, 
    _System._tuple#15$T13: Ty, 
    _System._tuple#15$T14: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.Tuple15(_System._tuple#15$T0, 
        _System._tuple#15$T1, 
        _System._tuple#15$T2, 
        _System._tuple#15$T3, 
        _System._tuple#15$T4, 
        _System._tuple#15$T5, 
        _System._tuple#15$T6, 
        _System._tuple#15$T7, 
        _System._tuple#15$T8, 
        _System._tuple#15$T9, 
        _System._tuple#15$T10, 
        _System._tuple#15$T11, 
        _System._tuple#15$T12, 
        _System._tuple#15$T13, 
        _System._tuple#15$T14)) } 
  $IsBox(bx, 
      Tclass._System.Tuple15(_System._tuple#15$T0, 
        _System._tuple#15$T1, 
        _System._tuple#15$T2, 
        _System._tuple#15$T3, 
        _System._tuple#15$T4, 
        _System._tuple#15$T5, 
        _System._tuple#15$T6, 
        _System._tuple#15$T7, 
        _System._tuple#15$T8, 
        _System._tuple#15$T9, 
        _System._tuple#15$T10, 
        _System._tuple#15$T11, 
        _System._tuple#15$T12, 
        _System._tuple#15$T13, 
        _System._tuple#15$T14))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple15(_System._tuple#15$T0, 
          _System._tuple#15$T1, 
          _System._tuple#15$T2, 
          _System._tuple#15$T3, 
          _System._tuple#15$T4, 
          _System._tuple#15$T5, 
          _System._tuple#15$T6, 
          _System._tuple#15$T7, 
          _System._tuple#15$T8, 
          _System._tuple#15$T9, 
          _System._tuple#15$T10, 
          _System._tuple#15$T11, 
          _System._tuple#15$T12, 
          _System._tuple#15$T13, 
          _System._tuple#15$T14)));

// Constructor $Is
axiom (forall _System._tuple#15$T0: Ty, 
    _System._tuple#15$T1: Ty, 
    _System._tuple#15$T2: Ty, 
    _System._tuple#15$T3: Ty, 
    _System._tuple#15$T4: Ty, 
    _System._tuple#15$T5: Ty, 
    _System._tuple#15$T6: Ty, 
    _System._tuple#15$T7: Ty, 
    _System._tuple#15$T8: Ty, 
    _System._tuple#15$T9: Ty, 
    _System._tuple#15$T10: Ty, 
    _System._tuple#15$T11: Ty, 
    _System._tuple#15$T12: Ty, 
    _System._tuple#15$T13: Ty, 
    _System._tuple#15$T14: Ty, 
    a#274#0#0: Box, 
    a#274#1#0: Box, 
    a#274#2#0: Box, 
    a#274#3#0: Box, 
    a#274#4#0: Box, 
    a#274#5#0: Box, 
    a#274#6#0: Box, 
    a#274#7#0: Box, 
    a#274#8#0: Box, 
    a#274#9#0: Box, 
    a#274#10#0: Box, 
    a#274#11#0: Box, 
    a#274#12#0: Box, 
    a#274#13#0: Box, 
    a#274#14#0: Box :: 
  { $Is(#_System._tuple#15._#Make15(a#274#0#0, 
        a#274#1#0, 
        a#274#2#0, 
        a#274#3#0, 
        a#274#4#0, 
        a#274#5#0, 
        a#274#6#0, 
        a#274#7#0, 
        a#274#8#0, 
        a#274#9#0, 
        a#274#10#0, 
        a#274#11#0, 
        a#274#12#0, 
        a#274#13#0, 
        a#274#14#0), 
      Tclass._System.Tuple15(_System._tuple#15$T0, 
        _System._tuple#15$T1, 
        _System._tuple#15$T2, 
        _System._tuple#15$T3, 
        _System._tuple#15$T4, 
        _System._tuple#15$T5, 
        _System._tuple#15$T6, 
        _System._tuple#15$T7, 
        _System._tuple#15$T8, 
        _System._tuple#15$T9, 
        _System._tuple#15$T10, 
        _System._tuple#15$T11, 
        _System._tuple#15$T12, 
        _System._tuple#15$T13, 
        _System._tuple#15$T14)) } 
  $Is(#_System._tuple#15._#Make15(a#274#0#0, 
        a#274#1#0, 
        a#274#2#0, 
        a#274#3#0, 
        a#274#4#0, 
        a#274#5#0, 
        a#274#6#0, 
        a#274#7#0, 
        a#274#8#0, 
        a#274#9#0, 
        a#274#10#0, 
        a#274#11#0, 
        a#274#12#0, 
        a#274#13#0, 
        a#274#14#0), 
      Tclass._System.Tuple15(_System._tuple#15$T0, 
        _System._tuple#15$T1, 
        _System._tuple#15$T2, 
        _System._tuple#15$T3, 
        _System._tuple#15$T4, 
        _System._tuple#15$T5, 
        _System._tuple#15$T6, 
        _System._tuple#15$T7, 
        _System._tuple#15$T8, 
        _System._tuple#15$T9, 
        _System._tuple#15$T10, 
        _System._tuple#15$T11, 
        _System._tuple#15$T12, 
        _System._tuple#15$T13, 
        _System._tuple#15$T14))
     <==> $IsBox(a#274#0#0, _System._tuple#15$T0)
       && $IsBox(a#274#1#0, _System._tuple#15$T1)
       && $IsBox(a#274#2#0, _System._tuple#15$T2)
       && $IsBox(a#274#3#0, _System._tuple#15$T3)
       && $IsBox(a#274#4#0, _System._tuple#15$T4)
       && $IsBox(a#274#5#0, _System._tuple#15$T5)
       && $IsBox(a#274#6#0, _System._tuple#15$T6)
       && $IsBox(a#274#7#0, _System._tuple#15$T7)
       && $IsBox(a#274#8#0, _System._tuple#15$T8)
       && $IsBox(a#274#9#0, _System._tuple#15$T9)
       && $IsBox(a#274#10#0, _System._tuple#15$T10)
       && $IsBox(a#274#11#0, _System._tuple#15$T11)
       && $IsBox(a#274#12#0, _System._tuple#15$T12)
       && $IsBox(a#274#13#0, _System._tuple#15$T13)
       && $IsBox(a#274#14#0, _System._tuple#15$T14));

// Constructor $IsAlloc
axiom (forall _System._tuple#15$T0: Ty, 
    _System._tuple#15$T1: Ty, 
    _System._tuple#15$T2: Ty, 
    _System._tuple#15$T3: Ty, 
    _System._tuple#15$T4: Ty, 
    _System._tuple#15$T5: Ty, 
    _System._tuple#15$T6: Ty, 
    _System._tuple#15$T7: Ty, 
    _System._tuple#15$T8: Ty, 
    _System._tuple#15$T9: Ty, 
    _System._tuple#15$T10: Ty, 
    _System._tuple#15$T11: Ty, 
    _System._tuple#15$T12: Ty, 
    _System._tuple#15$T13: Ty, 
    _System._tuple#15$T14: Ty, 
    a#274#0#0: Box, 
    a#274#1#0: Box, 
    a#274#2#0: Box, 
    a#274#3#0: Box, 
    a#274#4#0: Box, 
    a#274#5#0: Box, 
    a#274#6#0: Box, 
    a#274#7#0: Box, 
    a#274#8#0: Box, 
    a#274#9#0: Box, 
    a#274#10#0: Box, 
    a#274#11#0: Box, 
    a#274#12#0: Box, 
    a#274#13#0: Box, 
    a#274#14#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#15._#Make15(a#274#0#0, 
        a#274#1#0, 
        a#274#2#0, 
        a#274#3#0, 
        a#274#4#0, 
        a#274#5#0, 
        a#274#6#0, 
        a#274#7#0, 
        a#274#8#0, 
        a#274#9#0, 
        a#274#10#0, 
        a#274#11#0, 
        a#274#12#0, 
        a#274#13#0, 
        a#274#14#0), 
      Tclass._System.Tuple15(_System._tuple#15$T0, 
        _System._tuple#15$T1, 
        _System._tuple#15$T2, 
        _System._tuple#15$T3, 
        _System._tuple#15$T4, 
        _System._tuple#15$T5, 
        _System._tuple#15$T6, 
        _System._tuple#15$T7, 
        _System._tuple#15$T8, 
        _System._tuple#15$T9, 
        _System._tuple#15$T10, 
        _System._tuple#15$T11, 
        _System._tuple#15$T12, 
        _System._tuple#15$T13, 
        _System._tuple#15$T14), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#15._#Make15(a#274#0#0, 
          a#274#1#0, 
          a#274#2#0, 
          a#274#3#0, 
          a#274#4#0, 
          a#274#5#0, 
          a#274#6#0, 
          a#274#7#0, 
          a#274#8#0, 
          a#274#9#0, 
          a#274#10#0, 
          a#274#11#0, 
          a#274#12#0, 
          a#274#13#0, 
          a#274#14#0), 
        Tclass._System.Tuple15(_System._tuple#15$T0, 
          _System._tuple#15$T1, 
          _System._tuple#15$T2, 
          _System._tuple#15$T3, 
          _System._tuple#15$T4, 
          _System._tuple#15$T5, 
          _System._tuple#15$T6, 
          _System._tuple#15$T7, 
          _System._tuple#15$T8, 
          _System._tuple#15$T9, 
          _System._tuple#15$T10, 
          _System._tuple#15$T11, 
          _System._tuple#15$T12, 
          _System._tuple#15$T13, 
          _System._tuple#15$T14), 
        $h)
       <==> $IsAllocBox(a#274#0#0, _System._tuple#15$T0, $h)
         && $IsAllocBox(a#274#1#0, _System._tuple#15$T1, $h)
         && $IsAllocBox(a#274#2#0, _System._tuple#15$T2, $h)
         && $IsAllocBox(a#274#3#0, _System._tuple#15$T3, $h)
         && $IsAllocBox(a#274#4#0, _System._tuple#15$T4, $h)
         && $IsAllocBox(a#274#5#0, _System._tuple#15$T5, $h)
         && $IsAllocBox(a#274#6#0, _System._tuple#15$T6, $h)
         && $IsAllocBox(a#274#7#0, _System._tuple#15$T7, $h)
         && $IsAllocBox(a#274#8#0, _System._tuple#15$T8, $h)
         && $IsAllocBox(a#274#9#0, _System._tuple#15$T9, $h)
         && $IsAllocBox(a#274#10#0, _System._tuple#15$T10, $h)
         && $IsAllocBox(a#274#11#0, _System._tuple#15$T11, $h)
         && $IsAllocBox(a#274#12#0, _System._tuple#15$T12, $h)
         && $IsAllocBox(a#274#13#0, _System._tuple#15$T13, $h)
         && $IsAllocBox(a#274#14#0, _System._tuple#15$T14, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#15$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple15._0(d), _System._tuple#15$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple15.___hMake15_q(d)
       && (exists _System._tuple#15$T1: Ty, 
          _System._tuple#15$T2: Ty, 
          _System._tuple#15$T3: Ty, 
          _System._tuple#15$T4: Ty, 
          _System._tuple#15$T5: Ty, 
          _System._tuple#15$T6: Ty, 
          _System._tuple#15$T7: Ty, 
          _System._tuple#15$T8: Ty, 
          _System._tuple#15$T9: Ty, 
          _System._tuple#15$T10: Ty, 
          _System._tuple#15$T11: Ty, 
          _System._tuple#15$T12: Ty, 
          _System._tuple#15$T13: Ty, 
          _System._tuple#15$T14: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple15(_System._tuple#15$T0, 
              _System._tuple#15$T1, 
              _System._tuple#15$T2, 
              _System._tuple#15$T3, 
              _System._tuple#15$T4, 
              _System._tuple#15$T5, 
              _System._tuple#15$T6, 
              _System._tuple#15$T7, 
              _System._tuple#15$T8, 
              _System._tuple#15$T9, 
              _System._tuple#15$T10, 
              _System._tuple#15$T11, 
              _System._tuple#15$T12, 
              _System._tuple#15$T13, 
              _System._tuple#15$T14), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple15(_System._tuple#15$T0, 
            _System._tuple#15$T1, 
            _System._tuple#15$T2, 
            _System._tuple#15$T3, 
            _System._tuple#15$T4, 
            _System._tuple#15$T5, 
            _System._tuple#15$T6, 
            _System._tuple#15$T7, 
            _System._tuple#15$T8, 
            _System._tuple#15$T9, 
            _System._tuple#15$T10, 
            _System._tuple#15$T11, 
            _System._tuple#15$T12, 
            _System._tuple#15$T13, 
            _System._tuple#15$T14), 
          $h))
     ==> $IsAllocBox(_System.Tuple15._0(d), _System._tuple#15$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#15$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple15._1(d), _System._tuple#15$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple15.___hMake15_q(d)
       && (exists _System._tuple#15$T0: Ty, 
          _System._tuple#15$T2: Ty, 
          _System._tuple#15$T3: Ty, 
          _System._tuple#15$T4: Ty, 
          _System._tuple#15$T5: Ty, 
          _System._tuple#15$T6: Ty, 
          _System._tuple#15$T7: Ty, 
          _System._tuple#15$T8: Ty, 
          _System._tuple#15$T9: Ty, 
          _System._tuple#15$T10: Ty, 
          _System._tuple#15$T11: Ty, 
          _System._tuple#15$T12: Ty, 
          _System._tuple#15$T13: Ty, 
          _System._tuple#15$T14: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple15(_System._tuple#15$T0, 
              _System._tuple#15$T1, 
              _System._tuple#15$T2, 
              _System._tuple#15$T3, 
              _System._tuple#15$T4, 
              _System._tuple#15$T5, 
              _System._tuple#15$T6, 
              _System._tuple#15$T7, 
              _System._tuple#15$T8, 
              _System._tuple#15$T9, 
              _System._tuple#15$T10, 
              _System._tuple#15$T11, 
              _System._tuple#15$T12, 
              _System._tuple#15$T13, 
              _System._tuple#15$T14), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple15(_System._tuple#15$T0, 
            _System._tuple#15$T1, 
            _System._tuple#15$T2, 
            _System._tuple#15$T3, 
            _System._tuple#15$T4, 
            _System._tuple#15$T5, 
            _System._tuple#15$T6, 
            _System._tuple#15$T7, 
            _System._tuple#15$T8, 
            _System._tuple#15$T9, 
            _System._tuple#15$T10, 
            _System._tuple#15$T11, 
            _System._tuple#15$T12, 
            _System._tuple#15$T13, 
            _System._tuple#15$T14), 
          $h))
     ==> $IsAllocBox(_System.Tuple15._1(d), _System._tuple#15$T1, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#15$T2: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple15._2(d), _System._tuple#15$T2, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple15.___hMake15_q(d)
       && (exists _System._tuple#15$T0: Ty, 
          _System._tuple#15$T1: Ty, 
          _System._tuple#15$T3: Ty, 
          _System._tuple#15$T4: Ty, 
          _System._tuple#15$T5: Ty, 
          _System._tuple#15$T6: Ty, 
          _System._tuple#15$T7: Ty, 
          _System._tuple#15$T8: Ty, 
          _System._tuple#15$T9: Ty, 
          _System._tuple#15$T10: Ty, 
          _System._tuple#15$T11: Ty, 
          _System._tuple#15$T12: Ty, 
          _System._tuple#15$T13: Ty, 
          _System._tuple#15$T14: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple15(_System._tuple#15$T0, 
              _System._tuple#15$T1, 
              _System._tuple#15$T2, 
              _System._tuple#15$T3, 
              _System._tuple#15$T4, 
              _System._tuple#15$T5, 
              _System._tuple#15$T6, 
              _System._tuple#15$T7, 
              _System._tuple#15$T8, 
              _System._tuple#15$T9, 
              _System._tuple#15$T10, 
              _System._tuple#15$T11, 
              _System._tuple#15$T12, 
              _System._tuple#15$T13, 
              _System._tuple#15$T14), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple15(_System._tuple#15$T0, 
            _System._tuple#15$T1, 
            _System._tuple#15$T2, 
            _System._tuple#15$T3, 
            _System._tuple#15$T4, 
            _System._tuple#15$T5, 
            _System._tuple#15$T6, 
            _System._tuple#15$T7, 
            _System._tuple#15$T8, 
            _System._tuple#15$T9, 
            _System._tuple#15$T10, 
            _System._tuple#15$T11, 
            _System._tuple#15$T12, 
            _System._tuple#15$T13, 
            _System._tuple#15$T14), 
          $h))
     ==> $IsAllocBox(_System.Tuple15._2(d), _System._tuple#15$T2, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#15$T3: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple15._3(d), _System._tuple#15$T3, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple15.___hMake15_q(d)
       && (exists _System._tuple#15$T0: Ty, 
          _System._tuple#15$T1: Ty, 
          _System._tuple#15$T2: Ty, 
          _System._tuple#15$T4: Ty, 
          _System._tuple#15$T5: Ty, 
          _System._tuple#15$T6: Ty, 
          _System._tuple#15$T7: Ty, 
          _System._tuple#15$T8: Ty, 
          _System._tuple#15$T9: Ty, 
          _System._tuple#15$T10: Ty, 
          _System._tuple#15$T11: Ty, 
          _System._tuple#15$T12: Ty, 
          _System._tuple#15$T13: Ty, 
          _System._tuple#15$T14: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple15(_System._tuple#15$T0, 
              _System._tuple#15$T1, 
              _System._tuple#15$T2, 
              _System._tuple#15$T3, 
              _System._tuple#15$T4, 
              _System._tuple#15$T5, 
              _System._tuple#15$T6, 
              _System._tuple#15$T7, 
              _System._tuple#15$T8, 
              _System._tuple#15$T9, 
              _System._tuple#15$T10, 
              _System._tuple#15$T11, 
              _System._tuple#15$T12, 
              _System._tuple#15$T13, 
              _System._tuple#15$T14), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple15(_System._tuple#15$T0, 
            _System._tuple#15$T1, 
            _System._tuple#15$T2, 
            _System._tuple#15$T3, 
            _System._tuple#15$T4, 
            _System._tuple#15$T5, 
            _System._tuple#15$T6, 
            _System._tuple#15$T7, 
            _System._tuple#15$T8, 
            _System._tuple#15$T9, 
            _System._tuple#15$T10, 
            _System._tuple#15$T11, 
            _System._tuple#15$T12, 
            _System._tuple#15$T13, 
            _System._tuple#15$T14), 
          $h))
     ==> $IsAllocBox(_System.Tuple15._3(d), _System._tuple#15$T3, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#15$T4: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple15._4(d), _System._tuple#15$T4, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple15.___hMake15_q(d)
       && (exists _System._tuple#15$T0: Ty, 
          _System._tuple#15$T1: Ty, 
          _System._tuple#15$T2: Ty, 
          _System._tuple#15$T3: Ty, 
          _System._tuple#15$T5: Ty, 
          _System._tuple#15$T6: Ty, 
          _System._tuple#15$T7: Ty, 
          _System._tuple#15$T8: Ty, 
          _System._tuple#15$T9: Ty, 
          _System._tuple#15$T10: Ty, 
          _System._tuple#15$T11: Ty, 
          _System._tuple#15$T12: Ty, 
          _System._tuple#15$T13: Ty, 
          _System._tuple#15$T14: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple15(_System._tuple#15$T0, 
              _System._tuple#15$T1, 
              _System._tuple#15$T2, 
              _System._tuple#15$T3, 
              _System._tuple#15$T4, 
              _System._tuple#15$T5, 
              _System._tuple#15$T6, 
              _System._tuple#15$T7, 
              _System._tuple#15$T8, 
              _System._tuple#15$T9, 
              _System._tuple#15$T10, 
              _System._tuple#15$T11, 
              _System._tuple#15$T12, 
              _System._tuple#15$T13, 
              _System._tuple#15$T14), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple15(_System._tuple#15$T0, 
            _System._tuple#15$T1, 
            _System._tuple#15$T2, 
            _System._tuple#15$T3, 
            _System._tuple#15$T4, 
            _System._tuple#15$T5, 
            _System._tuple#15$T6, 
            _System._tuple#15$T7, 
            _System._tuple#15$T8, 
            _System._tuple#15$T9, 
            _System._tuple#15$T10, 
            _System._tuple#15$T11, 
            _System._tuple#15$T12, 
            _System._tuple#15$T13, 
            _System._tuple#15$T14), 
          $h))
     ==> $IsAllocBox(_System.Tuple15._4(d), _System._tuple#15$T4, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#15$T5: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple15._5(d), _System._tuple#15$T5, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple15.___hMake15_q(d)
       && (exists _System._tuple#15$T0: Ty, 
          _System._tuple#15$T1: Ty, 
          _System._tuple#15$T2: Ty, 
          _System._tuple#15$T3: Ty, 
          _System._tuple#15$T4: Ty, 
          _System._tuple#15$T6: Ty, 
          _System._tuple#15$T7: Ty, 
          _System._tuple#15$T8: Ty, 
          _System._tuple#15$T9: Ty, 
          _System._tuple#15$T10: Ty, 
          _System._tuple#15$T11: Ty, 
          _System._tuple#15$T12: Ty, 
          _System._tuple#15$T13: Ty, 
          _System._tuple#15$T14: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple15(_System._tuple#15$T0, 
              _System._tuple#15$T1, 
              _System._tuple#15$T2, 
              _System._tuple#15$T3, 
              _System._tuple#15$T4, 
              _System._tuple#15$T5, 
              _System._tuple#15$T6, 
              _System._tuple#15$T7, 
              _System._tuple#15$T8, 
              _System._tuple#15$T9, 
              _System._tuple#15$T10, 
              _System._tuple#15$T11, 
              _System._tuple#15$T12, 
              _System._tuple#15$T13, 
              _System._tuple#15$T14), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple15(_System._tuple#15$T0, 
            _System._tuple#15$T1, 
            _System._tuple#15$T2, 
            _System._tuple#15$T3, 
            _System._tuple#15$T4, 
            _System._tuple#15$T5, 
            _System._tuple#15$T6, 
            _System._tuple#15$T7, 
            _System._tuple#15$T8, 
            _System._tuple#15$T9, 
            _System._tuple#15$T10, 
            _System._tuple#15$T11, 
            _System._tuple#15$T12, 
            _System._tuple#15$T13, 
            _System._tuple#15$T14), 
          $h))
     ==> $IsAllocBox(_System.Tuple15._5(d), _System._tuple#15$T5, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#15$T6: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple15._6(d), _System._tuple#15$T6, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple15.___hMake15_q(d)
       && (exists _System._tuple#15$T0: Ty, 
          _System._tuple#15$T1: Ty, 
          _System._tuple#15$T2: Ty, 
          _System._tuple#15$T3: Ty, 
          _System._tuple#15$T4: Ty, 
          _System._tuple#15$T5: Ty, 
          _System._tuple#15$T7: Ty, 
          _System._tuple#15$T8: Ty, 
          _System._tuple#15$T9: Ty, 
          _System._tuple#15$T10: Ty, 
          _System._tuple#15$T11: Ty, 
          _System._tuple#15$T12: Ty, 
          _System._tuple#15$T13: Ty, 
          _System._tuple#15$T14: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple15(_System._tuple#15$T0, 
              _System._tuple#15$T1, 
              _System._tuple#15$T2, 
              _System._tuple#15$T3, 
              _System._tuple#15$T4, 
              _System._tuple#15$T5, 
              _System._tuple#15$T6, 
              _System._tuple#15$T7, 
              _System._tuple#15$T8, 
              _System._tuple#15$T9, 
              _System._tuple#15$T10, 
              _System._tuple#15$T11, 
              _System._tuple#15$T12, 
              _System._tuple#15$T13, 
              _System._tuple#15$T14), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple15(_System._tuple#15$T0, 
            _System._tuple#15$T1, 
            _System._tuple#15$T2, 
            _System._tuple#15$T3, 
            _System._tuple#15$T4, 
            _System._tuple#15$T5, 
            _System._tuple#15$T6, 
            _System._tuple#15$T7, 
            _System._tuple#15$T8, 
            _System._tuple#15$T9, 
            _System._tuple#15$T10, 
            _System._tuple#15$T11, 
            _System._tuple#15$T12, 
            _System._tuple#15$T13, 
            _System._tuple#15$T14), 
          $h))
     ==> $IsAllocBox(_System.Tuple15._6(d), _System._tuple#15$T6, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#15$T7: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple15._7(d), _System._tuple#15$T7, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple15.___hMake15_q(d)
       && (exists _System._tuple#15$T0: Ty, 
          _System._tuple#15$T1: Ty, 
          _System._tuple#15$T2: Ty, 
          _System._tuple#15$T3: Ty, 
          _System._tuple#15$T4: Ty, 
          _System._tuple#15$T5: Ty, 
          _System._tuple#15$T6: Ty, 
          _System._tuple#15$T8: Ty, 
          _System._tuple#15$T9: Ty, 
          _System._tuple#15$T10: Ty, 
          _System._tuple#15$T11: Ty, 
          _System._tuple#15$T12: Ty, 
          _System._tuple#15$T13: Ty, 
          _System._tuple#15$T14: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple15(_System._tuple#15$T0, 
              _System._tuple#15$T1, 
              _System._tuple#15$T2, 
              _System._tuple#15$T3, 
              _System._tuple#15$T4, 
              _System._tuple#15$T5, 
              _System._tuple#15$T6, 
              _System._tuple#15$T7, 
              _System._tuple#15$T8, 
              _System._tuple#15$T9, 
              _System._tuple#15$T10, 
              _System._tuple#15$T11, 
              _System._tuple#15$T12, 
              _System._tuple#15$T13, 
              _System._tuple#15$T14), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple15(_System._tuple#15$T0, 
            _System._tuple#15$T1, 
            _System._tuple#15$T2, 
            _System._tuple#15$T3, 
            _System._tuple#15$T4, 
            _System._tuple#15$T5, 
            _System._tuple#15$T6, 
            _System._tuple#15$T7, 
            _System._tuple#15$T8, 
            _System._tuple#15$T9, 
            _System._tuple#15$T10, 
            _System._tuple#15$T11, 
            _System._tuple#15$T12, 
            _System._tuple#15$T13, 
            _System._tuple#15$T14), 
          $h))
     ==> $IsAllocBox(_System.Tuple15._7(d), _System._tuple#15$T7, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#15$T8: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple15._8(d), _System._tuple#15$T8, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple15.___hMake15_q(d)
       && (exists _System._tuple#15$T0: Ty, 
          _System._tuple#15$T1: Ty, 
          _System._tuple#15$T2: Ty, 
          _System._tuple#15$T3: Ty, 
          _System._tuple#15$T4: Ty, 
          _System._tuple#15$T5: Ty, 
          _System._tuple#15$T6: Ty, 
          _System._tuple#15$T7: Ty, 
          _System._tuple#15$T9: Ty, 
          _System._tuple#15$T10: Ty, 
          _System._tuple#15$T11: Ty, 
          _System._tuple#15$T12: Ty, 
          _System._tuple#15$T13: Ty, 
          _System._tuple#15$T14: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple15(_System._tuple#15$T0, 
              _System._tuple#15$T1, 
              _System._tuple#15$T2, 
              _System._tuple#15$T3, 
              _System._tuple#15$T4, 
              _System._tuple#15$T5, 
              _System._tuple#15$T6, 
              _System._tuple#15$T7, 
              _System._tuple#15$T8, 
              _System._tuple#15$T9, 
              _System._tuple#15$T10, 
              _System._tuple#15$T11, 
              _System._tuple#15$T12, 
              _System._tuple#15$T13, 
              _System._tuple#15$T14), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple15(_System._tuple#15$T0, 
            _System._tuple#15$T1, 
            _System._tuple#15$T2, 
            _System._tuple#15$T3, 
            _System._tuple#15$T4, 
            _System._tuple#15$T5, 
            _System._tuple#15$T6, 
            _System._tuple#15$T7, 
            _System._tuple#15$T8, 
            _System._tuple#15$T9, 
            _System._tuple#15$T10, 
            _System._tuple#15$T11, 
            _System._tuple#15$T12, 
            _System._tuple#15$T13, 
            _System._tuple#15$T14), 
          $h))
     ==> $IsAllocBox(_System.Tuple15._8(d), _System._tuple#15$T8, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#15$T9: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple15._9(d), _System._tuple#15$T9, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple15.___hMake15_q(d)
       && (exists _System._tuple#15$T0: Ty, 
          _System._tuple#15$T1: Ty, 
          _System._tuple#15$T2: Ty, 
          _System._tuple#15$T3: Ty, 
          _System._tuple#15$T4: Ty, 
          _System._tuple#15$T5: Ty, 
          _System._tuple#15$T6: Ty, 
          _System._tuple#15$T7: Ty, 
          _System._tuple#15$T8: Ty, 
          _System._tuple#15$T10: Ty, 
          _System._tuple#15$T11: Ty, 
          _System._tuple#15$T12: Ty, 
          _System._tuple#15$T13: Ty, 
          _System._tuple#15$T14: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple15(_System._tuple#15$T0, 
              _System._tuple#15$T1, 
              _System._tuple#15$T2, 
              _System._tuple#15$T3, 
              _System._tuple#15$T4, 
              _System._tuple#15$T5, 
              _System._tuple#15$T6, 
              _System._tuple#15$T7, 
              _System._tuple#15$T8, 
              _System._tuple#15$T9, 
              _System._tuple#15$T10, 
              _System._tuple#15$T11, 
              _System._tuple#15$T12, 
              _System._tuple#15$T13, 
              _System._tuple#15$T14), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple15(_System._tuple#15$T0, 
            _System._tuple#15$T1, 
            _System._tuple#15$T2, 
            _System._tuple#15$T3, 
            _System._tuple#15$T4, 
            _System._tuple#15$T5, 
            _System._tuple#15$T6, 
            _System._tuple#15$T7, 
            _System._tuple#15$T8, 
            _System._tuple#15$T9, 
            _System._tuple#15$T10, 
            _System._tuple#15$T11, 
            _System._tuple#15$T12, 
            _System._tuple#15$T13, 
            _System._tuple#15$T14), 
          $h))
     ==> $IsAllocBox(_System.Tuple15._9(d), _System._tuple#15$T9, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#15$T10: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple15._10(d), _System._tuple#15$T10, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple15.___hMake15_q(d)
       && (exists _System._tuple#15$T0: Ty, 
          _System._tuple#15$T1: Ty, 
          _System._tuple#15$T2: Ty, 
          _System._tuple#15$T3: Ty, 
          _System._tuple#15$T4: Ty, 
          _System._tuple#15$T5: Ty, 
          _System._tuple#15$T6: Ty, 
          _System._tuple#15$T7: Ty, 
          _System._tuple#15$T8: Ty, 
          _System._tuple#15$T9: Ty, 
          _System._tuple#15$T11: Ty, 
          _System._tuple#15$T12: Ty, 
          _System._tuple#15$T13: Ty, 
          _System._tuple#15$T14: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple15(_System._tuple#15$T0, 
              _System._tuple#15$T1, 
              _System._tuple#15$T2, 
              _System._tuple#15$T3, 
              _System._tuple#15$T4, 
              _System._tuple#15$T5, 
              _System._tuple#15$T6, 
              _System._tuple#15$T7, 
              _System._tuple#15$T8, 
              _System._tuple#15$T9, 
              _System._tuple#15$T10, 
              _System._tuple#15$T11, 
              _System._tuple#15$T12, 
              _System._tuple#15$T13, 
              _System._tuple#15$T14), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple15(_System._tuple#15$T0, 
            _System._tuple#15$T1, 
            _System._tuple#15$T2, 
            _System._tuple#15$T3, 
            _System._tuple#15$T4, 
            _System._tuple#15$T5, 
            _System._tuple#15$T6, 
            _System._tuple#15$T7, 
            _System._tuple#15$T8, 
            _System._tuple#15$T9, 
            _System._tuple#15$T10, 
            _System._tuple#15$T11, 
            _System._tuple#15$T12, 
            _System._tuple#15$T13, 
            _System._tuple#15$T14), 
          $h))
     ==> $IsAllocBox(_System.Tuple15._10(d), _System._tuple#15$T10, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#15$T11: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple15._11(d), _System._tuple#15$T11, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple15.___hMake15_q(d)
       && (exists _System._tuple#15$T0: Ty, 
          _System._tuple#15$T1: Ty, 
          _System._tuple#15$T2: Ty, 
          _System._tuple#15$T3: Ty, 
          _System._tuple#15$T4: Ty, 
          _System._tuple#15$T5: Ty, 
          _System._tuple#15$T6: Ty, 
          _System._tuple#15$T7: Ty, 
          _System._tuple#15$T8: Ty, 
          _System._tuple#15$T9: Ty, 
          _System._tuple#15$T10: Ty, 
          _System._tuple#15$T12: Ty, 
          _System._tuple#15$T13: Ty, 
          _System._tuple#15$T14: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple15(_System._tuple#15$T0, 
              _System._tuple#15$T1, 
              _System._tuple#15$T2, 
              _System._tuple#15$T3, 
              _System._tuple#15$T4, 
              _System._tuple#15$T5, 
              _System._tuple#15$T6, 
              _System._tuple#15$T7, 
              _System._tuple#15$T8, 
              _System._tuple#15$T9, 
              _System._tuple#15$T10, 
              _System._tuple#15$T11, 
              _System._tuple#15$T12, 
              _System._tuple#15$T13, 
              _System._tuple#15$T14), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple15(_System._tuple#15$T0, 
            _System._tuple#15$T1, 
            _System._tuple#15$T2, 
            _System._tuple#15$T3, 
            _System._tuple#15$T4, 
            _System._tuple#15$T5, 
            _System._tuple#15$T6, 
            _System._tuple#15$T7, 
            _System._tuple#15$T8, 
            _System._tuple#15$T9, 
            _System._tuple#15$T10, 
            _System._tuple#15$T11, 
            _System._tuple#15$T12, 
            _System._tuple#15$T13, 
            _System._tuple#15$T14), 
          $h))
     ==> $IsAllocBox(_System.Tuple15._11(d), _System._tuple#15$T11, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#15$T12: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple15._12(d), _System._tuple#15$T12, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple15.___hMake15_q(d)
       && (exists _System._tuple#15$T0: Ty, 
          _System._tuple#15$T1: Ty, 
          _System._tuple#15$T2: Ty, 
          _System._tuple#15$T3: Ty, 
          _System._tuple#15$T4: Ty, 
          _System._tuple#15$T5: Ty, 
          _System._tuple#15$T6: Ty, 
          _System._tuple#15$T7: Ty, 
          _System._tuple#15$T8: Ty, 
          _System._tuple#15$T9: Ty, 
          _System._tuple#15$T10: Ty, 
          _System._tuple#15$T11: Ty, 
          _System._tuple#15$T13: Ty, 
          _System._tuple#15$T14: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple15(_System._tuple#15$T0, 
              _System._tuple#15$T1, 
              _System._tuple#15$T2, 
              _System._tuple#15$T3, 
              _System._tuple#15$T4, 
              _System._tuple#15$T5, 
              _System._tuple#15$T6, 
              _System._tuple#15$T7, 
              _System._tuple#15$T8, 
              _System._tuple#15$T9, 
              _System._tuple#15$T10, 
              _System._tuple#15$T11, 
              _System._tuple#15$T12, 
              _System._tuple#15$T13, 
              _System._tuple#15$T14), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple15(_System._tuple#15$T0, 
            _System._tuple#15$T1, 
            _System._tuple#15$T2, 
            _System._tuple#15$T3, 
            _System._tuple#15$T4, 
            _System._tuple#15$T5, 
            _System._tuple#15$T6, 
            _System._tuple#15$T7, 
            _System._tuple#15$T8, 
            _System._tuple#15$T9, 
            _System._tuple#15$T10, 
            _System._tuple#15$T11, 
            _System._tuple#15$T12, 
            _System._tuple#15$T13, 
            _System._tuple#15$T14), 
          $h))
     ==> $IsAllocBox(_System.Tuple15._12(d), _System._tuple#15$T12, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#15$T13: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple15._13(d), _System._tuple#15$T13, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple15.___hMake15_q(d)
       && (exists _System._tuple#15$T0: Ty, 
          _System._tuple#15$T1: Ty, 
          _System._tuple#15$T2: Ty, 
          _System._tuple#15$T3: Ty, 
          _System._tuple#15$T4: Ty, 
          _System._tuple#15$T5: Ty, 
          _System._tuple#15$T6: Ty, 
          _System._tuple#15$T7: Ty, 
          _System._tuple#15$T8: Ty, 
          _System._tuple#15$T9: Ty, 
          _System._tuple#15$T10: Ty, 
          _System._tuple#15$T11: Ty, 
          _System._tuple#15$T12: Ty, 
          _System._tuple#15$T14: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple15(_System._tuple#15$T0, 
              _System._tuple#15$T1, 
              _System._tuple#15$T2, 
              _System._tuple#15$T3, 
              _System._tuple#15$T4, 
              _System._tuple#15$T5, 
              _System._tuple#15$T6, 
              _System._tuple#15$T7, 
              _System._tuple#15$T8, 
              _System._tuple#15$T9, 
              _System._tuple#15$T10, 
              _System._tuple#15$T11, 
              _System._tuple#15$T12, 
              _System._tuple#15$T13, 
              _System._tuple#15$T14), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple15(_System._tuple#15$T0, 
            _System._tuple#15$T1, 
            _System._tuple#15$T2, 
            _System._tuple#15$T3, 
            _System._tuple#15$T4, 
            _System._tuple#15$T5, 
            _System._tuple#15$T6, 
            _System._tuple#15$T7, 
            _System._tuple#15$T8, 
            _System._tuple#15$T9, 
            _System._tuple#15$T10, 
            _System._tuple#15$T11, 
            _System._tuple#15$T12, 
            _System._tuple#15$T13, 
            _System._tuple#15$T14), 
          $h))
     ==> $IsAllocBox(_System.Tuple15._13(d), _System._tuple#15$T13, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#15$T14: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple15._14(d), _System._tuple#15$T14, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple15.___hMake15_q(d)
       && (exists _System._tuple#15$T0: Ty, 
          _System._tuple#15$T1: Ty, 
          _System._tuple#15$T2: Ty, 
          _System._tuple#15$T3: Ty, 
          _System._tuple#15$T4: Ty, 
          _System._tuple#15$T5: Ty, 
          _System._tuple#15$T6: Ty, 
          _System._tuple#15$T7: Ty, 
          _System._tuple#15$T8: Ty, 
          _System._tuple#15$T9: Ty, 
          _System._tuple#15$T10: Ty, 
          _System._tuple#15$T11: Ty, 
          _System._tuple#15$T12: Ty, 
          _System._tuple#15$T13: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple15(_System._tuple#15$T0, 
              _System._tuple#15$T1, 
              _System._tuple#15$T2, 
              _System._tuple#15$T3, 
              _System._tuple#15$T4, 
              _System._tuple#15$T5, 
              _System._tuple#15$T6, 
              _System._tuple#15$T7, 
              _System._tuple#15$T8, 
              _System._tuple#15$T9, 
              _System._tuple#15$T10, 
              _System._tuple#15$T11, 
              _System._tuple#15$T12, 
              _System._tuple#15$T13, 
              _System._tuple#15$T14), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple15(_System._tuple#15$T0, 
            _System._tuple#15$T1, 
            _System._tuple#15$T2, 
            _System._tuple#15$T3, 
            _System._tuple#15$T4, 
            _System._tuple#15$T5, 
            _System._tuple#15$T6, 
            _System._tuple#15$T7, 
            _System._tuple#15$T8, 
            _System._tuple#15$T9, 
            _System._tuple#15$T10, 
            _System._tuple#15$T11, 
            _System._tuple#15$T12, 
            _System._tuple#15$T13, 
            _System._tuple#15$T14), 
          $h))
     ==> $IsAllocBox(_System.Tuple15._14(d), _System._tuple#15$T14, $h));

// Constructor literal
axiom (forall a#275#0#0: Box, 
    a#275#1#0: Box, 
    a#275#2#0: Box, 
    a#275#3#0: Box, 
    a#275#4#0: Box, 
    a#275#5#0: Box, 
    a#275#6#0: Box, 
    a#275#7#0: Box, 
    a#275#8#0: Box, 
    a#275#9#0: Box, 
    a#275#10#0: Box, 
    a#275#11#0: Box, 
    a#275#12#0: Box, 
    a#275#13#0: Box, 
    a#275#14#0: Box :: 
  { #_System._tuple#15._#Make15(Lit(a#275#0#0), 
      Lit(a#275#1#0), 
      Lit(a#275#2#0), 
      Lit(a#275#3#0), 
      Lit(a#275#4#0), 
      Lit(a#275#5#0), 
      Lit(a#275#6#0), 
      Lit(a#275#7#0), 
      Lit(a#275#8#0), 
      Lit(a#275#9#0), 
      Lit(a#275#10#0), 
      Lit(a#275#11#0), 
      Lit(a#275#12#0), 
      Lit(a#275#13#0), 
      Lit(a#275#14#0)) } 
  #_System._tuple#15._#Make15(Lit(a#275#0#0), 
      Lit(a#275#1#0), 
      Lit(a#275#2#0), 
      Lit(a#275#3#0), 
      Lit(a#275#4#0), 
      Lit(a#275#5#0), 
      Lit(a#275#6#0), 
      Lit(a#275#7#0), 
      Lit(a#275#8#0), 
      Lit(a#275#9#0), 
      Lit(a#275#10#0), 
      Lit(a#275#11#0), 
      Lit(a#275#12#0), 
      Lit(a#275#13#0), 
      Lit(a#275#14#0))
     == Lit(#_System._tuple#15._#Make15(a#275#0#0, 
        a#275#1#0, 
        a#275#2#0, 
        a#275#3#0, 
        a#275#4#0, 
        a#275#5#0, 
        a#275#6#0, 
        a#275#7#0, 
        a#275#8#0, 
        a#275#9#0, 
        a#275#10#0, 
        a#275#11#0, 
        a#275#12#0, 
        a#275#13#0, 
        a#275#14#0)));

function _System.Tuple15._0(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#276#0#0: Box, 
    a#276#1#0: Box, 
    a#276#2#0: Box, 
    a#276#3#0: Box, 
    a#276#4#0: Box, 
    a#276#5#0: Box, 
    a#276#6#0: Box, 
    a#276#7#0: Box, 
    a#276#8#0: Box, 
    a#276#9#0: Box, 
    a#276#10#0: Box, 
    a#276#11#0: Box, 
    a#276#12#0: Box, 
    a#276#13#0: Box, 
    a#276#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#276#0#0, 
      a#276#1#0, 
      a#276#2#0, 
      a#276#3#0, 
      a#276#4#0, 
      a#276#5#0, 
      a#276#6#0, 
      a#276#7#0, 
      a#276#8#0, 
      a#276#9#0, 
      a#276#10#0, 
      a#276#11#0, 
      a#276#12#0, 
      a#276#13#0, 
      a#276#14#0) } 
  _System.Tuple15._0(#_System._tuple#15._#Make15(a#276#0#0, 
        a#276#1#0, 
        a#276#2#0, 
        a#276#3#0, 
        a#276#4#0, 
        a#276#5#0, 
        a#276#6#0, 
        a#276#7#0, 
        a#276#8#0, 
        a#276#9#0, 
        a#276#10#0, 
        a#276#11#0, 
        a#276#12#0, 
        a#276#13#0, 
        a#276#14#0))
     == a#276#0#0);

// Inductive rank
axiom (forall a#277#0#0: Box, 
    a#277#1#0: Box, 
    a#277#2#0: Box, 
    a#277#3#0: Box, 
    a#277#4#0: Box, 
    a#277#5#0: Box, 
    a#277#6#0: Box, 
    a#277#7#0: Box, 
    a#277#8#0: Box, 
    a#277#9#0: Box, 
    a#277#10#0: Box, 
    a#277#11#0: Box, 
    a#277#12#0: Box, 
    a#277#13#0: Box, 
    a#277#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#277#0#0, 
      a#277#1#0, 
      a#277#2#0, 
      a#277#3#0, 
      a#277#4#0, 
      a#277#5#0, 
      a#277#6#0, 
      a#277#7#0, 
      a#277#8#0, 
      a#277#9#0, 
      a#277#10#0, 
      a#277#11#0, 
      a#277#12#0, 
      a#277#13#0, 
      a#277#14#0) } 
  BoxRank(a#277#0#0)
     < DtRank(#_System._tuple#15._#Make15(a#277#0#0, 
        a#277#1#0, 
        a#277#2#0, 
        a#277#3#0, 
        a#277#4#0, 
        a#277#5#0, 
        a#277#6#0, 
        a#277#7#0, 
        a#277#8#0, 
        a#277#9#0, 
        a#277#10#0, 
        a#277#11#0, 
        a#277#12#0, 
        a#277#13#0, 
        a#277#14#0)));

function _System.Tuple15._1(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#278#0#0: Box, 
    a#278#1#0: Box, 
    a#278#2#0: Box, 
    a#278#3#0: Box, 
    a#278#4#0: Box, 
    a#278#5#0: Box, 
    a#278#6#0: Box, 
    a#278#7#0: Box, 
    a#278#8#0: Box, 
    a#278#9#0: Box, 
    a#278#10#0: Box, 
    a#278#11#0: Box, 
    a#278#12#0: Box, 
    a#278#13#0: Box, 
    a#278#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#278#0#0, 
      a#278#1#0, 
      a#278#2#0, 
      a#278#3#0, 
      a#278#4#0, 
      a#278#5#0, 
      a#278#6#0, 
      a#278#7#0, 
      a#278#8#0, 
      a#278#9#0, 
      a#278#10#0, 
      a#278#11#0, 
      a#278#12#0, 
      a#278#13#0, 
      a#278#14#0) } 
  _System.Tuple15._1(#_System._tuple#15._#Make15(a#278#0#0, 
        a#278#1#0, 
        a#278#2#0, 
        a#278#3#0, 
        a#278#4#0, 
        a#278#5#0, 
        a#278#6#0, 
        a#278#7#0, 
        a#278#8#0, 
        a#278#9#0, 
        a#278#10#0, 
        a#278#11#0, 
        a#278#12#0, 
        a#278#13#0, 
        a#278#14#0))
     == a#278#1#0);

// Inductive rank
axiom (forall a#279#0#0: Box, 
    a#279#1#0: Box, 
    a#279#2#0: Box, 
    a#279#3#0: Box, 
    a#279#4#0: Box, 
    a#279#5#0: Box, 
    a#279#6#0: Box, 
    a#279#7#0: Box, 
    a#279#8#0: Box, 
    a#279#9#0: Box, 
    a#279#10#0: Box, 
    a#279#11#0: Box, 
    a#279#12#0: Box, 
    a#279#13#0: Box, 
    a#279#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#279#0#0, 
      a#279#1#0, 
      a#279#2#0, 
      a#279#3#0, 
      a#279#4#0, 
      a#279#5#0, 
      a#279#6#0, 
      a#279#7#0, 
      a#279#8#0, 
      a#279#9#0, 
      a#279#10#0, 
      a#279#11#0, 
      a#279#12#0, 
      a#279#13#0, 
      a#279#14#0) } 
  BoxRank(a#279#1#0)
     < DtRank(#_System._tuple#15._#Make15(a#279#0#0, 
        a#279#1#0, 
        a#279#2#0, 
        a#279#3#0, 
        a#279#4#0, 
        a#279#5#0, 
        a#279#6#0, 
        a#279#7#0, 
        a#279#8#0, 
        a#279#9#0, 
        a#279#10#0, 
        a#279#11#0, 
        a#279#12#0, 
        a#279#13#0, 
        a#279#14#0)));

function _System.Tuple15._2(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#280#0#0: Box, 
    a#280#1#0: Box, 
    a#280#2#0: Box, 
    a#280#3#0: Box, 
    a#280#4#0: Box, 
    a#280#5#0: Box, 
    a#280#6#0: Box, 
    a#280#7#0: Box, 
    a#280#8#0: Box, 
    a#280#9#0: Box, 
    a#280#10#0: Box, 
    a#280#11#0: Box, 
    a#280#12#0: Box, 
    a#280#13#0: Box, 
    a#280#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#280#0#0, 
      a#280#1#0, 
      a#280#2#0, 
      a#280#3#0, 
      a#280#4#0, 
      a#280#5#0, 
      a#280#6#0, 
      a#280#7#0, 
      a#280#8#0, 
      a#280#9#0, 
      a#280#10#0, 
      a#280#11#0, 
      a#280#12#0, 
      a#280#13#0, 
      a#280#14#0) } 
  _System.Tuple15._2(#_System._tuple#15._#Make15(a#280#0#0, 
        a#280#1#0, 
        a#280#2#0, 
        a#280#3#0, 
        a#280#4#0, 
        a#280#5#0, 
        a#280#6#0, 
        a#280#7#0, 
        a#280#8#0, 
        a#280#9#0, 
        a#280#10#0, 
        a#280#11#0, 
        a#280#12#0, 
        a#280#13#0, 
        a#280#14#0))
     == a#280#2#0);

// Inductive rank
axiom (forall a#281#0#0: Box, 
    a#281#1#0: Box, 
    a#281#2#0: Box, 
    a#281#3#0: Box, 
    a#281#4#0: Box, 
    a#281#5#0: Box, 
    a#281#6#0: Box, 
    a#281#7#0: Box, 
    a#281#8#0: Box, 
    a#281#9#0: Box, 
    a#281#10#0: Box, 
    a#281#11#0: Box, 
    a#281#12#0: Box, 
    a#281#13#0: Box, 
    a#281#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#281#0#0, 
      a#281#1#0, 
      a#281#2#0, 
      a#281#3#0, 
      a#281#4#0, 
      a#281#5#0, 
      a#281#6#0, 
      a#281#7#0, 
      a#281#8#0, 
      a#281#9#0, 
      a#281#10#0, 
      a#281#11#0, 
      a#281#12#0, 
      a#281#13#0, 
      a#281#14#0) } 
  BoxRank(a#281#2#0)
     < DtRank(#_System._tuple#15._#Make15(a#281#0#0, 
        a#281#1#0, 
        a#281#2#0, 
        a#281#3#0, 
        a#281#4#0, 
        a#281#5#0, 
        a#281#6#0, 
        a#281#7#0, 
        a#281#8#0, 
        a#281#9#0, 
        a#281#10#0, 
        a#281#11#0, 
        a#281#12#0, 
        a#281#13#0, 
        a#281#14#0)));

function _System.Tuple15._3(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#282#0#0: Box, 
    a#282#1#0: Box, 
    a#282#2#0: Box, 
    a#282#3#0: Box, 
    a#282#4#0: Box, 
    a#282#5#0: Box, 
    a#282#6#0: Box, 
    a#282#7#0: Box, 
    a#282#8#0: Box, 
    a#282#9#0: Box, 
    a#282#10#0: Box, 
    a#282#11#0: Box, 
    a#282#12#0: Box, 
    a#282#13#0: Box, 
    a#282#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#282#0#0, 
      a#282#1#0, 
      a#282#2#0, 
      a#282#3#0, 
      a#282#4#0, 
      a#282#5#0, 
      a#282#6#0, 
      a#282#7#0, 
      a#282#8#0, 
      a#282#9#0, 
      a#282#10#0, 
      a#282#11#0, 
      a#282#12#0, 
      a#282#13#0, 
      a#282#14#0) } 
  _System.Tuple15._3(#_System._tuple#15._#Make15(a#282#0#0, 
        a#282#1#0, 
        a#282#2#0, 
        a#282#3#0, 
        a#282#4#0, 
        a#282#5#0, 
        a#282#6#0, 
        a#282#7#0, 
        a#282#8#0, 
        a#282#9#0, 
        a#282#10#0, 
        a#282#11#0, 
        a#282#12#0, 
        a#282#13#0, 
        a#282#14#0))
     == a#282#3#0);

// Inductive rank
axiom (forall a#283#0#0: Box, 
    a#283#1#0: Box, 
    a#283#2#0: Box, 
    a#283#3#0: Box, 
    a#283#4#0: Box, 
    a#283#5#0: Box, 
    a#283#6#0: Box, 
    a#283#7#0: Box, 
    a#283#8#0: Box, 
    a#283#9#0: Box, 
    a#283#10#0: Box, 
    a#283#11#0: Box, 
    a#283#12#0: Box, 
    a#283#13#0: Box, 
    a#283#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#283#0#0, 
      a#283#1#0, 
      a#283#2#0, 
      a#283#3#0, 
      a#283#4#0, 
      a#283#5#0, 
      a#283#6#0, 
      a#283#7#0, 
      a#283#8#0, 
      a#283#9#0, 
      a#283#10#0, 
      a#283#11#0, 
      a#283#12#0, 
      a#283#13#0, 
      a#283#14#0) } 
  BoxRank(a#283#3#0)
     < DtRank(#_System._tuple#15._#Make15(a#283#0#0, 
        a#283#1#0, 
        a#283#2#0, 
        a#283#3#0, 
        a#283#4#0, 
        a#283#5#0, 
        a#283#6#0, 
        a#283#7#0, 
        a#283#8#0, 
        a#283#9#0, 
        a#283#10#0, 
        a#283#11#0, 
        a#283#12#0, 
        a#283#13#0, 
        a#283#14#0)));

function _System.Tuple15._4(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#284#0#0: Box, 
    a#284#1#0: Box, 
    a#284#2#0: Box, 
    a#284#3#0: Box, 
    a#284#4#0: Box, 
    a#284#5#0: Box, 
    a#284#6#0: Box, 
    a#284#7#0: Box, 
    a#284#8#0: Box, 
    a#284#9#0: Box, 
    a#284#10#0: Box, 
    a#284#11#0: Box, 
    a#284#12#0: Box, 
    a#284#13#0: Box, 
    a#284#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#284#0#0, 
      a#284#1#0, 
      a#284#2#0, 
      a#284#3#0, 
      a#284#4#0, 
      a#284#5#0, 
      a#284#6#0, 
      a#284#7#0, 
      a#284#8#0, 
      a#284#9#0, 
      a#284#10#0, 
      a#284#11#0, 
      a#284#12#0, 
      a#284#13#0, 
      a#284#14#0) } 
  _System.Tuple15._4(#_System._tuple#15._#Make15(a#284#0#0, 
        a#284#1#0, 
        a#284#2#0, 
        a#284#3#0, 
        a#284#4#0, 
        a#284#5#0, 
        a#284#6#0, 
        a#284#7#0, 
        a#284#8#0, 
        a#284#9#0, 
        a#284#10#0, 
        a#284#11#0, 
        a#284#12#0, 
        a#284#13#0, 
        a#284#14#0))
     == a#284#4#0);

// Inductive rank
axiom (forall a#285#0#0: Box, 
    a#285#1#0: Box, 
    a#285#2#0: Box, 
    a#285#3#0: Box, 
    a#285#4#0: Box, 
    a#285#5#0: Box, 
    a#285#6#0: Box, 
    a#285#7#0: Box, 
    a#285#8#0: Box, 
    a#285#9#0: Box, 
    a#285#10#0: Box, 
    a#285#11#0: Box, 
    a#285#12#0: Box, 
    a#285#13#0: Box, 
    a#285#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#285#0#0, 
      a#285#1#0, 
      a#285#2#0, 
      a#285#3#0, 
      a#285#4#0, 
      a#285#5#0, 
      a#285#6#0, 
      a#285#7#0, 
      a#285#8#0, 
      a#285#9#0, 
      a#285#10#0, 
      a#285#11#0, 
      a#285#12#0, 
      a#285#13#0, 
      a#285#14#0) } 
  BoxRank(a#285#4#0)
     < DtRank(#_System._tuple#15._#Make15(a#285#0#0, 
        a#285#1#0, 
        a#285#2#0, 
        a#285#3#0, 
        a#285#4#0, 
        a#285#5#0, 
        a#285#6#0, 
        a#285#7#0, 
        a#285#8#0, 
        a#285#9#0, 
        a#285#10#0, 
        a#285#11#0, 
        a#285#12#0, 
        a#285#13#0, 
        a#285#14#0)));

function _System.Tuple15._5(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#286#0#0: Box, 
    a#286#1#0: Box, 
    a#286#2#0: Box, 
    a#286#3#0: Box, 
    a#286#4#0: Box, 
    a#286#5#0: Box, 
    a#286#6#0: Box, 
    a#286#7#0: Box, 
    a#286#8#0: Box, 
    a#286#9#0: Box, 
    a#286#10#0: Box, 
    a#286#11#0: Box, 
    a#286#12#0: Box, 
    a#286#13#0: Box, 
    a#286#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#286#0#0, 
      a#286#1#0, 
      a#286#2#0, 
      a#286#3#0, 
      a#286#4#0, 
      a#286#5#0, 
      a#286#6#0, 
      a#286#7#0, 
      a#286#8#0, 
      a#286#9#0, 
      a#286#10#0, 
      a#286#11#0, 
      a#286#12#0, 
      a#286#13#0, 
      a#286#14#0) } 
  _System.Tuple15._5(#_System._tuple#15._#Make15(a#286#0#0, 
        a#286#1#0, 
        a#286#2#0, 
        a#286#3#0, 
        a#286#4#0, 
        a#286#5#0, 
        a#286#6#0, 
        a#286#7#0, 
        a#286#8#0, 
        a#286#9#0, 
        a#286#10#0, 
        a#286#11#0, 
        a#286#12#0, 
        a#286#13#0, 
        a#286#14#0))
     == a#286#5#0);

// Inductive rank
axiom (forall a#287#0#0: Box, 
    a#287#1#0: Box, 
    a#287#2#0: Box, 
    a#287#3#0: Box, 
    a#287#4#0: Box, 
    a#287#5#0: Box, 
    a#287#6#0: Box, 
    a#287#7#0: Box, 
    a#287#8#0: Box, 
    a#287#9#0: Box, 
    a#287#10#0: Box, 
    a#287#11#0: Box, 
    a#287#12#0: Box, 
    a#287#13#0: Box, 
    a#287#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#287#0#0, 
      a#287#1#0, 
      a#287#2#0, 
      a#287#3#0, 
      a#287#4#0, 
      a#287#5#0, 
      a#287#6#0, 
      a#287#7#0, 
      a#287#8#0, 
      a#287#9#0, 
      a#287#10#0, 
      a#287#11#0, 
      a#287#12#0, 
      a#287#13#0, 
      a#287#14#0) } 
  BoxRank(a#287#5#0)
     < DtRank(#_System._tuple#15._#Make15(a#287#0#0, 
        a#287#1#0, 
        a#287#2#0, 
        a#287#3#0, 
        a#287#4#0, 
        a#287#5#0, 
        a#287#6#0, 
        a#287#7#0, 
        a#287#8#0, 
        a#287#9#0, 
        a#287#10#0, 
        a#287#11#0, 
        a#287#12#0, 
        a#287#13#0, 
        a#287#14#0)));

function _System.Tuple15._6(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#288#0#0: Box, 
    a#288#1#0: Box, 
    a#288#2#0: Box, 
    a#288#3#0: Box, 
    a#288#4#0: Box, 
    a#288#5#0: Box, 
    a#288#6#0: Box, 
    a#288#7#0: Box, 
    a#288#8#0: Box, 
    a#288#9#0: Box, 
    a#288#10#0: Box, 
    a#288#11#0: Box, 
    a#288#12#0: Box, 
    a#288#13#0: Box, 
    a#288#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#288#0#0, 
      a#288#1#0, 
      a#288#2#0, 
      a#288#3#0, 
      a#288#4#0, 
      a#288#5#0, 
      a#288#6#0, 
      a#288#7#0, 
      a#288#8#0, 
      a#288#9#0, 
      a#288#10#0, 
      a#288#11#0, 
      a#288#12#0, 
      a#288#13#0, 
      a#288#14#0) } 
  _System.Tuple15._6(#_System._tuple#15._#Make15(a#288#0#0, 
        a#288#1#0, 
        a#288#2#0, 
        a#288#3#0, 
        a#288#4#0, 
        a#288#5#0, 
        a#288#6#0, 
        a#288#7#0, 
        a#288#8#0, 
        a#288#9#0, 
        a#288#10#0, 
        a#288#11#0, 
        a#288#12#0, 
        a#288#13#0, 
        a#288#14#0))
     == a#288#6#0);

// Inductive rank
axiom (forall a#289#0#0: Box, 
    a#289#1#0: Box, 
    a#289#2#0: Box, 
    a#289#3#0: Box, 
    a#289#4#0: Box, 
    a#289#5#0: Box, 
    a#289#6#0: Box, 
    a#289#7#0: Box, 
    a#289#8#0: Box, 
    a#289#9#0: Box, 
    a#289#10#0: Box, 
    a#289#11#0: Box, 
    a#289#12#0: Box, 
    a#289#13#0: Box, 
    a#289#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#289#0#0, 
      a#289#1#0, 
      a#289#2#0, 
      a#289#3#0, 
      a#289#4#0, 
      a#289#5#0, 
      a#289#6#0, 
      a#289#7#0, 
      a#289#8#0, 
      a#289#9#0, 
      a#289#10#0, 
      a#289#11#0, 
      a#289#12#0, 
      a#289#13#0, 
      a#289#14#0) } 
  BoxRank(a#289#6#0)
     < DtRank(#_System._tuple#15._#Make15(a#289#0#0, 
        a#289#1#0, 
        a#289#2#0, 
        a#289#3#0, 
        a#289#4#0, 
        a#289#5#0, 
        a#289#6#0, 
        a#289#7#0, 
        a#289#8#0, 
        a#289#9#0, 
        a#289#10#0, 
        a#289#11#0, 
        a#289#12#0, 
        a#289#13#0, 
        a#289#14#0)));

function _System.Tuple15._7(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#290#0#0: Box, 
    a#290#1#0: Box, 
    a#290#2#0: Box, 
    a#290#3#0: Box, 
    a#290#4#0: Box, 
    a#290#5#0: Box, 
    a#290#6#0: Box, 
    a#290#7#0: Box, 
    a#290#8#0: Box, 
    a#290#9#0: Box, 
    a#290#10#0: Box, 
    a#290#11#0: Box, 
    a#290#12#0: Box, 
    a#290#13#0: Box, 
    a#290#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#290#0#0, 
      a#290#1#0, 
      a#290#2#0, 
      a#290#3#0, 
      a#290#4#0, 
      a#290#5#0, 
      a#290#6#0, 
      a#290#7#0, 
      a#290#8#0, 
      a#290#9#0, 
      a#290#10#0, 
      a#290#11#0, 
      a#290#12#0, 
      a#290#13#0, 
      a#290#14#0) } 
  _System.Tuple15._7(#_System._tuple#15._#Make15(a#290#0#0, 
        a#290#1#0, 
        a#290#2#0, 
        a#290#3#0, 
        a#290#4#0, 
        a#290#5#0, 
        a#290#6#0, 
        a#290#7#0, 
        a#290#8#0, 
        a#290#9#0, 
        a#290#10#0, 
        a#290#11#0, 
        a#290#12#0, 
        a#290#13#0, 
        a#290#14#0))
     == a#290#7#0);

// Inductive rank
axiom (forall a#291#0#0: Box, 
    a#291#1#0: Box, 
    a#291#2#0: Box, 
    a#291#3#0: Box, 
    a#291#4#0: Box, 
    a#291#5#0: Box, 
    a#291#6#0: Box, 
    a#291#7#0: Box, 
    a#291#8#0: Box, 
    a#291#9#0: Box, 
    a#291#10#0: Box, 
    a#291#11#0: Box, 
    a#291#12#0: Box, 
    a#291#13#0: Box, 
    a#291#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#291#0#0, 
      a#291#1#0, 
      a#291#2#0, 
      a#291#3#0, 
      a#291#4#0, 
      a#291#5#0, 
      a#291#6#0, 
      a#291#7#0, 
      a#291#8#0, 
      a#291#9#0, 
      a#291#10#0, 
      a#291#11#0, 
      a#291#12#0, 
      a#291#13#0, 
      a#291#14#0) } 
  BoxRank(a#291#7#0)
     < DtRank(#_System._tuple#15._#Make15(a#291#0#0, 
        a#291#1#0, 
        a#291#2#0, 
        a#291#3#0, 
        a#291#4#0, 
        a#291#5#0, 
        a#291#6#0, 
        a#291#7#0, 
        a#291#8#0, 
        a#291#9#0, 
        a#291#10#0, 
        a#291#11#0, 
        a#291#12#0, 
        a#291#13#0, 
        a#291#14#0)));

function _System.Tuple15._8(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#292#0#0: Box, 
    a#292#1#0: Box, 
    a#292#2#0: Box, 
    a#292#3#0: Box, 
    a#292#4#0: Box, 
    a#292#5#0: Box, 
    a#292#6#0: Box, 
    a#292#7#0: Box, 
    a#292#8#0: Box, 
    a#292#9#0: Box, 
    a#292#10#0: Box, 
    a#292#11#0: Box, 
    a#292#12#0: Box, 
    a#292#13#0: Box, 
    a#292#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#292#0#0, 
      a#292#1#0, 
      a#292#2#0, 
      a#292#3#0, 
      a#292#4#0, 
      a#292#5#0, 
      a#292#6#0, 
      a#292#7#0, 
      a#292#8#0, 
      a#292#9#0, 
      a#292#10#0, 
      a#292#11#0, 
      a#292#12#0, 
      a#292#13#0, 
      a#292#14#0) } 
  _System.Tuple15._8(#_System._tuple#15._#Make15(a#292#0#0, 
        a#292#1#0, 
        a#292#2#0, 
        a#292#3#0, 
        a#292#4#0, 
        a#292#5#0, 
        a#292#6#0, 
        a#292#7#0, 
        a#292#8#0, 
        a#292#9#0, 
        a#292#10#0, 
        a#292#11#0, 
        a#292#12#0, 
        a#292#13#0, 
        a#292#14#0))
     == a#292#8#0);

// Inductive rank
axiom (forall a#293#0#0: Box, 
    a#293#1#0: Box, 
    a#293#2#0: Box, 
    a#293#3#0: Box, 
    a#293#4#0: Box, 
    a#293#5#0: Box, 
    a#293#6#0: Box, 
    a#293#7#0: Box, 
    a#293#8#0: Box, 
    a#293#9#0: Box, 
    a#293#10#0: Box, 
    a#293#11#0: Box, 
    a#293#12#0: Box, 
    a#293#13#0: Box, 
    a#293#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#293#0#0, 
      a#293#1#0, 
      a#293#2#0, 
      a#293#3#0, 
      a#293#4#0, 
      a#293#5#0, 
      a#293#6#0, 
      a#293#7#0, 
      a#293#8#0, 
      a#293#9#0, 
      a#293#10#0, 
      a#293#11#0, 
      a#293#12#0, 
      a#293#13#0, 
      a#293#14#0) } 
  BoxRank(a#293#8#0)
     < DtRank(#_System._tuple#15._#Make15(a#293#0#0, 
        a#293#1#0, 
        a#293#2#0, 
        a#293#3#0, 
        a#293#4#0, 
        a#293#5#0, 
        a#293#6#0, 
        a#293#7#0, 
        a#293#8#0, 
        a#293#9#0, 
        a#293#10#0, 
        a#293#11#0, 
        a#293#12#0, 
        a#293#13#0, 
        a#293#14#0)));

function _System.Tuple15._9(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#294#0#0: Box, 
    a#294#1#0: Box, 
    a#294#2#0: Box, 
    a#294#3#0: Box, 
    a#294#4#0: Box, 
    a#294#5#0: Box, 
    a#294#6#0: Box, 
    a#294#7#0: Box, 
    a#294#8#0: Box, 
    a#294#9#0: Box, 
    a#294#10#0: Box, 
    a#294#11#0: Box, 
    a#294#12#0: Box, 
    a#294#13#0: Box, 
    a#294#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#294#0#0, 
      a#294#1#0, 
      a#294#2#0, 
      a#294#3#0, 
      a#294#4#0, 
      a#294#5#0, 
      a#294#6#0, 
      a#294#7#0, 
      a#294#8#0, 
      a#294#9#0, 
      a#294#10#0, 
      a#294#11#0, 
      a#294#12#0, 
      a#294#13#0, 
      a#294#14#0) } 
  _System.Tuple15._9(#_System._tuple#15._#Make15(a#294#0#0, 
        a#294#1#0, 
        a#294#2#0, 
        a#294#3#0, 
        a#294#4#0, 
        a#294#5#0, 
        a#294#6#0, 
        a#294#7#0, 
        a#294#8#0, 
        a#294#9#0, 
        a#294#10#0, 
        a#294#11#0, 
        a#294#12#0, 
        a#294#13#0, 
        a#294#14#0))
     == a#294#9#0);

// Inductive rank
axiom (forall a#295#0#0: Box, 
    a#295#1#0: Box, 
    a#295#2#0: Box, 
    a#295#3#0: Box, 
    a#295#4#0: Box, 
    a#295#5#0: Box, 
    a#295#6#0: Box, 
    a#295#7#0: Box, 
    a#295#8#0: Box, 
    a#295#9#0: Box, 
    a#295#10#0: Box, 
    a#295#11#0: Box, 
    a#295#12#0: Box, 
    a#295#13#0: Box, 
    a#295#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#295#0#0, 
      a#295#1#0, 
      a#295#2#0, 
      a#295#3#0, 
      a#295#4#0, 
      a#295#5#0, 
      a#295#6#0, 
      a#295#7#0, 
      a#295#8#0, 
      a#295#9#0, 
      a#295#10#0, 
      a#295#11#0, 
      a#295#12#0, 
      a#295#13#0, 
      a#295#14#0) } 
  BoxRank(a#295#9#0)
     < DtRank(#_System._tuple#15._#Make15(a#295#0#0, 
        a#295#1#0, 
        a#295#2#0, 
        a#295#3#0, 
        a#295#4#0, 
        a#295#5#0, 
        a#295#6#0, 
        a#295#7#0, 
        a#295#8#0, 
        a#295#9#0, 
        a#295#10#0, 
        a#295#11#0, 
        a#295#12#0, 
        a#295#13#0, 
        a#295#14#0)));

function _System.Tuple15._10(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#296#0#0: Box, 
    a#296#1#0: Box, 
    a#296#2#0: Box, 
    a#296#3#0: Box, 
    a#296#4#0: Box, 
    a#296#5#0: Box, 
    a#296#6#0: Box, 
    a#296#7#0: Box, 
    a#296#8#0: Box, 
    a#296#9#0: Box, 
    a#296#10#0: Box, 
    a#296#11#0: Box, 
    a#296#12#0: Box, 
    a#296#13#0: Box, 
    a#296#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#296#0#0, 
      a#296#1#0, 
      a#296#2#0, 
      a#296#3#0, 
      a#296#4#0, 
      a#296#5#0, 
      a#296#6#0, 
      a#296#7#0, 
      a#296#8#0, 
      a#296#9#0, 
      a#296#10#0, 
      a#296#11#0, 
      a#296#12#0, 
      a#296#13#0, 
      a#296#14#0) } 
  _System.Tuple15._10(#_System._tuple#15._#Make15(a#296#0#0, 
        a#296#1#0, 
        a#296#2#0, 
        a#296#3#0, 
        a#296#4#0, 
        a#296#5#0, 
        a#296#6#0, 
        a#296#7#0, 
        a#296#8#0, 
        a#296#9#0, 
        a#296#10#0, 
        a#296#11#0, 
        a#296#12#0, 
        a#296#13#0, 
        a#296#14#0))
     == a#296#10#0);

// Inductive rank
axiom (forall a#297#0#0: Box, 
    a#297#1#0: Box, 
    a#297#2#0: Box, 
    a#297#3#0: Box, 
    a#297#4#0: Box, 
    a#297#5#0: Box, 
    a#297#6#0: Box, 
    a#297#7#0: Box, 
    a#297#8#0: Box, 
    a#297#9#0: Box, 
    a#297#10#0: Box, 
    a#297#11#0: Box, 
    a#297#12#0: Box, 
    a#297#13#0: Box, 
    a#297#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#297#0#0, 
      a#297#1#0, 
      a#297#2#0, 
      a#297#3#0, 
      a#297#4#0, 
      a#297#5#0, 
      a#297#6#0, 
      a#297#7#0, 
      a#297#8#0, 
      a#297#9#0, 
      a#297#10#0, 
      a#297#11#0, 
      a#297#12#0, 
      a#297#13#0, 
      a#297#14#0) } 
  BoxRank(a#297#10#0)
     < DtRank(#_System._tuple#15._#Make15(a#297#0#0, 
        a#297#1#0, 
        a#297#2#0, 
        a#297#3#0, 
        a#297#4#0, 
        a#297#5#0, 
        a#297#6#0, 
        a#297#7#0, 
        a#297#8#0, 
        a#297#9#0, 
        a#297#10#0, 
        a#297#11#0, 
        a#297#12#0, 
        a#297#13#0, 
        a#297#14#0)));

function _System.Tuple15._11(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#298#0#0: Box, 
    a#298#1#0: Box, 
    a#298#2#0: Box, 
    a#298#3#0: Box, 
    a#298#4#0: Box, 
    a#298#5#0: Box, 
    a#298#6#0: Box, 
    a#298#7#0: Box, 
    a#298#8#0: Box, 
    a#298#9#0: Box, 
    a#298#10#0: Box, 
    a#298#11#0: Box, 
    a#298#12#0: Box, 
    a#298#13#0: Box, 
    a#298#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#298#0#0, 
      a#298#1#0, 
      a#298#2#0, 
      a#298#3#0, 
      a#298#4#0, 
      a#298#5#0, 
      a#298#6#0, 
      a#298#7#0, 
      a#298#8#0, 
      a#298#9#0, 
      a#298#10#0, 
      a#298#11#0, 
      a#298#12#0, 
      a#298#13#0, 
      a#298#14#0) } 
  _System.Tuple15._11(#_System._tuple#15._#Make15(a#298#0#0, 
        a#298#1#0, 
        a#298#2#0, 
        a#298#3#0, 
        a#298#4#0, 
        a#298#5#0, 
        a#298#6#0, 
        a#298#7#0, 
        a#298#8#0, 
        a#298#9#0, 
        a#298#10#0, 
        a#298#11#0, 
        a#298#12#0, 
        a#298#13#0, 
        a#298#14#0))
     == a#298#11#0);

// Inductive rank
axiom (forall a#299#0#0: Box, 
    a#299#1#0: Box, 
    a#299#2#0: Box, 
    a#299#3#0: Box, 
    a#299#4#0: Box, 
    a#299#5#0: Box, 
    a#299#6#0: Box, 
    a#299#7#0: Box, 
    a#299#8#0: Box, 
    a#299#9#0: Box, 
    a#299#10#0: Box, 
    a#299#11#0: Box, 
    a#299#12#0: Box, 
    a#299#13#0: Box, 
    a#299#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#299#0#0, 
      a#299#1#0, 
      a#299#2#0, 
      a#299#3#0, 
      a#299#4#0, 
      a#299#5#0, 
      a#299#6#0, 
      a#299#7#0, 
      a#299#8#0, 
      a#299#9#0, 
      a#299#10#0, 
      a#299#11#0, 
      a#299#12#0, 
      a#299#13#0, 
      a#299#14#0) } 
  BoxRank(a#299#11#0)
     < DtRank(#_System._tuple#15._#Make15(a#299#0#0, 
        a#299#1#0, 
        a#299#2#0, 
        a#299#3#0, 
        a#299#4#0, 
        a#299#5#0, 
        a#299#6#0, 
        a#299#7#0, 
        a#299#8#0, 
        a#299#9#0, 
        a#299#10#0, 
        a#299#11#0, 
        a#299#12#0, 
        a#299#13#0, 
        a#299#14#0)));

function _System.Tuple15._12(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#300#0#0: Box, 
    a#300#1#0: Box, 
    a#300#2#0: Box, 
    a#300#3#0: Box, 
    a#300#4#0: Box, 
    a#300#5#0: Box, 
    a#300#6#0: Box, 
    a#300#7#0: Box, 
    a#300#8#0: Box, 
    a#300#9#0: Box, 
    a#300#10#0: Box, 
    a#300#11#0: Box, 
    a#300#12#0: Box, 
    a#300#13#0: Box, 
    a#300#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#300#0#0, 
      a#300#1#0, 
      a#300#2#0, 
      a#300#3#0, 
      a#300#4#0, 
      a#300#5#0, 
      a#300#6#0, 
      a#300#7#0, 
      a#300#8#0, 
      a#300#9#0, 
      a#300#10#0, 
      a#300#11#0, 
      a#300#12#0, 
      a#300#13#0, 
      a#300#14#0) } 
  _System.Tuple15._12(#_System._tuple#15._#Make15(a#300#0#0, 
        a#300#1#0, 
        a#300#2#0, 
        a#300#3#0, 
        a#300#4#0, 
        a#300#5#0, 
        a#300#6#0, 
        a#300#7#0, 
        a#300#8#0, 
        a#300#9#0, 
        a#300#10#0, 
        a#300#11#0, 
        a#300#12#0, 
        a#300#13#0, 
        a#300#14#0))
     == a#300#12#0);

// Inductive rank
axiom (forall a#301#0#0: Box, 
    a#301#1#0: Box, 
    a#301#2#0: Box, 
    a#301#3#0: Box, 
    a#301#4#0: Box, 
    a#301#5#0: Box, 
    a#301#6#0: Box, 
    a#301#7#0: Box, 
    a#301#8#0: Box, 
    a#301#9#0: Box, 
    a#301#10#0: Box, 
    a#301#11#0: Box, 
    a#301#12#0: Box, 
    a#301#13#0: Box, 
    a#301#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#301#0#0, 
      a#301#1#0, 
      a#301#2#0, 
      a#301#3#0, 
      a#301#4#0, 
      a#301#5#0, 
      a#301#6#0, 
      a#301#7#0, 
      a#301#8#0, 
      a#301#9#0, 
      a#301#10#0, 
      a#301#11#0, 
      a#301#12#0, 
      a#301#13#0, 
      a#301#14#0) } 
  BoxRank(a#301#12#0)
     < DtRank(#_System._tuple#15._#Make15(a#301#0#0, 
        a#301#1#0, 
        a#301#2#0, 
        a#301#3#0, 
        a#301#4#0, 
        a#301#5#0, 
        a#301#6#0, 
        a#301#7#0, 
        a#301#8#0, 
        a#301#9#0, 
        a#301#10#0, 
        a#301#11#0, 
        a#301#12#0, 
        a#301#13#0, 
        a#301#14#0)));

function _System.Tuple15._13(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#302#0#0: Box, 
    a#302#1#0: Box, 
    a#302#2#0: Box, 
    a#302#3#0: Box, 
    a#302#4#0: Box, 
    a#302#5#0: Box, 
    a#302#6#0: Box, 
    a#302#7#0: Box, 
    a#302#8#0: Box, 
    a#302#9#0: Box, 
    a#302#10#0: Box, 
    a#302#11#0: Box, 
    a#302#12#0: Box, 
    a#302#13#0: Box, 
    a#302#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#302#0#0, 
      a#302#1#0, 
      a#302#2#0, 
      a#302#3#0, 
      a#302#4#0, 
      a#302#5#0, 
      a#302#6#0, 
      a#302#7#0, 
      a#302#8#0, 
      a#302#9#0, 
      a#302#10#0, 
      a#302#11#0, 
      a#302#12#0, 
      a#302#13#0, 
      a#302#14#0) } 
  _System.Tuple15._13(#_System._tuple#15._#Make15(a#302#0#0, 
        a#302#1#0, 
        a#302#2#0, 
        a#302#3#0, 
        a#302#4#0, 
        a#302#5#0, 
        a#302#6#0, 
        a#302#7#0, 
        a#302#8#0, 
        a#302#9#0, 
        a#302#10#0, 
        a#302#11#0, 
        a#302#12#0, 
        a#302#13#0, 
        a#302#14#0))
     == a#302#13#0);

// Inductive rank
axiom (forall a#303#0#0: Box, 
    a#303#1#0: Box, 
    a#303#2#0: Box, 
    a#303#3#0: Box, 
    a#303#4#0: Box, 
    a#303#5#0: Box, 
    a#303#6#0: Box, 
    a#303#7#0: Box, 
    a#303#8#0: Box, 
    a#303#9#0: Box, 
    a#303#10#0: Box, 
    a#303#11#0: Box, 
    a#303#12#0: Box, 
    a#303#13#0: Box, 
    a#303#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#303#0#0, 
      a#303#1#0, 
      a#303#2#0, 
      a#303#3#0, 
      a#303#4#0, 
      a#303#5#0, 
      a#303#6#0, 
      a#303#7#0, 
      a#303#8#0, 
      a#303#9#0, 
      a#303#10#0, 
      a#303#11#0, 
      a#303#12#0, 
      a#303#13#0, 
      a#303#14#0) } 
  BoxRank(a#303#13#0)
     < DtRank(#_System._tuple#15._#Make15(a#303#0#0, 
        a#303#1#0, 
        a#303#2#0, 
        a#303#3#0, 
        a#303#4#0, 
        a#303#5#0, 
        a#303#6#0, 
        a#303#7#0, 
        a#303#8#0, 
        a#303#9#0, 
        a#303#10#0, 
        a#303#11#0, 
        a#303#12#0, 
        a#303#13#0, 
        a#303#14#0)));

function _System.Tuple15._14(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#304#0#0: Box, 
    a#304#1#0: Box, 
    a#304#2#0: Box, 
    a#304#3#0: Box, 
    a#304#4#0: Box, 
    a#304#5#0: Box, 
    a#304#6#0: Box, 
    a#304#7#0: Box, 
    a#304#8#0: Box, 
    a#304#9#0: Box, 
    a#304#10#0: Box, 
    a#304#11#0: Box, 
    a#304#12#0: Box, 
    a#304#13#0: Box, 
    a#304#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#304#0#0, 
      a#304#1#0, 
      a#304#2#0, 
      a#304#3#0, 
      a#304#4#0, 
      a#304#5#0, 
      a#304#6#0, 
      a#304#7#0, 
      a#304#8#0, 
      a#304#9#0, 
      a#304#10#0, 
      a#304#11#0, 
      a#304#12#0, 
      a#304#13#0, 
      a#304#14#0) } 
  _System.Tuple15._14(#_System._tuple#15._#Make15(a#304#0#0, 
        a#304#1#0, 
        a#304#2#0, 
        a#304#3#0, 
        a#304#4#0, 
        a#304#5#0, 
        a#304#6#0, 
        a#304#7#0, 
        a#304#8#0, 
        a#304#9#0, 
        a#304#10#0, 
        a#304#11#0, 
        a#304#12#0, 
        a#304#13#0, 
        a#304#14#0))
     == a#304#14#0);

// Inductive rank
axiom (forall a#305#0#0: Box, 
    a#305#1#0: Box, 
    a#305#2#0: Box, 
    a#305#3#0: Box, 
    a#305#4#0: Box, 
    a#305#5#0: Box, 
    a#305#6#0: Box, 
    a#305#7#0: Box, 
    a#305#8#0: Box, 
    a#305#9#0: Box, 
    a#305#10#0: Box, 
    a#305#11#0: Box, 
    a#305#12#0: Box, 
    a#305#13#0: Box, 
    a#305#14#0: Box :: 
  { #_System._tuple#15._#Make15(a#305#0#0, 
      a#305#1#0, 
      a#305#2#0, 
      a#305#3#0, 
      a#305#4#0, 
      a#305#5#0, 
      a#305#6#0, 
      a#305#7#0, 
      a#305#8#0, 
      a#305#9#0, 
      a#305#10#0, 
      a#305#11#0, 
      a#305#12#0, 
      a#305#13#0, 
      a#305#14#0) } 
  BoxRank(a#305#14#0)
     < DtRank(#_System._tuple#15._#Make15(a#305#0#0, 
        a#305#1#0, 
        a#305#2#0, 
        a#305#3#0, 
        a#305#4#0, 
        a#305#5#0, 
        a#305#6#0, 
        a#305#7#0, 
        a#305#8#0, 
        a#305#9#0, 
        a#305#10#0, 
        a#305#11#0, 
        a#305#12#0, 
        a#305#13#0, 
        a#305#14#0)));

// Depth-one case-split function
function $IsA#_System.Tuple15(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple15(d) } 
  $IsA#_System.Tuple15(d) ==> _System.Tuple15.___hMake15_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#15$T0: Ty, 
    _System._tuple#15$T1: Ty, 
    _System._tuple#15$T2: Ty, 
    _System._tuple#15$T3: Ty, 
    _System._tuple#15$T4: Ty, 
    _System._tuple#15$T5: Ty, 
    _System._tuple#15$T6: Ty, 
    _System._tuple#15$T7: Ty, 
    _System._tuple#15$T8: Ty, 
    _System._tuple#15$T9: Ty, 
    _System._tuple#15$T10: Ty, 
    _System._tuple#15$T11: Ty, 
    _System._tuple#15$T12: Ty, 
    _System._tuple#15$T13: Ty, 
    _System._tuple#15$T14: Ty, 
    d: DatatypeType :: 
  { _System.Tuple15.___hMake15_q(d), $Is(d, 
      Tclass._System.Tuple15(_System._tuple#15$T0, 
        _System._tuple#15$T1, 
        _System._tuple#15$T2, 
        _System._tuple#15$T3, 
        _System._tuple#15$T4, 
        _System._tuple#15$T5, 
        _System._tuple#15$T6, 
        _System._tuple#15$T7, 
        _System._tuple#15$T8, 
        _System._tuple#15$T9, 
        _System._tuple#15$T10, 
        _System._tuple#15$T11, 
        _System._tuple#15$T12, 
        _System._tuple#15$T13, 
        _System._tuple#15$T14)) } 
  $Is(d, 
      Tclass._System.Tuple15(_System._tuple#15$T0, 
        _System._tuple#15$T1, 
        _System._tuple#15$T2, 
        _System._tuple#15$T3, 
        _System._tuple#15$T4, 
        _System._tuple#15$T5, 
        _System._tuple#15$T6, 
        _System._tuple#15$T7, 
        _System._tuple#15$T8, 
        _System._tuple#15$T9, 
        _System._tuple#15$T10, 
        _System._tuple#15$T11, 
        _System._tuple#15$T12, 
        _System._tuple#15$T13, 
        _System._tuple#15$T14))
     ==> _System.Tuple15.___hMake15_q(d));

// Datatype extensional equality declaration
function _System.Tuple15#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#15._#Make15
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple15#Equal(a, b) } 
  _System.Tuple15#Equal(a, b)
     <==> _System.Tuple15._0(a) == _System.Tuple15._0(b)
       && _System.Tuple15._1(a) == _System.Tuple15._1(b)
       && _System.Tuple15._2(a) == _System.Tuple15._2(b)
       && _System.Tuple15._3(a) == _System.Tuple15._3(b)
       && _System.Tuple15._4(a) == _System.Tuple15._4(b)
       && _System.Tuple15._5(a) == _System.Tuple15._5(b)
       && _System.Tuple15._6(a) == _System.Tuple15._6(b)
       && _System.Tuple15._7(a) == _System.Tuple15._7(b)
       && _System.Tuple15._8(a) == _System.Tuple15._8(b)
       && _System.Tuple15._9(a) == _System.Tuple15._9(b)
       && _System.Tuple15._10(a) == _System.Tuple15._10(b)
       && _System.Tuple15._11(a) == _System.Tuple15._11(b)
       && _System.Tuple15._12(a) == _System.Tuple15._12(b)
       && _System.Tuple15._13(a) == _System.Tuple15._13(b)
       && _System.Tuple15._14(a) == _System.Tuple15._14(b));

// Datatype extensionality axiom: _System._tuple#15
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple15#Equal(a, b) } 
  _System.Tuple15#Equal(a, b) <==> a == b);

const unique class._System.Tuple15: ClassName;

// Constructor function declaration
function #_System._tuple#16._#Make16(Box, Box, Box, Box, Box, Box, Box, Box, Box, Box, Box, Box, Box, Box, Box, Box)
   : DatatypeType;

const unique ##_System._tuple#16._#Make16: DtCtorId
uses {
// Constructor identifier
axiom (forall a#306#0#0: Box, 
    a#306#1#0: Box, 
    a#306#2#0: Box, 
    a#306#3#0: Box, 
    a#306#4#0: Box, 
    a#306#5#0: Box, 
    a#306#6#0: Box, 
    a#306#7#0: Box, 
    a#306#8#0: Box, 
    a#306#9#0: Box, 
    a#306#10#0: Box, 
    a#306#11#0: Box, 
    a#306#12#0: Box, 
    a#306#13#0: Box, 
    a#306#14#0: Box, 
    a#306#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#306#0#0, 
      a#306#1#0, 
      a#306#2#0, 
      a#306#3#0, 
      a#306#4#0, 
      a#306#5#0, 
      a#306#6#0, 
      a#306#7#0, 
      a#306#8#0, 
      a#306#9#0, 
      a#306#10#0, 
      a#306#11#0, 
      a#306#12#0, 
      a#306#13#0, 
      a#306#14#0, 
      a#306#15#0) } 
  DatatypeCtorId(#_System._tuple#16._#Make16(a#306#0#0, 
        a#306#1#0, 
        a#306#2#0, 
        a#306#3#0, 
        a#306#4#0, 
        a#306#5#0, 
        a#306#6#0, 
        a#306#7#0, 
        a#306#8#0, 
        a#306#9#0, 
        a#306#10#0, 
        a#306#11#0, 
        a#306#12#0, 
        a#306#13#0, 
        a#306#14#0, 
        a#306#15#0))
     == ##_System._tuple#16._#Make16);
}

function _System.Tuple16.___hMake16_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple16.___hMake16_q(d) } 
  _System.Tuple16.___hMake16_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#16._#Make16);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple16.___hMake16_q(d) } 
  _System.Tuple16.___hMake16_q(d)
     ==> (exists a#307#0#0: Box, 
        a#307#1#0: Box, 
        a#307#2#0: Box, 
        a#307#3#0: Box, 
        a#307#4#0: Box, 
        a#307#5#0: Box, 
        a#307#6#0: Box, 
        a#307#7#0: Box, 
        a#307#8#0: Box, 
        a#307#9#0: Box, 
        a#307#10#0: Box, 
        a#307#11#0: Box, 
        a#307#12#0: Box, 
        a#307#13#0: Box, 
        a#307#14#0: Box, 
        a#307#15#0: Box :: 
      d
         == #_System._tuple#16._#Make16(a#307#0#0, 
          a#307#1#0, 
          a#307#2#0, 
          a#307#3#0, 
          a#307#4#0, 
          a#307#5#0, 
          a#307#6#0, 
          a#307#7#0, 
          a#307#8#0, 
          a#307#9#0, 
          a#307#10#0, 
          a#307#11#0, 
          a#307#12#0, 
          a#307#13#0, 
          a#307#14#0, 
          a#307#15#0)));

function Tclass._System.Tuple16(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.Tuple16: TyTag;

// Tclass._System.Tuple16 Tag
axiom (forall _System._tuple#16$T0: Ty, 
    _System._tuple#16$T1: Ty, 
    _System._tuple#16$T2: Ty, 
    _System._tuple#16$T3: Ty, 
    _System._tuple#16$T4: Ty, 
    _System._tuple#16$T5: Ty, 
    _System._tuple#16$T6: Ty, 
    _System._tuple#16$T7: Ty, 
    _System._tuple#16$T8: Ty, 
    _System._tuple#16$T9: Ty, 
    _System._tuple#16$T10: Ty, 
    _System._tuple#16$T11: Ty, 
    _System._tuple#16$T12: Ty, 
    _System._tuple#16$T13: Ty, 
    _System._tuple#16$T14: Ty, 
    _System._tuple#16$T15: Ty :: 
  { Tclass._System.Tuple16(_System._tuple#16$T0, 
      _System._tuple#16$T1, 
      _System._tuple#16$T2, 
      _System._tuple#16$T3, 
      _System._tuple#16$T4, 
      _System._tuple#16$T5, 
      _System._tuple#16$T6, 
      _System._tuple#16$T7, 
      _System._tuple#16$T8, 
      _System._tuple#16$T9, 
      _System._tuple#16$T10, 
      _System._tuple#16$T11, 
      _System._tuple#16$T12, 
      _System._tuple#16$T13, 
      _System._tuple#16$T14, 
      _System._tuple#16$T15) } 
  Tag(Tclass._System.Tuple16(_System._tuple#16$T0, 
          _System._tuple#16$T1, 
          _System._tuple#16$T2, 
          _System._tuple#16$T3, 
          _System._tuple#16$T4, 
          _System._tuple#16$T5, 
          _System._tuple#16$T6, 
          _System._tuple#16$T7, 
          _System._tuple#16$T8, 
          _System._tuple#16$T9, 
          _System._tuple#16$T10, 
          _System._tuple#16$T11, 
          _System._tuple#16$T12, 
          _System._tuple#16$T13, 
          _System._tuple#16$T14, 
          _System._tuple#16$T15))
       == Tagclass._System.Tuple16
     && TagFamily(Tclass._System.Tuple16(_System._tuple#16$T0, 
          _System._tuple#16$T1, 
          _System._tuple#16$T2, 
          _System._tuple#16$T3, 
          _System._tuple#16$T4, 
          _System._tuple#16$T5, 
          _System._tuple#16$T6, 
          _System._tuple#16$T7, 
          _System._tuple#16$T8, 
          _System._tuple#16$T9, 
          _System._tuple#16$T10, 
          _System._tuple#16$T11, 
          _System._tuple#16$T12, 
          _System._tuple#16$T13, 
          _System._tuple#16$T14, 
          _System._tuple#16$T15))
       == tytagFamily$_tuple#16);

function Tclass._System.Tuple16_0(Ty) : Ty;

// Tclass._System.Tuple16 injectivity 0
axiom (forall _System._tuple#16$T0: Ty, 
    _System._tuple#16$T1: Ty, 
    _System._tuple#16$T2: Ty, 
    _System._tuple#16$T3: Ty, 
    _System._tuple#16$T4: Ty, 
    _System._tuple#16$T5: Ty, 
    _System._tuple#16$T6: Ty, 
    _System._tuple#16$T7: Ty, 
    _System._tuple#16$T8: Ty, 
    _System._tuple#16$T9: Ty, 
    _System._tuple#16$T10: Ty, 
    _System._tuple#16$T11: Ty, 
    _System._tuple#16$T12: Ty, 
    _System._tuple#16$T13: Ty, 
    _System._tuple#16$T14: Ty, 
    _System._tuple#16$T15: Ty :: 
  { Tclass._System.Tuple16(_System._tuple#16$T0, 
      _System._tuple#16$T1, 
      _System._tuple#16$T2, 
      _System._tuple#16$T3, 
      _System._tuple#16$T4, 
      _System._tuple#16$T5, 
      _System._tuple#16$T6, 
      _System._tuple#16$T7, 
      _System._tuple#16$T8, 
      _System._tuple#16$T9, 
      _System._tuple#16$T10, 
      _System._tuple#16$T11, 
      _System._tuple#16$T12, 
      _System._tuple#16$T13, 
      _System._tuple#16$T14, 
      _System._tuple#16$T15) } 
  Tclass._System.Tuple16_0(Tclass._System.Tuple16(_System._tuple#16$T0, 
        _System._tuple#16$T1, 
        _System._tuple#16$T2, 
        _System._tuple#16$T3, 
        _System._tuple#16$T4, 
        _System._tuple#16$T5, 
        _System._tuple#16$T6, 
        _System._tuple#16$T7, 
        _System._tuple#16$T8, 
        _System._tuple#16$T9, 
        _System._tuple#16$T10, 
        _System._tuple#16$T11, 
        _System._tuple#16$T12, 
        _System._tuple#16$T13, 
        _System._tuple#16$T14, 
        _System._tuple#16$T15))
     == _System._tuple#16$T0);

function Tclass._System.Tuple16_1(Ty) : Ty;

// Tclass._System.Tuple16 injectivity 1
axiom (forall _System._tuple#16$T0: Ty, 
    _System._tuple#16$T1: Ty, 
    _System._tuple#16$T2: Ty, 
    _System._tuple#16$T3: Ty, 
    _System._tuple#16$T4: Ty, 
    _System._tuple#16$T5: Ty, 
    _System._tuple#16$T6: Ty, 
    _System._tuple#16$T7: Ty, 
    _System._tuple#16$T8: Ty, 
    _System._tuple#16$T9: Ty, 
    _System._tuple#16$T10: Ty, 
    _System._tuple#16$T11: Ty, 
    _System._tuple#16$T12: Ty, 
    _System._tuple#16$T13: Ty, 
    _System._tuple#16$T14: Ty, 
    _System._tuple#16$T15: Ty :: 
  { Tclass._System.Tuple16(_System._tuple#16$T0, 
      _System._tuple#16$T1, 
      _System._tuple#16$T2, 
      _System._tuple#16$T3, 
      _System._tuple#16$T4, 
      _System._tuple#16$T5, 
      _System._tuple#16$T6, 
      _System._tuple#16$T7, 
      _System._tuple#16$T8, 
      _System._tuple#16$T9, 
      _System._tuple#16$T10, 
      _System._tuple#16$T11, 
      _System._tuple#16$T12, 
      _System._tuple#16$T13, 
      _System._tuple#16$T14, 
      _System._tuple#16$T15) } 
  Tclass._System.Tuple16_1(Tclass._System.Tuple16(_System._tuple#16$T0, 
        _System._tuple#16$T1, 
        _System._tuple#16$T2, 
        _System._tuple#16$T3, 
        _System._tuple#16$T4, 
        _System._tuple#16$T5, 
        _System._tuple#16$T6, 
        _System._tuple#16$T7, 
        _System._tuple#16$T8, 
        _System._tuple#16$T9, 
        _System._tuple#16$T10, 
        _System._tuple#16$T11, 
        _System._tuple#16$T12, 
        _System._tuple#16$T13, 
        _System._tuple#16$T14, 
        _System._tuple#16$T15))
     == _System._tuple#16$T1);

function Tclass._System.Tuple16_2(Ty) : Ty;

// Tclass._System.Tuple16 injectivity 2
axiom (forall _System._tuple#16$T0: Ty, 
    _System._tuple#16$T1: Ty, 
    _System._tuple#16$T2: Ty, 
    _System._tuple#16$T3: Ty, 
    _System._tuple#16$T4: Ty, 
    _System._tuple#16$T5: Ty, 
    _System._tuple#16$T6: Ty, 
    _System._tuple#16$T7: Ty, 
    _System._tuple#16$T8: Ty, 
    _System._tuple#16$T9: Ty, 
    _System._tuple#16$T10: Ty, 
    _System._tuple#16$T11: Ty, 
    _System._tuple#16$T12: Ty, 
    _System._tuple#16$T13: Ty, 
    _System._tuple#16$T14: Ty, 
    _System._tuple#16$T15: Ty :: 
  { Tclass._System.Tuple16(_System._tuple#16$T0, 
      _System._tuple#16$T1, 
      _System._tuple#16$T2, 
      _System._tuple#16$T3, 
      _System._tuple#16$T4, 
      _System._tuple#16$T5, 
      _System._tuple#16$T6, 
      _System._tuple#16$T7, 
      _System._tuple#16$T8, 
      _System._tuple#16$T9, 
      _System._tuple#16$T10, 
      _System._tuple#16$T11, 
      _System._tuple#16$T12, 
      _System._tuple#16$T13, 
      _System._tuple#16$T14, 
      _System._tuple#16$T15) } 
  Tclass._System.Tuple16_2(Tclass._System.Tuple16(_System._tuple#16$T0, 
        _System._tuple#16$T1, 
        _System._tuple#16$T2, 
        _System._tuple#16$T3, 
        _System._tuple#16$T4, 
        _System._tuple#16$T5, 
        _System._tuple#16$T6, 
        _System._tuple#16$T7, 
        _System._tuple#16$T8, 
        _System._tuple#16$T9, 
        _System._tuple#16$T10, 
        _System._tuple#16$T11, 
        _System._tuple#16$T12, 
        _System._tuple#16$T13, 
        _System._tuple#16$T14, 
        _System._tuple#16$T15))
     == _System._tuple#16$T2);

function Tclass._System.Tuple16_3(Ty) : Ty;

// Tclass._System.Tuple16 injectivity 3
axiom (forall _System._tuple#16$T0: Ty, 
    _System._tuple#16$T1: Ty, 
    _System._tuple#16$T2: Ty, 
    _System._tuple#16$T3: Ty, 
    _System._tuple#16$T4: Ty, 
    _System._tuple#16$T5: Ty, 
    _System._tuple#16$T6: Ty, 
    _System._tuple#16$T7: Ty, 
    _System._tuple#16$T8: Ty, 
    _System._tuple#16$T9: Ty, 
    _System._tuple#16$T10: Ty, 
    _System._tuple#16$T11: Ty, 
    _System._tuple#16$T12: Ty, 
    _System._tuple#16$T13: Ty, 
    _System._tuple#16$T14: Ty, 
    _System._tuple#16$T15: Ty :: 
  { Tclass._System.Tuple16(_System._tuple#16$T0, 
      _System._tuple#16$T1, 
      _System._tuple#16$T2, 
      _System._tuple#16$T3, 
      _System._tuple#16$T4, 
      _System._tuple#16$T5, 
      _System._tuple#16$T6, 
      _System._tuple#16$T7, 
      _System._tuple#16$T8, 
      _System._tuple#16$T9, 
      _System._tuple#16$T10, 
      _System._tuple#16$T11, 
      _System._tuple#16$T12, 
      _System._tuple#16$T13, 
      _System._tuple#16$T14, 
      _System._tuple#16$T15) } 
  Tclass._System.Tuple16_3(Tclass._System.Tuple16(_System._tuple#16$T0, 
        _System._tuple#16$T1, 
        _System._tuple#16$T2, 
        _System._tuple#16$T3, 
        _System._tuple#16$T4, 
        _System._tuple#16$T5, 
        _System._tuple#16$T6, 
        _System._tuple#16$T7, 
        _System._tuple#16$T8, 
        _System._tuple#16$T9, 
        _System._tuple#16$T10, 
        _System._tuple#16$T11, 
        _System._tuple#16$T12, 
        _System._tuple#16$T13, 
        _System._tuple#16$T14, 
        _System._tuple#16$T15))
     == _System._tuple#16$T3);

function Tclass._System.Tuple16_4(Ty) : Ty;

// Tclass._System.Tuple16 injectivity 4
axiom (forall _System._tuple#16$T0: Ty, 
    _System._tuple#16$T1: Ty, 
    _System._tuple#16$T2: Ty, 
    _System._tuple#16$T3: Ty, 
    _System._tuple#16$T4: Ty, 
    _System._tuple#16$T5: Ty, 
    _System._tuple#16$T6: Ty, 
    _System._tuple#16$T7: Ty, 
    _System._tuple#16$T8: Ty, 
    _System._tuple#16$T9: Ty, 
    _System._tuple#16$T10: Ty, 
    _System._tuple#16$T11: Ty, 
    _System._tuple#16$T12: Ty, 
    _System._tuple#16$T13: Ty, 
    _System._tuple#16$T14: Ty, 
    _System._tuple#16$T15: Ty :: 
  { Tclass._System.Tuple16(_System._tuple#16$T0, 
      _System._tuple#16$T1, 
      _System._tuple#16$T2, 
      _System._tuple#16$T3, 
      _System._tuple#16$T4, 
      _System._tuple#16$T5, 
      _System._tuple#16$T6, 
      _System._tuple#16$T7, 
      _System._tuple#16$T8, 
      _System._tuple#16$T9, 
      _System._tuple#16$T10, 
      _System._tuple#16$T11, 
      _System._tuple#16$T12, 
      _System._tuple#16$T13, 
      _System._tuple#16$T14, 
      _System._tuple#16$T15) } 
  Tclass._System.Tuple16_4(Tclass._System.Tuple16(_System._tuple#16$T0, 
        _System._tuple#16$T1, 
        _System._tuple#16$T2, 
        _System._tuple#16$T3, 
        _System._tuple#16$T4, 
        _System._tuple#16$T5, 
        _System._tuple#16$T6, 
        _System._tuple#16$T7, 
        _System._tuple#16$T8, 
        _System._tuple#16$T9, 
        _System._tuple#16$T10, 
        _System._tuple#16$T11, 
        _System._tuple#16$T12, 
        _System._tuple#16$T13, 
        _System._tuple#16$T14, 
        _System._tuple#16$T15))
     == _System._tuple#16$T4);

function Tclass._System.Tuple16_5(Ty) : Ty;

// Tclass._System.Tuple16 injectivity 5
axiom (forall _System._tuple#16$T0: Ty, 
    _System._tuple#16$T1: Ty, 
    _System._tuple#16$T2: Ty, 
    _System._tuple#16$T3: Ty, 
    _System._tuple#16$T4: Ty, 
    _System._tuple#16$T5: Ty, 
    _System._tuple#16$T6: Ty, 
    _System._tuple#16$T7: Ty, 
    _System._tuple#16$T8: Ty, 
    _System._tuple#16$T9: Ty, 
    _System._tuple#16$T10: Ty, 
    _System._tuple#16$T11: Ty, 
    _System._tuple#16$T12: Ty, 
    _System._tuple#16$T13: Ty, 
    _System._tuple#16$T14: Ty, 
    _System._tuple#16$T15: Ty :: 
  { Tclass._System.Tuple16(_System._tuple#16$T0, 
      _System._tuple#16$T1, 
      _System._tuple#16$T2, 
      _System._tuple#16$T3, 
      _System._tuple#16$T4, 
      _System._tuple#16$T5, 
      _System._tuple#16$T6, 
      _System._tuple#16$T7, 
      _System._tuple#16$T8, 
      _System._tuple#16$T9, 
      _System._tuple#16$T10, 
      _System._tuple#16$T11, 
      _System._tuple#16$T12, 
      _System._tuple#16$T13, 
      _System._tuple#16$T14, 
      _System._tuple#16$T15) } 
  Tclass._System.Tuple16_5(Tclass._System.Tuple16(_System._tuple#16$T0, 
        _System._tuple#16$T1, 
        _System._tuple#16$T2, 
        _System._tuple#16$T3, 
        _System._tuple#16$T4, 
        _System._tuple#16$T5, 
        _System._tuple#16$T6, 
        _System._tuple#16$T7, 
        _System._tuple#16$T8, 
        _System._tuple#16$T9, 
        _System._tuple#16$T10, 
        _System._tuple#16$T11, 
        _System._tuple#16$T12, 
        _System._tuple#16$T13, 
        _System._tuple#16$T14, 
        _System._tuple#16$T15))
     == _System._tuple#16$T5);

function Tclass._System.Tuple16_6(Ty) : Ty;

// Tclass._System.Tuple16 injectivity 6
axiom (forall _System._tuple#16$T0: Ty, 
    _System._tuple#16$T1: Ty, 
    _System._tuple#16$T2: Ty, 
    _System._tuple#16$T3: Ty, 
    _System._tuple#16$T4: Ty, 
    _System._tuple#16$T5: Ty, 
    _System._tuple#16$T6: Ty, 
    _System._tuple#16$T7: Ty, 
    _System._tuple#16$T8: Ty, 
    _System._tuple#16$T9: Ty, 
    _System._tuple#16$T10: Ty, 
    _System._tuple#16$T11: Ty, 
    _System._tuple#16$T12: Ty, 
    _System._tuple#16$T13: Ty, 
    _System._tuple#16$T14: Ty, 
    _System._tuple#16$T15: Ty :: 
  { Tclass._System.Tuple16(_System._tuple#16$T0, 
      _System._tuple#16$T1, 
      _System._tuple#16$T2, 
      _System._tuple#16$T3, 
      _System._tuple#16$T4, 
      _System._tuple#16$T5, 
      _System._tuple#16$T6, 
      _System._tuple#16$T7, 
      _System._tuple#16$T8, 
      _System._tuple#16$T9, 
      _System._tuple#16$T10, 
      _System._tuple#16$T11, 
      _System._tuple#16$T12, 
      _System._tuple#16$T13, 
      _System._tuple#16$T14, 
      _System._tuple#16$T15) } 
  Tclass._System.Tuple16_6(Tclass._System.Tuple16(_System._tuple#16$T0, 
        _System._tuple#16$T1, 
        _System._tuple#16$T2, 
        _System._tuple#16$T3, 
        _System._tuple#16$T4, 
        _System._tuple#16$T5, 
        _System._tuple#16$T6, 
        _System._tuple#16$T7, 
        _System._tuple#16$T8, 
        _System._tuple#16$T9, 
        _System._tuple#16$T10, 
        _System._tuple#16$T11, 
        _System._tuple#16$T12, 
        _System._tuple#16$T13, 
        _System._tuple#16$T14, 
        _System._tuple#16$T15))
     == _System._tuple#16$T6);

function Tclass._System.Tuple16_7(Ty) : Ty;

// Tclass._System.Tuple16 injectivity 7
axiom (forall _System._tuple#16$T0: Ty, 
    _System._tuple#16$T1: Ty, 
    _System._tuple#16$T2: Ty, 
    _System._tuple#16$T3: Ty, 
    _System._tuple#16$T4: Ty, 
    _System._tuple#16$T5: Ty, 
    _System._tuple#16$T6: Ty, 
    _System._tuple#16$T7: Ty, 
    _System._tuple#16$T8: Ty, 
    _System._tuple#16$T9: Ty, 
    _System._tuple#16$T10: Ty, 
    _System._tuple#16$T11: Ty, 
    _System._tuple#16$T12: Ty, 
    _System._tuple#16$T13: Ty, 
    _System._tuple#16$T14: Ty, 
    _System._tuple#16$T15: Ty :: 
  { Tclass._System.Tuple16(_System._tuple#16$T0, 
      _System._tuple#16$T1, 
      _System._tuple#16$T2, 
      _System._tuple#16$T3, 
      _System._tuple#16$T4, 
      _System._tuple#16$T5, 
      _System._tuple#16$T6, 
      _System._tuple#16$T7, 
      _System._tuple#16$T8, 
      _System._tuple#16$T9, 
      _System._tuple#16$T10, 
      _System._tuple#16$T11, 
      _System._tuple#16$T12, 
      _System._tuple#16$T13, 
      _System._tuple#16$T14, 
      _System._tuple#16$T15) } 
  Tclass._System.Tuple16_7(Tclass._System.Tuple16(_System._tuple#16$T0, 
        _System._tuple#16$T1, 
        _System._tuple#16$T2, 
        _System._tuple#16$T3, 
        _System._tuple#16$T4, 
        _System._tuple#16$T5, 
        _System._tuple#16$T6, 
        _System._tuple#16$T7, 
        _System._tuple#16$T8, 
        _System._tuple#16$T9, 
        _System._tuple#16$T10, 
        _System._tuple#16$T11, 
        _System._tuple#16$T12, 
        _System._tuple#16$T13, 
        _System._tuple#16$T14, 
        _System._tuple#16$T15))
     == _System._tuple#16$T7);

function Tclass._System.Tuple16_8(Ty) : Ty;

// Tclass._System.Tuple16 injectivity 8
axiom (forall _System._tuple#16$T0: Ty, 
    _System._tuple#16$T1: Ty, 
    _System._tuple#16$T2: Ty, 
    _System._tuple#16$T3: Ty, 
    _System._tuple#16$T4: Ty, 
    _System._tuple#16$T5: Ty, 
    _System._tuple#16$T6: Ty, 
    _System._tuple#16$T7: Ty, 
    _System._tuple#16$T8: Ty, 
    _System._tuple#16$T9: Ty, 
    _System._tuple#16$T10: Ty, 
    _System._tuple#16$T11: Ty, 
    _System._tuple#16$T12: Ty, 
    _System._tuple#16$T13: Ty, 
    _System._tuple#16$T14: Ty, 
    _System._tuple#16$T15: Ty :: 
  { Tclass._System.Tuple16(_System._tuple#16$T0, 
      _System._tuple#16$T1, 
      _System._tuple#16$T2, 
      _System._tuple#16$T3, 
      _System._tuple#16$T4, 
      _System._tuple#16$T5, 
      _System._tuple#16$T6, 
      _System._tuple#16$T7, 
      _System._tuple#16$T8, 
      _System._tuple#16$T9, 
      _System._tuple#16$T10, 
      _System._tuple#16$T11, 
      _System._tuple#16$T12, 
      _System._tuple#16$T13, 
      _System._tuple#16$T14, 
      _System._tuple#16$T15) } 
  Tclass._System.Tuple16_8(Tclass._System.Tuple16(_System._tuple#16$T0, 
        _System._tuple#16$T1, 
        _System._tuple#16$T2, 
        _System._tuple#16$T3, 
        _System._tuple#16$T4, 
        _System._tuple#16$T5, 
        _System._tuple#16$T6, 
        _System._tuple#16$T7, 
        _System._tuple#16$T8, 
        _System._tuple#16$T9, 
        _System._tuple#16$T10, 
        _System._tuple#16$T11, 
        _System._tuple#16$T12, 
        _System._tuple#16$T13, 
        _System._tuple#16$T14, 
        _System._tuple#16$T15))
     == _System._tuple#16$T8);

function Tclass._System.Tuple16_9(Ty) : Ty;

// Tclass._System.Tuple16 injectivity 9
axiom (forall _System._tuple#16$T0: Ty, 
    _System._tuple#16$T1: Ty, 
    _System._tuple#16$T2: Ty, 
    _System._tuple#16$T3: Ty, 
    _System._tuple#16$T4: Ty, 
    _System._tuple#16$T5: Ty, 
    _System._tuple#16$T6: Ty, 
    _System._tuple#16$T7: Ty, 
    _System._tuple#16$T8: Ty, 
    _System._tuple#16$T9: Ty, 
    _System._tuple#16$T10: Ty, 
    _System._tuple#16$T11: Ty, 
    _System._tuple#16$T12: Ty, 
    _System._tuple#16$T13: Ty, 
    _System._tuple#16$T14: Ty, 
    _System._tuple#16$T15: Ty :: 
  { Tclass._System.Tuple16(_System._tuple#16$T0, 
      _System._tuple#16$T1, 
      _System._tuple#16$T2, 
      _System._tuple#16$T3, 
      _System._tuple#16$T4, 
      _System._tuple#16$T5, 
      _System._tuple#16$T6, 
      _System._tuple#16$T7, 
      _System._tuple#16$T8, 
      _System._tuple#16$T9, 
      _System._tuple#16$T10, 
      _System._tuple#16$T11, 
      _System._tuple#16$T12, 
      _System._tuple#16$T13, 
      _System._tuple#16$T14, 
      _System._tuple#16$T15) } 
  Tclass._System.Tuple16_9(Tclass._System.Tuple16(_System._tuple#16$T0, 
        _System._tuple#16$T1, 
        _System._tuple#16$T2, 
        _System._tuple#16$T3, 
        _System._tuple#16$T4, 
        _System._tuple#16$T5, 
        _System._tuple#16$T6, 
        _System._tuple#16$T7, 
        _System._tuple#16$T8, 
        _System._tuple#16$T9, 
        _System._tuple#16$T10, 
        _System._tuple#16$T11, 
        _System._tuple#16$T12, 
        _System._tuple#16$T13, 
        _System._tuple#16$T14, 
        _System._tuple#16$T15))
     == _System._tuple#16$T9);

function Tclass._System.Tuple16_10(Ty) : Ty;

// Tclass._System.Tuple16 injectivity 10
axiom (forall _System._tuple#16$T0: Ty, 
    _System._tuple#16$T1: Ty, 
    _System._tuple#16$T2: Ty, 
    _System._tuple#16$T3: Ty, 
    _System._tuple#16$T4: Ty, 
    _System._tuple#16$T5: Ty, 
    _System._tuple#16$T6: Ty, 
    _System._tuple#16$T7: Ty, 
    _System._tuple#16$T8: Ty, 
    _System._tuple#16$T9: Ty, 
    _System._tuple#16$T10: Ty, 
    _System._tuple#16$T11: Ty, 
    _System._tuple#16$T12: Ty, 
    _System._tuple#16$T13: Ty, 
    _System._tuple#16$T14: Ty, 
    _System._tuple#16$T15: Ty :: 
  { Tclass._System.Tuple16(_System._tuple#16$T0, 
      _System._tuple#16$T1, 
      _System._tuple#16$T2, 
      _System._tuple#16$T3, 
      _System._tuple#16$T4, 
      _System._tuple#16$T5, 
      _System._tuple#16$T6, 
      _System._tuple#16$T7, 
      _System._tuple#16$T8, 
      _System._tuple#16$T9, 
      _System._tuple#16$T10, 
      _System._tuple#16$T11, 
      _System._tuple#16$T12, 
      _System._tuple#16$T13, 
      _System._tuple#16$T14, 
      _System._tuple#16$T15) } 
  Tclass._System.Tuple16_10(Tclass._System.Tuple16(_System._tuple#16$T0, 
        _System._tuple#16$T1, 
        _System._tuple#16$T2, 
        _System._tuple#16$T3, 
        _System._tuple#16$T4, 
        _System._tuple#16$T5, 
        _System._tuple#16$T6, 
        _System._tuple#16$T7, 
        _System._tuple#16$T8, 
        _System._tuple#16$T9, 
        _System._tuple#16$T10, 
        _System._tuple#16$T11, 
        _System._tuple#16$T12, 
        _System._tuple#16$T13, 
        _System._tuple#16$T14, 
        _System._tuple#16$T15))
     == _System._tuple#16$T10);

function Tclass._System.Tuple16_11(Ty) : Ty;

// Tclass._System.Tuple16 injectivity 11
axiom (forall _System._tuple#16$T0: Ty, 
    _System._tuple#16$T1: Ty, 
    _System._tuple#16$T2: Ty, 
    _System._tuple#16$T3: Ty, 
    _System._tuple#16$T4: Ty, 
    _System._tuple#16$T5: Ty, 
    _System._tuple#16$T6: Ty, 
    _System._tuple#16$T7: Ty, 
    _System._tuple#16$T8: Ty, 
    _System._tuple#16$T9: Ty, 
    _System._tuple#16$T10: Ty, 
    _System._tuple#16$T11: Ty, 
    _System._tuple#16$T12: Ty, 
    _System._tuple#16$T13: Ty, 
    _System._tuple#16$T14: Ty, 
    _System._tuple#16$T15: Ty :: 
  { Tclass._System.Tuple16(_System._tuple#16$T0, 
      _System._tuple#16$T1, 
      _System._tuple#16$T2, 
      _System._tuple#16$T3, 
      _System._tuple#16$T4, 
      _System._tuple#16$T5, 
      _System._tuple#16$T6, 
      _System._tuple#16$T7, 
      _System._tuple#16$T8, 
      _System._tuple#16$T9, 
      _System._tuple#16$T10, 
      _System._tuple#16$T11, 
      _System._tuple#16$T12, 
      _System._tuple#16$T13, 
      _System._tuple#16$T14, 
      _System._tuple#16$T15) } 
  Tclass._System.Tuple16_11(Tclass._System.Tuple16(_System._tuple#16$T0, 
        _System._tuple#16$T1, 
        _System._tuple#16$T2, 
        _System._tuple#16$T3, 
        _System._tuple#16$T4, 
        _System._tuple#16$T5, 
        _System._tuple#16$T6, 
        _System._tuple#16$T7, 
        _System._tuple#16$T8, 
        _System._tuple#16$T9, 
        _System._tuple#16$T10, 
        _System._tuple#16$T11, 
        _System._tuple#16$T12, 
        _System._tuple#16$T13, 
        _System._tuple#16$T14, 
        _System._tuple#16$T15))
     == _System._tuple#16$T11);

function Tclass._System.Tuple16_12(Ty) : Ty;

// Tclass._System.Tuple16 injectivity 12
axiom (forall _System._tuple#16$T0: Ty, 
    _System._tuple#16$T1: Ty, 
    _System._tuple#16$T2: Ty, 
    _System._tuple#16$T3: Ty, 
    _System._tuple#16$T4: Ty, 
    _System._tuple#16$T5: Ty, 
    _System._tuple#16$T6: Ty, 
    _System._tuple#16$T7: Ty, 
    _System._tuple#16$T8: Ty, 
    _System._tuple#16$T9: Ty, 
    _System._tuple#16$T10: Ty, 
    _System._tuple#16$T11: Ty, 
    _System._tuple#16$T12: Ty, 
    _System._tuple#16$T13: Ty, 
    _System._tuple#16$T14: Ty, 
    _System._tuple#16$T15: Ty :: 
  { Tclass._System.Tuple16(_System._tuple#16$T0, 
      _System._tuple#16$T1, 
      _System._tuple#16$T2, 
      _System._tuple#16$T3, 
      _System._tuple#16$T4, 
      _System._tuple#16$T5, 
      _System._tuple#16$T6, 
      _System._tuple#16$T7, 
      _System._tuple#16$T8, 
      _System._tuple#16$T9, 
      _System._tuple#16$T10, 
      _System._tuple#16$T11, 
      _System._tuple#16$T12, 
      _System._tuple#16$T13, 
      _System._tuple#16$T14, 
      _System._tuple#16$T15) } 
  Tclass._System.Tuple16_12(Tclass._System.Tuple16(_System._tuple#16$T0, 
        _System._tuple#16$T1, 
        _System._tuple#16$T2, 
        _System._tuple#16$T3, 
        _System._tuple#16$T4, 
        _System._tuple#16$T5, 
        _System._tuple#16$T6, 
        _System._tuple#16$T7, 
        _System._tuple#16$T8, 
        _System._tuple#16$T9, 
        _System._tuple#16$T10, 
        _System._tuple#16$T11, 
        _System._tuple#16$T12, 
        _System._tuple#16$T13, 
        _System._tuple#16$T14, 
        _System._tuple#16$T15))
     == _System._tuple#16$T12);

function Tclass._System.Tuple16_13(Ty) : Ty;

// Tclass._System.Tuple16 injectivity 13
axiom (forall _System._tuple#16$T0: Ty, 
    _System._tuple#16$T1: Ty, 
    _System._tuple#16$T2: Ty, 
    _System._tuple#16$T3: Ty, 
    _System._tuple#16$T4: Ty, 
    _System._tuple#16$T5: Ty, 
    _System._tuple#16$T6: Ty, 
    _System._tuple#16$T7: Ty, 
    _System._tuple#16$T8: Ty, 
    _System._tuple#16$T9: Ty, 
    _System._tuple#16$T10: Ty, 
    _System._tuple#16$T11: Ty, 
    _System._tuple#16$T12: Ty, 
    _System._tuple#16$T13: Ty, 
    _System._tuple#16$T14: Ty, 
    _System._tuple#16$T15: Ty :: 
  { Tclass._System.Tuple16(_System._tuple#16$T0, 
      _System._tuple#16$T1, 
      _System._tuple#16$T2, 
      _System._tuple#16$T3, 
      _System._tuple#16$T4, 
      _System._tuple#16$T5, 
      _System._tuple#16$T6, 
      _System._tuple#16$T7, 
      _System._tuple#16$T8, 
      _System._tuple#16$T9, 
      _System._tuple#16$T10, 
      _System._tuple#16$T11, 
      _System._tuple#16$T12, 
      _System._tuple#16$T13, 
      _System._tuple#16$T14, 
      _System._tuple#16$T15) } 
  Tclass._System.Tuple16_13(Tclass._System.Tuple16(_System._tuple#16$T0, 
        _System._tuple#16$T1, 
        _System._tuple#16$T2, 
        _System._tuple#16$T3, 
        _System._tuple#16$T4, 
        _System._tuple#16$T5, 
        _System._tuple#16$T6, 
        _System._tuple#16$T7, 
        _System._tuple#16$T8, 
        _System._tuple#16$T9, 
        _System._tuple#16$T10, 
        _System._tuple#16$T11, 
        _System._tuple#16$T12, 
        _System._tuple#16$T13, 
        _System._tuple#16$T14, 
        _System._tuple#16$T15))
     == _System._tuple#16$T13);

function Tclass._System.Tuple16_14(Ty) : Ty;

// Tclass._System.Tuple16 injectivity 14
axiom (forall _System._tuple#16$T0: Ty, 
    _System._tuple#16$T1: Ty, 
    _System._tuple#16$T2: Ty, 
    _System._tuple#16$T3: Ty, 
    _System._tuple#16$T4: Ty, 
    _System._tuple#16$T5: Ty, 
    _System._tuple#16$T6: Ty, 
    _System._tuple#16$T7: Ty, 
    _System._tuple#16$T8: Ty, 
    _System._tuple#16$T9: Ty, 
    _System._tuple#16$T10: Ty, 
    _System._tuple#16$T11: Ty, 
    _System._tuple#16$T12: Ty, 
    _System._tuple#16$T13: Ty, 
    _System._tuple#16$T14: Ty, 
    _System._tuple#16$T15: Ty :: 
  { Tclass._System.Tuple16(_System._tuple#16$T0, 
      _System._tuple#16$T1, 
      _System._tuple#16$T2, 
      _System._tuple#16$T3, 
      _System._tuple#16$T4, 
      _System._tuple#16$T5, 
      _System._tuple#16$T6, 
      _System._tuple#16$T7, 
      _System._tuple#16$T8, 
      _System._tuple#16$T9, 
      _System._tuple#16$T10, 
      _System._tuple#16$T11, 
      _System._tuple#16$T12, 
      _System._tuple#16$T13, 
      _System._tuple#16$T14, 
      _System._tuple#16$T15) } 
  Tclass._System.Tuple16_14(Tclass._System.Tuple16(_System._tuple#16$T0, 
        _System._tuple#16$T1, 
        _System._tuple#16$T2, 
        _System._tuple#16$T3, 
        _System._tuple#16$T4, 
        _System._tuple#16$T5, 
        _System._tuple#16$T6, 
        _System._tuple#16$T7, 
        _System._tuple#16$T8, 
        _System._tuple#16$T9, 
        _System._tuple#16$T10, 
        _System._tuple#16$T11, 
        _System._tuple#16$T12, 
        _System._tuple#16$T13, 
        _System._tuple#16$T14, 
        _System._tuple#16$T15))
     == _System._tuple#16$T14);

function Tclass._System.Tuple16_15(Ty) : Ty;

// Tclass._System.Tuple16 injectivity 15
axiom (forall _System._tuple#16$T0: Ty, 
    _System._tuple#16$T1: Ty, 
    _System._tuple#16$T2: Ty, 
    _System._tuple#16$T3: Ty, 
    _System._tuple#16$T4: Ty, 
    _System._tuple#16$T5: Ty, 
    _System._tuple#16$T6: Ty, 
    _System._tuple#16$T7: Ty, 
    _System._tuple#16$T8: Ty, 
    _System._tuple#16$T9: Ty, 
    _System._tuple#16$T10: Ty, 
    _System._tuple#16$T11: Ty, 
    _System._tuple#16$T12: Ty, 
    _System._tuple#16$T13: Ty, 
    _System._tuple#16$T14: Ty, 
    _System._tuple#16$T15: Ty :: 
  { Tclass._System.Tuple16(_System._tuple#16$T0, 
      _System._tuple#16$T1, 
      _System._tuple#16$T2, 
      _System._tuple#16$T3, 
      _System._tuple#16$T4, 
      _System._tuple#16$T5, 
      _System._tuple#16$T6, 
      _System._tuple#16$T7, 
      _System._tuple#16$T8, 
      _System._tuple#16$T9, 
      _System._tuple#16$T10, 
      _System._tuple#16$T11, 
      _System._tuple#16$T12, 
      _System._tuple#16$T13, 
      _System._tuple#16$T14, 
      _System._tuple#16$T15) } 
  Tclass._System.Tuple16_15(Tclass._System.Tuple16(_System._tuple#16$T0, 
        _System._tuple#16$T1, 
        _System._tuple#16$T2, 
        _System._tuple#16$T3, 
        _System._tuple#16$T4, 
        _System._tuple#16$T5, 
        _System._tuple#16$T6, 
        _System._tuple#16$T7, 
        _System._tuple#16$T8, 
        _System._tuple#16$T9, 
        _System._tuple#16$T10, 
        _System._tuple#16$T11, 
        _System._tuple#16$T12, 
        _System._tuple#16$T13, 
        _System._tuple#16$T14, 
        _System._tuple#16$T15))
     == _System._tuple#16$T15);

// Box/unbox axiom for Tclass._System.Tuple16
axiom (forall _System._tuple#16$T0: Ty, 
    _System._tuple#16$T1: Ty, 
    _System._tuple#16$T2: Ty, 
    _System._tuple#16$T3: Ty, 
    _System._tuple#16$T4: Ty, 
    _System._tuple#16$T5: Ty, 
    _System._tuple#16$T6: Ty, 
    _System._tuple#16$T7: Ty, 
    _System._tuple#16$T8: Ty, 
    _System._tuple#16$T9: Ty, 
    _System._tuple#16$T10: Ty, 
    _System._tuple#16$T11: Ty, 
    _System._tuple#16$T12: Ty, 
    _System._tuple#16$T13: Ty, 
    _System._tuple#16$T14: Ty, 
    _System._tuple#16$T15: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.Tuple16(_System._tuple#16$T0, 
        _System._tuple#16$T1, 
        _System._tuple#16$T2, 
        _System._tuple#16$T3, 
        _System._tuple#16$T4, 
        _System._tuple#16$T5, 
        _System._tuple#16$T6, 
        _System._tuple#16$T7, 
        _System._tuple#16$T8, 
        _System._tuple#16$T9, 
        _System._tuple#16$T10, 
        _System._tuple#16$T11, 
        _System._tuple#16$T12, 
        _System._tuple#16$T13, 
        _System._tuple#16$T14, 
        _System._tuple#16$T15)) } 
  $IsBox(bx, 
      Tclass._System.Tuple16(_System._tuple#16$T0, 
        _System._tuple#16$T1, 
        _System._tuple#16$T2, 
        _System._tuple#16$T3, 
        _System._tuple#16$T4, 
        _System._tuple#16$T5, 
        _System._tuple#16$T6, 
        _System._tuple#16$T7, 
        _System._tuple#16$T8, 
        _System._tuple#16$T9, 
        _System._tuple#16$T10, 
        _System._tuple#16$T11, 
        _System._tuple#16$T12, 
        _System._tuple#16$T13, 
        _System._tuple#16$T14, 
        _System._tuple#16$T15))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple16(_System._tuple#16$T0, 
          _System._tuple#16$T1, 
          _System._tuple#16$T2, 
          _System._tuple#16$T3, 
          _System._tuple#16$T4, 
          _System._tuple#16$T5, 
          _System._tuple#16$T6, 
          _System._tuple#16$T7, 
          _System._tuple#16$T8, 
          _System._tuple#16$T9, 
          _System._tuple#16$T10, 
          _System._tuple#16$T11, 
          _System._tuple#16$T12, 
          _System._tuple#16$T13, 
          _System._tuple#16$T14, 
          _System._tuple#16$T15)));

// Constructor $Is
axiom (forall _System._tuple#16$T0: Ty, 
    _System._tuple#16$T1: Ty, 
    _System._tuple#16$T2: Ty, 
    _System._tuple#16$T3: Ty, 
    _System._tuple#16$T4: Ty, 
    _System._tuple#16$T5: Ty, 
    _System._tuple#16$T6: Ty, 
    _System._tuple#16$T7: Ty, 
    _System._tuple#16$T8: Ty, 
    _System._tuple#16$T9: Ty, 
    _System._tuple#16$T10: Ty, 
    _System._tuple#16$T11: Ty, 
    _System._tuple#16$T12: Ty, 
    _System._tuple#16$T13: Ty, 
    _System._tuple#16$T14: Ty, 
    _System._tuple#16$T15: Ty, 
    a#308#0#0: Box, 
    a#308#1#0: Box, 
    a#308#2#0: Box, 
    a#308#3#0: Box, 
    a#308#4#0: Box, 
    a#308#5#0: Box, 
    a#308#6#0: Box, 
    a#308#7#0: Box, 
    a#308#8#0: Box, 
    a#308#9#0: Box, 
    a#308#10#0: Box, 
    a#308#11#0: Box, 
    a#308#12#0: Box, 
    a#308#13#0: Box, 
    a#308#14#0: Box, 
    a#308#15#0: Box :: 
  { $Is(#_System._tuple#16._#Make16(a#308#0#0, 
        a#308#1#0, 
        a#308#2#0, 
        a#308#3#0, 
        a#308#4#0, 
        a#308#5#0, 
        a#308#6#0, 
        a#308#7#0, 
        a#308#8#0, 
        a#308#9#0, 
        a#308#10#0, 
        a#308#11#0, 
        a#308#12#0, 
        a#308#13#0, 
        a#308#14#0, 
        a#308#15#0), 
      Tclass._System.Tuple16(_System._tuple#16$T0, 
        _System._tuple#16$T1, 
        _System._tuple#16$T2, 
        _System._tuple#16$T3, 
        _System._tuple#16$T4, 
        _System._tuple#16$T5, 
        _System._tuple#16$T6, 
        _System._tuple#16$T7, 
        _System._tuple#16$T8, 
        _System._tuple#16$T9, 
        _System._tuple#16$T10, 
        _System._tuple#16$T11, 
        _System._tuple#16$T12, 
        _System._tuple#16$T13, 
        _System._tuple#16$T14, 
        _System._tuple#16$T15)) } 
  $Is(#_System._tuple#16._#Make16(a#308#0#0, 
        a#308#1#0, 
        a#308#2#0, 
        a#308#3#0, 
        a#308#4#0, 
        a#308#5#0, 
        a#308#6#0, 
        a#308#7#0, 
        a#308#8#0, 
        a#308#9#0, 
        a#308#10#0, 
        a#308#11#0, 
        a#308#12#0, 
        a#308#13#0, 
        a#308#14#0, 
        a#308#15#0), 
      Tclass._System.Tuple16(_System._tuple#16$T0, 
        _System._tuple#16$T1, 
        _System._tuple#16$T2, 
        _System._tuple#16$T3, 
        _System._tuple#16$T4, 
        _System._tuple#16$T5, 
        _System._tuple#16$T6, 
        _System._tuple#16$T7, 
        _System._tuple#16$T8, 
        _System._tuple#16$T9, 
        _System._tuple#16$T10, 
        _System._tuple#16$T11, 
        _System._tuple#16$T12, 
        _System._tuple#16$T13, 
        _System._tuple#16$T14, 
        _System._tuple#16$T15))
     <==> $IsBox(a#308#0#0, _System._tuple#16$T0)
       && $IsBox(a#308#1#0, _System._tuple#16$T1)
       && $IsBox(a#308#2#0, _System._tuple#16$T2)
       && $IsBox(a#308#3#0, _System._tuple#16$T3)
       && $IsBox(a#308#4#0, _System._tuple#16$T4)
       && $IsBox(a#308#5#0, _System._tuple#16$T5)
       && $IsBox(a#308#6#0, _System._tuple#16$T6)
       && $IsBox(a#308#7#0, _System._tuple#16$T7)
       && $IsBox(a#308#8#0, _System._tuple#16$T8)
       && $IsBox(a#308#9#0, _System._tuple#16$T9)
       && $IsBox(a#308#10#0, _System._tuple#16$T10)
       && $IsBox(a#308#11#0, _System._tuple#16$T11)
       && $IsBox(a#308#12#0, _System._tuple#16$T12)
       && $IsBox(a#308#13#0, _System._tuple#16$T13)
       && $IsBox(a#308#14#0, _System._tuple#16$T14)
       && $IsBox(a#308#15#0, _System._tuple#16$T15));

// Constructor $IsAlloc
axiom (forall _System._tuple#16$T0: Ty, 
    _System._tuple#16$T1: Ty, 
    _System._tuple#16$T2: Ty, 
    _System._tuple#16$T3: Ty, 
    _System._tuple#16$T4: Ty, 
    _System._tuple#16$T5: Ty, 
    _System._tuple#16$T6: Ty, 
    _System._tuple#16$T7: Ty, 
    _System._tuple#16$T8: Ty, 
    _System._tuple#16$T9: Ty, 
    _System._tuple#16$T10: Ty, 
    _System._tuple#16$T11: Ty, 
    _System._tuple#16$T12: Ty, 
    _System._tuple#16$T13: Ty, 
    _System._tuple#16$T14: Ty, 
    _System._tuple#16$T15: Ty, 
    a#308#0#0: Box, 
    a#308#1#0: Box, 
    a#308#2#0: Box, 
    a#308#3#0: Box, 
    a#308#4#0: Box, 
    a#308#5#0: Box, 
    a#308#6#0: Box, 
    a#308#7#0: Box, 
    a#308#8#0: Box, 
    a#308#9#0: Box, 
    a#308#10#0: Box, 
    a#308#11#0: Box, 
    a#308#12#0: Box, 
    a#308#13#0: Box, 
    a#308#14#0: Box, 
    a#308#15#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#16._#Make16(a#308#0#0, 
        a#308#1#0, 
        a#308#2#0, 
        a#308#3#0, 
        a#308#4#0, 
        a#308#5#0, 
        a#308#6#0, 
        a#308#7#0, 
        a#308#8#0, 
        a#308#9#0, 
        a#308#10#0, 
        a#308#11#0, 
        a#308#12#0, 
        a#308#13#0, 
        a#308#14#0, 
        a#308#15#0), 
      Tclass._System.Tuple16(_System._tuple#16$T0, 
        _System._tuple#16$T1, 
        _System._tuple#16$T2, 
        _System._tuple#16$T3, 
        _System._tuple#16$T4, 
        _System._tuple#16$T5, 
        _System._tuple#16$T6, 
        _System._tuple#16$T7, 
        _System._tuple#16$T8, 
        _System._tuple#16$T9, 
        _System._tuple#16$T10, 
        _System._tuple#16$T11, 
        _System._tuple#16$T12, 
        _System._tuple#16$T13, 
        _System._tuple#16$T14, 
        _System._tuple#16$T15), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#16._#Make16(a#308#0#0, 
          a#308#1#0, 
          a#308#2#0, 
          a#308#3#0, 
          a#308#4#0, 
          a#308#5#0, 
          a#308#6#0, 
          a#308#7#0, 
          a#308#8#0, 
          a#308#9#0, 
          a#308#10#0, 
          a#308#11#0, 
          a#308#12#0, 
          a#308#13#0, 
          a#308#14#0, 
          a#308#15#0), 
        Tclass._System.Tuple16(_System._tuple#16$T0, 
          _System._tuple#16$T1, 
          _System._tuple#16$T2, 
          _System._tuple#16$T3, 
          _System._tuple#16$T4, 
          _System._tuple#16$T5, 
          _System._tuple#16$T6, 
          _System._tuple#16$T7, 
          _System._tuple#16$T8, 
          _System._tuple#16$T9, 
          _System._tuple#16$T10, 
          _System._tuple#16$T11, 
          _System._tuple#16$T12, 
          _System._tuple#16$T13, 
          _System._tuple#16$T14, 
          _System._tuple#16$T15), 
        $h)
       <==> $IsAllocBox(a#308#0#0, _System._tuple#16$T0, $h)
         && $IsAllocBox(a#308#1#0, _System._tuple#16$T1, $h)
         && $IsAllocBox(a#308#2#0, _System._tuple#16$T2, $h)
         && $IsAllocBox(a#308#3#0, _System._tuple#16$T3, $h)
         && $IsAllocBox(a#308#4#0, _System._tuple#16$T4, $h)
         && $IsAllocBox(a#308#5#0, _System._tuple#16$T5, $h)
         && $IsAllocBox(a#308#6#0, _System._tuple#16$T6, $h)
         && $IsAllocBox(a#308#7#0, _System._tuple#16$T7, $h)
         && $IsAllocBox(a#308#8#0, _System._tuple#16$T8, $h)
         && $IsAllocBox(a#308#9#0, _System._tuple#16$T9, $h)
         && $IsAllocBox(a#308#10#0, _System._tuple#16$T10, $h)
         && $IsAllocBox(a#308#11#0, _System._tuple#16$T11, $h)
         && $IsAllocBox(a#308#12#0, _System._tuple#16$T12, $h)
         && $IsAllocBox(a#308#13#0, _System._tuple#16$T13, $h)
         && $IsAllocBox(a#308#14#0, _System._tuple#16$T14, $h)
         && $IsAllocBox(a#308#15#0, _System._tuple#16$T15, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#16$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple16._0(d), _System._tuple#16$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple16.___hMake16_q(d)
       && (exists _System._tuple#16$T1: Ty, 
          _System._tuple#16$T2: Ty, 
          _System._tuple#16$T3: Ty, 
          _System._tuple#16$T4: Ty, 
          _System._tuple#16$T5: Ty, 
          _System._tuple#16$T6: Ty, 
          _System._tuple#16$T7: Ty, 
          _System._tuple#16$T8: Ty, 
          _System._tuple#16$T9: Ty, 
          _System._tuple#16$T10: Ty, 
          _System._tuple#16$T11: Ty, 
          _System._tuple#16$T12: Ty, 
          _System._tuple#16$T13: Ty, 
          _System._tuple#16$T14: Ty, 
          _System._tuple#16$T15: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple16(_System._tuple#16$T0, 
              _System._tuple#16$T1, 
              _System._tuple#16$T2, 
              _System._tuple#16$T3, 
              _System._tuple#16$T4, 
              _System._tuple#16$T5, 
              _System._tuple#16$T6, 
              _System._tuple#16$T7, 
              _System._tuple#16$T8, 
              _System._tuple#16$T9, 
              _System._tuple#16$T10, 
              _System._tuple#16$T11, 
              _System._tuple#16$T12, 
              _System._tuple#16$T13, 
              _System._tuple#16$T14, 
              _System._tuple#16$T15), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple16(_System._tuple#16$T0, 
            _System._tuple#16$T1, 
            _System._tuple#16$T2, 
            _System._tuple#16$T3, 
            _System._tuple#16$T4, 
            _System._tuple#16$T5, 
            _System._tuple#16$T6, 
            _System._tuple#16$T7, 
            _System._tuple#16$T8, 
            _System._tuple#16$T9, 
            _System._tuple#16$T10, 
            _System._tuple#16$T11, 
            _System._tuple#16$T12, 
            _System._tuple#16$T13, 
            _System._tuple#16$T14, 
            _System._tuple#16$T15), 
          $h))
     ==> $IsAllocBox(_System.Tuple16._0(d), _System._tuple#16$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#16$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple16._1(d), _System._tuple#16$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple16.___hMake16_q(d)
       && (exists _System._tuple#16$T0: Ty, 
          _System._tuple#16$T2: Ty, 
          _System._tuple#16$T3: Ty, 
          _System._tuple#16$T4: Ty, 
          _System._tuple#16$T5: Ty, 
          _System._tuple#16$T6: Ty, 
          _System._tuple#16$T7: Ty, 
          _System._tuple#16$T8: Ty, 
          _System._tuple#16$T9: Ty, 
          _System._tuple#16$T10: Ty, 
          _System._tuple#16$T11: Ty, 
          _System._tuple#16$T12: Ty, 
          _System._tuple#16$T13: Ty, 
          _System._tuple#16$T14: Ty, 
          _System._tuple#16$T15: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple16(_System._tuple#16$T0, 
              _System._tuple#16$T1, 
              _System._tuple#16$T2, 
              _System._tuple#16$T3, 
              _System._tuple#16$T4, 
              _System._tuple#16$T5, 
              _System._tuple#16$T6, 
              _System._tuple#16$T7, 
              _System._tuple#16$T8, 
              _System._tuple#16$T9, 
              _System._tuple#16$T10, 
              _System._tuple#16$T11, 
              _System._tuple#16$T12, 
              _System._tuple#16$T13, 
              _System._tuple#16$T14, 
              _System._tuple#16$T15), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple16(_System._tuple#16$T0, 
            _System._tuple#16$T1, 
            _System._tuple#16$T2, 
            _System._tuple#16$T3, 
            _System._tuple#16$T4, 
            _System._tuple#16$T5, 
            _System._tuple#16$T6, 
            _System._tuple#16$T7, 
            _System._tuple#16$T8, 
            _System._tuple#16$T9, 
            _System._tuple#16$T10, 
            _System._tuple#16$T11, 
            _System._tuple#16$T12, 
            _System._tuple#16$T13, 
            _System._tuple#16$T14, 
            _System._tuple#16$T15), 
          $h))
     ==> $IsAllocBox(_System.Tuple16._1(d), _System._tuple#16$T1, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#16$T2: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple16._2(d), _System._tuple#16$T2, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple16.___hMake16_q(d)
       && (exists _System._tuple#16$T0: Ty, 
          _System._tuple#16$T1: Ty, 
          _System._tuple#16$T3: Ty, 
          _System._tuple#16$T4: Ty, 
          _System._tuple#16$T5: Ty, 
          _System._tuple#16$T6: Ty, 
          _System._tuple#16$T7: Ty, 
          _System._tuple#16$T8: Ty, 
          _System._tuple#16$T9: Ty, 
          _System._tuple#16$T10: Ty, 
          _System._tuple#16$T11: Ty, 
          _System._tuple#16$T12: Ty, 
          _System._tuple#16$T13: Ty, 
          _System._tuple#16$T14: Ty, 
          _System._tuple#16$T15: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple16(_System._tuple#16$T0, 
              _System._tuple#16$T1, 
              _System._tuple#16$T2, 
              _System._tuple#16$T3, 
              _System._tuple#16$T4, 
              _System._tuple#16$T5, 
              _System._tuple#16$T6, 
              _System._tuple#16$T7, 
              _System._tuple#16$T8, 
              _System._tuple#16$T9, 
              _System._tuple#16$T10, 
              _System._tuple#16$T11, 
              _System._tuple#16$T12, 
              _System._tuple#16$T13, 
              _System._tuple#16$T14, 
              _System._tuple#16$T15), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple16(_System._tuple#16$T0, 
            _System._tuple#16$T1, 
            _System._tuple#16$T2, 
            _System._tuple#16$T3, 
            _System._tuple#16$T4, 
            _System._tuple#16$T5, 
            _System._tuple#16$T6, 
            _System._tuple#16$T7, 
            _System._tuple#16$T8, 
            _System._tuple#16$T9, 
            _System._tuple#16$T10, 
            _System._tuple#16$T11, 
            _System._tuple#16$T12, 
            _System._tuple#16$T13, 
            _System._tuple#16$T14, 
            _System._tuple#16$T15), 
          $h))
     ==> $IsAllocBox(_System.Tuple16._2(d), _System._tuple#16$T2, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#16$T3: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple16._3(d), _System._tuple#16$T3, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple16.___hMake16_q(d)
       && (exists _System._tuple#16$T0: Ty, 
          _System._tuple#16$T1: Ty, 
          _System._tuple#16$T2: Ty, 
          _System._tuple#16$T4: Ty, 
          _System._tuple#16$T5: Ty, 
          _System._tuple#16$T6: Ty, 
          _System._tuple#16$T7: Ty, 
          _System._tuple#16$T8: Ty, 
          _System._tuple#16$T9: Ty, 
          _System._tuple#16$T10: Ty, 
          _System._tuple#16$T11: Ty, 
          _System._tuple#16$T12: Ty, 
          _System._tuple#16$T13: Ty, 
          _System._tuple#16$T14: Ty, 
          _System._tuple#16$T15: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple16(_System._tuple#16$T0, 
              _System._tuple#16$T1, 
              _System._tuple#16$T2, 
              _System._tuple#16$T3, 
              _System._tuple#16$T4, 
              _System._tuple#16$T5, 
              _System._tuple#16$T6, 
              _System._tuple#16$T7, 
              _System._tuple#16$T8, 
              _System._tuple#16$T9, 
              _System._tuple#16$T10, 
              _System._tuple#16$T11, 
              _System._tuple#16$T12, 
              _System._tuple#16$T13, 
              _System._tuple#16$T14, 
              _System._tuple#16$T15), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple16(_System._tuple#16$T0, 
            _System._tuple#16$T1, 
            _System._tuple#16$T2, 
            _System._tuple#16$T3, 
            _System._tuple#16$T4, 
            _System._tuple#16$T5, 
            _System._tuple#16$T6, 
            _System._tuple#16$T7, 
            _System._tuple#16$T8, 
            _System._tuple#16$T9, 
            _System._tuple#16$T10, 
            _System._tuple#16$T11, 
            _System._tuple#16$T12, 
            _System._tuple#16$T13, 
            _System._tuple#16$T14, 
            _System._tuple#16$T15), 
          $h))
     ==> $IsAllocBox(_System.Tuple16._3(d), _System._tuple#16$T3, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#16$T4: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple16._4(d), _System._tuple#16$T4, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple16.___hMake16_q(d)
       && (exists _System._tuple#16$T0: Ty, 
          _System._tuple#16$T1: Ty, 
          _System._tuple#16$T2: Ty, 
          _System._tuple#16$T3: Ty, 
          _System._tuple#16$T5: Ty, 
          _System._tuple#16$T6: Ty, 
          _System._tuple#16$T7: Ty, 
          _System._tuple#16$T8: Ty, 
          _System._tuple#16$T9: Ty, 
          _System._tuple#16$T10: Ty, 
          _System._tuple#16$T11: Ty, 
          _System._tuple#16$T12: Ty, 
          _System._tuple#16$T13: Ty, 
          _System._tuple#16$T14: Ty, 
          _System._tuple#16$T15: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple16(_System._tuple#16$T0, 
              _System._tuple#16$T1, 
              _System._tuple#16$T2, 
              _System._tuple#16$T3, 
              _System._tuple#16$T4, 
              _System._tuple#16$T5, 
              _System._tuple#16$T6, 
              _System._tuple#16$T7, 
              _System._tuple#16$T8, 
              _System._tuple#16$T9, 
              _System._tuple#16$T10, 
              _System._tuple#16$T11, 
              _System._tuple#16$T12, 
              _System._tuple#16$T13, 
              _System._tuple#16$T14, 
              _System._tuple#16$T15), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple16(_System._tuple#16$T0, 
            _System._tuple#16$T1, 
            _System._tuple#16$T2, 
            _System._tuple#16$T3, 
            _System._tuple#16$T4, 
            _System._tuple#16$T5, 
            _System._tuple#16$T6, 
            _System._tuple#16$T7, 
            _System._tuple#16$T8, 
            _System._tuple#16$T9, 
            _System._tuple#16$T10, 
            _System._tuple#16$T11, 
            _System._tuple#16$T12, 
            _System._tuple#16$T13, 
            _System._tuple#16$T14, 
            _System._tuple#16$T15), 
          $h))
     ==> $IsAllocBox(_System.Tuple16._4(d), _System._tuple#16$T4, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#16$T5: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple16._5(d), _System._tuple#16$T5, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple16.___hMake16_q(d)
       && (exists _System._tuple#16$T0: Ty, 
          _System._tuple#16$T1: Ty, 
          _System._tuple#16$T2: Ty, 
          _System._tuple#16$T3: Ty, 
          _System._tuple#16$T4: Ty, 
          _System._tuple#16$T6: Ty, 
          _System._tuple#16$T7: Ty, 
          _System._tuple#16$T8: Ty, 
          _System._tuple#16$T9: Ty, 
          _System._tuple#16$T10: Ty, 
          _System._tuple#16$T11: Ty, 
          _System._tuple#16$T12: Ty, 
          _System._tuple#16$T13: Ty, 
          _System._tuple#16$T14: Ty, 
          _System._tuple#16$T15: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple16(_System._tuple#16$T0, 
              _System._tuple#16$T1, 
              _System._tuple#16$T2, 
              _System._tuple#16$T3, 
              _System._tuple#16$T4, 
              _System._tuple#16$T5, 
              _System._tuple#16$T6, 
              _System._tuple#16$T7, 
              _System._tuple#16$T8, 
              _System._tuple#16$T9, 
              _System._tuple#16$T10, 
              _System._tuple#16$T11, 
              _System._tuple#16$T12, 
              _System._tuple#16$T13, 
              _System._tuple#16$T14, 
              _System._tuple#16$T15), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple16(_System._tuple#16$T0, 
            _System._tuple#16$T1, 
            _System._tuple#16$T2, 
            _System._tuple#16$T3, 
            _System._tuple#16$T4, 
            _System._tuple#16$T5, 
            _System._tuple#16$T6, 
            _System._tuple#16$T7, 
            _System._tuple#16$T8, 
            _System._tuple#16$T9, 
            _System._tuple#16$T10, 
            _System._tuple#16$T11, 
            _System._tuple#16$T12, 
            _System._tuple#16$T13, 
            _System._tuple#16$T14, 
            _System._tuple#16$T15), 
          $h))
     ==> $IsAllocBox(_System.Tuple16._5(d), _System._tuple#16$T5, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#16$T6: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple16._6(d), _System._tuple#16$T6, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple16.___hMake16_q(d)
       && (exists _System._tuple#16$T0: Ty, 
          _System._tuple#16$T1: Ty, 
          _System._tuple#16$T2: Ty, 
          _System._tuple#16$T3: Ty, 
          _System._tuple#16$T4: Ty, 
          _System._tuple#16$T5: Ty, 
          _System._tuple#16$T7: Ty, 
          _System._tuple#16$T8: Ty, 
          _System._tuple#16$T9: Ty, 
          _System._tuple#16$T10: Ty, 
          _System._tuple#16$T11: Ty, 
          _System._tuple#16$T12: Ty, 
          _System._tuple#16$T13: Ty, 
          _System._tuple#16$T14: Ty, 
          _System._tuple#16$T15: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple16(_System._tuple#16$T0, 
              _System._tuple#16$T1, 
              _System._tuple#16$T2, 
              _System._tuple#16$T3, 
              _System._tuple#16$T4, 
              _System._tuple#16$T5, 
              _System._tuple#16$T6, 
              _System._tuple#16$T7, 
              _System._tuple#16$T8, 
              _System._tuple#16$T9, 
              _System._tuple#16$T10, 
              _System._tuple#16$T11, 
              _System._tuple#16$T12, 
              _System._tuple#16$T13, 
              _System._tuple#16$T14, 
              _System._tuple#16$T15), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple16(_System._tuple#16$T0, 
            _System._tuple#16$T1, 
            _System._tuple#16$T2, 
            _System._tuple#16$T3, 
            _System._tuple#16$T4, 
            _System._tuple#16$T5, 
            _System._tuple#16$T6, 
            _System._tuple#16$T7, 
            _System._tuple#16$T8, 
            _System._tuple#16$T9, 
            _System._tuple#16$T10, 
            _System._tuple#16$T11, 
            _System._tuple#16$T12, 
            _System._tuple#16$T13, 
            _System._tuple#16$T14, 
            _System._tuple#16$T15), 
          $h))
     ==> $IsAllocBox(_System.Tuple16._6(d), _System._tuple#16$T6, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#16$T7: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple16._7(d), _System._tuple#16$T7, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple16.___hMake16_q(d)
       && (exists _System._tuple#16$T0: Ty, 
          _System._tuple#16$T1: Ty, 
          _System._tuple#16$T2: Ty, 
          _System._tuple#16$T3: Ty, 
          _System._tuple#16$T4: Ty, 
          _System._tuple#16$T5: Ty, 
          _System._tuple#16$T6: Ty, 
          _System._tuple#16$T8: Ty, 
          _System._tuple#16$T9: Ty, 
          _System._tuple#16$T10: Ty, 
          _System._tuple#16$T11: Ty, 
          _System._tuple#16$T12: Ty, 
          _System._tuple#16$T13: Ty, 
          _System._tuple#16$T14: Ty, 
          _System._tuple#16$T15: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple16(_System._tuple#16$T0, 
              _System._tuple#16$T1, 
              _System._tuple#16$T2, 
              _System._tuple#16$T3, 
              _System._tuple#16$T4, 
              _System._tuple#16$T5, 
              _System._tuple#16$T6, 
              _System._tuple#16$T7, 
              _System._tuple#16$T8, 
              _System._tuple#16$T9, 
              _System._tuple#16$T10, 
              _System._tuple#16$T11, 
              _System._tuple#16$T12, 
              _System._tuple#16$T13, 
              _System._tuple#16$T14, 
              _System._tuple#16$T15), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple16(_System._tuple#16$T0, 
            _System._tuple#16$T1, 
            _System._tuple#16$T2, 
            _System._tuple#16$T3, 
            _System._tuple#16$T4, 
            _System._tuple#16$T5, 
            _System._tuple#16$T6, 
            _System._tuple#16$T7, 
            _System._tuple#16$T8, 
            _System._tuple#16$T9, 
            _System._tuple#16$T10, 
            _System._tuple#16$T11, 
            _System._tuple#16$T12, 
            _System._tuple#16$T13, 
            _System._tuple#16$T14, 
            _System._tuple#16$T15), 
          $h))
     ==> $IsAllocBox(_System.Tuple16._7(d), _System._tuple#16$T7, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#16$T8: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple16._8(d), _System._tuple#16$T8, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple16.___hMake16_q(d)
       && (exists _System._tuple#16$T0: Ty, 
          _System._tuple#16$T1: Ty, 
          _System._tuple#16$T2: Ty, 
          _System._tuple#16$T3: Ty, 
          _System._tuple#16$T4: Ty, 
          _System._tuple#16$T5: Ty, 
          _System._tuple#16$T6: Ty, 
          _System._tuple#16$T7: Ty, 
          _System._tuple#16$T9: Ty, 
          _System._tuple#16$T10: Ty, 
          _System._tuple#16$T11: Ty, 
          _System._tuple#16$T12: Ty, 
          _System._tuple#16$T13: Ty, 
          _System._tuple#16$T14: Ty, 
          _System._tuple#16$T15: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple16(_System._tuple#16$T0, 
              _System._tuple#16$T1, 
              _System._tuple#16$T2, 
              _System._tuple#16$T3, 
              _System._tuple#16$T4, 
              _System._tuple#16$T5, 
              _System._tuple#16$T6, 
              _System._tuple#16$T7, 
              _System._tuple#16$T8, 
              _System._tuple#16$T9, 
              _System._tuple#16$T10, 
              _System._tuple#16$T11, 
              _System._tuple#16$T12, 
              _System._tuple#16$T13, 
              _System._tuple#16$T14, 
              _System._tuple#16$T15), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple16(_System._tuple#16$T0, 
            _System._tuple#16$T1, 
            _System._tuple#16$T2, 
            _System._tuple#16$T3, 
            _System._tuple#16$T4, 
            _System._tuple#16$T5, 
            _System._tuple#16$T6, 
            _System._tuple#16$T7, 
            _System._tuple#16$T8, 
            _System._tuple#16$T9, 
            _System._tuple#16$T10, 
            _System._tuple#16$T11, 
            _System._tuple#16$T12, 
            _System._tuple#16$T13, 
            _System._tuple#16$T14, 
            _System._tuple#16$T15), 
          $h))
     ==> $IsAllocBox(_System.Tuple16._8(d), _System._tuple#16$T8, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#16$T9: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple16._9(d), _System._tuple#16$T9, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple16.___hMake16_q(d)
       && (exists _System._tuple#16$T0: Ty, 
          _System._tuple#16$T1: Ty, 
          _System._tuple#16$T2: Ty, 
          _System._tuple#16$T3: Ty, 
          _System._tuple#16$T4: Ty, 
          _System._tuple#16$T5: Ty, 
          _System._tuple#16$T6: Ty, 
          _System._tuple#16$T7: Ty, 
          _System._tuple#16$T8: Ty, 
          _System._tuple#16$T10: Ty, 
          _System._tuple#16$T11: Ty, 
          _System._tuple#16$T12: Ty, 
          _System._tuple#16$T13: Ty, 
          _System._tuple#16$T14: Ty, 
          _System._tuple#16$T15: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple16(_System._tuple#16$T0, 
              _System._tuple#16$T1, 
              _System._tuple#16$T2, 
              _System._tuple#16$T3, 
              _System._tuple#16$T4, 
              _System._tuple#16$T5, 
              _System._tuple#16$T6, 
              _System._tuple#16$T7, 
              _System._tuple#16$T8, 
              _System._tuple#16$T9, 
              _System._tuple#16$T10, 
              _System._tuple#16$T11, 
              _System._tuple#16$T12, 
              _System._tuple#16$T13, 
              _System._tuple#16$T14, 
              _System._tuple#16$T15), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple16(_System._tuple#16$T0, 
            _System._tuple#16$T1, 
            _System._tuple#16$T2, 
            _System._tuple#16$T3, 
            _System._tuple#16$T4, 
            _System._tuple#16$T5, 
            _System._tuple#16$T6, 
            _System._tuple#16$T7, 
            _System._tuple#16$T8, 
            _System._tuple#16$T9, 
            _System._tuple#16$T10, 
            _System._tuple#16$T11, 
            _System._tuple#16$T12, 
            _System._tuple#16$T13, 
            _System._tuple#16$T14, 
            _System._tuple#16$T15), 
          $h))
     ==> $IsAllocBox(_System.Tuple16._9(d), _System._tuple#16$T9, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#16$T10: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple16._10(d), _System._tuple#16$T10, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple16.___hMake16_q(d)
       && (exists _System._tuple#16$T0: Ty, 
          _System._tuple#16$T1: Ty, 
          _System._tuple#16$T2: Ty, 
          _System._tuple#16$T3: Ty, 
          _System._tuple#16$T4: Ty, 
          _System._tuple#16$T5: Ty, 
          _System._tuple#16$T6: Ty, 
          _System._tuple#16$T7: Ty, 
          _System._tuple#16$T8: Ty, 
          _System._tuple#16$T9: Ty, 
          _System._tuple#16$T11: Ty, 
          _System._tuple#16$T12: Ty, 
          _System._tuple#16$T13: Ty, 
          _System._tuple#16$T14: Ty, 
          _System._tuple#16$T15: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple16(_System._tuple#16$T0, 
              _System._tuple#16$T1, 
              _System._tuple#16$T2, 
              _System._tuple#16$T3, 
              _System._tuple#16$T4, 
              _System._tuple#16$T5, 
              _System._tuple#16$T6, 
              _System._tuple#16$T7, 
              _System._tuple#16$T8, 
              _System._tuple#16$T9, 
              _System._tuple#16$T10, 
              _System._tuple#16$T11, 
              _System._tuple#16$T12, 
              _System._tuple#16$T13, 
              _System._tuple#16$T14, 
              _System._tuple#16$T15), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple16(_System._tuple#16$T0, 
            _System._tuple#16$T1, 
            _System._tuple#16$T2, 
            _System._tuple#16$T3, 
            _System._tuple#16$T4, 
            _System._tuple#16$T5, 
            _System._tuple#16$T6, 
            _System._tuple#16$T7, 
            _System._tuple#16$T8, 
            _System._tuple#16$T9, 
            _System._tuple#16$T10, 
            _System._tuple#16$T11, 
            _System._tuple#16$T12, 
            _System._tuple#16$T13, 
            _System._tuple#16$T14, 
            _System._tuple#16$T15), 
          $h))
     ==> $IsAllocBox(_System.Tuple16._10(d), _System._tuple#16$T10, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#16$T11: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple16._11(d), _System._tuple#16$T11, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple16.___hMake16_q(d)
       && (exists _System._tuple#16$T0: Ty, 
          _System._tuple#16$T1: Ty, 
          _System._tuple#16$T2: Ty, 
          _System._tuple#16$T3: Ty, 
          _System._tuple#16$T4: Ty, 
          _System._tuple#16$T5: Ty, 
          _System._tuple#16$T6: Ty, 
          _System._tuple#16$T7: Ty, 
          _System._tuple#16$T8: Ty, 
          _System._tuple#16$T9: Ty, 
          _System._tuple#16$T10: Ty, 
          _System._tuple#16$T12: Ty, 
          _System._tuple#16$T13: Ty, 
          _System._tuple#16$T14: Ty, 
          _System._tuple#16$T15: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple16(_System._tuple#16$T0, 
              _System._tuple#16$T1, 
              _System._tuple#16$T2, 
              _System._tuple#16$T3, 
              _System._tuple#16$T4, 
              _System._tuple#16$T5, 
              _System._tuple#16$T6, 
              _System._tuple#16$T7, 
              _System._tuple#16$T8, 
              _System._tuple#16$T9, 
              _System._tuple#16$T10, 
              _System._tuple#16$T11, 
              _System._tuple#16$T12, 
              _System._tuple#16$T13, 
              _System._tuple#16$T14, 
              _System._tuple#16$T15), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple16(_System._tuple#16$T0, 
            _System._tuple#16$T1, 
            _System._tuple#16$T2, 
            _System._tuple#16$T3, 
            _System._tuple#16$T4, 
            _System._tuple#16$T5, 
            _System._tuple#16$T6, 
            _System._tuple#16$T7, 
            _System._tuple#16$T8, 
            _System._tuple#16$T9, 
            _System._tuple#16$T10, 
            _System._tuple#16$T11, 
            _System._tuple#16$T12, 
            _System._tuple#16$T13, 
            _System._tuple#16$T14, 
            _System._tuple#16$T15), 
          $h))
     ==> $IsAllocBox(_System.Tuple16._11(d), _System._tuple#16$T11, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#16$T12: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple16._12(d), _System._tuple#16$T12, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple16.___hMake16_q(d)
       && (exists _System._tuple#16$T0: Ty, 
          _System._tuple#16$T1: Ty, 
          _System._tuple#16$T2: Ty, 
          _System._tuple#16$T3: Ty, 
          _System._tuple#16$T4: Ty, 
          _System._tuple#16$T5: Ty, 
          _System._tuple#16$T6: Ty, 
          _System._tuple#16$T7: Ty, 
          _System._tuple#16$T8: Ty, 
          _System._tuple#16$T9: Ty, 
          _System._tuple#16$T10: Ty, 
          _System._tuple#16$T11: Ty, 
          _System._tuple#16$T13: Ty, 
          _System._tuple#16$T14: Ty, 
          _System._tuple#16$T15: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple16(_System._tuple#16$T0, 
              _System._tuple#16$T1, 
              _System._tuple#16$T2, 
              _System._tuple#16$T3, 
              _System._tuple#16$T4, 
              _System._tuple#16$T5, 
              _System._tuple#16$T6, 
              _System._tuple#16$T7, 
              _System._tuple#16$T8, 
              _System._tuple#16$T9, 
              _System._tuple#16$T10, 
              _System._tuple#16$T11, 
              _System._tuple#16$T12, 
              _System._tuple#16$T13, 
              _System._tuple#16$T14, 
              _System._tuple#16$T15), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple16(_System._tuple#16$T0, 
            _System._tuple#16$T1, 
            _System._tuple#16$T2, 
            _System._tuple#16$T3, 
            _System._tuple#16$T4, 
            _System._tuple#16$T5, 
            _System._tuple#16$T6, 
            _System._tuple#16$T7, 
            _System._tuple#16$T8, 
            _System._tuple#16$T9, 
            _System._tuple#16$T10, 
            _System._tuple#16$T11, 
            _System._tuple#16$T12, 
            _System._tuple#16$T13, 
            _System._tuple#16$T14, 
            _System._tuple#16$T15), 
          $h))
     ==> $IsAllocBox(_System.Tuple16._12(d), _System._tuple#16$T12, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#16$T13: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple16._13(d), _System._tuple#16$T13, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple16.___hMake16_q(d)
       && (exists _System._tuple#16$T0: Ty, 
          _System._tuple#16$T1: Ty, 
          _System._tuple#16$T2: Ty, 
          _System._tuple#16$T3: Ty, 
          _System._tuple#16$T4: Ty, 
          _System._tuple#16$T5: Ty, 
          _System._tuple#16$T6: Ty, 
          _System._tuple#16$T7: Ty, 
          _System._tuple#16$T8: Ty, 
          _System._tuple#16$T9: Ty, 
          _System._tuple#16$T10: Ty, 
          _System._tuple#16$T11: Ty, 
          _System._tuple#16$T12: Ty, 
          _System._tuple#16$T14: Ty, 
          _System._tuple#16$T15: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple16(_System._tuple#16$T0, 
              _System._tuple#16$T1, 
              _System._tuple#16$T2, 
              _System._tuple#16$T3, 
              _System._tuple#16$T4, 
              _System._tuple#16$T5, 
              _System._tuple#16$T6, 
              _System._tuple#16$T7, 
              _System._tuple#16$T8, 
              _System._tuple#16$T9, 
              _System._tuple#16$T10, 
              _System._tuple#16$T11, 
              _System._tuple#16$T12, 
              _System._tuple#16$T13, 
              _System._tuple#16$T14, 
              _System._tuple#16$T15), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple16(_System._tuple#16$T0, 
            _System._tuple#16$T1, 
            _System._tuple#16$T2, 
            _System._tuple#16$T3, 
            _System._tuple#16$T4, 
            _System._tuple#16$T5, 
            _System._tuple#16$T6, 
            _System._tuple#16$T7, 
            _System._tuple#16$T8, 
            _System._tuple#16$T9, 
            _System._tuple#16$T10, 
            _System._tuple#16$T11, 
            _System._tuple#16$T12, 
            _System._tuple#16$T13, 
            _System._tuple#16$T14, 
            _System._tuple#16$T15), 
          $h))
     ==> $IsAllocBox(_System.Tuple16._13(d), _System._tuple#16$T13, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#16$T14: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple16._14(d), _System._tuple#16$T14, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple16.___hMake16_q(d)
       && (exists _System._tuple#16$T0: Ty, 
          _System._tuple#16$T1: Ty, 
          _System._tuple#16$T2: Ty, 
          _System._tuple#16$T3: Ty, 
          _System._tuple#16$T4: Ty, 
          _System._tuple#16$T5: Ty, 
          _System._tuple#16$T6: Ty, 
          _System._tuple#16$T7: Ty, 
          _System._tuple#16$T8: Ty, 
          _System._tuple#16$T9: Ty, 
          _System._tuple#16$T10: Ty, 
          _System._tuple#16$T11: Ty, 
          _System._tuple#16$T12: Ty, 
          _System._tuple#16$T13: Ty, 
          _System._tuple#16$T15: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple16(_System._tuple#16$T0, 
              _System._tuple#16$T1, 
              _System._tuple#16$T2, 
              _System._tuple#16$T3, 
              _System._tuple#16$T4, 
              _System._tuple#16$T5, 
              _System._tuple#16$T6, 
              _System._tuple#16$T7, 
              _System._tuple#16$T8, 
              _System._tuple#16$T9, 
              _System._tuple#16$T10, 
              _System._tuple#16$T11, 
              _System._tuple#16$T12, 
              _System._tuple#16$T13, 
              _System._tuple#16$T14, 
              _System._tuple#16$T15), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple16(_System._tuple#16$T0, 
            _System._tuple#16$T1, 
            _System._tuple#16$T2, 
            _System._tuple#16$T3, 
            _System._tuple#16$T4, 
            _System._tuple#16$T5, 
            _System._tuple#16$T6, 
            _System._tuple#16$T7, 
            _System._tuple#16$T8, 
            _System._tuple#16$T9, 
            _System._tuple#16$T10, 
            _System._tuple#16$T11, 
            _System._tuple#16$T12, 
            _System._tuple#16$T13, 
            _System._tuple#16$T14, 
            _System._tuple#16$T15), 
          $h))
     ==> $IsAllocBox(_System.Tuple16._14(d), _System._tuple#16$T14, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#16$T15: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple16._15(d), _System._tuple#16$T15, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple16.___hMake16_q(d)
       && (exists _System._tuple#16$T0: Ty, 
          _System._tuple#16$T1: Ty, 
          _System._tuple#16$T2: Ty, 
          _System._tuple#16$T3: Ty, 
          _System._tuple#16$T4: Ty, 
          _System._tuple#16$T5: Ty, 
          _System._tuple#16$T6: Ty, 
          _System._tuple#16$T7: Ty, 
          _System._tuple#16$T8: Ty, 
          _System._tuple#16$T9: Ty, 
          _System._tuple#16$T10: Ty, 
          _System._tuple#16$T11: Ty, 
          _System._tuple#16$T12: Ty, 
          _System._tuple#16$T13: Ty, 
          _System._tuple#16$T14: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple16(_System._tuple#16$T0, 
              _System._tuple#16$T1, 
              _System._tuple#16$T2, 
              _System._tuple#16$T3, 
              _System._tuple#16$T4, 
              _System._tuple#16$T5, 
              _System._tuple#16$T6, 
              _System._tuple#16$T7, 
              _System._tuple#16$T8, 
              _System._tuple#16$T9, 
              _System._tuple#16$T10, 
              _System._tuple#16$T11, 
              _System._tuple#16$T12, 
              _System._tuple#16$T13, 
              _System._tuple#16$T14, 
              _System._tuple#16$T15), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple16(_System._tuple#16$T0, 
            _System._tuple#16$T1, 
            _System._tuple#16$T2, 
            _System._tuple#16$T3, 
            _System._tuple#16$T4, 
            _System._tuple#16$T5, 
            _System._tuple#16$T6, 
            _System._tuple#16$T7, 
            _System._tuple#16$T8, 
            _System._tuple#16$T9, 
            _System._tuple#16$T10, 
            _System._tuple#16$T11, 
            _System._tuple#16$T12, 
            _System._tuple#16$T13, 
            _System._tuple#16$T14, 
            _System._tuple#16$T15), 
          $h))
     ==> $IsAllocBox(_System.Tuple16._15(d), _System._tuple#16$T15, $h));

// Constructor literal
axiom (forall a#309#0#0: Box, 
    a#309#1#0: Box, 
    a#309#2#0: Box, 
    a#309#3#0: Box, 
    a#309#4#0: Box, 
    a#309#5#0: Box, 
    a#309#6#0: Box, 
    a#309#7#0: Box, 
    a#309#8#0: Box, 
    a#309#9#0: Box, 
    a#309#10#0: Box, 
    a#309#11#0: Box, 
    a#309#12#0: Box, 
    a#309#13#0: Box, 
    a#309#14#0: Box, 
    a#309#15#0: Box :: 
  { #_System._tuple#16._#Make16(Lit(a#309#0#0), 
      Lit(a#309#1#0), 
      Lit(a#309#2#0), 
      Lit(a#309#3#0), 
      Lit(a#309#4#0), 
      Lit(a#309#5#0), 
      Lit(a#309#6#0), 
      Lit(a#309#7#0), 
      Lit(a#309#8#0), 
      Lit(a#309#9#0), 
      Lit(a#309#10#0), 
      Lit(a#309#11#0), 
      Lit(a#309#12#0), 
      Lit(a#309#13#0), 
      Lit(a#309#14#0), 
      Lit(a#309#15#0)) } 
  #_System._tuple#16._#Make16(Lit(a#309#0#0), 
      Lit(a#309#1#0), 
      Lit(a#309#2#0), 
      Lit(a#309#3#0), 
      Lit(a#309#4#0), 
      Lit(a#309#5#0), 
      Lit(a#309#6#0), 
      Lit(a#309#7#0), 
      Lit(a#309#8#0), 
      Lit(a#309#9#0), 
      Lit(a#309#10#0), 
      Lit(a#309#11#0), 
      Lit(a#309#12#0), 
      Lit(a#309#13#0), 
      Lit(a#309#14#0), 
      Lit(a#309#15#0))
     == Lit(#_System._tuple#16._#Make16(a#309#0#0, 
        a#309#1#0, 
        a#309#2#0, 
        a#309#3#0, 
        a#309#4#0, 
        a#309#5#0, 
        a#309#6#0, 
        a#309#7#0, 
        a#309#8#0, 
        a#309#9#0, 
        a#309#10#0, 
        a#309#11#0, 
        a#309#12#0, 
        a#309#13#0, 
        a#309#14#0, 
        a#309#15#0)));

function _System.Tuple16._0(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#310#0#0: Box, 
    a#310#1#0: Box, 
    a#310#2#0: Box, 
    a#310#3#0: Box, 
    a#310#4#0: Box, 
    a#310#5#0: Box, 
    a#310#6#0: Box, 
    a#310#7#0: Box, 
    a#310#8#0: Box, 
    a#310#9#0: Box, 
    a#310#10#0: Box, 
    a#310#11#0: Box, 
    a#310#12#0: Box, 
    a#310#13#0: Box, 
    a#310#14#0: Box, 
    a#310#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#310#0#0, 
      a#310#1#0, 
      a#310#2#0, 
      a#310#3#0, 
      a#310#4#0, 
      a#310#5#0, 
      a#310#6#0, 
      a#310#7#0, 
      a#310#8#0, 
      a#310#9#0, 
      a#310#10#0, 
      a#310#11#0, 
      a#310#12#0, 
      a#310#13#0, 
      a#310#14#0, 
      a#310#15#0) } 
  _System.Tuple16._0(#_System._tuple#16._#Make16(a#310#0#0, 
        a#310#1#0, 
        a#310#2#0, 
        a#310#3#0, 
        a#310#4#0, 
        a#310#5#0, 
        a#310#6#0, 
        a#310#7#0, 
        a#310#8#0, 
        a#310#9#0, 
        a#310#10#0, 
        a#310#11#0, 
        a#310#12#0, 
        a#310#13#0, 
        a#310#14#0, 
        a#310#15#0))
     == a#310#0#0);

// Inductive rank
axiom (forall a#311#0#0: Box, 
    a#311#1#0: Box, 
    a#311#2#0: Box, 
    a#311#3#0: Box, 
    a#311#4#0: Box, 
    a#311#5#0: Box, 
    a#311#6#0: Box, 
    a#311#7#0: Box, 
    a#311#8#0: Box, 
    a#311#9#0: Box, 
    a#311#10#0: Box, 
    a#311#11#0: Box, 
    a#311#12#0: Box, 
    a#311#13#0: Box, 
    a#311#14#0: Box, 
    a#311#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#311#0#0, 
      a#311#1#0, 
      a#311#2#0, 
      a#311#3#0, 
      a#311#4#0, 
      a#311#5#0, 
      a#311#6#0, 
      a#311#7#0, 
      a#311#8#0, 
      a#311#9#0, 
      a#311#10#0, 
      a#311#11#0, 
      a#311#12#0, 
      a#311#13#0, 
      a#311#14#0, 
      a#311#15#0) } 
  BoxRank(a#311#0#0)
     < DtRank(#_System._tuple#16._#Make16(a#311#0#0, 
        a#311#1#0, 
        a#311#2#0, 
        a#311#3#0, 
        a#311#4#0, 
        a#311#5#0, 
        a#311#6#0, 
        a#311#7#0, 
        a#311#8#0, 
        a#311#9#0, 
        a#311#10#0, 
        a#311#11#0, 
        a#311#12#0, 
        a#311#13#0, 
        a#311#14#0, 
        a#311#15#0)));

function _System.Tuple16._1(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#312#0#0: Box, 
    a#312#1#0: Box, 
    a#312#2#0: Box, 
    a#312#3#0: Box, 
    a#312#4#0: Box, 
    a#312#5#0: Box, 
    a#312#6#0: Box, 
    a#312#7#0: Box, 
    a#312#8#0: Box, 
    a#312#9#0: Box, 
    a#312#10#0: Box, 
    a#312#11#0: Box, 
    a#312#12#0: Box, 
    a#312#13#0: Box, 
    a#312#14#0: Box, 
    a#312#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#312#0#0, 
      a#312#1#0, 
      a#312#2#0, 
      a#312#3#0, 
      a#312#4#0, 
      a#312#5#0, 
      a#312#6#0, 
      a#312#7#0, 
      a#312#8#0, 
      a#312#9#0, 
      a#312#10#0, 
      a#312#11#0, 
      a#312#12#0, 
      a#312#13#0, 
      a#312#14#0, 
      a#312#15#0) } 
  _System.Tuple16._1(#_System._tuple#16._#Make16(a#312#0#0, 
        a#312#1#0, 
        a#312#2#0, 
        a#312#3#0, 
        a#312#4#0, 
        a#312#5#0, 
        a#312#6#0, 
        a#312#7#0, 
        a#312#8#0, 
        a#312#9#0, 
        a#312#10#0, 
        a#312#11#0, 
        a#312#12#0, 
        a#312#13#0, 
        a#312#14#0, 
        a#312#15#0))
     == a#312#1#0);

// Inductive rank
axiom (forall a#313#0#0: Box, 
    a#313#1#0: Box, 
    a#313#2#0: Box, 
    a#313#3#0: Box, 
    a#313#4#0: Box, 
    a#313#5#0: Box, 
    a#313#6#0: Box, 
    a#313#7#0: Box, 
    a#313#8#0: Box, 
    a#313#9#0: Box, 
    a#313#10#0: Box, 
    a#313#11#0: Box, 
    a#313#12#0: Box, 
    a#313#13#0: Box, 
    a#313#14#0: Box, 
    a#313#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#313#0#0, 
      a#313#1#0, 
      a#313#2#0, 
      a#313#3#0, 
      a#313#4#0, 
      a#313#5#0, 
      a#313#6#0, 
      a#313#7#0, 
      a#313#8#0, 
      a#313#9#0, 
      a#313#10#0, 
      a#313#11#0, 
      a#313#12#0, 
      a#313#13#0, 
      a#313#14#0, 
      a#313#15#0) } 
  BoxRank(a#313#1#0)
     < DtRank(#_System._tuple#16._#Make16(a#313#0#0, 
        a#313#1#0, 
        a#313#2#0, 
        a#313#3#0, 
        a#313#4#0, 
        a#313#5#0, 
        a#313#6#0, 
        a#313#7#0, 
        a#313#8#0, 
        a#313#9#0, 
        a#313#10#0, 
        a#313#11#0, 
        a#313#12#0, 
        a#313#13#0, 
        a#313#14#0, 
        a#313#15#0)));

function _System.Tuple16._2(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#314#0#0: Box, 
    a#314#1#0: Box, 
    a#314#2#0: Box, 
    a#314#3#0: Box, 
    a#314#4#0: Box, 
    a#314#5#0: Box, 
    a#314#6#0: Box, 
    a#314#7#0: Box, 
    a#314#8#0: Box, 
    a#314#9#0: Box, 
    a#314#10#0: Box, 
    a#314#11#0: Box, 
    a#314#12#0: Box, 
    a#314#13#0: Box, 
    a#314#14#0: Box, 
    a#314#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#314#0#0, 
      a#314#1#0, 
      a#314#2#0, 
      a#314#3#0, 
      a#314#4#0, 
      a#314#5#0, 
      a#314#6#0, 
      a#314#7#0, 
      a#314#8#0, 
      a#314#9#0, 
      a#314#10#0, 
      a#314#11#0, 
      a#314#12#0, 
      a#314#13#0, 
      a#314#14#0, 
      a#314#15#0) } 
  _System.Tuple16._2(#_System._tuple#16._#Make16(a#314#0#0, 
        a#314#1#0, 
        a#314#2#0, 
        a#314#3#0, 
        a#314#4#0, 
        a#314#5#0, 
        a#314#6#0, 
        a#314#7#0, 
        a#314#8#0, 
        a#314#9#0, 
        a#314#10#0, 
        a#314#11#0, 
        a#314#12#0, 
        a#314#13#0, 
        a#314#14#0, 
        a#314#15#0))
     == a#314#2#0);

// Inductive rank
axiom (forall a#315#0#0: Box, 
    a#315#1#0: Box, 
    a#315#2#0: Box, 
    a#315#3#0: Box, 
    a#315#4#0: Box, 
    a#315#5#0: Box, 
    a#315#6#0: Box, 
    a#315#7#0: Box, 
    a#315#8#0: Box, 
    a#315#9#0: Box, 
    a#315#10#0: Box, 
    a#315#11#0: Box, 
    a#315#12#0: Box, 
    a#315#13#0: Box, 
    a#315#14#0: Box, 
    a#315#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#315#0#0, 
      a#315#1#0, 
      a#315#2#0, 
      a#315#3#0, 
      a#315#4#0, 
      a#315#5#0, 
      a#315#6#0, 
      a#315#7#0, 
      a#315#8#0, 
      a#315#9#0, 
      a#315#10#0, 
      a#315#11#0, 
      a#315#12#0, 
      a#315#13#0, 
      a#315#14#0, 
      a#315#15#0) } 
  BoxRank(a#315#2#0)
     < DtRank(#_System._tuple#16._#Make16(a#315#0#0, 
        a#315#1#0, 
        a#315#2#0, 
        a#315#3#0, 
        a#315#4#0, 
        a#315#5#0, 
        a#315#6#0, 
        a#315#7#0, 
        a#315#8#0, 
        a#315#9#0, 
        a#315#10#0, 
        a#315#11#0, 
        a#315#12#0, 
        a#315#13#0, 
        a#315#14#0, 
        a#315#15#0)));

function _System.Tuple16._3(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#316#0#0: Box, 
    a#316#1#0: Box, 
    a#316#2#0: Box, 
    a#316#3#0: Box, 
    a#316#4#0: Box, 
    a#316#5#0: Box, 
    a#316#6#0: Box, 
    a#316#7#0: Box, 
    a#316#8#0: Box, 
    a#316#9#0: Box, 
    a#316#10#0: Box, 
    a#316#11#0: Box, 
    a#316#12#0: Box, 
    a#316#13#0: Box, 
    a#316#14#0: Box, 
    a#316#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#316#0#0, 
      a#316#1#0, 
      a#316#2#0, 
      a#316#3#0, 
      a#316#4#0, 
      a#316#5#0, 
      a#316#6#0, 
      a#316#7#0, 
      a#316#8#0, 
      a#316#9#0, 
      a#316#10#0, 
      a#316#11#0, 
      a#316#12#0, 
      a#316#13#0, 
      a#316#14#0, 
      a#316#15#0) } 
  _System.Tuple16._3(#_System._tuple#16._#Make16(a#316#0#0, 
        a#316#1#0, 
        a#316#2#0, 
        a#316#3#0, 
        a#316#4#0, 
        a#316#5#0, 
        a#316#6#0, 
        a#316#7#0, 
        a#316#8#0, 
        a#316#9#0, 
        a#316#10#0, 
        a#316#11#0, 
        a#316#12#0, 
        a#316#13#0, 
        a#316#14#0, 
        a#316#15#0))
     == a#316#3#0);

// Inductive rank
axiom (forall a#317#0#0: Box, 
    a#317#1#0: Box, 
    a#317#2#0: Box, 
    a#317#3#0: Box, 
    a#317#4#0: Box, 
    a#317#5#0: Box, 
    a#317#6#0: Box, 
    a#317#7#0: Box, 
    a#317#8#0: Box, 
    a#317#9#0: Box, 
    a#317#10#0: Box, 
    a#317#11#0: Box, 
    a#317#12#0: Box, 
    a#317#13#0: Box, 
    a#317#14#0: Box, 
    a#317#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#317#0#0, 
      a#317#1#0, 
      a#317#2#0, 
      a#317#3#0, 
      a#317#4#0, 
      a#317#5#0, 
      a#317#6#0, 
      a#317#7#0, 
      a#317#8#0, 
      a#317#9#0, 
      a#317#10#0, 
      a#317#11#0, 
      a#317#12#0, 
      a#317#13#0, 
      a#317#14#0, 
      a#317#15#0) } 
  BoxRank(a#317#3#0)
     < DtRank(#_System._tuple#16._#Make16(a#317#0#0, 
        a#317#1#0, 
        a#317#2#0, 
        a#317#3#0, 
        a#317#4#0, 
        a#317#5#0, 
        a#317#6#0, 
        a#317#7#0, 
        a#317#8#0, 
        a#317#9#0, 
        a#317#10#0, 
        a#317#11#0, 
        a#317#12#0, 
        a#317#13#0, 
        a#317#14#0, 
        a#317#15#0)));

function _System.Tuple16._4(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#318#0#0: Box, 
    a#318#1#0: Box, 
    a#318#2#0: Box, 
    a#318#3#0: Box, 
    a#318#4#0: Box, 
    a#318#5#0: Box, 
    a#318#6#0: Box, 
    a#318#7#0: Box, 
    a#318#8#0: Box, 
    a#318#9#0: Box, 
    a#318#10#0: Box, 
    a#318#11#0: Box, 
    a#318#12#0: Box, 
    a#318#13#0: Box, 
    a#318#14#0: Box, 
    a#318#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#318#0#0, 
      a#318#1#0, 
      a#318#2#0, 
      a#318#3#0, 
      a#318#4#0, 
      a#318#5#0, 
      a#318#6#0, 
      a#318#7#0, 
      a#318#8#0, 
      a#318#9#0, 
      a#318#10#0, 
      a#318#11#0, 
      a#318#12#0, 
      a#318#13#0, 
      a#318#14#0, 
      a#318#15#0) } 
  _System.Tuple16._4(#_System._tuple#16._#Make16(a#318#0#0, 
        a#318#1#0, 
        a#318#2#0, 
        a#318#3#0, 
        a#318#4#0, 
        a#318#5#0, 
        a#318#6#0, 
        a#318#7#0, 
        a#318#8#0, 
        a#318#9#0, 
        a#318#10#0, 
        a#318#11#0, 
        a#318#12#0, 
        a#318#13#0, 
        a#318#14#0, 
        a#318#15#0))
     == a#318#4#0);

// Inductive rank
axiom (forall a#319#0#0: Box, 
    a#319#1#0: Box, 
    a#319#2#0: Box, 
    a#319#3#0: Box, 
    a#319#4#0: Box, 
    a#319#5#0: Box, 
    a#319#6#0: Box, 
    a#319#7#0: Box, 
    a#319#8#0: Box, 
    a#319#9#0: Box, 
    a#319#10#0: Box, 
    a#319#11#0: Box, 
    a#319#12#0: Box, 
    a#319#13#0: Box, 
    a#319#14#0: Box, 
    a#319#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#319#0#0, 
      a#319#1#0, 
      a#319#2#0, 
      a#319#3#0, 
      a#319#4#0, 
      a#319#5#0, 
      a#319#6#0, 
      a#319#7#0, 
      a#319#8#0, 
      a#319#9#0, 
      a#319#10#0, 
      a#319#11#0, 
      a#319#12#0, 
      a#319#13#0, 
      a#319#14#0, 
      a#319#15#0) } 
  BoxRank(a#319#4#0)
     < DtRank(#_System._tuple#16._#Make16(a#319#0#0, 
        a#319#1#0, 
        a#319#2#0, 
        a#319#3#0, 
        a#319#4#0, 
        a#319#5#0, 
        a#319#6#0, 
        a#319#7#0, 
        a#319#8#0, 
        a#319#9#0, 
        a#319#10#0, 
        a#319#11#0, 
        a#319#12#0, 
        a#319#13#0, 
        a#319#14#0, 
        a#319#15#0)));

function _System.Tuple16._5(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#320#0#0: Box, 
    a#320#1#0: Box, 
    a#320#2#0: Box, 
    a#320#3#0: Box, 
    a#320#4#0: Box, 
    a#320#5#0: Box, 
    a#320#6#0: Box, 
    a#320#7#0: Box, 
    a#320#8#0: Box, 
    a#320#9#0: Box, 
    a#320#10#0: Box, 
    a#320#11#0: Box, 
    a#320#12#0: Box, 
    a#320#13#0: Box, 
    a#320#14#0: Box, 
    a#320#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#320#0#0, 
      a#320#1#0, 
      a#320#2#0, 
      a#320#3#0, 
      a#320#4#0, 
      a#320#5#0, 
      a#320#6#0, 
      a#320#7#0, 
      a#320#8#0, 
      a#320#9#0, 
      a#320#10#0, 
      a#320#11#0, 
      a#320#12#0, 
      a#320#13#0, 
      a#320#14#0, 
      a#320#15#0) } 
  _System.Tuple16._5(#_System._tuple#16._#Make16(a#320#0#0, 
        a#320#1#0, 
        a#320#2#0, 
        a#320#3#0, 
        a#320#4#0, 
        a#320#5#0, 
        a#320#6#0, 
        a#320#7#0, 
        a#320#8#0, 
        a#320#9#0, 
        a#320#10#0, 
        a#320#11#0, 
        a#320#12#0, 
        a#320#13#0, 
        a#320#14#0, 
        a#320#15#0))
     == a#320#5#0);

// Inductive rank
axiom (forall a#321#0#0: Box, 
    a#321#1#0: Box, 
    a#321#2#0: Box, 
    a#321#3#0: Box, 
    a#321#4#0: Box, 
    a#321#5#0: Box, 
    a#321#6#0: Box, 
    a#321#7#0: Box, 
    a#321#8#0: Box, 
    a#321#9#0: Box, 
    a#321#10#0: Box, 
    a#321#11#0: Box, 
    a#321#12#0: Box, 
    a#321#13#0: Box, 
    a#321#14#0: Box, 
    a#321#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#321#0#0, 
      a#321#1#0, 
      a#321#2#0, 
      a#321#3#0, 
      a#321#4#0, 
      a#321#5#0, 
      a#321#6#0, 
      a#321#7#0, 
      a#321#8#0, 
      a#321#9#0, 
      a#321#10#0, 
      a#321#11#0, 
      a#321#12#0, 
      a#321#13#0, 
      a#321#14#0, 
      a#321#15#0) } 
  BoxRank(a#321#5#0)
     < DtRank(#_System._tuple#16._#Make16(a#321#0#0, 
        a#321#1#0, 
        a#321#2#0, 
        a#321#3#0, 
        a#321#4#0, 
        a#321#5#0, 
        a#321#6#0, 
        a#321#7#0, 
        a#321#8#0, 
        a#321#9#0, 
        a#321#10#0, 
        a#321#11#0, 
        a#321#12#0, 
        a#321#13#0, 
        a#321#14#0, 
        a#321#15#0)));

function _System.Tuple16._6(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#322#0#0: Box, 
    a#322#1#0: Box, 
    a#322#2#0: Box, 
    a#322#3#0: Box, 
    a#322#4#0: Box, 
    a#322#5#0: Box, 
    a#322#6#0: Box, 
    a#322#7#0: Box, 
    a#322#8#0: Box, 
    a#322#9#0: Box, 
    a#322#10#0: Box, 
    a#322#11#0: Box, 
    a#322#12#0: Box, 
    a#322#13#0: Box, 
    a#322#14#0: Box, 
    a#322#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#322#0#0, 
      a#322#1#0, 
      a#322#2#0, 
      a#322#3#0, 
      a#322#4#0, 
      a#322#5#0, 
      a#322#6#0, 
      a#322#7#0, 
      a#322#8#0, 
      a#322#9#0, 
      a#322#10#0, 
      a#322#11#0, 
      a#322#12#0, 
      a#322#13#0, 
      a#322#14#0, 
      a#322#15#0) } 
  _System.Tuple16._6(#_System._tuple#16._#Make16(a#322#0#0, 
        a#322#1#0, 
        a#322#2#0, 
        a#322#3#0, 
        a#322#4#0, 
        a#322#5#0, 
        a#322#6#0, 
        a#322#7#0, 
        a#322#8#0, 
        a#322#9#0, 
        a#322#10#0, 
        a#322#11#0, 
        a#322#12#0, 
        a#322#13#0, 
        a#322#14#0, 
        a#322#15#0))
     == a#322#6#0);

// Inductive rank
axiom (forall a#323#0#0: Box, 
    a#323#1#0: Box, 
    a#323#2#0: Box, 
    a#323#3#0: Box, 
    a#323#4#0: Box, 
    a#323#5#0: Box, 
    a#323#6#0: Box, 
    a#323#7#0: Box, 
    a#323#8#0: Box, 
    a#323#9#0: Box, 
    a#323#10#0: Box, 
    a#323#11#0: Box, 
    a#323#12#0: Box, 
    a#323#13#0: Box, 
    a#323#14#0: Box, 
    a#323#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#323#0#0, 
      a#323#1#0, 
      a#323#2#0, 
      a#323#3#0, 
      a#323#4#0, 
      a#323#5#0, 
      a#323#6#0, 
      a#323#7#0, 
      a#323#8#0, 
      a#323#9#0, 
      a#323#10#0, 
      a#323#11#0, 
      a#323#12#0, 
      a#323#13#0, 
      a#323#14#0, 
      a#323#15#0) } 
  BoxRank(a#323#6#0)
     < DtRank(#_System._tuple#16._#Make16(a#323#0#0, 
        a#323#1#0, 
        a#323#2#0, 
        a#323#3#0, 
        a#323#4#0, 
        a#323#5#0, 
        a#323#6#0, 
        a#323#7#0, 
        a#323#8#0, 
        a#323#9#0, 
        a#323#10#0, 
        a#323#11#0, 
        a#323#12#0, 
        a#323#13#0, 
        a#323#14#0, 
        a#323#15#0)));

function _System.Tuple16._7(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#324#0#0: Box, 
    a#324#1#0: Box, 
    a#324#2#0: Box, 
    a#324#3#0: Box, 
    a#324#4#0: Box, 
    a#324#5#0: Box, 
    a#324#6#0: Box, 
    a#324#7#0: Box, 
    a#324#8#0: Box, 
    a#324#9#0: Box, 
    a#324#10#0: Box, 
    a#324#11#0: Box, 
    a#324#12#0: Box, 
    a#324#13#0: Box, 
    a#324#14#0: Box, 
    a#324#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#324#0#0, 
      a#324#1#0, 
      a#324#2#0, 
      a#324#3#0, 
      a#324#4#0, 
      a#324#5#0, 
      a#324#6#0, 
      a#324#7#0, 
      a#324#8#0, 
      a#324#9#0, 
      a#324#10#0, 
      a#324#11#0, 
      a#324#12#0, 
      a#324#13#0, 
      a#324#14#0, 
      a#324#15#0) } 
  _System.Tuple16._7(#_System._tuple#16._#Make16(a#324#0#0, 
        a#324#1#0, 
        a#324#2#0, 
        a#324#3#0, 
        a#324#4#0, 
        a#324#5#0, 
        a#324#6#0, 
        a#324#7#0, 
        a#324#8#0, 
        a#324#9#0, 
        a#324#10#0, 
        a#324#11#0, 
        a#324#12#0, 
        a#324#13#0, 
        a#324#14#0, 
        a#324#15#0))
     == a#324#7#0);

// Inductive rank
axiom (forall a#325#0#0: Box, 
    a#325#1#0: Box, 
    a#325#2#0: Box, 
    a#325#3#0: Box, 
    a#325#4#0: Box, 
    a#325#5#0: Box, 
    a#325#6#0: Box, 
    a#325#7#0: Box, 
    a#325#8#0: Box, 
    a#325#9#0: Box, 
    a#325#10#0: Box, 
    a#325#11#0: Box, 
    a#325#12#0: Box, 
    a#325#13#0: Box, 
    a#325#14#0: Box, 
    a#325#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#325#0#0, 
      a#325#1#0, 
      a#325#2#0, 
      a#325#3#0, 
      a#325#4#0, 
      a#325#5#0, 
      a#325#6#0, 
      a#325#7#0, 
      a#325#8#0, 
      a#325#9#0, 
      a#325#10#0, 
      a#325#11#0, 
      a#325#12#0, 
      a#325#13#0, 
      a#325#14#0, 
      a#325#15#0) } 
  BoxRank(a#325#7#0)
     < DtRank(#_System._tuple#16._#Make16(a#325#0#0, 
        a#325#1#0, 
        a#325#2#0, 
        a#325#3#0, 
        a#325#4#0, 
        a#325#5#0, 
        a#325#6#0, 
        a#325#7#0, 
        a#325#8#0, 
        a#325#9#0, 
        a#325#10#0, 
        a#325#11#0, 
        a#325#12#0, 
        a#325#13#0, 
        a#325#14#0, 
        a#325#15#0)));

function _System.Tuple16._8(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#326#0#0: Box, 
    a#326#1#0: Box, 
    a#326#2#0: Box, 
    a#326#3#0: Box, 
    a#326#4#0: Box, 
    a#326#5#0: Box, 
    a#326#6#0: Box, 
    a#326#7#0: Box, 
    a#326#8#0: Box, 
    a#326#9#0: Box, 
    a#326#10#0: Box, 
    a#326#11#0: Box, 
    a#326#12#0: Box, 
    a#326#13#0: Box, 
    a#326#14#0: Box, 
    a#326#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#326#0#0, 
      a#326#1#0, 
      a#326#2#0, 
      a#326#3#0, 
      a#326#4#0, 
      a#326#5#0, 
      a#326#6#0, 
      a#326#7#0, 
      a#326#8#0, 
      a#326#9#0, 
      a#326#10#0, 
      a#326#11#0, 
      a#326#12#0, 
      a#326#13#0, 
      a#326#14#0, 
      a#326#15#0) } 
  _System.Tuple16._8(#_System._tuple#16._#Make16(a#326#0#0, 
        a#326#1#0, 
        a#326#2#0, 
        a#326#3#0, 
        a#326#4#0, 
        a#326#5#0, 
        a#326#6#0, 
        a#326#7#0, 
        a#326#8#0, 
        a#326#9#0, 
        a#326#10#0, 
        a#326#11#0, 
        a#326#12#0, 
        a#326#13#0, 
        a#326#14#0, 
        a#326#15#0))
     == a#326#8#0);

// Inductive rank
axiom (forall a#327#0#0: Box, 
    a#327#1#0: Box, 
    a#327#2#0: Box, 
    a#327#3#0: Box, 
    a#327#4#0: Box, 
    a#327#5#0: Box, 
    a#327#6#0: Box, 
    a#327#7#0: Box, 
    a#327#8#0: Box, 
    a#327#9#0: Box, 
    a#327#10#0: Box, 
    a#327#11#0: Box, 
    a#327#12#0: Box, 
    a#327#13#0: Box, 
    a#327#14#0: Box, 
    a#327#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#327#0#0, 
      a#327#1#0, 
      a#327#2#0, 
      a#327#3#0, 
      a#327#4#0, 
      a#327#5#0, 
      a#327#6#0, 
      a#327#7#0, 
      a#327#8#0, 
      a#327#9#0, 
      a#327#10#0, 
      a#327#11#0, 
      a#327#12#0, 
      a#327#13#0, 
      a#327#14#0, 
      a#327#15#0) } 
  BoxRank(a#327#8#0)
     < DtRank(#_System._tuple#16._#Make16(a#327#0#0, 
        a#327#1#0, 
        a#327#2#0, 
        a#327#3#0, 
        a#327#4#0, 
        a#327#5#0, 
        a#327#6#0, 
        a#327#7#0, 
        a#327#8#0, 
        a#327#9#0, 
        a#327#10#0, 
        a#327#11#0, 
        a#327#12#0, 
        a#327#13#0, 
        a#327#14#0, 
        a#327#15#0)));

function _System.Tuple16._9(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#328#0#0: Box, 
    a#328#1#0: Box, 
    a#328#2#0: Box, 
    a#328#3#0: Box, 
    a#328#4#0: Box, 
    a#328#5#0: Box, 
    a#328#6#0: Box, 
    a#328#7#0: Box, 
    a#328#8#0: Box, 
    a#328#9#0: Box, 
    a#328#10#0: Box, 
    a#328#11#0: Box, 
    a#328#12#0: Box, 
    a#328#13#0: Box, 
    a#328#14#0: Box, 
    a#328#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#328#0#0, 
      a#328#1#0, 
      a#328#2#0, 
      a#328#3#0, 
      a#328#4#0, 
      a#328#5#0, 
      a#328#6#0, 
      a#328#7#0, 
      a#328#8#0, 
      a#328#9#0, 
      a#328#10#0, 
      a#328#11#0, 
      a#328#12#0, 
      a#328#13#0, 
      a#328#14#0, 
      a#328#15#0) } 
  _System.Tuple16._9(#_System._tuple#16._#Make16(a#328#0#0, 
        a#328#1#0, 
        a#328#2#0, 
        a#328#3#0, 
        a#328#4#0, 
        a#328#5#0, 
        a#328#6#0, 
        a#328#7#0, 
        a#328#8#0, 
        a#328#9#0, 
        a#328#10#0, 
        a#328#11#0, 
        a#328#12#0, 
        a#328#13#0, 
        a#328#14#0, 
        a#328#15#0))
     == a#328#9#0);

// Inductive rank
axiom (forall a#329#0#0: Box, 
    a#329#1#0: Box, 
    a#329#2#0: Box, 
    a#329#3#0: Box, 
    a#329#4#0: Box, 
    a#329#5#0: Box, 
    a#329#6#0: Box, 
    a#329#7#0: Box, 
    a#329#8#0: Box, 
    a#329#9#0: Box, 
    a#329#10#0: Box, 
    a#329#11#0: Box, 
    a#329#12#0: Box, 
    a#329#13#0: Box, 
    a#329#14#0: Box, 
    a#329#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#329#0#0, 
      a#329#1#0, 
      a#329#2#0, 
      a#329#3#0, 
      a#329#4#0, 
      a#329#5#0, 
      a#329#6#0, 
      a#329#7#0, 
      a#329#8#0, 
      a#329#9#0, 
      a#329#10#0, 
      a#329#11#0, 
      a#329#12#0, 
      a#329#13#0, 
      a#329#14#0, 
      a#329#15#0) } 
  BoxRank(a#329#9#0)
     < DtRank(#_System._tuple#16._#Make16(a#329#0#0, 
        a#329#1#0, 
        a#329#2#0, 
        a#329#3#0, 
        a#329#4#0, 
        a#329#5#0, 
        a#329#6#0, 
        a#329#7#0, 
        a#329#8#0, 
        a#329#9#0, 
        a#329#10#0, 
        a#329#11#0, 
        a#329#12#0, 
        a#329#13#0, 
        a#329#14#0, 
        a#329#15#0)));

function _System.Tuple16._10(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#330#0#0: Box, 
    a#330#1#0: Box, 
    a#330#2#0: Box, 
    a#330#3#0: Box, 
    a#330#4#0: Box, 
    a#330#5#0: Box, 
    a#330#6#0: Box, 
    a#330#7#0: Box, 
    a#330#8#0: Box, 
    a#330#9#0: Box, 
    a#330#10#0: Box, 
    a#330#11#0: Box, 
    a#330#12#0: Box, 
    a#330#13#0: Box, 
    a#330#14#0: Box, 
    a#330#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#330#0#0, 
      a#330#1#0, 
      a#330#2#0, 
      a#330#3#0, 
      a#330#4#0, 
      a#330#5#0, 
      a#330#6#0, 
      a#330#7#0, 
      a#330#8#0, 
      a#330#9#0, 
      a#330#10#0, 
      a#330#11#0, 
      a#330#12#0, 
      a#330#13#0, 
      a#330#14#0, 
      a#330#15#0) } 
  _System.Tuple16._10(#_System._tuple#16._#Make16(a#330#0#0, 
        a#330#1#0, 
        a#330#2#0, 
        a#330#3#0, 
        a#330#4#0, 
        a#330#5#0, 
        a#330#6#0, 
        a#330#7#0, 
        a#330#8#0, 
        a#330#9#0, 
        a#330#10#0, 
        a#330#11#0, 
        a#330#12#0, 
        a#330#13#0, 
        a#330#14#0, 
        a#330#15#0))
     == a#330#10#0);

// Inductive rank
axiom (forall a#331#0#0: Box, 
    a#331#1#0: Box, 
    a#331#2#0: Box, 
    a#331#3#0: Box, 
    a#331#4#0: Box, 
    a#331#5#0: Box, 
    a#331#6#0: Box, 
    a#331#7#0: Box, 
    a#331#8#0: Box, 
    a#331#9#0: Box, 
    a#331#10#0: Box, 
    a#331#11#0: Box, 
    a#331#12#0: Box, 
    a#331#13#0: Box, 
    a#331#14#0: Box, 
    a#331#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#331#0#0, 
      a#331#1#0, 
      a#331#2#0, 
      a#331#3#0, 
      a#331#4#0, 
      a#331#5#0, 
      a#331#6#0, 
      a#331#7#0, 
      a#331#8#0, 
      a#331#9#0, 
      a#331#10#0, 
      a#331#11#0, 
      a#331#12#0, 
      a#331#13#0, 
      a#331#14#0, 
      a#331#15#0) } 
  BoxRank(a#331#10#0)
     < DtRank(#_System._tuple#16._#Make16(a#331#0#0, 
        a#331#1#0, 
        a#331#2#0, 
        a#331#3#0, 
        a#331#4#0, 
        a#331#5#0, 
        a#331#6#0, 
        a#331#7#0, 
        a#331#8#0, 
        a#331#9#0, 
        a#331#10#0, 
        a#331#11#0, 
        a#331#12#0, 
        a#331#13#0, 
        a#331#14#0, 
        a#331#15#0)));

function _System.Tuple16._11(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#332#0#0: Box, 
    a#332#1#0: Box, 
    a#332#2#0: Box, 
    a#332#3#0: Box, 
    a#332#4#0: Box, 
    a#332#5#0: Box, 
    a#332#6#0: Box, 
    a#332#7#0: Box, 
    a#332#8#0: Box, 
    a#332#9#0: Box, 
    a#332#10#0: Box, 
    a#332#11#0: Box, 
    a#332#12#0: Box, 
    a#332#13#0: Box, 
    a#332#14#0: Box, 
    a#332#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#332#0#0, 
      a#332#1#0, 
      a#332#2#0, 
      a#332#3#0, 
      a#332#4#0, 
      a#332#5#0, 
      a#332#6#0, 
      a#332#7#0, 
      a#332#8#0, 
      a#332#9#0, 
      a#332#10#0, 
      a#332#11#0, 
      a#332#12#0, 
      a#332#13#0, 
      a#332#14#0, 
      a#332#15#0) } 
  _System.Tuple16._11(#_System._tuple#16._#Make16(a#332#0#0, 
        a#332#1#0, 
        a#332#2#0, 
        a#332#3#0, 
        a#332#4#0, 
        a#332#5#0, 
        a#332#6#0, 
        a#332#7#0, 
        a#332#8#0, 
        a#332#9#0, 
        a#332#10#0, 
        a#332#11#0, 
        a#332#12#0, 
        a#332#13#0, 
        a#332#14#0, 
        a#332#15#0))
     == a#332#11#0);

// Inductive rank
axiom (forall a#333#0#0: Box, 
    a#333#1#0: Box, 
    a#333#2#0: Box, 
    a#333#3#0: Box, 
    a#333#4#0: Box, 
    a#333#5#0: Box, 
    a#333#6#0: Box, 
    a#333#7#0: Box, 
    a#333#8#0: Box, 
    a#333#9#0: Box, 
    a#333#10#0: Box, 
    a#333#11#0: Box, 
    a#333#12#0: Box, 
    a#333#13#0: Box, 
    a#333#14#0: Box, 
    a#333#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#333#0#0, 
      a#333#1#0, 
      a#333#2#0, 
      a#333#3#0, 
      a#333#4#0, 
      a#333#5#0, 
      a#333#6#0, 
      a#333#7#0, 
      a#333#8#0, 
      a#333#9#0, 
      a#333#10#0, 
      a#333#11#0, 
      a#333#12#0, 
      a#333#13#0, 
      a#333#14#0, 
      a#333#15#0) } 
  BoxRank(a#333#11#0)
     < DtRank(#_System._tuple#16._#Make16(a#333#0#0, 
        a#333#1#0, 
        a#333#2#0, 
        a#333#3#0, 
        a#333#4#0, 
        a#333#5#0, 
        a#333#6#0, 
        a#333#7#0, 
        a#333#8#0, 
        a#333#9#0, 
        a#333#10#0, 
        a#333#11#0, 
        a#333#12#0, 
        a#333#13#0, 
        a#333#14#0, 
        a#333#15#0)));

function _System.Tuple16._12(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#334#0#0: Box, 
    a#334#1#0: Box, 
    a#334#2#0: Box, 
    a#334#3#0: Box, 
    a#334#4#0: Box, 
    a#334#5#0: Box, 
    a#334#6#0: Box, 
    a#334#7#0: Box, 
    a#334#8#0: Box, 
    a#334#9#0: Box, 
    a#334#10#0: Box, 
    a#334#11#0: Box, 
    a#334#12#0: Box, 
    a#334#13#0: Box, 
    a#334#14#0: Box, 
    a#334#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#334#0#0, 
      a#334#1#0, 
      a#334#2#0, 
      a#334#3#0, 
      a#334#4#0, 
      a#334#5#0, 
      a#334#6#0, 
      a#334#7#0, 
      a#334#8#0, 
      a#334#9#0, 
      a#334#10#0, 
      a#334#11#0, 
      a#334#12#0, 
      a#334#13#0, 
      a#334#14#0, 
      a#334#15#0) } 
  _System.Tuple16._12(#_System._tuple#16._#Make16(a#334#0#0, 
        a#334#1#0, 
        a#334#2#0, 
        a#334#3#0, 
        a#334#4#0, 
        a#334#5#0, 
        a#334#6#0, 
        a#334#7#0, 
        a#334#8#0, 
        a#334#9#0, 
        a#334#10#0, 
        a#334#11#0, 
        a#334#12#0, 
        a#334#13#0, 
        a#334#14#0, 
        a#334#15#0))
     == a#334#12#0);

// Inductive rank
axiom (forall a#335#0#0: Box, 
    a#335#1#0: Box, 
    a#335#2#0: Box, 
    a#335#3#0: Box, 
    a#335#4#0: Box, 
    a#335#5#0: Box, 
    a#335#6#0: Box, 
    a#335#7#0: Box, 
    a#335#8#0: Box, 
    a#335#9#0: Box, 
    a#335#10#0: Box, 
    a#335#11#0: Box, 
    a#335#12#0: Box, 
    a#335#13#0: Box, 
    a#335#14#0: Box, 
    a#335#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#335#0#0, 
      a#335#1#0, 
      a#335#2#0, 
      a#335#3#0, 
      a#335#4#0, 
      a#335#5#0, 
      a#335#6#0, 
      a#335#7#0, 
      a#335#8#0, 
      a#335#9#0, 
      a#335#10#0, 
      a#335#11#0, 
      a#335#12#0, 
      a#335#13#0, 
      a#335#14#0, 
      a#335#15#0) } 
  BoxRank(a#335#12#0)
     < DtRank(#_System._tuple#16._#Make16(a#335#0#0, 
        a#335#1#0, 
        a#335#2#0, 
        a#335#3#0, 
        a#335#4#0, 
        a#335#5#0, 
        a#335#6#0, 
        a#335#7#0, 
        a#335#8#0, 
        a#335#9#0, 
        a#335#10#0, 
        a#335#11#0, 
        a#335#12#0, 
        a#335#13#0, 
        a#335#14#0, 
        a#335#15#0)));

function _System.Tuple16._13(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#336#0#0: Box, 
    a#336#1#0: Box, 
    a#336#2#0: Box, 
    a#336#3#0: Box, 
    a#336#4#0: Box, 
    a#336#5#0: Box, 
    a#336#6#0: Box, 
    a#336#7#0: Box, 
    a#336#8#0: Box, 
    a#336#9#0: Box, 
    a#336#10#0: Box, 
    a#336#11#0: Box, 
    a#336#12#0: Box, 
    a#336#13#0: Box, 
    a#336#14#0: Box, 
    a#336#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#336#0#0, 
      a#336#1#0, 
      a#336#2#0, 
      a#336#3#0, 
      a#336#4#0, 
      a#336#5#0, 
      a#336#6#0, 
      a#336#7#0, 
      a#336#8#0, 
      a#336#9#0, 
      a#336#10#0, 
      a#336#11#0, 
      a#336#12#0, 
      a#336#13#0, 
      a#336#14#0, 
      a#336#15#0) } 
  _System.Tuple16._13(#_System._tuple#16._#Make16(a#336#0#0, 
        a#336#1#0, 
        a#336#2#0, 
        a#336#3#0, 
        a#336#4#0, 
        a#336#5#0, 
        a#336#6#0, 
        a#336#7#0, 
        a#336#8#0, 
        a#336#9#0, 
        a#336#10#0, 
        a#336#11#0, 
        a#336#12#0, 
        a#336#13#0, 
        a#336#14#0, 
        a#336#15#0))
     == a#336#13#0);

// Inductive rank
axiom (forall a#337#0#0: Box, 
    a#337#1#0: Box, 
    a#337#2#0: Box, 
    a#337#3#0: Box, 
    a#337#4#0: Box, 
    a#337#5#0: Box, 
    a#337#6#0: Box, 
    a#337#7#0: Box, 
    a#337#8#0: Box, 
    a#337#9#0: Box, 
    a#337#10#0: Box, 
    a#337#11#0: Box, 
    a#337#12#0: Box, 
    a#337#13#0: Box, 
    a#337#14#0: Box, 
    a#337#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#337#0#0, 
      a#337#1#0, 
      a#337#2#0, 
      a#337#3#0, 
      a#337#4#0, 
      a#337#5#0, 
      a#337#6#0, 
      a#337#7#0, 
      a#337#8#0, 
      a#337#9#0, 
      a#337#10#0, 
      a#337#11#0, 
      a#337#12#0, 
      a#337#13#0, 
      a#337#14#0, 
      a#337#15#0) } 
  BoxRank(a#337#13#0)
     < DtRank(#_System._tuple#16._#Make16(a#337#0#0, 
        a#337#1#0, 
        a#337#2#0, 
        a#337#3#0, 
        a#337#4#0, 
        a#337#5#0, 
        a#337#6#0, 
        a#337#7#0, 
        a#337#8#0, 
        a#337#9#0, 
        a#337#10#0, 
        a#337#11#0, 
        a#337#12#0, 
        a#337#13#0, 
        a#337#14#0, 
        a#337#15#0)));

function _System.Tuple16._14(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#338#0#0: Box, 
    a#338#1#0: Box, 
    a#338#2#0: Box, 
    a#338#3#0: Box, 
    a#338#4#0: Box, 
    a#338#5#0: Box, 
    a#338#6#0: Box, 
    a#338#7#0: Box, 
    a#338#8#0: Box, 
    a#338#9#0: Box, 
    a#338#10#0: Box, 
    a#338#11#0: Box, 
    a#338#12#0: Box, 
    a#338#13#0: Box, 
    a#338#14#0: Box, 
    a#338#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#338#0#0, 
      a#338#1#0, 
      a#338#2#0, 
      a#338#3#0, 
      a#338#4#0, 
      a#338#5#0, 
      a#338#6#0, 
      a#338#7#0, 
      a#338#8#0, 
      a#338#9#0, 
      a#338#10#0, 
      a#338#11#0, 
      a#338#12#0, 
      a#338#13#0, 
      a#338#14#0, 
      a#338#15#0) } 
  _System.Tuple16._14(#_System._tuple#16._#Make16(a#338#0#0, 
        a#338#1#0, 
        a#338#2#0, 
        a#338#3#0, 
        a#338#4#0, 
        a#338#5#0, 
        a#338#6#0, 
        a#338#7#0, 
        a#338#8#0, 
        a#338#9#0, 
        a#338#10#0, 
        a#338#11#0, 
        a#338#12#0, 
        a#338#13#0, 
        a#338#14#0, 
        a#338#15#0))
     == a#338#14#0);

// Inductive rank
axiom (forall a#339#0#0: Box, 
    a#339#1#0: Box, 
    a#339#2#0: Box, 
    a#339#3#0: Box, 
    a#339#4#0: Box, 
    a#339#5#0: Box, 
    a#339#6#0: Box, 
    a#339#7#0: Box, 
    a#339#8#0: Box, 
    a#339#9#0: Box, 
    a#339#10#0: Box, 
    a#339#11#0: Box, 
    a#339#12#0: Box, 
    a#339#13#0: Box, 
    a#339#14#0: Box, 
    a#339#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#339#0#0, 
      a#339#1#0, 
      a#339#2#0, 
      a#339#3#0, 
      a#339#4#0, 
      a#339#5#0, 
      a#339#6#0, 
      a#339#7#0, 
      a#339#8#0, 
      a#339#9#0, 
      a#339#10#0, 
      a#339#11#0, 
      a#339#12#0, 
      a#339#13#0, 
      a#339#14#0, 
      a#339#15#0) } 
  BoxRank(a#339#14#0)
     < DtRank(#_System._tuple#16._#Make16(a#339#0#0, 
        a#339#1#0, 
        a#339#2#0, 
        a#339#3#0, 
        a#339#4#0, 
        a#339#5#0, 
        a#339#6#0, 
        a#339#7#0, 
        a#339#8#0, 
        a#339#9#0, 
        a#339#10#0, 
        a#339#11#0, 
        a#339#12#0, 
        a#339#13#0, 
        a#339#14#0, 
        a#339#15#0)));

function _System.Tuple16._15(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#340#0#0: Box, 
    a#340#1#0: Box, 
    a#340#2#0: Box, 
    a#340#3#0: Box, 
    a#340#4#0: Box, 
    a#340#5#0: Box, 
    a#340#6#0: Box, 
    a#340#7#0: Box, 
    a#340#8#0: Box, 
    a#340#9#0: Box, 
    a#340#10#0: Box, 
    a#340#11#0: Box, 
    a#340#12#0: Box, 
    a#340#13#0: Box, 
    a#340#14#0: Box, 
    a#340#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#340#0#0, 
      a#340#1#0, 
      a#340#2#0, 
      a#340#3#0, 
      a#340#4#0, 
      a#340#5#0, 
      a#340#6#0, 
      a#340#7#0, 
      a#340#8#0, 
      a#340#9#0, 
      a#340#10#0, 
      a#340#11#0, 
      a#340#12#0, 
      a#340#13#0, 
      a#340#14#0, 
      a#340#15#0) } 
  _System.Tuple16._15(#_System._tuple#16._#Make16(a#340#0#0, 
        a#340#1#0, 
        a#340#2#0, 
        a#340#3#0, 
        a#340#4#0, 
        a#340#5#0, 
        a#340#6#0, 
        a#340#7#0, 
        a#340#8#0, 
        a#340#9#0, 
        a#340#10#0, 
        a#340#11#0, 
        a#340#12#0, 
        a#340#13#0, 
        a#340#14#0, 
        a#340#15#0))
     == a#340#15#0);

// Inductive rank
axiom (forall a#341#0#0: Box, 
    a#341#1#0: Box, 
    a#341#2#0: Box, 
    a#341#3#0: Box, 
    a#341#4#0: Box, 
    a#341#5#0: Box, 
    a#341#6#0: Box, 
    a#341#7#0: Box, 
    a#341#8#0: Box, 
    a#341#9#0: Box, 
    a#341#10#0: Box, 
    a#341#11#0: Box, 
    a#341#12#0: Box, 
    a#341#13#0: Box, 
    a#341#14#0: Box, 
    a#341#15#0: Box :: 
  { #_System._tuple#16._#Make16(a#341#0#0, 
      a#341#1#0, 
      a#341#2#0, 
      a#341#3#0, 
      a#341#4#0, 
      a#341#5#0, 
      a#341#6#0, 
      a#341#7#0, 
      a#341#8#0, 
      a#341#9#0, 
      a#341#10#0, 
      a#341#11#0, 
      a#341#12#0, 
      a#341#13#0, 
      a#341#14#0, 
      a#341#15#0) } 
  BoxRank(a#341#15#0)
     < DtRank(#_System._tuple#16._#Make16(a#341#0#0, 
        a#341#1#0, 
        a#341#2#0, 
        a#341#3#0, 
        a#341#4#0, 
        a#341#5#0, 
        a#341#6#0, 
        a#341#7#0, 
        a#341#8#0, 
        a#341#9#0, 
        a#341#10#0, 
        a#341#11#0, 
        a#341#12#0, 
        a#341#13#0, 
        a#341#14#0, 
        a#341#15#0)));

// Depth-one case-split function
function $IsA#_System.Tuple16(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple16(d) } 
  $IsA#_System.Tuple16(d) ==> _System.Tuple16.___hMake16_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#16$T0: Ty, 
    _System._tuple#16$T1: Ty, 
    _System._tuple#16$T2: Ty, 
    _System._tuple#16$T3: Ty, 
    _System._tuple#16$T4: Ty, 
    _System._tuple#16$T5: Ty, 
    _System._tuple#16$T6: Ty, 
    _System._tuple#16$T7: Ty, 
    _System._tuple#16$T8: Ty, 
    _System._tuple#16$T9: Ty, 
    _System._tuple#16$T10: Ty, 
    _System._tuple#16$T11: Ty, 
    _System._tuple#16$T12: Ty, 
    _System._tuple#16$T13: Ty, 
    _System._tuple#16$T14: Ty, 
    _System._tuple#16$T15: Ty, 
    d: DatatypeType :: 
  { _System.Tuple16.___hMake16_q(d), $Is(d, 
      Tclass._System.Tuple16(_System._tuple#16$T0, 
        _System._tuple#16$T1, 
        _System._tuple#16$T2, 
        _System._tuple#16$T3, 
        _System._tuple#16$T4, 
        _System._tuple#16$T5, 
        _System._tuple#16$T6, 
        _System._tuple#16$T7, 
        _System._tuple#16$T8, 
        _System._tuple#16$T9, 
        _System._tuple#16$T10, 
        _System._tuple#16$T11, 
        _System._tuple#16$T12, 
        _System._tuple#16$T13, 
        _System._tuple#16$T14, 
        _System._tuple#16$T15)) } 
  $Is(d, 
      Tclass._System.Tuple16(_System._tuple#16$T0, 
        _System._tuple#16$T1, 
        _System._tuple#16$T2, 
        _System._tuple#16$T3, 
        _System._tuple#16$T4, 
        _System._tuple#16$T5, 
        _System._tuple#16$T6, 
        _System._tuple#16$T7, 
        _System._tuple#16$T8, 
        _System._tuple#16$T9, 
        _System._tuple#16$T10, 
        _System._tuple#16$T11, 
        _System._tuple#16$T12, 
        _System._tuple#16$T13, 
        _System._tuple#16$T14, 
        _System._tuple#16$T15))
     ==> _System.Tuple16.___hMake16_q(d));

// Datatype extensional equality declaration
function _System.Tuple16#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#16._#Make16
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple16#Equal(a, b) } 
  _System.Tuple16#Equal(a, b)
     <==> _System.Tuple16._0(a) == _System.Tuple16._0(b)
       && _System.Tuple16._1(a) == _System.Tuple16._1(b)
       && _System.Tuple16._2(a) == _System.Tuple16._2(b)
       && _System.Tuple16._3(a) == _System.Tuple16._3(b)
       && _System.Tuple16._4(a) == _System.Tuple16._4(b)
       && _System.Tuple16._5(a) == _System.Tuple16._5(b)
       && _System.Tuple16._6(a) == _System.Tuple16._6(b)
       && _System.Tuple16._7(a) == _System.Tuple16._7(b)
       && _System.Tuple16._8(a) == _System.Tuple16._8(b)
       && _System.Tuple16._9(a) == _System.Tuple16._9(b)
       && _System.Tuple16._10(a) == _System.Tuple16._10(b)
       && _System.Tuple16._11(a) == _System.Tuple16._11(b)
       && _System.Tuple16._12(a) == _System.Tuple16._12(b)
       && _System.Tuple16._13(a) == _System.Tuple16._13(b)
       && _System.Tuple16._14(a) == _System.Tuple16._14(b)
       && _System.Tuple16._15(a) == _System.Tuple16._15(b));

// Datatype extensionality axiom: _System._tuple#16
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple16#Equal(a, b) } 
  _System.Tuple16#Equal(a, b) <==> a == b);

const unique class._System.Tuple16: ClassName;

// Constructor function declaration
function #_System._tuple#17._#Make17(Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : DatatypeType;

const unique ##_System._tuple#17._#Make17: DtCtorId
uses {
// Constructor identifier
axiom (forall a#342#0#0: Box, 
    a#342#1#0: Box, 
    a#342#2#0: Box, 
    a#342#3#0: Box, 
    a#342#4#0: Box, 
    a#342#5#0: Box, 
    a#342#6#0: Box, 
    a#342#7#0: Box, 
    a#342#8#0: Box, 
    a#342#9#0: Box, 
    a#342#10#0: Box, 
    a#342#11#0: Box, 
    a#342#12#0: Box, 
    a#342#13#0: Box, 
    a#342#14#0: Box, 
    a#342#15#0: Box, 
    a#342#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#342#0#0, 
      a#342#1#0, 
      a#342#2#0, 
      a#342#3#0, 
      a#342#4#0, 
      a#342#5#0, 
      a#342#6#0, 
      a#342#7#0, 
      a#342#8#0, 
      a#342#9#0, 
      a#342#10#0, 
      a#342#11#0, 
      a#342#12#0, 
      a#342#13#0, 
      a#342#14#0, 
      a#342#15#0, 
      a#342#16#0) } 
  DatatypeCtorId(#_System._tuple#17._#Make17(a#342#0#0, 
        a#342#1#0, 
        a#342#2#0, 
        a#342#3#0, 
        a#342#4#0, 
        a#342#5#0, 
        a#342#6#0, 
        a#342#7#0, 
        a#342#8#0, 
        a#342#9#0, 
        a#342#10#0, 
        a#342#11#0, 
        a#342#12#0, 
        a#342#13#0, 
        a#342#14#0, 
        a#342#15#0, 
        a#342#16#0))
     == ##_System._tuple#17._#Make17);
}

function _System.Tuple17.___hMake17_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple17.___hMake17_q(d) } 
  _System.Tuple17.___hMake17_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#17._#Make17);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple17.___hMake17_q(d) } 
  _System.Tuple17.___hMake17_q(d)
     ==> (exists a#343#0#0: Box, 
        a#343#1#0: Box, 
        a#343#2#0: Box, 
        a#343#3#0: Box, 
        a#343#4#0: Box, 
        a#343#5#0: Box, 
        a#343#6#0: Box, 
        a#343#7#0: Box, 
        a#343#8#0: Box, 
        a#343#9#0: Box, 
        a#343#10#0: Box, 
        a#343#11#0: Box, 
        a#343#12#0: Box, 
        a#343#13#0: Box, 
        a#343#14#0: Box, 
        a#343#15#0: Box, 
        a#343#16#0: Box :: 
      d
         == #_System._tuple#17._#Make17(a#343#0#0, 
          a#343#1#0, 
          a#343#2#0, 
          a#343#3#0, 
          a#343#4#0, 
          a#343#5#0, 
          a#343#6#0, 
          a#343#7#0, 
          a#343#8#0, 
          a#343#9#0, 
          a#343#10#0, 
          a#343#11#0, 
          a#343#12#0, 
          a#343#13#0, 
          a#343#14#0, 
          a#343#15#0, 
          a#343#16#0)));

function Tclass._System.Tuple17(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.Tuple17: TyTag;

// Tclass._System.Tuple17 Tag
axiom (forall _System._tuple#17$T0: Ty, 
    _System._tuple#17$T1: Ty, 
    _System._tuple#17$T2: Ty, 
    _System._tuple#17$T3: Ty, 
    _System._tuple#17$T4: Ty, 
    _System._tuple#17$T5: Ty, 
    _System._tuple#17$T6: Ty, 
    _System._tuple#17$T7: Ty, 
    _System._tuple#17$T8: Ty, 
    _System._tuple#17$T9: Ty, 
    _System._tuple#17$T10: Ty, 
    _System._tuple#17$T11: Ty, 
    _System._tuple#17$T12: Ty, 
    _System._tuple#17$T13: Ty, 
    _System._tuple#17$T14: Ty, 
    _System._tuple#17$T15: Ty, 
    _System._tuple#17$T16: Ty :: 
  { Tclass._System.Tuple17(_System._tuple#17$T0, 
      _System._tuple#17$T1, 
      _System._tuple#17$T2, 
      _System._tuple#17$T3, 
      _System._tuple#17$T4, 
      _System._tuple#17$T5, 
      _System._tuple#17$T6, 
      _System._tuple#17$T7, 
      _System._tuple#17$T8, 
      _System._tuple#17$T9, 
      _System._tuple#17$T10, 
      _System._tuple#17$T11, 
      _System._tuple#17$T12, 
      _System._tuple#17$T13, 
      _System._tuple#17$T14, 
      _System._tuple#17$T15, 
      _System._tuple#17$T16) } 
  Tag(Tclass._System.Tuple17(_System._tuple#17$T0, 
          _System._tuple#17$T1, 
          _System._tuple#17$T2, 
          _System._tuple#17$T3, 
          _System._tuple#17$T4, 
          _System._tuple#17$T5, 
          _System._tuple#17$T6, 
          _System._tuple#17$T7, 
          _System._tuple#17$T8, 
          _System._tuple#17$T9, 
          _System._tuple#17$T10, 
          _System._tuple#17$T11, 
          _System._tuple#17$T12, 
          _System._tuple#17$T13, 
          _System._tuple#17$T14, 
          _System._tuple#17$T15, 
          _System._tuple#17$T16))
       == Tagclass._System.Tuple17
     && TagFamily(Tclass._System.Tuple17(_System._tuple#17$T0, 
          _System._tuple#17$T1, 
          _System._tuple#17$T2, 
          _System._tuple#17$T3, 
          _System._tuple#17$T4, 
          _System._tuple#17$T5, 
          _System._tuple#17$T6, 
          _System._tuple#17$T7, 
          _System._tuple#17$T8, 
          _System._tuple#17$T9, 
          _System._tuple#17$T10, 
          _System._tuple#17$T11, 
          _System._tuple#17$T12, 
          _System._tuple#17$T13, 
          _System._tuple#17$T14, 
          _System._tuple#17$T15, 
          _System._tuple#17$T16))
       == tytagFamily$_tuple#17);

function Tclass._System.Tuple17_0(Ty) : Ty;

// Tclass._System.Tuple17 injectivity 0
axiom (forall _System._tuple#17$T0: Ty, 
    _System._tuple#17$T1: Ty, 
    _System._tuple#17$T2: Ty, 
    _System._tuple#17$T3: Ty, 
    _System._tuple#17$T4: Ty, 
    _System._tuple#17$T5: Ty, 
    _System._tuple#17$T6: Ty, 
    _System._tuple#17$T7: Ty, 
    _System._tuple#17$T8: Ty, 
    _System._tuple#17$T9: Ty, 
    _System._tuple#17$T10: Ty, 
    _System._tuple#17$T11: Ty, 
    _System._tuple#17$T12: Ty, 
    _System._tuple#17$T13: Ty, 
    _System._tuple#17$T14: Ty, 
    _System._tuple#17$T15: Ty, 
    _System._tuple#17$T16: Ty :: 
  { Tclass._System.Tuple17(_System._tuple#17$T0, 
      _System._tuple#17$T1, 
      _System._tuple#17$T2, 
      _System._tuple#17$T3, 
      _System._tuple#17$T4, 
      _System._tuple#17$T5, 
      _System._tuple#17$T6, 
      _System._tuple#17$T7, 
      _System._tuple#17$T8, 
      _System._tuple#17$T9, 
      _System._tuple#17$T10, 
      _System._tuple#17$T11, 
      _System._tuple#17$T12, 
      _System._tuple#17$T13, 
      _System._tuple#17$T14, 
      _System._tuple#17$T15, 
      _System._tuple#17$T16) } 
  Tclass._System.Tuple17_0(Tclass._System.Tuple17(_System._tuple#17$T0, 
        _System._tuple#17$T1, 
        _System._tuple#17$T2, 
        _System._tuple#17$T3, 
        _System._tuple#17$T4, 
        _System._tuple#17$T5, 
        _System._tuple#17$T6, 
        _System._tuple#17$T7, 
        _System._tuple#17$T8, 
        _System._tuple#17$T9, 
        _System._tuple#17$T10, 
        _System._tuple#17$T11, 
        _System._tuple#17$T12, 
        _System._tuple#17$T13, 
        _System._tuple#17$T14, 
        _System._tuple#17$T15, 
        _System._tuple#17$T16))
     == _System._tuple#17$T0);

function Tclass._System.Tuple17_1(Ty) : Ty;

// Tclass._System.Tuple17 injectivity 1
axiom (forall _System._tuple#17$T0: Ty, 
    _System._tuple#17$T1: Ty, 
    _System._tuple#17$T2: Ty, 
    _System._tuple#17$T3: Ty, 
    _System._tuple#17$T4: Ty, 
    _System._tuple#17$T5: Ty, 
    _System._tuple#17$T6: Ty, 
    _System._tuple#17$T7: Ty, 
    _System._tuple#17$T8: Ty, 
    _System._tuple#17$T9: Ty, 
    _System._tuple#17$T10: Ty, 
    _System._tuple#17$T11: Ty, 
    _System._tuple#17$T12: Ty, 
    _System._tuple#17$T13: Ty, 
    _System._tuple#17$T14: Ty, 
    _System._tuple#17$T15: Ty, 
    _System._tuple#17$T16: Ty :: 
  { Tclass._System.Tuple17(_System._tuple#17$T0, 
      _System._tuple#17$T1, 
      _System._tuple#17$T2, 
      _System._tuple#17$T3, 
      _System._tuple#17$T4, 
      _System._tuple#17$T5, 
      _System._tuple#17$T6, 
      _System._tuple#17$T7, 
      _System._tuple#17$T8, 
      _System._tuple#17$T9, 
      _System._tuple#17$T10, 
      _System._tuple#17$T11, 
      _System._tuple#17$T12, 
      _System._tuple#17$T13, 
      _System._tuple#17$T14, 
      _System._tuple#17$T15, 
      _System._tuple#17$T16) } 
  Tclass._System.Tuple17_1(Tclass._System.Tuple17(_System._tuple#17$T0, 
        _System._tuple#17$T1, 
        _System._tuple#17$T2, 
        _System._tuple#17$T3, 
        _System._tuple#17$T4, 
        _System._tuple#17$T5, 
        _System._tuple#17$T6, 
        _System._tuple#17$T7, 
        _System._tuple#17$T8, 
        _System._tuple#17$T9, 
        _System._tuple#17$T10, 
        _System._tuple#17$T11, 
        _System._tuple#17$T12, 
        _System._tuple#17$T13, 
        _System._tuple#17$T14, 
        _System._tuple#17$T15, 
        _System._tuple#17$T16))
     == _System._tuple#17$T1);

function Tclass._System.Tuple17_2(Ty) : Ty;

// Tclass._System.Tuple17 injectivity 2
axiom (forall _System._tuple#17$T0: Ty, 
    _System._tuple#17$T1: Ty, 
    _System._tuple#17$T2: Ty, 
    _System._tuple#17$T3: Ty, 
    _System._tuple#17$T4: Ty, 
    _System._tuple#17$T5: Ty, 
    _System._tuple#17$T6: Ty, 
    _System._tuple#17$T7: Ty, 
    _System._tuple#17$T8: Ty, 
    _System._tuple#17$T9: Ty, 
    _System._tuple#17$T10: Ty, 
    _System._tuple#17$T11: Ty, 
    _System._tuple#17$T12: Ty, 
    _System._tuple#17$T13: Ty, 
    _System._tuple#17$T14: Ty, 
    _System._tuple#17$T15: Ty, 
    _System._tuple#17$T16: Ty :: 
  { Tclass._System.Tuple17(_System._tuple#17$T0, 
      _System._tuple#17$T1, 
      _System._tuple#17$T2, 
      _System._tuple#17$T3, 
      _System._tuple#17$T4, 
      _System._tuple#17$T5, 
      _System._tuple#17$T6, 
      _System._tuple#17$T7, 
      _System._tuple#17$T8, 
      _System._tuple#17$T9, 
      _System._tuple#17$T10, 
      _System._tuple#17$T11, 
      _System._tuple#17$T12, 
      _System._tuple#17$T13, 
      _System._tuple#17$T14, 
      _System._tuple#17$T15, 
      _System._tuple#17$T16) } 
  Tclass._System.Tuple17_2(Tclass._System.Tuple17(_System._tuple#17$T0, 
        _System._tuple#17$T1, 
        _System._tuple#17$T2, 
        _System._tuple#17$T3, 
        _System._tuple#17$T4, 
        _System._tuple#17$T5, 
        _System._tuple#17$T6, 
        _System._tuple#17$T7, 
        _System._tuple#17$T8, 
        _System._tuple#17$T9, 
        _System._tuple#17$T10, 
        _System._tuple#17$T11, 
        _System._tuple#17$T12, 
        _System._tuple#17$T13, 
        _System._tuple#17$T14, 
        _System._tuple#17$T15, 
        _System._tuple#17$T16))
     == _System._tuple#17$T2);

function Tclass._System.Tuple17_3(Ty) : Ty;

// Tclass._System.Tuple17 injectivity 3
axiom (forall _System._tuple#17$T0: Ty, 
    _System._tuple#17$T1: Ty, 
    _System._tuple#17$T2: Ty, 
    _System._tuple#17$T3: Ty, 
    _System._tuple#17$T4: Ty, 
    _System._tuple#17$T5: Ty, 
    _System._tuple#17$T6: Ty, 
    _System._tuple#17$T7: Ty, 
    _System._tuple#17$T8: Ty, 
    _System._tuple#17$T9: Ty, 
    _System._tuple#17$T10: Ty, 
    _System._tuple#17$T11: Ty, 
    _System._tuple#17$T12: Ty, 
    _System._tuple#17$T13: Ty, 
    _System._tuple#17$T14: Ty, 
    _System._tuple#17$T15: Ty, 
    _System._tuple#17$T16: Ty :: 
  { Tclass._System.Tuple17(_System._tuple#17$T0, 
      _System._tuple#17$T1, 
      _System._tuple#17$T2, 
      _System._tuple#17$T3, 
      _System._tuple#17$T4, 
      _System._tuple#17$T5, 
      _System._tuple#17$T6, 
      _System._tuple#17$T7, 
      _System._tuple#17$T8, 
      _System._tuple#17$T9, 
      _System._tuple#17$T10, 
      _System._tuple#17$T11, 
      _System._tuple#17$T12, 
      _System._tuple#17$T13, 
      _System._tuple#17$T14, 
      _System._tuple#17$T15, 
      _System._tuple#17$T16) } 
  Tclass._System.Tuple17_3(Tclass._System.Tuple17(_System._tuple#17$T0, 
        _System._tuple#17$T1, 
        _System._tuple#17$T2, 
        _System._tuple#17$T3, 
        _System._tuple#17$T4, 
        _System._tuple#17$T5, 
        _System._tuple#17$T6, 
        _System._tuple#17$T7, 
        _System._tuple#17$T8, 
        _System._tuple#17$T9, 
        _System._tuple#17$T10, 
        _System._tuple#17$T11, 
        _System._tuple#17$T12, 
        _System._tuple#17$T13, 
        _System._tuple#17$T14, 
        _System._tuple#17$T15, 
        _System._tuple#17$T16))
     == _System._tuple#17$T3);

function Tclass._System.Tuple17_4(Ty) : Ty;

// Tclass._System.Tuple17 injectivity 4
axiom (forall _System._tuple#17$T0: Ty, 
    _System._tuple#17$T1: Ty, 
    _System._tuple#17$T2: Ty, 
    _System._tuple#17$T3: Ty, 
    _System._tuple#17$T4: Ty, 
    _System._tuple#17$T5: Ty, 
    _System._tuple#17$T6: Ty, 
    _System._tuple#17$T7: Ty, 
    _System._tuple#17$T8: Ty, 
    _System._tuple#17$T9: Ty, 
    _System._tuple#17$T10: Ty, 
    _System._tuple#17$T11: Ty, 
    _System._tuple#17$T12: Ty, 
    _System._tuple#17$T13: Ty, 
    _System._tuple#17$T14: Ty, 
    _System._tuple#17$T15: Ty, 
    _System._tuple#17$T16: Ty :: 
  { Tclass._System.Tuple17(_System._tuple#17$T0, 
      _System._tuple#17$T1, 
      _System._tuple#17$T2, 
      _System._tuple#17$T3, 
      _System._tuple#17$T4, 
      _System._tuple#17$T5, 
      _System._tuple#17$T6, 
      _System._tuple#17$T7, 
      _System._tuple#17$T8, 
      _System._tuple#17$T9, 
      _System._tuple#17$T10, 
      _System._tuple#17$T11, 
      _System._tuple#17$T12, 
      _System._tuple#17$T13, 
      _System._tuple#17$T14, 
      _System._tuple#17$T15, 
      _System._tuple#17$T16) } 
  Tclass._System.Tuple17_4(Tclass._System.Tuple17(_System._tuple#17$T0, 
        _System._tuple#17$T1, 
        _System._tuple#17$T2, 
        _System._tuple#17$T3, 
        _System._tuple#17$T4, 
        _System._tuple#17$T5, 
        _System._tuple#17$T6, 
        _System._tuple#17$T7, 
        _System._tuple#17$T8, 
        _System._tuple#17$T9, 
        _System._tuple#17$T10, 
        _System._tuple#17$T11, 
        _System._tuple#17$T12, 
        _System._tuple#17$T13, 
        _System._tuple#17$T14, 
        _System._tuple#17$T15, 
        _System._tuple#17$T16))
     == _System._tuple#17$T4);

function Tclass._System.Tuple17_5(Ty) : Ty;

// Tclass._System.Tuple17 injectivity 5
axiom (forall _System._tuple#17$T0: Ty, 
    _System._tuple#17$T1: Ty, 
    _System._tuple#17$T2: Ty, 
    _System._tuple#17$T3: Ty, 
    _System._tuple#17$T4: Ty, 
    _System._tuple#17$T5: Ty, 
    _System._tuple#17$T6: Ty, 
    _System._tuple#17$T7: Ty, 
    _System._tuple#17$T8: Ty, 
    _System._tuple#17$T9: Ty, 
    _System._tuple#17$T10: Ty, 
    _System._tuple#17$T11: Ty, 
    _System._tuple#17$T12: Ty, 
    _System._tuple#17$T13: Ty, 
    _System._tuple#17$T14: Ty, 
    _System._tuple#17$T15: Ty, 
    _System._tuple#17$T16: Ty :: 
  { Tclass._System.Tuple17(_System._tuple#17$T0, 
      _System._tuple#17$T1, 
      _System._tuple#17$T2, 
      _System._tuple#17$T3, 
      _System._tuple#17$T4, 
      _System._tuple#17$T5, 
      _System._tuple#17$T6, 
      _System._tuple#17$T7, 
      _System._tuple#17$T8, 
      _System._tuple#17$T9, 
      _System._tuple#17$T10, 
      _System._tuple#17$T11, 
      _System._tuple#17$T12, 
      _System._tuple#17$T13, 
      _System._tuple#17$T14, 
      _System._tuple#17$T15, 
      _System._tuple#17$T16) } 
  Tclass._System.Tuple17_5(Tclass._System.Tuple17(_System._tuple#17$T0, 
        _System._tuple#17$T1, 
        _System._tuple#17$T2, 
        _System._tuple#17$T3, 
        _System._tuple#17$T4, 
        _System._tuple#17$T5, 
        _System._tuple#17$T6, 
        _System._tuple#17$T7, 
        _System._tuple#17$T8, 
        _System._tuple#17$T9, 
        _System._tuple#17$T10, 
        _System._tuple#17$T11, 
        _System._tuple#17$T12, 
        _System._tuple#17$T13, 
        _System._tuple#17$T14, 
        _System._tuple#17$T15, 
        _System._tuple#17$T16))
     == _System._tuple#17$T5);

function Tclass._System.Tuple17_6(Ty) : Ty;

// Tclass._System.Tuple17 injectivity 6
axiom (forall _System._tuple#17$T0: Ty, 
    _System._tuple#17$T1: Ty, 
    _System._tuple#17$T2: Ty, 
    _System._tuple#17$T3: Ty, 
    _System._tuple#17$T4: Ty, 
    _System._tuple#17$T5: Ty, 
    _System._tuple#17$T6: Ty, 
    _System._tuple#17$T7: Ty, 
    _System._tuple#17$T8: Ty, 
    _System._tuple#17$T9: Ty, 
    _System._tuple#17$T10: Ty, 
    _System._tuple#17$T11: Ty, 
    _System._tuple#17$T12: Ty, 
    _System._tuple#17$T13: Ty, 
    _System._tuple#17$T14: Ty, 
    _System._tuple#17$T15: Ty, 
    _System._tuple#17$T16: Ty :: 
  { Tclass._System.Tuple17(_System._tuple#17$T0, 
      _System._tuple#17$T1, 
      _System._tuple#17$T2, 
      _System._tuple#17$T3, 
      _System._tuple#17$T4, 
      _System._tuple#17$T5, 
      _System._tuple#17$T6, 
      _System._tuple#17$T7, 
      _System._tuple#17$T8, 
      _System._tuple#17$T9, 
      _System._tuple#17$T10, 
      _System._tuple#17$T11, 
      _System._tuple#17$T12, 
      _System._tuple#17$T13, 
      _System._tuple#17$T14, 
      _System._tuple#17$T15, 
      _System._tuple#17$T16) } 
  Tclass._System.Tuple17_6(Tclass._System.Tuple17(_System._tuple#17$T0, 
        _System._tuple#17$T1, 
        _System._tuple#17$T2, 
        _System._tuple#17$T3, 
        _System._tuple#17$T4, 
        _System._tuple#17$T5, 
        _System._tuple#17$T6, 
        _System._tuple#17$T7, 
        _System._tuple#17$T8, 
        _System._tuple#17$T9, 
        _System._tuple#17$T10, 
        _System._tuple#17$T11, 
        _System._tuple#17$T12, 
        _System._tuple#17$T13, 
        _System._tuple#17$T14, 
        _System._tuple#17$T15, 
        _System._tuple#17$T16))
     == _System._tuple#17$T6);

function Tclass._System.Tuple17_7(Ty) : Ty;

// Tclass._System.Tuple17 injectivity 7
axiom (forall _System._tuple#17$T0: Ty, 
    _System._tuple#17$T1: Ty, 
    _System._tuple#17$T2: Ty, 
    _System._tuple#17$T3: Ty, 
    _System._tuple#17$T4: Ty, 
    _System._tuple#17$T5: Ty, 
    _System._tuple#17$T6: Ty, 
    _System._tuple#17$T7: Ty, 
    _System._tuple#17$T8: Ty, 
    _System._tuple#17$T9: Ty, 
    _System._tuple#17$T10: Ty, 
    _System._tuple#17$T11: Ty, 
    _System._tuple#17$T12: Ty, 
    _System._tuple#17$T13: Ty, 
    _System._tuple#17$T14: Ty, 
    _System._tuple#17$T15: Ty, 
    _System._tuple#17$T16: Ty :: 
  { Tclass._System.Tuple17(_System._tuple#17$T0, 
      _System._tuple#17$T1, 
      _System._tuple#17$T2, 
      _System._tuple#17$T3, 
      _System._tuple#17$T4, 
      _System._tuple#17$T5, 
      _System._tuple#17$T6, 
      _System._tuple#17$T7, 
      _System._tuple#17$T8, 
      _System._tuple#17$T9, 
      _System._tuple#17$T10, 
      _System._tuple#17$T11, 
      _System._tuple#17$T12, 
      _System._tuple#17$T13, 
      _System._tuple#17$T14, 
      _System._tuple#17$T15, 
      _System._tuple#17$T16) } 
  Tclass._System.Tuple17_7(Tclass._System.Tuple17(_System._tuple#17$T0, 
        _System._tuple#17$T1, 
        _System._tuple#17$T2, 
        _System._tuple#17$T3, 
        _System._tuple#17$T4, 
        _System._tuple#17$T5, 
        _System._tuple#17$T6, 
        _System._tuple#17$T7, 
        _System._tuple#17$T8, 
        _System._tuple#17$T9, 
        _System._tuple#17$T10, 
        _System._tuple#17$T11, 
        _System._tuple#17$T12, 
        _System._tuple#17$T13, 
        _System._tuple#17$T14, 
        _System._tuple#17$T15, 
        _System._tuple#17$T16))
     == _System._tuple#17$T7);

function Tclass._System.Tuple17_8(Ty) : Ty;

// Tclass._System.Tuple17 injectivity 8
axiom (forall _System._tuple#17$T0: Ty, 
    _System._tuple#17$T1: Ty, 
    _System._tuple#17$T2: Ty, 
    _System._tuple#17$T3: Ty, 
    _System._tuple#17$T4: Ty, 
    _System._tuple#17$T5: Ty, 
    _System._tuple#17$T6: Ty, 
    _System._tuple#17$T7: Ty, 
    _System._tuple#17$T8: Ty, 
    _System._tuple#17$T9: Ty, 
    _System._tuple#17$T10: Ty, 
    _System._tuple#17$T11: Ty, 
    _System._tuple#17$T12: Ty, 
    _System._tuple#17$T13: Ty, 
    _System._tuple#17$T14: Ty, 
    _System._tuple#17$T15: Ty, 
    _System._tuple#17$T16: Ty :: 
  { Tclass._System.Tuple17(_System._tuple#17$T0, 
      _System._tuple#17$T1, 
      _System._tuple#17$T2, 
      _System._tuple#17$T3, 
      _System._tuple#17$T4, 
      _System._tuple#17$T5, 
      _System._tuple#17$T6, 
      _System._tuple#17$T7, 
      _System._tuple#17$T8, 
      _System._tuple#17$T9, 
      _System._tuple#17$T10, 
      _System._tuple#17$T11, 
      _System._tuple#17$T12, 
      _System._tuple#17$T13, 
      _System._tuple#17$T14, 
      _System._tuple#17$T15, 
      _System._tuple#17$T16) } 
  Tclass._System.Tuple17_8(Tclass._System.Tuple17(_System._tuple#17$T0, 
        _System._tuple#17$T1, 
        _System._tuple#17$T2, 
        _System._tuple#17$T3, 
        _System._tuple#17$T4, 
        _System._tuple#17$T5, 
        _System._tuple#17$T6, 
        _System._tuple#17$T7, 
        _System._tuple#17$T8, 
        _System._tuple#17$T9, 
        _System._tuple#17$T10, 
        _System._tuple#17$T11, 
        _System._tuple#17$T12, 
        _System._tuple#17$T13, 
        _System._tuple#17$T14, 
        _System._tuple#17$T15, 
        _System._tuple#17$T16))
     == _System._tuple#17$T8);

function Tclass._System.Tuple17_9(Ty) : Ty;

// Tclass._System.Tuple17 injectivity 9
axiom (forall _System._tuple#17$T0: Ty, 
    _System._tuple#17$T1: Ty, 
    _System._tuple#17$T2: Ty, 
    _System._tuple#17$T3: Ty, 
    _System._tuple#17$T4: Ty, 
    _System._tuple#17$T5: Ty, 
    _System._tuple#17$T6: Ty, 
    _System._tuple#17$T7: Ty, 
    _System._tuple#17$T8: Ty, 
    _System._tuple#17$T9: Ty, 
    _System._tuple#17$T10: Ty, 
    _System._tuple#17$T11: Ty, 
    _System._tuple#17$T12: Ty, 
    _System._tuple#17$T13: Ty, 
    _System._tuple#17$T14: Ty, 
    _System._tuple#17$T15: Ty, 
    _System._tuple#17$T16: Ty :: 
  { Tclass._System.Tuple17(_System._tuple#17$T0, 
      _System._tuple#17$T1, 
      _System._tuple#17$T2, 
      _System._tuple#17$T3, 
      _System._tuple#17$T4, 
      _System._tuple#17$T5, 
      _System._tuple#17$T6, 
      _System._tuple#17$T7, 
      _System._tuple#17$T8, 
      _System._tuple#17$T9, 
      _System._tuple#17$T10, 
      _System._tuple#17$T11, 
      _System._tuple#17$T12, 
      _System._tuple#17$T13, 
      _System._tuple#17$T14, 
      _System._tuple#17$T15, 
      _System._tuple#17$T16) } 
  Tclass._System.Tuple17_9(Tclass._System.Tuple17(_System._tuple#17$T0, 
        _System._tuple#17$T1, 
        _System._tuple#17$T2, 
        _System._tuple#17$T3, 
        _System._tuple#17$T4, 
        _System._tuple#17$T5, 
        _System._tuple#17$T6, 
        _System._tuple#17$T7, 
        _System._tuple#17$T8, 
        _System._tuple#17$T9, 
        _System._tuple#17$T10, 
        _System._tuple#17$T11, 
        _System._tuple#17$T12, 
        _System._tuple#17$T13, 
        _System._tuple#17$T14, 
        _System._tuple#17$T15, 
        _System._tuple#17$T16))
     == _System._tuple#17$T9);

function Tclass._System.Tuple17_10(Ty) : Ty;

// Tclass._System.Tuple17 injectivity 10
axiom (forall _System._tuple#17$T0: Ty, 
    _System._tuple#17$T1: Ty, 
    _System._tuple#17$T2: Ty, 
    _System._tuple#17$T3: Ty, 
    _System._tuple#17$T4: Ty, 
    _System._tuple#17$T5: Ty, 
    _System._tuple#17$T6: Ty, 
    _System._tuple#17$T7: Ty, 
    _System._tuple#17$T8: Ty, 
    _System._tuple#17$T9: Ty, 
    _System._tuple#17$T10: Ty, 
    _System._tuple#17$T11: Ty, 
    _System._tuple#17$T12: Ty, 
    _System._tuple#17$T13: Ty, 
    _System._tuple#17$T14: Ty, 
    _System._tuple#17$T15: Ty, 
    _System._tuple#17$T16: Ty :: 
  { Tclass._System.Tuple17(_System._tuple#17$T0, 
      _System._tuple#17$T1, 
      _System._tuple#17$T2, 
      _System._tuple#17$T3, 
      _System._tuple#17$T4, 
      _System._tuple#17$T5, 
      _System._tuple#17$T6, 
      _System._tuple#17$T7, 
      _System._tuple#17$T8, 
      _System._tuple#17$T9, 
      _System._tuple#17$T10, 
      _System._tuple#17$T11, 
      _System._tuple#17$T12, 
      _System._tuple#17$T13, 
      _System._tuple#17$T14, 
      _System._tuple#17$T15, 
      _System._tuple#17$T16) } 
  Tclass._System.Tuple17_10(Tclass._System.Tuple17(_System._tuple#17$T0, 
        _System._tuple#17$T1, 
        _System._tuple#17$T2, 
        _System._tuple#17$T3, 
        _System._tuple#17$T4, 
        _System._tuple#17$T5, 
        _System._tuple#17$T6, 
        _System._tuple#17$T7, 
        _System._tuple#17$T8, 
        _System._tuple#17$T9, 
        _System._tuple#17$T10, 
        _System._tuple#17$T11, 
        _System._tuple#17$T12, 
        _System._tuple#17$T13, 
        _System._tuple#17$T14, 
        _System._tuple#17$T15, 
        _System._tuple#17$T16))
     == _System._tuple#17$T10);

function Tclass._System.Tuple17_11(Ty) : Ty;

// Tclass._System.Tuple17 injectivity 11
axiom (forall _System._tuple#17$T0: Ty, 
    _System._tuple#17$T1: Ty, 
    _System._tuple#17$T2: Ty, 
    _System._tuple#17$T3: Ty, 
    _System._tuple#17$T4: Ty, 
    _System._tuple#17$T5: Ty, 
    _System._tuple#17$T6: Ty, 
    _System._tuple#17$T7: Ty, 
    _System._tuple#17$T8: Ty, 
    _System._tuple#17$T9: Ty, 
    _System._tuple#17$T10: Ty, 
    _System._tuple#17$T11: Ty, 
    _System._tuple#17$T12: Ty, 
    _System._tuple#17$T13: Ty, 
    _System._tuple#17$T14: Ty, 
    _System._tuple#17$T15: Ty, 
    _System._tuple#17$T16: Ty :: 
  { Tclass._System.Tuple17(_System._tuple#17$T0, 
      _System._tuple#17$T1, 
      _System._tuple#17$T2, 
      _System._tuple#17$T3, 
      _System._tuple#17$T4, 
      _System._tuple#17$T5, 
      _System._tuple#17$T6, 
      _System._tuple#17$T7, 
      _System._tuple#17$T8, 
      _System._tuple#17$T9, 
      _System._tuple#17$T10, 
      _System._tuple#17$T11, 
      _System._tuple#17$T12, 
      _System._tuple#17$T13, 
      _System._tuple#17$T14, 
      _System._tuple#17$T15, 
      _System._tuple#17$T16) } 
  Tclass._System.Tuple17_11(Tclass._System.Tuple17(_System._tuple#17$T0, 
        _System._tuple#17$T1, 
        _System._tuple#17$T2, 
        _System._tuple#17$T3, 
        _System._tuple#17$T4, 
        _System._tuple#17$T5, 
        _System._tuple#17$T6, 
        _System._tuple#17$T7, 
        _System._tuple#17$T8, 
        _System._tuple#17$T9, 
        _System._tuple#17$T10, 
        _System._tuple#17$T11, 
        _System._tuple#17$T12, 
        _System._tuple#17$T13, 
        _System._tuple#17$T14, 
        _System._tuple#17$T15, 
        _System._tuple#17$T16))
     == _System._tuple#17$T11);

function Tclass._System.Tuple17_12(Ty) : Ty;

// Tclass._System.Tuple17 injectivity 12
axiom (forall _System._tuple#17$T0: Ty, 
    _System._tuple#17$T1: Ty, 
    _System._tuple#17$T2: Ty, 
    _System._tuple#17$T3: Ty, 
    _System._tuple#17$T4: Ty, 
    _System._tuple#17$T5: Ty, 
    _System._tuple#17$T6: Ty, 
    _System._tuple#17$T7: Ty, 
    _System._tuple#17$T8: Ty, 
    _System._tuple#17$T9: Ty, 
    _System._tuple#17$T10: Ty, 
    _System._tuple#17$T11: Ty, 
    _System._tuple#17$T12: Ty, 
    _System._tuple#17$T13: Ty, 
    _System._tuple#17$T14: Ty, 
    _System._tuple#17$T15: Ty, 
    _System._tuple#17$T16: Ty :: 
  { Tclass._System.Tuple17(_System._tuple#17$T0, 
      _System._tuple#17$T1, 
      _System._tuple#17$T2, 
      _System._tuple#17$T3, 
      _System._tuple#17$T4, 
      _System._tuple#17$T5, 
      _System._tuple#17$T6, 
      _System._tuple#17$T7, 
      _System._tuple#17$T8, 
      _System._tuple#17$T9, 
      _System._tuple#17$T10, 
      _System._tuple#17$T11, 
      _System._tuple#17$T12, 
      _System._tuple#17$T13, 
      _System._tuple#17$T14, 
      _System._tuple#17$T15, 
      _System._tuple#17$T16) } 
  Tclass._System.Tuple17_12(Tclass._System.Tuple17(_System._tuple#17$T0, 
        _System._tuple#17$T1, 
        _System._tuple#17$T2, 
        _System._tuple#17$T3, 
        _System._tuple#17$T4, 
        _System._tuple#17$T5, 
        _System._tuple#17$T6, 
        _System._tuple#17$T7, 
        _System._tuple#17$T8, 
        _System._tuple#17$T9, 
        _System._tuple#17$T10, 
        _System._tuple#17$T11, 
        _System._tuple#17$T12, 
        _System._tuple#17$T13, 
        _System._tuple#17$T14, 
        _System._tuple#17$T15, 
        _System._tuple#17$T16))
     == _System._tuple#17$T12);

function Tclass._System.Tuple17_13(Ty) : Ty;

// Tclass._System.Tuple17 injectivity 13
axiom (forall _System._tuple#17$T0: Ty, 
    _System._tuple#17$T1: Ty, 
    _System._tuple#17$T2: Ty, 
    _System._tuple#17$T3: Ty, 
    _System._tuple#17$T4: Ty, 
    _System._tuple#17$T5: Ty, 
    _System._tuple#17$T6: Ty, 
    _System._tuple#17$T7: Ty, 
    _System._tuple#17$T8: Ty, 
    _System._tuple#17$T9: Ty, 
    _System._tuple#17$T10: Ty, 
    _System._tuple#17$T11: Ty, 
    _System._tuple#17$T12: Ty, 
    _System._tuple#17$T13: Ty, 
    _System._tuple#17$T14: Ty, 
    _System._tuple#17$T15: Ty, 
    _System._tuple#17$T16: Ty :: 
  { Tclass._System.Tuple17(_System._tuple#17$T0, 
      _System._tuple#17$T1, 
      _System._tuple#17$T2, 
      _System._tuple#17$T3, 
      _System._tuple#17$T4, 
      _System._tuple#17$T5, 
      _System._tuple#17$T6, 
      _System._tuple#17$T7, 
      _System._tuple#17$T8, 
      _System._tuple#17$T9, 
      _System._tuple#17$T10, 
      _System._tuple#17$T11, 
      _System._tuple#17$T12, 
      _System._tuple#17$T13, 
      _System._tuple#17$T14, 
      _System._tuple#17$T15, 
      _System._tuple#17$T16) } 
  Tclass._System.Tuple17_13(Tclass._System.Tuple17(_System._tuple#17$T0, 
        _System._tuple#17$T1, 
        _System._tuple#17$T2, 
        _System._tuple#17$T3, 
        _System._tuple#17$T4, 
        _System._tuple#17$T5, 
        _System._tuple#17$T6, 
        _System._tuple#17$T7, 
        _System._tuple#17$T8, 
        _System._tuple#17$T9, 
        _System._tuple#17$T10, 
        _System._tuple#17$T11, 
        _System._tuple#17$T12, 
        _System._tuple#17$T13, 
        _System._tuple#17$T14, 
        _System._tuple#17$T15, 
        _System._tuple#17$T16))
     == _System._tuple#17$T13);

function Tclass._System.Tuple17_14(Ty) : Ty;

// Tclass._System.Tuple17 injectivity 14
axiom (forall _System._tuple#17$T0: Ty, 
    _System._tuple#17$T1: Ty, 
    _System._tuple#17$T2: Ty, 
    _System._tuple#17$T3: Ty, 
    _System._tuple#17$T4: Ty, 
    _System._tuple#17$T5: Ty, 
    _System._tuple#17$T6: Ty, 
    _System._tuple#17$T7: Ty, 
    _System._tuple#17$T8: Ty, 
    _System._tuple#17$T9: Ty, 
    _System._tuple#17$T10: Ty, 
    _System._tuple#17$T11: Ty, 
    _System._tuple#17$T12: Ty, 
    _System._tuple#17$T13: Ty, 
    _System._tuple#17$T14: Ty, 
    _System._tuple#17$T15: Ty, 
    _System._tuple#17$T16: Ty :: 
  { Tclass._System.Tuple17(_System._tuple#17$T0, 
      _System._tuple#17$T1, 
      _System._tuple#17$T2, 
      _System._tuple#17$T3, 
      _System._tuple#17$T4, 
      _System._tuple#17$T5, 
      _System._tuple#17$T6, 
      _System._tuple#17$T7, 
      _System._tuple#17$T8, 
      _System._tuple#17$T9, 
      _System._tuple#17$T10, 
      _System._tuple#17$T11, 
      _System._tuple#17$T12, 
      _System._tuple#17$T13, 
      _System._tuple#17$T14, 
      _System._tuple#17$T15, 
      _System._tuple#17$T16) } 
  Tclass._System.Tuple17_14(Tclass._System.Tuple17(_System._tuple#17$T0, 
        _System._tuple#17$T1, 
        _System._tuple#17$T2, 
        _System._tuple#17$T3, 
        _System._tuple#17$T4, 
        _System._tuple#17$T5, 
        _System._tuple#17$T6, 
        _System._tuple#17$T7, 
        _System._tuple#17$T8, 
        _System._tuple#17$T9, 
        _System._tuple#17$T10, 
        _System._tuple#17$T11, 
        _System._tuple#17$T12, 
        _System._tuple#17$T13, 
        _System._tuple#17$T14, 
        _System._tuple#17$T15, 
        _System._tuple#17$T16))
     == _System._tuple#17$T14);

function Tclass._System.Tuple17_15(Ty) : Ty;

// Tclass._System.Tuple17 injectivity 15
axiom (forall _System._tuple#17$T0: Ty, 
    _System._tuple#17$T1: Ty, 
    _System._tuple#17$T2: Ty, 
    _System._tuple#17$T3: Ty, 
    _System._tuple#17$T4: Ty, 
    _System._tuple#17$T5: Ty, 
    _System._tuple#17$T6: Ty, 
    _System._tuple#17$T7: Ty, 
    _System._tuple#17$T8: Ty, 
    _System._tuple#17$T9: Ty, 
    _System._tuple#17$T10: Ty, 
    _System._tuple#17$T11: Ty, 
    _System._tuple#17$T12: Ty, 
    _System._tuple#17$T13: Ty, 
    _System._tuple#17$T14: Ty, 
    _System._tuple#17$T15: Ty, 
    _System._tuple#17$T16: Ty :: 
  { Tclass._System.Tuple17(_System._tuple#17$T0, 
      _System._tuple#17$T1, 
      _System._tuple#17$T2, 
      _System._tuple#17$T3, 
      _System._tuple#17$T4, 
      _System._tuple#17$T5, 
      _System._tuple#17$T6, 
      _System._tuple#17$T7, 
      _System._tuple#17$T8, 
      _System._tuple#17$T9, 
      _System._tuple#17$T10, 
      _System._tuple#17$T11, 
      _System._tuple#17$T12, 
      _System._tuple#17$T13, 
      _System._tuple#17$T14, 
      _System._tuple#17$T15, 
      _System._tuple#17$T16) } 
  Tclass._System.Tuple17_15(Tclass._System.Tuple17(_System._tuple#17$T0, 
        _System._tuple#17$T1, 
        _System._tuple#17$T2, 
        _System._tuple#17$T3, 
        _System._tuple#17$T4, 
        _System._tuple#17$T5, 
        _System._tuple#17$T6, 
        _System._tuple#17$T7, 
        _System._tuple#17$T8, 
        _System._tuple#17$T9, 
        _System._tuple#17$T10, 
        _System._tuple#17$T11, 
        _System._tuple#17$T12, 
        _System._tuple#17$T13, 
        _System._tuple#17$T14, 
        _System._tuple#17$T15, 
        _System._tuple#17$T16))
     == _System._tuple#17$T15);

function Tclass._System.Tuple17_16(Ty) : Ty;

// Tclass._System.Tuple17 injectivity 16
axiom (forall _System._tuple#17$T0: Ty, 
    _System._tuple#17$T1: Ty, 
    _System._tuple#17$T2: Ty, 
    _System._tuple#17$T3: Ty, 
    _System._tuple#17$T4: Ty, 
    _System._tuple#17$T5: Ty, 
    _System._tuple#17$T6: Ty, 
    _System._tuple#17$T7: Ty, 
    _System._tuple#17$T8: Ty, 
    _System._tuple#17$T9: Ty, 
    _System._tuple#17$T10: Ty, 
    _System._tuple#17$T11: Ty, 
    _System._tuple#17$T12: Ty, 
    _System._tuple#17$T13: Ty, 
    _System._tuple#17$T14: Ty, 
    _System._tuple#17$T15: Ty, 
    _System._tuple#17$T16: Ty :: 
  { Tclass._System.Tuple17(_System._tuple#17$T0, 
      _System._tuple#17$T1, 
      _System._tuple#17$T2, 
      _System._tuple#17$T3, 
      _System._tuple#17$T4, 
      _System._tuple#17$T5, 
      _System._tuple#17$T6, 
      _System._tuple#17$T7, 
      _System._tuple#17$T8, 
      _System._tuple#17$T9, 
      _System._tuple#17$T10, 
      _System._tuple#17$T11, 
      _System._tuple#17$T12, 
      _System._tuple#17$T13, 
      _System._tuple#17$T14, 
      _System._tuple#17$T15, 
      _System._tuple#17$T16) } 
  Tclass._System.Tuple17_16(Tclass._System.Tuple17(_System._tuple#17$T0, 
        _System._tuple#17$T1, 
        _System._tuple#17$T2, 
        _System._tuple#17$T3, 
        _System._tuple#17$T4, 
        _System._tuple#17$T5, 
        _System._tuple#17$T6, 
        _System._tuple#17$T7, 
        _System._tuple#17$T8, 
        _System._tuple#17$T9, 
        _System._tuple#17$T10, 
        _System._tuple#17$T11, 
        _System._tuple#17$T12, 
        _System._tuple#17$T13, 
        _System._tuple#17$T14, 
        _System._tuple#17$T15, 
        _System._tuple#17$T16))
     == _System._tuple#17$T16);

// Box/unbox axiom for Tclass._System.Tuple17
axiom (forall _System._tuple#17$T0: Ty, 
    _System._tuple#17$T1: Ty, 
    _System._tuple#17$T2: Ty, 
    _System._tuple#17$T3: Ty, 
    _System._tuple#17$T4: Ty, 
    _System._tuple#17$T5: Ty, 
    _System._tuple#17$T6: Ty, 
    _System._tuple#17$T7: Ty, 
    _System._tuple#17$T8: Ty, 
    _System._tuple#17$T9: Ty, 
    _System._tuple#17$T10: Ty, 
    _System._tuple#17$T11: Ty, 
    _System._tuple#17$T12: Ty, 
    _System._tuple#17$T13: Ty, 
    _System._tuple#17$T14: Ty, 
    _System._tuple#17$T15: Ty, 
    _System._tuple#17$T16: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.Tuple17(_System._tuple#17$T0, 
        _System._tuple#17$T1, 
        _System._tuple#17$T2, 
        _System._tuple#17$T3, 
        _System._tuple#17$T4, 
        _System._tuple#17$T5, 
        _System._tuple#17$T6, 
        _System._tuple#17$T7, 
        _System._tuple#17$T8, 
        _System._tuple#17$T9, 
        _System._tuple#17$T10, 
        _System._tuple#17$T11, 
        _System._tuple#17$T12, 
        _System._tuple#17$T13, 
        _System._tuple#17$T14, 
        _System._tuple#17$T15, 
        _System._tuple#17$T16)) } 
  $IsBox(bx, 
      Tclass._System.Tuple17(_System._tuple#17$T0, 
        _System._tuple#17$T1, 
        _System._tuple#17$T2, 
        _System._tuple#17$T3, 
        _System._tuple#17$T4, 
        _System._tuple#17$T5, 
        _System._tuple#17$T6, 
        _System._tuple#17$T7, 
        _System._tuple#17$T8, 
        _System._tuple#17$T9, 
        _System._tuple#17$T10, 
        _System._tuple#17$T11, 
        _System._tuple#17$T12, 
        _System._tuple#17$T13, 
        _System._tuple#17$T14, 
        _System._tuple#17$T15, 
        _System._tuple#17$T16))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple17(_System._tuple#17$T0, 
          _System._tuple#17$T1, 
          _System._tuple#17$T2, 
          _System._tuple#17$T3, 
          _System._tuple#17$T4, 
          _System._tuple#17$T5, 
          _System._tuple#17$T6, 
          _System._tuple#17$T7, 
          _System._tuple#17$T8, 
          _System._tuple#17$T9, 
          _System._tuple#17$T10, 
          _System._tuple#17$T11, 
          _System._tuple#17$T12, 
          _System._tuple#17$T13, 
          _System._tuple#17$T14, 
          _System._tuple#17$T15, 
          _System._tuple#17$T16)));

// Constructor $Is
axiom (forall _System._tuple#17$T0: Ty, 
    _System._tuple#17$T1: Ty, 
    _System._tuple#17$T2: Ty, 
    _System._tuple#17$T3: Ty, 
    _System._tuple#17$T4: Ty, 
    _System._tuple#17$T5: Ty, 
    _System._tuple#17$T6: Ty, 
    _System._tuple#17$T7: Ty, 
    _System._tuple#17$T8: Ty, 
    _System._tuple#17$T9: Ty, 
    _System._tuple#17$T10: Ty, 
    _System._tuple#17$T11: Ty, 
    _System._tuple#17$T12: Ty, 
    _System._tuple#17$T13: Ty, 
    _System._tuple#17$T14: Ty, 
    _System._tuple#17$T15: Ty, 
    _System._tuple#17$T16: Ty, 
    a#344#0#0: Box, 
    a#344#1#0: Box, 
    a#344#2#0: Box, 
    a#344#3#0: Box, 
    a#344#4#0: Box, 
    a#344#5#0: Box, 
    a#344#6#0: Box, 
    a#344#7#0: Box, 
    a#344#8#0: Box, 
    a#344#9#0: Box, 
    a#344#10#0: Box, 
    a#344#11#0: Box, 
    a#344#12#0: Box, 
    a#344#13#0: Box, 
    a#344#14#0: Box, 
    a#344#15#0: Box, 
    a#344#16#0: Box :: 
  { $Is(#_System._tuple#17._#Make17(a#344#0#0, 
        a#344#1#0, 
        a#344#2#0, 
        a#344#3#0, 
        a#344#4#0, 
        a#344#5#0, 
        a#344#6#0, 
        a#344#7#0, 
        a#344#8#0, 
        a#344#9#0, 
        a#344#10#0, 
        a#344#11#0, 
        a#344#12#0, 
        a#344#13#0, 
        a#344#14#0, 
        a#344#15#0, 
        a#344#16#0), 
      Tclass._System.Tuple17(_System._tuple#17$T0, 
        _System._tuple#17$T1, 
        _System._tuple#17$T2, 
        _System._tuple#17$T3, 
        _System._tuple#17$T4, 
        _System._tuple#17$T5, 
        _System._tuple#17$T6, 
        _System._tuple#17$T7, 
        _System._tuple#17$T8, 
        _System._tuple#17$T9, 
        _System._tuple#17$T10, 
        _System._tuple#17$T11, 
        _System._tuple#17$T12, 
        _System._tuple#17$T13, 
        _System._tuple#17$T14, 
        _System._tuple#17$T15, 
        _System._tuple#17$T16)) } 
  $Is(#_System._tuple#17._#Make17(a#344#0#0, 
        a#344#1#0, 
        a#344#2#0, 
        a#344#3#0, 
        a#344#4#0, 
        a#344#5#0, 
        a#344#6#0, 
        a#344#7#0, 
        a#344#8#0, 
        a#344#9#0, 
        a#344#10#0, 
        a#344#11#0, 
        a#344#12#0, 
        a#344#13#0, 
        a#344#14#0, 
        a#344#15#0, 
        a#344#16#0), 
      Tclass._System.Tuple17(_System._tuple#17$T0, 
        _System._tuple#17$T1, 
        _System._tuple#17$T2, 
        _System._tuple#17$T3, 
        _System._tuple#17$T4, 
        _System._tuple#17$T5, 
        _System._tuple#17$T6, 
        _System._tuple#17$T7, 
        _System._tuple#17$T8, 
        _System._tuple#17$T9, 
        _System._tuple#17$T10, 
        _System._tuple#17$T11, 
        _System._tuple#17$T12, 
        _System._tuple#17$T13, 
        _System._tuple#17$T14, 
        _System._tuple#17$T15, 
        _System._tuple#17$T16))
     <==> $IsBox(a#344#0#0, _System._tuple#17$T0)
       && $IsBox(a#344#1#0, _System._tuple#17$T1)
       && $IsBox(a#344#2#0, _System._tuple#17$T2)
       && $IsBox(a#344#3#0, _System._tuple#17$T3)
       && $IsBox(a#344#4#0, _System._tuple#17$T4)
       && $IsBox(a#344#5#0, _System._tuple#17$T5)
       && $IsBox(a#344#6#0, _System._tuple#17$T6)
       && $IsBox(a#344#7#0, _System._tuple#17$T7)
       && $IsBox(a#344#8#0, _System._tuple#17$T8)
       && $IsBox(a#344#9#0, _System._tuple#17$T9)
       && $IsBox(a#344#10#0, _System._tuple#17$T10)
       && $IsBox(a#344#11#0, _System._tuple#17$T11)
       && $IsBox(a#344#12#0, _System._tuple#17$T12)
       && $IsBox(a#344#13#0, _System._tuple#17$T13)
       && $IsBox(a#344#14#0, _System._tuple#17$T14)
       && $IsBox(a#344#15#0, _System._tuple#17$T15)
       && $IsBox(a#344#16#0, _System._tuple#17$T16));

// Constructor $IsAlloc
axiom (forall _System._tuple#17$T0: Ty, 
    _System._tuple#17$T1: Ty, 
    _System._tuple#17$T2: Ty, 
    _System._tuple#17$T3: Ty, 
    _System._tuple#17$T4: Ty, 
    _System._tuple#17$T5: Ty, 
    _System._tuple#17$T6: Ty, 
    _System._tuple#17$T7: Ty, 
    _System._tuple#17$T8: Ty, 
    _System._tuple#17$T9: Ty, 
    _System._tuple#17$T10: Ty, 
    _System._tuple#17$T11: Ty, 
    _System._tuple#17$T12: Ty, 
    _System._tuple#17$T13: Ty, 
    _System._tuple#17$T14: Ty, 
    _System._tuple#17$T15: Ty, 
    _System._tuple#17$T16: Ty, 
    a#344#0#0: Box, 
    a#344#1#0: Box, 
    a#344#2#0: Box, 
    a#344#3#0: Box, 
    a#344#4#0: Box, 
    a#344#5#0: Box, 
    a#344#6#0: Box, 
    a#344#7#0: Box, 
    a#344#8#0: Box, 
    a#344#9#0: Box, 
    a#344#10#0: Box, 
    a#344#11#0: Box, 
    a#344#12#0: Box, 
    a#344#13#0: Box, 
    a#344#14#0: Box, 
    a#344#15#0: Box, 
    a#344#16#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#17._#Make17(a#344#0#0, 
        a#344#1#0, 
        a#344#2#0, 
        a#344#3#0, 
        a#344#4#0, 
        a#344#5#0, 
        a#344#6#0, 
        a#344#7#0, 
        a#344#8#0, 
        a#344#9#0, 
        a#344#10#0, 
        a#344#11#0, 
        a#344#12#0, 
        a#344#13#0, 
        a#344#14#0, 
        a#344#15#0, 
        a#344#16#0), 
      Tclass._System.Tuple17(_System._tuple#17$T0, 
        _System._tuple#17$T1, 
        _System._tuple#17$T2, 
        _System._tuple#17$T3, 
        _System._tuple#17$T4, 
        _System._tuple#17$T5, 
        _System._tuple#17$T6, 
        _System._tuple#17$T7, 
        _System._tuple#17$T8, 
        _System._tuple#17$T9, 
        _System._tuple#17$T10, 
        _System._tuple#17$T11, 
        _System._tuple#17$T12, 
        _System._tuple#17$T13, 
        _System._tuple#17$T14, 
        _System._tuple#17$T15, 
        _System._tuple#17$T16), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#17._#Make17(a#344#0#0, 
          a#344#1#0, 
          a#344#2#0, 
          a#344#3#0, 
          a#344#4#0, 
          a#344#5#0, 
          a#344#6#0, 
          a#344#7#0, 
          a#344#8#0, 
          a#344#9#0, 
          a#344#10#0, 
          a#344#11#0, 
          a#344#12#0, 
          a#344#13#0, 
          a#344#14#0, 
          a#344#15#0, 
          a#344#16#0), 
        Tclass._System.Tuple17(_System._tuple#17$T0, 
          _System._tuple#17$T1, 
          _System._tuple#17$T2, 
          _System._tuple#17$T3, 
          _System._tuple#17$T4, 
          _System._tuple#17$T5, 
          _System._tuple#17$T6, 
          _System._tuple#17$T7, 
          _System._tuple#17$T8, 
          _System._tuple#17$T9, 
          _System._tuple#17$T10, 
          _System._tuple#17$T11, 
          _System._tuple#17$T12, 
          _System._tuple#17$T13, 
          _System._tuple#17$T14, 
          _System._tuple#17$T15, 
          _System._tuple#17$T16), 
        $h)
       <==> $IsAllocBox(a#344#0#0, _System._tuple#17$T0, $h)
         && $IsAllocBox(a#344#1#0, _System._tuple#17$T1, $h)
         && $IsAllocBox(a#344#2#0, _System._tuple#17$T2, $h)
         && $IsAllocBox(a#344#3#0, _System._tuple#17$T3, $h)
         && $IsAllocBox(a#344#4#0, _System._tuple#17$T4, $h)
         && $IsAllocBox(a#344#5#0, _System._tuple#17$T5, $h)
         && $IsAllocBox(a#344#6#0, _System._tuple#17$T6, $h)
         && $IsAllocBox(a#344#7#0, _System._tuple#17$T7, $h)
         && $IsAllocBox(a#344#8#0, _System._tuple#17$T8, $h)
         && $IsAllocBox(a#344#9#0, _System._tuple#17$T9, $h)
         && $IsAllocBox(a#344#10#0, _System._tuple#17$T10, $h)
         && $IsAllocBox(a#344#11#0, _System._tuple#17$T11, $h)
         && $IsAllocBox(a#344#12#0, _System._tuple#17$T12, $h)
         && $IsAllocBox(a#344#13#0, _System._tuple#17$T13, $h)
         && $IsAllocBox(a#344#14#0, _System._tuple#17$T14, $h)
         && $IsAllocBox(a#344#15#0, _System._tuple#17$T15, $h)
         && $IsAllocBox(a#344#16#0, _System._tuple#17$T16, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#17$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple17._0(d), _System._tuple#17$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple17.___hMake17_q(d)
       && (exists _System._tuple#17$T1: Ty, 
          _System._tuple#17$T2: Ty, 
          _System._tuple#17$T3: Ty, 
          _System._tuple#17$T4: Ty, 
          _System._tuple#17$T5: Ty, 
          _System._tuple#17$T6: Ty, 
          _System._tuple#17$T7: Ty, 
          _System._tuple#17$T8: Ty, 
          _System._tuple#17$T9: Ty, 
          _System._tuple#17$T10: Ty, 
          _System._tuple#17$T11: Ty, 
          _System._tuple#17$T12: Ty, 
          _System._tuple#17$T13: Ty, 
          _System._tuple#17$T14: Ty, 
          _System._tuple#17$T15: Ty, 
          _System._tuple#17$T16: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple17(_System._tuple#17$T0, 
              _System._tuple#17$T1, 
              _System._tuple#17$T2, 
              _System._tuple#17$T3, 
              _System._tuple#17$T4, 
              _System._tuple#17$T5, 
              _System._tuple#17$T6, 
              _System._tuple#17$T7, 
              _System._tuple#17$T8, 
              _System._tuple#17$T9, 
              _System._tuple#17$T10, 
              _System._tuple#17$T11, 
              _System._tuple#17$T12, 
              _System._tuple#17$T13, 
              _System._tuple#17$T14, 
              _System._tuple#17$T15, 
              _System._tuple#17$T16), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple17(_System._tuple#17$T0, 
            _System._tuple#17$T1, 
            _System._tuple#17$T2, 
            _System._tuple#17$T3, 
            _System._tuple#17$T4, 
            _System._tuple#17$T5, 
            _System._tuple#17$T6, 
            _System._tuple#17$T7, 
            _System._tuple#17$T8, 
            _System._tuple#17$T9, 
            _System._tuple#17$T10, 
            _System._tuple#17$T11, 
            _System._tuple#17$T12, 
            _System._tuple#17$T13, 
            _System._tuple#17$T14, 
            _System._tuple#17$T15, 
            _System._tuple#17$T16), 
          $h))
     ==> $IsAllocBox(_System.Tuple17._0(d), _System._tuple#17$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#17$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple17._1(d), _System._tuple#17$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple17.___hMake17_q(d)
       && (exists _System._tuple#17$T0: Ty, 
          _System._tuple#17$T2: Ty, 
          _System._tuple#17$T3: Ty, 
          _System._tuple#17$T4: Ty, 
          _System._tuple#17$T5: Ty, 
          _System._tuple#17$T6: Ty, 
          _System._tuple#17$T7: Ty, 
          _System._tuple#17$T8: Ty, 
          _System._tuple#17$T9: Ty, 
          _System._tuple#17$T10: Ty, 
          _System._tuple#17$T11: Ty, 
          _System._tuple#17$T12: Ty, 
          _System._tuple#17$T13: Ty, 
          _System._tuple#17$T14: Ty, 
          _System._tuple#17$T15: Ty, 
          _System._tuple#17$T16: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple17(_System._tuple#17$T0, 
              _System._tuple#17$T1, 
              _System._tuple#17$T2, 
              _System._tuple#17$T3, 
              _System._tuple#17$T4, 
              _System._tuple#17$T5, 
              _System._tuple#17$T6, 
              _System._tuple#17$T7, 
              _System._tuple#17$T8, 
              _System._tuple#17$T9, 
              _System._tuple#17$T10, 
              _System._tuple#17$T11, 
              _System._tuple#17$T12, 
              _System._tuple#17$T13, 
              _System._tuple#17$T14, 
              _System._tuple#17$T15, 
              _System._tuple#17$T16), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple17(_System._tuple#17$T0, 
            _System._tuple#17$T1, 
            _System._tuple#17$T2, 
            _System._tuple#17$T3, 
            _System._tuple#17$T4, 
            _System._tuple#17$T5, 
            _System._tuple#17$T6, 
            _System._tuple#17$T7, 
            _System._tuple#17$T8, 
            _System._tuple#17$T9, 
            _System._tuple#17$T10, 
            _System._tuple#17$T11, 
            _System._tuple#17$T12, 
            _System._tuple#17$T13, 
            _System._tuple#17$T14, 
            _System._tuple#17$T15, 
            _System._tuple#17$T16), 
          $h))
     ==> $IsAllocBox(_System.Tuple17._1(d), _System._tuple#17$T1, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#17$T2: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple17._2(d), _System._tuple#17$T2, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple17.___hMake17_q(d)
       && (exists _System._tuple#17$T0: Ty, 
          _System._tuple#17$T1: Ty, 
          _System._tuple#17$T3: Ty, 
          _System._tuple#17$T4: Ty, 
          _System._tuple#17$T5: Ty, 
          _System._tuple#17$T6: Ty, 
          _System._tuple#17$T7: Ty, 
          _System._tuple#17$T8: Ty, 
          _System._tuple#17$T9: Ty, 
          _System._tuple#17$T10: Ty, 
          _System._tuple#17$T11: Ty, 
          _System._tuple#17$T12: Ty, 
          _System._tuple#17$T13: Ty, 
          _System._tuple#17$T14: Ty, 
          _System._tuple#17$T15: Ty, 
          _System._tuple#17$T16: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple17(_System._tuple#17$T0, 
              _System._tuple#17$T1, 
              _System._tuple#17$T2, 
              _System._tuple#17$T3, 
              _System._tuple#17$T4, 
              _System._tuple#17$T5, 
              _System._tuple#17$T6, 
              _System._tuple#17$T7, 
              _System._tuple#17$T8, 
              _System._tuple#17$T9, 
              _System._tuple#17$T10, 
              _System._tuple#17$T11, 
              _System._tuple#17$T12, 
              _System._tuple#17$T13, 
              _System._tuple#17$T14, 
              _System._tuple#17$T15, 
              _System._tuple#17$T16), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple17(_System._tuple#17$T0, 
            _System._tuple#17$T1, 
            _System._tuple#17$T2, 
            _System._tuple#17$T3, 
            _System._tuple#17$T4, 
            _System._tuple#17$T5, 
            _System._tuple#17$T6, 
            _System._tuple#17$T7, 
            _System._tuple#17$T8, 
            _System._tuple#17$T9, 
            _System._tuple#17$T10, 
            _System._tuple#17$T11, 
            _System._tuple#17$T12, 
            _System._tuple#17$T13, 
            _System._tuple#17$T14, 
            _System._tuple#17$T15, 
            _System._tuple#17$T16), 
          $h))
     ==> $IsAllocBox(_System.Tuple17._2(d), _System._tuple#17$T2, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#17$T3: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple17._3(d), _System._tuple#17$T3, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple17.___hMake17_q(d)
       && (exists _System._tuple#17$T0: Ty, 
          _System._tuple#17$T1: Ty, 
          _System._tuple#17$T2: Ty, 
          _System._tuple#17$T4: Ty, 
          _System._tuple#17$T5: Ty, 
          _System._tuple#17$T6: Ty, 
          _System._tuple#17$T7: Ty, 
          _System._tuple#17$T8: Ty, 
          _System._tuple#17$T9: Ty, 
          _System._tuple#17$T10: Ty, 
          _System._tuple#17$T11: Ty, 
          _System._tuple#17$T12: Ty, 
          _System._tuple#17$T13: Ty, 
          _System._tuple#17$T14: Ty, 
          _System._tuple#17$T15: Ty, 
          _System._tuple#17$T16: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple17(_System._tuple#17$T0, 
              _System._tuple#17$T1, 
              _System._tuple#17$T2, 
              _System._tuple#17$T3, 
              _System._tuple#17$T4, 
              _System._tuple#17$T5, 
              _System._tuple#17$T6, 
              _System._tuple#17$T7, 
              _System._tuple#17$T8, 
              _System._tuple#17$T9, 
              _System._tuple#17$T10, 
              _System._tuple#17$T11, 
              _System._tuple#17$T12, 
              _System._tuple#17$T13, 
              _System._tuple#17$T14, 
              _System._tuple#17$T15, 
              _System._tuple#17$T16), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple17(_System._tuple#17$T0, 
            _System._tuple#17$T1, 
            _System._tuple#17$T2, 
            _System._tuple#17$T3, 
            _System._tuple#17$T4, 
            _System._tuple#17$T5, 
            _System._tuple#17$T6, 
            _System._tuple#17$T7, 
            _System._tuple#17$T8, 
            _System._tuple#17$T9, 
            _System._tuple#17$T10, 
            _System._tuple#17$T11, 
            _System._tuple#17$T12, 
            _System._tuple#17$T13, 
            _System._tuple#17$T14, 
            _System._tuple#17$T15, 
            _System._tuple#17$T16), 
          $h))
     ==> $IsAllocBox(_System.Tuple17._3(d), _System._tuple#17$T3, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#17$T4: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple17._4(d), _System._tuple#17$T4, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple17.___hMake17_q(d)
       && (exists _System._tuple#17$T0: Ty, 
          _System._tuple#17$T1: Ty, 
          _System._tuple#17$T2: Ty, 
          _System._tuple#17$T3: Ty, 
          _System._tuple#17$T5: Ty, 
          _System._tuple#17$T6: Ty, 
          _System._tuple#17$T7: Ty, 
          _System._tuple#17$T8: Ty, 
          _System._tuple#17$T9: Ty, 
          _System._tuple#17$T10: Ty, 
          _System._tuple#17$T11: Ty, 
          _System._tuple#17$T12: Ty, 
          _System._tuple#17$T13: Ty, 
          _System._tuple#17$T14: Ty, 
          _System._tuple#17$T15: Ty, 
          _System._tuple#17$T16: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple17(_System._tuple#17$T0, 
              _System._tuple#17$T1, 
              _System._tuple#17$T2, 
              _System._tuple#17$T3, 
              _System._tuple#17$T4, 
              _System._tuple#17$T5, 
              _System._tuple#17$T6, 
              _System._tuple#17$T7, 
              _System._tuple#17$T8, 
              _System._tuple#17$T9, 
              _System._tuple#17$T10, 
              _System._tuple#17$T11, 
              _System._tuple#17$T12, 
              _System._tuple#17$T13, 
              _System._tuple#17$T14, 
              _System._tuple#17$T15, 
              _System._tuple#17$T16), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple17(_System._tuple#17$T0, 
            _System._tuple#17$T1, 
            _System._tuple#17$T2, 
            _System._tuple#17$T3, 
            _System._tuple#17$T4, 
            _System._tuple#17$T5, 
            _System._tuple#17$T6, 
            _System._tuple#17$T7, 
            _System._tuple#17$T8, 
            _System._tuple#17$T9, 
            _System._tuple#17$T10, 
            _System._tuple#17$T11, 
            _System._tuple#17$T12, 
            _System._tuple#17$T13, 
            _System._tuple#17$T14, 
            _System._tuple#17$T15, 
            _System._tuple#17$T16), 
          $h))
     ==> $IsAllocBox(_System.Tuple17._4(d), _System._tuple#17$T4, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#17$T5: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple17._5(d), _System._tuple#17$T5, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple17.___hMake17_q(d)
       && (exists _System._tuple#17$T0: Ty, 
          _System._tuple#17$T1: Ty, 
          _System._tuple#17$T2: Ty, 
          _System._tuple#17$T3: Ty, 
          _System._tuple#17$T4: Ty, 
          _System._tuple#17$T6: Ty, 
          _System._tuple#17$T7: Ty, 
          _System._tuple#17$T8: Ty, 
          _System._tuple#17$T9: Ty, 
          _System._tuple#17$T10: Ty, 
          _System._tuple#17$T11: Ty, 
          _System._tuple#17$T12: Ty, 
          _System._tuple#17$T13: Ty, 
          _System._tuple#17$T14: Ty, 
          _System._tuple#17$T15: Ty, 
          _System._tuple#17$T16: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple17(_System._tuple#17$T0, 
              _System._tuple#17$T1, 
              _System._tuple#17$T2, 
              _System._tuple#17$T3, 
              _System._tuple#17$T4, 
              _System._tuple#17$T5, 
              _System._tuple#17$T6, 
              _System._tuple#17$T7, 
              _System._tuple#17$T8, 
              _System._tuple#17$T9, 
              _System._tuple#17$T10, 
              _System._tuple#17$T11, 
              _System._tuple#17$T12, 
              _System._tuple#17$T13, 
              _System._tuple#17$T14, 
              _System._tuple#17$T15, 
              _System._tuple#17$T16), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple17(_System._tuple#17$T0, 
            _System._tuple#17$T1, 
            _System._tuple#17$T2, 
            _System._tuple#17$T3, 
            _System._tuple#17$T4, 
            _System._tuple#17$T5, 
            _System._tuple#17$T6, 
            _System._tuple#17$T7, 
            _System._tuple#17$T8, 
            _System._tuple#17$T9, 
            _System._tuple#17$T10, 
            _System._tuple#17$T11, 
            _System._tuple#17$T12, 
            _System._tuple#17$T13, 
            _System._tuple#17$T14, 
            _System._tuple#17$T15, 
            _System._tuple#17$T16), 
          $h))
     ==> $IsAllocBox(_System.Tuple17._5(d), _System._tuple#17$T5, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#17$T6: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple17._6(d), _System._tuple#17$T6, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple17.___hMake17_q(d)
       && (exists _System._tuple#17$T0: Ty, 
          _System._tuple#17$T1: Ty, 
          _System._tuple#17$T2: Ty, 
          _System._tuple#17$T3: Ty, 
          _System._tuple#17$T4: Ty, 
          _System._tuple#17$T5: Ty, 
          _System._tuple#17$T7: Ty, 
          _System._tuple#17$T8: Ty, 
          _System._tuple#17$T9: Ty, 
          _System._tuple#17$T10: Ty, 
          _System._tuple#17$T11: Ty, 
          _System._tuple#17$T12: Ty, 
          _System._tuple#17$T13: Ty, 
          _System._tuple#17$T14: Ty, 
          _System._tuple#17$T15: Ty, 
          _System._tuple#17$T16: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple17(_System._tuple#17$T0, 
              _System._tuple#17$T1, 
              _System._tuple#17$T2, 
              _System._tuple#17$T3, 
              _System._tuple#17$T4, 
              _System._tuple#17$T5, 
              _System._tuple#17$T6, 
              _System._tuple#17$T7, 
              _System._tuple#17$T8, 
              _System._tuple#17$T9, 
              _System._tuple#17$T10, 
              _System._tuple#17$T11, 
              _System._tuple#17$T12, 
              _System._tuple#17$T13, 
              _System._tuple#17$T14, 
              _System._tuple#17$T15, 
              _System._tuple#17$T16), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple17(_System._tuple#17$T0, 
            _System._tuple#17$T1, 
            _System._tuple#17$T2, 
            _System._tuple#17$T3, 
            _System._tuple#17$T4, 
            _System._tuple#17$T5, 
            _System._tuple#17$T6, 
            _System._tuple#17$T7, 
            _System._tuple#17$T8, 
            _System._tuple#17$T9, 
            _System._tuple#17$T10, 
            _System._tuple#17$T11, 
            _System._tuple#17$T12, 
            _System._tuple#17$T13, 
            _System._tuple#17$T14, 
            _System._tuple#17$T15, 
            _System._tuple#17$T16), 
          $h))
     ==> $IsAllocBox(_System.Tuple17._6(d), _System._tuple#17$T6, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#17$T7: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple17._7(d), _System._tuple#17$T7, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple17.___hMake17_q(d)
       && (exists _System._tuple#17$T0: Ty, 
          _System._tuple#17$T1: Ty, 
          _System._tuple#17$T2: Ty, 
          _System._tuple#17$T3: Ty, 
          _System._tuple#17$T4: Ty, 
          _System._tuple#17$T5: Ty, 
          _System._tuple#17$T6: Ty, 
          _System._tuple#17$T8: Ty, 
          _System._tuple#17$T9: Ty, 
          _System._tuple#17$T10: Ty, 
          _System._tuple#17$T11: Ty, 
          _System._tuple#17$T12: Ty, 
          _System._tuple#17$T13: Ty, 
          _System._tuple#17$T14: Ty, 
          _System._tuple#17$T15: Ty, 
          _System._tuple#17$T16: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple17(_System._tuple#17$T0, 
              _System._tuple#17$T1, 
              _System._tuple#17$T2, 
              _System._tuple#17$T3, 
              _System._tuple#17$T4, 
              _System._tuple#17$T5, 
              _System._tuple#17$T6, 
              _System._tuple#17$T7, 
              _System._tuple#17$T8, 
              _System._tuple#17$T9, 
              _System._tuple#17$T10, 
              _System._tuple#17$T11, 
              _System._tuple#17$T12, 
              _System._tuple#17$T13, 
              _System._tuple#17$T14, 
              _System._tuple#17$T15, 
              _System._tuple#17$T16), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple17(_System._tuple#17$T0, 
            _System._tuple#17$T1, 
            _System._tuple#17$T2, 
            _System._tuple#17$T3, 
            _System._tuple#17$T4, 
            _System._tuple#17$T5, 
            _System._tuple#17$T6, 
            _System._tuple#17$T7, 
            _System._tuple#17$T8, 
            _System._tuple#17$T9, 
            _System._tuple#17$T10, 
            _System._tuple#17$T11, 
            _System._tuple#17$T12, 
            _System._tuple#17$T13, 
            _System._tuple#17$T14, 
            _System._tuple#17$T15, 
            _System._tuple#17$T16), 
          $h))
     ==> $IsAllocBox(_System.Tuple17._7(d), _System._tuple#17$T7, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#17$T8: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple17._8(d), _System._tuple#17$T8, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple17.___hMake17_q(d)
       && (exists _System._tuple#17$T0: Ty, 
          _System._tuple#17$T1: Ty, 
          _System._tuple#17$T2: Ty, 
          _System._tuple#17$T3: Ty, 
          _System._tuple#17$T4: Ty, 
          _System._tuple#17$T5: Ty, 
          _System._tuple#17$T6: Ty, 
          _System._tuple#17$T7: Ty, 
          _System._tuple#17$T9: Ty, 
          _System._tuple#17$T10: Ty, 
          _System._tuple#17$T11: Ty, 
          _System._tuple#17$T12: Ty, 
          _System._tuple#17$T13: Ty, 
          _System._tuple#17$T14: Ty, 
          _System._tuple#17$T15: Ty, 
          _System._tuple#17$T16: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple17(_System._tuple#17$T0, 
              _System._tuple#17$T1, 
              _System._tuple#17$T2, 
              _System._tuple#17$T3, 
              _System._tuple#17$T4, 
              _System._tuple#17$T5, 
              _System._tuple#17$T6, 
              _System._tuple#17$T7, 
              _System._tuple#17$T8, 
              _System._tuple#17$T9, 
              _System._tuple#17$T10, 
              _System._tuple#17$T11, 
              _System._tuple#17$T12, 
              _System._tuple#17$T13, 
              _System._tuple#17$T14, 
              _System._tuple#17$T15, 
              _System._tuple#17$T16), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple17(_System._tuple#17$T0, 
            _System._tuple#17$T1, 
            _System._tuple#17$T2, 
            _System._tuple#17$T3, 
            _System._tuple#17$T4, 
            _System._tuple#17$T5, 
            _System._tuple#17$T6, 
            _System._tuple#17$T7, 
            _System._tuple#17$T8, 
            _System._tuple#17$T9, 
            _System._tuple#17$T10, 
            _System._tuple#17$T11, 
            _System._tuple#17$T12, 
            _System._tuple#17$T13, 
            _System._tuple#17$T14, 
            _System._tuple#17$T15, 
            _System._tuple#17$T16), 
          $h))
     ==> $IsAllocBox(_System.Tuple17._8(d), _System._tuple#17$T8, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#17$T9: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple17._9(d), _System._tuple#17$T9, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple17.___hMake17_q(d)
       && (exists _System._tuple#17$T0: Ty, 
          _System._tuple#17$T1: Ty, 
          _System._tuple#17$T2: Ty, 
          _System._tuple#17$T3: Ty, 
          _System._tuple#17$T4: Ty, 
          _System._tuple#17$T5: Ty, 
          _System._tuple#17$T6: Ty, 
          _System._tuple#17$T7: Ty, 
          _System._tuple#17$T8: Ty, 
          _System._tuple#17$T10: Ty, 
          _System._tuple#17$T11: Ty, 
          _System._tuple#17$T12: Ty, 
          _System._tuple#17$T13: Ty, 
          _System._tuple#17$T14: Ty, 
          _System._tuple#17$T15: Ty, 
          _System._tuple#17$T16: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple17(_System._tuple#17$T0, 
              _System._tuple#17$T1, 
              _System._tuple#17$T2, 
              _System._tuple#17$T3, 
              _System._tuple#17$T4, 
              _System._tuple#17$T5, 
              _System._tuple#17$T6, 
              _System._tuple#17$T7, 
              _System._tuple#17$T8, 
              _System._tuple#17$T9, 
              _System._tuple#17$T10, 
              _System._tuple#17$T11, 
              _System._tuple#17$T12, 
              _System._tuple#17$T13, 
              _System._tuple#17$T14, 
              _System._tuple#17$T15, 
              _System._tuple#17$T16), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple17(_System._tuple#17$T0, 
            _System._tuple#17$T1, 
            _System._tuple#17$T2, 
            _System._tuple#17$T3, 
            _System._tuple#17$T4, 
            _System._tuple#17$T5, 
            _System._tuple#17$T6, 
            _System._tuple#17$T7, 
            _System._tuple#17$T8, 
            _System._tuple#17$T9, 
            _System._tuple#17$T10, 
            _System._tuple#17$T11, 
            _System._tuple#17$T12, 
            _System._tuple#17$T13, 
            _System._tuple#17$T14, 
            _System._tuple#17$T15, 
            _System._tuple#17$T16), 
          $h))
     ==> $IsAllocBox(_System.Tuple17._9(d), _System._tuple#17$T9, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#17$T10: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple17._10(d), _System._tuple#17$T10, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple17.___hMake17_q(d)
       && (exists _System._tuple#17$T0: Ty, 
          _System._tuple#17$T1: Ty, 
          _System._tuple#17$T2: Ty, 
          _System._tuple#17$T3: Ty, 
          _System._tuple#17$T4: Ty, 
          _System._tuple#17$T5: Ty, 
          _System._tuple#17$T6: Ty, 
          _System._tuple#17$T7: Ty, 
          _System._tuple#17$T8: Ty, 
          _System._tuple#17$T9: Ty, 
          _System._tuple#17$T11: Ty, 
          _System._tuple#17$T12: Ty, 
          _System._tuple#17$T13: Ty, 
          _System._tuple#17$T14: Ty, 
          _System._tuple#17$T15: Ty, 
          _System._tuple#17$T16: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple17(_System._tuple#17$T0, 
              _System._tuple#17$T1, 
              _System._tuple#17$T2, 
              _System._tuple#17$T3, 
              _System._tuple#17$T4, 
              _System._tuple#17$T5, 
              _System._tuple#17$T6, 
              _System._tuple#17$T7, 
              _System._tuple#17$T8, 
              _System._tuple#17$T9, 
              _System._tuple#17$T10, 
              _System._tuple#17$T11, 
              _System._tuple#17$T12, 
              _System._tuple#17$T13, 
              _System._tuple#17$T14, 
              _System._tuple#17$T15, 
              _System._tuple#17$T16), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple17(_System._tuple#17$T0, 
            _System._tuple#17$T1, 
            _System._tuple#17$T2, 
            _System._tuple#17$T3, 
            _System._tuple#17$T4, 
            _System._tuple#17$T5, 
            _System._tuple#17$T6, 
            _System._tuple#17$T7, 
            _System._tuple#17$T8, 
            _System._tuple#17$T9, 
            _System._tuple#17$T10, 
            _System._tuple#17$T11, 
            _System._tuple#17$T12, 
            _System._tuple#17$T13, 
            _System._tuple#17$T14, 
            _System._tuple#17$T15, 
            _System._tuple#17$T16), 
          $h))
     ==> $IsAllocBox(_System.Tuple17._10(d), _System._tuple#17$T10, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#17$T11: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple17._11(d), _System._tuple#17$T11, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple17.___hMake17_q(d)
       && (exists _System._tuple#17$T0: Ty, 
          _System._tuple#17$T1: Ty, 
          _System._tuple#17$T2: Ty, 
          _System._tuple#17$T3: Ty, 
          _System._tuple#17$T4: Ty, 
          _System._tuple#17$T5: Ty, 
          _System._tuple#17$T6: Ty, 
          _System._tuple#17$T7: Ty, 
          _System._tuple#17$T8: Ty, 
          _System._tuple#17$T9: Ty, 
          _System._tuple#17$T10: Ty, 
          _System._tuple#17$T12: Ty, 
          _System._tuple#17$T13: Ty, 
          _System._tuple#17$T14: Ty, 
          _System._tuple#17$T15: Ty, 
          _System._tuple#17$T16: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple17(_System._tuple#17$T0, 
              _System._tuple#17$T1, 
              _System._tuple#17$T2, 
              _System._tuple#17$T3, 
              _System._tuple#17$T4, 
              _System._tuple#17$T5, 
              _System._tuple#17$T6, 
              _System._tuple#17$T7, 
              _System._tuple#17$T8, 
              _System._tuple#17$T9, 
              _System._tuple#17$T10, 
              _System._tuple#17$T11, 
              _System._tuple#17$T12, 
              _System._tuple#17$T13, 
              _System._tuple#17$T14, 
              _System._tuple#17$T15, 
              _System._tuple#17$T16), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple17(_System._tuple#17$T0, 
            _System._tuple#17$T1, 
            _System._tuple#17$T2, 
            _System._tuple#17$T3, 
            _System._tuple#17$T4, 
            _System._tuple#17$T5, 
            _System._tuple#17$T6, 
            _System._tuple#17$T7, 
            _System._tuple#17$T8, 
            _System._tuple#17$T9, 
            _System._tuple#17$T10, 
            _System._tuple#17$T11, 
            _System._tuple#17$T12, 
            _System._tuple#17$T13, 
            _System._tuple#17$T14, 
            _System._tuple#17$T15, 
            _System._tuple#17$T16), 
          $h))
     ==> $IsAllocBox(_System.Tuple17._11(d), _System._tuple#17$T11, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#17$T12: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple17._12(d), _System._tuple#17$T12, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple17.___hMake17_q(d)
       && (exists _System._tuple#17$T0: Ty, 
          _System._tuple#17$T1: Ty, 
          _System._tuple#17$T2: Ty, 
          _System._tuple#17$T3: Ty, 
          _System._tuple#17$T4: Ty, 
          _System._tuple#17$T5: Ty, 
          _System._tuple#17$T6: Ty, 
          _System._tuple#17$T7: Ty, 
          _System._tuple#17$T8: Ty, 
          _System._tuple#17$T9: Ty, 
          _System._tuple#17$T10: Ty, 
          _System._tuple#17$T11: Ty, 
          _System._tuple#17$T13: Ty, 
          _System._tuple#17$T14: Ty, 
          _System._tuple#17$T15: Ty, 
          _System._tuple#17$T16: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple17(_System._tuple#17$T0, 
              _System._tuple#17$T1, 
              _System._tuple#17$T2, 
              _System._tuple#17$T3, 
              _System._tuple#17$T4, 
              _System._tuple#17$T5, 
              _System._tuple#17$T6, 
              _System._tuple#17$T7, 
              _System._tuple#17$T8, 
              _System._tuple#17$T9, 
              _System._tuple#17$T10, 
              _System._tuple#17$T11, 
              _System._tuple#17$T12, 
              _System._tuple#17$T13, 
              _System._tuple#17$T14, 
              _System._tuple#17$T15, 
              _System._tuple#17$T16), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple17(_System._tuple#17$T0, 
            _System._tuple#17$T1, 
            _System._tuple#17$T2, 
            _System._tuple#17$T3, 
            _System._tuple#17$T4, 
            _System._tuple#17$T5, 
            _System._tuple#17$T6, 
            _System._tuple#17$T7, 
            _System._tuple#17$T8, 
            _System._tuple#17$T9, 
            _System._tuple#17$T10, 
            _System._tuple#17$T11, 
            _System._tuple#17$T12, 
            _System._tuple#17$T13, 
            _System._tuple#17$T14, 
            _System._tuple#17$T15, 
            _System._tuple#17$T16), 
          $h))
     ==> $IsAllocBox(_System.Tuple17._12(d), _System._tuple#17$T12, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#17$T13: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple17._13(d), _System._tuple#17$T13, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple17.___hMake17_q(d)
       && (exists _System._tuple#17$T0: Ty, 
          _System._tuple#17$T1: Ty, 
          _System._tuple#17$T2: Ty, 
          _System._tuple#17$T3: Ty, 
          _System._tuple#17$T4: Ty, 
          _System._tuple#17$T5: Ty, 
          _System._tuple#17$T6: Ty, 
          _System._tuple#17$T7: Ty, 
          _System._tuple#17$T8: Ty, 
          _System._tuple#17$T9: Ty, 
          _System._tuple#17$T10: Ty, 
          _System._tuple#17$T11: Ty, 
          _System._tuple#17$T12: Ty, 
          _System._tuple#17$T14: Ty, 
          _System._tuple#17$T15: Ty, 
          _System._tuple#17$T16: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple17(_System._tuple#17$T0, 
              _System._tuple#17$T1, 
              _System._tuple#17$T2, 
              _System._tuple#17$T3, 
              _System._tuple#17$T4, 
              _System._tuple#17$T5, 
              _System._tuple#17$T6, 
              _System._tuple#17$T7, 
              _System._tuple#17$T8, 
              _System._tuple#17$T9, 
              _System._tuple#17$T10, 
              _System._tuple#17$T11, 
              _System._tuple#17$T12, 
              _System._tuple#17$T13, 
              _System._tuple#17$T14, 
              _System._tuple#17$T15, 
              _System._tuple#17$T16), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple17(_System._tuple#17$T0, 
            _System._tuple#17$T1, 
            _System._tuple#17$T2, 
            _System._tuple#17$T3, 
            _System._tuple#17$T4, 
            _System._tuple#17$T5, 
            _System._tuple#17$T6, 
            _System._tuple#17$T7, 
            _System._tuple#17$T8, 
            _System._tuple#17$T9, 
            _System._tuple#17$T10, 
            _System._tuple#17$T11, 
            _System._tuple#17$T12, 
            _System._tuple#17$T13, 
            _System._tuple#17$T14, 
            _System._tuple#17$T15, 
            _System._tuple#17$T16), 
          $h))
     ==> $IsAllocBox(_System.Tuple17._13(d), _System._tuple#17$T13, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#17$T14: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple17._14(d), _System._tuple#17$T14, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple17.___hMake17_q(d)
       && (exists _System._tuple#17$T0: Ty, 
          _System._tuple#17$T1: Ty, 
          _System._tuple#17$T2: Ty, 
          _System._tuple#17$T3: Ty, 
          _System._tuple#17$T4: Ty, 
          _System._tuple#17$T5: Ty, 
          _System._tuple#17$T6: Ty, 
          _System._tuple#17$T7: Ty, 
          _System._tuple#17$T8: Ty, 
          _System._tuple#17$T9: Ty, 
          _System._tuple#17$T10: Ty, 
          _System._tuple#17$T11: Ty, 
          _System._tuple#17$T12: Ty, 
          _System._tuple#17$T13: Ty, 
          _System._tuple#17$T15: Ty, 
          _System._tuple#17$T16: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple17(_System._tuple#17$T0, 
              _System._tuple#17$T1, 
              _System._tuple#17$T2, 
              _System._tuple#17$T3, 
              _System._tuple#17$T4, 
              _System._tuple#17$T5, 
              _System._tuple#17$T6, 
              _System._tuple#17$T7, 
              _System._tuple#17$T8, 
              _System._tuple#17$T9, 
              _System._tuple#17$T10, 
              _System._tuple#17$T11, 
              _System._tuple#17$T12, 
              _System._tuple#17$T13, 
              _System._tuple#17$T14, 
              _System._tuple#17$T15, 
              _System._tuple#17$T16), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple17(_System._tuple#17$T0, 
            _System._tuple#17$T1, 
            _System._tuple#17$T2, 
            _System._tuple#17$T3, 
            _System._tuple#17$T4, 
            _System._tuple#17$T5, 
            _System._tuple#17$T6, 
            _System._tuple#17$T7, 
            _System._tuple#17$T8, 
            _System._tuple#17$T9, 
            _System._tuple#17$T10, 
            _System._tuple#17$T11, 
            _System._tuple#17$T12, 
            _System._tuple#17$T13, 
            _System._tuple#17$T14, 
            _System._tuple#17$T15, 
            _System._tuple#17$T16), 
          $h))
     ==> $IsAllocBox(_System.Tuple17._14(d), _System._tuple#17$T14, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#17$T15: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple17._15(d), _System._tuple#17$T15, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple17.___hMake17_q(d)
       && (exists _System._tuple#17$T0: Ty, 
          _System._tuple#17$T1: Ty, 
          _System._tuple#17$T2: Ty, 
          _System._tuple#17$T3: Ty, 
          _System._tuple#17$T4: Ty, 
          _System._tuple#17$T5: Ty, 
          _System._tuple#17$T6: Ty, 
          _System._tuple#17$T7: Ty, 
          _System._tuple#17$T8: Ty, 
          _System._tuple#17$T9: Ty, 
          _System._tuple#17$T10: Ty, 
          _System._tuple#17$T11: Ty, 
          _System._tuple#17$T12: Ty, 
          _System._tuple#17$T13: Ty, 
          _System._tuple#17$T14: Ty, 
          _System._tuple#17$T16: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple17(_System._tuple#17$T0, 
              _System._tuple#17$T1, 
              _System._tuple#17$T2, 
              _System._tuple#17$T3, 
              _System._tuple#17$T4, 
              _System._tuple#17$T5, 
              _System._tuple#17$T6, 
              _System._tuple#17$T7, 
              _System._tuple#17$T8, 
              _System._tuple#17$T9, 
              _System._tuple#17$T10, 
              _System._tuple#17$T11, 
              _System._tuple#17$T12, 
              _System._tuple#17$T13, 
              _System._tuple#17$T14, 
              _System._tuple#17$T15, 
              _System._tuple#17$T16), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple17(_System._tuple#17$T0, 
            _System._tuple#17$T1, 
            _System._tuple#17$T2, 
            _System._tuple#17$T3, 
            _System._tuple#17$T4, 
            _System._tuple#17$T5, 
            _System._tuple#17$T6, 
            _System._tuple#17$T7, 
            _System._tuple#17$T8, 
            _System._tuple#17$T9, 
            _System._tuple#17$T10, 
            _System._tuple#17$T11, 
            _System._tuple#17$T12, 
            _System._tuple#17$T13, 
            _System._tuple#17$T14, 
            _System._tuple#17$T15, 
            _System._tuple#17$T16), 
          $h))
     ==> $IsAllocBox(_System.Tuple17._15(d), _System._tuple#17$T15, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#17$T16: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple17._16(d), _System._tuple#17$T16, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple17.___hMake17_q(d)
       && (exists _System._tuple#17$T0: Ty, 
          _System._tuple#17$T1: Ty, 
          _System._tuple#17$T2: Ty, 
          _System._tuple#17$T3: Ty, 
          _System._tuple#17$T4: Ty, 
          _System._tuple#17$T5: Ty, 
          _System._tuple#17$T6: Ty, 
          _System._tuple#17$T7: Ty, 
          _System._tuple#17$T8: Ty, 
          _System._tuple#17$T9: Ty, 
          _System._tuple#17$T10: Ty, 
          _System._tuple#17$T11: Ty, 
          _System._tuple#17$T12: Ty, 
          _System._tuple#17$T13: Ty, 
          _System._tuple#17$T14: Ty, 
          _System._tuple#17$T15: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple17(_System._tuple#17$T0, 
              _System._tuple#17$T1, 
              _System._tuple#17$T2, 
              _System._tuple#17$T3, 
              _System._tuple#17$T4, 
              _System._tuple#17$T5, 
              _System._tuple#17$T6, 
              _System._tuple#17$T7, 
              _System._tuple#17$T8, 
              _System._tuple#17$T9, 
              _System._tuple#17$T10, 
              _System._tuple#17$T11, 
              _System._tuple#17$T12, 
              _System._tuple#17$T13, 
              _System._tuple#17$T14, 
              _System._tuple#17$T15, 
              _System._tuple#17$T16), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple17(_System._tuple#17$T0, 
            _System._tuple#17$T1, 
            _System._tuple#17$T2, 
            _System._tuple#17$T3, 
            _System._tuple#17$T4, 
            _System._tuple#17$T5, 
            _System._tuple#17$T6, 
            _System._tuple#17$T7, 
            _System._tuple#17$T8, 
            _System._tuple#17$T9, 
            _System._tuple#17$T10, 
            _System._tuple#17$T11, 
            _System._tuple#17$T12, 
            _System._tuple#17$T13, 
            _System._tuple#17$T14, 
            _System._tuple#17$T15, 
            _System._tuple#17$T16), 
          $h))
     ==> $IsAllocBox(_System.Tuple17._16(d), _System._tuple#17$T16, $h));

// Constructor literal
axiom (forall a#345#0#0: Box, 
    a#345#1#0: Box, 
    a#345#2#0: Box, 
    a#345#3#0: Box, 
    a#345#4#0: Box, 
    a#345#5#0: Box, 
    a#345#6#0: Box, 
    a#345#7#0: Box, 
    a#345#8#0: Box, 
    a#345#9#0: Box, 
    a#345#10#0: Box, 
    a#345#11#0: Box, 
    a#345#12#0: Box, 
    a#345#13#0: Box, 
    a#345#14#0: Box, 
    a#345#15#0: Box, 
    a#345#16#0: Box :: 
  { #_System._tuple#17._#Make17(Lit(a#345#0#0), 
      Lit(a#345#1#0), 
      Lit(a#345#2#0), 
      Lit(a#345#3#0), 
      Lit(a#345#4#0), 
      Lit(a#345#5#0), 
      Lit(a#345#6#0), 
      Lit(a#345#7#0), 
      Lit(a#345#8#0), 
      Lit(a#345#9#0), 
      Lit(a#345#10#0), 
      Lit(a#345#11#0), 
      Lit(a#345#12#0), 
      Lit(a#345#13#0), 
      Lit(a#345#14#0), 
      Lit(a#345#15#0), 
      Lit(a#345#16#0)) } 
  #_System._tuple#17._#Make17(Lit(a#345#0#0), 
      Lit(a#345#1#0), 
      Lit(a#345#2#0), 
      Lit(a#345#3#0), 
      Lit(a#345#4#0), 
      Lit(a#345#5#0), 
      Lit(a#345#6#0), 
      Lit(a#345#7#0), 
      Lit(a#345#8#0), 
      Lit(a#345#9#0), 
      Lit(a#345#10#0), 
      Lit(a#345#11#0), 
      Lit(a#345#12#0), 
      Lit(a#345#13#0), 
      Lit(a#345#14#0), 
      Lit(a#345#15#0), 
      Lit(a#345#16#0))
     == Lit(#_System._tuple#17._#Make17(a#345#0#0, 
        a#345#1#0, 
        a#345#2#0, 
        a#345#3#0, 
        a#345#4#0, 
        a#345#5#0, 
        a#345#6#0, 
        a#345#7#0, 
        a#345#8#0, 
        a#345#9#0, 
        a#345#10#0, 
        a#345#11#0, 
        a#345#12#0, 
        a#345#13#0, 
        a#345#14#0, 
        a#345#15#0, 
        a#345#16#0)));

function _System.Tuple17._0(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#346#0#0: Box, 
    a#346#1#0: Box, 
    a#346#2#0: Box, 
    a#346#3#0: Box, 
    a#346#4#0: Box, 
    a#346#5#0: Box, 
    a#346#6#0: Box, 
    a#346#7#0: Box, 
    a#346#8#0: Box, 
    a#346#9#0: Box, 
    a#346#10#0: Box, 
    a#346#11#0: Box, 
    a#346#12#0: Box, 
    a#346#13#0: Box, 
    a#346#14#0: Box, 
    a#346#15#0: Box, 
    a#346#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#346#0#0, 
      a#346#1#0, 
      a#346#2#0, 
      a#346#3#0, 
      a#346#4#0, 
      a#346#5#0, 
      a#346#6#0, 
      a#346#7#0, 
      a#346#8#0, 
      a#346#9#0, 
      a#346#10#0, 
      a#346#11#0, 
      a#346#12#0, 
      a#346#13#0, 
      a#346#14#0, 
      a#346#15#0, 
      a#346#16#0) } 
  _System.Tuple17._0(#_System._tuple#17._#Make17(a#346#0#0, 
        a#346#1#0, 
        a#346#2#0, 
        a#346#3#0, 
        a#346#4#0, 
        a#346#5#0, 
        a#346#6#0, 
        a#346#7#0, 
        a#346#8#0, 
        a#346#9#0, 
        a#346#10#0, 
        a#346#11#0, 
        a#346#12#0, 
        a#346#13#0, 
        a#346#14#0, 
        a#346#15#0, 
        a#346#16#0))
     == a#346#0#0);

// Inductive rank
axiom (forall a#347#0#0: Box, 
    a#347#1#0: Box, 
    a#347#2#0: Box, 
    a#347#3#0: Box, 
    a#347#4#0: Box, 
    a#347#5#0: Box, 
    a#347#6#0: Box, 
    a#347#7#0: Box, 
    a#347#8#0: Box, 
    a#347#9#0: Box, 
    a#347#10#0: Box, 
    a#347#11#0: Box, 
    a#347#12#0: Box, 
    a#347#13#0: Box, 
    a#347#14#0: Box, 
    a#347#15#0: Box, 
    a#347#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#347#0#0, 
      a#347#1#0, 
      a#347#2#0, 
      a#347#3#0, 
      a#347#4#0, 
      a#347#5#0, 
      a#347#6#0, 
      a#347#7#0, 
      a#347#8#0, 
      a#347#9#0, 
      a#347#10#0, 
      a#347#11#0, 
      a#347#12#0, 
      a#347#13#0, 
      a#347#14#0, 
      a#347#15#0, 
      a#347#16#0) } 
  BoxRank(a#347#0#0)
     < DtRank(#_System._tuple#17._#Make17(a#347#0#0, 
        a#347#1#0, 
        a#347#2#0, 
        a#347#3#0, 
        a#347#4#0, 
        a#347#5#0, 
        a#347#6#0, 
        a#347#7#0, 
        a#347#8#0, 
        a#347#9#0, 
        a#347#10#0, 
        a#347#11#0, 
        a#347#12#0, 
        a#347#13#0, 
        a#347#14#0, 
        a#347#15#0, 
        a#347#16#0)));

function _System.Tuple17._1(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#348#0#0: Box, 
    a#348#1#0: Box, 
    a#348#2#0: Box, 
    a#348#3#0: Box, 
    a#348#4#0: Box, 
    a#348#5#0: Box, 
    a#348#6#0: Box, 
    a#348#7#0: Box, 
    a#348#8#0: Box, 
    a#348#9#0: Box, 
    a#348#10#0: Box, 
    a#348#11#0: Box, 
    a#348#12#0: Box, 
    a#348#13#0: Box, 
    a#348#14#0: Box, 
    a#348#15#0: Box, 
    a#348#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#348#0#0, 
      a#348#1#0, 
      a#348#2#0, 
      a#348#3#0, 
      a#348#4#0, 
      a#348#5#0, 
      a#348#6#0, 
      a#348#7#0, 
      a#348#8#0, 
      a#348#9#0, 
      a#348#10#0, 
      a#348#11#0, 
      a#348#12#0, 
      a#348#13#0, 
      a#348#14#0, 
      a#348#15#0, 
      a#348#16#0) } 
  _System.Tuple17._1(#_System._tuple#17._#Make17(a#348#0#0, 
        a#348#1#0, 
        a#348#2#0, 
        a#348#3#0, 
        a#348#4#0, 
        a#348#5#0, 
        a#348#6#0, 
        a#348#7#0, 
        a#348#8#0, 
        a#348#9#0, 
        a#348#10#0, 
        a#348#11#0, 
        a#348#12#0, 
        a#348#13#0, 
        a#348#14#0, 
        a#348#15#0, 
        a#348#16#0))
     == a#348#1#0);

// Inductive rank
axiom (forall a#349#0#0: Box, 
    a#349#1#0: Box, 
    a#349#2#0: Box, 
    a#349#3#0: Box, 
    a#349#4#0: Box, 
    a#349#5#0: Box, 
    a#349#6#0: Box, 
    a#349#7#0: Box, 
    a#349#8#0: Box, 
    a#349#9#0: Box, 
    a#349#10#0: Box, 
    a#349#11#0: Box, 
    a#349#12#0: Box, 
    a#349#13#0: Box, 
    a#349#14#0: Box, 
    a#349#15#0: Box, 
    a#349#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#349#0#0, 
      a#349#1#0, 
      a#349#2#0, 
      a#349#3#0, 
      a#349#4#0, 
      a#349#5#0, 
      a#349#6#0, 
      a#349#7#0, 
      a#349#8#0, 
      a#349#9#0, 
      a#349#10#0, 
      a#349#11#0, 
      a#349#12#0, 
      a#349#13#0, 
      a#349#14#0, 
      a#349#15#0, 
      a#349#16#0) } 
  BoxRank(a#349#1#0)
     < DtRank(#_System._tuple#17._#Make17(a#349#0#0, 
        a#349#1#0, 
        a#349#2#0, 
        a#349#3#0, 
        a#349#4#0, 
        a#349#5#0, 
        a#349#6#0, 
        a#349#7#0, 
        a#349#8#0, 
        a#349#9#0, 
        a#349#10#0, 
        a#349#11#0, 
        a#349#12#0, 
        a#349#13#0, 
        a#349#14#0, 
        a#349#15#0, 
        a#349#16#0)));

function _System.Tuple17._2(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#350#0#0: Box, 
    a#350#1#0: Box, 
    a#350#2#0: Box, 
    a#350#3#0: Box, 
    a#350#4#0: Box, 
    a#350#5#0: Box, 
    a#350#6#0: Box, 
    a#350#7#0: Box, 
    a#350#8#0: Box, 
    a#350#9#0: Box, 
    a#350#10#0: Box, 
    a#350#11#0: Box, 
    a#350#12#0: Box, 
    a#350#13#0: Box, 
    a#350#14#0: Box, 
    a#350#15#0: Box, 
    a#350#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#350#0#0, 
      a#350#1#0, 
      a#350#2#0, 
      a#350#3#0, 
      a#350#4#0, 
      a#350#5#0, 
      a#350#6#0, 
      a#350#7#0, 
      a#350#8#0, 
      a#350#9#0, 
      a#350#10#0, 
      a#350#11#0, 
      a#350#12#0, 
      a#350#13#0, 
      a#350#14#0, 
      a#350#15#0, 
      a#350#16#0) } 
  _System.Tuple17._2(#_System._tuple#17._#Make17(a#350#0#0, 
        a#350#1#0, 
        a#350#2#0, 
        a#350#3#0, 
        a#350#4#0, 
        a#350#5#0, 
        a#350#6#0, 
        a#350#7#0, 
        a#350#8#0, 
        a#350#9#0, 
        a#350#10#0, 
        a#350#11#0, 
        a#350#12#0, 
        a#350#13#0, 
        a#350#14#0, 
        a#350#15#0, 
        a#350#16#0))
     == a#350#2#0);

// Inductive rank
axiom (forall a#351#0#0: Box, 
    a#351#1#0: Box, 
    a#351#2#0: Box, 
    a#351#3#0: Box, 
    a#351#4#0: Box, 
    a#351#5#0: Box, 
    a#351#6#0: Box, 
    a#351#7#0: Box, 
    a#351#8#0: Box, 
    a#351#9#0: Box, 
    a#351#10#0: Box, 
    a#351#11#0: Box, 
    a#351#12#0: Box, 
    a#351#13#0: Box, 
    a#351#14#0: Box, 
    a#351#15#0: Box, 
    a#351#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#351#0#0, 
      a#351#1#0, 
      a#351#2#0, 
      a#351#3#0, 
      a#351#4#0, 
      a#351#5#0, 
      a#351#6#0, 
      a#351#7#0, 
      a#351#8#0, 
      a#351#9#0, 
      a#351#10#0, 
      a#351#11#0, 
      a#351#12#0, 
      a#351#13#0, 
      a#351#14#0, 
      a#351#15#0, 
      a#351#16#0) } 
  BoxRank(a#351#2#0)
     < DtRank(#_System._tuple#17._#Make17(a#351#0#0, 
        a#351#1#0, 
        a#351#2#0, 
        a#351#3#0, 
        a#351#4#0, 
        a#351#5#0, 
        a#351#6#0, 
        a#351#7#0, 
        a#351#8#0, 
        a#351#9#0, 
        a#351#10#0, 
        a#351#11#0, 
        a#351#12#0, 
        a#351#13#0, 
        a#351#14#0, 
        a#351#15#0, 
        a#351#16#0)));

function _System.Tuple17._3(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#352#0#0: Box, 
    a#352#1#0: Box, 
    a#352#2#0: Box, 
    a#352#3#0: Box, 
    a#352#4#0: Box, 
    a#352#5#0: Box, 
    a#352#6#0: Box, 
    a#352#7#0: Box, 
    a#352#8#0: Box, 
    a#352#9#0: Box, 
    a#352#10#0: Box, 
    a#352#11#0: Box, 
    a#352#12#0: Box, 
    a#352#13#0: Box, 
    a#352#14#0: Box, 
    a#352#15#0: Box, 
    a#352#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#352#0#0, 
      a#352#1#0, 
      a#352#2#0, 
      a#352#3#0, 
      a#352#4#0, 
      a#352#5#0, 
      a#352#6#0, 
      a#352#7#0, 
      a#352#8#0, 
      a#352#9#0, 
      a#352#10#0, 
      a#352#11#0, 
      a#352#12#0, 
      a#352#13#0, 
      a#352#14#0, 
      a#352#15#0, 
      a#352#16#0) } 
  _System.Tuple17._3(#_System._tuple#17._#Make17(a#352#0#0, 
        a#352#1#0, 
        a#352#2#0, 
        a#352#3#0, 
        a#352#4#0, 
        a#352#5#0, 
        a#352#6#0, 
        a#352#7#0, 
        a#352#8#0, 
        a#352#9#0, 
        a#352#10#0, 
        a#352#11#0, 
        a#352#12#0, 
        a#352#13#0, 
        a#352#14#0, 
        a#352#15#0, 
        a#352#16#0))
     == a#352#3#0);

// Inductive rank
axiom (forall a#353#0#0: Box, 
    a#353#1#0: Box, 
    a#353#2#0: Box, 
    a#353#3#0: Box, 
    a#353#4#0: Box, 
    a#353#5#0: Box, 
    a#353#6#0: Box, 
    a#353#7#0: Box, 
    a#353#8#0: Box, 
    a#353#9#0: Box, 
    a#353#10#0: Box, 
    a#353#11#0: Box, 
    a#353#12#0: Box, 
    a#353#13#0: Box, 
    a#353#14#0: Box, 
    a#353#15#0: Box, 
    a#353#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#353#0#0, 
      a#353#1#0, 
      a#353#2#0, 
      a#353#3#0, 
      a#353#4#0, 
      a#353#5#0, 
      a#353#6#0, 
      a#353#7#0, 
      a#353#8#0, 
      a#353#9#0, 
      a#353#10#0, 
      a#353#11#0, 
      a#353#12#0, 
      a#353#13#0, 
      a#353#14#0, 
      a#353#15#0, 
      a#353#16#0) } 
  BoxRank(a#353#3#0)
     < DtRank(#_System._tuple#17._#Make17(a#353#0#0, 
        a#353#1#0, 
        a#353#2#0, 
        a#353#3#0, 
        a#353#4#0, 
        a#353#5#0, 
        a#353#6#0, 
        a#353#7#0, 
        a#353#8#0, 
        a#353#9#0, 
        a#353#10#0, 
        a#353#11#0, 
        a#353#12#0, 
        a#353#13#0, 
        a#353#14#0, 
        a#353#15#0, 
        a#353#16#0)));

function _System.Tuple17._4(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#354#0#0: Box, 
    a#354#1#0: Box, 
    a#354#2#0: Box, 
    a#354#3#0: Box, 
    a#354#4#0: Box, 
    a#354#5#0: Box, 
    a#354#6#0: Box, 
    a#354#7#0: Box, 
    a#354#8#0: Box, 
    a#354#9#0: Box, 
    a#354#10#0: Box, 
    a#354#11#0: Box, 
    a#354#12#0: Box, 
    a#354#13#0: Box, 
    a#354#14#0: Box, 
    a#354#15#0: Box, 
    a#354#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#354#0#0, 
      a#354#1#0, 
      a#354#2#0, 
      a#354#3#0, 
      a#354#4#0, 
      a#354#5#0, 
      a#354#6#0, 
      a#354#7#0, 
      a#354#8#0, 
      a#354#9#0, 
      a#354#10#0, 
      a#354#11#0, 
      a#354#12#0, 
      a#354#13#0, 
      a#354#14#0, 
      a#354#15#0, 
      a#354#16#0) } 
  _System.Tuple17._4(#_System._tuple#17._#Make17(a#354#0#0, 
        a#354#1#0, 
        a#354#2#0, 
        a#354#3#0, 
        a#354#4#0, 
        a#354#5#0, 
        a#354#6#0, 
        a#354#7#0, 
        a#354#8#0, 
        a#354#9#0, 
        a#354#10#0, 
        a#354#11#0, 
        a#354#12#0, 
        a#354#13#0, 
        a#354#14#0, 
        a#354#15#0, 
        a#354#16#0))
     == a#354#4#0);

// Inductive rank
axiom (forall a#355#0#0: Box, 
    a#355#1#0: Box, 
    a#355#2#0: Box, 
    a#355#3#0: Box, 
    a#355#4#0: Box, 
    a#355#5#0: Box, 
    a#355#6#0: Box, 
    a#355#7#0: Box, 
    a#355#8#0: Box, 
    a#355#9#0: Box, 
    a#355#10#0: Box, 
    a#355#11#0: Box, 
    a#355#12#0: Box, 
    a#355#13#0: Box, 
    a#355#14#0: Box, 
    a#355#15#0: Box, 
    a#355#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#355#0#0, 
      a#355#1#0, 
      a#355#2#0, 
      a#355#3#0, 
      a#355#4#0, 
      a#355#5#0, 
      a#355#6#0, 
      a#355#7#0, 
      a#355#8#0, 
      a#355#9#0, 
      a#355#10#0, 
      a#355#11#0, 
      a#355#12#0, 
      a#355#13#0, 
      a#355#14#0, 
      a#355#15#0, 
      a#355#16#0) } 
  BoxRank(a#355#4#0)
     < DtRank(#_System._tuple#17._#Make17(a#355#0#0, 
        a#355#1#0, 
        a#355#2#0, 
        a#355#3#0, 
        a#355#4#0, 
        a#355#5#0, 
        a#355#6#0, 
        a#355#7#0, 
        a#355#8#0, 
        a#355#9#0, 
        a#355#10#0, 
        a#355#11#0, 
        a#355#12#0, 
        a#355#13#0, 
        a#355#14#0, 
        a#355#15#0, 
        a#355#16#0)));

function _System.Tuple17._5(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#356#0#0: Box, 
    a#356#1#0: Box, 
    a#356#2#0: Box, 
    a#356#3#0: Box, 
    a#356#4#0: Box, 
    a#356#5#0: Box, 
    a#356#6#0: Box, 
    a#356#7#0: Box, 
    a#356#8#0: Box, 
    a#356#9#0: Box, 
    a#356#10#0: Box, 
    a#356#11#0: Box, 
    a#356#12#0: Box, 
    a#356#13#0: Box, 
    a#356#14#0: Box, 
    a#356#15#0: Box, 
    a#356#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#356#0#0, 
      a#356#1#0, 
      a#356#2#0, 
      a#356#3#0, 
      a#356#4#0, 
      a#356#5#0, 
      a#356#6#0, 
      a#356#7#0, 
      a#356#8#0, 
      a#356#9#0, 
      a#356#10#0, 
      a#356#11#0, 
      a#356#12#0, 
      a#356#13#0, 
      a#356#14#0, 
      a#356#15#0, 
      a#356#16#0) } 
  _System.Tuple17._5(#_System._tuple#17._#Make17(a#356#0#0, 
        a#356#1#0, 
        a#356#2#0, 
        a#356#3#0, 
        a#356#4#0, 
        a#356#5#0, 
        a#356#6#0, 
        a#356#7#0, 
        a#356#8#0, 
        a#356#9#0, 
        a#356#10#0, 
        a#356#11#0, 
        a#356#12#0, 
        a#356#13#0, 
        a#356#14#0, 
        a#356#15#0, 
        a#356#16#0))
     == a#356#5#0);

// Inductive rank
axiom (forall a#357#0#0: Box, 
    a#357#1#0: Box, 
    a#357#2#0: Box, 
    a#357#3#0: Box, 
    a#357#4#0: Box, 
    a#357#5#0: Box, 
    a#357#6#0: Box, 
    a#357#7#0: Box, 
    a#357#8#0: Box, 
    a#357#9#0: Box, 
    a#357#10#0: Box, 
    a#357#11#0: Box, 
    a#357#12#0: Box, 
    a#357#13#0: Box, 
    a#357#14#0: Box, 
    a#357#15#0: Box, 
    a#357#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#357#0#0, 
      a#357#1#0, 
      a#357#2#0, 
      a#357#3#0, 
      a#357#4#0, 
      a#357#5#0, 
      a#357#6#0, 
      a#357#7#0, 
      a#357#8#0, 
      a#357#9#0, 
      a#357#10#0, 
      a#357#11#0, 
      a#357#12#0, 
      a#357#13#0, 
      a#357#14#0, 
      a#357#15#0, 
      a#357#16#0) } 
  BoxRank(a#357#5#0)
     < DtRank(#_System._tuple#17._#Make17(a#357#0#0, 
        a#357#1#0, 
        a#357#2#0, 
        a#357#3#0, 
        a#357#4#0, 
        a#357#5#0, 
        a#357#6#0, 
        a#357#7#0, 
        a#357#8#0, 
        a#357#9#0, 
        a#357#10#0, 
        a#357#11#0, 
        a#357#12#0, 
        a#357#13#0, 
        a#357#14#0, 
        a#357#15#0, 
        a#357#16#0)));

function _System.Tuple17._6(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#358#0#0: Box, 
    a#358#1#0: Box, 
    a#358#2#0: Box, 
    a#358#3#0: Box, 
    a#358#4#0: Box, 
    a#358#5#0: Box, 
    a#358#6#0: Box, 
    a#358#7#0: Box, 
    a#358#8#0: Box, 
    a#358#9#0: Box, 
    a#358#10#0: Box, 
    a#358#11#0: Box, 
    a#358#12#0: Box, 
    a#358#13#0: Box, 
    a#358#14#0: Box, 
    a#358#15#0: Box, 
    a#358#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#358#0#0, 
      a#358#1#0, 
      a#358#2#0, 
      a#358#3#0, 
      a#358#4#0, 
      a#358#5#0, 
      a#358#6#0, 
      a#358#7#0, 
      a#358#8#0, 
      a#358#9#0, 
      a#358#10#0, 
      a#358#11#0, 
      a#358#12#0, 
      a#358#13#0, 
      a#358#14#0, 
      a#358#15#0, 
      a#358#16#0) } 
  _System.Tuple17._6(#_System._tuple#17._#Make17(a#358#0#0, 
        a#358#1#0, 
        a#358#2#0, 
        a#358#3#0, 
        a#358#4#0, 
        a#358#5#0, 
        a#358#6#0, 
        a#358#7#0, 
        a#358#8#0, 
        a#358#9#0, 
        a#358#10#0, 
        a#358#11#0, 
        a#358#12#0, 
        a#358#13#0, 
        a#358#14#0, 
        a#358#15#0, 
        a#358#16#0))
     == a#358#6#0);

// Inductive rank
axiom (forall a#359#0#0: Box, 
    a#359#1#0: Box, 
    a#359#2#0: Box, 
    a#359#3#0: Box, 
    a#359#4#0: Box, 
    a#359#5#0: Box, 
    a#359#6#0: Box, 
    a#359#7#0: Box, 
    a#359#8#0: Box, 
    a#359#9#0: Box, 
    a#359#10#0: Box, 
    a#359#11#0: Box, 
    a#359#12#0: Box, 
    a#359#13#0: Box, 
    a#359#14#0: Box, 
    a#359#15#0: Box, 
    a#359#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#359#0#0, 
      a#359#1#0, 
      a#359#2#0, 
      a#359#3#0, 
      a#359#4#0, 
      a#359#5#0, 
      a#359#6#0, 
      a#359#7#0, 
      a#359#8#0, 
      a#359#9#0, 
      a#359#10#0, 
      a#359#11#0, 
      a#359#12#0, 
      a#359#13#0, 
      a#359#14#0, 
      a#359#15#0, 
      a#359#16#0) } 
  BoxRank(a#359#6#0)
     < DtRank(#_System._tuple#17._#Make17(a#359#0#0, 
        a#359#1#0, 
        a#359#2#0, 
        a#359#3#0, 
        a#359#4#0, 
        a#359#5#0, 
        a#359#6#0, 
        a#359#7#0, 
        a#359#8#0, 
        a#359#9#0, 
        a#359#10#0, 
        a#359#11#0, 
        a#359#12#0, 
        a#359#13#0, 
        a#359#14#0, 
        a#359#15#0, 
        a#359#16#0)));

function _System.Tuple17._7(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#360#0#0: Box, 
    a#360#1#0: Box, 
    a#360#2#0: Box, 
    a#360#3#0: Box, 
    a#360#4#0: Box, 
    a#360#5#0: Box, 
    a#360#6#0: Box, 
    a#360#7#0: Box, 
    a#360#8#0: Box, 
    a#360#9#0: Box, 
    a#360#10#0: Box, 
    a#360#11#0: Box, 
    a#360#12#0: Box, 
    a#360#13#0: Box, 
    a#360#14#0: Box, 
    a#360#15#0: Box, 
    a#360#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#360#0#0, 
      a#360#1#0, 
      a#360#2#0, 
      a#360#3#0, 
      a#360#4#0, 
      a#360#5#0, 
      a#360#6#0, 
      a#360#7#0, 
      a#360#8#0, 
      a#360#9#0, 
      a#360#10#0, 
      a#360#11#0, 
      a#360#12#0, 
      a#360#13#0, 
      a#360#14#0, 
      a#360#15#0, 
      a#360#16#0) } 
  _System.Tuple17._7(#_System._tuple#17._#Make17(a#360#0#0, 
        a#360#1#0, 
        a#360#2#0, 
        a#360#3#0, 
        a#360#4#0, 
        a#360#5#0, 
        a#360#6#0, 
        a#360#7#0, 
        a#360#8#0, 
        a#360#9#0, 
        a#360#10#0, 
        a#360#11#0, 
        a#360#12#0, 
        a#360#13#0, 
        a#360#14#0, 
        a#360#15#0, 
        a#360#16#0))
     == a#360#7#0);

// Inductive rank
axiom (forall a#361#0#0: Box, 
    a#361#1#0: Box, 
    a#361#2#0: Box, 
    a#361#3#0: Box, 
    a#361#4#0: Box, 
    a#361#5#0: Box, 
    a#361#6#0: Box, 
    a#361#7#0: Box, 
    a#361#8#0: Box, 
    a#361#9#0: Box, 
    a#361#10#0: Box, 
    a#361#11#0: Box, 
    a#361#12#0: Box, 
    a#361#13#0: Box, 
    a#361#14#0: Box, 
    a#361#15#0: Box, 
    a#361#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#361#0#0, 
      a#361#1#0, 
      a#361#2#0, 
      a#361#3#0, 
      a#361#4#0, 
      a#361#5#0, 
      a#361#6#0, 
      a#361#7#0, 
      a#361#8#0, 
      a#361#9#0, 
      a#361#10#0, 
      a#361#11#0, 
      a#361#12#0, 
      a#361#13#0, 
      a#361#14#0, 
      a#361#15#0, 
      a#361#16#0) } 
  BoxRank(a#361#7#0)
     < DtRank(#_System._tuple#17._#Make17(a#361#0#0, 
        a#361#1#0, 
        a#361#2#0, 
        a#361#3#0, 
        a#361#4#0, 
        a#361#5#0, 
        a#361#6#0, 
        a#361#7#0, 
        a#361#8#0, 
        a#361#9#0, 
        a#361#10#0, 
        a#361#11#0, 
        a#361#12#0, 
        a#361#13#0, 
        a#361#14#0, 
        a#361#15#0, 
        a#361#16#0)));

function _System.Tuple17._8(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#362#0#0: Box, 
    a#362#1#0: Box, 
    a#362#2#0: Box, 
    a#362#3#0: Box, 
    a#362#4#0: Box, 
    a#362#5#0: Box, 
    a#362#6#0: Box, 
    a#362#7#0: Box, 
    a#362#8#0: Box, 
    a#362#9#0: Box, 
    a#362#10#0: Box, 
    a#362#11#0: Box, 
    a#362#12#0: Box, 
    a#362#13#0: Box, 
    a#362#14#0: Box, 
    a#362#15#0: Box, 
    a#362#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#362#0#0, 
      a#362#1#0, 
      a#362#2#0, 
      a#362#3#0, 
      a#362#4#0, 
      a#362#5#0, 
      a#362#6#0, 
      a#362#7#0, 
      a#362#8#0, 
      a#362#9#0, 
      a#362#10#0, 
      a#362#11#0, 
      a#362#12#0, 
      a#362#13#0, 
      a#362#14#0, 
      a#362#15#0, 
      a#362#16#0) } 
  _System.Tuple17._8(#_System._tuple#17._#Make17(a#362#0#0, 
        a#362#1#0, 
        a#362#2#0, 
        a#362#3#0, 
        a#362#4#0, 
        a#362#5#0, 
        a#362#6#0, 
        a#362#7#0, 
        a#362#8#0, 
        a#362#9#0, 
        a#362#10#0, 
        a#362#11#0, 
        a#362#12#0, 
        a#362#13#0, 
        a#362#14#0, 
        a#362#15#0, 
        a#362#16#0))
     == a#362#8#0);

// Inductive rank
axiom (forall a#363#0#0: Box, 
    a#363#1#0: Box, 
    a#363#2#0: Box, 
    a#363#3#0: Box, 
    a#363#4#0: Box, 
    a#363#5#0: Box, 
    a#363#6#0: Box, 
    a#363#7#0: Box, 
    a#363#8#0: Box, 
    a#363#9#0: Box, 
    a#363#10#0: Box, 
    a#363#11#0: Box, 
    a#363#12#0: Box, 
    a#363#13#0: Box, 
    a#363#14#0: Box, 
    a#363#15#0: Box, 
    a#363#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#363#0#0, 
      a#363#1#0, 
      a#363#2#0, 
      a#363#3#0, 
      a#363#4#0, 
      a#363#5#0, 
      a#363#6#0, 
      a#363#7#0, 
      a#363#8#0, 
      a#363#9#0, 
      a#363#10#0, 
      a#363#11#0, 
      a#363#12#0, 
      a#363#13#0, 
      a#363#14#0, 
      a#363#15#0, 
      a#363#16#0) } 
  BoxRank(a#363#8#0)
     < DtRank(#_System._tuple#17._#Make17(a#363#0#0, 
        a#363#1#0, 
        a#363#2#0, 
        a#363#3#0, 
        a#363#4#0, 
        a#363#5#0, 
        a#363#6#0, 
        a#363#7#0, 
        a#363#8#0, 
        a#363#9#0, 
        a#363#10#0, 
        a#363#11#0, 
        a#363#12#0, 
        a#363#13#0, 
        a#363#14#0, 
        a#363#15#0, 
        a#363#16#0)));

function _System.Tuple17._9(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#364#0#0: Box, 
    a#364#1#0: Box, 
    a#364#2#0: Box, 
    a#364#3#0: Box, 
    a#364#4#0: Box, 
    a#364#5#0: Box, 
    a#364#6#0: Box, 
    a#364#7#0: Box, 
    a#364#8#0: Box, 
    a#364#9#0: Box, 
    a#364#10#0: Box, 
    a#364#11#0: Box, 
    a#364#12#0: Box, 
    a#364#13#0: Box, 
    a#364#14#0: Box, 
    a#364#15#0: Box, 
    a#364#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#364#0#0, 
      a#364#1#0, 
      a#364#2#0, 
      a#364#3#0, 
      a#364#4#0, 
      a#364#5#0, 
      a#364#6#0, 
      a#364#7#0, 
      a#364#8#0, 
      a#364#9#0, 
      a#364#10#0, 
      a#364#11#0, 
      a#364#12#0, 
      a#364#13#0, 
      a#364#14#0, 
      a#364#15#0, 
      a#364#16#0) } 
  _System.Tuple17._9(#_System._tuple#17._#Make17(a#364#0#0, 
        a#364#1#0, 
        a#364#2#0, 
        a#364#3#0, 
        a#364#4#0, 
        a#364#5#0, 
        a#364#6#0, 
        a#364#7#0, 
        a#364#8#0, 
        a#364#9#0, 
        a#364#10#0, 
        a#364#11#0, 
        a#364#12#0, 
        a#364#13#0, 
        a#364#14#0, 
        a#364#15#0, 
        a#364#16#0))
     == a#364#9#0);

// Inductive rank
axiom (forall a#365#0#0: Box, 
    a#365#1#0: Box, 
    a#365#2#0: Box, 
    a#365#3#0: Box, 
    a#365#4#0: Box, 
    a#365#5#0: Box, 
    a#365#6#0: Box, 
    a#365#7#0: Box, 
    a#365#8#0: Box, 
    a#365#9#0: Box, 
    a#365#10#0: Box, 
    a#365#11#0: Box, 
    a#365#12#0: Box, 
    a#365#13#0: Box, 
    a#365#14#0: Box, 
    a#365#15#0: Box, 
    a#365#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#365#0#0, 
      a#365#1#0, 
      a#365#2#0, 
      a#365#3#0, 
      a#365#4#0, 
      a#365#5#0, 
      a#365#6#0, 
      a#365#7#0, 
      a#365#8#0, 
      a#365#9#0, 
      a#365#10#0, 
      a#365#11#0, 
      a#365#12#0, 
      a#365#13#0, 
      a#365#14#0, 
      a#365#15#0, 
      a#365#16#0) } 
  BoxRank(a#365#9#0)
     < DtRank(#_System._tuple#17._#Make17(a#365#0#0, 
        a#365#1#0, 
        a#365#2#0, 
        a#365#3#0, 
        a#365#4#0, 
        a#365#5#0, 
        a#365#6#0, 
        a#365#7#0, 
        a#365#8#0, 
        a#365#9#0, 
        a#365#10#0, 
        a#365#11#0, 
        a#365#12#0, 
        a#365#13#0, 
        a#365#14#0, 
        a#365#15#0, 
        a#365#16#0)));

function _System.Tuple17._10(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#366#0#0: Box, 
    a#366#1#0: Box, 
    a#366#2#0: Box, 
    a#366#3#0: Box, 
    a#366#4#0: Box, 
    a#366#5#0: Box, 
    a#366#6#0: Box, 
    a#366#7#0: Box, 
    a#366#8#0: Box, 
    a#366#9#0: Box, 
    a#366#10#0: Box, 
    a#366#11#0: Box, 
    a#366#12#0: Box, 
    a#366#13#0: Box, 
    a#366#14#0: Box, 
    a#366#15#0: Box, 
    a#366#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#366#0#0, 
      a#366#1#0, 
      a#366#2#0, 
      a#366#3#0, 
      a#366#4#0, 
      a#366#5#0, 
      a#366#6#0, 
      a#366#7#0, 
      a#366#8#0, 
      a#366#9#0, 
      a#366#10#0, 
      a#366#11#0, 
      a#366#12#0, 
      a#366#13#0, 
      a#366#14#0, 
      a#366#15#0, 
      a#366#16#0) } 
  _System.Tuple17._10(#_System._tuple#17._#Make17(a#366#0#0, 
        a#366#1#0, 
        a#366#2#0, 
        a#366#3#0, 
        a#366#4#0, 
        a#366#5#0, 
        a#366#6#0, 
        a#366#7#0, 
        a#366#8#0, 
        a#366#9#0, 
        a#366#10#0, 
        a#366#11#0, 
        a#366#12#0, 
        a#366#13#0, 
        a#366#14#0, 
        a#366#15#0, 
        a#366#16#0))
     == a#366#10#0);

// Inductive rank
axiom (forall a#367#0#0: Box, 
    a#367#1#0: Box, 
    a#367#2#0: Box, 
    a#367#3#0: Box, 
    a#367#4#0: Box, 
    a#367#5#0: Box, 
    a#367#6#0: Box, 
    a#367#7#0: Box, 
    a#367#8#0: Box, 
    a#367#9#0: Box, 
    a#367#10#0: Box, 
    a#367#11#0: Box, 
    a#367#12#0: Box, 
    a#367#13#0: Box, 
    a#367#14#0: Box, 
    a#367#15#0: Box, 
    a#367#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#367#0#0, 
      a#367#1#0, 
      a#367#2#0, 
      a#367#3#0, 
      a#367#4#0, 
      a#367#5#0, 
      a#367#6#0, 
      a#367#7#0, 
      a#367#8#0, 
      a#367#9#0, 
      a#367#10#0, 
      a#367#11#0, 
      a#367#12#0, 
      a#367#13#0, 
      a#367#14#0, 
      a#367#15#0, 
      a#367#16#0) } 
  BoxRank(a#367#10#0)
     < DtRank(#_System._tuple#17._#Make17(a#367#0#0, 
        a#367#1#0, 
        a#367#2#0, 
        a#367#3#0, 
        a#367#4#0, 
        a#367#5#0, 
        a#367#6#0, 
        a#367#7#0, 
        a#367#8#0, 
        a#367#9#0, 
        a#367#10#0, 
        a#367#11#0, 
        a#367#12#0, 
        a#367#13#0, 
        a#367#14#0, 
        a#367#15#0, 
        a#367#16#0)));

function _System.Tuple17._11(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#368#0#0: Box, 
    a#368#1#0: Box, 
    a#368#2#0: Box, 
    a#368#3#0: Box, 
    a#368#4#0: Box, 
    a#368#5#0: Box, 
    a#368#6#0: Box, 
    a#368#7#0: Box, 
    a#368#8#0: Box, 
    a#368#9#0: Box, 
    a#368#10#0: Box, 
    a#368#11#0: Box, 
    a#368#12#0: Box, 
    a#368#13#0: Box, 
    a#368#14#0: Box, 
    a#368#15#0: Box, 
    a#368#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#368#0#0, 
      a#368#1#0, 
      a#368#2#0, 
      a#368#3#0, 
      a#368#4#0, 
      a#368#5#0, 
      a#368#6#0, 
      a#368#7#0, 
      a#368#8#0, 
      a#368#9#0, 
      a#368#10#0, 
      a#368#11#0, 
      a#368#12#0, 
      a#368#13#0, 
      a#368#14#0, 
      a#368#15#0, 
      a#368#16#0) } 
  _System.Tuple17._11(#_System._tuple#17._#Make17(a#368#0#0, 
        a#368#1#0, 
        a#368#2#0, 
        a#368#3#0, 
        a#368#4#0, 
        a#368#5#0, 
        a#368#6#0, 
        a#368#7#0, 
        a#368#8#0, 
        a#368#9#0, 
        a#368#10#0, 
        a#368#11#0, 
        a#368#12#0, 
        a#368#13#0, 
        a#368#14#0, 
        a#368#15#0, 
        a#368#16#0))
     == a#368#11#0);

// Inductive rank
axiom (forall a#369#0#0: Box, 
    a#369#1#0: Box, 
    a#369#2#0: Box, 
    a#369#3#0: Box, 
    a#369#4#0: Box, 
    a#369#5#0: Box, 
    a#369#6#0: Box, 
    a#369#7#0: Box, 
    a#369#8#0: Box, 
    a#369#9#0: Box, 
    a#369#10#0: Box, 
    a#369#11#0: Box, 
    a#369#12#0: Box, 
    a#369#13#0: Box, 
    a#369#14#0: Box, 
    a#369#15#0: Box, 
    a#369#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#369#0#0, 
      a#369#1#0, 
      a#369#2#0, 
      a#369#3#0, 
      a#369#4#0, 
      a#369#5#0, 
      a#369#6#0, 
      a#369#7#0, 
      a#369#8#0, 
      a#369#9#0, 
      a#369#10#0, 
      a#369#11#0, 
      a#369#12#0, 
      a#369#13#0, 
      a#369#14#0, 
      a#369#15#0, 
      a#369#16#0) } 
  BoxRank(a#369#11#0)
     < DtRank(#_System._tuple#17._#Make17(a#369#0#0, 
        a#369#1#0, 
        a#369#2#0, 
        a#369#3#0, 
        a#369#4#0, 
        a#369#5#0, 
        a#369#6#0, 
        a#369#7#0, 
        a#369#8#0, 
        a#369#9#0, 
        a#369#10#0, 
        a#369#11#0, 
        a#369#12#0, 
        a#369#13#0, 
        a#369#14#0, 
        a#369#15#0, 
        a#369#16#0)));

function _System.Tuple17._12(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#370#0#0: Box, 
    a#370#1#0: Box, 
    a#370#2#0: Box, 
    a#370#3#0: Box, 
    a#370#4#0: Box, 
    a#370#5#0: Box, 
    a#370#6#0: Box, 
    a#370#7#0: Box, 
    a#370#8#0: Box, 
    a#370#9#0: Box, 
    a#370#10#0: Box, 
    a#370#11#0: Box, 
    a#370#12#0: Box, 
    a#370#13#0: Box, 
    a#370#14#0: Box, 
    a#370#15#0: Box, 
    a#370#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#370#0#0, 
      a#370#1#0, 
      a#370#2#0, 
      a#370#3#0, 
      a#370#4#0, 
      a#370#5#0, 
      a#370#6#0, 
      a#370#7#0, 
      a#370#8#0, 
      a#370#9#0, 
      a#370#10#0, 
      a#370#11#0, 
      a#370#12#0, 
      a#370#13#0, 
      a#370#14#0, 
      a#370#15#0, 
      a#370#16#0) } 
  _System.Tuple17._12(#_System._tuple#17._#Make17(a#370#0#0, 
        a#370#1#0, 
        a#370#2#0, 
        a#370#3#0, 
        a#370#4#0, 
        a#370#5#0, 
        a#370#6#0, 
        a#370#7#0, 
        a#370#8#0, 
        a#370#9#0, 
        a#370#10#0, 
        a#370#11#0, 
        a#370#12#0, 
        a#370#13#0, 
        a#370#14#0, 
        a#370#15#0, 
        a#370#16#0))
     == a#370#12#0);

// Inductive rank
axiom (forall a#371#0#0: Box, 
    a#371#1#0: Box, 
    a#371#2#0: Box, 
    a#371#3#0: Box, 
    a#371#4#0: Box, 
    a#371#5#0: Box, 
    a#371#6#0: Box, 
    a#371#7#0: Box, 
    a#371#8#0: Box, 
    a#371#9#0: Box, 
    a#371#10#0: Box, 
    a#371#11#0: Box, 
    a#371#12#0: Box, 
    a#371#13#0: Box, 
    a#371#14#0: Box, 
    a#371#15#0: Box, 
    a#371#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#371#0#0, 
      a#371#1#0, 
      a#371#2#0, 
      a#371#3#0, 
      a#371#4#0, 
      a#371#5#0, 
      a#371#6#0, 
      a#371#7#0, 
      a#371#8#0, 
      a#371#9#0, 
      a#371#10#0, 
      a#371#11#0, 
      a#371#12#0, 
      a#371#13#0, 
      a#371#14#0, 
      a#371#15#0, 
      a#371#16#0) } 
  BoxRank(a#371#12#0)
     < DtRank(#_System._tuple#17._#Make17(a#371#0#0, 
        a#371#1#0, 
        a#371#2#0, 
        a#371#3#0, 
        a#371#4#0, 
        a#371#5#0, 
        a#371#6#0, 
        a#371#7#0, 
        a#371#8#0, 
        a#371#9#0, 
        a#371#10#0, 
        a#371#11#0, 
        a#371#12#0, 
        a#371#13#0, 
        a#371#14#0, 
        a#371#15#0, 
        a#371#16#0)));

function _System.Tuple17._13(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#372#0#0: Box, 
    a#372#1#0: Box, 
    a#372#2#0: Box, 
    a#372#3#0: Box, 
    a#372#4#0: Box, 
    a#372#5#0: Box, 
    a#372#6#0: Box, 
    a#372#7#0: Box, 
    a#372#8#0: Box, 
    a#372#9#0: Box, 
    a#372#10#0: Box, 
    a#372#11#0: Box, 
    a#372#12#0: Box, 
    a#372#13#0: Box, 
    a#372#14#0: Box, 
    a#372#15#0: Box, 
    a#372#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#372#0#0, 
      a#372#1#0, 
      a#372#2#0, 
      a#372#3#0, 
      a#372#4#0, 
      a#372#5#0, 
      a#372#6#0, 
      a#372#7#0, 
      a#372#8#0, 
      a#372#9#0, 
      a#372#10#0, 
      a#372#11#0, 
      a#372#12#0, 
      a#372#13#0, 
      a#372#14#0, 
      a#372#15#0, 
      a#372#16#0) } 
  _System.Tuple17._13(#_System._tuple#17._#Make17(a#372#0#0, 
        a#372#1#0, 
        a#372#2#0, 
        a#372#3#0, 
        a#372#4#0, 
        a#372#5#0, 
        a#372#6#0, 
        a#372#7#0, 
        a#372#8#0, 
        a#372#9#0, 
        a#372#10#0, 
        a#372#11#0, 
        a#372#12#0, 
        a#372#13#0, 
        a#372#14#0, 
        a#372#15#0, 
        a#372#16#0))
     == a#372#13#0);

// Inductive rank
axiom (forall a#373#0#0: Box, 
    a#373#1#0: Box, 
    a#373#2#0: Box, 
    a#373#3#0: Box, 
    a#373#4#0: Box, 
    a#373#5#0: Box, 
    a#373#6#0: Box, 
    a#373#7#0: Box, 
    a#373#8#0: Box, 
    a#373#9#0: Box, 
    a#373#10#0: Box, 
    a#373#11#0: Box, 
    a#373#12#0: Box, 
    a#373#13#0: Box, 
    a#373#14#0: Box, 
    a#373#15#0: Box, 
    a#373#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#373#0#0, 
      a#373#1#0, 
      a#373#2#0, 
      a#373#3#0, 
      a#373#4#0, 
      a#373#5#0, 
      a#373#6#0, 
      a#373#7#0, 
      a#373#8#0, 
      a#373#9#0, 
      a#373#10#0, 
      a#373#11#0, 
      a#373#12#0, 
      a#373#13#0, 
      a#373#14#0, 
      a#373#15#0, 
      a#373#16#0) } 
  BoxRank(a#373#13#0)
     < DtRank(#_System._tuple#17._#Make17(a#373#0#0, 
        a#373#1#0, 
        a#373#2#0, 
        a#373#3#0, 
        a#373#4#0, 
        a#373#5#0, 
        a#373#6#0, 
        a#373#7#0, 
        a#373#8#0, 
        a#373#9#0, 
        a#373#10#0, 
        a#373#11#0, 
        a#373#12#0, 
        a#373#13#0, 
        a#373#14#0, 
        a#373#15#0, 
        a#373#16#0)));

function _System.Tuple17._14(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#374#0#0: Box, 
    a#374#1#0: Box, 
    a#374#2#0: Box, 
    a#374#3#0: Box, 
    a#374#4#0: Box, 
    a#374#5#0: Box, 
    a#374#6#0: Box, 
    a#374#7#0: Box, 
    a#374#8#0: Box, 
    a#374#9#0: Box, 
    a#374#10#0: Box, 
    a#374#11#0: Box, 
    a#374#12#0: Box, 
    a#374#13#0: Box, 
    a#374#14#0: Box, 
    a#374#15#0: Box, 
    a#374#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#374#0#0, 
      a#374#1#0, 
      a#374#2#0, 
      a#374#3#0, 
      a#374#4#0, 
      a#374#5#0, 
      a#374#6#0, 
      a#374#7#0, 
      a#374#8#0, 
      a#374#9#0, 
      a#374#10#0, 
      a#374#11#0, 
      a#374#12#0, 
      a#374#13#0, 
      a#374#14#0, 
      a#374#15#0, 
      a#374#16#0) } 
  _System.Tuple17._14(#_System._tuple#17._#Make17(a#374#0#0, 
        a#374#1#0, 
        a#374#2#0, 
        a#374#3#0, 
        a#374#4#0, 
        a#374#5#0, 
        a#374#6#0, 
        a#374#7#0, 
        a#374#8#0, 
        a#374#9#0, 
        a#374#10#0, 
        a#374#11#0, 
        a#374#12#0, 
        a#374#13#0, 
        a#374#14#0, 
        a#374#15#0, 
        a#374#16#0))
     == a#374#14#0);

// Inductive rank
axiom (forall a#375#0#0: Box, 
    a#375#1#0: Box, 
    a#375#2#0: Box, 
    a#375#3#0: Box, 
    a#375#4#0: Box, 
    a#375#5#0: Box, 
    a#375#6#0: Box, 
    a#375#7#0: Box, 
    a#375#8#0: Box, 
    a#375#9#0: Box, 
    a#375#10#0: Box, 
    a#375#11#0: Box, 
    a#375#12#0: Box, 
    a#375#13#0: Box, 
    a#375#14#0: Box, 
    a#375#15#0: Box, 
    a#375#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#375#0#0, 
      a#375#1#0, 
      a#375#2#0, 
      a#375#3#0, 
      a#375#4#0, 
      a#375#5#0, 
      a#375#6#0, 
      a#375#7#0, 
      a#375#8#0, 
      a#375#9#0, 
      a#375#10#0, 
      a#375#11#0, 
      a#375#12#0, 
      a#375#13#0, 
      a#375#14#0, 
      a#375#15#0, 
      a#375#16#0) } 
  BoxRank(a#375#14#0)
     < DtRank(#_System._tuple#17._#Make17(a#375#0#0, 
        a#375#1#0, 
        a#375#2#0, 
        a#375#3#0, 
        a#375#4#0, 
        a#375#5#0, 
        a#375#6#0, 
        a#375#7#0, 
        a#375#8#0, 
        a#375#9#0, 
        a#375#10#0, 
        a#375#11#0, 
        a#375#12#0, 
        a#375#13#0, 
        a#375#14#0, 
        a#375#15#0, 
        a#375#16#0)));

function _System.Tuple17._15(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#376#0#0: Box, 
    a#376#1#0: Box, 
    a#376#2#0: Box, 
    a#376#3#0: Box, 
    a#376#4#0: Box, 
    a#376#5#0: Box, 
    a#376#6#0: Box, 
    a#376#7#0: Box, 
    a#376#8#0: Box, 
    a#376#9#0: Box, 
    a#376#10#0: Box, 
    a#376#11#0: Box, 
    a#376#12#0: Box, 
    a#376#13#0: Box, 
    a#376#14#0: Box, 
    a#376#15#0: Box, 
    a#376#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#376#0#0, 
      a#376#1#0, 
      a#376#2#0, 
      a#376#3#0, 
      a#376#4#0, 
      a#376#5#0, 
      a#376#6#0, 
      a#376#7#0, 
      a#376#8#0, 
      a#376#9#0, 
      a#376#10#0, 
      a#376#11#0, 
      a#376#12#0, 
      a#376#13#0, 
      a#376#14#0, 
      a#376#15#0, 
      a#376#16#0) } 
  _System.Tuple17._15(#_System._tuple#17._#Make17(a#376#0#0, 
        a#376#1#0, 
        a#376#2#0, 
        a#376#3#0, 
        a#376#4#0, 
        a#376#5#0, 
        a#376#6#0, 
        a#376#7#0, 
        a#376#8#0, 
        a#376#9#0, 
        a#376#10#0, 
        a#376#11#0, 
        a#376#12#0, 
        a#376#13#0, 
        a#376#14#0, 
        a#376#15#0, 
        a#376#16#0))
     == a#376#15#0);

// Inductive rank
axiom (forall a#377#0#0: Box, 
    a#377#1#0: Box, 
    a#377#2#0: Box, 
    a#377#3#0: Box, 
    a#377#4#0: Box, 
    a#377#5#0: Box, 
    a#377#6#0: Box, 
    a#377#7#0: Box, 
    a#377#8#0: Box, 
    a#377#9#0: Box, 
    a#377#10#0: Box, 
    a#377#11#0: Box, 
    a#377#12#0: Box, 
    a#377#13#0: Box, 
    a#377#14#0: Box, 
    a#377#15#0: Box, 
    a#377#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#377#0#0, 
      a#377#1#0, 
      a#377#2#0, 
      a#377#3#0, 
      a#377#4#0, 
      a#377#5#0, 
      a#377#6#0, 
      a#377#7#0, 
      a#377#8#0, 
      a#377#9#0, 
      a#377#10#0, 
      a#377#11#0, 
      a#377#12#0, 
      a#377#13#0, 
      a#377#14#0, 
      a#377#15#0, 
      a#377#16#0) } 
  BoxRank(a#377#15#0)
     < DtRank(#_System._tuple#17._#Make17(a#377#0#0, 
        a#377#1#0, 
        a#377#2#0, 
        a#377#3#0, 
        a#377#4#0, 
        a#377#5#0, 
        a#377#6#0, 
        a#377#7#0, 
        a#377#8#0, 
        a#377#9#0, 
        a#377#10#0, 
        a#377#11#0, 
        a#377#12#0, 
        a#377#13#0, 
        a#377#14#0, 
        a#377#15#0, 
        a#377#16#0)));

function _System.Tuple17._16(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#378#0#0: Box, 
    a#378#1#0: Box, 
    a#378#2#0: Box, 
    a#378#3#0: Box, 
    a#378#4#0: Box, 
    a#378#5#0: Box, 
    a#378#6#0: Box, 
    a#378#7#0: Box, 
    a#378#8#0: Box, 
    a#378#9#0: Box, 
    a#378#10#0: Box, 
    a#378#11#0: Box, 
    a#378#12#0: Box, 
    a#378#13#0: Box, 
    a#378#14#0: Box, 
    a#378#15#0: Box, 
    a#378#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#378#0#0, 
      a#378#1#0, 
      a#378#2#0, 
      a#378#3#0, 
      a#378#4#0, 
      a#378#5#0, 
      a#378#6#0, 
      a#378#7#0, 
      a#378#8#0, 
      a#378#9#0, 
      a#378#10#0, 
      a#378#11#0, 
      a#378#12#0, 
      a#378#13#0, 
      a#378#14#0, 
      a#378#15#0, 
      a#378#16#0) } 
  _System.Tuple17._16(#_System._tuple#17._#Make17(a#378#0#0, 
        a#378#1#0, 
        a#378#2#0, 
        a#378#3#0, 
        a#378#4#0, 
        a#378#5#0, 
        a#378#6#0, 
        a#378#7#0, 
        a#378#8#0, 
        a#378#9#0, 
        a#378#10#0, 
        a#378#11#0, 
        a#378#12#0, 
        a#378#13#0, 
        a#378#14#0, 
        a#378#15#0, 
        a#378#16#0))
     == a#378#16#0);

// Inductive rank
axiom (forall a#379#0#0: Box, 
    a#379#1#0: Box, 
    a#379#2#0: Box, 
    a#379#3#0: Box, 
    a#379#4#0: Box, 
    a#379#5#0: Box, 
    a#379#6#0: Box, 
    a#379#7#0: Box, 
    a#379#8#0: Box, 
    a#379#9#0: Box, 
    a#379#10#0: Box, 
    a#379#11#0: Box, 
    a#379#12#0: Box, 
    a#379#13#0: Box, 
    a#379#14#0: Box, 
    a#379#15#0: Box, 
    a#379#16#0: Box :: 
  { #_System._tuple#17._#Make17(a#379#0#0, 
      a#379#1#0, 
      a#379#2#0, 
      a#379#3#0, 
      a#379#4#0, 
      a#379#5#0, 
      a#379#6#0, 
      a#379#7#0, 
      a#379#8#0, 
      a#379#9#0, 
      a#379#10#0, 
      a#379#11#0, 
      a#379#12#0, 
      a#379#13#0, 
      a#379#14#0, 
      a#379#15#0, 
      a#379#16#0) } 
  BoxRank(a#379#16#0)
     < DtRank(#_System._tuple#17._#Make17(a#379#0#0, 
        a#379#1#0, 
        a#379#2#0, 
        a#379#3#0, 
        a#379#4#0, 
        a#379#5#0, 
        a#379#6#0, 
        a#379#7#0, 
        a#379#8#0, 
        a#379#9#0, 
        a#379#10#0, 
        a#379#11#0, 
        a#379#12#0, 
        a#379#13#0, 
        a#379#14#0, 
        a#379#15#0, 
        a#379#16#0)));

// Depth-one case-split function
function $IsA#_System.Tuple17(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple17(d) } 
  $IsA#_System.Tuple17(d) ==> _System.Tuple17.___hMake17_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#17$T0: Ty, 
    _System._tuple#17$T1: Ty, 
    _System._tuple#17$T2: Ty, 
    _System._tuple#17$T3: Ty, 
    _System._tuple#17$T4: Ty, 
    _System._tuple#17$T5: Ty, 
    _System._tuple#17$T6: Ty, 
    _System._tuple#17$T7: Ty, 
    _System._tuple#17$T8: Ty, 
    _System._tuple#17$T9: Ty, 
    _System._tuple#17$T10: Ty, 
    _System._tuple#17$T11: Ty, 
    _System._tuple#17$T12: Ty, 
    _System._tuple#17$T13: Ty, 
    _System._tuple#17$T14: Ty, 
    _System._tuple#17$T15: Ty, 
    _System._tuple#17$T16: Ty, 
    d: DatatypeType :: 
  { _System.Tuple17.___hMake17_q(d), $Is(d, 
      Tclass._System.Tuple17(_System._tuple#17$T0, 
        _System._tuple#17$T1, 
        _System._tuple#17$T2, 
        _System._tuple#17$T3, 
        _System._tuple#17$T4, 
        _System._tuple#17$T5, 
        _System._tuple#17$T6, 
        _System._tuple#17$T7, 
        _System._tuple#17$T8, 
        _System._tuple#17$T9, 
        _System._tuple#17$T10, 
        _System._tuple#17$T11, 
        _System._tuple#17$T12, 
        _System._tuple#17$T13, 
        _System._tuple#17$T14, 
        _System._tuple#17$T15, 
        _System._tuple#17$T16)) } 
  $Is(d, 
      Tclass._System.Tuple17(_System._tuple#17$T0, 
        _System._tuple#17$T1, 
        _System._tuple#17$T2, 
        _System._tuple#17$T3, 
        _System._tuple#17$T4, 
        _System._tuple#17$T5, 
        _System._tuple#17$T6, 
        _System._tuple#17$T7, 
        _System._tuple#17$T8, 
        _System._tuple#17$T9, 
        _System._tuple#17$T10, 
        _System._tuple#17$T11, 
        _System._tuple#17$T12, 
        _System._tuple#17$T13, 
        _System._tuple#17$T14, 
        _System._tuple#17$T15, 
        _System._tuple#17$T16))
     ==> _System.Tuple17.___hMake17_q(d));

// Datatype extensional equality declaration
function _System.Tuple17#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#17._#Make17
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple17#Equal(a, b) } 
  _System.Tuple17#Equal(a, b)
     <==> _System.Tuple17._0(a) == _System.Tuple17._0(b)
       && _System.Tuple17._1(a) == _System.Tuple17._1(b)
       && _System.Tuple17._2(a) == _System.Tuple17._2(b)
       && _System.Tuple17._3(a) == _System.Tuple17._3(b)
       && _System.Tuple17._4(a) == _System.Tuple17._4(b)
       && _System.Tuple17._5(a) == _System.Tuple17._5(b)
       && _System.Tuple17._6(a) == _System.Tuple17._6(b)
       && _System.Tuple17._7(a) == _System.Tuple17._7(b)
       && _System.Tuple17._8(a) == _System.Tuple17._8(b)
       && _System.Tuple17._9(a) == _System.Tuple17._9(b)
       && _System.Tuple17._10(a) == _System.Tuple17._10(b)
       && _System.Tuple17._11(a) == _System.Tuple17._11(b)
       && _System.Tuple17._12(a) == _System.Tuple17._12(b)
       && _System.Tuple17._13(a) == _System.Tuple17._13(b)
       && _System.Tuple17._14(a) == _System.Tuple17._14(b)
       && _System.Tuple17._15(a) == _System.Tuple17._15(b)
       && _System.Tuple17._16(a) == _System.Tuple17._16(b));

// Datatype extensionality axiom: _System._tuple#17
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple17#Equal(a, b) } 
  _System.Tuple17#Equal(a, b) <==> a == b);

const unique class._System.Tuple17: ClassName;

// Constructor function declaration
function #_System._tuple#18._#Make18(Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : DatatypeType;

const unique ##_System._tuple#18._#Make18: DtCtorId
uses {
// Constructor identifier
axiom (forall a#380#0#0: Box, 
    a#380#1#0: Box, 
    a#380#2#0: Box, 
    a#380#3#0: Box, 
    a#380#4#0: Box, 
    a#380#5#0: Box, 
    a#380#6#0: Box, 
    a#380#7#0: Box, 
    a#380#8#0: Box, 
    a#380#9#0: Box, 
    a#380#10#0: Box, 
    a#380#11#0: Box, 
    a#380#12#0: Box, 
    a#380#13#0: Box, 
    a#380#14#0: Box, 
    a#380#15#0: Box, 
    a#380#16#0: Box, 
    a#380#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#380#0#0, 
      a#380#1#0, 
      a#380#2#0, 
      a#380#3#0, 
      a#380#4#0, 
      a#380#5#0, 
      a#380#6#0, 
      a#380#7#0, 
      a#380#8#0, 
      a#380#9#0, 
      a#380#10#0, 
      a#380#11#0, 
      a#380#12#0, 
      a#380#13#0, 
      a#380#14#0, 
      a#380#15#0, 
      a#380#16#0, 
      a#380#17#0) } 
  DatatypeCtorId(#_System._tuple#18._#Make18(a#380#0#0, 
        a#380#1#0, 
        a#380#2#0, 
        a#380#3#0, 
        a#380#4#0, 
        a#380#5#0, 
        a#380#6#0, 
        a#380#7#0, 
        a#380#8#0, 
        a#380#9#0, 
        a#380#10#0, 
        a#380#11#0, 
        a#380#12#0, 
        a#380#13#0, 
        a#380#14#0, 
        a#380#15#0, 
        a#380#16#0, 
        a#380#17#0))
     == ##_System._tuple#18._#Make18);
}

function _System.Tuple18.___hMake18_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple18.___hMake18_q(d) } 
  _System.Tuple18.___hMake18_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#18._#Make18);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple18.___hMake18_q(d) } 
  _System.Tuple18.___hMake18_q(d)
     ==> (exists a#381#0#0: Box, 
        a#381#1#0: Box, 
        a#381#2#0: Box, 
        a#381#3#0: Box, 
        a#381#4#0: Box, 
        a#381#5#0: Box, 
        a#381#6#0: Box, 
        a#381#7#0: Box, 
        a#381#8#0: Box, 
        a#381#9#0: Box, 
        a#381#10#0: Box, 
        a#381#11#0: Box, 
        a#381#12#0: Box, 
        a#381#13#0: Box, 
        a#381#14#0: Box, 
        a#381#15#0: Box, 
        a#381#16#0: Box, 
        a#381#17#0: Box :: 
      d
         == #_System._tuple#18._#Make18(a#381#0#0, 
          a#381#1#0, 
          a#381#2#0, 
          a#381#3#0, 
          a#381#4#0, 
          a#381#5#0, 
          a#381#6#0, 
          a#381#7#0, 
          a#381#8#0, 
          a#381#9#0, 
          a#381#10#0, 
          a#381#11#0, 
          a#381#12#0, 
          a#381#13#0, 
          a#381#14#0, 
          a#381#15#0, 
          a#381#16#0, 
          a#381#17#0)));

function Tclass._System.Tuple18(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.Tuple18: TyTag;

// Tclass._System.Tuple18 Tag
axiom (forall _System._tuple#18$T0: Ty, 
    _System._tuple#18$T1: Ty, 
    _System._tuple#18$T2: Ty, 
    _System._tuple#18$T3: Ty, 
    _System._tuple#18$T4: Ty, 
    _System._tuple#18$T5: Ty, 
    _System._tuple#18$T6: Ty, 
    _System._tuple#18$T7: Ty, 
    _System._tuple#18$T8: Ty, 
    _System._tuple#18$T9: Ty, 
    _System._tuple#18$T10: Ty, 
    _System._tuple#18$T11: Ty, 
    _System._tuple#18$T12: Ty, 
    _System._tuple#18$T13: Ty, 
    _System._tuple#18$T14: Ty, 
    _System._tuple#18$T15: Ty, 
    _System._tuple#18$T16: Ty, 
    _System._tuple#18$T17: Ty :: 
  { Tclass._System.Tuple18(_System._tuple#18$T0, 
      _System._tuple#18$T1, 
      _System._tuple#18$T2, 
      _System._tuple#18$T3, 
      _System._tuple#18$T4, 
      _System._tuple#18$T5, 
      _System._tuple#18$T6, 
      _System._tuple#18$T7, 
      _System._tuple#18$T8, 
      _System._tuple#18$T9, 
      _System._tuple#18$T10, 
      _System._tuple#18$T11, 
      _System._tuple#18$T12, 
      _System._tuple#18$T13, 
      _System._tuple#18$T14, 
      _System._tuple#18$T15, 
      _System._tuple#18$T16, 
      _System._tuple#18$T17) } 
  Tag(Tclass._System.Tuple18(_System._tuple#18$T0, 
          _System._tuple#18$T1, 
          _System._tuple#18$T2, 
          _System._tuple#18$T3, 
          _System._tuple#18$T4, 
          _System._tuple#18$T5, 
          _System._tuple#18$T6, 
          _System._tuple#18$T7, 
          _System._tuple#18$T8, 
          _System._tuple#18$T9, 
          _System._tuple#18$T10, 
          _System._tuple#18$T11, 
          _System._tuple#18$T12, 
          _System._tuple#18$T13, 
          _System._tuple#18$T14, 
          _System._tuple#18$T15, 
          _System._tuple#18$T16, 
          _System._tuple#18$T17))
       == Tagclass._System.Tuple18
     && TagFamily(Tclass._System.Tuple18(_System._tuple#18$T0, 
          _System._tuple#18$T1, 
          _System._tuple#18$T2, 
          _System._tuple#18$T3, 
          _System._tuple#18$T4, 
          _System._tuple#18$T5, 
          _System._tuple#18$T6, 
          _System._tuple#18$T7, 
          _System._tuple#18$T8, 
          _System._tuple#18$T9, 
          _System._tuple#18$T10, 
          _System._tuple#18$T11, 
          _System._tuple#18$T12, 
          _System._tuple#18$T13, 
          _System._tuple#18$T14, 
          _System._tuple#18$T15, 
          _System._tuple#18$T16, 
          _System._tuple#18$T17))
       == tytagFamily$_tuple#18);

function Tclass._System.Tuple18_0(Ty) : Ty;

// Tclass._System.Tuple18 injectivity 0
axiom (forall _System._tuple#18$T0: Ty, 
    _System._tuple#18$T1: Ty, 
    _System._tuple#18$T2: Ty, 
    _System._tuple#18$T3: Ty, 
    _System._tuple#18$T4: Ty, 
    _System._tuple#18$T5: Ty, 
    _System._tuple#18$T6: Ty, 
    _System._tuple#18$T7: Ty, 
    _System._tuple#18$T8: Ty, 
    _System._tuple#18$T9: Ty, 
    _System._tuple#18$T10: Ty, 
    _System._tuple#18$T11: Ty, 
    _System._tuple#18$T12: Ty, 
    _System._tuple#18$T13: Ty, 
    _System._tuple#18$T14: Ty, 
    _System._tuple#18$T15: Ty, 
    _System._tuple#18$T16: Ty, 
    _System._tuple#18$T17: Ty :: 
  { Tclass._System.Tuple18(_System._tuple#18$T0, 
      _System._tuple#18$T1, 
      _System._tuple#18$T2, 
      _System._tuple#18$T3, 
      _System._tuple#18$T4, 
      _System._tuple#18$T5, 
      _System._tuple#18$T6, 
      _System._tuple#18$T7, 
      _System._tuple#18$T8, 
      _System._tuple#18$T9, 
      _System._tuple#18$T10, 
      _System._tuple#18$T11, 
      _System._tuple#18$T12, 
      _System._tuple#18$T13, 
      _System._tuple#18$T14, 
      _System._tuple#18$T15, 
      _System._tuple#18$T16, 
      _System._tuple#18$T17) } 
  Tclass._System.Tuple18_0(Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17))
     == _System._tuple#18$T0);

function Tclass._System.Tuple18_1(Ty) : Ty;

// Tclass._System.Tuple18 injectivity 1
axiom (forall _System._tuple#18$T0: Ty, 
    _System._tuple#18$T1: Ty, 
    _System._tuple#18$T2: Ty, 
    _System._tuple#18$T3: Ty, 
    _System._tuple#18$T4: Ty, 
    _System._tuple#18$T5: Ty, 
    _System._tuple#18$T6: Ty, 
    _System._tuple#18$T7: Ty, 
    _System._tuple#18$T8: Ty, 
    _System._tuple#18$T9: Ty, 
    _System._tuple#18$T10: Ty, 
    _System._tuple#18$T11: Ty, 
    _System._tuple#18$T12: Ty, 
    _System._tuple#18$T13: Ty, 
    _System._tuple#18$T14: Ty, 
    _System._tuple#18$T15: Ty, 
    _System._tuple#18$T16: Ty, 
    _System._tuple#18$T17: Ty :: 
  { Tclass._System.Tuple18(_System._tuple#18$T0, 
      _System._tuple#18$T1, 
      _System._tuple#18$T2, 
      _System._tuple#18$T3, 
      _System._tuple#18$T4, 
      _System._tuple#18$T5, 
      _System._tuple#18$T6, 
      _System._tuple#18$T7, 
      _System._tuple#18$T8, 
      _System._tuple#18$T9, 
      _System._tuple#18$T10, 
      _System._tuple#18$T11, 
      _System._tuple#18$T12, 
      _System._tuple#18$T13, 
      _System._tuple#18$T14, 
      _System._tuple#18$T15, 
      _System._tuple#18$T16, 
      _System._tuple#18$T17) } 
  Tclass._System.Tuple18_1(Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17))
     == _System._tuple#18$T1);

function Tclass._System.Tuple18_2(Ty) : Ty;

// Tclass._System.Tuple18 injectivity 2
axiom (forall _System._tuple#18$T0: Ty, 
    _System._tuple#18$T1: Ty, 
    _System._tuple#18$T2: Ty, 
    _System._tuple#18$T3: Ty, 
    _System._tuple#18$T4: Ty, 
    _System._tuple#18$T5: Ty, 
    _System._tuple#18$T6: Ty, 
    _System._tuple#18$T7: Ty, 
    _System._tuple#18$T8: Ty, 
    _System._tuple#18$T9: Ty, 
    _System._tuple#18$T10: Ty, 
    _System._tuple#18$T11: Ty, 
    _System._tuple#18$T12: Ty, 
    _System._tuple#18$T13: Ty, 
    _System._tuple#18$T14: Ty, 
    _System._tuple#18$T15: Ty, 
    _System._tuple#18$T16: Ty, 
    _System._tuple#18$T17: Ty :: 
  { Tclass._System.Tuple18(_System._tuple#18$T0, 
      _System._tuple#18$T1, 
      _System._tuple#18$T2, 
      _System._tuple#18$T3, 
      _System._tuple#18$T4, 
      _System._tuple#18$T5, 
      _System._tuple#18$T6, 
      _System._tuple#18$T7, 
      _System._tuple#18$T8, 
      _System._tuple#18$T9, 
      _System._tuple#18$T10, 
      _System._tuple#18$T11, 
      _System._tuple#18$T12, 
      _System._tuple#18$T13, 
      _System._tuple#18$T14, 
      _System._tuple#18$T15, 
      _System._tuple#18$T16, 
      _System._tuple#18$T17) } 
  Tclass._System.Tuple18_2(Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17))
     == _System._tuple#18$T2);

function Tclass._System.Tuple18_3(Ty) : Ty;

// Tclass._System.Tuple18 injectivity 3
axiom (forall _System._tuple#18$T0: Ty, 
    _System._tuple#18$T1: Ty, 
    _System._tuple#18$T2: Ty, 
    _System._tuple#18$T3: Ty, 
    _System._tuple#18$T4: Ty, 
    _System._tuple#18$T5: Ty, 
    _System._tuple#18$T6: Ty, 
    _System._tuple#18$T7: Ty, 
    _System._tuple#18$T8: Ty, 
    _System._tuple#18$T9: Ty, 
    _System._tuple#18$T10: Ty, 
    _System._tuple#18$T11: Ty, 
    _System._tuple#18$T12: Ty, 
    _System._tuple#18$T13: Ty, 
    _System._tuple#18$T14: Ty, 
    _System._tuple#18$T15: Ty, 
    _System._tuple#18$T16: Ty, 
    _System._tuple#18$T17: Ty :: 
  { Tclass._System.Tuple18(_System._tuple#18$T0, 
      _System._tuple#18$T1, 
      _System._tuple#18$T2, 
      _System._tuple#18$T3, 
      _System._tuple#18$T4, 
      _System._tuple#18$T5, 
      _System._tuple#18$T6, 
      _System._tuple#18$T7, 
      _System._tuple#18$T8, 
      _System._tuple#18$T9, 
      _System._tuple#18$T10, 
      _System._tuple#18$T11, 
      _System._tuple#18$T12, 
      _System._tuple#18$T13, 
      _System._tuple#18$T14, 
      _System._tuple#18$T15, 
      _System._tuple#18$T16, 
      _System._tuple#18$T17) } 
  Tclass._System.Tuple18_3(Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17))
     == _System._tuple#18$T3);

function Tclass._System.Tuple18_4(Ty) : Ty;

// Tclass._System.Tuple18 injectivity 4
axiom (forall _System._tuple#18$T0: Ty, 
    _System._tuple#18$T1: Ty, 
    _System._tuple#18$T2: Ty, 
    _System._tuple#18$T3: Ty, 
    _System._tuple#18$T4: Ty, 
    _System._tuple#18$T5: Ty, 
    _System._tuple#18$T6: Ty, 
    _System._tuple#18$T7: Ty, 
    _System._tuple#18$T8: Ty, 
    _System._tuple#18$T9: Ty, 
    _System._tuple#18$T10: Ty, 
    _System._tuple#18$T11: Ty, 
    _System._tuple#18$T12: Ty, 
    _System._tuple#18$T13: Ty, 
    _System._tuple#18$T14: Ty, 
    _System._tuple#18$T15: Ty, 
    _System._tuple#18$T16: Ty, 
    _System._tuple#18$T17: Ty :: 
  { Tclass._System.Tuple18(_System._tuple#18$T0, 
      _System._tuple#18$T1, 
      _System._tuple#18$T2, 
      _System._tuple#18$T3, 
      _System._tuple#18$T4, 
      _System._tuple#18$T5, 
      _System._tuple#18$T6, 
      _System._tuple#18$T7, 
      _System._tuple#18$T8, 
      _System._tuple#18$T9, 
      _System._tuple#18$T10, 
      _System._tuple#18$T11, 
      _System._tuple#18$T12, 
      _System._tuple#18$T13, 
      _System._tuple#18$T14, 
      _System._tuple#18$T15, 
      _System._tuple#18$T16, 
      _System._tuple#18$T17) } 
  Tclass._System.Tuple18_4(Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17))
     == _System._tuple#18$T4);

function Tclass._System.Tuple18_5(Ty) : Ty;

// Tclass._System.Tuple18 injectivity 5
axiom (forall _System._tuple#18$T0: Ty, 
    _System._tuple#18$T1: Ty, 
    _System._tuple#18$T2: Ty, 
    _System._tuple#18$T3: Ty, 
    _System._tuple#18$T4: Ty, 
    _System._tuple#18$T5: Ty, 
    _System._tuple#18$T6: Ty, 
    _System._tuple#18$T7: Ty, 
    _System._tuple#18$T8: Ty, 
    _System._tuple#18$T9: Ty, 
    _System._tuple#18$T10: Ty, 
    _System._tuple#18$T11: Ty, 
    _System._tuple#18$T12: Ty, 
    _System._tuple#18$T13: Ty, 
    _System._tuple#18$T14: Ty, 
    _System._tuple#18$T15: Ty, 
    _System._tuple#18$T16: Ty, 
    _System._tuple#18$T17: Ty :: 
  { Tclass._System.Tuple18(_System._tuple#18$T0, 
      _System._tuple#18$T1, 
      _System._tuple#18$T2, 
      _System._tuple#18$T3, 
      _System._tuple#18$T4, 
      _System._tuple#18$T5, 
      _System._tuple#18$T6, 
      _System._tuple#18$T7, 
      _System._tuple#18$T8, 
      _System._tuple#18$T9, 
      _System._tuple#18$T10, 
      _System._tuple#18$T11, 
      _System._tuple#18$T12, 
      _System._tuple#18$T13, 
      _System._tuple#18$T14, 
      _System._tuple#18$T15, 
      _System._tuple#18$T16, 
      _System._tuple#18$T17) } 
  Tclass._System.Tuple18_5(Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17))
     == _System._tuple#18$T5);

function Tclass._System.Tuple18_6(Ty) : Ty;

// Tclass._System.Tuple18 injectivity 6
axiom (forall _System._tuple#18$T0: Ty, 
    _System._tuple#18$T1: Ty, 
    _System._tuple#18$T2: Ty, 
    _System._tuple#18$T3: Ty, 
    _System._tuple#18$T4: Ty, 
    _System._tuple#18$T5: Ty, 
    _System._tuple#18$T6: Ty, 
    _System._tuple#18$T7: Ty, 
    _System._tuple#18$T8: Ty, 
    _System._tuple#18$T9: Ty, 
    _System._tuple#18$T10: Ty, 
    _System._tuple#18$T11: Ty, 
    _System._tuple#18$T12: Ty, 
    _System._tuple#18$T13: Ty, 
    _System._tuple#18$T14: Ty, 
    _System._tuple#18$T15: Ty, 
    _System._tuple#18$T16: Ty, 
    _System._tuple#18$T17: Ty :: 
  { Tclass._System.Tuple18(_System._tuple#18$T0, 
      _System._tuple#18$T1, 
      _System._tuple#18$T2, 
      _System._tuple#18$T3, 
      _System._tuple#18$T4, 
      _System._tuple#18$T5, 
      _System._tuple#18$T6, 
      _System._tuple#18$T7, 
      _System._tuple#18$T8, 
      _System._tuple#18$T9, 
      _System._tuple#18$T10, 
      _System._tuple#18$T11, 
      _System._tuple#18$T12, 
      _System._tuple#18$T13, 
      _System._tuple#18$T14, 
      _System._tuple#18$T15, 
      _System._tuple#18$T16, 
      _System._tuple#18$T17) } 
  Tclass._System.Tuple18_6(Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17))
     == _System._tuple#18$T6);

function Tclass._System.Tuple18_7(Ty) : Ty;

// Tclass._System.Tuple18 injectivity 7
axiom (forall _System._tuple#18$T0: Ty, 
    _System._tuple#18$T1: Ty, 
    _System._tuple#18$T2: Ty, 
    _System._tuple#18$T3: Ty, 
    _System._tuple#18$T4: Ty, 
    _System._tuple#18$T5: Ty, 
    _System._tuple#18$T6: Ty, 
    _System._tuple#18$T7: Ty, 
    _System._tuple#18$T8: Ty, 
    _System._tuple#18$T9: Ty, 
    _System._tuple#18$T10: Ty, 
    _System._tuple#18$T11: Ty, 
    _System._tuple#18$T12: Ty, 
    _System._tuple#18$T13: Ty, 
    _System._tuple#18$T14: Ty, 
    _System._tuple#18$T15: Ty, 
    _System._tuple#18$T16: Ty, 
    _System._tuple#18$T17: Ty :: 
  { Tclass._System.Tuple18(_System._tuple#18$T0, 
      _System._tuple#18$T1, 
      _System._tuple#18$T2, 
      _System._tuple#18$T3, 
      _System._tuple#18$T4, 
      _System._tuple#18$T5, 
      _System._tuple#18$T6, 
      _System._tuple#18$T7, 
      _System._tuple#18$T8, 
      _System._tuple#18$T9, 
      _System._tuple#18$T10, 
      _System._tuple#18$T11, 
      _System._tuple#18$T12, 
      _System._tuple#18$T13, 
      _System._tuple#18$T14, 
      _System._tuple#18$T15, 
      _System._tuple#18$T16, 
      _System._tuple#18$T17) } 
  Tclass._System.Tuple18_7(Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17))
     == _System._tuple#18$T7);

function Tclass._System.Tuple18_8(Ty) : Ty;

// Tclass._System.Tuple18 injectivity 8
axiom (forall _System._tuple#18$T0: Ty, 
    _System._tuple#18$T1: Ty, 
    _System._tuple#18$T2: Ty, 
    _System._tuple#18$T3: Ty, 
    _System._tuple#18$T4: Ty, 
    _System._tuple#18$T5: Ty, 
    _System._tuple#18$T6: Ty, 
    _System._tuple#18$T7: Ty, 
    _System._tuple#18$T8: Ty, 
    _System._tuple#18$T9: Ty, 
    _System._tuple#18$T10: Ty, 
    _System._tuple#18$T11: Ty, 
    _System._tuple#18$T12: Ty, 
    _System._tuple#18$T13: Ty, 
    _System._tuple#18$T14: Ty, 
    _System._tuple#18$T15: Ty, 
    _System._tuple#18$T16: Ty, 
    _System._tuple#18$T17: Ty :: 
  { Tclass._System.Tuple18(_System._tuple#18$T0, 
      _System._tuple#18$T1, 
      _System._tuple#18$T2, 
      _System._tuple#18$T3, 
      _System._tuple#18$T4, 
      _System._tuple#18$T5, 
      _System._tuple#18$T6, 
      _System._tuple#18$T7, 
      _System._tuple#18$T8, 
      _System._tuple#18$T9, 
      _System._tuple#18$T10, 
      _System._tuple#18$T11, 
      _System._tuple#18$T12, 
      _System._tuple#18$T13, 
      _System._tuple#18$T14, 
      _System._tuple#18$T15, 
      _System._tuple#18$T16, 
      _System._tuple#18$T17) } 
  Tclass._System.Tuple18_8(Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17))
     == _System._tuple#18$T8);

function Tclass._System.Tuple18_9(Ty) : Ty;

// Tclass._System.Tuple18 injectivity 9
axiom (forall _System._tuple#18$T0: Ty, 
    _System._tuple#18$T1: Ty, 
    _System._tuple#18$T2: Ty, 
    _System._tuple#18$T3: Ty, 
    _System._tuple#18$T4: Ty, 
    _System._tuple#18$T5: Ty, 
    _System._tuple#18$T6: Ty, 
    _System._tuple#18$T7: Ty, 
    _System._tuple#18$T8: Ty, 
    _System._tuple#18$T9: Ty, 
    _System._tuple#18$T10: Ty, 
    _System._tuple#18$T11: Ty, 
    _System._tuple#18$T12: Ty, 
    _System._tuple#18$T13: Ty, 
    _System._tuple#18$T14: Ty, 
    _System._tuple#18$T15: Ty, 
    _System._tuple#18$T16: Ty, 
    _System._tuple#18$T17: Ty :: 
  { Tclass._System.Tuple18(_System._tuple#18$T0, 
      _System._tuple#18$T1, 
      _System._tuple#18$T2, 
      _System._tuple#18$T3, 
      _System._tuple#18$T4, 
      _System._tuple#18$T5, 
      _System._tuple#18$T6, 
      _System._tuple#18$T7, 
      _System._tuple#18$T8, 
      _System._tuple#18$T9, 
      _System._tuple#18$T10, 
      _System._tuple#18$T11, 
      _System._tuple#18$T12, 
      _System._tuple#18$T13, 
      _System._tuple#18$T14, 
      _System._tuple#18$T15, 
      _System._tuple#18$T16, 
      _System._tuple#18$T17) } 
  Tclass._System.Tuple18_9(Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17))
     == _System._tuple#18$T9);

function Tclass._System.Tuple18_10(Ty) : Ty;

// Tclass._System.Tuple18 injectivity 10
axiom (forall _System._tuple#18$T0: Ty, 
    _System._tuple#18$T1: Ty, 
    _System._tuple#18$T2: Ty, 
    _System._tuple#18$T3: Ty, 
    _System._tuple#18$T4: Ty, 
    _System._tuple#18$T5: Ty, 
    _System._tuple#18$T6: Ty, 
    _System._tuple#18$T7: Ty, 
    _System._tuple#18$T8: Ty, 
    _System._tuple#18$T9: Ty, 
    _System._tuple#18$T10: Ty, 
    _System._tuple#18$T11: Ty, 
    _System._tuple#18$T12: Ty, 
    _System._tuple#18$T13: Ty, 
    _System._tuple#18$T14: Ty, 
    _System._tuple#18$T15: Ty, 
    _System._tuple#18$T16: Ty, 
    _System._tuple#18$T17: Ty :: 
  { Tclass._System.Tuple18(_System._tuple#18$T0, 
      _System._tuple#18$T1, 
      _System._tuple#18$T2, 
      _System._tuple#18$T3, 
      _System._tuple#18$T4, 
      _System._tuple#18$T5, 
      _System._tuple#18$T6, 
      _System._tuple#18$T7, 
      _System._tuple#18$T8, 
      _System._tuple#18$T9, 
      _System._tuple#18$T10, 
      _System._tuple#18$T11, 
      _System._tuple#18$T12, 
      _System._tuple#18$T13, 
      _System._tuple#18$T14, 
      _System._tuple#18$T15, 
      _System._tuple#18$T16, 
      _System._tuple#18$T17) } 
  Tclass._System.Tuple18_10(Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17))
     == _System._tuple#18$T10);

function Tclass._System.Tuple18_11(Ty) : Ty;

// Tclass._System.Tuple18 injectivity 11
axiom (forall _System._tuple#18$T0: Ty, 
    _System._tuple#18$T1: Ty, 
    _System._tuple#18$T2: Ty, 
    _System._tuple#18$T3: Ty, 
    _System._tuple#18$T4: Ty, 
    _System._tuple#18$T5: Ty, 
    _System._tuple#18$T6: Ty, 
    _System._tuple#18$T7: Ty, 
    _System._tuple#18$T8: Ty, 
    _System._tuple#18$T9: Ty, 
    _System._tuple#18$T10: Ty, 
    _System._tuple#18$T11: Ty, 
    _System._tuple#18$T12: Ty, 
    _System._tuple#18$T13: Ty, 
    _System._tuple#18$T14: Ty, 
    _System._tuple#18$T15: Ty, 
    _System._tuple#18$T16: Ty, 
    _System._tuple#18$T17: Ty :: 
  { Tclass._System.Tuple18(_System._tuple#18$T0, 
      _System._tuple#18$T1, 
      _System._tuple#18$T2, 
      _System._tuple#18$T3, 
      _System._tuple#18$T4, 
      _System._tuple#18$T5, 
      _System._tuple#18$T6, 
      _System._tuple#18$T7, 
      _System._tuple#18$T8, 
      _System._tuple#18$T9, 
      _System._tuple#18$T10, 
      _System._tuple#18$T11, 
      _System._tuple#18$T12, 
      _System._tuple#18$T13, 
      _System._tuple#18$T14, 
      _System._tuple#18$T15, 
      _System._tuple#18$T16, 
      _System._tuple#18$T17) } 
  Tclass._System.Tuple18_11(Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17))
     == _System._tuple#18$T11);

function Tclass._System.Tuple18_12(Ty) : Ty;

// Tclass._System.Tuple18 injectivity 12
axiom (forall _System._tuple#18$T0: Ty, 
    _System._tuple#18$T1: Ty, 
    _System._tuple#18$T2: Ty, 
    _System._tuple#18$T3: Ty, 
    _System._tuple#18$T4: Ty, 
    _System._tuple#18$T5: Ty, 
    _System._tuple#18$T6: Ty, 
    _System._tuple#18$T7: Ty, 
    _System._tuple#18$T8: Ty, 
    _System._tuple#18$T9: Ty, 
    _System._tuple#18$T10: Ty, 
    _System._tuple#18$T11: Ty, 
    _System._tuple#18$T12: Ty, 
    _System._tuple#18$T13: Ty, 
    _System._tuple#18$T14: Ty, 
    _System._tuple#18$T15: Ty, 
    _System._tuple#18$T16: Ty, 
    _System._tuple#18$T17: Ty :: 
  { Tclass._System.Tuple18(_System._tuple#18$T0, 
      _System._tuple#18$T1, 
      _System._tuple#18$T2, 
      _System._tuple#18$T3, 
      _System._tuple#18$T4, 
      _System._tuple#18$T5, 
      _System._tuple#18$T6, 
      _System._tuple#18$T7, 
      _System._tuple#18$T8, 
      _System._tuple#18$T9, 
      _System._tuple#18$T10, 
      _System._tuple#18$T11, 
      _System._tuple#18$T12, 
      _System._tuple#18$T13, 
      _System._tuple#18$T14, 
      _System._tuple#18$T15, 
      _System._tuple#18$T16, 
      _System._tuple#18$T17) } 
  Tclass._System.Tuple18_12(Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17))
     == _System._tuple#18$T12);

function Tclass._System.Tuple18_13(Ty) : Ty;

// Tclass._System.Tuple18 injectivity 13
axiom (forall _System._tuple#18$T0: Ty, 
    _System._tuple#18$T1: Ty, 
    _System._tuple#18$T2: Ty, 
    _System._tuple#18$T3: Ty, 
    _System._tuple#18$T4: Ty, 
    _System._tuple#18$T5: Ty, 
    _System._tuple#18$T6: Ty, 
    _System._tuple#18$T7: Ty, 
    _System._tuple#18$T8: Ty, 
    _System._tuple#18$T9: Ty, 
    _System._tuple#18$T10: Ty, 
    _System._tuple#18$T11: Ty, 
    _System._tuple#18$T12: Ty, 
    _System._tuple#18$T13: Ty, 
    _System._tuple#18$T14: Ty, 
    _System._tuple#18$T15: Ty, 
    _System._tuple#18$T16: Ty, 
    _System._tuple#18$T17: Ty :: 
  { Tclass._System.Tuple18(_System._tuple#18$T0, 
      _System._tuple#18$T1, 
      _System._tuple#18$T2, 
      _System._tuple#18$T3, 
      _System._tuple#18$T4, 
      _System._tuple#18$T5, 
      _System._tuple#18$T6, 
      _System._tuple#18$T7, 
      _System._tuple#18$T8, 
      _System._tuple#18$T9, 
      _System._tuple#18$T10, 
      _System._tuple#18$T11, 
      _System._tuple#18$T12, 
      _System._tuple#18$T13, 
      _System._tuple#18$T14, 
      _System._tuple#18$T15, 
      _System._tuple#18$T16, 
      _System._tuple#18$T17) } 
  Tclass._System.Tuple18_13(Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17))
     == _System._tuple#18$T13);

function Tclass._System.Tuple18_14(Ty) : Ty;

// Tclass._System.Tuple18 injectivity 14
axiom (forall _System._tuple#18$T0: Ty, 
    _System._tuple#18$T1: Ty, 
    _System._tuple#18$T2: Ty, 
    _System._tuple#18$T3: Ty, 
    _System._tuple#18$T4: Ty, 
    _System._tuple#18$T5: Ty, 
    _System._tuple#18$T6: Ty, 
    _System._tuple#18$T7: Ty, 
    _System._tuple#18$T8: Ty, 
    _System._tuple#18$T9: Ty, 
    _System._tuple#18$T10: Ty, 
    _System._tuple#18$T11: Ty, 
    _System._tuple#18$T12: Ty, 
    _System._tuple#18$T13: Ty, 
    _System._tuple#18$T14: Ty, 
    _System._tuple#18$T15: Ty, 
    _System._tuple#18$T16: Ty, 
    _System._tuple#18$T17: Ty :: 
  { Tclass._System.Tuple18(_System._tuple#18$T0, 
      _System._tuple#18$T1, 
      _System._tuple#18$T2, 
      _System._tuple#18$T3, 
      _System._tuple#18$T4, 
      _System._tuple#18$T5, 
      _System._tuple#18$T6, 
      _System._tuple#18$T7, 
      _System._tuple#18$T8, 
      _System._tuple#18$T9, 
      _System._tuple#18$T10, 
      _System._tuple#18$T11, 
      _System._tuple#18$T12, 
      _System._tuple#18$T13, 
      _System._tuple#18$T14, 
      _System._tuple#18$T15, 
      _System._tuple#18$T16, 
      _System._tuple#18$T17) } 
  Tclass._System.Tuple18_14(Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17))
     == _System._tuple#18$T14);

function Tclass._System.Tuple18_15(Ty) : Ty;

// Tclass._System.Tuple18 injectivity 15
axiom (forall _System._tuple#18$T0: Ty, 
    _System._tuple#18$T1: Ty, 
    _System._tuple#18$T2: Ty, 
    _System._tuple#18$T3: Ty, 
    _System._tuple#18$T4: Ty, 
    _System._tuple#18$T5: Ty, 
    _System._tuple#18$T6: Ty, 
    _System._tuple#18$T7: Ty, 
    _System._tuple#18$T8: Ty, 
    _System._tuple#18$T9: Ty, 
    _System._tuple#18$T10: Ty, 
    _System._tuple#18$T11: Ty, 
    _System._tuple#18$T12: Ty, 
    _System._tuple#18$T13: Ty, 
    _System._tuple#18$T14: Ty, 
    _System._tuple#18$T15: Ty, 
    _System._tuple#18$T16: Ty, 
    _System._tuple#18$T17: Ty :: 
  { Tclass._System.Tuple18(_System._tuple#18$T0, 
      _System._tuple#18$T1, 
      _System._tuple#18$T2, 
      _System._tuple#18$T3, 
      _System._tuple#18$T4, 
      _System._tuple#18$T5, 
      _System._tuple#18$T6, 
      _System._tuple#18$T7, 
      _System._tuple#18$T8, 
      _System._tuple#18$T9, 
      _System._tuple#18$T10, 
      _System._tuple#18$T11, 
      _System._tuple#18$T12, 
      _System._tuple#18$T13, 
      _System._tuple#18$T14, 
      _System._tuple#18$T15, 
      _System._tuple#18$T16, 
      _System._tuple#18$T17) } 
  Tclass._System.Tuple18_15(Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17))
     == _System._tuple#18$T15);

function Tclass._System.Tuple18_16(Ty) : Ty;

// Tclass._System.Tuple18 injectivity 16
axiom (forall _System._tuple#18$T0: Ty, 
    _System._tuple#18$T1: Ty, 
    _System._tuple#18$T2: Ty, 
    _System._tuple#18$T3: Ty, 
    _System._tuple#18$T4: Ty, 
    _System._tuple#18$T5: Ty, 
    _System._tuple#18$T6: Ty, 
    _System._tuple#18$T7: Ty, 
    _System._tuple#18$T8: Ty, 
    _System._tuple#18$T9: Ty, 
    _System._tuple#18$T10: Ty, 
    _System._tuple#18$T11: Ty, 
    _System._tuple#18$T12: Ty, 
    _System._tuple#18$T13: Ty, 
    _System._tuple#18$T14: Ty, 
    _System._tuple#18$T15: Ty, 
    _System._tuple#18$T16: Ty, 
    _System._tuple#18$T17: Ty :: 
  { Tclass._System.Tuple18(_System._tuple#18$T0, 
      _System._tuple#18$T1, 
      _System._tuple#18$T2, 
      _System._tuple#18$T3, 
      _System._tuple#18$T4, 
      _System._tuple#18$T5, 
      _System._tuple#18$T6, 
      _System._tuple#18$T7, 
      _System._tuple#18$T8, 
      _System._tuple#18$T9, 
      _System._tuple#18$T10, 
      _System._tuple#18$T11, 
      _System._tuple#18$T12, 
      _System._tuple#18$T13, 
      _System._tuple#18$T14, 
      _System._tuple#18$T15, 
      _System._tuple#18$T16, 
      _System._tuple#18$T17) } 
  Tclass._System.Tuple18_16(Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17))
     == _System._tuple#18$T16);

function Tclass._System.Tuple18_17(Ty) : Ty;

// Tclass._System.Tuple18 injectivity 17
axiom (forall _System._tuple#18$T0: Ty, 
    _System._tuple#18$T1: Ty, 
    _System._tuple#18$T2: Ty, 
    _System._tuple#18$T3: Ty, 
    _System._tuple#18$T4: Ty, 
    _System._tuple#18$T5: Ty, 
    _System._tuple#18$T6: Ty, 
    _System._tuple#18$T7: Ty, 
    _System._tuple#18$T8: Ty, 
    _System._tuple#18$T9: Ty, 
    _System._tuple#18$T10: Ty, 
    _System._tuple#18$T11: Ty, 
    _System._tuple#18$T12: Ty, 
    _System._tuple#18$T13: Ty, 
    _System._tuple#18$T14: Ty, 
    _System._tuple#18$T15: Ty, 
    _System._tuple#18$T16: Ty, 
    _System._tuple#18$T17: Ty :: 
  { Tclass._System.Tuple18(_System._tuple#18$T0, 
      _System._tuple#18$T1, 
      _System._tuple#18$T2, 
      _System._tuple#18$T3, 
      _System._tuple#18$T4, 
      _System._tuple#18$T5, 
      _System._tuple#18$T6, 
      _System._tuple#18$T7, 
      _System._tuple#18$T8, 
      _System._tuple#18$T9, 
      _System._tuple#18$T10, 
      _System._tuple#18$T11, 
      _System._tuple#18$T12, 
      _System._tuple#18$T13, 
      _System._tuple#18$T14, 
      _System._tuple#18$T15, 
      _System._tuple#18$T16, 
      _System._tuple#18$T17) } 
  Tclass._System.Tuple18_17(Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17))
     == _System._tuple#18$T17);

// Box/unbox axiom for Tclass._System.Tuple18
axiom (forall _System._tuple#18$T0: Ty, 
    _System._tuple#18$T1: Ty, 
    _System._tuple#18$T2: Ty, 
    _System._tuple#18$T3: Ty, 
    _System._tuple#18$T4: Ty, 
    _System._tuple#18$T5: Ty, 
    _System._tuple#18$T6: Ty, 
    _System._tuple#18$T7: Ty, 
    _System._tuple#18$T8: Ty, 
    _System._tuple#18$T9: Ty, 
    _System._tuple#18$T10: Ty, 
    _System._tuple#18$T11: Ty, 
    _System._tuple#18$T12: Ty, 
    _System._tuple#18$T13: Ty, 
    _System._tuple#18$T14: Ty, 
    _System._tuple#18$T15: Ty, 
    _System._tuple#18$T16: Ty, 
    _System._tuple#18$T17: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17)) } 
  $IsBox(bx, 
      Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple18(_System._tuple#18$T0, 
          _System._tuple#18$T1, 
          _System._tuple#18$T2, 
          _System._tuple#18$T3, 
          _System._tuple#18$T4, 
          _System._tuple#18$T5, 
          _System._tuple#18$T6, 
          _System._tuple#18$T7, 
          _System._tuple#18$T8, 
          _System._tuple#18$T9, 
          _System._tuple#18$T10, 
          _System._tuple#18$T11, 
          _System._tuple#18$T12, 
          _System._tuple#18$T13, 
          _System._tuple#18$T14, 
          _System._tuple#18$T15, 
          _System._tuple#18$T16, 
          _System._tuple#18$T17)));

// Constructor $Is
axiom (forall _System._tuple#18$T0: Ty, 
    _System._tuple#18$T1: Ty, 
    _System._tuple#18$T2: Ty, 
    _System._tuple#18$T3: Ty, 
    _System._tuple#18$T4: Ty, 
    _System._tuple#18$T5: Ty, 
    _System._tuple#18$T6: Ty, 
    _System._tuple#18$T7: Ty, 
    _System._tuple#18$T8: Ty, 
    _System._tuple#18$T9: Ty, 
    _System._tuple#18$T10: Ty, 
    _System._tuple#18$T11: Ty, 
    _System._tuple#18$T12: Ty, 
    _System._tuple#18$T13: Ty, 
    _System._tuple#18$T14: Ty, 
    _System._tuple#18$T15: Ty, 
    _System._tuple#18$T16: Ty, 
    _System._tuple#18$T17: Ty, 
    a#382#0#0: Box, 
    a#382#1#0: Box, 
    a#382#2#0: Box, 
    a#382#3#0: Box, 
    a#382#4#0: Box, 
    a#382#5#0: Box, 
    a#382#6#0: Box, 
    a#382#7#0: Box, 
    a#382#8#0: Box, 
    a#382#9#0: Box, 
    a#382#10#0: Box, 
    a#382#11#0: Box, 
    a#382#12#0: Box, 
    a#382#13#0: Box, 
    a#382#14#0: Box, 
    a#382#15#0: Box, 
    a#382#16#0: Box, 
    a#382#17#0: Box :: 
  { $Is(#_System._tuple#18._#Make18(a#382#0#0, 
        a#382#1#0, 
        a#382#2#0, 
        a#382#3#0, 
        a#382#4#0, 
        a#382#5#0, 
        a#382#6#0, 
        a#382#7#0, 
        a#382#8#0, 
        a#382#9#0, 
        a#382#10#0, 
        a#382#11#0, 
        a#382#12#0, 
        a#382#13#0, 
        a#382#14#0, 
        a#382#15#0, 
        a#382#16#0, 
        a#382#17#0), 
      Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17)) } 
  $Is(#_System._tuple#18._#Make18(a#382#0#0, 
        a#382#1#0, 
        a#382#2#0, 
        a#382#3#0, 
        a#382#4#0, 
        a#382#5#0, 
        a#382#6#0, 
        a#382#7#0, 
        a#382#8#0, 
        a#382#9#0, 
        a#382#10#0, 
        a#382#11#0, 
        a#382#12#0, 
        a#382#13#0, 
        a#382#14#0, 
        a#382#15#0, 
        a#382#16#0, 
        a#382#17#0), 
      Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17))
     <==> $IsBox(a#382#0#0, _System._tuple#18$T0)
       && $IsBox(a#382#1#0, _System._tuple#18$T1)
       && $IsBox(a#382#2#0, _System._tuple#18$T2)
       && $IsBox(a#382#3#0, _System._tuple#18$T3)
       && $IsBox(a#382#4#0, _System._tuple#18$T4)
       && $IsBox(a#382#5#0, _System._tuple#18$T5)
       && $IsBox(a#382#6#0, _System._tuple#18$T6)
       && $IsBox(a#382#7#0, _System._tuple#18$T7)
       && $IsBox(a#382#8#0, _System._tuple#18$T8)
       && $IsBox(a#382#9#0, _System._tuple#18$T9)
       && $IsBox(a#382#10#0, _System._tuple#18$T10)
       && $IsBox(a#382#11#0, _System._tuple#18$T11)
       && $IsBox(a#382#12#0, _System._tuple#18$T12)
       && $IsBox(a#382#13#0, _System._tuple#18$T13)
       && $IsBox(a#382#14#0, _System._tuple#18$T14)
       && $IsBox(a#382#15#0, _System._tuple#18$T15)
       && $IsBox(a#382#16#0, _System._tuple#18$T16)
       && $IsBox(a#382#17#0, _System._tuple#18$T17));

// Constructor $IsAlloc
axiom (forall _System._tuple#18$T0: Ty, 
    _System._tuple#18$T1: Ty, 
    _System._tuple#18$T2: Ty, 
    _System._tuple#18$T3: Ty, 
    _System._tuple#18$T4: Ty, 
    _System._tuple#18$T5: Ty, 
    _System._tuple#18$T6: Ty, 
    _System._tuple#18$T7: Ty, 
    _System._tuple#18$T8: Ty, 
    _System._tuple#18$T9: Ty, 
    _System._tuple#18$T10: Ty, 
    _System._tuple#18$T11: Ty, 
    _System._tuple#18$T12: Ty, 
    _System._tuple#18$T13: Ty, 
    _System._tuple#18$T14: Ty, 
    _System._tuple#18$T15: Ty, 
    _System._tuple#18$T16: Ty, 
    _System._tuple#18$T17: Ty, 
    a#382#0#0: Box, 
    a#382#1#0: Box, 
    a#382#2#0: Box, 
    a#382#3#0: Box, 
    a#382#4#0: Box, 
    a#382#5#0: Box, 
    a#382#6#0: Box, 
    a#382#7#0: Box, 
    a#382#8#0: Box, 
    a#382#9#0: Box, 
    a#382#10#0: Box, 
    a#382#11#0: Box, 
    a#382#12#0: Box, 
    a#382#13#0: Box, 
    a#382#14#0: Box, 
    a#382#15#0: Box, 
    a#382#16#0: Box, 
    a#382#17#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#18._#Make18(a#382#0#0, 
        a#382#1#0, 
        a#382#2#0, 
        a#382#3#0, 
        a#382#4#0, 
        a#382#5#0, 
        a#382#6#0, 
        a#382#7#0, 
        a#382#8#0, 
        a#382#9#0, 
        a#382#10#0, 
        a#382#11#0, 
        a#382#12#0, 
        a#382#13#0, 
        a#382#14#0, 
        a#382#15#0, 
        a#382#16#0, 
        a#382#17#0), 
      Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#18._#Make18(a#382#0#0, 
          a#382#1#0, 
          a#382#2#0, 
          a#382#3#0, 
          a#382#4#0, 
          a#382#5#0, 
          a#382#6#0, 
          a#382#7#0, 
          a#382#8#0, 
          a#382#9#0, 
          a#382#10#0, 
          a#382#11#0, 
          a#382#12#0, 
          a#382#13#0, 
          a#382#14#0, 
          a#382#15#0, 
          a#382#16#0, 
          a#382#17#0), 
        Tclass._System.Tuple18(_System._tuple#18$T0, 
          _System._tuple#18$T1, 
          _System._tuple#18$T2, 
          _System._tuple#18$T3, 
          _System._tuple#18$T4, 
          _System._tuple#18$T5, 
          _System._tuple#18$T6, 
          _System._tuple#18$T7, 
          _System._tuple#18$T8, 
          _System._tuple#18$T9, 
          _System._tuple#18$T10, 
          _System._tuple#18$T11, 
          _System._tuple#18$T12, 
          _System._tuple#18$T13, 
          _System._tuple#18$T14, 
          _System._tuple#18$T15, 
          _System._tuple#18$T16, 
          _System._tuple#18$T17), 
        $h)
       <==> $IsAllocBox(a#382#0#0, _System._tuple#18$T0, $h)
         && $IsAllocBox(a#382#1#0, _System._tuple#18$T1, $h)
         && $IsAllocBox(a#382#2#0, _System._tuple#18$T2, $h)
         && $IsAllocBox(a#382#3#0, _System._tuple#18$T3, $h)
         && $IsAllocBox(a#382#4#0, _System._tuple#18$T4, $h)
         && $IsAllocBox(a#382#5#0, _System._tuple#18$T5, $h)
         && $IsAllocBox(a#382#6#0, _System._tuple#18$T6, $h)
         && $IsAllocBox(a#382#7#0, _System._tuple#18$T7, $h)
         && $IsAllocBox(a#382#8#0, _System._tuple#18$T8, $h)
         && $IsAllocBox(a#382#9#0, _System._tuple#18$T9, $h)
         && $IsAllocBox(a#382#10#0, _System._tuple#18$T10, $h)
         && $IsAllocBox(a#382#11#0, _System._tuple#18$T11, $h)
         && $IsAllocBox(a#382#12#0, _System._tuple#18$T12, $h)
         && $IsAllocBox(a#382#13#0, _System._tuple#18$T13, $h)
         && $IsAllocBox(a#382#14#0, _System._tuple#18$T14, $h)
         && $IsAllocBox(a#382#15#0, _System._tuple#18$T15, $h)
         && $IsAllocBox(a#382#16#0, _System._tuple#18$T16, $h)
         && $IsAllocBox(a#382#17#0, _System._tuple#18$T17, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#18$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple18._0(d), _System._tuple#18$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple18.___hMake18_q(d)
       && (exists _System._tuple#18$T1: Ty, 
          _System._tuple#18$T2: Ty, 
          _System._tuple#18$T3: Ty, 
          _System._tuple#18$T4: Ty, 
          _System._tuple#18$T5: Ty, 
          _System._tuple#18$T6: Ty, 
          _System._tuple#18$T7: Ty, 
          _System._tuple#18$T8: Ty, 
          _System._tuple#18$T9: Ty, 
          _System._tuple#18$T10: Ty, 
          _System._tuple#18$T11: Ty, 
          _System._tuple#18$T12: Ty, 
          _System._tuple#18$T13: Ty, 
          _System._tuple#18$T14: Ty, 
          _System._tuple#18$T15: Ty, 
          _System._tuple#18$T16: Ty, 
          _System._tuple#18$T17: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple18(_System._tuple#18$T0, 
              _System._tuple#18$T1, 
              _System._tuple#18$T2, 
              _System._tuple#18$T3, 
              _System._tuple#18$T4, 
              _System._tuple#18$T5, 
              _System._tuple#18$T6, 
              _System._tuple#18$T7, 
              _System._tuple#18$T8, 
              _System._tuple#18$T9, 
              _System._tuple#18$T10, 
              _System._tuple#18$T11, 
              _System._tuple#18$T12, 
              _System._tuple#18$T13, 
              _System._tuple#18$T14, 
              _System._tuple#18$T15, 
              _System._tuple#18$T16, 
              _System._tuple#18$T17), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple18(_System._tuple#18$T0, 
            _System._tuple#18$T1, 
            _System._tuple#18$T2, 
            _System._tuple#18$T3, 
            _System._tuple#18$T4, 
            _System._tuple#18$T5, 
            _System._tuple#18$T6, 
            _System._tuple#18$T7, 
            _System._tuple#18$T8, 
            _System._tuple#18$T9, 
            _System._tuple#18$T10, 
            _System._tuple#18$T11, 
            _System._tuple#18$T12, 
            _System._tuple#18$T13, 
            _System._tuple#18$T14, 
            _System._tuple#18$T15, 
            _System._tuple#18$T16, 
            _System._tuple#18$T17), 
          $h))
     ==> $IsAllocBox(_System.Tuple18._0(d), _System._tuple#18$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#18$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple18._1(d), _System._tuple#18$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple18.___hMake18_q(d)
       && (exists _System._tuple#18$T0: Ty, 
          _System._tuple#18$T2: Ty, 
          _System._tuple#18$T3: Ty, 
          _System._tuple#18$T4: Ty, 
          _System._tuple#18$T5: Ty, 
          _System._tuple#18$T6: Ty, 
          _System._tuple#18$T7: Ty, 
          _System._tuple#18$T8: Ty, 
          _System._tuple#18$T9: Ty, 
          _System._tuple#18$T10: Ty, 
          _System._tuple#18$T11: Ty, 
          _System._tuple#18$T12: Ty, 
          _System._tuple#18$T13: Ty, 
          _System._tuple#18$T14: Ty, 
          _System._tuple#18$T15: Ty, 
          _System._tuple#18$T16: Ty, 
          _System._tuple#18$T17: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple18(_System._tuple#18$T0, 
              _System._tuple#18$T1, 
              _System._tuple#18$T2, 
              _System._tuple#18$T3, 
              _System._tuple#18$T4, 
              _System._tuple#18$T5, 
              _System._tuple#18$T6, 
              _System._tuple#18$T7, 
              _System._tuple#18$T8, 
              _System._tuple#18$T9, 
              _System._tuple#18$T10, 
              _System._tuple#18$T11, 
              _System._tuple#18$T12, 
              _System._tuple#18$T13, 
              _System._tuple#18$T14, 
              _System._tuple#18$T15, 
              _System._tuple#18$T16, 
              _System._tuple#18$T17), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple18(_System._tuple#18$T0, 
            _System._tuple#18$T1, 
            _System._tuple#18$T2, 
            _System._tuple#18$T3, 
            _System._tuple#18$T4, 
            _System._tuple#18$T5, 
            _System._tuple#18$T6, 
            _System._tuple#18$T7, 
            _System._tuple#18$T8, 
            _System._tuple#18$T9, 
            _System._tuple#18$T10, 
            _System._tuple#18$T11, 
            _System._tuple#18$T12, 
            _System._tuple#18$T13, 
            _System._tuple#18$T14, 
            _System._tuple#18$T15, 
            _System._tuple#18$T16, 
            _System._tuple#18$T17), 
          $h))
     ==> $IsAllocBox(_System.Tuple18._1(d), _System._tuple#18$T1, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#18$T2: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple18._2(d), _System._tuple#18$T2, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple18.___hMake18_q(d)
       && (exists _System._tuple#18$T0: Ty, 
          _System._tuple#18$T1: Ty, 
          _System._tuple#18$T3: Ty, 
          _System._tuple#18$T4: Ty, 
          _System._tuple#18$T5: Ty, 
          _System._tuple#18$T6: Ty, 
          _System._tuple#18$T7: Ty, 
          _System._tuple#18$T8: Ty, 
          _System._tuple#18$T9: Ty, 
          _System._tuple#18$T10: Ty, 
          _System._tuple#18$T11: Ty, 
          _System._tuple#18$T12: Ty, 
          _System._tuple#18$T13: Ty, 
          _System._tuple#18$T14: Ty, 
          _System._tuple#18$T15: Ty, 
          _System._tuple#18$T16: Ty, 
          _System._tuple#18$T17: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple18(_System._tuple#18$T0, 
              _System._tuple#18$T1, 
              _System._tuple#18$T2, 
              _System._tuple#18$T3, 
              _System._tuple#18$T4, 
              _System._tuple#18$T5, 
              _System._tuple#18$T6, 
              _System._tuple#18$T7, 
              _System._tuple#18$T8, 
              _System._tuple#18$T9, 
              _System._tuple#18$T10, 
              _System._tuple#18$T11, 
              _System._tuple#18$T12, 
              _System._tuple#18$T13, 
              _System._tuple#18$T14, 
              _System._tuple#18$T15, 
              _System._tuple#18$T16, 
              _System._tuple#18$T17), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple18(_System._tuple#18$T0, 
            _System._tuple#18$T1, 
            _System._tuple#18$T2, 
            _System._tuple#18$T3, 
            _System._tuple#18$T4, 
            _System._tuple#18$T5, 
            _System._tuple#18$T6, 
            _System._tuple#18$T7, 
            _System._tuple#18$T8, 
            _System._tuple#18$T9, 
            _System._tuple#18$T10, 
            _System._tuple#18$T11, 
            _System._tuple#18$T12, 
            _System._tuple#18$T13, 
            _System._tuple#18$T14, 
            _System._tuple#18$T15, 
            _System._tuple#18$T16, 
            _System._tuple#18$T17), 
          $h))
     ==> $IsAllocBox(_System.Tuple18._2(d), _System._tuple#18$T2, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#18$T3: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple18._3(d), _System._tuple#18$T3, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple18.___hMake18_q(d)
       && (exists _System._tuple#18$T0: Ty, 
          _System._tuple#18$T1: Ty, 
          _System._tuple#18$T2: Ty, 
          _System._tuple#18$T4: Ty, 
          _System._tuple#18$T5: Ty, 
          _System._tuple#18$T6: Ty, 
          _System._tuple#18$T7: Ty, 
          _System._tuple#18$T8: Ty, 
          _System._tuple#18$T9: Ty, 
          _System._tuple#18$T10: Ty, 
          _System._tuple#18$T11: Ty, 
          _System._tuple#18$T12: Ty, 
          _System._tuple#18$T13: Ty, 
          _System._tuple#18$T14: Ty, 
          _System._tuple#18$T15: Ty, 
          _System._tuple#18$T16: Ty, 
          _System._tuple#18$T17: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple18(_System._tuple#18$T0, 
              _System._tuple#18$T1, 
              _System._tuple#18$T2, 
              _System._tuple#18$T3, 
              _System._tuple#18$T4, 
              _System._tuple#18$T5, 
              _System._tuple#18$T6, 
              _System._tuple#18$T7, 
              _System._tuple#18$T8, 
              _System._tuple#18$T9, 
              _System._tuple#18$T10, 
              _System._tuple#18$T11, 
              _System._tuple#18$T12, 
              _System._tuple#18$T13, 
              _System._tuple#18$T14, 
              _System._tuple#18$T15, 
              _System._tuple#18$T16, 
              _System._tuple#18$T17), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple18(_System._tuple#18$T0, 
            _System._tuple#18$T1, 
            _System._tuple#18$T2, 
            _System._tuple#18$T3, 
            _System._tuple#18$T4, 
            _System._tuple#18$T5, 
            _System._tuple#18$T6, 
            _System._tuple#18$T7, 
            _System._tuple#18$T8, 
            _System._tuple#18$T9, 
            _System._tuple#18$T10, 
            _System._tuple#18$T11, 
            _System._tuple#18$T12, 
            _System._tuple#18$T13, 
            _System._tuple#18$T14, 
            _System._tuple#18$T15, 
            _System._tuple#18$T16, 
            _System._tuple#18$T17), 
          $h))
     ==> $IsAllocBox(_System.Tuple18._3(d), _System._tuple#18$T3, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#18$T4: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple18._4(d), _System._tuple#18$T4, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple18.___hMake18_q(d)
       && (exists _System._tuple#18$T0: Ty, 
          _System._tuple#18$T1: Ty, 
          _System._tuple#18$T2: Ty, 
          _System._tuple#18$T3: Ty, 
          _System._tuple#18$T5: Ty, 
          _System._tuple#18$T6: Ty, 
          _System._tuple#18$T7: Ty, 
          _System._tuple#18$T8: Ty, 
          _System._tuple#18$T9: Ty, 
          _System._tuple#18$T10: Ty, 
          _System._tuple#18$T11: Ty, 
          _System._tuple#18$T12: Ty, 
          _System._tuple#18$T13: Ty, 
          _System._tuple#18$T14: Ty, 
          _System._tuple#18$T15: Ty, 
          _System._tuple#18$T16: Ty, 
          _System._tuple#18$T17: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple18(_System._tuple#18$T0, 
              _System._tuple#18$T1, 
              _System._tuple#18$T2, 
              _System._tuple#18$T3, 
              _System._tuple#18$T4, 
              _System._tuple#18$T5, 
              _System._tuple#18$T6, 
              _System._tuple#18$T7, 
              _System._tuple#18$T8, 
              _System._tuple#18$T9, 
              _System._tuple#18$T10, 
              _System._tuple#18$T11, 
              _System._tuple#18$T12, 
              _System._tuple#18$T13, 
              _System._tuple#18$T14, 
              _System._tuple#18$T15, 
              _System._tuple#18$T16, 
              _System._tuple#18$T17), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple18(_System._tuple#18$T0, 
            _System._tuple#18$T1, 
            _System._tuple#18$T2, 
            _System._tuple#18$T3, 
            _System._tuple#18$T4, 
            _System._tuple#18$T5, 
            _System._tuple#18$T6, 
            _System._tuple#18$T7, 
            _System._tuple#18$T8, 
            _System._tuple#18$T9, 
            _System._tuple#18$T10, 
            _System._tuple#18$T11, 
            _System._tuple#18$T12, 
            _System._tuple#18$T13, 
            _System._tuple#18$T14, 
            _System._tuple#18$T15, 
            _System._tuple#18$T16, 
            _System._tuple#18$T17), 
          $h))
     ==> $IsAllocBox(_System.Tuple18._4(d), _System._tuple#18$T4, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#18$T5: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple18._5(d), _System._tuple#18$T5, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple18.___hMake18_q(d)
       && (exists _System._tuple#18$T0: Ty, 
          _System._tuple#18$T1: Ty, 
          _System._tuple#18$T2: Ty, 
          _System._tuple#18$T3: Ty, 
          _System._tuple#18$T4: Ty, 
          _System._tuple#18$T6: Ty, 
          _System._tuple#18$T7: Ty, 
          _System._tuple#18$T8: Ty, 
          _System._tuple#18$T9: Ty, 
          _System._tuple#18$T10: Ty, 
          _System._tuple#18$T11: Ty, 
          _System._tuple#18$T12: Ty, 
          _System._tuple#18$T13: Ty, 
          _System._tuple#18$T14: Ty, 
          _System._tuple#18$T15: Ty, 
          _System._tuple#18$T16: Ty, 
          _System._tuple#18$T17: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple18(_System._tuple#18$T0, 
              _System._tuple#18$T1, 
              _System._tuple#18$T2, 
              _System._tuple#18$T3, 
              _System._tuple#18$T4, 
              _System._tuple#18$T5, 
              _System._tuple#18$T6, 
              _System._tuple#18$T7, 
              _System._tuple#18$T8, 
              _System._tuple#18$T9, 
              _System._tuple#18$T10, 
              _System._tuple#18$T11, 
              _System._tuple#18$T12, 
              _System._tuple#18$T13, 
              _System._tuple#18$T14, 
              _System._tuple#18$T15, 
              _System._tuple#18$T16, 
              _System._tuple#18$T17), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple18(_System._tuple#18$T0, 
            _System._tuple#18$T1, 
            _System._tuple#18$T2, 
            _System._tuple#18$T3, 
            _System._tuple#18$T4, 
            _System._tuple#18$T5, 
            _System._tuple#18$T6, 
            _System._tuple#18$T7, 
            _System._tuple#18$T8, 
            _System._tuple#18$T9, 
            _System._tuple#18$T10, 
            _System._tuple#18$T11, 
            _System._tuple#18$T12, 
            _System._tuple#18$T13, 
            _System._tuple#18$T14, 
            _System._tuple#18$T15, 
            _System._tuple#18$T16, 
            _System._tuple#18$T17), 
          $h))
     ==> $IsAllocBox(_System.Tuple18._5(d), _System._tuple#18$T5, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#18$T6: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple18._6(d), _System._tuple#18$T6, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple18.___hMake18_q(d)
       && (exists _System._tuple#18$T0: Ty, 
          _System._tuple#18$T1: Ty, 
          _System._tuple#18$T2: Ty, 
          _System._tuple#18$T3: Ty, 
          _System._tuple#18$T4: Ty, 
          _System._tuple#18$T5: Ty, 
          _System._tuple#18$T7: Ty, 
          _System._tuple#18$T8: Ty, 
          _System._tuple#18$T9: Ty, 
          _System._tuple#18$T10: Ty, 
          _System._tuple#18$T11: Ty, 
          _System._tuple#18$T12: Ty, 
          _System._tuple#18$T13: Ty, 
          _System._tuple#18$T14: Ty, 
          _System._tuple#18$T15: Ty, 
          _System._tuple#18$T16: Ty, 
          _System._tuple#18$T17: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple18(_System._tuple#18$T0, 
              _System._tuple#18$T1, 
              _System._tuple#18$T2, 
              _System._tuple#18$T3, 
              _System._tuple#18$T4, 
              _System._tuple#18$T5, 
              _System._tuple#18$T6, 
              _System._tuple#18$T7, 
              _System._tuple#18$T8, 
              _System._tuple#18$T9, 
              _System._tuple#18$T10, 
              _System._tuple#18$T11, 
              _System._tuple#18$T12, 
              _System._tuple#18$T13, 
              _System._tuple#18$T14, 
              _System._tuple#18$T15, 
              _System._tuple#18$T16, 
              _System._tuple#18$T17), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple18(_System._tuple#18$T0, 
            _System._tuple#18$T1, 
            _System._tuple#18$T2, 
            _System._tuple#18$T3, 
            _System._tuple#18$T4, 
            _System._tuple#18$T5, 
            _System._tuple#18$T6, 
            _System._tuple#18$T7, 
            _System._tuple#18$T8, 
            _System._tuple#18$T9, 
            _System._tuple#18$T10, 
            _System._tuple#18$T11, 
            _System._tuple#18$T12, 
            _System._tuple#18$T13, 
            _System._tuple#18$T14, 
            _System._tuple#18$T15, 
            _System._tuple#18$T16, 
            _System._tuple#18$T17), 
          $h))
     ==> $IsAllocBox(_System.Tuple18._6(d), _System._tuple#18$T6, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#18$T7: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple18._7(d), _System._tuple#18$T7, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple18.___hMake18_q(d)
       && (exists _System._tuple#18$T0: Ty, 
          _System._tuple#18$T1: Ty, 
          _System._tuple#18$T2: Ty, 
          _System._tuple#18$T3: Ty, 
          _System._tuple#18$T4: Ty, 
          _System._tuple#18$T5: Ty, 
          _System._tuple#18$T6: Ty, 
          _System._tuple#18$T8: Ty, 
          _System._tuple#18$T9: Ty, 
          _System._tuple#18$T10: Ty, 
          _System._tuple#18$T11: Ty, 
          _System._tuple#18$T12: Ty, 
          _System._tuple#18$T13: Ty, 
          _System._tuple#18$T14: Ty, 
          _System._tuple#18$T15: Ty, 
          _System._tuple#18$T16: Ty, 
          _System._tuple#18$T17: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple18(_System._tuple#18$T0, 
              _System._tuple#18$T1, 
              _System._tuple#18$T2, 
              _System._tuple#18$T3, 
              _System._tuple#18$T4, 
              _System._tuple#18$T5, 
              _System._tuple#18$T6, 
              _System._tuple#18$T7, 
              _System._tuple#18$T8, 
              _System._tuple#18$T9, 
              _System._tuple#18$T10, 
              _System._tuple#18$T11, 
              _System._tuple#18$T12, 
              _System._tuple#18$T13, 
              _System._tuple#18$T14, 
              _System._tuple#18$T15, 
              _System._tuple#18$T16, 
              _System._tuple#18$T17), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple18(_System._tuple#18$T0, 
            _System._tuple#18$T1, 
            _System._tuple#18$T2, 
            _System._tuple#18$T3, 
            _System._tuple#18$T4, 
            _System._tuple#18$T5, 
            _System._tuple#18$T6, 
            _System._tuple#18$T7, 
            _System._tuple#18$T8, 
            _System._tuple#18$T9, 
            _System._tuple#18$T10, 
            _System._tuple#18$T11, 
            _System._tuple#18$T12, 
            _System._tuple#18$T13, 
            _System._tuple#18$T14, 
            _System._tuple#18$T15, 
            _System._tuple#18$T16, 
            _System._tuple#18$T17), 
          $h))
     ==> $IsAllocBox(_System.Tuple18._7(d), _System._tuple#18$T7, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#18$T8: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple18._8(d), _System._tuple#18$T8, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple18.___hMake18_q(d)
       && (exists _System._tuple#18$T0: Ty, 
          _System._tuple#18$T1: Ty, 
          _System._tuple#18$T2: Ty, 
          _System._tuple#18$T3: Ty, 
          _System._tuple#18$T4: Ty, 
          _System._tuple#18$T5: Ty, 
          _System._tuple#18$T6: Ty, 
          _System._tuple#18$T7: Ty, 
          _System._tuple#18$T9: Ty, 
          _System._tuple#18$T10: Ty, 
          _System._tuple#18$T11: Ty, 
          _System._tuple#18$T12: Ty, 
          _System._tuple#18$T13: Ty, 
          _System._tuple#18$T14: Ty, 
          _System._tuple#18$T15: Ty, 
          _System._tuple#18$T16: Ty, 
          _System._tuple#18$T17: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple18(_System._tuple#18$T0, 
              _System._tuple#18$T1, 
              _System._tuple#18$T2, 
              _System._tuple#18$T3, 
              _System._tuple#18$T4, 
              _System._tuple#18$T5, 
              _System._tuple#18$T6, 
              _System._tuple#18$T7, 
              _System._tuple#18$T8, 
              _System._tuple#18$T9, 
              _System._tuple#18$T10, 
              _System._tuple#18$T11, 
              _System._tuple#18$T12, 
              _System._tuple#18$T13, 
              _System._tuple#18$T14, 
              _System._tuple#18$T15, 
              _System._tuple#18$T16, 
              _System._tuple#18$T17), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple18(_System._tuple#18$T0, 
            _System._tuple#18$T1, 
            _System._tuple#18$T2, 
            _System._tuple#18$T3, 
            _System._tuple#18$T4, 
            _System._tuple#18$T5, 
            _System._tuple#18$T6, 
            _System._tuple#18$T7, 
            _System._tuple#18$T8, 
            _System._tuple#18$T9, 
            _System._tuple#18$T10, 
            _System._tuple#18$T11, 
            _System._tuple#18$T12, 
            _System._tuple#18$T13, 
            _System._tuple#18$T14, 
            _System._tuple#18$T15, 
            _System._tuple#18$T16, 
            _System._tuple#18$T17), 
          $h))
     ==> $IsAllocBox(_System.Tuple18._8(d), _System._tuple#18$T8, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#18$T9: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple18._9(d), _System._tuple#18$T9, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple18.___hMake18_q(d)
       && (exists _System._tuple#18$T0: Ty, 
          _System._tuple#18$T1: Ty, 
          _System._tuple#18$T2: Ty, 
          _System._tuple#18$T3: Ty, 
          _System._tuple#18$T4: Ty, 
          _System._tuple#18$T5: Ty, 
          _System._tuple#18$T6: Ty, 
          _System._tuple#18$T7: Ty, 
          _System._tuple#18$T8: Ty, 
          _System._tuple#18$T10: Ty, 
          _System._tuple#18$T11: Ty, 
          _System._tuple#18$T12: Ty, 
          _System._tuple#18$T13: Ty, 
          _System._tuple#18$T14: Ty, 
          _System._tuple#18$T15: Ty, 
          _System._tuple#18$T16: Ty, 
          _System._tuple#18$T17: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple18(_System._tuple#18$T0, 
              _System._tuple#18$T1, 
              _System._tuple#18$T2, 
              _System._tuple#18$T3, 
              _System._tuple#18$T4, 
              _System._tuple#18$T5, 
              _System._tuple#18$T6, 
              _System._tuple#18$T7, 
              _System._tuple#18$T8, 
              _System._tuple#18$T9, 
              _System._tuple#18$T10, 
              _System._tuple#18$T11, 
              _System._tuple#18$T12, 
              _System._tuple#18$T13, 
              _System._tuple#18$T14, 
              _System._tuple#18$T15, 
              _System._tuple#18$T16, 
              _System._tuple#18$T17), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple18(_System._tuple#18$T0, 
            _System._tuple#18$T1, 
            _System._tuple#18$T2, 
            _System._tuple#18$T3, 
            _System._tuple#18$T4, 
            _System._tuple#18$T5, 
            _System._tuple#18$T6, 
            _System._tuple#18$T7, 
            _System._tuple#18$T8, 
            _System._tuple#18$T9, 
            _System._tuple#18$T10, 
            _System._tuple#18$T11, 
            _System._tuple#18$T12, 
            _System._tuple#18$T13, 
            _System._tuple#18$T14, 
            _System._tuple#18$T15, 
            _System._tuple#18$T16, 
            _System._tuple#18$T17), 
          $h))
     ==> $IsAllocBox(_System.Tuple18._9(d), _System._tuple#18$T9, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#18$T10: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple18._10(d), _System._tuple#18$T10, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple18.___hMake18_q(d)
       && (exists _System._tuple#18$T0: Ty, 
          _System._tuple#18$T1: Ty, 
          _System._tuple#18$T2: Ty, 
          _System._tuple#18$T3: Ty, 
          _System._tuple#18$T4: Ty, 
          _System._tuple#18$T5: Ty, 
          _System._tuple#18$T6: Ty, 
          _System._tuple#18$T7: Ty, 
          _System._tuple#18$T8: Ty, 
          _System._tuple#18$T9: Ty, 
          _System._tuple#18$T11: Ty, 
          _System._tuple#18$T12: Ty, 
          _System._tuple#18$T13: Ty, 
          _System._tuple#18$T14: Ty, 
          _System._tuple#18$T15: Ty, 
          _System._tuple#18$T16: Ty, 
          _System._tuple#18$T17: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple18(_System._tuple#18$T0, 
              _System._tuple#18$T1, 
              _System._tuple#18$T2, 
              _System._tuple#18$T3, 
              _System._tuple#18$T4, 
              _System._tuple#18$T5, 
              _System._tuple#18$T6, 
              _System._tuple#18$T7, 
              _System._tuple#18$T8, 
              _System._tuple#18$T9, 
              _System._tuple#18$T10, 
              _System._tuple#18$T11, 
              _System._tuple#18$T12, 
              _System._tuple#18$T13, 
              _System._tuple#18$T14, 
              _System._tuple#18$T15, 
              _System._tuple#18$T16, 
              _System._tuple#18$T17), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple18(_System._tuple#18$T0, 
            _System._tuple#18$T1, 
            _System._tuple#18$T2, 
            _System._tuple#18$T3, 
            _System._tuple#18$T4, 
            _System._tuple#18$T5, 
            _System._tuple#18$T6, 
            _System._tuple#18$T7, 
            _System._tuple#18$T8, 
            _System._tuple#18$T9, 
            _System._tuple#18$T10, 
            _System._tuple#18$T11, 
            _System._tuple#18$T12, 
            _System._tuple#18$T13, 
            _System._tuple#18$T14, 
            _System._tuple#18$T15, 
            _System._tuple#18$T16, 
            _System._tuple#18$T17), 
          $h))
     ==> $IsAllocBox(_System.Tuple18._10(d), _System._tuple#18$T10, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#18$T11: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple18._11(d), _System._tuple#18$T11, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple18.___hMake18_q(d)
       && (exists _System._tuple#18$T0: Ty, 
          _System._tuple#18$T1: Ty, 
          _System._tuple#18$T2: Ty, 
          _System._tuple#18$T3: Ty, 
          _System._tuple#18$T4: Ty, 
          _System._tuple#18$T5: Ty, 
          _System._tuple#18$T6: Ty, 
          _System._tuple#18$T7: Ty, 
          _System._tuple#18$T8: Ty, 
          _System._tuple#18$T9: Ty, 
          _System._tuple#18$T10: Ty, 
          _System._tuple#18$T12: Ty, 
          _System._tuple#18$T13: Ty, 
          _System._tuple#18$T14: Ty, 
          _System._tuple#18$T15: Ty, 
          _System._tuple#18$T16: Ty, 
          _System._tuple#18$T17: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple18(_System._tuple#18$T0, 
              _System._tuple#18$T1, 
              _System._tuple#18$T2, 
              _System._tuple#18$T3, 
              _System._tuple#18$T4, 
              _System._tuple#18$T5, 
              _System._tuple#18$T6, 
              _System._tuple#18$T7, 
              _System._tuple#18$T8, 
              _System._tuple#18$T9, 
              _System._tuple#18$T10, 
              _System._tuple#18$T11, 
              _System._tuple#18$T12, 
              _System._tuple#18$T13, 
              _System._tuple#18$T14, 
              _System._tuple#18$T15, 
              _System._tuple#18$T16, 
              _System._tuple#18$T17), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple18(_System._tuple#18$T0, 
            _System._tuple#18$T1, 
            _System._tuple#18$T2, 
            _System._tuple#18$T3, 
            _System._tuple#18$T4, 
            _System._tuple#18$T5, 
            _System._tuple#18$T6, 
            _System._tuple#18$T7, 
            _System._tuple#18$T8, 
            _System._tuple#18$T9, 
            _System._tuple#18$T10, 
            _System._tuple#18$T11, 
            _System._tuple#18$T12, 
            _System._tuple#18$T13, 
            _System._tuple#18$T14, 
            _System._tuple#18$T15, 
            _System._tuple#18$T16, 
            _System._tuple#18$T17), 
          $h))
     ==> $IsAllocBox(_System.Tuple18._11(d), _System._tuple#18$T11, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#18$T12: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple18._12(d), _System._tuple#18$T12, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple18.___hMake18_q(d)
       && (exists _System._tuple#18$T0: Ty, 
          _System._tuple#18$T1: Ty, 
          _System._tuple#18$T2: Ty, 
          _System._tuple#18$T3: Ty, 
          _System._tuple#18$T4: Ty, 
          _System._tuple#18$T5: Ty, 
          _System._tuple#18$T6: Ty, 
          _System._tuple#18$T7: Ty, 
          _System._tuple#18$T8: Ty, 
          _System._tuple#18$T9: Ty, 
          _System._tuple#18$T10: Ty, 
          _System._tuple#18$T11: Ty, 
          _System._tuple#18$T13: Ty, 
          _System._tuple#18$T14: Ty, 
          _System._tuple#18$T15: Ty, 
          _System._tuple#18$T16: Ty, 
          _System._tuple#18$T17: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple18(_System._tuple#18$T0, 
              _System._tuple#18$T1, 
              _System._tuple#18$T2, 
              _System._tuple#18$T3, 
              _System._tuple#18$T4, 
              _System._tuple#18$T5, 
              _System._tuple#18$T6, 
              _System._tuple#18$T7, 
              _System._tuple#18$T8, 
              _System._tuple#18$T9, 
              _System._tuple#18$T10, 
              _System._tuple#18$T11, 
              _System._tuple#18$T12, 
              _System._tuple#18$T13, 
              _System._tuple#18$T14, 
              _System._tuple#18$T15, 
              _System._tuple#18$T16, 
              _System._tuple#18$T17), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple18(_System._tuple#18$T0, 
            _System._tuple#18$T1, 
            _System._tuple#18$T2, 
            _System._tuple#18$T3, 
            _System._tuple#18$T4, 
            _System._tuple#18$T5, 
            _System._tuple#18$T6, 
            _System._tuple#18$T7, 
            _System._tuple#18$T8, 
            _System._tuple#18$T9, 
            _System._tuple#18$T10, 
            _System._tuple#18$T11, 
            _System._tuple#18$T12, 
            _System._tuple#18$T13, 
            _System._tuple#18$T14, 
            _System._tuple#18$T15, 
            _System._tuple#18$T16, 
            _System._tuple#18$T17), 
          $h))
     ==> $IsAllocBox(_System.Tuple18._12(d), _System._tuple#18$T12, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#18$T13: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple18._13(d), _System._tuple#18$T13, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple18.___hMake18_q(d)
       && (exists _System._tuple#18$T0: Ty, 
          _System._tuple#18$T1: Ty, 
          _System._tuple#18$T2: Ty, 
          _System._tuple#18$T3: Ty, 
          _System._tuple#18$T4: Ty, 
          _System._tuple#18$T5: Ty, 
          _System._tuple#18$T6: Ty, 
          _System._tuple#18$T7: Ty, 
          _System._tuple#18$T8: Ty, 
          _System._tuple#18$T9: Ty, 
          _System._tuple#18$T10: Ty, 
          _System._tuple#18$T11: Ty, 
          _System._tuple#18$T12: Ty, 
          _System._tuple#18$T14: Ty, 
          _System._tuple#18$T15: Ty, 
          _System._tuple#18$T16: Ty, 
          _System._tuple#18$T17: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple18(_System._tuple#18$T0, 
              _System._tuple#18$T1, 
              _System._tuple#18$T2, 
              _System._tuple#18$T3, 
              _System._tuple#18$T4, 
              _System._tuple#18$T5, 
              _System._tuple#18$T6, 
              _System._tuple#18$T7, 
              _System._tuple#18$T8, 
              _System._tuple#18$T9, 
              _System._tuple#18$T10, 
              _System._tuple#18$T11, 
              _System._tuple#18$T12, 
              _System._tuple#18$T13, 
              _System._tuple#18$T14, 
              _System._tuple#18$T15, 
              _System._tuple#18$T16, 
              _System._tuple#18$T17), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple18(_System._tuple#18$T0, 
            _System._tuple#18$T1, 
            _System._tuple#18$T2, 
            _System._tuple#18$T3, 
            _System._tuple#18$T4, 
            _System._tuple#18$T5, 
            _System._tuple#18$T6, 
            _System._tuple#18$T7, 
            _System._tuple#18$T8, 
            _System._tuple#18$T9, 
            _System._tuple#18$T10, 
            _System._tuple#18$T11, 
            _System._tuple#18$T12, 
            _System._tuple#18$T13, 
            _System._tuple#18$T14, 
            _System._tuple#18$T15, 
            _System._tuple#18$T16, 
            _System._tuple#18$T17), 
          $h))
     ==> $IsAllocBox(_System.Tuple18._13(d), _System._tuple#18$T13, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#18$T14: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple18._14(d), _System._tuple#18$T14, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple18.___hMake18_q(d)
       && (exists _System._tuple#18$T0: Ty, 
          _System._tuple#18$T1: Ty, 
          _System._tuple#18$T2: Ty, 
          _System._tuple#18$T3: Ty, 
          _System._tuple#18$T4: Ty, 
          _System._tuple#18$T5: Ty, 
          _System._tuple#18$T6: Ty, 
          _System._tuple#18$T7: Ty, 
          _System._tuple#18$T8: Ty, 
          _System._tuple#18$T9: Ty, 
          _System._tuple#18$T10: Ty, 
          _System._tuple#18$T11: Ty, 
          _System._tuple#18$T12: Ty, 
          _System._tuple#18$T13: Ty, 
          _System._tuple#18$T15: Ty, 
          _System._tuple#18$T16: Ty, 
          _System._tuple#18$T17: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple18(_System._tuple#18$T0, 
              _System._tuple#18$T1, 
              _System._tuple#18$T2, 
              _System._tuple#18$T3, 
              _System._tuple#18$T4, 
              _System._tuple#18$T5, 
              _System._tuple#18$T6, 
              _System._tuple#18$T7, 
              _System._tuple#18$T8, 
              _System._tuple#18$T9, 
              _System._tuple#18$T10, 
              _System._tuple#18$T11, 
              _System._tuple#18$T12, 
              _System._tuple#18$T13, 
              _System._tuple#18$T14, 
              _System._tuple#18$T15, 
              _System._tuple#18$T16, 
              _System._tuple#18$T17), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple18(_System._tuple#18$T0, 
            _System._tuple#18$T1, 
            _System._tuple#18$T2, 
            _System._tuple#18$T3, 
            _System._tuple#18$T4, 
            _System._tuple#18$T5, 
            _System._tuple#18$T6, 
            _System._tuple#18$T7, 
            _System._tuple#18$T8, 
            _System._tuple#18$T9, 
            _System._tuple#18$T10, 
            _System._tuple#18$T11, 
            _System._tuple#18$T12, 
            _System._tuple#18$T13, 
            _System._tuple#18$T14, 
            _System._tuple#18$T15, 
            _System._tuple#18$T16, 
            _System._tuple#18$T17), 
          $h))
     ==> $IsAllocBox(_System.Tuple18._14(d), _System._tuple#18$T14, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#18$T15: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple18._15(d), _System._tuple#18$T15, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple18.___hMake18_q(d)
       && (exists _System._tuple#18$T0: Ty, 
          _System._tuple#18$T1: Ty, 
          _System._tuple#18$T2: Ty, 
          _System._tuple#18$T3: Ty, 
          _System._tuple#18$T4: Ty, 
          _System._tuple#18$T5: Ty, 
          _System._tuple#18$T6: Ty, 
          _System._tuple#18$T7: Ty, 
          _System._tuple#18$T8: Ty, 
          _System._tuple#18$T9: Ty, 
          _System._tuple#18$T10: Ty, 
          _System._tuple#18$T11: Ty, 
          _System._tuple#18$T12: Ty, 
          _System._tuple#18$T13: Ty, 
          _System._tuple#18$T14: Ty, 
          _System._tuple#18$T16: Ty, 
          _System._tuple#18$T17: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple18(_System._tuple#18$T0, 
              _System._tuple#18$T1, 
              _System._tuple#18$T2, 
              _System._tuple#18$T3, 
              _System._tuple#18$T4, 
              _System._tuple#18$T5, 
              _System._tuple#18$T6, 
              _System._tuple#18$T7, 
              _System._tuple#18$T8, 
              _System._tuple#18$T9, 
              _System._tuple#18$T10, 
              _System._tuple#18$T11, 
              _System._tuple#18$T12, 
              _System._tuple#18$T13, 
              _System._tuple#18$T14, 
              _System._tuple#18$T15, 
              _System._tuple#18$T16, 
              _System._tuple#18$T17), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple18(_System._tuple#18$T0, 
            _System._tuple#18$T1, 
            _System._tuple#18$T2, 
            _System._tuple#18$T3, 
            _System._tuple#18$T4, 
            _System._tuple#18$T5, 
            _System._tuple#18$T6, 
            _System._tuple#18$T7, 
            _System._tuple#18$T8, 
            _System._tuple#18$T9, 
            _System._tuple#18$T10, 
            _System._tuple#18$T11, 
            _System._tuple#18$T12, 
            _System._tuple#18$T13, 
            _System._tuple#18$T14, 
            _System._tuple#18$T15, 
            _System._tuple#18$T16, 
            _System._tuple#18$T17), 
          $h))
     ==> $IsAllocBox(_System.Tuple18._15(d), _System._tuple#18$T15, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#18$T16: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple18._16(d), _System._tuple#18$T16, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple18.___hMake18_q(d)
       && (exists _System._tuple#18$T0: Ty, 
          _System._tuple#18$T1: Ty, 
          _System._tuple#18$T2: Ty, 
          _System._tuple#18$T3: Ty, 
          _System._tuple#18$T4: Ty, 
          _System._tuple#18$T5: Ty, 
          _System._tuple#18$T6: Ty, 
          _System._tuple#18$T7: Ty, 
          _System._tuple#18$T8: Ty, 
          _System._tuple#18$T9: Ty, 
          _System._tuple#18$T10: Ty, 
          _System._tuple#18$T11: Ty, 
          _System._tuple#18$T12: Ty, 
          _System._tuple#18$T13: Ty, 
          _System._tuple#18$T14: Ty, 
          _System._tuple#18$T15: Ty, 
          _System._tuple#18$T17: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple18(_System._tuple#18$T0, 
              _System._tuple#18$T1, 
              _System._tuple#18$T2, 
              _System._tuple#18$T3, 
              _System._tuple#18$T4, 
              _System._tuple#18$T5, 
              _System._tuple#18$T6, 
              _System._tuple#18$T7, 
              _System._tuple#18$T8, 
              _System._tuple#18$T9, 
              _System._tuple#18$T10, 
              _System._tuple#18$T11, 
              _System._tuple#18$T12, 
              _System._tuple#18$T13, 
              _System._tuple#18$T14, 
              _System._tuple#18$T15, 
              _System._tuple#18$T16, 
              _System._tuple#18$T17), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple18(_System._tuple#18$T0, 
            _System._tuple#18$T1, 
            _System._tuple#18$T2, 
            _System._tuple#18$T3, 
            _System._tuple#18$T4, 
            _System._tuple#18$T5, 
            _System._tuple#18$T6, 
            _System._tuple#18$T7, 
            _System._tuple#18$T8, 
            _System._tuple#18$T9, 
            _System._tuple#18$T10, 
            _System._tuple#18$T11, 
            _System._tuple#18$T12, 
            _System._tuple#18$T13, 
            _System._tuple#18$T14, 
            _System._tuple#18$T15, 
            _System._tuple#18$T16, 
            _System._tuple#18$T17), 
          $h))
     ==> $IsAllocBox(_System.Tuple18._16(d), _System._tuple#18$T16, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#18$T17: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple18._17(d), _System._tuple#18$T17, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple18.___hMake18_q(d)
       && (exists _System._tuple#18$T0: Ty, 
          _System._tuple#18$T1: Ty, 
          _System._tuple#18$T2: Ty, 
          _System._tuple#18$T3: Ty, 
          _System._tuple#18$T4: Ty, 
          _System._tuple#18$T5: Ty, 
          _System._tuple#18$T6: Ty, 
          _System._tuple#18$T7: Ty, 
          _System._tuple#18$T8: Ty, 
          _System._tuple#18$T9: Ty, 
          _System._tuple#18$T10: Ty, 
          _System._tuple#18$T11: Ty, 
          _System._tuple#18$T12: Ty, 
          _System._tuple#18$T13: Ty, 
          _System._tuple#18$T14: Ty, 
          _System._tuple#18$T15: Ty, 
          _System._tuple#18$T16: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple18(_System._tuple#18$T0, 
              _System._tuple#18$T1, 
              _System._tuple#18$T2, 
              _System._tuple#18$T3, 
              _System._tuple#18$T4, 
              _System._tuple#18$T5, 
              _System._tuple#18$T6, 
              _System._tuple#18$T7, 
              _System._tuple#18$T8, 
              _System._tuple#18$T9, 
              _System._tuple#18$T10, 
              _System._tuple#18$T11, 
              _System._tuple#18$T12, 
              _System._tuple#18$T13, 
              _System._tuple#18$T14, 
              _System._tuple#18$T15, 
              _System._tuple#18$T16, 
              _System._tuple#18$T17), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple18(_System._tuple#18$T0, 
            _System._tuple#18$T1, 
            _System._tuple#18$T2, 
            _System._tuple#18$T3, 
            _System._tuple#18$T4, 
            _System._tuple#18$T5, 
            _System._tuple#18$T6, 
            _System._tuple#18$T7, 
            _System._tuple#18$T8, 
            _System._tuple#18$T9, 
            _System._tuple#18$T10, 
            _System._tuple#18$T11, 
            _System._tuple#18$T12, 
            _System._tuple#18$T13, 
            _System._tuple#18$T14, 
            _System._tuple#18$T15, 
            _System._tuple#18$T16, 
            _System._tuple#18$T17), 
          $h))
     ==> $IsAllocBox(_System.Tuple18._17(d), _System._tuple#18$T17, $h));

// Constructor literal
axiom (forall a#383#0#0: Box, 
    a#383#1#0: Box, 
    a#383#2#0: Box, 
    a#383#3#0: Box, 
    a#383#4#0: Box, 
    a#383#5#0: Box, 
    a#383#6#0: Box, 
    a#383#7#0: Box, 
    a#383#8#0: Box, 
    a#383#9#0: Box, 
    a#383#10#0: Box, 
    a#383#11#0: Box, 
    a#383#12#0: Box, 
    a#383#13#0: Box, 
    a#383#14#0: Box, 
    a#383#15#0: Box, 
    a#383#16#0: Box, 
    a#383#17#0: Box :: 
  { #_System._tuple#18._#Make18(Lit(a#383#0#0), 
      Lit(a#383#1#0), 
      Lit(a#383#2#0), 
      Lit(a#383#3#0), 
      Lit(a#383#4#0), 
      Lit(a#383#5#0), 
      Lit(a#383#6#0), 
      Lit(a#383#7#0), 
      Lit(a#383#8#0), 
      Lit(a#383#9#0), 
      Lit(a#383#10#0), 
      Lit(a#383#11#0), 
      Lit(a#383#12#0), 
      Lit(a#383#13#0), 
      Lit(a#383#14#0), 
      Lit(a#383#15#0), 
      Lit(a#383#16#0), 
      Lit(a#383#17#0)) } 
  #_System._tuple#18._#Make18(Lit(a#383#0#0), 
      Lit(a#383#1#0), 
      Lit(a#383#2#0), 
      Lit(a#383#3#0), 
      Lit(a#383#4#0), 
      Lit(a#383#5#0), 
      Lit(a#383#6#0), 
      Lit(a#383#7#0), 
      Lit(a#383#8#0), 
      Lit(a#383#9#0), 
      Lit(a#383#10#0), 
      Lit(a#383#11#0), 
      Lit(a#383#12#0), 
      Lit(a#383#13#0), 
      Lit(a#383#14#0), 
      Lit(a#383#15#0), 
      Lit(a#383#16#0), 
      Lit(a#383#17#0))
     == Lit(#_System._tuple#18._#Make18(a#383#0#0, 
        a#383#1#0, 
        a#383#2#0, 
        a#383#3#0, 
        a#383#4#0, 
        a#383#5#0, 
        a#383#6#0, 
        a#383#7#0, 
        a#383#8#0, 
        a#383#9#0, 
        a#383#10#0, 
        a#383#11#0, 
        a#383#12#0, 
        a#383#13#0, 
        a#383#14#0, 
        a#383#15#0, 
        a#383#16#0, 
        a#383#17#0)));

function _System.Tuple18._0(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#384#0#0: Box, 
    a#384#1#0: Box, 
    a#384#2#0: Box, 
    a#384#3#0: Box, 
    a#384#4#0: Box, 
    a#384#5#0: Box, 
    a#384#6#0: Box, 
    a#384#7#0: Box, 
    a#384#8#0: Box, 
    a#384#9#0: Box, 
    a#384#10#0: Box, 
    a#384#11#0: Box, 
    a#384#12#0: Box, 
    a#384#13#0: Box, 
    a#384#14#0: Box, 
    a#384#15#0: Box, 
    a#384#16#0: Box, 
    a#384#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#384#0#0, 
      a#384#1#0, 
      a#384#2#0, 
      a#384#3#0, 
      a#384#4#0, 
      a#384#5#0, 
      a#384#6#0, 
      a#384#7#0, 
      a#384#8#0, 
      a#384#9#0, 
      a#384#10#0, 
      a#384#11#0, 
      a#384#12#0, 
      a#384#13#0, 
      a#384#14#0, 
      a#384#15#0, 
      a#384#16#0, 
      a#384#17#0) } 
  _System.Tuple18._0(#_System._tuple#18._#Make18(a#384#0#0, 
        a#384#1#0, 
        a#384#2#0, 
        a#384#3#0, 
        a#384#4#0, 
        a#384#5#0, 
        a#384#6#0, 
        a#384#7#0, 
        a#384#8#0, 
        a#384#9#0, 
        a#384#10#0, 
        a#384#11#0, 
        a#384#12#0, 
        a#384#13#0, 
        a#384#14#0, 
        a#384#15#0, 
        a#384#16#0, 
        a#384#17#0))
     == a#384#0#0);

// Inductive rank
axiom (forall a#385#0#0: Box, 
    a#385#1#0: Box, 
    a#385#2#0: Box, 
    a#385#3#0: Box, 
    a#385#4#0: Box, 
    a#385#5#0: Box, 
    a#385#6#0: Box, 
    a#385#7#0: Box, 
    a#385#8#0: Box, 
    a#385#9#0: Box, 
    a#385#10#0: Box, 
    a#385#11#0: Box, 
    a#385#12#0: Box, 
    a#385#13#0: Box, 
    a#385#14#0: Box, 
    a#385#15#0: Box, 
    a#385#16#0: Box, 
    a#385#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#385#0#0, 
      a#385#1#0, 
      a#385#2#0, 
      a#385#3#0, 
      a#385#4#0, 
      a#385#5#0, 
      a#385#6#0, 
      a#385#7#0, 
      a#385#8#0, 
      a#385#9#0, 
      a#385#10#0, 
      a#385#11#0, 
      a#385#12#0, 
      a#385#13#0, 
      a#385#14#0, 
      a#385#15#0, 
      a#385#16#0, 
      a#385#17#0) } 
  BoxRank(a#385#0#0)
     < DtRank(#_System._tuple#18._#Make18(a#385#0#0, 
        a#385#1#0, 
        a#385#2#0, 
        a#385#3#0, 
        a#385#4#0, 
        a#385#5#0, 
        a#385#6#0, 
        a#385#7#0, 
        a#385#8#0, 
        a#385#9#0, 
        a#385#10#0, 
        a#385#11#0, 
        a#385#12#0, 
        a#385#13#0, 
        a#385#14#0, 
        a#385#15#0, 
        a#385#16#0, 
        a#385#17#0)));

function _System.Tuple18._1(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#386#0#0: Box, 
    a#386#1#0: Box, 
    a#386#2#0: Box, 
    a#386#3#0: Box, 
    a#386#4#0: Box, 
    a#386#5#0: Box, 
    a#386#6#0: Box, 
    a#386#7#0: Box, 
    a#386#8#0: Box, 
    a#386#9#0: Box, 
    a#386#10#0: Box, 
    a#386#11#0: Box, 
    a#386#12#0: Box, 
    a#386#13#0: Box, 
    a#386#14#0: Box, 
    a#386#15#0: Box, 
    a#386#16#0: Box, 
    a#386#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#386#0#0, 
      a#386#1#0, 
      a#386#2#0, 
      a#386#3#0, 
      a#386#4#0, 
      a#386#5#0, 
      a#386#6#0, 
      a#386#7#0, 
      a#386#8#0, 
      a#386#9#0, 
      a#386#10#0, 
      a#386#11#0, 
      a#386#12#0, 
      a#386#13#0, 
      a#386#14#0, 
      a#386#15#0, 
      a#386#16#0, 
      a#386#17#0) } 
  _System.Tuple18._1(#_System._tuple#18._#Make18(a#386#0#0, 
        a#386#1#0, 
        a#386#2#0, 
        a#386#3#0, 
        a#386#4#0, 
        a#386#5#0, 
        a#386#6#0, 
        a#386#7#0, 
        a#386#8#0, 
        a#386#9#0, 
        a#386#10#0, 
        a#386#11#0, 
        a#386#12#0, 
        a#386#13#0, 
        a#386#14#0, 
        a#386#15#0, 
        a#386#16#0, 
        a#386#17#0))
     == a#386#1#0);

// Inductive rank
axiom (forall a#387#0#0: Box, 
    a#387#1#0: Box, 
    a#387#2#0: Box, 
    a#387#3#0: Box, 
    a#387#4#0: Box, 
    a#387#5#0: Box, 
    a#387#6#0: Box, 
    a#387#7#0: Box, 
    a#387#8#0: Box, 
    a#387#9#0: Box, 
    a#387#10#0: Box, 
    a#387#11#0: Box, 
    a#387#12#0: Box, 
    a#387#13#0: Box, 
    a#387#14#0: Box, 
    a#387#15#0: Box, 
    a#387#16#0: Box, 
    a#387#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#387#0#0, 
      a#387#1#0, 
      a#387#2#0, 
      a#387#3#0, 
      a#387#4#0, 
      a#387#5#0, 
      a#387#6#0, 
      a#387#7#0, 
      a#387#8#0, 
      a#387#9#0, 
      a#387#10#0, 
      a#387#11#0, 
      a#387#12#0, 
      a#387#13#0, 
      a#387#14#0, 
      a#387#15#0, 
      a#387#16#0, 
      a#387#17#0) } 
  BoxRank(a#387#1#0)
     < DtRank(#_System._tuple#18._#Make18(a#387#0#0, 
        a#387#1#0, 
        a#387#2#0, 
        a#387#3#0, 
        a#387#4#0, 
        a#387#5#0, 
        a#387#6#0, 
        a#387#7#0, 
        a#387#8#0, 
        a#387#9#0, 
        a#387#10#0, 
        a#387#11#0, 
        a#387#12#0, 
        a#387#13#0, 
        a#387#14#0, 
        a#387#15#0, 
        a#387#16#0, 
        a#387#17#0)));

function _System.Tuple18._2(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#388#0#0: Box, 
    a#388#1#0: Box, 
    a#388#2#0: Box, 
    a#388#3#0: Box, 
    a#388#4#0: Box, 
    a#388#5#0: Box, 
    a#388#6#0: Box, 
    a#388#7#0: Box, 
    a#388#8#0: Box, 
    a#388#9#0: Box, 
    a#388#10#0: Box, 
    a#388#11#0: Box, 
    a#388#12#0: Box, 
    a#388#13#0: Box, 
    a#388#14#0: Box, 
    a#388#15#0: Box, 
    a#388#16#0: Box, 
    a#388#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#388#0#0, 
      a#388#1#0, 
      a#388#2#0, 
      a#388#3#0, 
      a#388#4#0, 
      a#388#5#0, 
      a#388#6#0, 
      a#388#7#0, 
      a#388#8#0, 
      a#388#9#0, 
      a#388#10#0, 
      a#388#11#0, 
      a#388#12#0, 
      a#388#13#0, 
      a#388#14#0, 
      a#388#15#0, 
      a#388#16#0, 
      a#388#17#0) } 
  _System.Tuple18._2(#_System._tuple#18._#Make18(a#388#0#0, 
        a#388#1#0, 
        a#388#2#0, 
        a#388#3#0, 
        a#388#4#0, 
        a#388#5#0, 
        a#388#6#0, 
        a#388#7#0, 
        a#388#8#0, 
        a#388#9#0, 
        a#388#10#0, 
        a#388#11#0, 
        a#388#12#0, 
        a#388#13#0, 
        a#388#14#0, 
        a#388#15#0, 
        a#388#16#0, 
        a#388#17#0))
     == a#388#2#0);

// Inductive rank
axiom (forall a#389#0#0: Box, 
    a#389#1#0: Box, 
    a#389#2#0: Box, 
    a#389#3#0: Box, 
    a#389#4#0: Box, 
    a#389#5#0: Box, 
    a#389#6#0: Box, 
    a#389#7#0: Box, 
    a#389#8#0: Box, 
    a#389#9#0: Box, 
    a#389#10#0: Box, 
    a#389#11#0: Box, 
    a#389#12#0: Box, 
    a#389#13#0: Box, 
    a#389#14#0: Box, 
    a#389#15#0: Box, 
    a#389#16#0: Box, 
    a#389#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#389#0#0, 
      a#389#1#0, 
      a#389#2#0, 
      a#389#3#0, 
      a#389#4#0, 
      a#389#5#0, 
      a#389#6#0, 
      a#389#7#0, 
      a#389#8#0, 
      a#389#9#0, 
      a#389#10#0, 
      a#389#11#0, 
      a#389#12#0, 
      a#389#13#0, 
      a#389#14#0, 
      a#389#15#0, 
      a#389#16#0, 
      a#389#17#0) } 
  BoxRank(a#389#2#0)
     < DtRank(#_System._tuple#18._#Make18(a#389#0#0, 
        a#389#1#0, 
        a#389#2#0, 
        a#389#3#0, 
        a#389#4#0, 
        a#389#5#0, 
        a#389#6#0, 
        a#389#7#0, 
        a#389#8#0, 
        a#389#9#0, 
        a#389#10#0, 
        a#389#11#0, 
        a#389#12#0, 
        a#389#13#0, 
        a#389#14#0, 
        a#389#15#0, 
        a#389#16#0, 
        a#389#17#0)));

function _System.Tuple18._3(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#390#0#0: Box, 
    a#390#1#0: Box, 
    a#390#2#0: Box, 
    a#390#3#0: Box, 
    a#390#4#0: Box, 
    a#390#5#0: Box, 
    a#390#6#0: Box, 
    a#390#7#0: Box, 
    a#390#8#0: Box, 
    a#390#9#0: Box, 
    a#390#10#0: Box, 
    a#390#11#0: Box, 
    a#390#12#0: Box, 
    a#390#13#0: Box, 
    a#390#14#0: Box, 
    a#390#15#0: Box, 
    a#390#16#0: Box, 
    a#390#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#390#0#0, 
      a#390#1#0, 
      a#390#2#0, 
      a#390#3#0, 
      a#390#4#0, 
      a#390#5#0, 
      a#390#6#0, 
      a#390#7#0, 
      a#390#8#0, 
      a#390#9#0, 
      a#390#10#0, 
      a#390#11#0, 
      a#390#12#0, 
      a#390#13#0, 
      a#390#14#0, 
      a#390#15#0, 
      a#390#16#0, 
      a#390#17#0) } 
  _System.Tuple18._3(#_System._tuple#18._#Make18(a#390#0#0, 
        a#390#1#0, 
        a#390#2#0, 
        a#390#3#0, 
        a#390#4#0, 
        a#390#5#0, 
        a#390#6#0, 
        a#390#7#0, 
        a#390#8#0, 
        a#390#9#0, 
        a#390#10#0, 
        a#390#11#0, 
        a#390#12#0, 
        a#390#13#0, 
        a#390#14#0, 
        a#390#15#0, 
        a#390#16#0, 
        a#390#17#0))
     == a#390#3#0);

// Inductive rank
axiom (forall a#391#0#0: Box, 
    a#391#1#0: Box, 
    a#391#2#0: Box, 
    a#391#3#0: Box, 
    a#391#4#0: Box, 
    a#391#5#0: Box, 
    a#391#6#0: Box, 
    a#391#7#0: Box, 
    a#391#8#0: Box, 
    a#391#9#0: Box, 
    a#391#10#0: Box, 
    a#391#11#0: Box, 
    a#391#12#0: Box, 
    a#391#13#0: Box, 
    a#391#14#0: Box, 
    a#391#15#0: Box, 
    a#391#16#0: Box, 
    a#391#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#391#0#0, 
      a#391#1#0, 
      a#391#2#0, 
      a#391#3#0, 
      a#391#4#0, 
      a#391#5#0, 
      a#391#6#0, 
      a#391#7#0, 
      a#391#8#0, 
      a#391#9#0, 
      a#391#10#0, 
      a#391#11#0, 
      a#391#12#0, 
      a#391#13#0, 
      a#391#14#0, 
      a#391#15#0, 
      a#391#16#0, 
      a#391#17#0) } 
  BoxRank(a#391#3#0)
     < DtRank(#_System._tuple#18._#Make18(a#391#0#0, 
        a#391#1#0, 
        a#391#2#0, 
        a#391#3#0, 
        a#391#4#0, 
        a#391#5#0, 
        a#391#6#0, 
        a#391#7#0, 
        a#391#8#0, 
        a#391#9#0, 
        a#391#10#0, 
        a#391#11#0, 
        a#391#12#0, 
        a#391#13#0, 
        a#391#14#0, 
        a#391#15#0, 
        a#391#16#0, 
        a#391#17#0)));

function _System.Tuple18._4(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#392#0#0: Box, 
    a#392#1#0: Box, 
    a#392#2#0: Box, 
    a#392#3#0: Box, 
    a#392#4#0: Box, 
    a#392#5#0: Box, 
    a#392#6#0: Box, 
    a#392#7#0: Box, 
    a#392#8#0: Box, 
    a#392#9#0: Box, 
    a#392#10#0: Box, 
    a#392#11#0: Box, 
    a#392#12#0: Box, 
    a#392#13#0: Box, 
    a#392#14#0: Box, 
    a#392#15#0: Box, 
    a#392#16#0: Box, 
    a#392#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#392#0#0, 
      a#392#1#0, 
      a#392#2#0, 
      a#392#3#0, 
      a#392#4#0, 
      a#392#5#0, 
      a#392#6#0, 
      a#392#7#0, 
      a#392#8#0, 
      a#392#9#0, 
      a#392#10#0, 
      a#392#11#0, 
      a#392#12#0, 
      a#392#13#0, 
      a#392#14#0, 
      a#392#15#0, 
      a#392#16#0, 
      a#392#17#0) } 
  _System.Tuple18._4(#_System._tuple#18._#Make18(a#392#0#0, 
        a#392#1#0, 
        a#392#2#0, 
        a#392#3#0, 
        a#392#4#0, 
        a#392#5#0, 
        a#392#6#0, 
        a#392#7#0, 
        a#392#8#0, 
        a#392#9#0, 
        a#392#10#0, 
        a#392#11#0, 
        a#392#12#0, 
        a#392#13#0, 
        a#392#14#0, 
        a#392#15#0, 
        a#392#16#0, 
        a#392#17#0))
     == a#392#4#0);

// Inductive rank
axiom (forall a#393#0#0: Box, 
    a#393#1#0: Box, 
    a#393#2#0: Box, 
    a#393#3#0: Box, 
    a#393#4#0: Box, 
    a#393#5#0: Box, 
    a#393#6#0: Box, 
    a#393#7#0: Box, 
    a#393#8#0: Box, 
    a#393#9#0: Box, 
    a#393#10#0: Box, 
    a#393#11#0: Box, 
    a#393#12#0: Box, 
    a#393#13#0: Box, 
    a#393#14#0: Box, 
    a#393#15#0: Box, 
    a#393#16#0: Box, 
    a#393#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#393#0#0, 
      a#393#1#0, 
      a#393#2#0, 
      a#393#3#0, 
      a#393#4#0, 
      a#393#5#0, 
      a#393#6#0, 
      a#393#7#0, 
      a#393#8#0, 
      a#393#9#0, 
      a#393#10#0, 
      a#393#11#0, 
      a#393#12#0, 
      a#393#13#0, 
      a#393#14#0, 
      a#393#15#0, 
      a#393#16#0, 
      a#393#17#0) } 
  BoxRank(a#393#4#0)
     < DtRank(#_System._tuple#18._#Make18(a#393#0#0, 
        a#393#1#0, 
        a#393#2#0, 
        a#393#3#0, 
        a#393#4#0, 
        a#393#5#0, 
        a#393#6#0, 
        a#393#7#0, 
        a#393#8#0, 
        a#393#9#0, 
        a#393#10#0, 
        a#393#11#0, 
        a#393#12#0, 
        a#393#13#0, 
        a#393#14#0, 
        a#393#15#0, 
        a#393#16#0, 
        a#393#17#0)));

function _System.Tuple18._5(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#394#0#0: Box, 
    a#394#1#0: Box, 
    a#394#2#0: Box, 
    a#394#3#0: Box, 
    a#394#4#0: Box, 
    a#394#5#0: Box, 
    a#394#6#0: Box, 
    a#394#7#0: Box, 
    a#394#8#0: Box, 
    a#394#9#0: Box, 
    a#394#10#0: Box, 
    a#394#11#0: Box, 
    a#394#12#0: Box, 
    a#394#13#0: Box, 
    a#394#14#0: Box, 
    a#394#15#0: Box, 
    a#394#16#0: Box, 
    a#394#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#394#0#0, 
      a#394#1#0, 
      a#394#2#0, 
      a#394#3#0, 
      a#394#4#0, 
      a#394#5#0, 
      a#394#6#0, 
      a#394#7#0, 
      a#394#8#0, 
      a#394#9#0, 
      a#394#10#0, 
      a#394#11#0, 
      a#394#12#0, 
      a#394#13#0, 
      a#394#14#0, 
      a#394#15#0, 
      a#394#16#0, 
      a#394#17#0) } 
  _System.Tuple18._5(#_System._tuple#18._#Make18(a#394#0#0, 
        a#394#1#0, 
        a#394#2#0, 
        a#394#3#0, 
        a#394#4#0, 
        a#394#5#0, 
        a#394#6#0, 
        a#394#7#0, 
        a#394#8#0, 
        a#394#9#0, 
        a#394#10#0, 
        a#394#11#0, 
        a#394#12#0, 
        a#394#13#0, 
        a#394#14#0, 
        a#394#15#0, 
        a#394#16#0, 
        a#394#17#0))
     == a#394#5#0);

// Inductive rank
axiom (forall a#395#0#0: Box, 
    a#395#1#0: Box, 
    a#395#2#0: Box, 
    a#395#3#0: Box, 
    a#395#4#0: Box, 
    a#395#5#0: Box, 
    a#395#6#0: Box, 
    a#395#7#0: Box, 
    a#395#8#0: Box, 
    a#395#9#0: Box, 
    a#395#10#0: Box, 
    a#395#11#0: Box, 
    a#395#12#0: Box, 
    a#395#13#0: Box, 
    a#395#14#0: Box, 
    a#395#15#0: Box, 
    a#395#16#0: Box, 
    a#395#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#395#0#0, 
      a#395#1#0, 
      a#395#2#0, 
      a#395#3#0, 
      a#395#4#0, 
      a#395#5#0, 
      a#395#6#0, 
      a#395#7#0, 
      a#395#8#0, 
      a#395#9#0, 
      a#395#10#0, 
      a#395#11#0, 
      a#395#12#0, 
      a#395#13#0, 
      a#395#14#0, 
      a#395#15#0, 
      a#395#16#0, 
      a#395#17#0) } 
  BoxRank(a#395#5#0)
     < DtRank(#_System._tuple#18._#Make18(a#395#0#0, 
        a#395#1#0, 
        a#395#2#0, 
        a#395#3#0, 
        a#395#4#0, 
        a#395#5#0, 
        a#395#6#0, 
        a#395#7#0, 
        a#395#8#0, 
        a#395#9#0, 
        a#395#10#0, 
        a#395#11#0, 
        a#395#12#0, 
        a#395#13#0, 
        a#395#14#0, 
        a#395#15#0, 
        a#395#16#0, 
        a#395#17#0)));

function _System.Tuple18._6(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#396#0#0: Box, 
    a#396#1#0: Box, 
    a#396#2#0: Box, 
    a#396#3#0: Box, 
    a#396#4#0: Box, 
    a#396#5#0: Box, 
    a#396#6#0: Box, 
    a#396#7#0: Box, 
    a#396#8#0: Box, 
    a#396#9#0: Box, 
    a#396#10#0: Box, 
    a#396#11#0: Box, 
    a#396#12#0: Box, 
    a#396#13#0: Box, 
    a#396#14#0: Box, 
    a#396#15#0: Box, 
    a#396#16#0: Box, 
    a#396#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#396#0#0, 
      a#396#1#0, 
      a#396#2#0, 
      a#396#3#0, 
      a#396#4#0, 
      a#396#5#0, 
      a#396#6#0, 
      a#396#7#0, 
      a#396#8#0, 
      a#396#9#0, 
      a#396#10#0, 
      a#396#11#0, 
      a#396#12#0, 
      a#396#13#0, 
      a#396#14#0, 
      a#396#15#0, 
      a#396#16#0, 
      a#396#17#0) } 
  _System.Tuple18._6(#_System._tuple#18._#Make18(a#396#0#0, 
        a#396#1#0, 
        a#396#2#0, 
        a#396#3#0, 
        a#396#4#0, 
        a#396#5#0, 
        a#396#6#0, 
        a#396#7#0, 
        a#396#8#0, 
        a#396#9#0, 
        a#396#10#0, 
        a#396#11#0, 
        a#396#12#0, 
        a#396#13#0, 
        a#396#14#0, 
        a#396#15#0, 
        a#396#16#0, 
        a#396#17#0))
     == a#396#6#0);

// Inductive rank
axiom (forall a#397#0#0: Box, 
    a#397#1#0: Box, 
    a#397#2#0: Box, 
    a#397#3#0: Box, 
    a#397#4#0: Box, 
    a#397#5#0: Box, 
    a#397#6#0: Box, 
    a#397#7#0: Box, 
    a#397#8#0: Box, 
    a#397#9#0: Box, 
    a#397#10#0: Box, 
    a#397#11#0: Box, 
    a#397#12#0: Box, 
    a#397#13#0: Box, 
    a#397#14#0: Box, 
    a#397#15#0: Box, 
    a#397#16#0: Box, 
    a#397#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#397#0#0, 
      a#397#1#0, 
      a#397#2#0, 
      a#397#3#0, 
      a#397#4#0, 
      a#397#5#0, 
      a#397#6#0, 
      a#397#7#0, 
      a#397#8#0, 
      a#397#9#0, 
      a#397#10#0, 
      a#397#11#0, 
      a#397#12#0, 
      a#397#13#0, 
      a#397#14#0, 
      a#397#15#0, 
      a#397#16#0, 
      a#397#17#0) } 
  BoxRank(a#397#6#0)
     < DtRank(#_System._tuple#18._#Make18(a#397#0#0, 
        a#397#1#0, 
        a#397#2#0, 
        a#397#3#0, 
        a#397#4#0, 
        a#397#5#0, 
        a#397#6#0, 
        a#397#7#0, 
        a#397#8#0, 
        a#397#9#0, 
        a#397#10#0, 
        a#397#11#0, 
        a#397#12#0, 
        a#397#13#0, 
        a#397#14#0, 
        a#397#15#0, 
        a#397#16#0, 
        a#397#17#0)));

function _System.Tuple18._7(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#398#0#0: Box, 
    a#398#1#0: Box, 
    a#398#2#0: Box, 
    a#398#3#0: Box, 
    a#398#4#0: Box, 
    a#398#5#0: Box, 
    a#398#6#0: Box, 
    a#398#7#0: Box, 
    a#398#8#0: Box, 
    a#398#9#0: Box, 
    a#398#10#0: Box, 
    a#398#11#0: Box, 
    a#398#12#0: Box, 
    a#398#13#0: Box, 
    a#398#14#0: Box, 
    a#398#15#0: Box, 
    a#398#16#0: Box, 
    a#398#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#398#0#0, 
      a#398#1#0, 
      a#398#2#0, 
      a#398#3#0, 
      a#398#4#0, 
      a#398#5#0, 
      a#398#6#0, 
      a#398#7#0, 
      a#398#8#0, 
      a#398#9#0, 
      a#398#10#0, 
      a#398#11#0, 
      a#398#12#0, 
      a#398#13#0, 
      a#398#14#0, 
      a#398#15#0, 
      a#398#16#0, 
      a#398#17#0) } 
  _System.Tuple18._7(#_System._tuple#18._#Make18(a#398#0#0, 
        a#398#1#0, 
        a#398#2#0, 
        a#398#3#0, 
        a#398#4#0, 
        a#398#5#0, 
        a#398#6#0, 
        a#398#7#0, 
        a#398#8#0, 
        a#398#9#0, 
        a#398#10#0, 
        a#398#11#0, 
        a#398#12#0, 
        a#398#13#0, 
        a#398#14#0, 
        a#398#15#0, 
        a#398#16#0, 
        a#398#17#0))
     == a#398#7#0);

// Inductive rank
axiom (forall a#399#0#0: Box, 
    a#399#1#0: Box, 
    a#399#2#0: Box, 
    a#399#3#0: Box, 
    a#399#4#0: Box, 
    a#399#5#0: Box, 
    a#399#6#0: Box, 
    a#399#7#0: Box, 
    a#399#8#0: Box, 
    a#399#9#0: Box, 
    a#399#10#0: Box, 
    a#399#11#0: Box, 
    a#399#12#0: Box, 
    a#399#13#0: Box, 
    a#399#14#0: Box, 
    a#399#15#0: Box, 
    a#399#16#0: Box, 
    a#399#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#399#0#0, 
      a#399#1#0, 
      a#399#2#0, 
      a#399#3#0, 
      a#399#4#0, 
      a#399#5#0, 
      a#399#6#0, 
      a#399#7#0, 
      a#399#8#0, 
      a#399#9#0, 
      a#399#10#0, 
      a#399#11#0, 
      a#399#12#0, 
      a#399#13#0, 
      a#399#14#0, 
      a#399#15#0, 
      a#399#16#0, 
      a#399#17#0) } 
  BoxRank(a#399#7#0)
     < DtRank(#_System._tuple#18._#Make18(a#399#0#0, 
        a#399#1#0, 
        a#399#2#0, 
        a#399#3#0, 
        a#399#4#0, 
        a#399#5#0, 
        a#399#6#0, 
        a#399#7#0, 
        a#399#8#0, 
        a#399#9#0, 
        a#399#10#0, 
        a#399#11#0, 
        a#399#12#0, 
        a#399#13#0, 
        a#399#14#0, 
        a#399#15#0, 
        a#399#16#0, 
        a#399#17#0)));

function _System.Tuple18._8(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#400#0#0: Box, 
    a#400#1#0: Box, 
    a#400#2#0: Box, 
    a#400#3#0: Box, 
    a#400#4#0: Box, 
    a#400#5#0: Box, 
    a#400#6#0: Box, 
    a#400#7#0: Box, 
    a#400#8#0: Box, 
    a#400#9#0: Box, 
    a#400#10#0: Box, 
    a#400#11#0: Box, 
    a#400#12#0: Box, 
    a#400#13#0: Box, 
    a#400#14#0: Box, 
    a#400#15#0: Box, 
    a#400#16#0: Box, 
    a#400#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#400#0#0, 
      a#400#1#0, 
      a#400#2#0, 
      a#400#3#0, 
      a#400#4#0, 
      a#400#5#0, 
      a#400#6#0, 
      a#400#7#0, 
      a#400#8#0, 
      a#400#9#0, 
      a#400#10#0, 
      a#400#11#0, 
      a#400#12#0, 
      a#400#13#0, 
      a#400#14#0, 
      a#400#15#0, 
      a#400#16#0, 
      a#400#17#0) } 
  _System.Tuple18._8(#_System._tuple#18._#Make18(a#400#0#0, 
        a#400#1#0, 
        a#400#2#0, 
        a#400#3#0, 
        a#400#4#0, 
        a#400#5#0, 
        a#400#6#0, 
        a#400#7#0, 
        a#400#8#0, 
        a#400#9#0, 
        a#400#10#0, 
        a#400#11#0, 
        a#400#12#0, 
        a#400#13#0, 
        a#400#14#0, 
        a#400#15#0, 
        a#400#16#0, 
        a#400#17#0))
     == a#400#8#0);

// Inductive rank
axiom (forall a#401#0#0: Box, 
    a#401#1#0: Box, 
    a#401#2#0: Box, 
    a#401#3#0: Box, 
    a#401#4#0: Box, 
    a#401#5#0: Box, 
    a#401#6#0: Box, 
    a#401#7#0: Box, 
    a#401#8#0: Box, 
    a#401#9#0: Box, 
    a#401#10#0: Box, 
    a#401#11#0: Box, 
    a#401#12#0: Box, 
    a#401#13#0: Box, 
    a#401#14#0: Box, 
    a#401#15#0: Box, 
    a#401#16#0: Box, 
    a#401#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#401#0#0, 
      a#401#1#0, 
      a#401#2#0, 
      a#401#3#0, 
      a#401#4#0, 
      a#401#5#0, 
      a#401#6#0, 
      a#401#7#0, 
      a#401#8#0, 
      a#401#9#0, 
      a#401#10#0, 
      a#401#11#0, 
      a#401#12#0, 
      a#401#13#0, 
      a#401#14#0, 
      a#401#15#0, 
      a#401#16#0, 
      a#401#17#0) } 
  BoxRank(a#401#8#0)
     < DtRank(#_System._tuple#18._#Make18(a#401#0#0, 
        a#401#1#0, 
        a#401#2#0, 
        a#401#3#0, 
        a#401#4#0, 
        a#401#5#0, 
        a#401#6#0, 
        a#401#7#0, 
        a#401#8#0, 
        a#401#9#0, 
        a#401#10#0, 
        a#401#11#0, 
        a#401#12#0, 
        a#401#13#0, 
        a#401#14#0, 
        a#401#15#0, 
        a#401#16#0, 
        a#401#17#0)));

function _System.Tuple18._9(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#402#0#0: Box, 
    a#402#1#0: Box, 
    a#402#2#0: Box, 
    a#402#3#0: Box, 
    a#402#4#0: Box, 
    a#402#5#0: Box, 
    a#402#6#0: Box, 
    a#402#7#0: Box, 
    a#402#8#0: Box, 
    a#402#9#0: Box, 
    a#402#10#0: Box, 
    a#402#11#0: Box, 
    a#402#12#0: Box, 
    a#402#13#0: Box, 
    a#402#14#0: Box, 
    a#402#15#0: Box, 
    a#402#16#0: Box, 
    a#402#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#402#0#0, 
      a#402#1#0, 
      a#402#2#0, 
      a#402#3#0, 
      a#402#4#0, 
      a#402#5#0, 
      a#402#6#0, 
      a#402#7#0, 
      a#402#8#0, 
      a#402#9#0, 
      a#402#10#0, 
      a#402#11#0, 
      a#402#12#0, 
      a#402#13#0, 
      a#402#14#0, 
      a#402#15#0, 
      a#402#16#0, 
      a#402#17#0) } 
  _System.Tuple18._9(#_System._tuple#18._#Make18(a#402#0#0, 
        a#402#1#0, 
        a#402#2#0, 
        a#402#3#0, 
        a#402#4#0, 
        a#402#5#0, 
        a#402#6#0, 
        a#402#7#0, 
        a#402#8#0, 
        a#402#9#0, 
        a#402#10#0, 
        a#402#11#0, 
        a#402#12#0, 
        a#402#13#0, 
        a#402#14#0, 
        a#402#15#0, 
        a#402#16#0, 
        a#402#17#0))
     == a#402#9#0);

// Inductive rank
axiom (forall a#403#0#0: Box, 
    a#403#1#0: Box, 
    a#403#2#0: Box, 
    a#403#3#0: Box, 
    a#403#4#0: Box, 
    a#403#5#0: Box, 
    a#403#6#0: Box, 
    a#403#7#0: Box, 
    a#403#8#0: Box, 
    a#403#9#0: Box, 
    a#403#10#0: Box, 
    a#403#11#0: Box, 
    a#403#12#0: Box, 
    a#403#13#0: Box, 
    a#403#14#0: Box, 
    a#403#15#0: Box, 
    a#403#16#0: Box, 
    a#403#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#403#0#0, 
      a#403#1#0, 
      a#403#2#0, 
      a#403#3#0, 
      a#403#4#0, 
      a#403#5#0, 
      a#403#6#0, 
      a#403#7#0, 
      a#403#8#0, 
      a#403#9#0, 
      a#403#10#0, 
      a#403#11#0, 
      a#403#12#0, 
      a#403#13#0, 
      a#403#14#0, 
      a#403#15#0, 
      a#403#16#0, 
      a#403#17#0) } 
  BoxRank(a#403#9#0)
     < DtRank(#_System._tuple#18._#Make18(a#403#0#0, 
        a#403#1#0, 
        a#403#2#0, 
        a#403#3#0, 
        a#403#4#0, 
        a#403#5#0, 
        a#403#6#0, 
        a#403#7#0, 
        a#403#8#0, 
        a#403#9#0, 
        a#403#10#0, 
        a#403#11#0, 
        a#403#12#0, 
        a#403#13#0, 
        a#403#14#0, 
        a#403#15#0, 
        a#403#16#0, 
        a#403#17#0)));

function _System.Tuple18._10(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#404#0#0: Box, 
    a#404#1#0: Box, 
    a#404#2#0: Box, 
    a#404#3#0: Box, 
    a#404#4#0: Box, 
    a#404#5#0: Box, 
    a#404#6#0: Box, 
    a#404#7#0: Box, 
    a#404#8#0: Box, 
    a#404#9#0: Box, 
    a#404#10#0: Box, 
    a#404#11#0: Box, 
    a#404#12#0: Box, 
    a#404#13#0: Box, 
    a#404#14#0: Box, 
    a#404#15#0: Box, 
    a#404#16#0: Box, 
    a#404#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#404#0#0, 
      a#404#1#0, 
      a#404#2#0, 
      a#404#3#0, 
      a#404#4#0, 
      a#404#5#0, 
      a#404#6#0, 
      a#404#7#0, 
      a#404#8#0, 
      a#404#9#0, 
      a#404#10#0, 
      a#404#11#0, 
      a#404#12#0, 
      a#404#13#0, 
      a#404#14#0, 
      a#404#15#0, 
      a#404#16#0, 
      a#404#17#0) } 
  _System.Tuple18._10(#_System._tuple#18._#Make18(a#404#0#0, 
        a#404#1#0, 
        a#404#2#0, 
        a#404#3#0, 
        a#404#4#0, 
        a#404#5#0, 
        a#404#6#0, 
        a#404#7#0, 
        a#404#8#0, 
        a#404#9#0, 
        a#404#10#0, 
        a#404#11#0, 
        a#404#12#0, 
        a#404#13#0, 
        a#404#14#0, 
        a#404#15#0, 
        a#404#16#0, 
        a#404#17#0))
     == a#404#10#0);

// Inductive rank
axiom (forall a#405#0#0: Box, 
    a#405#1#0: Box, 
    a#405#2#0: Box, 
    a#405#3#0: Box, 
    a#405#4#0: Box, 
    a#405#5#0: Box, 
    a#405#6#0: Box, 
    a#405#7#0: Box, 
    a#405#8#0: Box, 
    a#405#9#0: Box, 
    a#405#10#0: Box, 
    a#405#11#0: Box, 
    a#405#12#0: Box, 
    a#405#13#0: Box, 
    a#405#14#0: Box, 
    a#405#15#0: Box, 
    a#405#16#0: Box, 
    a#405#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#405#0#0, 
      a#405#1#0, 
      a#405#2#0, 
      a#405#3#0, 
      a#405#4#0, 
      a#405#5#0, 
      a#405#6#0, 
      a#405#7#0, 
      a#405#8#0, 
      a#405#9#0, 
      a#405#10#0, 
      a#405#11#0, 
      a#405#12#0, 
      a#405#13#0, 
      a#405#14#0, 
      a#405#15#0, 
      a#405#16#0, 
      a#405#17#0) } 
  BoxRank(a#405#10#0)
     < DtRank(#_System._tuple#18._#Make18(a#405#0#0, 
        a#405#1#0, 
        a#405#2#0, 
        a#405#3#0, 
        a#405#4#0, 
        a#405#5#0, 
        a#405#6#0, 
        a#405#7#0, 
        a#405#8#0, 
        a#405#9#0, 
        a#405#10#0, 
        a#405#11#0, 
        a#405#12#0, 
        a#405#13#0, 
        a#405#14#0, 
        a#405#15#0, 
        a#405#16#0, 
        a#405#17#0)));

function _System.Tuple18._11(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#406#0#0: Box, 
    a#406#1#0: Box, 
    a#406#2#0: Box, 
    a#406#3#0: Box, 
    a#406#4#0: Box, 
    a#406#5#0: Box, 
    a#406#6#0: Box, 
    a#406#7#0: Box, 
    a#406#8#0: Box, 
    a#406#9#0: Box, 
    a#406#10#0: Box, 
    a#406#11#0: Box, 
    a#406#12#0: Box, 
    a#406#13#0: Box, 
    a#406#14#0: Box, 
    a#406#15#0: Box, 
    a#406#16#0: Box, 
    a#406#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#406#0#0, 
      a#406#1#0, 
      a#406#2#0, 
      a#406#3#0, 
      a#406#4#0, 
      a#406#5#0, 
      a#406#6#0, 
      a#406#7#0, 
      a#406#8#0, 
      a#406#9#0, 
      a#406#10#0, 
      a#406#11#0, 
      a#406#12#0, 
      a#406#13#0, 
      a#406#14#0, 
      a#406#15#0, 
      a#406#16#0, 
      a#406#17#0) } 
  _System.Tuple18._11(#_System._tuple#18._#Make18(a#406#0#0, 
        a#406#1#0, 
        a#406#2#0, 
        a#406#3#0, 
        a#406#4#0, 
        a#406#5#0, 
        a#406#6#0, 
        a#406#7#0, 
        a#406#8#0, 
        a#406#9#0, 
        a#406#10#0, 
        a#406#11#0, 
        a#406#12#0, 
        a#406#13#0, 
        a#406#14#0, 
        a#406#15#0, 
        a#406#16#0, 
        a#406#17#0))
     == a#406#11#0);

// Inductive rank
axiom (forall a#407#0#0: Box, 
    a#407#1#0: Box, 
    a#407#2#0: Box, 
    a#407#3#0: Box, 
    a#407#4#0: Box, 
    a#407#5#0: Box, 
    a#407#6#0: Box, 
    a#407#7#0: Box, 
    a#407#8#0: Box, 
    a#407#9#0: Box, 
    a#407#10#0: Box, 
    a#407#11#0: Box, 
    a#407#12#0: Box, 
    a#407#13#0: Box, 
    a#407#14#0: Box, 
    a#407#15#0: Box, 
    a#407#16#0: Box, 
    a#407#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#407#0#0, 
      a#407#1#0, 
      a#407#2#0, 
      a#407#3#0, 
      a#407#4#0, 
      a#407#5#0, 
      a#407#6#0, 
      a#407#7#0, 
      a#407#8#0, 
      a#407#9#0, 
      a#407#10#0, 
      a#407#11#0, 
      a#407#12#0, 
      a#407#13#0, 
      a#407#14#0, 
      a#407#15#0, 
      a#407#16#0, 
      a#407#17#0) } 
  BoxRank(a#407#11#0)
     < DtRank(#_System._tuple#18._#Make18(a#407#0#0, 
        a#407#1#0, 
        a#407#2#0, 
        a#407#3#0, 
        a#407#4#0, 
        a#407#5#0, 
        a#407#6#0, 
        a#407#7#0, 
        a#407#8#0, 
        a#407#9#0, 
        a#407#10#0, 
        a#407#11#0, 
        a#407#12#0, 
        a#407#13#0, 
        a#407#14#0, 
        a#407#15#0, 
        a#407#16#0, 
        a#407#17#0)));

function _System.Tuple18._12(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#408#0#0: Box, 
    a#408#1#0: Box, 
    a#408#2#0: Box, 
    a#408#3#0: Box, 
    a#408#4#0: Box, 
    a#408#5#0: Box, 
    a#408#6#0: Box, 
    a#408#7#0: Box, 
    a#408#8#0: Box, 
    a#408#9#0: Box, 
    a#408#10#0: Box, 
    a#408#11#0: Box, 
    a#408#12#0: Box, 
    a#408#13#0: Box, 
    a#408#14#0: Box, 
    a#408#15#0: Box, 
    a#408#16#0: Box, 
    a#408#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#408#0#0, 
      a#408#1#0, 
      a#408#2#0, 
      a#408#3#0, 
      a#408#4#0, 
      a#408#5#0, 
      a#408#6#0, 
      a#408#7#0, 
      a#408#8#0, 
      a#408#9#0, 
      a#408#10#0, 
      a#408#11#0, 
      a#408#12#0, 
      a#408#13#0, 
      a#408#14#0, 
      a#408#15#0, 
      a#408#16#0, 
      a#408#17#0) } 
  _System.Tuple18._12(#_System._tuple#18._#Make18(a#408#0#0, 
        a#408#1#0, 
        a#408#2#0, 
        a#408#3#0, 
        a#408#4#0, 
        a#408#5#0, 
        a#408#6#0, 
        a#408#7#0, 
        a#408#8#0, 
        a#408#9#0, 
        a#408#10#0, 
        a#408#11#0, 
        a#408#12#0, 
        a#408#13#0, 
        a#408#14#0, 
        a#408#15#0, 
        a#408#16#0, 
        a#408#17#0))
     == a#408#12#0);

// Inductive rank
axiom (forall a#409#0#0: Box, 
    a#409#1#0: Box, 
    a#409#2#0: Box, 
    a#409#3#0: Box, 
    a#409#4#0: Box, 
    a#409#5#0: Box, 
    a#409#6#0: Box, 
    a#409#7#0: Box, 
    a#409#8#0: Box, 
    a#409#9#0: Box, 
    a#409#10#0: Box, 
    a#409#11#0: Box, 
    a#409#12#0: Box, 
    a#409#13#0: Box, 
    a#409#14#0: Box, 
    a#409#15#0: Box, 
    a#409#16#0: Box, 
    a#409#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#409#0#0, 
      a#409#1#0, 
      a#409#2#0, 
      a#409#3#0, 
      a#409#4#0, 
      a#409#5#0, 
      a#409#6#0, 
      a#409#7#0, 
      a#409#8#0, 
      a#409#9#0, 
      a#409#10#0, 
      a#409#11#0, 
      a#409#12#0, 
      a#409#13#0, 
      a#409#14#0, 
      a#409#15#0, 
      a#409#16#0, 
      a#409#17#0) } 
  BoxRank(a#409#12#0)
     < DtRank(#_System._tuple#18._#Make18(a#409#0#0, 
        a#409#1#0, 
        a#409#2#0, 
        a#409#3#0, 
        a#409#4#0, 
        a#409#5#0, 
        a#409#6#0, 
        a#409#7#0, 
        a#409#8#0, 
        a#409#9#0, 
        a#409#10#0, 
        a#409#11#0, 
        a#409#12#0, 
        a#409#13#0, 
        a#409#14#0, 
        a#409#15#0, 
        a#409#16#0, 
        a#409#17#0)));

function _System.Tuple18._13(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#410#0#0: Box, 
    a#410#1#0: Box, 
    a#410#2#0: Box, 
    a#410#3#0: Box, 
    a#410#4#0: Box, 
    a#410#5#0: Box, 
    a#410#6#0: Box, 
    a#410#7#0: Box, 
    a#410#8#0: Box, 
    a#410#9#0: Box, 
    a#410#10#0: Box, 
    a#410#11#0: Box, 
    a#410#12#0: Box, 
    a#410#13#0: Box, 
    a#410#14#0: Box, 
    a#410#15#0: Box, 
    a#410#16#0: Box, 
    a#410#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#410#0#0, 
      a#410#1#0, 
      a#410#2#0, 
      a#410#3#0, 
      a#410#4#0, 
      a#410#5#0, 
      a#410#6#0, 
      a#410#7#0, 
      a#410#8#0, 
      a#410#9#0, 
      a#410#10#0, 
      a#410#11#0, 
      a#410#12#0, 
      a#410#13#0, 
      a#410#14#0, 
      a#410#15#0, 
      a#410#16#0, 
      a#410#17#0) } 
  _System.Tuple18._13(#_System._tuple#18._#Make18(a#410#0#0, 
        a#410#1#0, 
        a#410#2#0, 
        a#410#3#0, 
        a#410#4#0, 
        a#410#5#0, 
        a#410#6#0, 
        a#410#7#0, 
        a#410#8#0, 
        a#410#9#0, 
        a#410#10#0, 
        a#410#11#0, 
        a#410#12#0, 
        a#410#13#0, 
        a#410#14#0, 
        a#410#15#0, 
        a#410#16#0, 
        a#410#17#0))
     == a#410#13#0);

// Inductive rank
axiom (forall a#411#0#0: Box, 
    a#411#1#0: Box, 
    a#411#2#0: Box, 
    a#411#3#0: Box, 
    a#411#4#0: Box, 
    a#411#5#0: Box, 
    a#411#6#0: Box, 
    a#411#7#0: Box, 
    a#411#8#0: Box, 
    a#411#9#0: Box, 
    a#411#10#0: Box, 
    a#411#11#0: Box, 
    a#411#12#0: Box, 
    a#411#13#0: Box, 
    a#411#14#0: Box, 
    a#411#15#0: Box, 
    a#411#16#0: Box, 
    a#411#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#411#0#0, 
      a#411#1#0, 
      a#411#2#0, 
      a#411#3#0, 
      a#411#4#0, 
      a#411#5#0, 
      a#411#6#0, 
      a#411#7#0, 
      a#411#8#0, 
      a#411#9#0, 
      a#411#10#0, 
      a#411#11#0, 
      a#411#12#0, 
      a#411#13#0, 
      a#411#14#0, 
      a#411#15#0, 
      a#411#16#0, 
      a#411#17#0) } 
  BoxRank(a#411#13#0)
     < DtRank(#_System._tuple#18._#Make18(a#411#0#0, 
        a#411#1#0, 
        a#411#2#0, 
        a#411#3#0, 
        a#411#4#0, 
        a#411#5#0, 
        a#411#6#0, 
        a#411#7#0, 
        a#411#8#0, 
        a#411#9#0, 
        a#411#10#0, 
        a#411#11#0, 
        a#411#12#0, 
        a#411#13#0, 
        a#411#14#0, 
        a#411#15#0, 
        a#411#16#0, 
        a#411#17#0)));

function _System.Tuple18._14(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#412#0#0: Box, 
    a#412#1#0: Box, 
    a#412#2#0: Box, 
    a#412#3#0: Box, 
    a#412#4#0: Box, 
    a#412#5#0: Box, 
    a#412#6#0: Box, 
    a#412#7#0: Box, 
    a#412#8#0: Box, 
    a#412#9#0: Box, 
    a#412#10#0: Box, 
    a#412#11#0: Box, 
    a#412#12#0: Box, 
    a#412#13#0: Box, 
    a#412#14#0: Box, 
    a#412#15#0: Box, 
    a#412#16#0: Box, 
    a#412#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#412#0#0, 
      a#412#1#0, 
      a#412#2#0, 
      a#412#3#0, 
      a#412#4#0, 
      a#412#5#0, 
      a#412#6#0, 
      a#412#7#0, 
      a#412#8#0, 
      a#412#9#0, 
      a#412#10#0, 
      a#412#11#0, 
      a#412#12#0, 
      a#412#13#0, 
      a#412#14#0, 
      a#412#15#0, 
      a#412#16#0, 
      a#412#17#0) } 
  _System.Tuple18._14(#_System._tuple#18._#Make18(a#412#0#0, 
        a#412#1#0, 
        a#412#2#0, 
        a#412#3#0, 
        a#412#4#0, 
        a#412#5#0, 
        a#412#6#0, 
        a#412#7#0, 
        a#412#8#0, 
        a#412#9#0, 
        a#412#10#0, 
        a#412#11#0, 
        a#412#12#0, 
        a#412#13#0, 
        a#412#14#0, 
        a#412#15#0, 
        a#412#16#0, 
        a#412#17#0))
     == a#412#14#0);

// Inductive rank
axiom (forall a#413#0#0: Box, 
    a#413#1#0: Box, 
    a#413#2#0: Box, 
    a#413#3#0: Box, 
    a#413#4#0: Box, 
    a#413#5#0: Box, 
    a#413#6#0: Box, 
    a#413#7#0: Box, 
    a#413#8#0: Box, 
    a#413#9#0: Box, 
    a#413#10#0: Box, 
    a#413#11#0: Box, 
    a#413#12#0: Box, 
    a#413#13#0: Box, 
    a#413#14#0: Box, 
    a#413#15#0: Box, 
    a#413#16#0: Box, 
    a#413#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#413#0#0, 
      a#413#1#0, 
      a#413#2#0, 
      a#413#3#0, 
      a#413#4#0, 
      a#413#5#0, 
      a#413#6#0, 
      a#413#7#0, 
      a#413#8#0, 
      a#413#9#0, 
      a#413#10#0, 
      a#413#11#0, 
      a#413#12#0, 
      a#413#13#0, 
      a#413#14#0, 
      a#413#15#0, 
      a#413#16#0, 
      a#413#17#0) } 
  BoxRank(a#413#14#0)
     < DtRank(#_System._tuple#18._#Make18(a#413#0#0, 
        a#413#1#0, 
        a#413#2#0, 
        a#413#3#0, 
        a#413#4#0, 
        a#413#5#0, 
        a#413#6#0, 
        a#413#7#0, 
        a#413#8#0, 
        a#413#9#0, 
        a#413#10#0, 
        a#413#11#0, 
        a#413#12#0, 
        a#413#13#0, 
        a#413#14#0, 
        a#413#15#0, 
        a#413#16#0, 
        a#413#17#0)));

function _System.Tuple18._15(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#414#0#0: Box, 
    a#414#1#0: Box, 
    a#414#2#0: Box, 
    a#414#3#0: Box, 
    a#414#4#0: Box, 
    a#414#5#0: Box, 
    a#414#6#0: Box, 
    a#414#7#0: Box, 
    a#414#8#0: Box, 
    a#414#9#0: Box, 
    a#414#10#0: Box, 
    a#414#11#0: Box, 
    a#414#12#0: Box, 
    a#414#13#0: Box, 
    a#414#14#0: Box, 
    a#414#15#0: Box, 
    a#414#16#0: Box, 
    a#414#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#414#0#0, 
      a#414#1#0, 
      a#414#2#0, 
      a#414#3#0, 
      a#414#4#0, 
      a#414#5#0, 
      a#414#6#0, 
      a#414#7#0, 
      a#414#8#0, 
      a#414#9#0, 
      a#414#10#0, 
      a#414#11#0, 
      a#414#12#0, 
      a#414#13#0, 
      a#414#14#0, 
      a#414#15#0, 
      a#414#16#0, 
      a#414#17#0) } 
  _System.Tuple18._15(#_System._tuple#18._#Make18(a#414#0#0, 
        a#414#1#0, 
        a#414#2#0, 
        a#414#3#0, 
        a#414#4#0, 
        a#414#5#0, 
        a#414#6#0, 
        a#414#7#0, 
        a#414#8#0, 
        a#414#9#0, 
        a#414#10#0, 
        a#414#11#0, 
        a#414#12#0, 
        a#414#13#0, 
        a#414#14#0, 
        a#414#15#0, 
        a#414#16#0, 
        a#414#17#0))
     == a#414#15#0);

// Inductive rank
axiom (forall a#415#0#0: Box, 
    a#415#1#0: Box, 
    a#415#2#0: Box, 
    a#415#3#0: Box, 
    a#415#4#0: Box, 
    a#415#5#0: Box, 
    a#415#6#0: Box, 
    a#415#7#0: Box, 
    a#415#8#0: Box, 
    a#415#9#0: Box, 
    a#415#10#0: Box, 
    a#415#11#0: Box, 
    a#415#12#0: Box, 
    a#415#13#0: Box, 
    a#415#14#0: Box, 
    a#415#15#0: Box, 
    a#415#16#0: Box, 
    a#415#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#415#0#0, 
      a#415#1#0, 
      a#415#2#0, 
      a#415#3#0, 
      a#415#4#0, 
      a#415#5#0, 
      a#415#6#0, 
      a#415#7#0, 
      a#415#8#0, 
      a#415#9#0, 
      a#415#10#0, 
      a#415#11#0, 
      a#415#12#0, 
      a#415#13#0, 
      a#415#14#0, 
      a#415#15#0, 
      a#415#16#0, 
      a#415#17#0) } 
  BoxRank(a#415#15#0)
     < DtRank(#_System._tuple#18._#Make18(a#415#0#0, 
        a#415#1#0, 
        a#415#2#0, 
        a#415#3#0, 
        a#415#4#0, 
        a#415#5#0, 
        a#415#6#0, 
        a#415#7#0, 
        a#415#8#0, 
        a#415#9#0, 
        a#415#10#0, 
        a#415#11#0, 
        a#415#12#0, 
        a#415#13#0, 
        a#415#14#0, 
        a#415#15#0, 
        a#415#16#0, 
        a#415#17#0)));

function _System.Tuple18._16(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#416#0#0: Box, 
    a#416#1#0: Box, 
    a#416#2#0: Box, 
    a#416#3#0: Box, 
    a#416#4#0: Box, 
    a#416#5#0: Box, 
    a#416#6#0: Box, 
    a#416#7#0: Box, 
    a#416#8#0: Box, 
    a#416#9#0: Box, 
    a#416#10#0: Box, 
    a#416#11#0: Box, 
    a#416#12#0: Box, 
    a#416#13#0: Box, 
    a#416#14#0: Box, 
    a#416#15#0: Box, 
    a#416#16#0: Box, 
    a#416#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#416#0#0, 
      a#416#1#0, 
      a#416#2#0, 
      a#416#3#0, 
      a#416#4#0, 
      a#416#5#0, 
      a#416#6#0, 
      a#416#7#0, 
      a#416#8#0, 
      a#416#9#0, 
      a#416#10#0, 
      a#416#11#0, 
      a#416#12#0, 
      a#416#13#0, 
      a#416#14#0, 
      a#416#15#0, 
      a#416#16#0, 
      a#416#17#0) } 
  _System.Tuple18._16(#_System._tuple#18._#Make18(a#416#0#0, 
        a#416#1#0, 
        a#416#2#0, 
        a#416#3#0, 
        a#416#4#0, 
        a#416#5#0, 
        a#416#6#0, 
        a#416#7#0, 
        a#416#8#0, 
        a#416#9#0, 
        a#416#10#0, 
        a#416#11#0, 
        a#416#12#0, 
        a#416#13#0, 
        a#416#14#0, 
        a#416#15#0, 
        a#416#16#0, 
        a#416#17#0))
     == a#416#16#0);

// Inductive rank
axiom (forall a#417#0#0: Box, 
    a#417#1#0: Box, 
    a#417#2#0: Box, 
    a#417#3#0: Box, 
    a#417#4#0: Box, 
    a#417#5#0: Box, 
    a#417#6#0: Box, 
    a#417#7#0: Box, 
    a#417#8#0: Box, 
    a#417#9#0: Box, 
    a#417#10#0: Box, 
    a#417#11#0: Box, 
    a#417#12#0: Box, 
    a#417#13#0: Box, 
    a#417#14#0: Box, 
    a#417#15#0: Box, 
    a#417#16#0: Box, 
    a#417#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#417#0#0, 
      a#417#1#0, 
      a#417#2#0, 
      a#417#3#0, 
      a#417#4#0, 
      a#417#5#0, 
      a#417#6#0, 
      a#417#7#0, 
      a#417#8#0, 
      a#417#9#0, 
      a#417#10#0, 
      a#417#11#0, 
      a#417#12#0, 
      a#417#13#0, 
      a#417#14#0, 
      a#417#15#0, 
      a#417#16#0, 
      a#417#17#0) } 
  BoxRank(a#417#16#0)
     < DtRank(#_System._tuple#18._#Make18(a#417#0#0, 
        a#417#1#0, 
        a#417#2#0, 
        a#417#3#0, 
        a#417#4#0, 
        a#417#5#0, 
        a#417#6#0, 
        a#417#7#0, 
        a#417#8#0, 
        a#417#9#0, 
        a#417#10#0, 
        a#417#11#0, 
        a#417#12#0, 
        a#417#13#0, 
        a#417#14#0, 
        a#417#15#0, 
        a#417#16#0, 
        a#417#17#0)));

function _System.Tuple18._17(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#418#0#0: Box, 
    a#418#1#0: Box, 
    a#418#2#0: Box, 
    a#418#3#0: Box, 
    a#418#4#0: Box, 
    a#418#5#0: Box, 
    a#418#6#0: Box, 
    a#418#7#0: Box, 
    a#418#8#0: Box, 
    a#418#9#0: Box, 
    a#418#10#0: Box, 
    a#418#11#0: Box, 
    a#418#12#0: Box, 
    a#418#13#0: Box, 
    a#418#14#0: Box, 
    a#418#15#0: Box, 
    a#418#16#0: Box, 
    a#418#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#418#0#0, 
      a#418#1#0, 
      a#418#2#0, 
      a#418#3#0, 
      a#418#4#0, 
      a#418#5#0, 
      a#418#6#0, 
      a#418#7#0, 
      a#418#8#0, 
      a#418#9#0, 
      a#418#10#0, 
      a#418#11#0, 
      a#418#12#0, 
      a#418#13#0, 
      a#418#14#0, 
      a#418#15#0, 
      a#418#16#0, 
      a#418#17#0) } 
  _System.Tuple18._17(#_System._tuple#18._#Make18(a#418#0#0, 
        a#418#1#0, 
        a#418#2#0, 
        a#418#3#0, 
        a#418#4#0, 
        a#418#5#0, 
        a#418#6#0, 
        a#418#7#0, 
        a#418#8#0, 
        a#418#9#0, 
        a#418#10#0, 
        a#418#11#0, 
        a#418#12#0, 
        a#418#13#0, 
        a#418#14#0, 
        a#418#15#0, 
        a#418#16#0, 
        a#418#17#0))
     == a#418#17#0);

// Inductive rank
axiom (forall a#419#0#0: Box, 
    a#419#1#0: Box, 
    a#419#2#0: Box, 
    a#419#3#0: Box, 
    a#419#4#0: Box, 
    a#419#5#0: Box, 
    a#419#6#0: Box, 
    a#419#7#0: Box, 
    a#419#8#0: Box, 
    a#419#9#0: Box, 
    a#419#10#0: Box, 
    a#419#11#0: Box, 
    a#419#12#0: Box, 
    a#419#13#0: Box, 
    a#419#14#0: Box, 
    a#419#15#0: Box, 
    a#419#16#0: Box, 
    a#419#17#0: Box :: 
  { #_System._tuple#18._#Make18(a#419#0#0, 
      a#419#1#0, 
      a#419#2#0, 
      a#419#3#0, 
      a#419#4#0, 
      a#419#5#0, 
      a#419#6#0, 
      a#419#7#0, 
      a#419#8#0, 
      a#419#9#0, 
      a#419#10#0, 
      a#419#11#0, 
      a#419#12#0, 
      a#419#13#0, 
      a#419#14#0, 
      a#419#15#0, 
      a#419#16#0, 
      a#419#17#0) } 
  BoxRank(a#419#17#0)
     < DtRank(#_System._tuple#18._#Make18(a#419#0#0, 
        a#419#1#0, 
        a#419#2#0, 
        a#419#3#0, 
        a#419#4#0, 
        a#419#5#0, 
        a#419#6#0, 
        a#419#7#0, 
        a#419#8#0, 
        a#419#9#0, 
        a#419#10#0, 
        a#419#11#0, 
        a#419#12#0, 
        a#419#13#0, 
        a#419#14#0, 
        a#419#15#0, 
        a#419#16#0, 
        a#419#17#0)));

// Depth-one case-split function
function $IsA#_System.Tuple18(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple18(d) } 
  $IsA#_System.Tuple18(d) ==> _System.Tuple18.___hMake18_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#18$T0: Ty, 
    _System._tuple#18$T1: Ty, 
    _System._tuple#18$T2: Ty, 
    _System._tuple#18$T3: Ty, 
    _System._tuple#18$T4: Ty, 
    _System._tuple#18$T5: Ty, 
    _System._tuple#18$T6: Ty, 
    _System._tuple#18$T7: Ty, 
    _System._tuple#18$T8: Ty, 
    _System._tuple#18$T9: Ty, 
    _System._tuple#18$T10: Ty, 
    _System._tuple#18$T11: Ty, 
    _System._tuple#18$T12: Ty, 
    _System._tuple#18$T13: Ty, 
    _System._tuple#18$T14: Ty, 
    _System._tuple#18$T15: Ty, 
    _System._tuple#18$T16: Ty, 
    _System._tuple#18$T17: Ty, 
    d: DatatypeType :: 
  { _System.Tuple18.___hMake18_q(d), $Is(d, 
      Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17)) } 
  $Is(d, 
      Tclass._System.Tuple18(_System._tuple#18$T0, 
        _System._tuple#18$T1, 
        _System._tuple#18$T2, 
        _System._tuple#18$T3, 
        _System._tuple#18$T4, 
        _System._tuple#18$T5, 
        _System._tuple#18$T6, 
        _System._tuple#18$T7, 
        _System._tuple#18$T8, 
        _System._tuple#18$T9, 
        _System._tuple#18$T10, 
        _System._tuple#18$T11, 
        _System._tuple#18$T12, 
        _System._tuple#18$T13, 
        _System._tuple#18$T14, 
        _System._tuple#18$T15, 
        _System._tuple#18$T16, 
        _System._tuple#18$T17))
     ==> _System.Tuple18.___hMake18_q(d));

// Datatype extensional equality declaration
function _System.Tuple18#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#18._#Make18
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple18#Equal(a, b) } 
  _System.Tuple18#Equal(a, b)
     <==> _System.Tuple18._0(a) == _System.Tuple18._0(b)
       && _System.Tuple18._1(a) == _System.Tuple18._1(b)
       && _System.Tuple18._2(a) == _System.Tuple18._2(b)
       && _System.Tuple18._3(a) == _System.Tuple18._3(b)
       && _System.Tuple18._4(a) == _System.Tuple18._4(b)
       && _System.Tuple18._5(a) == _System.Tuple18._5(b)
       && _System.Tuple18._6(a) == _System.Tuple18._6(b)
       && _System.Tuple18._7(a) == _System.Tuple18._7(b)
       && _System.Tuple18._8(a) == _System.Tuple18._8(b)
       && _System.Tuple18._9(a) == _System.Tuple18._9(b)
       && _System.Tuple18._10(a) == _System.Tuple18._10(b)
       && _System.Tuple18._11(a) == _System.Tuple18._11(b)
       && _System.Tuple18._12(a) == _System.Tuple18._12(b)
       && _System.Tuple18._13(a) == _System.Tuple18._13(b)
       && _System.Tuple18._14(a) == _System.Tuple18._14(b)
       && _System.Tuple18._15(a) == _System.Tuple18._15(b)
       && _System.Tuple18._16(a) == _System.Tuple18._16(b)
       && _System.Tuple18._17(a) == _System.Tuple18._17(b));

// Datatype extensionality axiom: _System._tuple#18
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple18#Equal(a, b) } 
  _System.Tuple18#Equal(a, b) <==> a == b);

const unique class._System.Tuple18: ClassName;

// Constructor function declaration
function #_System._tuple#19._#Make19(Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : DatatypeType;

const unique ##_System._tuple#19._#Make19: DtCtorId
uses {
// Constructor identifier
axiom (forall a#420#0#0: Box, 
    a#420#1#0: Box, 
    a#420#2#0: Box, 
    a#420#3#0: Box, 
    a#420#4#0: Box, 
    a#420#5#0: Box, 
    a#420#6#0: Box, 
    a#420#7#0: Box, 
    a#420#8#0: Box, 
    a#420#9#0: Box, 
    a#420#10#0: Box, 
    a#420#11#0: Box, 
    a#420#12#0: Box, 
    a#420#13#0: Box, 
    a#420#14#0: Box, 
    a#420#15#0: Box, 
    a#420#16#0: Box, 
    a#420#17#0: Box, 
    a#420#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#420#0#0, 
      a#420#1#0, 
      a#420#2#0, 
      a#420#3#0, 
      a#420#4#0, 
      a#420#5#0, 
      a#420#6#0, 
      a#420#7#0, 
      a#420#8#0, 
      a#420#9#0, 
      a#420#10#0, 
      a#420#11#0, 
      a#420#12#0, 
      a#420#13#0, 
      a#420#14#0, 
      a#420#15#0, 
      a#420#16#0, 
      a#420#17#0, 
      a#420#18#0) } 
  DatatypeCtorId(#_System._tuple#19._#Make19(a#420#0#0, 
        a#420#1#0, 
        a#420#2#0, 
        a#420#3#0, 
        a#420#4#0, 
        a#420#5#0, 
        a#420#6#0, 
        a#420#7#0, 
        a#420#8#0, 
        a#420#9#0, 
        a#420#10#0, 
        a#420#11#0, 
        a#420#12#0, 
        a#420#13#0, 
        a#420#14#0, 
        a#420#15#0, 
        a#420#16#0, 
        a#420#17#0, 
        a#420#18#0))
     == ##_System._tuple#19._#Make19);
}

function _System.Tuple19.___hMake19_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple19.___hMake19_q(d) } 
  _System.Tuple19.___hMake19_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#19._#Make19);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple19.___hMake19_q(d) } 
  _System.Tuple19.___hMake19_q(d)
     ==> (exists a#421#0#0: Box, 
        a#421#1#0: Box, 
        a#421#2#0: Box, 
        a#421#3#0: Box, 
        a#421#4#0: Box, 
        a#421#5#0: Box, 
        a#421#6#0: Box, 
        a#421#7#0: Box, 
        a#421#8#0: Box, 
        a#421#9#0: Box, 
        a#421#10#0: Box, 
        a#421#11#0: Box, 
        a#421#12#0: Box, 
        a#421#13#0: Box, 
        a#421#14#0: Box, 
        a#421#15#0: Box, 
        a#421#16#0: Box, 
        a#421#17#0: Box, 
        a#421#18#0: Box :: 
      d
         == #_System._tuple#19._#Make19(a#421#0#0, 
          a#421#1#0, 
          a#421#2#0, 
          a#421#3#0, 
          a#421#4#0, 
          a#421#5#0, 
          a#421#6#0, 
          a#421#7#0, 
          a#421#8#0, 
          a#421#9#0, 
          a#421#10#0, 
          a#421#11#0, 
          a#421#12#0, 
          a#421#13#0, 
          a#421#14#0, 
          a#421#15#0, 
          a#421#16#0, 
          a#421#17#0, 
          a#421#18#0)));

function Tclass._System.Tuple19(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.Tuple19: TyTag;

// Tclass._System.Tuple19 Tag
axiom (forall _System._tuple#19$T0: Ty, 
    _System._tuple#19$T1: Ty, 
    _System._tuple#19$T2: Ty, 
    _System._tuple#19$T3: Ty, 
    _System._tuple#19$T4: Ty, 
    _System._tuple#19$T5: Ty, 
    _System._tuple#19$T6: Ty, 
    _System._tuple#19$T7: Ty, 
    _System._tuple#19$T8: Ty, 
    _System._tuple#19$T9: Ty, 
    _System._tuple#19$T10: Ty, 
    _System._tuple#19$T11: Ty, 
    _System._tuple#19$T12: Ty, 
    _System._tuple#19$T13: Ty, 
    _System._tuple#19$T14: Ty, 
    _System._tuple#19$T15: Ty, 
    _System._tuple#19$T16: Ty, 
    _System._tuple#19$T17: Ty, 
    _System._tuple#19$T18: Ty :: 
  { Tclass._System.Tuple19(_System._tuple#19$T0, 
      _System._tuple#19$T1, 
      _System._tuple#19$T2, 
      _System._tuple#19$T3, 
      _System._tuple#19$T4, 
      _System._tuple#19$T5, 
      _System._tuple#19$T6, 
      _System._tuple#19$T7, 
      _System._tuple#19$T8, 
      _System._tuple#19$T9, 
      _System._tuple#19$T10, 
      _System._tuple#19$T11, 
      _System._tuple#19$T12, 
      _System._tuple#19$T13, 
      _System._tuple#19$T14, 
      _System._tuple#19$T15, 
      _System._tuple#19$T16, 
      _System._tuple#19$T17, 
      _System._tuple#19$T18) } 
  Tag(Tclass._System.Tuple19(_System._tuple#19$T0, 
          _System._tuple#19$T1, 
          _System._tuple#19$T2, 
          _System._tuple#19$T3, 
          _System._tuple#19$T4, 
          _System._tuple#19$T5, 
          _System._tuple#19$T6, 
          _System._tuple#19$T7, 
          _System._tuple#19$T8, 
          _System._tuple#19$T9, 
          _System._tuple#19$T10, 
          _System._tuple#19$T11, 
          _System._tuple#19$T12, 
          _System._tuple#19$T13, 
          _System._tuple#19$T14, 
          _System._tuple#19$T15, 
          _System._tuple#19$T16, 
          _System._tuple#19$T17, 
          _System._tuple#19$T18))
       == Tagclass._System.Tuple19
     && TagFamily(Tclass._System.Tuple19(_System._tuple#19$T0, 
          _System._tuple#19$T1, 
          _System._tuple#19$T2, 
          _System._tuple#19$T3, 
          _System._tuple#19$T4, 
          _System._tuple#19$T5, 
          _System._tuple#19$T6, 
          _System._tuple#19$T7, 
          _System._tuple#19$T8, 
          _System._tuple#19$T9, 
          _System._tuple#19$T10, 
          _System._tuple#19$T11, 
          _System._tuple#19$T12, 
          _System._tuple#19$T13, 
          _System._tuple#19$T14, 
          _System._tuple#19$T15, 
          _System._tuple#19$T16, 
          _System._tuple#19$T17, 
          _System._tuple#19$T18))
       == tytagFamily$_tuple#19);

function Tclass._System.Tuple19_0(Ty) : Ty;

// Tclass._System.Tuple19 injectivity 0
axiom (forall _System._tuple#19$T0: Ty, 
    _System._tuple#19$T1: Ty, 
    _System._tuple#19$T2: Ty, 
    _System._tuple#19$T3: Ty, 
    _System._tuple#19$T4: Ty, 
    _System._tuple#19$T5: Ty, 
    _System._tuple#19$T6: Ty, 
    _System._tuple#19$T7: Ty, 
    _System._tuple#19$T8: Ty, 
    _System._tuple#19$T9: Ty, 
    _System._tuple#19$T10: Ty, 
    _System._tuple#19$T11: Ty, 
    _System._tuple#19$T12: Ty, 
    _System._tuple#19$T13: Ty, 
    _System._tuple#19$T14: Ty, 
    _System._tuple#19$T15: Ty, 
    _System._tuple#19$T16: Ty, 
    _System._tuple#19$T17: Ty, 
    _System._tuple#19$T18: Ty :: 
  { Tclass._System.Tuple19(_System._tuple#19$T0, 
      _System._tuple#19$T1, 
      _System._tuple#19$T2, 
      _System._tuple#19$T3, 
      _System._tuple#19$T4, 
      _System._tuple#19$T5, 
      _System._tuple#19$T6, 
      _System._tuple#19$T7, 
      _System._tuple#19$T8, 
      _System._tuple#19$T9, 
      _System._tuple#19$T10, 
      _System._tuple#19$T11, 
      _System._tuple#19$T12, 
      _System._tuple#19$T13, 
      _System._tuple#19$T14, 
      _System._tuple#19$T15, 
      _System._tuple#19$T16, 
      _System._tuple#19$T17, 
      _System._tuple#19$T18) } 
  Tclass._System.Tuple19_0(Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18))
     == _System._tuple#19$T0);

function Tclass._System.Tuple19_1(Ty) : Ty;

// Tclass._System.Tuple19 injectivity 1
axiom (forall _System._tuple#19$T0: Ty, 
    _System._tuple#19$T1: Ty, 
    _System._tuple#19$T2: Ty, 
    _System._tuple#19$T3: Ty, 
    _System._tuple#19$T4: Ty, 
    _System._tuple#19$T5: Ty, 
    _System._tuple#19$T6: Ty, 
    _System._tuple#19$T7: Ty, 
    _System._tuple#19$T8: Ty, 
    _System._tuple#19$T9: Ty, 
    _System._tuple#19$T10: Ty, 
    _System._tuple#19$T11: Ty, 
    _System._tuple#19$T12: Ty, 
    _System._tuple#19$T13: Ty, 
    _System._tuple#19$T14: Ty, 
    _System._tuple#19$T15: Ty, 
    _System._tuple#19$T16: Ty, 
    _System._tuple#19$T17: Ty, 
    _System._tuple#19$T18: Ty :: 
  { Tclass._System.Tuple19(_System._tuple#19$T0, 
      _System._tuple#19$T1, 
      _System._tuple#19$T2, 
      _System._tuple#19$T3, 
      _System._tuple#19$T4, 
      _System._tuple#19$T5, 
      _System._tuple#19$T6, 
      _System._tuple#19$T7, 
      _System._tuple#19$T8, 
      _System._tuple#19$T9, 
      _System._tuple#19$T10, 
      _System._tuple#19$T11, 
      _System._tuple#19$T12, 
      _System._tuple#19$T13, 
      _System._tuple#19$T14, 
      _System._tuple#19$T15, 
      _System._tuple#19$T16, 
      _System._tuple#19$T17, 
      _System._tuple#19$T18) } 
  Tclass._System.Tuple19_1(Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18))
     == _System._tuple#19$T1);

function Tclass._System.Tuple19_2(Ty) : Ty;

// Tclass._System.Tuple19 injectivity 2
axiom (forall _System._tuple#19$T0: Ty, 
    _System._tuple#19$T1: Ty, 
    _System._tuple#19$T2: Ty, 
    _System._tuple#19$T3: Ty, 
    _System._tuple#19$T4: Ty, 
    _System._tuple#19$T5: Ty, 
    _System._tuple#19$T6: Ty, 
    _System._tuple#19$T7: Ty, 
    _System._tuple#19$T8: Ty, 
    _System._tuple#19$T9: Ty, 
    _System._tuple#19$T10: Ty, 
    _System._tuple#19$T11: Ty, 
    _System._tuple#19$T12: Ty, 
    _System._tuple#19$T13: Ty, 
    _System._tuple#19$T14: Ty, 
    _System._tuple#19$T15: Ty, 
    _System._tuple#19$T16: Ty, 
    _System._tuple#19$T17: Ty, 
    _System._tuple#19$T18: Ty :: 
  { Tclass._System.Tuple19(_System._tuple#19$T0, 
      _System._tuple#19$T1, 
      _System._tuple#19$T2, 
      _System._tuple#19$T3, 
      _System._tuple#19$T4, 
      _System._tuple#19$T5, 
      _System._tuple#19$T6, 
      _System._tuple#19$T7, 
      _System._tuple#19$T8, 
      _System._tuple#19$T9, 
      _System._tuple#19$T10, 
      _System._tuple#19$T11, 
      _System._tuple#19$T12, 
      _System._tuple#19$T13, 
      _System._tuple#19$T14, 
      _System._tuple#19$T15, 
      _System._tuple#19$T16, 
      _System._tuple#19$T17, 
      _System._tuple#19$T18) } 
  Tclass._System.Tuple19_2(Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18))
     == _System._tuple#19$T2);

function Tclass._System.Tuple19_3(Ty) : Ty;

// Tclass._System.Tuple19 injectivity 3
axiom (forall _System._tuple#19$T0: Ty, 
    _System._tuple#19$T1: Ty, 
    _System._tuple#19$T2: Ty, 
    _System._tuple#19$T3: Ty, 
    _System._tuple#19$T4: Ty, 
    _System._tuple#19$T5: Ty, 
    _System._tuple#19$T6: Ty, 
    _System._tuple#19$T7: Ty, 
    _System._tuple#19$T8: Ty, 
    _System._tuple#19$T9: Ty, 
    _System._tuple#19$T10: Ty, 
    _System._tuple#19$T11: Ty, 
    _System._tuple#19$T12: Ty, 
    _System._tuple#19$T13: Ty, 
    _System._tuple#19$T14: Ty, 
    _System._tuple#19$T15: Ty, 
    _System._tuple#19$T16: Ty, 
    _System._tuple#19$T17: Ty, 
    _System._tuple#19$T18: Ty :: 
  { Tclass._System.Tuple19(_System._tuple#19$T0, 
      _System._tuple#19$T1, 
      _System._tuple#19$T2, 
      _System._tuple#19$T3, 
      _System._tuple#19$T4, 
      _System._tuple#19$T5, 
      _System._tuple#19$T6, 
      _System._tuple#19$T7, 
      _System._tuple#19$T8, 
      _System._tuple#19$T9, 
      _System._tuple#19$T10, 
      _System._tuple#19$T11, 
      _System._tuple#19$T12, 
      _System._tuple#19$T13, 
      _System._tuple#19$T14, 
      _System._tuple#19$T15, 
      _System._tuple#19$T16, 
      _System._tuple#19$T17, 
      _System._tuple#19$T18) } 
  Tclass._System.Tuple19_3(Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18))
     == _System._tuple#19$T3);

function Tclass._System.Tuple19_4(Ty) : Ty;

// Tclass._System.Tuple19 injectivity 4
axiom (forall _System._tuple#19$T0: Ty, 
    _System._tuple#19$T1: Ty, 
    _System._tuple#19$T2: Ty, 
    _System._tuple#19$T3: Ty, 
    _System._tuple#19$T4: Ty, 
    _System._tuple#19$T5: Ty, 
    _System._tuple#19$T6: Ty, 
    _System._tuple#19$T7: Ty, 
    _System._tuple#19$T8: Ty, 
    _System._tuple#19$T9: Ty, 
    _System._tuple#19$T10: Ty, 
    _System._tuple#19$T11: Ty, 
    _System._tuple#19$T12: Ty, 
    _System._tuple#19$T13: Ty, 
    _System._tuple#19$T14: Ty, 
    _System._tuple#19$T15: Ty, 
    _System._tuple#19$T16: Ty, 
    _System._tuple#19$T17: Ty, 
    _System._tuple#19$T18: Ty :: 
  { Tclass._System.Tuple19(_System._tuple#19$T0, 
      _System._tuple#19$T1, 
      _System._tuple#19$T2, 
      _System._tuple#19$T3, 
      _System._tuple#19$T4, 
      _System._tuple#19$T5, 
      _System._tuple#19$T6, 
      _System._tuple#19$T7, 
      _System._tuple#19$T8, 
      _System._tuple#19$T9, 
      _System._tuple#19$T10, 
      _System._tuple#19$T11, 
      _System._tuple#19$T12, 
      _System._tuple#19$T13, 
      _System._tuple#19$T14, 
      _System._tuple#19$T15, 
      _System._tuple#19$T16, 
      _System._tuple#19$T17, 
      _System._tuple#19$T18) } 
  Tclass._System.Tuple19_4(Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18))
     == _System._tuple#19$T4);

function Tclass._System.Tuple19_5(Ty) : Ty;

// Tclass._System.Tuple19 injectivity 5
axiom (forall _System._tuple#19$T0: Ty, 
    _System._tuple#19$T1: Ty, 
    _System._tuple#19$T2: Ty, 
    _System._tuple#19$T3: Ty, 
    _System._tuple#19$T4: Ty, 
    _System._tuple#19$T5: Ty, 
    _System._tuple#19$T6: Ty, 
    _System._tuple#19$T7: Ty, 
    _System._tuple#19$T8: Ty, 
    _System._tuple#19$T9: Ty, 
    _System._tuple#19$T10: Ty, 
    _System._tuple#19$T11: Ty, 
    _System._tuple#19$T12: Ty, 
    _System._tuple#19$T13: Ty, 
    _System._tuple#19$T14: Ty, 
    _System._tuple#19$T15: Ty, 
    _System._tuple#19$T16: Ty, 
    _System._tuple#19$T17: Ty, 
    _System._tuple#19$T18: Ty :: 
  { Tclass._System.Tuple19(_System._tuple#19$T0, 
      _System._tuple#19$T1, 
      _System._tuple#19$T2, 
      _System._tuple#19$T3, 
      _System._tuple#19$T4, 
      _System._tuple#19$T5, 
      _System._tuple#19$T6, 
      _System._tuple#19$T7, 
      _System._tuple#19$T8, 
      _System._tuple#19$T9, 
      _System._tuple#19$T10, 
      _System._tuple#19$T11, 
      _System._tuple#19$T12, 
      _System._tuple#19$T13, 
      _System._tuple#19$T14, 
      _System._tuple#19$T15, 
      _System._tuple#19$T16, 
      _System._tuple#19$T17, 
      _System._tuple#19$T18) } 
  Tclass._System.Tuple19_5(Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18))
     == _System._tuple#19$T5);

function Tclass._System.Tuple19_6(Ty) : Ty;

// Tclass._System.Tuple19 injectivity 6
axiom (forall _System._tuple#19$T0: Ty, 
    _System._tuple#19$T1: Ty, 
    _System._tuple#19$T2: Ty, 
    _System._tuple#19$T3: Ty, 
    _System._tuple#19$T4: Ty, 
    _System._tuple#19$T5: Ty, 
    _System._tuple#19$T6: Ty, 
    _System._tuple#19$T7: Ty, 
    _System._tuple#19$T8: Ty, 
    _System._tuple#19$T9: Ty, 
    _System._tuple#19$T10: Ty, 
    _System._tuple#19$T11: Ty, 
    _System._tuple#19$T12: Ty, 
    _System._tuple#19$T13: Ty, 
    _System._tuple#19$T14: Ty, 
    _System._tuple#19$T15: Ty, 
    _System._tuple#19$T16: Ty, 
    _System._tuple#19$T17: Ty, 
    _System._tuple#19$T18: Ty :: 
  { Tclass._System.Tuple19(_System._tuple#19$T0, 
      _System._tuple#19$T1, 
      _System._tuple#19$T2, 
      _System._tuple#19$T3, 
      _System._tuple#19$T4, 
      _System._tuple#19$T5, 
      _System._tuple#19$T6, 
      _System._tuple#19$T7, 
      _System._tuple#19$T8, 
      _System._tuple#19$T9, 
      _System._tuple#19$T10, 
      _System._tuple#19$T11, 
      _System._tuple#19$T12, 
      _System._tuple#19$T13, 
      _System._tuple#19$T14, 
      _System._tuple#19$T15, 
      _System._tuple#19$T16, 
      _System._tuple#19$T17, 
      _System._tuple#19$T18) } 
  Tclass._System.Tuple19_6(Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18))
     == _System._tuple#19$T6);

function Tclass._System.Tuple19_7(Ty) : Ty;

// Tclass._System.Tuple19 injectivity 7
axiom (forall _System._tuple#19$T0: Ty, 
    _System._tuple#19$T1: Ty, 
    _System._tuple#19$T2: Ty, 
    _System._tuple#19$T3: Ty, 
    _System._tuple#19$T4: Ty, 
    _System._tuple#19$T5: Ty, 
    _System._tuple#19$T6: Ty, 
    _System._tuple#19$T7: Ty, 
    _System._tuple#19$T8: Ty, 
    _System._tuple#19$T9: Ty, 
    _System._tuple#19$T10: Ty, 
    _System._tuple#19$T11: Ty, 
    _System._tuple#19$T12: Ty, 
    _System._tuple#19$T13: Ty, 
    _System._tuple#19$T14: Ty, 
    _System._tuple#19$T15: Ty, 
    _System._tuple#19$T16: Ty, 
    _System._tuple#19$T17: Ty, 
    _System._tuple#19$T18: Ty :: 
  { Tclass._System.Tuple19(_System._tuple#19$T0, 
      _System._tuple#19$T1, 
      _System._tuple#19$T2, 
      _System._tuple#19$T3, 
      _System._tuple#19$T4, 
      _System._tuple#19$T5, 
      _System._tuple#19$T6, 
      _System._tuple#19$T7, 
      _System._tuple#19$T8, 
      _System._tuple#19$T9, 
      _System._tuple#19$T10, 
      _System._tuple#19$T11, 
      _System._tuple#19$T12, 
      _System._tuple#19$T13, 
      _System._tuple#19$T14, 
      _System._tuple#19$T15, 
      _System._tuple#19$T16, 
      _System._tuple#19$T17, 
      _System._tuple#19$T18) } 
  Tclass._System.Tuple19_7(Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18))
     == _System._tuple#19$T7);

function Tclass._System.Tuple19_8(Ty) : Ty;

// Tclass._System.Tuple19 injectivity 8
axiom (forall _System._tuple#19$T0: Ty, 
    _System._tuple#19$T1: Ty, 
    _System._tuple#19$T2: Ty, 
    _System._tuple#19$T3: Ty, 
    _System._tuple#19$T4: Ty, 
    _System._tuple#19$T5: Ty, 
    _System._tuple#19$T6: Ty, 
    _System._tuple#19$T7: Ty, 
    _System._tuple#19$T8: Ty, 
    _System._tuple#19$T9: Ty, 
    _System._tuple#19$T10: Ty, 
    _System._tuple#19$T11: Ty, 
    _System._tuple#19$T12: Ty, 
    _System._tuple#19$T13: Ty, 
    _System._tuple#19$T14: Ty, 
    _System._tuple#19$T15: Ty, 
    _System._tuple#19$T16: Ty, 
    _System._tuple#19$T17: Ty, 
    _System._tuple#19$T18: Ty :: 
  { Tclass._System.Tuple19(_System._tuple#19$T0, 
      _System._tuple#19$T1, 
      _System._tuple#19$T2, 
      _System._tuple#19$T3, 
      _System._tuple#19$T4, 
      _System._tuple#19$T5, 
      _System._tuple#19$T6, 
      _System._tuple#19$T7, 
      _System._tuple#19$T8, 
      _System._tuple#19$T9, 
      _System._tuple#19$T10, 
      _System._tuple#19$T11, 
      _System._tuple#19$T12, 
      _System._tuple#19$T13, 
      _System._tuple#19$T14, 
      _System._tuple#19$T15, 
      _System._tuple#19$T16, 
      _System._tuple#19$T17, 
      _System._tuple#19$T18) } 
  Tclass._System.Tuple19_8(Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18))
     == _System._tuple#19$T8);

function Tclass._System.Tuple19_9(Ty) : Ty;

// Tclass._System.Tuple19 injectivity 9
axiom (forall _System._tuple#19$T0: Ty, 
    _System._tuple#19$T1: Ty, 
    _System._tuple#19$T2: Ty, 
    _System._tuple#19$T3: Ty, 
    _System._tuple#19$T4: Ty, 
    _System._tuple#19$T5: Ty, 
    _System._tuple#19$T6: Ty, 
    _System._tuple#19$T7: Ty, 
    _System._tuple#19$T8: Ty, 
    _System._tuple#19$T9: Ty, 
    _System._tuple#19$T10: Ty, 
    _System._tuple#19$T11: Ty, 
    _System._tuple#19$T12: Ty, 
    _System._tuple#19$T13: Ty, 
    _System._tuple#19$T14: Ty, 
    _System._tuple#19$T15: Ty, 
    _System._tuple#19$T16: Ty, 
    _System._tuple#19$T17: Ty, 
    _System._tuple#19$T18: Ty :: 
  { Tclass._System.Tuple19(_System._tuple#19$T0, 
      _System._tuple#19$T1, 
      _System._tuple#19$T2, 
      _System._tuple#19$T3, 
      _System._tuple#19$T4, 
      _System._tuple#19$T5, 
      _System._tuple#19$T6, 
      _System._tuple#19$T7, 
      _System._tuple#19$T8, 
      _System._tuple#19$T9, 
      _System._tuple#19$T10, 
      _System._tuple#19$T11, 
      _System._tuple#19$T12, 
      _System._tuple#19$T13, 
      _System._tuple#19$T14, 
      _System._tuple#19$T15, 
      _System._tuple#19$T16, 
      _System._tuple#19$T17, 
      _System._tuple#19$T18) } 
  Tclass._System.Tuple19_9(Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18))
     == _System._tuple#19$T9);

function Tclass._System.Tuple19_10(Ty) : Ty;

// Tclass._System.Tuple19 injectivity 10
axiom (forall _System._tuple#19$T0: Ty, 
    _System._tuple#19$T1: Ty, 
    _System._tuple#19$T2: Ty, 
    _System._tuple#19$T3: Ty, 
    _System._tuple#19$T4: Ty, 
    _System._tuple#19$T5: Ty, 
    _System._tuple#19$T6: Ty, 
    _System._tuple#19$T7: Ty, 
    _System._tuple#19$T8: Ty, 
    _System._tuple#19$T9: Ty, 
    _System._tuple#19$T10: Ty, 
    _System._tuple#19$T11: Ty, 
    _System._tuple#19$T12: Ty, 
    _System._tuple#19$T13: Ty, 
    _System._tuple#19$T14: Ty, 
    _System._tuple#19$T15: Ty, 
    _System._tuple#19$T16: Ty, 
    _System._tuple#19$T17: Ty, 
    _System._tuple#19$T18: Ty :: 
  { Tclass._System.Tuple19(_System._tuple#19$T0, 
      _System._tuple#19$T1, 
      _System._tuple#19$T2, 
      _System._tuple#19$T3, 
      _System._tuple#19$T4, 
      _System._tuple#19$T5, 
      _System._tuple#19$T6, 
      _System._tuple#19$T7, 
      _System._tuple#19$T8, 
      _System._tuple#19$T9, 
      _System._tuple#19$T10, 
      _System._tuple#19$T11, 
      _System._tuple#19$T12, 
      _System._tuple#19$T13, 
      _System._tuple#19$T14, 
      _System._tuple#19$T15, 
      _System._tuple#19$T16, 
      _System._tuple#19$T17, 
      _System._tuple#19$T18) } 
  Tclass._System.Tuple19_10(Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18))
     == _System._tuple#19$T10);

function Tclass._System.Tuple19_11(Ty) : Ty;

// Tclass._System.Tuple19 injectivity 11
axiom (forall _System._tuple#19$T0: Ty, 
    _System._tuple#19$T1: Ty, 
    _System._tuple#19$T2: Ty, 
    _System._tuple#19$T3: Ty, 
    _System._tuple#19$T4: Ty, 
    _System._tuple#19$T5: Ty, 
    _System._tuple#19$T6: Ty, 
    _System._tuple#19$T7: Ty, 
    _System._tuple#19$T8: Ty, 
    _System._tuple#19$T9: Ty, 
    _System._tuple#19$T10: Ty, 
    _System._tuple#19$T11: Ty, 
    _System._tuple#19$T12: Ty, 
    _System._tuple#19$T13: Ty, 
    _System._tuple#19$T14: Ty, 
    _System._tuple#19$T15: Ty, 
    _System._tuple#19$T16: Ty, 
    _System._tuple#19$T17: Ty, 
    _System._tuple#19$T18: Ty :: 
  { Tclass._System.Tuple19(_System._tuple#19$T0, 
      _System._tuple#19$T1, 
      _System._tuple#19$T2, 
      _System._tuple#19$T3, 
      _System._tuple#19$T4, 
      _System._tuple#19$T5, 
      _System._tuple#19$T6, 
      _System._tuple#19$T7, 
      _System._tuple#19$T8, 
      _System._tuple#19$T9, 
      _System._tuple#19$T10, 
      _System._tuple#19$T11, 
      _System._tuple#19$T12, 
      _System._tuple#19$T13, 
      _System._tuple#19$T14, 
      _System._tuple#19$T15, 
      _System._tuple#19$T16, 
      _System._tuple#19$T17, 
      _System._tuple#19$T18) } 
  Tclass._System.Tuple19_11(Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18))
     == _System._tuple#19$T11);

function Tclass._System.Tuple19_12(Ty) : Ty;

// Tclass._System.Tuple19 injectivity 12
axiom (forall _System._tuple#19$T0: Ty, 
    _System._tuple#19$T1: Ty, 
    _System._tuple#19$T2: Ty, 
    _System._tuple#19$T3: Ty, 
    _System._tuple#19$T4: Ty, 
    _System._tuple#19$T5: Ty, 
    _System._tuple#19$T6: Ty, 
    _System._tuple#19$T7: Ty, 
    _System._tuple#19$T8: Ty, 
    _System._tuple#19$T9: Ty, 
    _System._tuple#19$T10: Ty, 
    _System._tuple#19$T11: Ty, 
    _System._tuple#19$T12: Ty, 
    _System._tuple#19$T13: Ty, 
    _System._tuple#19$T14: Ty, 
    _System._tuple#19$T15: Ty, 
    _System._tuple#19$T16: Ty, 
    _System._tuple#19$T17: Ty, 
    _System._tuple#19$T18: Ty :: 
  { Tclass._System.Tuple19(_System._tuple#19$T0, 
      _System._tuple#19$T1, 
      _System._tuple#19$T2, 
      _System._tuple#19$T3, 
      _System._tuple#19$T4, 
      _System._tuple#19$T5, 
      _System._tuple#19$T6, 
      _System._tuple#19$T7, 
      _System._tuple#19$T8, 
      _System._tuple#19$T9, 
      _System._tuple#19$T10, 
      _System._tuple#19$T11, 
      _System._tuple#19$T12, 
      _System._tuple#19$T13, 
      _System._tuple#19$T14, 
      _System._tuple#19$T15, 
      _System._tuple#19$T16, 
      _System._tuple#19$T17, 
      _System._tuple#19$T18) } 
  Tclass._System.Tuple19_12(Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18))
     == _System._tuple#19$T12);

function Tclass._System.Tuple19_13(Ty) : Ty;

// Tclass._System.Tuple19 injectivity 13
axiom (forall _System._tuple#19$T0: Ty, 
    _System._tuple#19$T1: Ty, 
    _System._tuple#19$T2: Ty, 
    _System._tuple#19$T3: Ty, 
    _System._tuple#19$T4: Ty, 
    _System._tuple#19$T5: Ty, 
    _System._tuple#19$T6: Ty, 
    _System._tuple#19$T7: Ty, 
    _System._tuple#19$T8: Ty, 
    _System._tuple#19$T9: Ty, 
    _System._tuple#19$T10: Ty, 
    _System._tuple#19$T11: Ty, 
    _System._tuple#19$T12: Ty, 
    _System._tuple#19$T13: Ty, 
    _System._tuple#19$T14: Ty, 
    _System._tuple#19$T15: Ty, 
    _System._tuple#19$T16: Ty, 
    _System._tuple#19$T17: Ty, 
    _System._tuple#19$T18: Ty :: 
  { Tclass._System.Tuple19(_System._tuple#19$T0, 
      _System._tuple#19$T1, 
      _System._tuple#19$T2, 
      _System._tuple#19$T3, 
      _System._tuple#19$T4, 
      _System._tuple#19$T5, 
      _System._tuple#19$T6, 
      _System._tuple#19$T7, 
      _System._tuple#19$T8, 
      _System._tuple#19$T9, 
      _System._tuple#19$T10, 
      _System._tuple#19$T11, 
      _System._tuple#19$T12, 
      _System._tuple#19$T13, 
      _System._tuple#19$T14, 
      _System._tuple#19$T15, 
      _System._tuple#19$T16, 
      _System._tuple#19$T17, 
      _System._tuple#19$T18) } 
  Tclass._System.Tuple19_13(Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18))
     == _System._tuple#19$T13);

function Tclass._System.Tuple19_14(Ty) : Ty;

// Tclass._System.Tuple19 injectivity 14
axiom (forall _System._tuple#19$T0: Ty, 
    _System._tuple#19$T1: Ty, 
    _System._tuple#19$T2: Ty, 
    _System._tuple#19$T3: Ty, 
    _System._tuple#19$T4: Ty, 
    _System._tuple#19$T5: Ty, 
    _System._tuple#19$T6: Ty, 
    _System._tuple#19$T7: Ty, 
    _System._tuple#19$T8: Ty, 
    _System._tuple#19$T9: Ty, 
    _System._tuple#19$T10: Ty, 
    _System._tuple#19$T11: Ty, 
    _System._tuple#19$T12: Ty, 
    _System._tuple#19$T13: Ty, 
    _System._tuple#19$T14: Ty, 
    _System._tuple#19$T15: Ty, 
    _System._tuple#19$T16: Ty, 
    _System._tuple#19$T17: Ty, 
    _System._tuple#19$T18: Ty :: 
  { Tclass._System.Tuple19(_System._tuple#19$T0, 
      _System._tuple#19$T1, 
      _System._tuple#19$T2, 
      _System._tuple#19$T3, 
      _System._tuple#19$T4, 
      _System._tuple#19$T5, 
      _System._tuple#19$T6, 
      _System._tuple#19$T7, 
      _System._tuple#19$T8, 
      _System._tuple#19$T9, 
      _System._tuple#19$T10, 
      _System._tuple#19$T11, 
      _System._tuple#19$T12, 
      _System._tuple#19$T13, 
      _System._tuple#19$T14, 
      _System._tuple#19$T15, 
      _System._tuple#19$T16, 
      _System._tuple#19$T17, 
      _System._tuple#19$T18) } 
  Tclass._System.Tuple19_14(Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18))
     == _System._tuple#19$T14);

function Tclass._System.Tuple19_15(Ty) : Ty;

// Tclass._System.Tuple19 injectivity 15
axiom (forall _System._tuple#19$T0: Ty, 
    _System._tuple#19$T1: Ty, 
    _System._tuple#19$T2: Ty, 
    _System._tuple#19$T3: Ty, 
    _System._tuple#19$T4: Ty, 
    _System._tuple#19$T5: Ty, 
    _System._tuple#19$T6: Ty, 
    _System._tuple#19$T7: Ty, 
    _System._tuple#19$T8: Ty, 
    _System._tuple#19$T9: Ty, 
    _System._tuple#19$T10: Ty, 
    _System._tuple#19$T11: Ty, 
    _System._tuple#19$T12: Ty, 
    _System._tuple#19$T13: Ty, 
    _System._tuple#19$T14: Ty, 
    _System._tuple#19$T15: Ty, 
    _System._tuple#19$T16: Ty, 
    _System._tuple#19$T17: Ty, 
    _System._tuple#19$T18: Ty :: 
  { Tclass._System.Tuple19(_System._tuple#19$T0, 
      _System._tuple#19$T1, 
      _System._tuple#19$T2, 
      _System._tuple#19$T3, 
      _System._tuple#19$T4, 
      _System._tuple#19$T5, 
      _System._tuple#19$T6, 
      _System._tuple#19$T7, 
      _System._tuple#19$T8, 
      _System._tuple#19$T9, 
      _System._tuple#19$T10, 
      _System._tuple#19$T11, 
      _System._tuple#19$T12, 
      _System._tuple#19$T13, 
      _System._tuple#19$T14, 
      _System._tuple#19$T15, 
      _System._tuple#19$T16, 
      _System._tuple#19$T17, 
      _System._tuple#19$T18) } 
  Tclass._System.Tuple19_15(Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18))
     == _System._tuple#19$T15);

function Tclass._System.Tuple19_16(Ty) : Ty;

// Tclass._System.Tuple19 injectivity 16
axiom (forall _System._tuple#19$T0: Ty, 
    _System._tuple#19$T1: Ty, 
    _System._tuple#19$T2: Ty, 
    _System._tuple#19$T3: Ty, 
    _System._tuple#19$T4: Ty, 
    _System._tuple#19$T5: Ty, 
    _System._tuple#19$T6: Ty, 
    _System._tuple#19$T7: Ty, 
    _System._tuple#19$T8: Ty, 
    _System._tuple#19$T9: Ty, 
    _System._tuple#19$T10: Ty, 
    _System._tuple#19$T11: Ty, 
    _System._tuple#19$T12: Ty, 
    _System._tuple#19$T13: Ty, 
    _System._tuple#19$T14: Ty, 
    _System._tuple#19$T15: Ty, 
    _System._tuple#19$T16: Ty, 
    _System._tuple#19$T17: Ty, 
    _System._tuple#19$T18: Ty :: 
  { Tclass._System.Tuple19(_System._tuple#19$T0, 
      _System._tuple#19$T1, 
      _System._tuple#19$T2, 
      _System._tuple#19$T3, 
      _System._tuple#19$T4, 
      _System._tuple#19$T5, 
      _System._tuple#19$T6, 
      _System._tuple#19$T7, 
      _System._tuple#19$T8, 
      _System._tuple#19$T9, 
      _System._tuple#19$T10, 
      _System._tuple#19$T11, 
      _System._tuple#19$T12, 
      _System._tuple#19$T13, 
      _System._tuple#19$T14, 
      _System._tuple#19$T15, 
      _System._tuple#19$T16, 
      _System._tuple#19$T17, 
      _System._tuple#19$T18) } 
  Tclass._System.Tuple19_16(Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18))
     == _System._tuple#19$T16);

function Tclass._System.Tuple19_17(Ty) : Ty;

// Tclass._System.Tuple19 injectivity 17
axiom (forall _System._tuple#19$T0: Ty, 
    _System._tuple#19$T1: Ty, 
    _System._tuple#19$T2: Ty, 
    _System._tuple#19$T3: Ty, 
    _System._tuple#19$T4: Ty, 
    _System._tuple#19$T5: Ty, 
    _System._tuple#19$T6: Ty, 
    _System._tuple#19$T7: Ty, 
    _System._tuple#19$T8: Ty, 
    _System._tuple#19$T9: Ty, 
    _System._tuple#19$T10: Ty, 
    _System._tuple#19$T11: Ty, 
    _System._tuple#19$T12: Ty, 
    _System._tuple#19$T13: Ty, 
    _System._tuple#19$T14: Ty, 
    _System._tuple#19$T15: Ty, 
    _System._tuple#19$T16: Ty, 
    _System._tuple#19$T17: Ty, 
    _System._tuple#19$T18: Ty :: 
  { Tclass._System.Tuple19(_System._tuple#19$T0, 
      _System._tuple#19$T1, 
      _System._tuple#19$T2, 
      _System._tuple#19$T3, 
      _System._tuple#19$T4, 
      _System._tuple#19$T5, 
      _System._tuple#19$T6, 
      _System._tuple#19$T7, 
      _System._tuple#19$T8, 
      _System._tuple#19$T9, 
      _System._tuple#19$T10, 
      _System._tuple#19$T11, 
      _System._tuple#19$T12, 
      _System._tuple#19$T13, 
      _System._tuple#19$T14, 
      _System._tuple#19$T15, 
      _System._tuple#19$T16, 
      _System._tuple#19$T17, 
      _System._tuple#19$T18) } 
  Tclass._System.Tuple19_17(Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18))
     == _System._tuple#19$T17);

function Tclass._System.Tuple19_18(Ty) : Ty;

// Tclass._System.Tuple19 injectivity 18
axiom (forall _System._tuple#19$T0: Ty, 
    _System._tuple#19$T1: Ty, 
    _System._tuple#19$T2: Ty, 
    _System._tuple#19$T3: Ty, 
    _System._tuple#19$T4: Ty, 
    _System._tuple#19$T5: Ty, 
    _System._tuple#19$T6: Ty, 
    _System._tuple#19$T7: Ty, 
    _System._tuple#19$T8: Ty, 
    _System._tuple#19$T9: Ty, 
    _System._tuple#19$T10: Ty, 
    _System._tuple#19$T11: Ty, 
    _System._tuple#19$T12: Ty, 
    _System._tuple#19$T13: Ty, 
    _System._tuple#19$T14: Ty, 
    _System._tuple#19$T15: Ty, 
    _System._tuple#19$T16: Ty, 
    _System._tuple#19$T17: Ty, 
    _System._tuple#19$T18: Ty :: 
  { Tclass._System.Tuple19(_System._tuple#19$T0, 
      _System._tuple#19$T1, 
      _System._tuple#19$T2, 
      _System._tuple#19$T3, 
      _System._tuple#19$T4, 
      _System._tuple#19$T5, 
      _System._tuple#19$T6, 
      _System._tuple#19$T7, 
      _System._tuple#19$T8, 
      _System._tuple#19$T9, 
      _System._tuple#19$T10, 
      _System._tuple#19$T11, 
      _System._tuple#19$T12, 
      _System._tuple#19$T13, 
      _System._tuple#19$T14, 
      _System._tuple#19$T15, 
      _System._tuple#19$T16, 
      _System._tuple#19$T17, 
      _System._tuple#19$T18) } 
  Tclass._System.Tuple19_18(Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18))
     == _System._tuple#19$T18);

// Box/unbox axiom for Tclass._System.Tuple19
axiom (forall _System._tuple#19$T0: Ty, 
    _System._tuple#19$T1: Ty, 
    _System._tuple#19$T2: Ty, 
    _System._tuple#19$T3: Ty, 
    _System._tuple#19$T4: Ty, 
    _System._tuple#19$T5: Ty, 
    _System._tuple#19$T6: Ty, 
    _System._tuple#19$T7: Ty, 
    _System._tuple#19$T8: Ty, 
    _System._tuple#19$T9: Ty, 
    _System._tuple#19$T10: Ty, 
    _System._tuple#19$T11: Ty, 
    _System._tuple#19$T12: Ty, 
    _System._tuple#19$T13: Ty, 
    _System._tuple#19$T14: Ty, 
    _System._tuple#19$T15: Ty, 
    _System._tuple#19$T16: Ty, 
    _System._tuple#19$T17: Ty, 
    _System._tuple#19$T18: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18)) } 
  $IsBox(bx, 
      Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple19(_System._tuple#19$T0, 
          _System._tuple#19$T1, 
          _System._tuple#19$T2, 
          _System._tuple#19$T3, 
          _System._tuple#19$T4, 
          _System._tuple#19$T5, 
          _System._tuple#19$T6, 
          _System._tuple#19$T7, 
          _System._tuple#19$T8, 
          _System._tuple#19$T9, 
          _System._tuple#19$T10, 
          _System._tuple#19$T11, 
          _System._tuple#19$T12, 
          _System._tuple#19$T13, 
          _System._tuple#19$T14, 
          _System._tuple#19$T15, 
          _System._tuple#19$T16, 
          _System._tuple#19$T17, 
          _System._tuple#19$T18)));

// Constructor $Is
axiom (forall _System._tuple#19$T0: Ty, 
    _System._tuple#19$T1: Ty, 
    _System._tuple#19$T2: Ty, 
    _System._tuple#19$T3: Ty, 
    _System._tuple#19$T4: Ty, 
    _System._tuple#19$T5: Ty, 
    _System._tuple#19$T6: Ty, 
    _System._tuple#19$T7: Ty, 
    _System._tuple#19$T8: Ty, 
    _System._tuple#19$T9: Ty, 
    _System._tuple#19$T10: Ty, 
    _System._tuple#19$T11: Ty, 
    _System._tuple#19$T12: Ty, 
    _System._tuple#19$T13: Ty, 
    _System._tuple#19$T14: Ty, 
    _System._tuple#19$T15: Ty, 
    _System._tuple#19$T16: Ty, 
    _System._tuple#19$T17: Ty, 
    _System._tuple#19$T18: Ty, 
    a#422#0#0: Box, 
    a#422#1#0: Box, 
    a#422#2#0: Box, 
    a#422#3#0: Box, 
    a#422#4#0: Box, 
    a#422#5#0: Box, 
    a#422#6#0: Box, 
    a#422#7#0: Box, 
    a#422#8#0: Box, 
    a#422#9#0: Box, 
    a#422#10#0: Box, 
    a#422#11#0: Box, 
    a#422#12#0: Box, 
    a#422#13#0: Box, 
    a#422#14#0: Box, 
    a#422#15#0: Box, 
    a#422#16#0: Box, 
    a#422#17#0: Box, 
    a#422#18#0: Box :: 
  { $Is(#_System._tuple#19._#Make19(a#422#0#0, 
        a#422#1#0, 
        a#422#2#0, 
        a#422#3#0, 
        a#422#4#0, 
        a#422#5#0, 
        a#422#6#0, 
        a#422#7#0, 
        a#422#8#0, 
        a#422#9#0, 
        a#422#10#0, 
        a#422#11#0, 
        a#422#12#0, 
        a#422#13#0, 
        a#422#14#0, 
        a#422#15#0, 
        a#422#16#0, 
        a#422#17#0, 
        a#422#18#0), 
      Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18)) } 
  $Is(#_System._tuple#19._#Make19(a#422#0#0, 
        a#422#1#0, 
        a#422#2#0, 
        a#422#3#0, 
        a#422#4#0, 
        a#422#5#0, 
        a#422#6#0, 
        a#422#7#0, 
        a#422#8#0, 
        a#422#9#0, 
        a#422#10#0, 
        a#422#11#0, 
        a#422#12#0, 
        a#422#13#0, 
        a#422#14#0, 
        a#422#15#0, 
        a#422#16#0, 
        a#422#17#0, 
        a#422#18#0), 
      Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18))
     <==> $IsBox(a#422#0#0, _System._tuple#19$T0)
       && $IsBox(a#422#1#0, _System._tuple#19$T1)
       && $IsBox(a#422#2#0, _System._tuple#19$T2)
       && $IsBox(a#422#3#0, _System._tuple#19$T3)
       && $IsBox(a#422#4#0, _System._tuple#19$T4)
       && $IsBox(a#422#5#0, _System._tuple#19$T5)
       && $IsBox(a#422#6#0, _System._tuple#19$T6)
       && $IsBox(a#422#7#0, _System._tuple#19$T7)
       && $IsBox(a#422#8#0, _System._tuple#19$T8)
       && $IsBox(a#422#9#0, _System._tuple#19$T9)
       && $IsBox(a#422#10#0, _System._tuple#19$T10)
       && $IsBox(a#422#11#0, _System._tuple#19$T11)
       && $IsBox(a#422#12#0, _System._tuple#19$T12)
       && $IsBox(a#422#13#0, _System._tuple#19$T13)
       && $IsBox(a#422#14#0, _System._tuple#19$T14)
       && $IsBox(a#422#15#0, _System._tuple#19$T15)
       && $IsBox(a#422#16#0, _System._tuple#19$T16)
       && $IsBox(a#422#17#0, _System._tuple#19$T17)
       && $IsBox(a#422#18#0, _System._tuple#19$T18));

// Constructor $IsAlloc
axiom (forall _System._tuple#19$T0: Ty, 
    _System._tuple#19$T1: Ty, 
    _System._tuple#19$T2: Ty, 
    _System._tuple#19$T3: Ty, 
    _System._tuple#19$T4: Ty, 
    _System._tuple#19$T5: Ty, 
    _System._tuple#19$T6: Ty, 
    _System._tuple#19$T7: Ty, 
    _System._tuple#19$T8: Ty, 
    _System._tuple#19$T9: Ty, 
    _System._tuple#19$T10: Ty, 
    _System._tuple#19$T11: Ty, 
    _System._tuple#19$T12: Ty, 
    _System._tuple#19$T13: Ty, 
    _System._tuple#19$T14: Ty, 
    _System._tuple#19$T15: Ty, 
    _System._tuple#19$T16: Ty, 
    _System._tuple#19$T17: Ty, 
    _System._tuple#19$T18: Ty, 
    a#422#0#0: Box, 
    a#422#1#0: Box, 
    a#422#2#0: Box, 
    a#422#3#0: Box, 
    a#422#4#0: Box, 
    a#422#5#0: Box, 
    a#422#6#0: Box, 
    a#422#7#0: Box, 
    a#422#8#0: Box, 
    a#422#9#0: Box, 
    a#422#10#0: Box, 
    a#422#11#0: Box, 
    a#422#12#0: Box, 
    a#422#13#0: Box, 
    a#422#14#0: Box, 
    a#422#15#0: Box, 
    a#422#16#0: Box, 
    a#422#17#0: Box, 
    a#422#18#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#19._#Make19(a#422#0#0, 
        a#422#1#0, 
        a#422#2#0, 
        a#422#3#0, 
        a#422#4#0, 
        a#422#5#0, 
        a#422#6#0, 
        a#422#7#0, 
        a#422#8#0, 
        a#422#9#0, 
        a#422#10#0, 
        a#422#11#0, 
        a#422#12#0, 
        a#422#13#0, 
        a#422#14#0, 
        a#422#15#0, 
        a#422#16#0, 
        a#422#17#0, 
        a#422#18#0), 
      Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#19._#Make19(a#422#0#0, 
          a#422#1#0, 
          a#422#2#0, 
          a#422#3#0, 
          a#422#4#0, 
          a#422#5#0, 
          a#422#6#0, 
          a#422#7#0, 
          a#422#8#0, 
          a#422#9#0, 
          a#422#10#0, 
          a#422#11#0, 
          a#422#12#0, 
          a#422#13#0, 
          a#422#14#0, 
          a#422#15#0, 
          a#422#16#0, 
          a#422#17#0, 
          a#422#18#0), 
        Tclass._System.Tuple19(_System._tuple#19$T0, 
          _System._tuple#19$T1, 
          _System._tuple#19$T2, 
          _System._tuple#19$T3, 
          _System._tuple#19$T4, 
          _System._tuple#19$T5, 
          _System._tuple#19$T6, 
          _System._tuple#19$T7, 
          _System._tuple#19$T8, 
          _System._tuple#19$T9, 
          _System._tuple#19$T10, 
          _System._tuple#19$T11, 
          _System._tuple#19$T12, 
          _System._tuple#19$T13, 
          _System._tuple#19$T14, 
          _System._tuple#19$T15, 
          _System._tuple#19$T16, 
          _System._tuple#19$T17, 
          _System._tuple#19$T18), 
        $h)
       <==> $IsAllocBox(a#422#0#0, _System._tuple#19$T0, $h)
         && $IsAllocBox(a#422#1#0, _System._tuple#19$T1, $h)
         && $IsAllocBox(a#422#2#0, _System._tuple#19$T2, $h)
         && $IsAllocBox(a#422#3#0, _System._tuple#19$T3, $h)
         && $IsAllocBox(a#422#4#0, _System._tuple#19$T4, $h)
         && $IsAllocBox(a#422#5#0, _System._tuple#19$T5, $h)
         && $IsAllocBox(a#422#6#0, _System._tuple#19$T6, $h)
         && $IsAllocBox(a#422#7#0, _System._tuple#19$T7, $h)
         && $IsAllocBox(a#422#8#0, _System._tuple#19$T8, $h)
         && $IsAllocBox(a#422#9#0, _System._tuple#19$T9, $h)
         && $IsAllocBox(a#422#10#0, _System._tuple#19$T10, $h)
         && $IsAllocBox(a#422#11#0, _System._tuple#19$T11, $h)
         && $IsAllocBox(a#422#12#0, _System._tuple#19$T12, $h)
         && $IsAllocBox(a#422#13#0, _System._tuple#19$T13, $h)
         && $IsAllocBox(a#422#14#0, _System._tuple#19$T14, $h)
         && $IsAllocBox(a#422#15#0, _System._tuple#19$T15, $h)
         && $IsAllocBox(a#422#16#0, _System._tuple#19$T16, $h)
         && $IsAllocBox(a#422#17#0, _System._tuple#19$T17, $h)
         && $IsAllocBox(a#422#18#0, _System._tuple#19$T18, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#19$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple19._0(d), _System._tuple#19$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple19.___hMake19_q(d)
       && (exists _System._tuple#19$T1: Ty, 
          _System._tuple#19$T2: Ty, 
          _System._tuple#19$T3: Ty, 
          _System._tuple#19$T4: Ty, 
          _System._tuple#19$T5: Ty, 
          _System._tuple#19$T6: Ty, 
          _System._tuple#19$T7: Ty, 
          _System._tuple#19$T8: Ty, 
          _System._tuple#19$T9: Ty, 
          _System._tuple#19$T10: Ty, 
          _System._tuple#19$T11: Ty, 
          _System._tuple#19$T12: Ty, 
          _System._tuple#19$T13: Ty, 
          _System._tuple#19$T14: Ty, 
          _System._tuple#19$T15: Ty, 
          _System._tuple#19$T16: Ty, 
          _System._tuple#19$T17: Ty, 
          _System._tuple#19$T18: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple19(_System._tuple#19$T0, 
              _System._tuple#19$T1, 
              _System._tuple#19$T2, 
              _System._tuple#19$T3, 
              _System._tuple#19$T4, 
              _System._tuple#19$T5, 
              _System._tuple#19$T6, 
              _System._tuple#19$T7, 
              _System._tuple#19$T8, 
              _System._tuple#19$T9, 
              _System._tuple#19$T10, 
              _System._tuple#19$T11, 
              _System._tuple#19$T12, 
              _System._tuple#19$T13, 
              _System._tuple#19$T14, 
              _System._tuple#19$T15, 
              _System._tuple#19$T16, 
              _System._tuple#19$T17, 
              _System._tuple#19$T18), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple19(_System._tuple#19$T0, 
            _System._tuple#19$T1, 
            _System._tuple#19$T2, 
            _System._tuple#19$T3, 
            _System._tuple#19$T4, 
            _System._tuple#19$T5, 
            _System._tuple#19$T6, 
            _System._tuple#19$T7, 
            _System._tuple#19$T8, 
            _System._tuple#19$T9, 
            _System._tuple#19$T10, 
            _System._tuple#19$T11, 
            _System._tuple#19$T12, 
            _System._tuple#19$T13, 
            _System._tuple#19$T14, 
            _System._tuple#19$T15, 
            _System._tuple#19$T16, 
            _System._tuple#19$T17, 
            _System._tuple#19$T18), 
          $h))
     ==> $IsAllocBox(_System.Tuple19._0(d), _System._tuple#19$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#19$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple19._1(d), _System._tuple#19$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple19.___hMake19_q(d)
       && (exists _System._tuple#19$T0: Ty, 
          _System._tuple#19$T2: Ty, 
          _System._tuple#19$T3: Ty, 
          _System._tuple#19$T4: Ty, 
          _System._tuple#19$T5: Ty, 
          _System._tuple#19$T6: Ty, 
          _System._tuple#19$T7: Ty, 
          _System._tuple#19$T8: Ty, 
          _System._tuple#19$T9: Ty, 
          _System._tuple#19$T10: Ty, 
          _System._tuple#19$T11: Ty, 
          _System._tuple#19$T12: Ty, 
          _System._tuple#19$T13: Ty, 
          _System._tuple#19$T14: Ty, 
          _System._tuple#19$T15: Ty, 
          _System._tuple#19$T16: Ty, 
          _System._tuple#19$T17: Ty, 
          _System._tuple#19$T18: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple19(_System._tuple#19$T0, 
              _System._tuple#19$T1, 
              _System._tuple#19$T2, 
              _System._tuple#19$T3, 
              _System._tuple#19$T4, 
              _System._tuple#19$T5, 
              _System._tuple#19$T6, 
              _System._tuple#19$T7, 
              _System._tuple#19$T8, 
              _System._tuple#19$T9, 
              _System._tuple#19$T10, 
              _System._tuple#19$T11, 
              _System._tuple#19$T12, 
              _System._tuple#19$T13, 
              _System._tuple#19$T14, 
              _System._tuple#19$T15, 
              _System._tuple#19$T16, 
              _System._tuple#19$T17, 
              _System._tuple#19$T18), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple19(_System._tuple#19$T0, 
            _System._tuple#19$T1, 
            _System._tuple#19$T2, 
            _System._tuple#19$T3, 
            _System._tuple#19$T4, 
            _System._tuple#19$T5, 
            _System._tuple#19$T6, 
            _System._tuple#19$T7, 
            _System._tuple#19$T8, 
            _System._tuple#19$T9, 
            _System._tuple#19$T10, 
            _System._tuple#19$T11, 
            _System._tuple#19$T12, 
            _System._tuple#19$T13, 
            _System._tuple#19$T14, 
            _System._tuple#19$T15, 
            _System._tuple#19$T16, 
            _System._tuple#19$T17, 
            _System._tuple#19$T18), 
          $h))
     ==> $IsAllocBox(_System.Tuple19._1(d), _System._tuple#19$T1, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#19$T2: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple19._2(d), _System._tuple#19$T2, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple19.___hMake19_q(d)
       && (exists _System._tuple#19$T0: Ty, 
          _System._tuple#19$T1: Ty, 
          _System._tuple#19$T3: Ty, 
          _System._tuple#19$T4: Ty, 
          _System._tuple#19$T5: Ty, 
          _System._tuple#19$T6: Ty, 
          _System._tuple#19$T7: Ty, 
          _System._tuple#19$T8: Ty, 
          _System._tuple#19$T9: Ty, 
          _System._tuple#19$T10: Ty, 
          _System._tuple#19$T11: Ty, 
          _System._tuple#19$T12: Ty, 
          _System._tuple#19$T13: Ty, 
          _System._tuple#19$T14: Ty, 
          _System._tuple#19$T15: Ty, 
          _System._tuple#19$T16: Ty, 
          _System._tuple#19$T17: Ty, 
          _System._tuple#19$T18: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple19(_System._tuple#19$T0, 
              _System._tuple#19$T1, 
              _System._tuple#19$T2, 
              _System._tuple#19$T3, 
              _System._tuple#19$T4, 
              _System._tuple#19$T5, 
              _System._tuple#19$T6, 
              _System._tuple#19$T7, 
              _System._tuple#19$T8, 
              _System._tuple#19$T9, 
              _System._tuple#19$T10, 
              _System._tuple#19$T11, 
              _System._tuple#19$T12, 
              _System._tuple#19$T13, 
              _System._tuple#19$T14, 
              _System._tuple#19$T15, 
              _System._tuple#19$T16, 
              _System._tuple#19$T17, 
              _System._tuple#19$T18), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple19(_System._tuple#19$T0, 
            _System._tuple#19$T1, 
            _System._tuple#19$T2, 
            _System._tuple#19$T3, 
            _System._tuple#19$T4, 
            _System._tuple#19$T5, 
            _System._tuple#19$T6, 
            _System._tuple#19$T7, 
            _System._tuple#19$T8, 
            _System._tuple#19$T9, 
            _System._tuple#19$T10, 
            _System._tuple#19$T11, 
            _System._tuple#19$T12, 
            _System._tuple#19$T13, 
            _System._tuple#19$T14, 
            _System._tuple#19$T15, 
            _System._tuple#19$T16, 
            _System._tuple#19$T17, 
            _System._tuple#19$T18), 
          $h))
     ==> $IsAllocBox(_System.Tuple19._2(d), _System._tuple#19$T2, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#19$T3: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple19._3(d), _System._tuple#19$T3, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple19.___hMake19_q(d)
       && (exists _System._tuple#19$T0: Ty, 
          _System._tuple#19$T1: Ty, 
          _System._tuple#19$T2: Ty, 
          _System._tuple#19$T4: Ty, 
          _System._tuple#19$T5: Ty, 
          _System._tuple#19$T6: Ty, 
          _System._tuple#19$T7: Ty, 
          _System._tuple#19$T8: Ty, 
          _System._tuple#19$T9: Ty, 
          _System._tuple#19$T10: Ty, 
          _System._tuple#19$T11: Ty, 
          _System._tuple#19$T12: Ty, 
          _System._tuple#19$T13: Ty, 
          _System._tuple#19$T14: Ty, 
          _System._tuple#19$T15: Ty, 
          _System._tuple#19$T16: Ty, 
          _System._tuple#19$T17: Ty, 
          _System._tuple#19$T18: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple19(_System._tuple#19$T0, 
              _System._tuple#19$T1, 
              _System._tuple#19$T2, 
              _System._tuple#19$T3, 
              _System._tuple#19$T4, 
              _System._tuple#19$T5, 
              _System._tuple#19$T6, 
              _System._tuple#19$T7, 
              _System._tuple#19$T8, 
              _System._tuple#19$T9, 
              _System._tuple#19$T10, 
              _System._tuple#19$T11, 
              _System._tuple#19$T12, 
              _System._tuple#19$T13, 
              _System._tuple#19$T14, 
              _System._tuple#19$T15, 
              _System._tuple#19$T16, 
              _System._tuple#19$T17, 
              _System._tuple#19$T18), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple19(_System._tuple#19$T0, 
            _System._tuple#19$T1, 
            _System._tuple#19$T2, 
            _System._tuple#19$T3, 
            _System._tuple#19$T4, 
            _System._tuple#19$T5, 
            _System._tuple#19$T6, 
            _System._tuple#19$T7, 
            _System._tuple#19$T8, 
            _System._tuple#19$T9, 
            _System._tuple#19$T10, 
            _System._tuple#19$T11, 
            _System._tuple#19$T12, 
            _System._tuple#19$T13, 
            _System._tuple#19$T14, 
            _System._tuple#19$T15, 
            _System._tuple#19$T16, 
            _System._tuple#19$T17, 
            _System._tuple#19$T18), 
          $h))
     ==> $IsAllocBox(_System.Tuple19._3(d), _System._tuple#19$T3, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#19$T4: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple19._4(d), _System._tuple#19$T4, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple19.___hMake19_q(d)
       && (exists _System._tuple#19$T0: Ty, 
          _System._tuple#19$T1: Ty, 
          _System._tuple#19$T2: Ty, 
          _System._tuple#19$T3: Ty, 
          _System._tuple#19$T5: Ty, 
          _System._tuple#19$T6: Ty, 
          _System._tuple#19$T7: Ty, 
          _System._tuple#19$T8: Ty, 
          _System._tuple#19$T9: Ty, 
          _System._tuple#19$T10: Ty, 
          _System._tuple#19$T11: Ty, 
          _System._tuple#19$T12: Ty, 
          _System._tuple#19$T13: Ty, 
          _System._tuple#19$T14: Ty, 
          _System._tuple#19$T15: Ty, 
          _System._tuple#19$T16: Ty, 
          _System._tuple#19$T17: Ty, 
          _System._tuple#19$T18: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple19(_System._tuple#19$T0, 
              _System._tuple#19$T1, 
              _System._tuple#19$T2, 
              _System._tuple#19$T3, 
              _System._tuple#19$T4, 
              _System._tuple#19$T5, 
              _System._tuple#19$T6, 
              _System._tuple#19$T7, 
              _System._tuple#19$T8, 
              _System._tuple#19$T9, 
              _System._tuple#19$T10, 
              _System._tuple#19$T11, 
              _System._tuple#19$T12, 
              _System._tuple#19$T13, 
              _System._tuple#19$T14, 
              _System._tuple#19$T15, 
              _System._tuple#19$T16, 
              _System._tuple#19$T17, 
              _System._tuple#19$T18), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple19(_System._tuple#19$T0, 
            _System._tuple#19$T1, 
            _System._tuple#19$T2, 
            _System._tuple#19$T3, 
            _System._tuple#19$T4, 
            _System._tuple#19$T5, 
            _System._tuple#19$T6, 
            _System._tuple#19$T7, 
            _System._tuple#19$T8, 
            _System._tuple#19$T9, 
            _System._tuple#19$T10, 
            _System._tuple#19$T11, 
            _System._tuple#19$T12, 
            _System._tuple#19$T13, 
            _System._tuple#19$T14, 
            _System._tuple#19$T15, 
            _System._tuple#19$T16, 
            _System._tuple#19$T17, 
            _System._tuple#19$T18), 
          $h))
     ==> $IsAllocBox(_System.Tuple19._4(d), _System._tuple#19$T4, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#19$T5: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple19._5(d), _System._tuple#19$T5, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple19.___hMake19_q(d)
       && (exists _System._tuple#19$T0: Ty, 
          _System._tuple#19$T1: Ty, 
          _System._tuple#19$T2: Ty, 
          _System._tuple#19$T3: Ty, 
          _System._tuple#19$T4: Ty, 
          _System._tuple#19$T6: Ty, 
          _System._tuple#19$T7: Ty, 
          _System._tuple#19$T8: Ty, 
          _System._tuple#19$T9: Ty, 
          _System._tuple#19$T10: Ty, 
          _System._tuple#19$T11: Ty, 
          _System._tuple#19$T12: Ty, 
          _System._tuple#19$T13: Ty, 
          _System._tuple#19$T14: Ty, 
          _System._tuple#19$T15: Ty, 
          _System._tuple#19$T16: Ty, 
          _System._tuple#19$T17: Ty, 
          _System._tuple#19$T18: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple19(_System._tuple#19$T0, 
              _System._tuple#19$T1, 
              _System._tuple#19$T2, 
              _System._tuple#19$T3, 
              _System._tuple#19$T4, 
              _System._tuple#19$T5, 
              _System._tuple#19$T6, 
              _System._tuple#19$T7, 
              _System._tuple#19$T8, 
              _System._tuple#19$T9, 
              _System._tuple#19$T10, 
              _System._tuple#19$T11, 
              _System._tuple#19$T12, 
              _System._tuple#19$T13, 
              _System._tuple#19$T14, 
              _System._tuple#19$T15, 
              _System._tuple#19$T16, 
              _System._tuple#19$T17, 
              _System._tuple#19$T18), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple19(_System._tuple#19$T0, 
            _System._tuple#19$T1, 
            _System._tuple#19$T2, 
            _System._tuple#19$T3, 
            _System._tuple#19$T4, 
            _System._tuple#19$T5, 
            _System._tuple#19$T6, 
            _System._tuple#19$T7, 
            _System._tuple#19$T8, 
            _System._tuple#19$T9, 
            _System._tuple#19$T10, 
            _System._tuple#19$T11, 
            _System._tuple#19$T12, 
            _System._tuple#19$T13, 
            _System._tuple#19$T14, 
            _System._tuple#19$T15, 
            _System._tuple#19$T16, 
            _System._tuple#19$T17, 
            _System._tuple#19$T18), 
          $h))
     ==> $IsAllocBox(_System.Tuple19._5(d), _System._tuple#19$T5, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#19$T6: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple19._6(d), _System._tuple#19$T6, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple19.___hMake19_q(d)
       && (exists _System._tuple#19$T0: Ty, 
          _System._tuple#19$T1: Ty, 
          _System._tuple#19$T2: Ty, 
          _System._tuple#19$T3: Ty, 
          _System._tuple#19$T4: Ty, 
          _System._tuple#19$T5: Ty, 
          _System._tuple#19$T7: Ty, 
          _System._tuple#19$T8: Ty, 
          _System._tuple#19$T9: Ty, 
          _System._tuple#19$T10: Ty, 
          _System._tuple#19$T11: Ty, 
          _System._tuple#19$T12: Ty, 
          _System._tuple#19$T13: Ty, 
          _System._tuple#19$T14: Ty, 
          _System._tuple#19$T15: Ty, 
          _System._tuple#19$T16: Ty, 
          _System._tuple#19$T17: Ty, 
          _System._tuple#19$T18: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple19(_System._tuple#19$T0, 
              _System._tuple#19$T1, 
              _System._tuple#19$T2, 
              _System._tuple#19$T3, 
              _System._tuple#19$T4, 
              _System._tuple#19$T5, 
              _System._tuple#19$T6, 
              _System._tuple#19$T7, 
              _System._tuple#19$T8, 
              _System._tuple#19$T9, 
              _System._tuple#19$T10, 
              _System._tuple#19$T11, 
              _System._tuple#19$T12, 
              _System._tuple#19$T13, 
              _System._tuple#19$T14, 
              _System._tuple#19$T15, 
              _System._tuple#19$T16, 
              _System._tuple#19$T17, 
              _System._tuple#19$T18), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple19(_System._tuple#19$T0, 
            _System._tuple#19$T1, 
            _System._tuple#19$T2, 
            _System._tuple#19$T3, 
            _System._tuple#19$T4, 
            _System._tuple#19$T5, 
            _System._tuple#19$T6, 
            _System._tuple#19$T7, 
            _System._tuple#19$T8, 
            _System._tuple#19$T9, 
            _System._tuple#19$T10, 
            _System._tuple#19$T11, 
            _System._tuple#19$T12, 
            _System._tuple#19$T13, 
            _System._tuple#19$T14, 
            _System._tuple#19$T15, 
            _System._tuple#19$T16, 
            _System._tuple#19$T17, 
            _System._tuple#19$T18), 
          $h))
     ==> $IsAllocBox(_System.Tuple19._6(d), _System._tuple#19$T6, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#19$T7: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple19._7(d), _System._tuple#19$T7, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple19.___hMake19_q(d)
       && (exists _System._tuple#19$T0: Ty, 
          _System._tuple#19$T1: Ty, 
          _System._tuple#19$T2: Ty, 
          _System._tuple#19$T3: Ty, 
          _System._tuple#19$T4: Ty, 
          _System._tuple#19$T5: Ty, 
          _System._tuple#19$T6: Ty, 
          _System._tuple#19$T8: Ty, 
          _System._tuple#19$T9: Ty, 
          _System._tuple#19$T10: Ty, 
          _System._tuple#19$T11: Ty, 
          _System._tuple#19$T12: Ty, 
          _System._tuple#19$T13: Ty, 
          _System._tuple#19$T14: Ty, 
          _System._tuple#19$T15: Ty, 
          _System._tuple#19$T16: Ty, 
          _System._tuple#19$T17: Ty, 
          _System._tuple#19$T18: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple19(_System._tuple#19$T0, 
              _System._tuple#19$T1, 
              _System._tuple#19$T2, 
              _System._tuple#19$T3, 
              _System._tuple#19$T4, 
              _System._tuple#19$T5, 
              _System._tuple#19$T6, 
              _System._tuple#19$T7, 
              _System._tuple#19$T8, 
              _System._tuple#19$T9, 
              _System._tuple#19$T10, 
              _System._tuple#19$T11, 
              _System._tuple#19$T12, 
              _System._tuple#19$T13, 
              _System._tuple#19$T14, 
              _System._tuple#19$T15, 
              _System._tuple#19$T16, 
              _System._tuple#19$T17, 
              _System._tuple#19$T18), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple19(_System._tuple#19$T0, 
            _System._tuple#19$T1, 
            _System._tuple#19$T2, 
            _System._tuple#19$T3, 
            _System._tuple#19$T4, 
            _System._tuple#19$T5, 
            _System._tuple#19$T6, 
            _System._tuple#19$T7, 
            _System._tuple#19$T8, 
            _System._tuple#19$T9, 
            _System._tuple#19$T10, 
            _System._tuple#19$T11, 
            _System._tuple#19$T12, 
            _System._tuple#19$T13, 
            _System._tuple#19$T14, 
            _System._tuple#19$T15, 
            _System._tuple#19$T16, 
            _System._tuple#19$T17, 
            _System._tuple#19$T18), 
          $h))
     ==> $IsAllocBox(_System.Tuple19._7(d), _System._tuple#19$T7, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#19$T8: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple19._8(d), _System._tuple#19$T8, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple19.___hMake19_q(d)
       && (exists _System._tuple#19$T0: Ty, 
          _System._tuple#19$T1: Ty, 
          _System._tuple#19$T2: Ty, 
          _System._tuple#19$T3: Ty, 
          _System._tuple#19$T4: Ty, 
          _System._tuple#19$T5: Ty, 
          _System._tuple#19$T6: Ty, 
          _System._tuple#19$T7: Ty, 
          _System._tuple#19$T9: Ty, 
          _System._tuple#19$T10: Ty, 
          _System._tuple#19$T11: Ty, 
          _System._tuple#19$T12: Ty, 
          _System._tuple#19$T13: Ty, 
          _System._tuple#19$T14: Ty, 
          _System._tuple#19$T15: Ty, 
          _System._tuple#19$T16: Ty, 
          _System._tuple#19$T17: Ty, 
          _System._tuple#19$T18: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple19(_System._tuple#19$T0, 
              _System._tuple#19$T1, 
              _System._tuple#19$T2, 
              _System._tuple#19$T3, 
              _System._tuple#19$T4, 
              _System._tuple#19$T5, 
              _System._tuple#19$T6, 
              _System._tuple#19$T7, 
              _System._tuple#19$T8, 
              _System._tuple#19$T9, 
              _System._tuple#19$T10, 
              _System._tuple#19$T11, 
              _System._tuple#19$T12, 
              _System._tuple#19$T13, 
              _System._tuple#19$T14, 
              _System._tuple#19$T15, 
              _System._tuple#19$T16, 
              _System._tuple#19$T17, 
              _System._tuple#19$T18), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple19(_System._tuple#19$T0, 
            _System._tuple#19$T1, 
            _System._tuple#19$T2, 
            _System._tuple#19$T3, 
            _System._tuple#19$T4, 
            _System._tuple#19$T5, 
            _System._tuple#19$T6, 
            _System._tuple#19$T7, 
            _System._tuple#19$T8, 
            _System._tuple#19$T9, 
            _System._tuple#19$T10, 
            _System._tuple#19$T11, 
            _System._tuple#19$T12, 
            _System._tuple#19$T13, 
            _System._tuple#19$T14, 
            _System._tuple#19$T15, 
            _System._tuple#19$T16, 
            _System._tuple#19$T17, 
            _System._tuple#19$T18), 
          $h))
     ==> $IsAllocBox(_System.Tuple19._8(d), _System._tuple#19$T8, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#19$T9: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple19._9(d), _System._tuple#19$T9, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple19.___hMake19_q(d)
       && (exists _System._tuple#19$T0: Ty, 
          _System._tuple#19$T1: Ty, 
          _System._tuple#19$T2: Ty, 
          _System._tuple#19$T3: Ty, 
          _System._tuple#19$T4: Ty, 
          _System._tuple#19$T5: Ty, 
          _System._tuple#19$T6: Ty, 
          _System._tuple#19$T7: Ty, 
          _System._tuple#19$T8: Ty, 
          _System._tuple#19$T10: Ty, 
          _System._tuple#19$T11: Ty, 
          _System._tuple#19$T12: Ty, 
          _System._tuple#19$T13: Ty, 
          _System._tuple#19$T14: Ty, 
          _System._tuple#19$T15: Ty, 
          _System._tuple#19$T16: Ty, 
          _System._tuple#19$T17: Ty, 
          _System._tuple#19$T18: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple19(_System._tuple#19$T0, 
              _System._tuple#19$T1, 
              _System._tuple#19$T2, 
              _System._tuple#19$T3, 
              _System._tuple#19$T4, 
              _System._tuple#19$T5, 
              _System._tuple#19$T6, 
              _System._tuple#19$T7, 
              _System._tuple#19$T8, 
              _System._tuple#19$T9, 
              _System._tuple#19$T10, 
              _System._tuple#19$T11, 
              _System._tuple#19$T12, 
              _System._tuple#19$T13, 
              _System._tuple#19$T14, 
              _System._tuple#19$T15, 
              _System._tuple#19$T16, 
              _System._tuple#19$T17, 
              _System._tuple#19$T18), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple19(_System._tuple#19$T0, 
            _System._tuple#19$T1, 
            _System._tuple#19$T2, 
            _System._tuple#19$T3, 
            _System._tuple#19$T4, 
            _System._tuple#19$T5, 
            _System._tuple#19$T6, 
            _System._tuple#19$T7, 
            _System._tuple#19$T8, 
            _System._tuple#19$T9, 
            _System._tuple#19$T10, 
            _System._tuple#19$T11, 
            _System._tuple#19$T12, 
            _System._tuple#19$T13, 
            _System._tuple#19$T14, 
            _System._tuple#19$T15, 
            _System._tuple#19$T16, 
            _System._tuple#19$T17, 
            _System._tuple#19$T18), 
          $h))
     ==> $IsAllocBox(_System.Tuple19._9(d), _System._tuple#19$T9, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#19$T10: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple19._10(d), _System._tuple#19$T10, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple19.___hMake19_q(d)
       && (exists _System._tuple#19$T0: Ty, 
          _System._tuple#19$T1: Ty, 
          _System._tuple#19$T2: Ty, 
          _System._tuple#19$T3: Ty, 
          _System._tuple#19$T4: Ty, 
          _System._tuple#19$T5: Ty, 
          _System._tuple#19$T6: Ty, 
          _System._tuple#19$T7: Ty, 
          _System._tuple#19$T8: Ty, 
          _System._tuple#19$T9: Ty, 
          _System._tuple#19$T11: Ty, 
          _System._tuple#19$T12: Ty, 
          _System._tuple#19$T13: Ty, 
          _System._tuple#19$T14: Ty, 
          _System._tuple#19$T15: Ty, 
          _System._tuple#19$T16: Ty, 
          _System._tuple#19$T17: Ty, 
          _System._tuple#19$T18: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple19(_System._tuple#19$T0, 
              _System._tuple#19$T1, 
              _System._tuple#19$T2, 
              _System._tuple#19$T3, 
              _System._tuple#19$T4, 
              _System._tuple#19$T5, 
              _System._tuple#19$T6, 
              _System._tuple#19$T7, 
              _System._tuple#19$T8, 
              _System._tuple#19$T9, 
              _System._tuple#19$T10, 
              _System._tuple#19$T11, 
              _System._tuple#19$T12, 
              _System._tuple#19$T13, 
              _System._tuple#19$T14, 
              _System._tuple#19$T15, 
              _System._tuple#19$T16, 
              _System._tuple#19$T17, 
              _System._tuple#19$T18), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple19(_System._tuple#19$T0, 
            _System._tuple#19$T1, 
            _System._tuple#19$T2, 
            _System._tuple#19$T3, 
            _System._tuple#19$T4, 
            _System._tuple#19$T5, 
            _System._tuple#19$T6, 
            _System._tuple#19$T7, 
            _System._tuple#19$T8, 
            _System._tuple#19$T9, 
            _System._tuple#19$T10, 
            _System._tuple#19$T11, 
            _System._tuple#19$T12, 
            _System._tuple#19$T13, 
            _System._tuple#19$T14, 
            _System._tuple#19$T15, 
            _System._tuple#19$T16, 
            _System._tuple#19$T17, 
            _System._tuple#19$T18), 
          $h))
     ==> $IsAllocBox(_System.Tuple19._10(d), _System._tuple#19$T10, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#19$T11: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple19._11(d), _System._tuple#19$T11, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple19.___hMake19_q(d)
       && (exists _System._tuple#19$T0: Ty, 
          _System._tuple#19$T1: Ty, 
          _System._tuple#19$T2: Ty, 
          _System._tuple#19$T3: Ty, 
          _System._tuple#19$T4: Ty, 
          _System._tuple#19$T5: Ty, 
          _System._tuple#19$T6: Ty, 
          _System._tuple#19$T7: Ty, 
          _System._tuple#19$T8: Ty, 
          _System._tuple#19$T9: Ty, 
          _System._tuple#19$T10: Ty, 
          _System._tuple#19$T12: Ty, 
          _System._tuple#19$T13: Ty, 
          _System._tuple#19$T14: Ty, 
          _System._tuple#19$T15: Ty, 
          _System._tuple#19$T16: Ty, 
          _System._tuple#19$T17: Ty, 
          _System._tuple#19$T18: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple19(_System._tuple#19$T0, 
              _System._tuple#19$T1, 
              _System._tuple#19$T2, 
              _System._tuple#19$T3, 
              _System._tuple#19$T4, 
              _System._tuple#19$T5, 
              _System._tuple#19$T6, 
              _System._tuple#19$T7, 
              _System._tuple#19$T8, 
              _System._tuple#19$T9, 
              _System._tuple#19$T10, 
              _System._tuple#19$T11, 
              _System._tuple#19$T12, 
              _System._tuple#19$T13, 
              _System._tuple#19$T14, 
              _System._tuple#19$T15, 
              _System._tuple#19$T16, 
              _System._tuple#19$T17, 
              _System._tuple#19$T18), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple19(_System._tuple#19$T0, 
            _System._tuple#19$T1, 
            _System._tuple#19$T2, 
            _System._tuple#19$T3, 
            _System._tuple#19$T4, 
            _System._tuple#19$T5, 
            _System._tuple#19$T6, 
            _System._tuple#19$T7, 
            _System._tuple#19$T8, 
            _System._tuple#19$T9, 
            _System._tuple#19$T10, 
            _System._tuple#19$T11, 
            _System._tuple#19$T12, 
            _System._tuple#19$T13, 
            _System._tuple#19$T14, 
            _System._tuple#19$T15, 
            _System._tuple#19$T16, 
            _System._tuple#19$T17, 
            _System._tuple#19$T18), 
          $h))
     ==> $IsAllocBox(_System.Tuple19._11(d), _System._tuple#19$T11, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#19$T12: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple19._12(d), _System._tuple#19$T12, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple19.___hMake19_q(d)
       && (exists _System._tuple#19$T0: Ty, 
          _System._tuple#19$T1: Ty, 
          _System._tuple#19$T2: Ty, 
          _System._tuple#19$T3: Ty, 
          _System._tuple#19$T4: Ty, 
          _System._tuple#19$T5: Ty, 
          _System._tuple#19$T6: Ty, 
          _System._tuple#19$T7: Ty, 
          _System._tuple#19$T8: Ty, 
          _System._tuple#19$T9: Ty, 
          _System._tuple#19$T10: Ty, 
          _System._tuple#19$T11: Ty, 
          _System._tuple#19$T13: Ty, 
          _System._tuple#19$T14: Ty, 
          _System._tuple#19$T15: Ty, 
          _System._tuple#19$T16: Ty, 
          _System._tuple#19$T17: Ty, 
          _System._tuple#19$T18: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple19(_System._tuple#19$T0, 
              _System._tuple#19$T1, 
              _System._tuple#19$T2, 
              _System._tuple#19$T3, 
              _System._tuple#19$T4, 
              _System._tuple#19$T5, 
              _System._tuple#19$T6, 
              _System._tuple#19$T7, 
              _System._tuple#19$T8, 
              _System._tuple#19$T9, 
              _System._tuple#19$T10, 
              _System._tuple#19$T11, 
              _System._tuple#19$T12, 
              _System._tuple#19$T13, 
              _System._tuple#19$T14, 
              _System._tuple#19$T15, 
              _System._tuple#19$T16, 
              _System._tuple#19$T17, 
              _System._tuple#19$T18), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple19(_System._tuple#19$T0, 
            _System._tuple#19$T1, 
            _System._tuple#19$T2, 
            _System._tuple#19$T3, 
            _System._tuple#19$T4, 
            _System._tuple#19$T5, 
            _System._tuple#19$T6, 
            _System._tuple#19$T7, 
            _System._tuple#19$T8, 
            _System._tuple#19$T9, 
            _System._tuple#19$T10, 
            _System._tuple#19$T11, 
            _System._tuple#19$T12, 
            _System._tuple#19$T13, 
            _System._tuple#19$T14, 
            _System._tuple#19$T15, 
            _System._tuple#19$T16, 
            _System._tuple#19$T17, 
            _System._tuple#19$T18), 
          $h))
     ==> $IsAllocBox(_System.Tuple19._12(d), _System._tuple#19$T12, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#19$T13: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple19._13(d), _System._tuple#19$T13, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple19.___hMake19_q(d)
       && (exists _System._tuple#19$T0: Ty, 
          _System._tuple#19$T1: Ty, 
          _System._tuple#19$T2: Ty, 
          _System._tuple#19$T3: Ty, 
          _System._tuple#19$T4: Ty, 
          _System._tuple#19$T5: Ty, 
          _System._tuple#19$T6: Ty, 
          _System._tuple#19$T7: Ty, 
          _System._tuple#19$T8: Ty, 
          _System._tuple#19$T9: Ty, 
          _System._tuple#19$T10: Ty, 
          _System._tuple#19$T11: Ty, 
          _System._tuple#19$T12: Ty, 
          _System._tuple#19$T14: Ty, 
          _System._tuple#19$T15: Ty, 
          _System._tuple#19$T16: Ty, 
          _System._tuple#19$T17: Ty, 
          _System._tuple#19$T18: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple19(_System._tuple#19$T0, 
              _System._tuple#19$T1, 
              _System._tuple#19$T2, 
              _System._tuple#19$T3, 
              _System._tuple#19$T4, 
              _System._tuple#19$T5, 
              _System._tuple#19$T6, 
              _System._tuple#19$T7, 
              _System._tuple#19$T8, 
              _System._tuple#19$T9, 
              _System._tuple#19$T10, 
              _System._tuple#19$T11, 
              _System._tuple#19$T12, 
              _System._tuple#19$T13, 
              _System._tuple#19$T14, 
              _System._tuple#19$T15, 
              _System._tuple#19$T16, 
              _System._tuple#19$T17, 
              _System._tuple#19$T18), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple19(_System._tuple#19$T0, 
            _System._tuple#19$T1, 
            _System._tuple#19$T2, 
            _System._tuple#19$T3, 
            _System._tuple#19$T4, 
            _System._tuple#19$T5, 
            _System._tuple#19$T6, 
            _System._tuple#19$T7, 
            _System._tuple#19$T8, 
            _System._tuple#19$T9, 
            _System._tuple#19$T10, 
            _System._tuple#19$T11, 
            _System._tuple#19$T12, 
            _System._tuple#19$T13, 
            _System._tuple#19$T14, 
            _System._tuple#19$T15, 
            _System._tuple#19$T16, 
            _System._tuple#19$T17, 
            _System._tuple#19$T18), 
          $h))
     ==> $IsAllocBox(_System.Tuple19._13(d), _System._tuple#19$T13, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#19$T14: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple19._14(d), _System._tuple#19$T14, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple19.___hMake19_q(d)
       && (exists _System._tuple#19$T0: Ty, 
          _System._tuple#19$T1: Ty, 
          _System._tuple#19$T2: Ty, 
          _System._tuple#19$T3: Ty, 
          _System._tuple#19$T4: Ty, 
          _System._tuple#19$T5: Ty, 
          _System._tuple#19$T6: Ty, 
          _System._tuple#19$T7: Ty, 
          _System._tuple#19$T8: Ty, 
          _System._tuple#19$T9: Ty, 
          _System._tuple#19$T10: Ty, 
          _System._tuple#19$T11: Ty, 
          _System._tuple#19$T12: Ty, 
          _System._tuple#19$T13: Ty, 
          _System._tuple#19$T15: Ty, 
          _System._tuple#19$T16: Ty, 
          _System._tuple#19$T17: Ty, 
          _System._tuple#19$T18: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple19(_System._tuple#19$T0, 
              _System._tuple#19$T1, 
              _System._tuple#19$T2, 
              _System._tuple#19$T3, 
              _System._tuple#19$T4, 
              _System._tuple#19$T5, 
              _System._tuple#19$T6, 
              _System._tuple#19$T7, 
              _System._tuple#19$T8, 
              _System._tuple#19$T9, 
              _System._tuple#19$T10, 
              _System._tuple#19$T11, 
              _System._tuple#19$T12, 
              _System._tuple#19$T13, 
              _System._tuple#19$T14, 
              _System._tuple#19$T15, 
              _System._tuple#19$T16, 
              _System._tuple#19$T17, 
              _System._tuple#19$T18), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple19(_System._tuple#19$T0, 
            _System._tuple#19$T1, 
            _System._tuple#19$T2, 
            _System._tuple#19$T3, 
            _System._tuple#19$T4, 
            _System._tuple#19$T5, 
            _System._tuple#19$T6, 
            _System._tuple#19$T7, 
            _System._tuple#19$T8, 
            _System._tuple#19$T9, 
            _System._tuple#19$T10, 
            _System._tuple#19$T11, 
            _System._tuple#19$T12, 
            _System._tuple#19$T13, 
            _System._tuple#19$T14, 
            _System._tuple#19$T15, 
            _System._tuple#19$T16, 
            _System._tuple#19$T17, 
            _System._tuple#19$T18), 
          $h))
     ==> $IsAllocBox(_System.Tuple19._14(d), _System._tuple#19$T14, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#19$T15: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple19._15(d), _System._tuple#19$T15, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple19.___hMake19_q(d)
       && (exists _System._tuple#19$T0: Ty, 
          _System._tuple#19$T1: Ty, 
          _System._tuple#19$T2: Ty, 
          _System._tuple#19$T3: Ty, 
          _System._tuple#19$T4: Ty, 
          _System._tuple#19$T5: Ty, 
          _System._tuple#19$T6: Ty, 
          _System._tuple#19$T7: Ty, 
          _System._tuple#19$T8: Ty, 
          _System._tuple#19$T9: Ty, 
          _System._tuple#19$T10: Ty, 
          _System._tuple#19$T11: Ty, 
          _System._tuple#19$T12: Ty, 
          _System._tuple#19$T13: Ty, 
          _System._tuple#19$T14: Ty, 
          _System._tuple#19$T16: Ty, 
          _System._tuple#19$T17: Ty, 
          _System._tuple#19$T18: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple19(_System._tuple#19$T0, 
              _System._tuple#19$T1, 
              _System._tuple#19$T2, 
              _System._tuple#19$T3, 
              _System._tuple#19$T4, 
              _System._tuple#19$T5, 
              _System._tuple#19$T6, 
              _System._tuple#19$T7, 
              _System._tuple#19$T8, 
              _System._tuple#19$T9, 
              _System._tuple#19$T10, 
              _System._tuple#19$T11, 
              _System._tuple#19$T12, 
              _System._tuple#19$T13, 
              _System._tuple#19$T14, 
              _System._tuple#19$T15, 
              _System._tuple#19$T16, 
              _System._tuple#19$T17, 
              _System._tuple#19$T18), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple19(_System._tuple#19$T0, 
            _System._tuple#19$T1, 
            _System._tuple#19$T2, 
            _System._tuple#19$T3, 
            _System._tuple#19$T4, 
            _System._tuple#19$T5, 
            _System._tuple#19$T6, 
            _System._tuple#19$T7, 
            _System._tuple#19$T8, 
            _System._tuple#19$T9, 
            _System._tuple#19$T10, 
            _System._tuple#19$T11, 
            _System._tuple#19$T12, 
            _System._tuple#19$T13, 
            _System._tuple#19$T14, 
            _System._tuple#19$T15, 
            _System._tuple#19$T16, 
            _System._tuple#19$T17, 
            _System._tuple#19$T18), 
          $h))
     ==> $IsAllocBox(_System.Tuple19._15(d), _System._tuple#19$T15, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#19$T16: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple19._16(d), _System._tuple#19$T16, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple19.___hMake19_q(d)
       && (exists _System._tuple#19$T0: Ty, 
          _System._tuple#19$T1: Ty, 
          _System._tuple#19$T2: Ty, 
          _System._tuple#19$T3: Ty, 
          _System._tuple#19$T4: Ty, 
          _System._tuple#19$T5: Ty, 
          _System._tuple#19$T6: Ty, 
          _System._tuple#19$T7: Ty, 
          _System._tuple#19$T8: Ty, 
          _System._tuple#19$T9: Ty, 
          _System._tuple#19$T10: Ty, 
          _System._tuple#19$T11: Ty, 
          _System._tuple#19$T12: Ty, 
          _System._tuple#19$T13: Ty, 
          _System._tuple#19$T14: Ty, 
          _System._tuple#19$T15: Ty, 
          _System._tuple#19$T17: Ty, 
          _System._tuple#19$T18: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple19(_System._tuple#19$T0, 
              _System._tuple#19$T1, 
              _System._tuple#19$T2, 
              _System._tuple#19$T3, 
              _System._tuple#19$T4, 
              _System._tuple#19$T5, 
              _System._tuple#19$T6, 
              _System._tuple#19$T7, 
              _System._tuple#19$T8, 
              _System._tuple#19$T9, 
              _System._tuple#19$T10, 
              _System._tuple#19$T11, 
              _System._tuple#19$T12, 
              _System._tuple#19$T13, 
              _System._tuple#19$T14, 
              _System._tuple#19$T15, 
              _System._tuple#19$T16, 
              _System._tuple#19$T17, 
              _System._tuple#19$T18), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple19(_System._tuple#19$T0, 
            _System._tuple#19$T1, 
            _System._tuple#19$T2, 
            _System._tuple#19$T3, 
            _System._tuple#19$T4, 
            _System._tuple#19$T5, 
            _System._tuple#19$T6, 
            _System._tuple#19$T7, 
            _System._tuple#19$T8, 
            _System._tuple#19$T9, 
            _System._tuple#19$T10, 
            _System._tuple#19$T11, 
            _System._tuple#19$T12, 
            _System._tuple#19$T13, 
            _System._tuple#19$T14, 
            _System._tuple#19$T15, 
            _System._tuple#19$T16, 
            _System._tuple#19$T17, 
            _System._tuple#19$T18), 
          $h))
     ==> $IsAllocBox(_System.Tuple19._16(d), _System._tuple#19$T16, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#19$T17: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple19._17(d), _System._tuple#19$T17, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple19.___hMake19_q(d)
       && (exists _System._tuple#19$T0: Ty, 
          _System._tuple#19$T1: Ty, 
          _System._tuple#19$T2: Ty, 
          _System._tuple#19$T3: Ty, 
          _System._tuple#19$T4: Ty, 
          _System._tuple#19$T5: Ty, 
          _System._tuple#19$T6: Ty, 
          _System._tuple#19$T7: Ty, 
          _System._tuple#19$T8: Ty, 
          _System._tuple#19$T9: Ty, 
          _System._tuple#19$T10: Ty, 
          _System._tuple#19$T11: Ty, 
          _System._tuple#19$T12: Ty, 
          _System._tuple#19$T13: Ty, 
          _System._tuple#19$T14: Ty, 
          _System._tuple#19$T15: Ty, 
          _System._tuple#19$T16: Ty, 
          _System._tuple#19$T18: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple19(_System._tuple#19$T0, 
              _System._tuple#19$T1, 
              _System._tuple#19$T2, 
              _System._tuple#19$T3, 
              _System._tuple#19$T4, 
              _System._tuple#19$T5, 
              _System._tuple#19$T6, 
              _System._tuple#19$T7, 
              _System._tuple#19$T8, 
              _System._tuple#19$T9, 
              _System._tuple#19$T10, 
              _System._tuple#19$T11, 
              _System._tuple#19$T12, 
              _System._tuple#19$T13, 
              _System._tuple#19$T14, 
              _System._tuple#19$T15, 
              _System._tuple#19$T16, 
              _System._tuple#19$T17, 
              _System._tuple#19$T18), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple19(_System._tuple#19$T0, 
            _System._tuple#19$T1, 
            _System._tuple#19$T2, 
            _System._tuple#19$T3, 
            _System._tuple#19$T4, 
            _System._tuple#19$T5, 
            _System._tuple#19$T6, 
            _System._tuple#19$T7, 
            _System._tuple#19$T8, 
            _System._tuple#19$T9, 
            _System._tuple#19$T10, 
            _System._tuple#19$T11, 
            _System._tuple#19$T12, 
            _System._tuple#19$T13, 
            _System._tuple#19$T14, 
            _System._tuple#19$T15, 
            _System._tuple#19$T16, 
            _System._tuple#19$T17, 
            _System._tuple#19$T18), 
          $h))
     ==> $IsAllocBox(_System.Tuple19._17(d), _System._tuple#19$T17, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#19$T18: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple19._18(d), _System._tuple#19$T18, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple19.___hMake19_q(d)
       && (exists _System._tuple#19$T0: Ty, 
          _System._tuple#19$T1: Ty, 
          _System._tuple#19$T2: Ty, 
          _System._tuple#19$T3: Ty, 
          _System._tuple#19$T4: Ty, 
          _System._tuple#19$T5: Ty, 
          _System._tuple#19$T6: Ty, 
          _System._tuple#19$T7: Ty, 
          _System._tuple#19$T8: Ty, 
          _System._tuple#19$T9: Ty, 
          _System._tuple#19$T10: Ty, 
          _System._tuple#19$T11: Ty, 
          _System._tuple#19$T12: Ty, 
          _System._tuple#19$T13: Ty, 
          _System._tuple#19$T14: Ty, 
          _System._tuple#19$T15: Ty, 
          _System._tuple#19$T16: Ty, 
          _System._tuple#19$T17: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple19(_System._tuple#19$T0, 
              _System._tuple#19$T1, 
              _System._tuple#19$T2, 
              _System._tuple#19$T3, 
              _System._tuple#19$T4, 
              _System._tuple#19$T5, 
              _System._tuple#19$T6, 
              _System._tuple#19$T7, 
              _System._tuple#19$T8, 
              _System._tuple#19$T9, 
              _System._tuple#19$T10, 
              _System._tuple#19$T11, 
              _System._tuple#19$T12, 
              _System._tuple#19$T13, 
              _System._tuple#19$T14, 
              _System._tuple#19$T15, 
              _System._tuple#19$T16, 
              _System._tuple#19$T17, 
              _System._tuple#19$T18), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple19(_System._tuple#19$T0, 
            _System._tuple#19$T1, 
            _System._tuple#19$T2, 
            _System._tuple#19$T3, 
            _System._tuple#19$T4, 
            _System._tuple#19$T5, 
            _System._tuple#19$T6, 
            _System._tuple#19$T7, 
            _System._tuple#19$T8, 
            _System._tuple#19$T9, 
            _System._tuple#19$T10, 
            _System._tuple#19$T11, 
            _System._tuple#19$T12, 
            _System._tuple#19$T13, 
            _System._tuple#19$T14, 
            _System._tuple#19$T15, 
            _System._tuple#19$T16, 
            _System._tuple#19$T17, 
            _System._tuple#19$T18), 
          $h))
     ==> $IsAllocBox(_System.Tuple19._18(d), _System._tuple#19$T18, $h));

// Constructor literal
axiom (forall a#423#0#0: Box, 
    a#423#1#0: Box, 
    a#423#2#0: Box, 
    a#423#3#0: Box, 
    a#423#4#0: Box, 
    a#423#5#0: Box, 
    a#423#6#0: Box, 
    a#423#7#0: Box, 
    a#423#8#0: Box, 
    a#423#9#0: Box, 
    a#423#10#0: Box, 
    a#423#11#0: Box, 
    a#423#12#0: Box, 
    a#423#13#0: Box, 
    a#423#14#0: Box, 
    a#423#15#0: Box, 
    a#423#16#0: Box, 
    a#423#17#0: Box, 
    a#423#18#0: Box :: 
  { #_System._tuple#19._#Make19(Lit(a#423#0#0), 
      Lit(a#423#1#0), 
      Lit(a#423#2#0), 
      Lit(a#423#3#0), 
      Lit(a#423#4#0), 
      Lit(a#423#5#0), 
      Lit(a#423#6#0), 
      Lit(a#423#7#0), 
      Lit(a#423#8#0), 
      Lit(a#423#9#0), 
      Lit(a#423#10#0), 
      Lit(a#423#11#0), 
      Lit(a#423#12#0), 
      Lit(a#423#13#0), 
      Lit(a#423#14#0), 
      Lit(a#423#15#0), 
      Lit(a#423#16#0), 
      Lit(a#423#17#0), 
      Lit(a#423#18#0)) } 
  #_System._tuple#19._#Make19(Lit(a#423#0#0), 
      Lit(a#423#1#0), 
      Lit(a#423#2#0), 
      Lit(a#423#3#0), 
      Lit(a#423#4#0), 
      Lit(a#423#5#0), 
      Lit(a#423#6#0), 
      Lit(a#423#7#0), 
      Lit(a#423#8#0), 
      Lit(a#423#9#0), 
      Lit(a#423#10#0), 
      Lit(a#423#11#0), 
      Lit(a#423#12#0), 
      Lit(a#423#13#0), 
      Lit(a#423#14#0), 
      Lit(a#423#15#0), 
      Lit(a#423#16#0), 
      Lit(a#423#17#0), 
      Lit(a#423#18#0))
     == Lit(#_System._tuple#19._#Make19(a#423#0#0, 
        a#423#1#0, 
        a#423#2#0, 
        a#423#3#0, 
        a#423#4#0, 
        a#423#5#0, 
        a#423#6#0, 
        a#423#7#0, 
        a#423#8#0, 
        a#423#9#0, 
        a#423#10#0, 
        a#423#11#0, 
        a#423#12#0, 
        a#423#13#0, 
        a#423#14#0, 
        a#423#15#0, 
        a#423#16#0, 
        a#423#17#0, 
        a#423#18#0)));

function _System.Tuple19._0(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#424#0#0: Box, 
    a#424#1#0: Box, 
    a#424#2#0: Box, 
    a#424#3#0: Box, 
    a#424#4#0: Box, 
    a#424#5#0: Box, 
    a#424#6#0: Box, 
    a#424#7#0: Box, 
    a#424#8#0: Box, 
    a#424#9#0: Box, 
    a#424#10#0: Box, 
    a#424#11#0: Box, 
    a#424#12#0: Box, 
    a#424#13#0: Box, 
    a#424#14#0: Box, 
    a#424#15#0: Box, 
    a#424#16#0: Box, 
    a#424#17#0: Box, 
    a#424#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#424#0#0, 
      a#424#1#0, 
      a#424#2#0, 
      a#424#3#0, 
      a#424#4#0, 
      a#424#5#0, 
      a#424#6#0, 
      a#424#7#0, 
      a#424#8#0, 
      a#424#9#0, 
      a#424#10#0, 
      a#424#11#0, 
      a#424#12#0, 
      a#424#13#0, 
      a#424#14#0, 
      a#424#15#0, 
      a#424#16#0, 
      a#424#17#0, 
      a#424#18#0) } 
  _System.Tuple19._0(#_System._tuple#19._#Make19(a#424#0#0, 
        a#424#1#0, 
        a#424#2#0, 
        a#424#3#0, 
        a#424#4#0, 
        a#424#5#0, 
        a#424#6#0, 
        a#424#7#0, 
        a#424#8#0, 
        a#424#9#0, 
        a#424#10#0, 
        a#424#11#0, 
        a#424#12#0, 
        a#424#13#0, 
        a#424#14#0, 
        a#424#15#0, 
        a#424#16#0, 
        a#424#17#0, 
        a#424#18#0))
     == a#424#0#0);

// Inductive rank
axiom (forall a#425#0#0: Box, 
    a#425#1#0: Box, 
    a#425#2#0: Box, 
    a#425#3#0: Box, 
    a#425#4#0: Box, 
    a#425#5#0: Box, 
    a#425#6#0: Box, 
    a#425#7#0: Box, 
    a#425#8#0: Box, 
    a#425#9#0: Box, 
    a#425#10#0: Box, 
    a#425#11#0: Box, 
    a#425#12#0: Box, 
    a#425#13#0: Box, 
    a#425#14#0: Box, 
    a#425#15#0: Box, 
    a#425#16#0: Box, 
    a#425#17#0: Box, 
    a#425#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#425#0#0, 
      a#425#1#0, 
      a#425#2#0, 
      a#425#3#0, 
      a#425#4#0, 
      a#425#5#0, 
      a#425#6#0, 
      a#425#7#0, 
      a#425#8#0, 
      a#425#9#0, 
      a#425#10#0, 
      a#425#11#0, 
      a#425#12#0, 
      a#425#13#0, 
      a#425#14#0, 
      a#425#15#0, 
      a#425#16#0, 
      a#425#17#0, 
      a#425#18#0) } 
  BoxRank(a#425#0#0)
     < DtRank(#_System._tuple#19._#Make19(a#425#0#0, 
        a#425#1#0, 
        a#425#2#0, 
        a#425#3#0, 
        a#425#4#0, 
        a#425#5#0, 
        a#425#6#0, 
        a#425#7#0, 
        a#425#8#0, 
        a#425#9#0, 
        a#425#10#0, 
        a#425#11#0, 
        a#425#12#0, 
        a#425#13#0, 
        a#425#14#0, 
        a#425#15#0, 
        a#425#16#0, 
        a#425#17#0, 
        a#425#18#0)));

function _System.Tuple19._1(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#426#0#0: Box, 
    a#426#1#0: Box, 
    a#426#2#0: Box, 
    a#426#3#0: Box, 
    a#426#4#0: Box, 
    a#426#5#0: Box, 
    a#426#6#0: Box, 
    a#426#7#0: Box, 
    a#426#8#0: Box, 
    a#426#9#0: Box, 
    a#426#10#0: Box, 
    a#426#11#0: Box, 
    a#426#12#0: Box, 
    a#426#13#0: Box, 
    a#426#14#0: Box, 
    a#426#15#0: Box, 
    a#426#16#0: Box, 
    a#426#17#0: Box, 
    a#426#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#426#0#0, 
      a#426#1#0, 
      a#426#2#0, 
      a#426#3#0, 
      a#426#4#0, 
      a#426#5#0, 
      a#426#6#0, 
      a#426#7#0, 
      a#426#8#0, 
      a#426#9#0, 
      a#426#10#0, 
      a#426#11#0, 
      a#426#12#0, 
      a#426#13#0, 
      a#426#14#0, 
      a#426#15#0, 
      a#426#16#0, 
      a#426#17#0, 
      a#426#18#0) } 
  _System.Tuple19._1(#_System._tuple#19._#Make19(a#426#0#0, 
        a#426#1#0, 
        a#426#2#0, 
        a#426#3#0, 
        a#426#4#0, 
        a#426#5#0, 
        a#426#6#0, 
        a#426#7#0, 
        a#426#8#0, 
        a#426#9#0, 
        a#426#10#0, 
        a#426#11#0, 
        a#426#12#0, 
        a#426#13#0, 
        a#426#14#0, 
        a#426#15#0, 
        a#426#16#0, 
        a#426#17#0, 
        a#426#18#0))
     == a#426#1#0);

// Inductive rank
axiom (forall a#427#0#0: Box, 
    a#427#1#0: Box, 
    a#427#2#0: Box, 
    a#427#3#0: Box, 
    a#427#4#0: Box, 
    a#427#5#0: Box, 
    a#427#6#0: Box, 
    a#427#7#0: Box, 
    a#427#8#0: Box, 
    a#427#9#0: Box, 
    a#427#10#0: Box, 
    a#427#11#0: Box, 
    a#427#12#0: Box, 
    a#427#13#0: Box, 
    a#427#14#0: Box, 
    a#427#15#0: Box, 
    a#427#16#0: Box, 
    a#427#17#0: Box, 
    a#427#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#427#0#0, 
      a#427#1#0, 
      a#427#2#0, 
      a#427#3#0, 
      a#427#4#0, 
      a#427#5#0, 
      a#427#6#0, 
      a#427#7#0, 
      a#427#8#0, 
      a#427#9#0, 
      a#427#10#0, 
      a#427#11#0, 
      a#427#12#0, 
      a#427#13#0, 
      a#427#14#0, 
      a#427#15#0, 
      a#427#16#0, 
      a#427#17#0, 
      a#427#18#0) } 
  BoxRank(a#427#1#0)
     < DtRank(#_System._tuple#19._#Make19(a#427#0#0, 
        a#427#1#0, 
        a#427#2#0, 
        a#427#3#0, 
        a#427#4#0, 
        a#427#5#0, 
        a#427#6#0, 
        a#427#7#0, 
        a#427#8#0, 
        a#427#9#0, 
        a#427#10#0, 
        a#427#11#0, 
        a#427#12#0, 
        a#427#13#0, 
        a#427#14#0, 
        a#427#15#0, 
        a#427#16#0, 
        a#427#17#0, 
        a#427#18#0)));

function _System.Tuple19._2(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#428#0#0: Box, 
    a#428#1#0: Box, 
    a#428#2#0: Box, 
    a#428#3#0: Box, 
    a#428#4#0: Box, 
    a#428#5#0: Box, 
    a#428#6#0: Box, 
    a#428#7#0: Box, 
    a#428#8#0: Box, 
    a#428#9#0: Box, 
    a#428#10#0: Box, 
    a#428#11#0: Box, 
    a#428#12#0: Box, 
    a#428#13#0: Box, 
    a#428#14#0: Box, 
    a#428#15#0: Box, 
    a#428#16#0: Box, 
    a#428#17#0: Box, 
    a#428#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#428#0#0, 
      a#428#1#0, 
      a#428#2#0, 
      a#428#3#0, 
      a#428#4#0, 
      a#428#5#0, 
      a#428#6#0, 
      a#428#7#0, 
      a#428#8#0, 
      a#428#9#0, 
      a#428#10#0, 
      a#428#11#0, 
      a#428#12#0, 
      a#428#13#0, 
      a#428#14#0, 
      a#428#15#0, 
      a#428#16#0, 
      a#428#17#0, 
      a#428#18#0) } 
  _System.Tuple19._2(#_System._tuple#19._#Make19(a#428#0#0, 
        a#428#1#0, 
        a#428#2#0, 
        a#428#3#0, 
        a#428#4#0, 
        a#428#5#0, 
        a#428#6#0, 
        a#428#7#0, 
        a#428#8#0, 
        a#428#9#0, 
        a#428#10#0, 
        a#428#11#0, 
        a#428#12#0, 
        a#428#13#0, 
        a#428#14#0, 
        a#428#15#0, 
        a#428#16#0, 
        a#428#17#0, 
        a#428#18#0))
     == a#428#2#0);

// Inductive rank
axiom (forall a#429#0#0: Box, 
    a#429#1#0: Box, 
    a#429#2#0: Box, 
    a#429#3#0: Box, 
    a#429#4#0: Box, 
    a#429#5#0: Box, 
    a#429#6#0: Box, 
    a#429#7#0: Box, 
    a#429#8#0: Box, 
    a#429#9#0: Box, 
    a#429#10#0: Box, 
    a#429#11#0: Box, 
    a#429#12#0: Box, 
    a#429#13#0: Box, 
    a#429#14#0: Box, 
    a#429#15#0: Box, 
    a#429#16#0: Box, 
    a#429#17#0: Box, 
    a#429#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#429#0#0, 
      a#429#1#0, 
      a#429#2#0, 
      a#429#3#0, 
      a#429#4#0, 
      a#429#5#0, 
      a#429#6#0, 
      a#429#7#0, 
      a#429#8#0, 
      a#429#9#0, 
      a#429#10#0, 
      a#429#11#0, 
      a#429#12#0, 
      a#429#13#0, 
      a#429#14#0, 
      a#429#15#0, 
      a#429#16#0, 
      a#429#17#0, 
      a#429#18#0) } 
  BoxRank(a#429#2#0)
     < DtRank(#_System._tuple#19._#Make19(a#429#0#0, 
        a#429#1#0, 
        a#429#2#0, 
        a#429#3#0, 
        a#429#4#0, 
        a#429#5#0, 
        a#429#6#0, 
        a#429#7#0, 
        a#429#8#0, 
        a#429#9#0, 
        a#429#10#0, 
        a#429#11#0, 
        a#429#12#0, 
        a#429#13#0, 
        a#429#14#0, 
        a#429#15#0, 
        a#429#16#0, 
        a#429#17#0, 
        a#429#18#0)));

function _System.Tuple19._3(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#430#0#0: Box, 
    a#430#1#0: Box, 
    a#430#2#0: Box, 
    a#430#3#0: Box, 
    a#430#4#0: Box, 
    a#430#5#0: Box, 
    a#430#6#0: Box, 
    a#430#7#0: Box, 
    a#430#8#0: Box, 
    a#430#9#0: Box, 
    a#430#10#0: Box, 
    a#430#11#0: Box, 
    a#430#12#0: Box, 
    a#430#13#0: Box, 
    a#430#14#0: Box, 
    a#430#15#0: Box, 
    a#430#16#0: Box, 
    a#430#17#0: Box, 
    a#430#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#430#0#0, 
      a#430#1#0, 
      a#430#2#0, 
      a#430#3#0, 
      a#430#4#0, 
      a#430#5#0, 
      a#430#6#0, 
      a#430#7#0, 
      a#430#8#0, 
      a#430#9#0, 
      a#430#10#0, 
      a#430#11#0, 
      a#430#12#0, 
      a#430#13#0, 
      a#430#14#0, 
      a#430#15#0, 
      a#430#16#0, 
      a#430#17#0, 
      a#430#18#0) } 
  _System.Tuple19._3(#_System._tuple#19._#Make19(a#430#0#0, 
        a#430#1#0, 
        a#430#2#0, 
        a#430#3#0, 
        a#430#4#0, 
        a#430#5#0, 
        a#430#6#0, 
        a#430#7#0, 
        a#430#8#0, 
        a#430#9#0, 
        a#430#10#0, 
        a#430#11#0, 
        a#430#12#0, 
        a#430#13#0, 
        a#430#14#0, 
        a#430#15#0, 
        a#430#16#0, 
        a#430#17#0, 
        a#430#18#0))
     == a#430#3#0);

// Inductive rank
axiom (forall a#431#0#0: Box, 
    a#431#1#0: Box, 
    a#431#2#0: Box, 
    a#431#3#0: Box, 
    a#431#4#0: Box, 
    a#431#5#0: Box, 
    a#431#6#0: Box, 
    a#431#7#0: Box, 
    a#431#8#0: Box, 
    a#431#9#0: Box, 
    a#431#10#0: Box, 
    a#431#11#0: Box, 
    a#431#12#0: Box, 
    a#431#13#0: Box, 
    a#431#14#0: Box, 
    a#431#15#0: Box, 
    a#431#16#0: Box, 
    a#431#17#0: Box, 
    a#431#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#431#0#0, 
      a#431#1#0, 
      a#431#2#0, 
      a#431#3#0, 
      a#431#4#0, 
      a#431#5#0, 
      a#431#6#0, 
      a#431#7#0, 
      a#431#8#0, 
      a#431#9#0, 
      a#431#10#0, 
      a#431#11#0, 
      a#431#12#0, 
      a#431#13#0, 
      a#431#14#0, 
      a#431#15#0, 
      a#431#16#0, 
      a#431#17#0, 
      a#431#18#0) } 
  BoxRank(a#431#3#0)
     < DtRank(#_System._tuple#19._#Make19(a#431#0#0, 
        a#431#1#0, 
        a#431#2#0, 
        a#431#3#0, 
        a#431#4#0, 
        a#431#5#0, 
        a#431#6#0, 
        a#431#7#0, 
        a#431#8#0, 
        a#431#9#0, 
        a#431#10#0, 
        a#431#11#0, 
        a#431#12#0, 
        a#431#13#0, 
        a#431#14#0, 
        a#431#15#0, 
        a#431#16#0, 
        a#431#17#0, 
        a#431#18#0)));

function _System.Tuple19._4(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#432#0#0: Box, 
    a#432#1#0: Box, 
    a#432#2#0: Box, 
    a#432#3#0: Box, 
    a#432#4#0: Box, 
    a#432#5#0: Box, 
    a#432#6#0: Box, 
    a#432#7#0: Box, 
    a#432#8#0: Box, 
    a#432#9#0: Box, 
    a#432#10#0: Box, 
    a#432#11#0: Box, 
    a#432#12#0: Box, 
    a#432#13#0: Box, 
    a#432#14#0: Box, 
    a#432#15#0: Box, 
    a#432#16#0: Box, 
    a#432#17#0: Box, 
    a#432#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#432#0#0, 
      a#432#1#0, 
      a#432#2#0, 
      a#432#3#0, 
      a#432#4#0, 
      a#432#5#0, 
      a#432#6#0, 
      a#432#7#0, 
      a#432#8#0, 
      a#432#9#0, 
      a#432#10#0, 
      a#432#11#0, 
      a#432#12#0, 
      a#432#13#0, 
      a#432#14#0, 
      a#432#15#0, 
      a#432#16#0, 
      a#432#17#0, 
      a#432#18#0) } 
  _System.Tuple19._4(#_System._tuple#19._#Make19(a#432#0#0, 
        a#432#1#0, 
        a#432#2#0, 
        a#432#3#0, 
        a#432#4#0, 
        a#432#5#0, 
        a#432#6#0, 
        a#432#7#0, 
        a#432#8#0, 
        a#432#9#0, 
        a#432#10#0, 
        a#432#11#0, 
        a#432#12#0, 
        a#432#13#0, 
        a#432#14#0, 
        a#432#15#0, 
        a#432#16#0, 
        a#432#17#0, 
        a#432#18#0))
     == a#432#4#0);

// Inductive rank
axiom (forall a#433#0#0: Box, 
    a#433#1#0: Box, 
    a#433#2#0: Box, 
    a#433#3#0: Box, 
    a#433#4#0: Box, 
    a#433#5#0: Box, 
    a#433#6#0: Box, 
    a#433#7#0: Box, 
    a#433#8#0: Box, 
    a#433#9#0: Box, 
    a#433#10#0: Box, 
    a#433#11#0: Box, 
    a#433#12#0: Box, 
    a#433#13#0: Box, 
    a#433#14#0: Box, 
    a#433#15#0: Box, 
    a#433#16#0: Box, 
    a#433#17#0: Box, 
    a#433#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#433#0#0, 
      a#433#1#0, 
      a#433#2#0, 
      a#433#3#0, 
      a#433#4#0, 
      a#433#5#0, 
      a#433#6#0, 
      a#433#7#0, 
      a#433#8#0, 
      a#433#9#0, 
      a#433#10#0, 
      a#433#11#0, 
      a#433#12#0, 
      a#433#13#0, 
      a#433#14#0, 
      a#433#15#0, 
      a#433#16#0, 
      a#433#17#0, 
      a#433#18#0) } 
  BoxRank(a#433#4#0)
     < DtRank(#_System._tuple#19._#Make19(a#433#0#0, 
        a#433#1#0, 
        a#433#2#0, 
        a#433#3#0, 
        a#433#4#0, 
        a#433#5#0, 
        a#433#6#0, 
        a#433#7#0, 
        a#433#8#0, 
        a#433#9#0, 
        a#433#10#0, 
        a#433#11#0, 
        a#433#12#0, 
        a#433#13#0, 
        a#433#14#0, 
        a#433#15#0, 
        a#433#16#0, 
        a#433#17#0, 
        a#433#18#0)));

function _System.Tuple19._5(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#434#0#0: Box, 
    a#434#1#0: Box, 
    a#434#2#0: Box, 
    a#434#3#0: Box, 
    a#434#4#0: Box, 
    a#434#5#0: Box, 
    a#434#6#0: Box, 
    a#434#7#0: Box, 
    a#434#8#0: Box, 
    a#434#9#0: Box, 
    a#434#10#0: Box, 
    a#434#11#0: Box, 
    a#434#12#0: Box, 
    a#434#13#0: Box, 
    a#434#14#0: Box, 
    a#434#15#0: Box, 
    a#434#16#0: Box, 
    a#434#17#0: Box, 
    a#434#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#434#0#0, 
      a#434#1#0, 
      a#434#2#0, 
      a#434#3#0, 
      a#434#4#0, 
      a#434#5#0, 
      a#434#6#0, 
      a#434#7#0, 
      a#434#8#0, 
      a#434#9#0, 
      a#434#10#0, 
      a#434#11#0, 
      a#434#12#0, 
      a#434#13#0, 
      a#434#14#0, 
      a#434#15#0, 
      a#434#16#0, 
      a#434#17#0, 
      a#434#18#0) } 
  _System.Tuple19._5(#_System._tuple#19._#Make19(a#434#0#0, 
        a#434#1#0, 
        a#434#2#0, 
        a#434#3#0, 
        a#434#4#0, 
        a#434#5#0, 
        a#434#6#0, 
        a#434#7#0, 
        a#434#8#0, 
        a#434#9#0, 
        a#434#10#0, 
        a#434#11#0, 
        a#434#12#0, 
        a#434#13#0, 
        a#434#14#0, 
        a#434#15#0, 
        a#434#16#0, 
        a#434#17#0, 
        a#434#18#0))
     == a#434#5#0);

// Inductive rank
axiom (forall a#435#0#0: Box, 
    a#435#1#0: Box, 
    a#435#2#0: Box, 
    a#435#3#0: Box, 
    a#435#4#0: Box, 
    a#435#5#0: Box, 
    a#435#6#0: Box, 
    a#435#7#0: Box, 
    a#435#8#0: Box, 
    a#435#9#0: Box, 
    a#435#10#0: Box, 
    a#435#11#0: Box, 
    a#435#12#0: Box, 
    a#435#13#0: Box, 
    a#435#14#0: Box, 
    a#435#15#0: Box, 
    a#435#16#0: Box, 
    a#435#17#0: Box, 
    a#435#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#435#0#0, 
      a#435#1#0, 
      a#435#2#0, 
      a#435#3#0, 
      a#435#4#0, 
      a#435#5#0, 
      a#435#6#0, 
      a#435#7#0, 
      a#435#8#0, 
      a#435#9#0, 
      a#435#10#0, 
      a#435#11#0, 
      a#435#12#0, 
      a#435#13#0, 
      a#435#14#0, 
      a#435#15#0, 
      a#435#16#0, 
      a#435#17#0, 
      a#435#18#0) } 
  BoxRank(a#435#5#0)
     < DtRank(#_System._tuple#19._#Make19(a#435#0#0, 
        a#435#1#0, 
        a#435#2#0, 
        a#435#3#0, 
        a#435#4#0, 
        a#435#5#0, 
        a#435#6#0, 
        a#435#7#0, 
        a#435#8#0, 
        a#435#9#0, 
        a#435#10#0, 
        a#435#11#0, 
        a#435#12#0, 
        a#435#13#0, 
        a#435#14#0, 
        a#435#15#0, 
        a#435#16#0, 
        a#435#17#0, 
        a#435#18#0)));

function _System.Tuple19._6(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#436#0#0: Box, 
    a#436#1#0: Box, 
    a#436#2#0: Box, 
    a#436#3#0: Box, 
    a#436#4#0: Box, 
    a#436#5#0: Box, 
    a#436#6#0: Box, 
    a#436#7#0: Box, 
    a#436#8#0: Box, 
    a#436#9#0: Box, 
    a#436#10#0: Box, 
    a#436#11#0: Box, 
    a#436#12#0: Box, 
    a#436#13#0: Box, 
    a#436#14#0: Box, 
    a#436#15#0: Box, 
    a#436#16#0: Box, 
    a#436#17#0: Box, 
    a#436#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#436#0#0, 
      a#436#1#0, 
      a#436#2#0, 
      a#436#3#0, 
      a#436#4#0, 
      a#436#5#0, 
      a#436#6#0, 
      a#436#7#0, 
      a#436#8#0, 
      a#436#9#0, 
      a#436#10#0, 
      a#436#11#0, 
      a#436#12#0, 
      a#436#13#0, 
      a#436#14#0, 
      a#436#15#0, 
      a#436#16#0, 
      a#436#17#0, 
      a#436#18#0) } 
  _System.Tuple19._6(#_System._tuple#19._#Make19(a#436#0#0, 
        a#436#1#0, 
        a#436#2#0, 
        a#436#3#0, 
        a#436#4#0, 
        a#436#5#0, 
        a#436#6#0, 
        a#436#7#0, 
        a#436#8#0, 
        a#436#9#0, 
        a#436#10#0, 
        a#436#11#0, 
        a#436#12#0, 
        a#436#13#0, 
        a#436#14#0, 
        a#436#15#0, 
        a#436#16#0, 
        a#436#17#0, 
        a#436#18#0))
     == a#436#6#0);

// Inductive rank
axiom (forall a#437#0#0: Box, 
    a#437#1#0: Box, 
    a#437#2#0: Box, 
    a#437#3#0: Box, 
    a#437#4#0: Box, 
    a#437#5#0: Box, 
    a#437#6#0: Box, 
    a#437#7#0: Box, 
    a#437#8#0: Box, 
    a#437#9#0: Box, 
    a#437#10#0: Box, 
    a#437#11#0: Box, 
    a#437#12#0: Box, 
    a#437#13#0: Box, 
    a#437#14#0: Box, 
    a#437#15#0: Box, 
    a#437#16#0: Box, 
    a#437#17#0: Box, 
    a#437#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#437#0#0, 
      a#437#1#0, 
      a#437#2#0, 
      a#437#3#0, 
      a#437#4#0, 
      a#437#5#0, 
      a#437#6#0, 
      a#437#7#0, 
      a#437#8#0, 
      a#437#9#0, 
      a#437#10#0, 
      a#437#11#0, 
      a#437#12#0, 
      a#437#13#0, 
      a#437#14#0, 
      a#437#15#0, 
      a#437#16#0, 
      a#437#17#0, 
      a#437#18#0) } 
  BoxRank(a#437#6#0)
     < DtRank(#_System._tuple#19._#Make19(a#437#0#0, 
        a#437#1#0, 
        a#437#2#0, 
        a#437#3#0, 
        a#437#4#0, 
        a#437#5#0, 
        a#437#6#0, 
        a#437#7#0, 
        a#437#8#0, 
        a#437#9#0, 
        a#437#10#0, 
        a#437#11#0, 
        a#437#12#0, 
        a#437#13#0, 
        a#437#14#0, 
        a#437#15#0, 
        a#437#16#0, 
        a#437#17#0, 
        a#437#18#0)));

function _System.Tuple19._7(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#438#0#0: Box, 
    a#438#1#0: Box, 
    a#438#2#0: Box, 
    a#438#3#0: Box, 
    a#438#4#0: Box, 
    a#438#5#0: Box, 
    a#438#6#0: Box, 
    a#438#7#0: Box, 
    a#438#8#0: Box, 
    a#438#9#0: Box, 
    a#438#10#0: Box, 
    a#438#11#0: Box, 
    a#438#12#0: Box, 
    a#438#13#0: Box, 
    a#438#14#0: Box, 
    a#438#15#0: Box, 
    a#438#16#0: Box, 
    a#438#17#0: Box, 
    a#438#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#438#0#0, 
      a#438#1#0, 
      a#438#2#0, 
      a#438#3#0, 
      a#438#4#0, 
      a#438#5#0, 
      a#438#6#0, 
      a#438#7#0, 
      a#438#8#0, 
      a#438#9#0, 
      a#438#10#0, 
      a#438#11#0, 
      a#438#12#0, 
      a#438#13#0, 
      a#438#14#0, 
      a#438#15#0, 
      a#438#16#0, 
      a#438#17#0, 
      a#438#18#0) } 
  _System.Tuple19._7(#_System._tuple#19._#Make19(a#438#0#0, 
        a#438#1#0, 
        a#438#2#0, 
        a#438#3#0, 
        a#438#4#0, 
        a#438#5#0, 
        a#438#6#0, 
        a#438#7#0, 
        a#438#8#0, 
        a#438#9#0, 
        a#438#10#0, 
        a#438#11#0, 
        a#438#12#0, 
        a#438#13#0, 
        a#438#14#0, 
        a#438#15#0, 
        a#438#16#0, 
        a#438#17#0, 
        a#438#18#0))
     == a#438#7#0);

// Inductive rank
axiom (forall a#439#0#0: Box, 
    a#439#1#0: Box, 
    a#439#2#0: Box, 
    a#439#3#0: Box, 
    a#439#4#0: Box, 
    a#439#5#0: Box, 
    a#439#6#0: Box, 
    a#439#7#0: Box, 
    a#439#8#0: Box, 
    a#439#9#0: Box, 
    a#439#10#0: Box, 
    a#439#11#0: Box, 
    a#439#12#0: Box, 
    a#439#13#0: Box, 
    a#439#14#0: Box, 
    a#439#15#0: Box, 
    a#439#16#0: Box, 
    a#439#17#0: Box, 
    a#439#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#439#0#0, 
      a#439#1#0, 
      a#439#2#0, 
      a#439#3#0, 
      a#439#4#0, 
      a#439#5#0, 
      a#439#6#0, 
      a#439#7#0, 
      a#439#8#0, 
      a#439#9#0, 
      a#439#10#0, 
      a#439#11#0, 
      a#439#12#0, 
      a#439#13#0, 
      a#439#14#0, 
      a#439#15#0, 
      a#439#16#0, 
      a#439#17#0, 
      a#439#18#0) } 
  BoxRank(a#439#7#0)
     < DtRank(#_System._tuple#19._#Make19(a#439#0#0, 
        a#439#1#0, 
        a#439#2#0, 
        a#439#3#0, 
        a#439#4#0, 
        a#439#5#0, 
        a#439#6#0, 
        a#439#7#0, 
        a#439#8#0, 
        a#439#9#0, 
        a#439#10#0, 
        a#439#11#0, 
        a#439#12#0, 
        a#439#13#0, 
        a#439#14#0, 
        a#439#15#0, 
        a#439#16#0, 
        a#439#17#0, 
        a#439#18#0)));

function _System.Tuple19._8(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#440#0#0: Box, 
    a#440#1#0: Box, 
    a#440#2#0: Box, 
    a#440#3#0: Box, 
    a#440#4#0: Box, 
    a#440#5#0: Box, 
    a#440#6#0: Box, 
    a#440#7#0: Box, 
    a#440#8#0: Box, 
    a#440#9#0: Box, 
    a#440#10#0: Box, 
    a#440#11#0: Box, 
    a#440#12#0: Box, 
    a#440#13#0: Box, 
    a#440#14#0: Box, 
    a#440#15#0: Box, 
    a#440#16#0: Box, 
    a#440#17#0: Box, 
    a#440#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#440#0#0, 
      a#440#1#0, 
      a#440#2#0, 
      a#440#3#0, 
      a#440#4#0, 
      a#440#5#0, 
      a#440#6#0, 
      a#440#7#0, 
      a#440#8#0, 
      a#440#9#0, 
      a#440#10#0, 
      a#440#11#0, 
      a#440#12#0, 
      a#440#13#0, 
      a#440#14#0, 
      a#440#15#0, 
      a#440#16#0, 
      a#440#17#0, 
      a#440#18#0) } 
  _System.Tuple19._8(#_System._tuple#19._#Make19(a#440#0#0, 
        a#440#1#0, 
        a#440#2#0, 
        a#440#3#0, 
        a#440#4#0, 
        a#440#5#0, 
        a#440#6#0, 
        a#440#7#0, 
        a#440#8#0, 
        a#440#9#0, 
        a#440#10#0, 
        a#440#11#0, 
        a#440#12#0, 
        a#440#13#0, 
        a#440#14#0, 
        a#440#15#0, 
        a#440#16#0, 
        a#440#17#0, 
        a#440#18#0))
     == a#440#8#0);

// Inductive rank
axiom (forall a#441#0#0: Box, 
    a#441#1#0: Box, 
    a#441#2#0: Box, 
    a#441#3#0: Box, 
    a#441#4#0: Box, 
    a#441#5#0: Box, 
    a#441#6#0: Box, 
    a#441#7#0: Box, 
    a#441#8#0: Box, 
    a#441#9#0: Box, 
    a#441#10#0: Box, 
    a#441#11#0: Box, 
    a#441#12#0: Box, 
    a#441#13#0: Box, 
    a#441#14#0: Box, 
    a#441#15#0: Box, 
    a#441#16#0: Box, 
    a#441#17#0: Box, 
    a#441#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#441#0#0, 
      a#441#1#0, 
      a#441#2#0, 
      a#441#3#0, 
      a#441#4#0, 
      a#441#5#0, 
      a#441#6#0, 
      a#441#7#0, 
      a#441#8#0, 
      a#441#9#0, 
      a#441#10#0, 
      a#441#11#0, 
      a#441#12#0, 
      a#441#13#0, 
      a#441#14#0, 
      a#441#15#0, 
      a#441#16#0, 
      a#441#17#0, 
      a#441#18#0) } 
  BoxRank(a#441#8#0)
     < DtRank(#_System._tuple#19._#Make19(a#441#0#0, 
        a#441#1#0, 
        a#441#2#0, 
        a#441#3#0, 
        a#441#4#0, 
        a#441#5#0, 
        a#441#6#0, 
        a#441#7#0, 
        a#441#8#0, 
        a#441#9#0, 
        a#441#10#0, 
        a#441#11#0, 
        a#441#12#0, 
        a#441#13#0, 
        a#441#14#0, 
        a#441#15#0, 
        a#441#16#0, 
        a#441#17#0, 
        a#441#18#0)));

function _System.Tuple19._9(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#442#0#0: Box, 
    a#442#1#0: Box, 
    a#442#2#0: Box, 
    a#442#3#0: Box, 
    a#442#4#0: Box, 
    a#442#5#0: Box, 
    a#442#6#0: Box, 
    a#442#7#0: Box, 
    a#442#8#0: Box, 
    a#442#9#0: Box, 
    a#442#10#0: Box, 
    a#442#11#0: Box, 
    a#442#12#0: Box, 
    a#442#13#0: Box, 
    a#442#14#0: Box, 
    a#442#15#0: Box, 
    a#442#16#0: Box, 
    a#442#17#0: Box, 
    a#442#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#442#0#0, 
      a#442#1#0, 
      a#442#2#0, 
      a#442#3#0, 
      a#442#4#0, 
      a#442#5#0, 
      a#442#6#0, 
      a#442#7#0, 
      a#442#8#0, 
      a#442#9#0, 
      a#442#10#0, 
      a#442#11#0, 
      a#442#12#0, 
      a#442#13#0, 
      a#442#14#0, 
      a#442#15#0, 
      a#442#16#0, 
      a#442#17#0, 
      a#442#18#0) } 
  _System.Tuple19._9(#_System._tuple#19._#Make19(a#442#0#0, 
        a#442#1#0, 
        a#442#2#0, 
        a#442#3#0, 
        a#442#4#0, 
        a#442#5#0, 
        a#442#6#0, 
        a#442#7#0, 
        a#442#8#0, 
        a#442#9#0, 
        a#442#10#0, 
        a#442#11#0, 
        a#442#12#0, 
        a#442#13#0, 
        a#442#14#0, 
        a#442#15#0, 
        a#442#16#0, 
        a#442#17#0, 
        a#442#18#0))
     == a#442#9#0);

// Inductive rank
axiom (forall a#443#0#0: Box, 
    a#443#1#0: Box, 
    a#443#2#0: Box, 
    a#443#3#0: Box, 
    a#443#4#0: Box, 
    a#443#5#0: Box, 
    a#443#6#0: Box, 
    a#443#7#0: Box, 
    a#443#8#0: Box, 
    a#443#9#0: Box, 
    a#443#10#0: Box, 
    a#443#11#0: Box, 
    a#443#12#0: Box, 
    a#443#13#0: Box, 
    a#443#14#0: Box, 
    a#443#15#0: Box, 
    a#443#16#0: Box, 
    a#443#17#0: Box, 
    a#443#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#443#0#0, 
      a#443#1#0, 
      a#443#2#0, 
      a#443#3#0, 
      a#443#4#0, 
      a#443#5#0, 
      a#443#6#0, 
      a#443#7#0, 
      a#443#8#0, 
      a#443#9#0, 
      a#443#10#0, 
      a#443#11#0, 
      a#443#12#0, 
      a#443#13#0, 
      a#443#14#0, 
      a#443#15#0, 
      a#443#16#0, 
      a#443#17#0, 
      a#443#18#0) } 
  BoxRank(a#443#9#0)
     < DtRank(#_System._tuple#19._#Make19(a#443#0#0, 
        a#443#1#0, 
        a#443#2#0, 
        a#443#3#0, 
        a#443#4#0, 
        a#443#5#0, 
        a#443#6#0, 
        a#443#7#0, 
        a#443#8#0, 
        a#443#9#0, 
        a#443#10#0, 
        a#443#11#0, 
        a#443#12#0, 
        a#443#13#0, 
        a#443#14#0, 
        a#443#15#0, 
        a#443#16#0, 
        a#443#17#0, 
        a#443#18#0)));

function _System.Tuple19._10(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#444#0#0: Box, 
    a#444#1#0: Box, 
    a#444#2#0: Box, 
    a#444#3#0: Box, 
    a#444#4#0: Box, 
    a#444#5#0: Box, 
    a#444#6#0: Box, 
    a#444#7#0: Box, 
    a#444#8#0: Box, 
    a#444#9#0: Box, 
    a#444#10#0: Box, 
    a#444#11#0: Box, 
    a#444#12#0: Box, 
    a#444#13#0: Box, 
    a#444#14#0: Box, 
    a#444#15#0: Box, 
    a#444#16#0: Box, 
    a#444#17#0: Box, 
    a#444#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#444#0#0, 
      a#444#1#0, 
      a#444#2#0, 
      a#444#3#0, 
      a#444#4#0, 
      a#444#5#0, 
      a#444#6#0, 
      a#444#7#0, 
      a#444#8#0, 
      a#444#9#0, 
      a#444#10#0, 
      a#444#11#0, 
      a#444#12#0, 
      a#444#13#0, 
      a#444#14#0, 
      a#444#15#0, 
      a#444#16#0, 
      a#444#17#0, 
      a#444#18#0) } 
  _System.Tuple19._10(#_System._tuple#19._#Make19(a#444#0#0, 
        a#444#1#0, 
        a#444#2#0, 
        a#444#3#0, 
        a#444#4#0, 
        a#444#5#0, 
        a#444#6#0, 
        a#444#7#0, 
        a#444#8#0, 
        a#444#9#0, 
        a#444#10#0, 
        a#444#11#0, 
        a#444#12#0, 
        a#444#13#0, 
        a#444#14#0, 
        a#444#15#0, 
        a#444#16#0, 
        a#444#17#0, 
        a#444#18#0))
     == a#444#10#0);

// Inductive rank
axiom (forall a#445#0#0: Box, 
    a#445#1#0: Box, 
    a#445#2#0: Box, 
    a#445#3#0: Box, 
    a#445#4#0: Box, 
    a#445#5#0: Box, 
    a#445#6#0: Box, 
    a#445#7#0: Box, 
    a#445#8#0: Box, 
    a#445#9#0: Box, 
    a#445#10#0: Box, 
    a#445#11#0: Box, 
    a#445#12#0: Box, 
    a#445#13#0: Box, 
    a#445#14#0: Box, 
    a#445#15#0: Box, 
    a#445#16#0: Box, 
    a#445#17#0: Box, 
    a#445#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#445#0#0, 
      a#445#1#0, 
      a#445#2#0, 
      a#445#3#0, 
      a#445#4#0, 
      a#445#5#0, 
      a#445#6#0, 
      a#445#7#0, 
      a#445#8#0, 
      a#445#9#0, 
      a#445#10#0, 
      a#445#11#0, 
      a#445#12#0, 
      a#445#13#0, 
      a#445#14#0, 
      a#445#15#0, 
      a#445#16#0, 
      a#445#17#0, 
      a#445#18#0) } 
  BoxRank(a#445#10#0)
     < DtRank(#_System._tuple#19._#Make19(a#445#0#0, 
        a#445#1#0, 
        a#445#2#0, 
        a#445#3#0, 
        a#445#4#0, 
        a#445#5#0, 
        a#445#6#0, 
        a#445#7#0, 
        a#445#8#0, 
        a#445#9#0, 
        a#445#10#0, 
        a#445#11#0, 
        a#445#12#0, 
        a#445#13#0, 
        a#445#14#0, 
        a#445#15#0, 
        a#445#16#0, 
        a#445#17#0, 
        a#445#18#0)));

function _System.Tuple19._11(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#446#0#0: Box, 
    a#446#1#0: Box, 
    a#446#2#0: Box, 
    a#446#3#0: Box, 
    a#446#4#0: Box, 
    a#446#5#0: Box, 
    a#446#6#0: Box, 
    a#446#7#0: Box, 
    a#446#8#0: Box, 
    a#446#9#0: Box, 
    a#446#10#0: Box, 
    a#446#11#0: Box, 
    a#446#12#0: Box, 
    a#446#13#0: Box, 
    a#446#14#0: Box, 
    a#446#15#0: Box, 
    a#446#16#0: Box, 
    a#446#17#0: Box, 
    a#446#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#446#0#0, 
      a#446#1#0, 
      a#446#2#0, 
      a#446#3#0, 
      a#446#4#0, 
      a#446#5#0, 
      a#446#6#0, 
      a#446#7#0, 
      a#446#8#0, 
      a#446#9#0, 
      a#446#10#0, 
      a#446#11#0, 
      a#446#12#0, 
      a#446#13#0, 
      a#446#14#0, 
      a#446#15#0, 
      a#446#16#0, 
      a#446#17#0, 
      a#446#18#0) } 
  _System.Tuple19._11(#_System._tuple#19._#Make19(a#446#0#0, 
        a#446#1#0, 
        a#446#2#0, 
        a#446#3#0, 
        a#446#4#0, 
        a#446#5#0, 
        a#446#6#0, 
        a#446#7#0, 
        a#446#8#0, 
        a#446#9#0, 
        a#446#10#0, 
        a#446#11#0, 
        a#446#12#0, 
        a#446#13#0, 
        a#446#14#0, 
        a#446#15#0, 
        a#446#16#0, 
        a#446#17#0, 
        a#446#18#0))
     == a#446#11#0);

// Inductive rank
axiom (forall a#447#0#0: Box, 
    a#447#1#0: Box, 
    a#447#2#0: Box, 
    a#447#3#0: Box, 
    a#447#4#0: Box, 
    a#447#5#0: Box, 
    a#447#6#0: Box, 
    a#447#7#0: Box, 
    a#447#8#0: Box, 
    a#447#9#0: Box, 
    a#447#10#0: Box, 
    a#447#11#0: Box, 
    a#447#12#0: Box, 
    a#447#13#0: Box, 
    a#447#14#0: Box, 
    a#447#15#0: Box, 
    a#447#16#0: Box, 
    a#447#17#0: Box, 
    a#447#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#447#0#0, 
      a#447#1#0, 
      a#447#2#0, 
      a#447#3#0, 
      a#447#4#0, 
      a#447#5#0, 
      a#447#6#0, 
      a#447#7#0, 
      a#447#8#0, 
      a#447#9#0, 
      a#447#10#0, 
      a#447#11#0, 
      a#447#12#0, 
      a#447#13#0, 
      a#447#14#0, 
      a#447#15#0, 
      a#447#16#0, 
      a#447#17#0, 
      a#447#18#0) } 
  BoxRank(a#447#11#0)
     < DtRank(#_System._tuple#19._#Make19(a#447#0#0, 
        a#447#1#0, 
        a#447#2#0, 
        a#447#3#0, 
        a#447#4#0, 
        a#447#5#0, 
        a#447#6#0, 
        a#447#7#0, 
        a#447#8#0, 
        a#447#9#0, 
        a#447#10#0, 
        a#447#11#0, 
        a#447#12#0, 
        a#447#13#0, 
        a#447#14#0, 
        a#447#15#0, 
        a#447#16#0, 
        a#447#17#0, 
        a#447#18#0)));

function _System.Tuple19._12(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#448#0#0: Box, 
    a#448#1#0: Box, 
    a#448#2#0: Box, 
    a#448#3#0: Box, 
    a#448#4#0: Box, 
    a#448#5#0: Box, 
    a#448#6#0: Box, 
    a#448#7#0: Box, 
    a#448#8#0: Box, 
    a#448#9#0: Box, 
    a#448#10#0: Box, 
    a#448#11#0: Box, 
    a#448#12#0: Box, 
    a#448#13#0: Box, 
    a#448#14#0: Box, 
    a#448#15#0: Box, 
    a#448#16#0: Box, 
    a#448#17#0: Box, 
    a#448#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#448#0#0, 
      a#448#1#0, 
      a#448#2#0, 
      a#448#3#0, 
      a#448#4#0, 
      a#448#5#0, 
      a#448#6#0, 
      a#448#7#0, 
      a#448#8#0, 
      a#448#9#0, 
      a#448#10#0, 
      a#448#11#0, 
      a#448#12#0, 
      a#448#13#0, 
      a#448#14#0, 
      a#448#15#0, 
      a#448#16#0, 
      a#448#17#0, 
      a#448#18#0) } 
  _System.Tuple19._12(#_System._tuple#19._#Make19(a#448#0#0, 
        a#448#1#0, 
        a#448#2#0, 
        a#448#3#0, 
        a#448#4#0, 
        a#448#5#0, 
        a#448#6#0, 
        a#448#7#0, 
        a#448#8#0, 
        a#448#9#0, 
        a#448#10#0, 
        a#448#11#0, 
        a#448#12#0, 
        a#448#13#0, 
        a#448#14#0, 
        a#448#15#0, 
        a#448#16#0, 
        a#448#17#0, 
        a#448#18#0))
     == a#448#12#0);

// Inductive rank
axiom (forall a#449#0#0: Box, 
    a#449#1#0: Box, 
    a#449#2#0: Box, 
    a#449#3#0: Box, 
    a#449#4#0: Box, 
    a#449#5#0: Box, 
    a#449#6#0: Box, 
    a#449#7#0: Box, 
    a#449#8#0: Box, 
    a#449#9#0: Box, 
    a#449#10#0: Box, 
    a#449#11#0: Box, 
    a#449#12#0: Box, 
    a#449#13#0: Box, 
    a#449#14#0: Box, 
    a#449#15#0: Box, 
    a#449#16#0: Box, 
    a#449#17#0: Box, 
    a#449#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#449#0#0, 
      a#449#1#0, 
      a#449#2#0, 
      a#449#3#0, 
      a#449#4#0, 
      a#449#5#0, 
      a#449#6#0, 
      a#449#7#0, 
      a#449#8#0, 
      a#449#9#0, 
      a#449#10#0, 
      a#449#11#0, 
      a#449#12#0, 
      a#449#13#0, 
      a#449#14#0, 
      a#449#15#0, 
      a#449#16#0, 
      a#449#17#0, 
      a#449#18#0) } 
  BoxRank(a#449#12#0)
     < DtRank(#_System._tuple#19._#Make19(a#449#0#0, 
        a#449#1#0, 
        a#449#2#0, 
        a#449#3#0, 
        a#449#4#0, 
        a#449#5#0, 
        a#449#6#0, 
        a#449#7#0, 
        a#449#8#0, 
        a#449#9#0, 
        a#449#10#0, 
        a#449#11#0, 
        a#449#12#0, 
        a#449#13#0, 
        a#449#14#0, 
        a#449#15#0, 
        a#449#16#0, 
        a#449#17#0, 
        a#449#18#0)));

function _System.Tuple19._13(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#450#0#0: Box, 
    a#450#1#0: Box, 
    a#450#2#0: Box, 
    a#450#3#0: Box, 
    a#450#4#0: Box, 
    a#450#5#0: Box, 
    a#450#6#0: Box, 
    a#450#7#0: Box, 
    a#450#8#0: Box, 
    a#450#9#0: Box, 
    a#450#10#0: Box, 
    a#450#11#0: Box, 
    a#450#12#0: Box, 
    a#450#13#0: Box, 
    a#450#14#0: Box, 
    a#450#15#0: Box, 
    a#450#16#0: Box, 
    a#450#17#0: Box, 
    a#450#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#450#0#0, 
      a#450#1#0, 
      a#450#2#0, 
      a#450#3#0, 
      a#450#4#0, 
      a#450#5#0, 
      a#450#6#0, 
      a#450#7#0, 
      a#450#8#0, 
      a#450#9#0, 
      a#450#10#0, 
      a#450#11#0, 
      a#450#12#0, 
      a#450#13#0, 
      a#450#14#0, 
      a#450#15#0, 
      a#450#16#0, 
      a#450#17#0, 
      a#450#18#0) } 
  _System.Tuple19._13(#_System._tuple#19._#Make19(a#450#0#0, 
        a#450#1#0, 
        a#450#2#0, 
        a#450#3#0, 
        a#450#4#0, 
        a#450#5#0, 
        a#450#6#0, 
        a#450#7#0, 
        a#450#8#0, 
        a#450#9#0, 
        a#450#10#0, 
        a#450#11#0, 
        a#450#12#0, 
        a#450#13#0, 
        a#450#14#0, 
        a#450#15#0, 
        a#450#16#0, 
        a#450#17#0, 
        a#450#18#0))
     == a#450#13#0);

// Inductive rank
axiom (forall a#451#0#0: Box, 
    a#451#1#0: Box, 
    a#451#2#0: Box, 
    a#451#3#0: Box, 
    a#451#4#0: Box, 
    a#451#5#0: Box, 
    a#451#6#0: Box, 
    a#451#7#0: Box, 
    a#451#8#0: Box, 
    a#451#9#0: Box, 
    a#451#10#0: Box, 
    a#451#11#0: Box, 
    a#451#12#0: Box, 
    a#451#13#0: Box, 
    a#451#14#0: Box, 
    a#451#15#0: Box, 
    a#451#16#0: Box, 
    a#451#17#0: Box, 
    a#451#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#451#0#0, 
      a#451#1#0, 
      a#451#2#0, 
      a#451#3#0, 
      a#451#4#0, 
      a#451#5#0, 
      a#451#6#0, 
      a#451#7#0, 
      a#451#8#0, 
      a#451#9#0, 
      a#451#10#0, 
      a#451#11#0, 
      a#451#12#0, 
      a#451#13#0, 
      a#451#14#0, 
      a#451#15#0, 
      a#451#16#0, 
      a#451#17#0, 
      a#451#18#0) } 
  BoxRank(a#451#13#0)
     < DtRank(#_System._tuple#19._#Make19(a#451#0#0, 
        a#451#1#0, 
        a#451#2#0, 
        a#451#3#0, 
        a#451#4#0, 
        a#451#5#0, 
        a#451#6#0, 
        a#451#7#0, 
        a#451#8#0, 
        a#451#9#0, 
        a#451#10#0, 
        a#451#11#0, 
        a#451#12#0, 
        a#451#13#0, 
        a#451#14#0, 
        a#451#15#0, 
        a#451#16#0, 
        a#451#17#0, 
        a#451#18#0)));

function _System.Tuple19._14(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#452#0#0: Box, 
    a#452#1#0: Box, 
    a#452#2#0: Box, 
    a#452#3#0: Box, 
    a#452#4#0: Box, 
    a#452#5#0: Box, 
    a#452#6#0: Box, 
    a#452#7#0: Box, 
    a#452#8#0: Box, 
    a#452#9#0: Box, 
    a#452#10#0: Box, 
    a#452#11#0: Box, 
    a#452#12#0: Box, 
    a#452#13#0: Box, 
    a#452#14#0: Box, 
    a#452#15#0: Box, 
    a#452#16#0: Box, 
    a#452#17#0: Box, 
    a#452#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#452#0#0, 
      a#452#1#0, 
      a#452#2#0, 
      a#452#3#0, 
      a#452#4#0, 
      a#452#5#0, 
      a#452#6#0, 
      a#452#7#0, 
      a#452#8#0, 
      a#452#9#0, 
      a#452#10#0, 
      a#452#11#0, 
      a#452#12#0, 
      a#452#13#0, 
      a#452#14#0, 
      a#452#15#0, 
      a#452#16#0, 
      a#452#17#0, 
      a#452#18#0) } 
  _System.Tuple19._14(#_System._tuple#19._#Make19(a#452#0#0, 
        a#452#1#0, 
        a#452#2#0, 
        a#452#3#0, 
        a#452#4#0, 
        a#452#5#0, 
        a#452#6#0, 
        a#452#7#0, 
        a#452#8#0, 
        a#452#9#0, 
        a#452#10#0, 
        a#452#11#0, 
        a#452#12#0, 
        a#452#13#0, 
        a#452#14#0, 
        a#452#15#0, 
        a#452#16#0, 
        a#452#17#0, 
        a#452#18#0))
     == a#452#14#0);

// Inductive rank
axiom (forall a#453#0#0: Box, 
    a#453#1#0: Box, 
    a#453#2#0: Box, 
    a#453#3#0: Box, 
    a#453#4#0: Box, 
    a#453#5#0: Box, 
    a#453#6#0: Box, 
    a#453#7#0: Box, 
    a#453#8#0: Box, 
    a#453#9#0: Box, 
    a#453#10#0: Box, 
    a#453#11#0: Box, 
    a#453#12#0: Box, 
    a#453#13#0: Box, 
    a#453#14#0: Box, 
    a#453#15#0: Box, 
    a#453#16#0: Box, 
    a#453#17#0: Box, 
    a#453#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#453#0#0, 
      a#453#1#0, 
      a#453#2#0, 
      a#453#3#0, 
      a#453#4#0, 
      a#453#5#0, 
      a#453#6#0, 
      a#453#7#0, 
      a#453#8#0, 
      a#453#9#0, 
      a#453#10#0, 
      a#453#11#0, 
      a#453#12#0, 
      a#453#13#0, 
      a#453#14#0, 
      a#453#15#0, 
      a#453#16#0, 
      a#453#17#0, 
      a#453#18#0) } 
  BoxRank(a#453#14#0)
     < DtRank(#_System._tuple#19._#Make19(a#453#0#0, 
        a#453#1#0, 
        a#453#2#0, 
        a#453#3#0, 
        a#453#4#0, 
        a#453#5#0, 
        a#453#6#0, 
        a#453#7#0, 
        a#453#8#0, 
        a#453#9#0, 
        a#453#10#0, 
        a#453#11#0, 
        a#453#12#0, 
        a#453#13#0, 
        a#453#14#0, 
        a#453#15#0, 
        a#453#16#0, 
        a#453#17#0, 
        a#453#18#0)));

function _System.Tuple19._15(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#454#0#0: Box, 
    a#454#1#0: Box, 
    a#454#2#0: Box, 
    a#454#3#0: Box, 
    a#454#4#0: Box, 
    a#454#5#0: Box, 
    a#454#6#0: Box, 
    a#454#7#0: Box, 
    a#454#8#0: Box, 
    a#454#9#0: Box, 
    a#454#10#0: Box, 
    a#454#11#0: Box, 
    a#454#12#0: Box, 
    a#454#13#0: Box, 
    a#454#14#0: Box, 
    a#454#15#0: Box, 
    a#454#16#0: Box, 
    a#454#17#0: Box, 
    a#454#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#454#0#0, 
      a#454#1#0, 
      a#454#2#0, 
      a#454#3#0, 
      a#454#4#0, 
      a#454#5#0, 
      a#454#6#0, 
      a#454#7#0, 
      a#454#8#0, 
      a#454#9#0, 
      a#454#10#0, 
      a#454#11#0, 
      a#454#12#0, 
      a#454#13#0, 
      a#454#14#0, 
      a#454#15#0, 
      a#454#16#0, 
      a#454#17#0, 
      a#454#18#0) } 
  _System.Tuple19._15(#_System._tuple#19._#Make19(a#454#0#0, 
        a#454#1#0, 
        a#454#2#0, 
        a#454#3#0, 
        a#454#4#0, 
        a#454#5#0, 
        a#454#6#0, 
        a#454#7#0, 
        a#454#8#0, 
        a#454#9#0, 
        a#454#10#0, 
        a#454#11#0, 
        a#454#12#0, 
        a#454#13#0, 
        a#454#14#0, 
        a#454#15#0, 
        a#454#16#0, 
        a#454#17#0, 
        a#454#18#0))
     == a#454#15#0);

// Inductive rank
axiom (forall a#455#0#0: Box, 
    a#455#1#0: Box, 
    a#455#2#0: Box, 
    a#455#3#0: Box, 
    a#455#4#0: Box, 
    a#455#5#0: Box, 
    a#455#6#0: Box, 
    a#455#7#0: Box, 
    a#455#8#0: Box, 
    a#455#9#0: Box, 
    a#455#10#0: Box, 
    a#455#11#0: Box, 
    a#455#12#0: Box, 
    a#455#13#0: Box, 
    a#455#14#0: Box, 
    a#455#15#0: Box, 
    a#455#16#0: Box, 
    a#455#17#0: Box, 
    a#455#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#455#0#0, 
      a#455#1#0, 
      a#455#2#0, 
      a#455#3#0, 
      a#455#4#0, 
      a#455#5#0, 
      a#455#6#0, 
      a#455#7#0, 
      a#455#8#0, 
      a#455#9#0, 
      a#455#10#0, 
      a#455#11#0, 
      a#455#12#0, 
      a#455#13#0, 
      a#455#14#0, 
      a#455#15#0, 
      a#455#16#0, 
      a#455#17#0, 
      a#455#18#0) } 
  BoxRank(a#455#15#0)
     < DtRank(#_System._tuple#19._#Make19(a#455#0#0, 
        a#455#1#0, 
        a#455#2#0, 
        a#455#3#0, 
        a#455#4#0, 
        a#455#5#0, 
        a#455#6#0, 
        a#455#7#0, 
        a#455#8#0, 
        a#455#9#0, 
        a#455#10#0, 
        a#455#11#0, 
        a#455#12#0, 
        a#455#13#0, 
        a#455#14#0, 
        a#455#15#0, 
        a#455#16#0, 
        a#455#17#0, 
        a#455#18#0)));

function _System.Tuple19._16(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#456#0#0: Box, 
    a#456#1#0: Box, 
    a#456#2#0: Box, 
    a#456#3#0: Box, 
    a#456#4#0: Box, 
    a#456#5#0: Box, 
    a#456#6#0: Box, 
    a#456#7#0: Box, 
    a#456#8#0: Box, 
    a#456#9#0: Box, 
    a#456#10#0: Box, 
    a#456#11#0: Box, 
    a#456#12#0: Box, 
    a#456#13#0: Box, 
    a#456#14#0: Box, 
    a#456#15#0: Box, 
    a#456#16#0: Box, 
    a#456#17#0: Box, 
    a#456#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#456#0#0, 
      a#456#1#0, 
      a#456#2#0, 
      a#456#3#0, 
      a#456#4#0, 
      a#456#5#0, 
      a#456#6#0, 
      a#456#7#0, 
      a#456#8#0, 
      a#456#9#0, 
      a#456#10#0, 
      a#456#11#0, 
      a#456#12#0, 
      a#456#13#0, 
      a#456#14#0, 
      a#456#15#0, 
      a#456#16#0, 
      a#456#17#0, 
      a#456#18#0) } 
  _System.Tuple19._16(#_System._tuple#19._#Make19(a#456#0#0, 
        a#456#1#0, 
        a#456#2#0, 
        a#456#3#0, 
        a#456#4#0, 
        a#456#5#0, 
        a#456#6#0, 
        a#456#7#0, 
        a#456#8#0, 
        a#456#9#0, 
        a#456#10#0, 
        a#456#11#0, 
        a#456#12#0, 
        a#456#13#0, 
        a#456#14#0, 
        a#456#15#0, 
        a#456#16#0, 
        a#456#17#0, 
        a#456#18#0))
     == a#456#16#0);

// Inductive rank
axiom (forall a#457#0#0: Box, 
    a#457#1#0: Box, 
    a#457#2#0: Box, 
    a#457#3#0: Box, 
    a#457#4#0: Box, 
    a#457#5#0: Box, 
    a#457#6#0: Box, 
    a#457#7#0: Box, 
    a#457#8#0: Box, 
    a#457#9#0: Box, 
    a#457#10#0: Box, 
    a#457#11#0: Box, 
    a#457#12#0: Box, 
    a#457#13#0: Box, 
    a#457#14#0: Box, 
    a#457#15#0: Box, 
    a#457#16#0: Box, 
    a#457#17#0: Box, 
    a#457#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#457#0#0, 
      a#457#1#0, 
      a#457#2#0, 
      a#457#3#0, 
      a#457#4#0, 
      a#457#5#0, 
      a#457#6#0, 
      a#457#7#0, 
      a#457#8#0, 
      a#457#9#0, 
      a#457#10#0, 
      a#457#11#0, 
      a#457#12#0, 
      a#457#13#0, 
      a#457#14#0, 
      a#457#15#0, 
      a#457#16#0, 
      a#457#17#0, 
      a#457#18#0) } 
  BoxRank(a#457#16#0)
     < DtRank(#_System._tuple#19._#Make19(a#457#0#0, 
        a#457#1#0, 
        a#457#2#0, 
        a#457#3#0, 
        a#457#4#0, 
        a#457#5#0, 
        a#457#6#0, 
        a#457#7#0, 
        a#457#8#0, 
        a#457#9#0, 
        a#457#10#0, 
        a#457#11#0, 
        a#457#12#0, 
        a#457#13#0, 
        a#457#14#0, 
        a#457#15#0, 
        a#457#16#0, 
        a#457#17#0, 
        a#457#18#0)));

function _System.Tuple19._17(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#458#0#0: Box, 
    a#458#1#0: Box, 
    a#458#2#0: Box, 
    a#458#3#0: Box, 
    a#458#4#0: Box, 
    a#458#5#0: Box, 
    a#458#6#0: Box, 
    a#458#7#0: Box, 
    a#458#8#0: Box, 
    a#458#9#0: Box, 
    a#458#10#0: Box, 
    a#458#11#0: Box, 
    a#458#12#0: Box, 
    a#458#13#0: Box, 
    a#458#14#0: Box, 
    a#458#15#0: Box, 
    a#458#16#0: Box, 
    a#458#17#0: Box, 
    a#458#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#458#0#0, 
      a#458#1#0, 
      a#458#2#0, 
      a#458#3#0, 
      a#458#4#0, 
      a#458#5#0, 
      a#458#6#0, 
      a#458#7#0, 
      a#458#8#0, 
      a#458#9#0, 
      a#458#10#0, 
      a#458#11#0, 
      a#458#12#0, 
      a#458#13#0, 
      a#458#14#0, 
      a#458#15#0, 
      a#458#16#0, 
      a#458#17#0, 
      a#458#18#0) } 
  _System.Tuple19._17(#_System._tuple#19._#Make19(a#458#0#0, 
        a#458#1#0, 
        a#458#2#0, 
        a#458#3#0, 
        a#458#4#0, 
        a#458#5#0, 
        a#458#6#0, 
        a#458#7#0, 
        a#458#8#0, 
        a#458#9#0, 
        a#458#10#0, 
        a#458#11#0, 
        a#458#12#0, 
        a#458#13#0, 
        a#458#14#0, 
        a#458#15#0, 
        a#458#16#0, 
        a#458#17#0, 
        a#458#18#0))
     == a#458#17#0);

// Inductive rank
axiom (forall a#459#0#0: Box, 
    a#459#1#0: Box, 
    a#459#2#0: Box, 
    a#459#3#0: Box, 
    a#459#4#0: Box, 
    a#459#5#0: Box, 
    a#459#6#0: Box, 
    a#459#7#0: Box, 
    a#459#8#0: Box, 
    a#459#9#0: Box, 
    a#459#10#0: Box, 
    a#459#11#0: Box, 
    a#459#12#0: Box, 
    a#459#13#0: Box, 
    a#459#14#0: Box, 
    a#459#15#0: Box, 
    a#459#16#0: Box, 
    a#459#17#0: Box, 
    a#459#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#459#0#0, 
      a#459#1#0, 
      a#459#2#0, 
      a#459#3#0, 
      a#459#4#0, 
      a#459#5#0, 
      a#459#6#0, 
      a#459#7#0, 
      a#459#8#0, 
      a#459#9#0, 
      a#459#10#0, 
      a#459#11#0, 
      a#459#12#0, 
      a#459#13#0, 
      a#459#14#0, 
      a#459#15#0, 
      a#459#16#0, 
      a#459#17#0, 
      a#459#18#0) } 
  BoxRank(a#459#17#0)
     < DtRank(#_System._tuple#19._#Make19(a#459#0#0, 
        a#459#1#0, 
        a#459#2#0, 
        a#459#3#0, 
        a#459#4#0, 
        a#459#5#0, 
        a#459#6#0, 
        a#459#7#0, 
        a#459#8#0, 
        a#459#9#0, 
        a#459#10#0, 
        a#459#11#0, 
        a#459#12#0, 
        a#459#13#0, 
        a#459#14#0, 
        a#459#15#0, 
        a#459#16#0, 
        a#459#17#0, 
        a#459#18#0)));

function _System.Tuple19._18(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#460#0#0: Box, 
    a#460#1#0: Box, 
    a#460#2#0: Box, 
    a#460#3#0: Box, 
    a#460#4#0: Box, 
    a#460#5#0: Box, 
    a#460#6#0: Box, 
    a#460#7#0: Box, 
    a#460#8#0: Box, 
    a#460#9#0: Box, 
    a#460#10#0: Box, 
    a#460#11#0: Box, 
    a#460#12#0: Box, 
    a#460#13#0: Box, 
    a#460#14#0: Box, 
    a#460#15#0: Box, 
    a#460#16#0: Box, 
    a#460#17#0: Box, 
    a#460#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#460#0#0, 
      a#460#1#0, 
      a#460#2#0, 
      a#460#3#0, 
      a#460#4#0, 
      a#460#5#0, 
      a#460#6#0, 
      a#460#7#0, 
      a#460#8#0, 
      a#460#9#0, 
      a#460#10#0, 
      a#460#11#0, 
      a#460#12#0, 
      a#460#13#0, 
      a#460#14#0, 
      a#460#15#0, 
      a#460#16#0, 
      a#460#17#0, 
      a#460#18#0) } 
  _System.Tuple19._18(#_System._tuple#19._#Make19(a#460#0#0, 
        a#460#1#0, 
        a#460#2#0, 
        a#460#3#0, 
        a#460#4#0, 
        a#460#5#0, 
        a#460#6#0, 
        a#460#7#0, 
        a#460#8#0, 
        a#460#9#0, 
        a#460#10#0, 
        a#460#11#0, 
        a#460#12#0, 
        a#460#13#0, 
        a#460#14#0, 
        a#460#15#0, 
        a#460#16#0, 
        a#460#17#0, 
        a#460#18#0))
     == a#460#18#0);

// Inductive rank
axiom (forall a#461#0#0: Box, 
    a#461#1#0: Box, 
    a#461#2#0: Box, 
    a#461#3#0: Box, 
    a#461#4#0: Box, 
    a#461#5#0: Box, 
    a#461#6#0: Box, 
    a#461#7#0: Box, 
    a#461#8#0: Box, 
    a#461#9#0: Box, 
    a#461#10#0: Box, 
    a#461#11#0: Box, 
    a#461#12#0: Box, 
    a#461#13#0: Box, 
    a#461#14#0: Box, 
    a#461#15#0: Box, 
    a#461#16#0: Box, 
    a#461#17#0: Box, 
    a#461#18#0: Box :: 
  { #_System._tuple#19._#Make19(a#461#0#0, 
      a#461#1#0, 
      a#461#2#0, 
      a#461#3#0, 
      a#461#4#0, 
      a#461#5#0, 
      a#461#6#0, 
      a#461#7#0, 
      a#461#8#0, 
      a#461#9#0, 
      a#461#10#0, 
      a#461#11#0, 
      a#461#12#0, 
      a#461#13#0, 
      a#461#14#0, 
      a#461#15#0, 
      a#461#16#0, 
      a#461#17#0, 
      a#461#18#0) } 
  BoxRank(a#461#18#0)
     < DtRank(#_System._tuple#19._#Make19(a#461#0#0, 
        a#461#1#0, 
        a#461#2#0, 
        a#461#3#0, 
        a#461#4#0, 
        a#461#5#0, 
        a#461#6#0, 
        a#461#7#0, 
        a#461#8#0, 
        a#461#9#0, 
        a#461#10#0, 
        a#461#11#0, 
        a#461#12#0, 
        a#461#13#0, 
        a#461#14#0, 
        a#461#15#0, 
        a#461#16#0, 
        a#461#17#0, 
        a#461#18#0)));

// Depth-one case-split function
function $IsA#_System.Tuple19(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple19(d) } 
  $IsA#_System.Tuple19(d) ==> _System.Tuple19.___hMake19_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#19$T0: Ty, 
    _System._tuple#19$T1: Ty, 
    _System._tuple#19$T2: Ty, 
    _System._tuple#19$T3: Ty, 
    _System._tuple#19$T4: Ty, 
    _System._tuple#19$T5: Ty, 
    _System._tuple#19$T6: Ty, 
    _System._tuple#19$T7: Ty, 
    _System._tuple#19$T8: Ty, 
    _System._tuple#19$T9: Ty, 
    _System._tuple#19$T10: Ty, 
    _System._tuple#19$T11: Ty, 
    _System._tuple#19$T12: Ty, 
    _System._tuple#19$T13: Ty, 
    _System._tuple#19$T14: Ty, 
    _System._tuple#19$T15: Ty, 
    _System._tuple#19$T16: Ty, 
    _System._tuple#19$T17: Ty, 
    _System._tuple#19$T18: Ty, 
    d: DatatypeType :: 
  { _System.Tuple19.___hMake19_q(d), $Is(d, 
      Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18)) } 
  $Is(d, 
      Tclass._System.Tuple19(_System._tuple#19$T0, 
        _System._tuple#19$T1, 
        _System._tuple#19$T2, 
        _System._tuple#19$T3, 
        _System._tuple#19$T4, 
        _System._tuple#19$T5, 
        _System._tuple#19$T6, 
        _System._tuple#19$T7, 
        _System._tuple#19$T8, 
        _System._tuple#19$T9, 
        _System._tuple#19$T10, 
        _System._tuple#19$T11, 
        _System._tuple#19$T12, 
        _System._tuple#19$T13, 
        _System._tuple#19$T14, 
        _System._tuple#19$T15, 
        _System._tuple#19$T16, 
        _System._tuple#19$T17, 
        _System._tuple#19$T18))
     ==> _System.Tuple19.___hMake19_q(d));

// Datatype extensional equality declaration
function _System.Tuple19#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#19._#Make19
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple19#Equal(a, b) } 
  _System.Tuple19#Equal(a, b)
     <==> _System.Tuple19._0(a) == _System.Tuple19._0(b)
       && _System.Tuple19._1(a) == _System.Tuple19._1(b)
       && _System.Tuple19._2(a) == _System.Tuple19._2(b)
       && _System.Tuple19._3(a) == _System.Tuple19._3(b)
       && _System.Tuple19._4(a) == _System.Tuple19._4(b)
       && _System.Tuple19._5(a) == _System.Tuple19._5(b)
       && _System.Tuple19._6(a) == _System.Tuple19._6(b)
       && _System.Tuple19._7(a) == _System.Tuple19._7(b)
       && _System.Tuple19._8(a) == _System.Tuple19._8(b)
       && _System.Tuple19._9(a) == _System.Tuple19._9(b)
       && _System.Tuple19._10(a) == _System.Tuple19._10(b)
       && _System.Tuple19._11(a) == _System.Tuple19._11(b)
       && _System.Tuple19._12(a) == _System.Tuple19._12(b)
       && _System.Tuple19._13(a) == _System.Tuple19._13(b)
       && _System.Tuple19._14(a) == _System.Tuple19._14(b)
       && _System.Tuple19._15(a) == _System.Tuple19._15(b)
       && _System.Tuple19._16(a) == _System.Tuple19._16(b)
       && _System.Tuple19._17(a) == _System.Tuple19._17(b)
       && _System.Tuple19._18(a) == _System.Tuple19._18(b));

// Datatype extensionality axiom: _System._tuple#19
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple19#Equal(a, b) } 
  _System.Tuple19#Equal(a, b) <==> a == b);

const unique class._System.Tuple19: ClassName;

// Constructor function declaration
function #_System._tuple#20._#Make20(Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : DatatypeType;

const unique ##_System._tuple#20._#Make20: DtCtorId
uses {
// Constructor identifier
axiom (forall a#462#0#0: Box, 
    a#462#1#0: Box, 
    a#462#2#0: Box, 
    a#462#3#0: Box, 
    a#462#4#0: Box, 
    a#462#5#0: Box, 
    a#462#6#0: Box, 
    a#462#7#0: Box, 
    a#462#8#0: Box, 
    a#462#9#0: Box, 
    a#462#10#0: Box, 
    a#462#11#0: Box, 
    a#462#12#0: Box, 
    a#462#13#0: Box, 
    a#462#14#0: Box, 
    a#462#15#0: Box, 
    a#462#16#0: Box, 
    a#462#17#0: Box, 
    a#462#18#0: Box, 
    a#462#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#462#0#0, 
      a#462#1#0, 
      a#462#2#0, 
      a#462#3#0, 
      a#462#4#0, 
      a#462#5#0, 
      a#462#6#0, 
      a#462#7#0, 
      a#462#8#0, 
      a#462#9#0, 
      a#462#10#0, 
      a#462#11#0, 
      a#462#12#0, 
      a#462#13#0, 
      a#462#14#0, 
      a#462#15#0, 
      a#462#16#0, 
      a#462#17#0, 
      a#462#18#0, 
      a#462#19#0) } 
  DatatypeCtorId(#_System._tuple#20._#Make20(a#462#0#0, 
        a#462#1#0, 
        a#462#2#0, 
        a#462#3#0, 
        a#462#4#0, 
        a#462#5#0, 
        a#462#6#0, 
        a#462#7#0, 
        a#462#8#0, 
        a#462#9#0, 
        a#462#10#0, 
        a#462#11#0, 
        a#462#12#0, 
        a#462#13#0, 
        a#462#14#0, 
        a#462#15#0, 
        a#462#16#0, 
        a#462#17#0, 
        a#462#18#0, 
        a#462#19#0))
     == ##_System._tuple#20._#Make20);
}

function _System.Tuple20.___hMake20_q(DatatypeType) : bool;

// Questionmark and identifier
axiom (forall d: DatatypeType :: 
  { _System.Tuple20.___hMake20_q(d) } 
  _System.Tuple20.___hMake20_q(d)
     <==> DatatypeCtorId(d) == ##_System._tuple#20._#Make20);

// Constructor questionmark has arguments
axiom (forall d: DatatypeType :: 
  { _System.Tuple20.___hMake20_q(d) } 
  _System.Tuple20.___hMake20_q(d)
     ==> (exists a#463#0#0: Box, 
        a#463#1#0: Box, 
        a#463#2#0: Box, 
        a#463#3#0: Box, 
        a#463#4#0: Box, 
        a#463#5#0: Box, 
        a#463#6#0: Box, 
        a#463#7#0: Box, 
        a#463#8#0: Box, 
        a#463#9#0: Box, 
        a#463#10#0: Box, 
        a#463#11#0: Box, 
        a#463#12#0: Box, 
        a#463#13#0: Box, 
        a#463#14#0: Box, 
        a#463#15#0: Box, 
        a#463#16#0: Box, 
        a#463#17#0: Box, 
        a#463#18#0: Box, 
        a#463#19#0: Box :: 
      d
         == #_System._tuple#20._#Make20(a#463#0#0, 
          a#463#1#0, 
          a#463#2#0, 
          a#463#3#0, 
          a#463#4#0, 
          a#463#5#0, 
          a#463#6#0, 
          a#463#7#0, 
          a#463#8#0, 
          a#463#9#0, 
          a#463#10#0, 
          a#463#11#0, 
          a#463#12#0, 
          a#463#13#0, 
          a#463#14#0, 
          a#463#15#0, 
          a#463#16#0, 
          a#463#17#0, 
          a#463#18#0, 
          a#463#19#0)));

function Tclass._System.Tuple20(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty)
   : Ty;

const unique Tagclass._System.Tuple20: TyTag;

// Tclass._System.Tuple20 Tag
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty :: 
  { Tclass._System.Tuple20(_System._tuple#20$T0, 
      _System._tuple#20$T1, 
      _System._tuple#20$T2, 
      _System._tuple#20$T3, 
      _System._tuple#20$T4, 
      _System._tuple#20$T5, 
      _System._tuple#20$T6, 
      _System._tuple#20$T7, 
      _System._tuple#20$T8, 
      _System._tuple#20$T9, 
      _System._tuple#20$T10, 
      _System._tuple#20$T11, 
      _System._tuple#20$T12, 
      _System._tuple#20$T13, 
      _System._tuple#20$T14, 
      _System._tuple#20$T15, 
      _System._tuple#20$T16, 
      _System._tuple#20$T17, 
      _System._tuple#20$T18, 
      _System._tuple#20$T19) } 
  Tag(Tclass._System.Tuple20(_System._tuple#20$T0, 
          _System._tuple#20$T1, 
          _System._tuple#20$T2, 
          _System._tuple#20$T3, 
          _System._tuple#20$T4, 
          _System._tuple#20$T5, 
          _System._tuple#20$T6, 
          _System._tuple#20$T7, 
          _System._tuple#20$T8, 
          _System._tuple#20$T9, 
          _System._tuple#20$T10, 
          _System._tuple#20$T11, 
          _System._tuple#20$T12, 
          _System._tuple#20$T13, 
          _System._tuple#20$T14, 
          _System._tuple#20$T15, 
          _System._tuple#20$T16, 
          _System._tuple#20$T17, 
          _System._tuple#20$T18, 
          _System._tuple#20$T19))
       == Tagclass._System.Tuple20
     && TagFamily(Tclass._System.Tuple20(_System._tuple#20$T0, 
          _System._tuple#20$T1, 
          _System._tuple#20$T2, 
          _System._tuple#20$T3, 
          _System._tuple#20$T4, 
          _System._tuple#20$T5, 
          _System._tuple#20$T6, 
          _System._tuple#20$T7, 
          _System._tuple#20$T8, 
          _System._tuple#20$T9, 
          _System._tuple#20$T10, 
          _System._tuple#20$T11, 
          _System._tuple#20$T12, 
          _System._tuple#20$T13, 
          _System._tuple#20$T14, 
          _System._tuple#20$T15, 
          _System._tuple#20$T16, 
          _System._tuple#20$T17, 
          _System._tuple#20$T18, 
          _System._tuple#20$T19))
       == tytagFamily$_tuple#20);

function Tclass._System.Tuple20_0(Ty) : Ty;

// Tclass._System.Tuple20 injectivity 0
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty :: 
  { Tclass._System.Tuple20(_System._tuple#20$T0, 
      _System._tuple#20$T1, 
      _System._tuple#20$T2, 
      _System._tuple#20$T3, 
      _System._tuple#20$T4, 
      _System._tuple#20$T5, 
      _System._tuple#20$T6, 
      _System._tuple#20$T7, 
      _System._tuple#20$T8, 
      _System._tuple#20$T9, 
      _System._tuple#20$T10, 
      _System._tuple#20$T11, 
      _System._tuple#20$T12, 
      _System._tuple#20$T13, 
      _System._tuple#20$T14, 
      _System._tuple#20$T15, 
      _System._tuple#20$T16, 
      _System._tuple#20$T17, 
      _System._tuple#20$T18, 
      _System._tuple#20$T19) } 
  Tclass._System.Tuple20_0(Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19))
     == _System._tuple#20$T0);

function Tclass._System.Tuple20_1(Ty) : Ty;

// Tclass._System.Tuple20 injectivity 1
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty :: 
  { Tclass._System.Tuple20(_System._tuple#20$T0, 
      _System._tuple#20$T1, 
      _System._tuple#20$T2, 
      _System._tuple#20$T3, 
      _System._tuple#20$T4, 
      _System._tuple#20$T5, 
      _System._tuple#20$T6, 
      _System._tuple#20$T7, 
      _System._tuple#20$T8, 
      _System._tuple#20$T9, 
      _System._tuple#20$T10, 
      _System._tuple#20$T11, 
      _System._tuple#20$T12, 
      _System._tuple#20$T13, 
      _System._tuple#20$T14, 
      _System._tuple#20$T15, 
      _System._tuple#20$T16, 
      _System._tuple#20$T17, 
      _System._tuple#20$T18, 
      _System._tuple#20$T19) } 
  Tclass._System.Tuple20_1(Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19))
     == _System._tuple#20$T1);

function Tclass._System.Tuple20_2(Ty) : Ty;

// Tclass._System.Tuple20 injectivity 2
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty :: 
  { Tclass._System.Tuple20(_System._tuple#20$T0, 
      _System._tuple#20$T1, 
      _System._tuple#20$T2, 
      _System._tuple#20$T3, 
      _System._tuple#20$T4, 
      _System._tuple#20$T5, 
      _System._tuple#20$T6, 
      _System._tuple#20$T7, 
      _System._tuple#20$T8, 
      _System._tuple#20$T9, 
      _System._tuple#20$T10, 
      _System._tuple#20$T11, 
      _System._tuple#20$T12, 
      _System._tuple#20$T13, 
      _System._tuple#20$T14, 
      _System._tuple#20$T15, 
      _System._tuple#20$T16, 
      _System._tuple#20$T17, 
      _System._tuple#20$T18, 
      _System._tuple#20$T19) } 
  Tclass._System.Tuple20_2(Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19))
     == _System._tuple#20$T2);

function Tclass._System.Tuple20_3(Ty) : Ty;

// Tclass._System.Tuple20 injectivity 3
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty :: 
  { Tclass._System.Tuple20(_System._tuple#20$T0, 
      _System._tuple#20$T1, 
      _System._tuple#20$T2, 
      _System._tuple#20$T3, 
      _System._tuple#20$T4, 
      _System._tuple#20$T5, 
      _System._tuple#20$T6, 
      _System._tuple#20$T7, 
      _System._tuple#20$T8, 
      _System._tuple#20$T9, 
      _System._tuple#20$T10, 
      _System._tuple#20$T11, 
      _System._tuple#20$T12, 
      _System._tuple#20$T13, 
      _System._tuple#20$T14, 
      _System._tuple#20$T15, 
      _System._tuple#20$T16, 
      _System._tuple#20$T17, 
      _System._tuple#20$T18, 
      _System._tuple#20$T19) } 
  Tclass._System.Tuple20_3(Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19))
     == _System._tuple#20$T3);

function Tclass._System.Tuple20_4(Ty) : Ty;

// Tclass._System.Tuple20 injectivity 4
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty :: 
  { Tclass._System.Tuple20(_System._tuple#20$T0, 
      _System._tuple#20$T1, 
      _System._tuple#20$T2, 
      _System._tuple#20$T3, 
      _System._tuple#20$T4, 
      _System._tuple#20$T5, 
      _System._tuple#20$T6, 
      _System._tuple#20$T7, 
      _System._tuple#20$T8, 
      _System._tuple#20$T9, 
      _System._tuple#20$T10, 
      _System._tuple#20$T11, 
      _System._tuple#20$T12, 
      _System._tuple#20$T13, 
      _System._tuple#20$T14, 
      _System._tuple#20$T15, 
      _System._tuple#20$T16, 
      _System._tuple#20$T17, 
      _System._tuple#20$T18, 
      _System._tuple#20$T19) } 
  Tclass._System.Tuple20_4(Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19))
     == _System._tuple#20$T4);

function Tclass._System.Tuple20_5(Ty) : Ty;

// Tclass._System.Tuple20 injectivity 5
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty :: 
  { Tclass._System.Tuple20(_System._tuple#20$T0, 
      _System._tuple#20$T1, 
      _System._tuple#20$T2, 
      _System._tuple#20$T3, 
      _System._tuple#20$T4, 
      _System._tuple#20$T5, 
      _System._tuple#20$T6, 
      _System._tuple#20$T7, 
      _System._tuple#20$T8, 
      _System._tuple#20$T9, 
      _System._tuple#20$T10, 
      _System._tuple#20$T11, 
      _System._tuple#20$T12, 
      _System._tuple#20$T13, 
      _System._tuple#20$T14, 
      _System._tuple#20$T15, 
      _System._tuple#20$T16, 
      _System._tuple#20$T17, 
      _System._tuple#20$T18, 
      _System._tuple#20$T19) } 
  Tclass._System.Tuple20_5(Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19))
     == _System._tuple#20$T5);

function Tclass._System.Tuple20_6(Ty) : Ty;

// Tclass._System.Tuple20 injectivity 6
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty :: 
  { Tclass._System.Tuple20(_System._tuple#20$T0, 
      _System._tuple#20$T1, 
      _System._tuple#20$T2, 
      _System._tuple#20$T3, 
      _System._tuple#20$T4, 
      _System._tuple#20$T5, 
      _System._tuple#20$T6, 
      _System._tuple#20$T7, 
      _System._tuple#20$T8, 
      _System._tuple#20$T9, 
      _System._tuple#20$T10, 
      _System._tuple#20$T11, 
      _System._tuple#20$T12, 
      _System._tuple#20$T13, 
      _System._tuple#20$T14, 
      _System._tuple#20$T15, 
      _System._tuple#20$T16, 
      _System._tuple#20$T17, 
      _System._tuple#20$T18, 
      _System._tuple#20$T19) } 
  Tclass._System.Tuple20_6(Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19))
     == _System._tuple#20$T6);

function Tclass._System.Tuple20_7(Ty) : Ty;

// Tclass._System.Tuple20 injectivity 7
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty :: 
  { Tclass._System.Tuple20(_System._tuple#20$T0, 
      _System._tuple#20$T1, 
      _System._tuple#20$T2, 
      _System._tuple#20$T3, 
      _System._tuple#20$T4, 
      _System._tuple#20$T5, 
      _System._tuple#20$T6, 
      _System._tuple#20$T7, 
      _System._tuple#20$T8, 
      _System._tuple#20$T9, 
      _System._tuple#20$T10, 
      _System._tuple#20$T11, 
      _System._tuple#20$T12, 
      _System._tuple#20$T13, 
      _System._tuple#20$T14, 
      _System._tuple#20$T15, 
      _System._tuple#20$T16, 
      _System._tuple#20$T17, 
      _System._tuple#20$T18, 
      _System._tuple#20$T19) } 
  Tclass._System.Tuple20_7(Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19))
     == _System._tuple#20$T7);

function Tclass._System.Tuple20_8(Ty) : Ty;

// Tclass._System.Tuple20 injectivity 8
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty :: 
  { Tclass._System.Tuple20(_System._tuple#20$T0, 
      _System._tuple#20$T1, 
      _System._tuple#20$T2, 
      _System._tuple#20$T3, 
      _System._tuple#20$T4, 
      _System._tuple#20$T5, 
      _System._tuple#20$T6, 
      _System._tuple#20$T7, 
      _System._tuple#20$T8, 
      _System._tuple#20$T9, 
      _System._tuple#20$T10, 
      _System._tuple#20$T11, 
      _System._tuple#20$T12, 
      _System._tuple#20$T13, 
      _System._tuple#20$T14, 
      _System._tuple#20$T15, 
      _System._tuple#20$T16, 
      _System._tuple#20$T17, 
      _System._tuple#20$T18, 
      _System._tuple#20$T19) } 
  Tclass._System.Tuple20_8(Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19))
     == _System._tuple#20$T8);

function Tclass._System.Tuple20_9(Ty) : Ty;

// Tclass._System.Tuple20 injectivity 9
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty :: 
  { Tclass._System.Tuple20(_System._tuple#20$T0, 
      _System._tuple#20$T1, 
      _System._tuple#20$T2, 
      _System._tuple#20$T3, 
      _System._tuple#20$T4, 
      _System._tuple#20$T5, 
      _System._tuple#20$T6, 
      _System._tuple#20$T7, 
      _System._tuple#20$T8, 
      _System._tuple#20$T9, 
      _System._tuple#20$T10, 
      _System._tuple#20$T11, 
      _System._tuple#20$T12, 
      _System._tuple#20$T13, 
      _System._tuple#20$T14, 
      _System._tuple#20$T15, 
      _System._tuple#20$T16, 
      _System._tuple#20$T17, 
      _System._tuple#20$T18, 
      _System._tuple#20$T19) } 
  Tclass._System.Tuple20_9(Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19))
     == _System._tuple#20$T9);

function Tclass._System.Tuple20_10(Ty) : Ty;

// Tclass._System.Tuple20 injectivity 10
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty :: 
  { Tclass._System.Tuple20(_System._tuple#20$T0, 
      _System._tuple#20$T1, 
      _System._tuple#20$T2, 
      _System._tuple#20$T3, 
      _System._tuple#20$T4, 
      _System._tuple#20$T5, 
      _System._tuple#20$T6, 
      _System._tuple#20$T7, 
      _System._tuple#20$T8, 
      _System._tuple#20$T9, 
      _System._tuple#20$T10, 
      _System._tuple#20$T11, 
      _System._tuple#20$T12, 
      _System._tuple#20$T13, 
      _System._tuple#20$T14, 
      _System._tuple#20$T15, 
      _System._tuple#20$T16, 
      _System._tuple#20$T17, 
      _System._tuple#20$T18, 
      _System._tuple#20$T19) } 
  Tclass._System.Tuple20_10(Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19))
     == _System._tuple#20$T10);

function Tclass._System.Tuple20_11(Ty) : Ty;

// Tclass._System.Tuple20 injectivity 11
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty :: 
  { Tclass._System.Tuple20(_System._tuple#20$T0, 
      _System._tuple#20$T1, 
      _System._tuple#20$T2, 
      _System._tuple#20$T3, 
      _System._tuple#20$T4, 
      _System._tuple#20$T5, 
      _System._tuple#20$T6, 
      _System._tuple#20$T7, 
      _System._tuple#20$T8, 
      _System._tuple#20$T9, 
      _System._tuple#20$T10, 
      _System._tuple#20$T11, 
      _System._tuple#20$T12, 
      _System._tuple#20$T13, 
      _System._tuple#20$T14, 
      _System._tuple#20$T15, 
      _System._tuple#20$T16, 
      _System._tuple#20$T17, 
      _System._tuple#20$T18, 
      _System._tuple#20$T19) } 
  Tclass._System.Tuple20_11(Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19))
     == _System._tuple#20$T11);

function Tclass._System.Tuple20_12(Ty) : Ty;

// Tclass._System.Tuple20 injectivity 12
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty :: 
  { Tclass._System.Tuple20(_System._tuple#20$T0, 
      _System._tuple#20$T1, 
      _System._tuple#20$T2, 
      _System._tuple#20$T3, 
      _System._tuple#20$T4, 
      _System._tuple#20$T5, 
      _System._tuple#20$T6, 
      _System._tuple#20$T7, 
      _System._tuple#20$T8, 
      _System._tuple#20$T9, 
      _System._tuple#20$T10, 
      _System._tuple#20$T11, 
      _System._tuple#20$T12, 
      _System._tuple#20$T13, 
      _System._tuple#20$T14, 
      _System._tuple#20$T15, 
      _System._tuple#20$T16, 
      _System._tuple#20$T17, 
      _System._tuple#20$T18, 
      _System._tuple#20$T19) } 
  Tclass._System.Tuple20_12(Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19))
     == _System._tuple#20$T12);

function Tclass._System.Tuple20_13(Ty) : Ty;

// Tclass._System.Tuple20 injectivity 13
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty :: 
  { Tclass._System.Tuple20(_System._tuple#20$T0, 
      _System._tuple#20$T1, 
      _System._tuple#20$T2, 
      _System._tuple#20$T3, 
      _System._tuple#20$T4, 
      _System._tuple#20$T5, 
      _System._tuple#20$T6, 
      _System._tuple#20$T7, 
      _System._tuple#20$T8, 
      _System._tuple#20$T9, 
      _System._tuple#20$T10, 
      _System._tuple#20$T11, 
      _System._tuple#20$T12, 
      _System._tuple#20$T13, 
      _System._tuple#20$T14, 
      _System._tuple#20$T15, 
      _System._tuple#20$T16, 
      _System._tuple#20$T17, 
      _System._tuple#20$T18, 
      _System._tuple#20$T19) } 
  Tclass._System.Tuple20_13(Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19))
     == _System._tuple#20$T13);

function Tclass._System.Tuple20_14(Ty) : Ty;

// Tclass._System.Tuple20 injectivity 14
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty :: 
  { Tclass._System.Tuple20(_System._tuple#20$T0, 
      _System._tuple#20$T1, 
      _System._tuple#20$T2, 
      _System._tuple#20$T3, 
      _System._tuple#20$T4, 
      _System._tuple#20$T5, 
      _System._tuple#20$T6, 
      _System._tuple#20$T7, 
      _System._tuple#20$T8, 
      _System._tuple#20$T9, 
      _System._tuple#20$T10, 
      _System._tuple#20$T11, 
      _System._tuple#20$T12, 
      _System._tuple#20$T13, 
      _System._tuple#20$T14, 
      _System._tuple#20$T15, 
      _System._tuple#20$T16, 
      _System._tuple#20$T17, 
      _System._tuple#20$T18, 
      _System._tuple#20$T19) } 
  Tclass._System.Tuple20_14(Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19))
     == _System._tuple#20$T14);

function Tclass._System.Tuple20_15(Ty) : Ty;

// Tclass._System.Tuple20 injectivity 15
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty :: 
  { Tclass._System.Tuple20(_System._tuple#20$T0, 
      _System._tuple#20$T1, 
      _System._tuple#20$T2, 
      _System._tuple#20$T3, 
      _System._tuple#20$T4, 
      _System._tuple#20$T5, 
      _System._tuple#20$T6, 
      _System._tuple#20$T7, 
      _System._tuple#20$T8, 
      _System._tuple#20$T9, 
      _System._tuple#20$T10, 
      _System._tuple#20$T11, 
      _System._tuple#20$T12, 
      _System._tuple#20$T13, 
      _System._tuple#20$T14, 
      _System._tuple#20$T15, 
      _System._tuple#20$T16, 
      _System._tuple#20$T17, 
      _System._tuple#20$T18, 
      _System._tuple#20$T19) } 
  Tclass._System.Tuple20_15(Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19))
     == _System._tuple#20$T15);

function Tclass._System.Tuple20_16(Ty) : Ty;

// Tclass._System.Tuple20 injectivity 16
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty :: 
  { Tclass._System.Tuple20(_System._tuple#20$T0, 
      _System._tuple#20$T1, 
      _System._tuple#20$T2, 
      _System._tuple#20$T3, 
      _System._tuple#20$T4, 
      _System._tuple#20$T5, 
      _System._tuple#20$T6, 
      _System._tuple#20$T7, 
      _System._tuple#20$T8, 
      _System._tuple#20$T9, 
      _System._tuple#20$T10, 
      _System._tuple#20$T11, 
      _System._tuple#20$T12, 
      _System._tuple#20$T13, 
      _System._tuple#20$T14, 
      _System._tuple#20$T15, 
      _System._tuple#20$T16, 
      _System._tuple#20$T17, 
      _System._tuple#20$T18, 
      _System._tuple#20$T19) } 
  Tclass._System.Tuple20_16(Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19))
     == _System._tuple#20$T16);

function Tclass._System.Tuple20_17(Ty) : Ty;

// Tclass._System.Tuple20 injectivity 17
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty :: 
  { Tclass._System.Tuple20(_System._tuple#20$T0, 
      _System._tuple#20$T1, 
      _System._tuple#20$T2, 
      _System._tuple#20$T3, 
      _System._tuple#20$T4, 
      _System._tuple#20$T5, 
      _System._tuple#20$T6, 
      _System._tuple#20$T7, 
      _System._tuple#20$T8, 
      _System._tuple#20$T9, 
      _System._tuple#20$T10, 
      _System._tuple#20$T11, 
      _System._tuple#20$T12, 
      _System._tuple#20$T13, 
      _System._tuple#20$T14, 
      _System._tuple#20$T15, 
      _System._tuple#20$T16, 
      _System._tuple#20$T17, 
      _System._tuple#20$T18, 
      _System._tuple#20$T19) } 
  Tclass._System.Tuple20_17(Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19))
     == _System._tuple#20$T17);

function Tclass._System.Tuple20_18(Ty) : Ty;

// Tclass._System.Tuple20 injectivity 18
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty :: 
  { Tclass._System.Tuple20(_System._tuple#20$T0, 
      _System._tuple#20$T1, 
      _System._tuple#20$T2, 
      _System._tuple#20$T3, 
      _System._tuple#20$T4, 
      _System._tuple#20$T5, 
      _System._tuple#20$T6, 
      _System._tuple#20$T7, 
      _System._tuple#20$T8, 
      _System._tuple#20$T9, 
      _System._tuple#20$T10, 
      _System._tuple#20$T11, 
      _System._tuple#20$T12, 
      _System._tuple#20$T13, 
      _System._tuple#20$T14, 
      _System._tuple#20$T15, 
      _System._tuple#20$T16, 
      _System._tuple#20$T17, 
      _System._tuple#20$T18, 
      _System._tuple#20$T19) } 
  Tclass._System.Tuple20_18(Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19))
     == _System._tuple#20$T18);

function Tclass._System.Tuple20_19(Ty) : Ty;

// Tclass._System.Tuple20 injectivity 19
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty :: 
  { Tclass._System.Tuple20(_System._tuple#20$T0, 
      _System._tuple#20$T1, 
      _System._tuple#20$T2, 
      _System._tuple#20$T3, 
      _System._tuple#20$T4, 
      _System._tuple#20$T5, 
      _System._tuple#20$T6, 
      _System._tuple#20$T7, 
      _System._tuple#20$T8, 
      _System._tuple#20$T9, 
      _System._tuple#20$T10, 
      _System._tuple#20$T11, 
      _System._tuple#20$T12, 
      _System._tuple#20$T13, 
      _System._tuple#20$T14, 
      _System._tuple#20$T15, 
      _System._tuple#20$T16, 
      _System._tuple#20$T17, 
      _System._tuple#20$T18, 
      _System._tuple#20$T19) } 
  Tclass._System.Tuple20_19(Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19))
     == _System._tuple#20$T19);

// Box/unbox axiom for Tclass._System.Tuple20
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19)) } 
  $IsBox(bx, 
      Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19))
     ==> $Box($Unbox(bx): DatatypeType) == bx
       && $Is($Unbox(bx): DatatypeType, 
        Tclass._System.Tuple20(_System._tuple#20$T0, 
          _System._tuple#20$T1, 
          _System._tuple#20$T2, 
          _System._tuple#20$T3, 
          _System._tuple#20$T4, 
          _System._tuple#20$T5, 
          _System._tuple#20$T6, 
          _System._tuple#20$T7, 
          _System._tuple#20$T8, 
          _System._tuple#20$T9, 
          _System._tuple#20$T10, 
          _System._tuple#20$T11, 
          _System._tuple#20$T12, 
          _System._tuple#20$T13, 
          _System._tuple#20$T14, 
          _System._tuple#20$T15, 
          _System._tuple#20$T16, 
          _System._tuple#20$T17, 
          _System._tuple#20$T18, 
          _System._tuple#20$T19)));

// Constructor $Is
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty, 
    a#464#0#0: Box, 
    a#464#1#0: Box, 
    a#464#2#0: Box, 
    a#464#3#0: Box, 
    a#464#4#0: Box, 
    a#464#5#0: Box, 
    a#464#6#0: Box, 
    a#464#7#0: Box, 
    a#464#8#0: Box, 
    a#464#9#0: Box, 
    a#464#10#0: Box, 
    a#464#11#0: Box, 
    a#464#12#0: Box, 
    a#464#13#0: Box, 
    a#464#14#0: Box, 
    a#464#15#0: Box, 
    a#464#16#0: Box, 
    a#464#17#0: Box, 
    a#464#18#0: Box, 
    a#464#19#0: Box :: 
  { $Is(#_System._tuple#20._#Make20(a#464#0#0, 
        a#464#1#0, 
        a#464#2#0, 
        a#464#3#0, 
        a#464#4#0, 
        a#464#5#0, 
        a#464#6#0, 
        a#464#7#0, 
        a#464#8#0, 
        a#464#9#0, 
        a#464#10#0, 
        a#464#11#0, 
        a#464#12#0, 
        a#464#13#0, 
        a#464#14#0, 
        a#464#15#0, 
        a#464#16#0, 
        a#464#17#0, 
        a#464#18#0, 
        a#464#19#0), 
      Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19)) } 
  $Is(#_System._tuple#20._#Make20(a#464#0#0, 
        a#464#1#0, 
        a#464#2#0, 
        a#464#3#0, 
        a#464#4#0, 
        a#464#5#0, 
        a#464#6#0, 
        a#464#7#0, 
        a#464#8#0, 
        a#464#9#0, 
        a#464#10#0, 
        a#464#11#0, 
        a#464#12#0, 
        a#464#13#0, 
        a#464#14#0, 
        a#464#15#0, 
        a#464#16#0, 
        a#464#17#0, 
        a#464#18#0, 
        a#464#19#0), 
      Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19))
     <==> $IsBox(a#464#0#0, _System._tuple#20$T0)
       && $IsBox(a#464#1#0, _System._tuple#20$T1)
       && $IsBox(a#464#2#0, _System._tuple#20$T2)
       && $IsBox(a#464#3#0, _System._tuple#20$T3)
       && $IsBox(a#464#4#0, _System._tuple#20$T4)
       && $IsBox(a#464#5#0, _System._tuple#20$T5)
       && $IsBox(a#464#6#0, _System._tuple#20$T6)
       && $IsBox(a#464#7#0, _System._tuple#20$T7)
       && $IsBox(a#464#8#0, _System._tuple#20$T8)
       && $IsBox(a#464#9#0, _System._tuple#20$T9)
       && $IsBox(a#464#10#0, _System._tuple#20$T10)
       && $IsBox(a#464#11#0, _System._tuple#20$T11)
       && $IsBox(a#464#12#0, _System._tuple#20$T12)
       && $IsBox(a#464#13#0, _System._tuple#20$T13)
       && $IsBox(a#464#14#0, _System._tuple#20$T14)
       && $IsBox(a#464#15#0, _System._tuple#20$T15)
       && $IsBox(a#464#16#0, _System._tuple#20$T16)
       && $IsBox(a#464#17#0, _System._tuple#20$T17)
       && $IsBox(a#464#18#0, _System._tuple#20$T18)
       && $IsBox(a#464#19#0, _System._tuple#20$T19));

// Constructor $IsAlloc
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty, 
    a#464#0#0: Box, 
    a#464#1#0: Box, 
    a#464#2#0: Box, 
    a#464#3#0: Box, 
    a#464#4#0: Box, 
    a#464#5#0: Box, 
    a#464#6#0: Box, 
    a#464#7#0: Box, 
    a#464#8#0: Box, 
    a#464#9#0: Box, 
    a#464#10#0: Box, 
    a#464#11#0: Box, 
    a#464#12#0: Box, 
    a#464#13#0: Box, 
    a#464#14#0: Box, 
    a#464#15#0: Box, 
    a#464#16#0: Box, 
    a#464#17#0: Box, 
    a#464#18#0: Box, 
    a#464#19#0: Box, 
    $h: Heap :: 
  { $IsAlloc(#_System._tuple#20._#Make20(a#464#0#0, 
        a#464#1#0, 
        a#464#2#0, 
        a#464#3#0, 
        a#464#4#0, 
        a#464#5#0, 
        a#464#6#0, 
        a#464#7#0, 
        a#464#8#0, 
        a#464#9#0, 
        a#464#10#0, 
        a#464#11#0, 
        a#464#12#0, 
        a#464#13#0, 
        a#464#14#0, 
        a#464#15#0, 
        a#464#16#0, 
        a#464#17#0, 
        a#464#18#0, 
        a#464#19#0), 
      Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19), 
      $h) } 
  $IsGoodHeap($h)
     ==> ($IsAlloc(#_System._tuple#20._#Make20(a#464#0#0, 
          a#464#1#0, 
          a#464#2#0, 
          a#464#3#0, 
          a#464#4#0, 
          a#464#5#0, 
          a#464#6#0, 
          a#464#7#0, 
          a#464#8#0, 
          a#464#9#0, 
          a#464#10#0, 
          a#464#11#0, 
          a#464#12#0, 
          a#464#13#0, 
          a#464#14#0, 
          a#464#15#0, 
          a#464#16#0, 
          a#464#17#0, 
          a#464#18#0, 
          a#464#19#0), 
        Tclass._System.Tuple20(_System._tuple#20$T0, 
          _System._tuple#20$T1, 
          _System._tuple#20$T2, 
          _System._tuple#20$T3, 
          _System._tuple#20$T4, 
          _System._tuple#20$T5, 
          _System._tuple#20$T6, 
          _System._tuple#20$T7, 
          _System._tuple#20$T8, 
          _System._tuple#20$T9, 
          _System._tuple#20$T10, 
          _System._tuple#20$T11, 
          _System._tuple#20$T12, 
          _System._tuple#20$T13, 
          _System._tuple#20$T14, 
          _System._tuple#20$T15, 
          _System._tuple#20$T16, 
          _System._tuple#20$T17, 
          _System._tuple#20$T18, 
          _System._tuple#20$T19), 
        $h)
       <==> $IsAllocBox(a#464#0#0, _System._tuple#20$T0, $h)
         && $IsAllocBox(a#464#1#0, _System._tuple#20$T1, $h)
         && $IsAllocBox(a#464#2#0, _System._tuple#20$T2, $h)
         && $IsAllocBox(a#464#3#0, _System._tuple#20$T3, $h)
         && $IsAllocBox(a#464#4#0, _System._tuple#20$T4, $h)
         && $IsAllocBox(a#464#5#0, _System._tuple#20$T5, $h)
         && $IsAllocBox(a#464#6#0, _System._tuple#20$T6, $h)
         && $IsAllocBox(a#464#7#0, _System._tuple#20$T7, $h)
         && $IsAllocBox(a#464#8#0, _System._tuple#20$T8, $h)
         && $IsAllocBox(a#464#9#0, _System._tuple#20$T9, $h)
         && $IsAllocBox(a#464#10#0, _System._tuple#20$T10, $h)
         && $IsAllocBox(a#464#11#0, _System._tuple#20$T11, $h)
         && $IsAllocBox(a#464#12#0, _System._tuple#20$T12, $h)
         && $IsAllocBox(a#464#13#0, _System._tuple#20$T13, $h)
         && $IsAllocBox(a#464#14#0, _System._tuple#20$T14, $h)
         && $IsAllocBox(a#464#15#0, _System._tuple#20$T15, $h)
         && $IsAllocBox(a#464#16#0, _System._tuple#20$T16, $h)
         && $IsAllocBox(a#464#17#0, _System._tuple#20$T17, $h)
         && $IsAllocBox(a#464#18#0, _System._tuple#20$T18, $h)
         && $IsAllocBox(a#464#19#0, _System._tuple#20$T19, $h)));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#20$T0: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple20._0(d), _System._tuple#20$T0, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple20.___hMake20_q(d)
       && (exists _System._tuple#20$T1: Ty, 
          _System._tuple#20$T2: Ty, 
          _System._tuple#20$T3: Ty, 
          _System._tuple#20$T4: Ty, 
          _System._tuple#20$T5: Ty, 
          _System._tuple#20$T6: Ty, 
          _System._tuple#20$T7: Ty, 
          _System._tuple#20$T8: Ty, 
          _System._tuple#20$T9: Ty, 
          _System._tuple#20$T10: Ty, 
          _System._tuple#20$T11: Ty, 
          _System._tuple#20$T12: Ty, 
          _System._tuple#20$T13: Ty, 
          _System._tuple#20$T14: Ty, 
          _System._tuple#20$T15: Ty, 
          _System._tuple#20$T16: Ty, 
          _System._tuple#20$T17: Ty, 
          _System._tuple#20$T18: Ty, 
          _System._tuple#20$T19: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple20(_System._tuple#20$T0, 
              _System._tuple#20$T1, 
              _System._tuple#20$T2, 
              _System._tuple#20$T3, 
              _System._tuple#20$T4, 
              _System._tuple#20$T5, 
              _System._tuple#20$T6, 
              _System._tuple#20$T7, 
              _System._tuple#20$T8, 
              _System._tuple#20$T9, 
              _System._tuple#20$T10, 
              _System._tuple#20$T11, 
              _System._tuple#20$T12, 
              _System._tuple#20$T13, 
              _System._tuple#20$T14, 
              _System._tuple#20$T15, 
              _System._tuple#20$T16, 
              _System._tuple#20$T17, 
              _System._tuple#20$T18, 
              _System._tuple#20$T19), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple20(_System._tuple#20$T0, 
            _System._tuple#20$T1, 
            _System._tuple#20$T2, 
            _System._tuple#20$T3, 
            _System._tuple#20$T4, 
            _System._tuple#20$T5, 
            _System._tuple#20$T6, 
            _System._tuple#20$T7, 
            _System._tuple#20$T8, 
            _System._tuple#20$T9, 
            _System._tuple#20$T10, 
            _System._tuple#20$T11, 
            _System._tuple#20$T12, 
            _System._tuple#20$T13, 
            _System._tuple#20$T14, 
            _System._tuple#20$T15, 
            _System._tuple#20$T16, 
            _System._tuple#20$T17, 
            _System._tuple#20$T18, 
            _System._tuple#20$T19), 
          $h))
     ==> $IsAllocBox(_System.Tuple20._0(d), _System._tuple#20$T0, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#20$T1: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple20._1(d), _System._tuple#20$T1, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple20.___hMake20_q(d)
       && (exists _System._tuple#20$T0: Ty, 
          _System._tuple#20$T2: Ty, 
          _System._tuple#20$T3: Ty, 
          _System._tuple#20$T4: Ty, 
          _System._tuple#20$T5: Ty, 
          _System._tuple#20$T6: Ty, 
          _System._tuple#20$T7: Ty, 
          _System._tuple#20$T8: Ty, 
          _System._tuple#20$T9: Ty, 
          _System._tuple#20$T10: Ty, 
          _System._tuple#20$T11: Ty, 
          _System._tuple#20$T12: Ty, 
          _System._tuple#20$T13: Ty, 
          _System._tuple#20$T14: Ty, 
          _System._tuple#20$T15: Ty, 
          _System._tuple#20$T16: Ty, 
          _System._tuple#20$T17: Ty, 
          _System._tuple#20$T18: Ty, 
          _System._tuple#20$T19: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple20(_System._tuple#20$T0, 
              _System._tuple#20$T1, 
              _System._tuple#20$T2, 
              _System._tuple#20$T3, 
              _System._tuple#20$T4, 
              _System._tuple#20$T5, 
              _System._tuple#20$T6, 
              _System._tuple#20$T7, 
              _System._tuple#20$T8, 
              _System._tuple#20$T9, 
              _System._tuple#20$T10, 
              _System._tuple#20$T11, 
              _System._tuple#20$T12, 
              _System._tuple#20$T13, 
              _System._tuple#20$T14, 
              _System._tuple#20$T15, 
              _System._tuple#20$T16, 
              _System._tuple#20$T17, 
              _System._tuple#20$T18, 
              _System._tuple#20$T19), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple20(_System._tuple#20$T0, 
            _System._tuple#20$T1, 
            _System._tuple#20$T2, 
            _System._tuple#20$T3, 
            _System._tuple#20$T4, 
            _System._tuple#20$T5, 
            _System._tuple#20$T6, 
            _System._tuple#20$T7, 
            _System._tuple#20$T8, 
            _System._tuple#20$T9, 
            _System._tuple#20$T10, 
            _System._tuple#20$T11, 
            _System._tuple#20$T12, 
            _System._tuple#20$T13, 
            _System._tuple#20$T14, 
            _System._tuple#20$T15, 
            _System._tuple#20$T16, 
            _System._tuple#20$T17, 
            _System._tuple#20$T18, 
            _System._tuple#20$T19), 
          $h))
     ==> $IsAllocBox(_System.Tuple20._1(d), _System._tuple#20$T1, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#20$T2: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple20._2(d), _System._tuple#20$T2, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple20.___hMake20_q(d)
       && (exists _System._tuple#20$T0: Ty, 
          _System._tuple#20$T1: Ty, 
          _System._tuple#20$T3: Ty, 
          _System._tuple#20$T4: Ty, 
          _System._tuple#20$T5: Ty, 
          _System._tuple#20$T6: Ty, 
          _System._tuple#20$T7: Ty, 
          _System._tuple#20$T8: Ty, 
          _System._tuple#20$T9: Ty, 
          _System._tuple#20$T10: Ty, 
          _System._tuple#20$T11: Ty, 
          _System._tuple#20$T12: Ty, 
          _System._tuple#20$T13: Ty, 
          _System._tuple#20$T14: Ty, 
          _System._tuple#20$T15: Ty, 
          _System._tuple#20$T16: Ty, 
          _System._tuple#20$T17: Ty, 
          _System._tuple#20$T18: Ty, 
          _System._tuple#20$T19: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple20(_System._tuple#20$T0, 
              _System._tuple#20$T1, 
              _System._tuple#20$T2, 
              _System._tuple#20$T3, 
              _System._tuple#20$T4, 
              _System._tuple#20$T5, 
              _System._tuple#20$T6, 
              _System._tuple#20$T7, 
              _System._tuple#20$T8, 
              _System._tuple#20$T9, 
              _System._tuple#20$T10, 
              _System._tuple#20$T11, 
              _System._tuple#20$T12, 
              _System._tuple#20$T13, 
              _System._tuple#20$T14, 
              _System._tuple#20$T15, 
              _System._tuple#20$T16, 
              _System._tuple#20$T17, 
              _System._tuple#20$T18, 
              _System._tuple#20$T19), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple20(_System._tuple#20$T0, 
            _System._tuple#20$T1, 
            _System._tuple#20$T2, 
            _System._tuple#20$T3, 
            _System._tuple#20$T4, 
            _System._tuple#20$T5, 
            _System._tuple#20$T6, 
            _System._tuple#20$T7, 
            _System._tuple#20$T8, 
            _System._tuple#20$T9, 
            _System._tuple#20$T10, 
            _System._tuple#20$T11, 
            _System._tuple#20$T12, 
            _System._tuple#20$T13, 
            _System._tuple#20$T14, 
            _System._tuple#20$T15, 
            _System._tuple#20$T16, 
            _System._tuple#20$T17, 
            _System._tuple#20$T18, 
            _System._tuple#20$T19), 
          $h))
     ==> $IsAllocBox(_System.Tuple20._2(d), _System._tuple#20$T2, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#20$T3: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple20._3(d), _System._tuple#20$T3, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple20.___hMake20_q(d)
       && (exists _System._tuple#20$T0: Ty, 
          _System._tuple#20$T1: Ty, 
          _System._tuple#20$T2: Ty, 
          _System._tuple#20$T4: Ty, 
          _System._tuple#20$T5: Ty, 
          _System._tuple#20$T6: Ty, 
          _System._tuple#20$T7: Ty, 
          _System._tuple#20$T8: Ty, 
          _System._tuple#20$T9: Ty, 
          _System._tuple#20$T10: Ty, 
          _System._tuple#20$T11: Ty, 
          _System._tuple#20$T12: Ty, 
          _System._tuple#20$T13: Ty, 
          _System._tuple#20$T14: Ty, 
          _System._tuple#20$T15: Ty, 
          _System._tuple#20$T16: Ty, 
          _System._tuple#20$T17: Ty, 
          _System._tuple#20$T18: Ty, 
          _System._tuple#20$T19: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple20(_System._tuple#20$T0, 
              _System._tuple#20$T1, 
              _System._tuple#20$T2, 
              _System._tuple#20$T3, 
              _System._tuple#20$T4, 
              _System._tuple#20$T5, 
              _System._tuple#20$T6, 
              _System._tuple#20$T7, 
              _System._tuple#20$T8, 
              _System._tuple#20$T9, 
              _System._tuple#20$T10, 
              _System._tuple#20$T11, 
              _System._tuple#20$T12, 
              _System._tuple#20$T13, 
              _System._tuple#20$T14, 
              _System._tuple#20$T15, 
              _System._tuple#20$T16, 
              _System._tuple#20$T17, 
              _System._tuple#20$T18, 
              _System._tuple#20$T19), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple20(_System._tuple#20$T0, 
            _System._tuple#20$T1, 
            _System._tuple#20$T2, 
            _System._tuple#20$T3, 
            _System._tuple#20$T4, 
            _System._tuple#20$T5, 
            _System._tuple#20$T6, 
            _System._tuple#20$T7, 
            _System._tuple#20$T8, 
            _System._tuple#20$T9, 
            _System._tuple#20$T10, 
            _System._tuple#20$T11, 
            _System._tuple#20$T12, 
            _System._tuple#20$T13, 
            _System._tuple#20$T14, 
            _System._tuple#20$T15, 
            _System._tuple#20$T16, 
            _System._tuple#20$T17, 
            _System._tuple#20$T18, 
            _System._tuple#20$T19), 
          $h))
     ==> $IsAllocBox(_System.Tuple20._3(d), _System._tuple#20$T3, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#20$T4: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple20._4(d), _System._tuple#20$T4, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple20.___hMake20_q(d)
       && (exists _System._tuple#20$T0: Ty, 
          _System._tuple#20$T1: Ty, 
          _System._tuple#20$T2: Ty, 
          _System._tuple#20$T3: Ty, 
          _System._tuple#20$T5: Ty, 
          _System._tuple#20$T6: Ty, 
          _System._tuple#20$T7: Ty, 
          _System._tuple#20$T8: Ty, 
          _System._tuple#20$T9: Ty, 
          _System._tuple#20$T10: Ty, 
          _System._tuple#20$T11: Ty, 
          _System._tuple#20$T12: Ty, 
          _System._tuple#20$T13: Ty, 
          _System._tuple#20$T14: Ty, 
          _System._tuple#20$T15: Ty, 
          _System._tuple#20$T16: Ty, 
          _System._tuple#20$T17: Ty, 
          _System._tuple#20$T18: Ty, 
          _System._tuple#20$T19: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple20(_System._tuple#20$T0, 
              _System._tuple#20$T1, 
              _System._tuple#20$T2, 
              _System._tuple#20$T3, 
              _System._tuple#20$T4, 
              _System._tuple#20$T5, 
              _System._tuple#20$T6, 
              _System._tuple#20$T7, 
              _System._tuple#20$T8, 
              _System._tuple#20$T9, 
              _System._tuple#20$T10, 
              _System._tuple#20$T11, 
              _System._tuple#20$T12, 
              _System._tuple#20$T13, 
              _System._tuple#20$T14, 
              _System._tuple#20$T15, 
              _System._tuple#20$T16, 
              _System._tuple#20$T17, 
              _System._tuple#20$T18, 
              _System._tuple#20$T19), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple20(_System._tuple#20$T0, 
            _System._tuple#20$T1, 
            _System._tuple#20$T2, 
            _System._tuple#20$T3, 
            _System._tuple#20$T4, 
            _System._tuple#20$T5, 
            _System._tuple#20$T6, 
            _System._tuple#20$T7, 
            _System._tuple#20$T8, 
            _System._tuple#20$T9, 
            _System._tuple#20$T10, 
            _System._tuple#20$T11, 
            _System._tuple#20$T12, 
            _System._tuple#20$T13, 
            _System._tuple#20$T14, 
            _System._tuple#20$T15, 
            _System._tuple#20$T16, 
            _System._tuple#20$T17, 
            _System._tuple#20$T18, 
            _System._tuple#20$T19), 
          $h))
     ==> $IsAllocBox(_System.Tuple20._4(d), _System._tuple#20$T4, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#20$T5: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple20._5(d), _System._tuple#20$T5, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple20.___hMake20_q(d)
       && (exists _System._tuple#20$T0: Ty, 
          _System._tuple#20$T1: Ty, 
          _System._tuple#20$T2: Ty, 
          _System._tuple#20$T3: Ty, 
          _System._tuple#20$T4: Ty, 
          _System._tuple#20$T6: Ty, 
          _System._tuple#20$T7: Ty, 
          _System._tuple#20$T8: Ty, 
          _System._tuple#20$T9: Ty, 
          _System._tuple#20$T10: Ty, 
          _System._tuple#20$T11: Ty, 
          _System._tuple#20$T12: Ty, 
          _System._tuple#20$T13: Ty, 
          _System._tuple#20$T14: Ty, 
          _System._tuple#20$T15: Ty, 
          _System._tuple#20$T16: Ty, 
          _System._tuple#20$T17: Ty, 
          _System._tuple#20$T18: Ty, 
          _System._tuple#20$T19: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple20(_System._tuple#20$T0, 
              _System._tuple#20$T1, 
              _System._tuple#20$T2, 
              _System._tuple#20$T3, 
              _System._tuple#20$T4, 
              _System._tuple#20$T5, 
              _System._tuple#20$T6, 
              _System._tuple#20$T7, 
              _System._tuple#20$T8, 
              _System._tuple#20$T9, 
              _System._tuple#20$T10, 
              _System._tuple#20$T11, 
              _System._tuple#20$T12, 
              _System._tuple#20$T13, 
              _System._tuple#20$T14, 
              _System._tuple#20$T15, 
              _System._tuple#20$T16, 
              _System._tuple#20$T17, 
              _System._tuple#20$T18, 
              _System._tuple#20$T19), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple20(_System._tuple#20$T0, 
            _System._tuple#20$T1, 
            _System._tuple#20$T2, 
            _System._tuple#20$T3, 
            _System._tuple#20$T4, 
            _System._tuple#20$T5, 
            _System._tuple#20$T6, 
            _System._tuple#20$T7, 
            _System._tuple#20$T8, 
            _System._tuple#20$T9, 
            _System._tuple#20$T10, 
            _System._tuple#20$T11, 
            _System._tuple#20$T12, 
            _System._tuple#20$T13, 
            _System._tuple#20$T14, 
            _System._tuple#20$T15, 
            _System._tuple#20$T16, 
            _System._tuple#20$T17, 
            _System._tuple#20$T18, 
            _System._tuple#20$T19), 
          $h))
     ==> $IsAllocBox(_System.Tuple20._5(d), _System._tuple#20$T5, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#20$T6: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple20._6(d), _System._tuple#20$T6, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple20.___hMake20_q(d)
       && (exists _System._tuple#20$T0: Ty, 
          _System._tuple#20$T1: Ty, 
          _System._tuple#20$T2: Ty, 
          _System._tuple#20$T3: Ty, 
          _System._tuple#20$T4: Ty, 
          _System._tuple#20$T5: Ty, 
          _System._tuple#20$T7: Ty, 
          _System._tuple#20$T8: Ty, 
          _System._tuple#20$T9: Ty, 
          _System._tuple#20$T10: Ty, 
          _System._tuple#20$T11: Ty, 
          _System._tuple#20$T12: Ty, 
          _System._tuple#20$T13: Ty, 
          _System._tuple#20$T14: Ty, 
          _System._tuple#20$T15: Ty, 
          _System._tuple#20$T16: Ty, 
          _System._tuple#20$T17: Ty, 
          _System._tuple#20$T18: Ty, 
          _System._tuple#20$T19: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple20(_System._tuple#20$T0, 
              _System._tuple#20$T1, 
              _System._tuple#20$T2, 
              _System._tuple#20$T3, 
              _System._tuple#20$T4, 
              _System._tuple#20$T5, 
              _System._tuple#20$T6, 
              _System._tuple#20$T7, 
              _System._tuple#20$T8, 
              _System._tuple#20$T9, 
              _System._tuple#20$T10, 
              _System._tuple#20$T11, 
              _System._tuple#20$T12, 
              _System._tuple#20$T13, 
              _System._tuple#20$T14, 
              _System._tuple#20$T15, 
              _System._tuple#20$T16, 
              _System._tuple#20$T17, 
              _System._tuple#20$T18, 
              _System._tuple#20$T19), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple20(_System._tuple#20$T0, 
            _System._tuple#20$T1, 
            _System._tuple#20$T2, 
            _System._tuple#20$T3, 
            _System._tuple#20$T4, 
            _System._tuple#20$T5, 
            _System._tuple#20$T6, 
            _System._tuple#20$T7, 
            _System._tuple#20$T8, 
            _System._tuple#20$T9, 
            _System._tuple#20$T10, 
            _System._tuple#20$T11, 
            _System._tuple#20$T12, 
            _System._tuple#20$T13, 
            _System._tuple#20$T14, 
            _System._tuple#20$T15, 
            _System._tuple#20$T16, 
            _System._tuple#20$T17, 
            _System._tuple#20$T18, 
            _System._tuple#20$T19), 
          $h))
     ==> $IsAllocBox(_System.Tuple20._6(d), _System._tuple#20$T6, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#20$T7: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple20._7(d), _System._tuple#20$T7, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple20.___hMake20_q(d)
       && (exists _System._tuple#20$T0: Ty, 
          _System._tuple#20$T1: Ty, 
          _System._tuple#20$T2: Ty, 
          _System._tuple#20$T3: Ty, 
          _System._tuple#20$T4: Ty, 
          _System._tuple#20$T5: Ty, 
          _System._tuple#20$T6: Ty, 
          _System._tuple#20$T8: Ty, 
          _System._tuple#20$T9: Ty, 
          _System._tuple#20$T10: Ty, 
          _System._tuple#20$T11: Ty, 
          _System._tuple#20$T12: Ty, 
          _System._tuple#20$T13: Ty, 
          _System._tuple#20$T14: Ty, 
          _System._tuple#20$T15: Ty, 
          _System._tuple#20$T16: Ty, 
          _System._tuple#20$T17: Ty, 
          _System._tuple#20$T18: Ty, 
          _System._tuple#20$T19: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple20(_System._tuple#20$T0, 
              _System._tuple#20$T1, 
              _System._tuple#20$T2, 
              _System._tuple#20$T3, 
              _System._tuple#20$T4, 
              _System._tuple#20$T5, 
              _System._tuple#20$T6, 
              _System._tuple#20$T7, 
              _System._tuple#20$T8, 
              _System._tuple#20$T9, 
              _System._tuple#20$T10, 
              _System._tuple#20$T11, 
              _System._tuple#20$T12, 
              _System._tuple#20$T13, 
              _System._tuple#20$T14, 
              _System._tuple#20$T15, 
              _System._tuple#20$T16, 
              _System._tuple#20$T17, 
              _System._tuple#20$T18, 
              _System._tuple#20$T19), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple20(_System._tuple#20$T0, 
            _System._tuple#20$T1, 
            _System._tuple#20$T2, 
            _System._tuple#20$T3, 
            _System._tuple#20$T4, 
            _System._tuple#20$T5, 
            _System._tuple#20$T6, 
            _System._tuple#20$T7, 
            _System._tuple#20$T8, 
            _System._tuple#20$T9, 
            _System._tuple#20$T10, 
            _System._tuple#20$T11, 
            _System._tuple#20$T12, 
            _System._tuple#20$T13, 
            _System._tuple#20$T14, 
            _System._tuple#20$T15, 
            _System._tuple#20$T16, 
            _System._tuple#20$T17, 
            _System._tuple#20$T18, 
            _System._tuple#20$T19), 
          $h))
     ==> $IsAllocBox(_System.Tuple20._7(d), _System._tuple#20$T7, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#20$T8: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple20._8(d), _System._tuple#20$T8, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple20.___hMake20_q(d)
       && (exists _System._tuple#20$T0: Ty, 
          _System._tuple#20$T1: Ty, 
          _System._tuple#20$T2: Ty, 
          _System._tuple#20$T3: Ty, 
          _System._tuple#20$T4: Ty, 
          _System._tuple#20$T5: Ty, 
          _System._tuple#20$T6: Ty, 
          _System._tuple#20$T7: Ty, 
          _System._tuple#20$T9: Ty, 
          _System._tuple#20$T10: Ty, 
          _System._tuple#20$T11: Ty, 
          _System._tuple#20$T12: Ty, 
          _System._tuple#20$T13: Ty, 
          _System._tuple#20$T14: Ty, 
          _System._tuple#20$T15: Ty, 
          _System._tuple#20$T16: Ty, 
          _System._tuple#20$T17: Ty, 
          _System._tuple#20$T18: Ty, 
          _System._tuple#20$T19: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple20(_System._tuple#20$T0, 
              _System._tuple#20$T1, 
              _System._tuple#20$T2, 
              _System._tuple#20$T3, 
              _System._tuple#20$T4, 
              _System._tuple#20$T5, 
              _System._tuple#20$T6, 
              _System._tuple#20$T7, 
              _System._tuple#20$T8, 
              _System._tuple#20$T9, 
              _System._tuple#20$T10, 
              _System._tuple#20$T11, 
              _System._tuple#20$T12, 
              _System._tuple#20$T13, 
              _System._tuple#20$T14, 
              _System._tuple#20$T15, 
              _System._tuple#20$T16, 
              _System._tuple#20$T17, 
              _System._tuple#20$T18, 
              _System._tuple#20$T19), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple20(_System._tuple#20$T0, 
            _System._tuple#20$T1, 
            _System._tuple#20$T2, 
            _System._tuple#20$T3, 
            _System._tuple#20$T4, 
            _System._tuple#20$T5, 
            _System._tuple#20$T6, 
            _System._tuple#20$T7, 
            _System._tuple#20$T8, 
            _System._tuple#20$T9, 
            _System._tuple#20$T10, 
            _System._tuple#20$T11, 
            _System._tuple#20$T12, 
            _System._tuple#20$T13, 
            _System._tuple#20$T14, 
            _System._tuple#20$T15, 
            _System._tuple#20$T16, 
            _System._tuple#20$T17, 
            _System._tuple#20$T18, 
            _System._tuple#20$T19), 
          $h))
     ==> $IsAllocBox(_System.Tuple20._8(d), _System._tuple#20$T8, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#20$T9: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple20._9(d), _System._tuple#20$T9, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple20.___hMake20_q(d)
       && (exists _System._tuple#20$T0: Ty, 
          _System._tuple#20$T1: Ty, 
          _System._tuple#20$T2: Ty, 
          _System._tuple#20$T3: Ty, 
          _System._tuple#20$T4: Ty, 
          _System._tuple#20$T5: Ty, 
          _System._tuple#20$T6: Ty, 
          _System._tuple#20$T7: Ty, 
          _System._tuple#20$T8: Ty, 
          _System._tuple#20$T10: Ty, 
          _System._tuple#20$T11: Ty, 
          _System._tuple#20$T12: Ty, 
          _System._tuple#20$T13: Ty, 
          _System._tuple#20$T14: Ty, 
          _System._tuple#20$T15: Ty, 
          _System._tuple#20$T16: Ty, 
          _System._tuple#20$T17: Ty, 
          _System._tuple#20$T18: Ty, 
          _System._tuple#20$T19: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple20(_System._tuple#20$T0, 
              _System._tuple#20$T1, 
              _System._tuple#20$T2, 
              _System._tuple#20$T3, 
              _System._tuple#20$T4, 
              _System._tuple#20$T5, 
              _System._tuple#20$T6, 
              _System._tuple#20$T7, 
              _System._tuple#20$T8, 
              _System._tuple#20$T9, 
              _System._tuple#20$T10, 
              _System._tuple#20$T11, 
              _System._tuple#20$T12, 
              _System._tuple#20$T13, 
              _System._tuple#20$T14, 
              _System._tuple#20$T15, 
              _System._tuple#20$T16, 
              _System._tuple#20$T17, 
              _System._tuple#20$T18, 
              _System._tuple#20$T19), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple20(_System._tuple#20$T0, 
            _System._tuple#20$T1, 
            _System._tuple#20$T2, 
            _System._tuple#20$T3, 
            _System._tuple#20$T4, 
            _System._tuple#20$T5, 
            _System._tuple#20$T6, 
            _System._tuple#20$T7, 
            _System._tuple#20$T8, 
            _System._tuple#20$T9, 
            _System._tuple#20$T10, 
            _System._tuple#20$T11, 
            _System._tuple#20$T12, 
            _System._tuple#20$T13, 
            _System._tuple#20$T14, 
            _System._tuple#20$T15, 
            _System._tuple#20$T16, 
            _System._tuple#20$T17, 
            _System._tuple#20$T18, 
            _System._tuple#20$T19), 
          $h))
     ==> $IsAllocBox(_System.Tuple20._9(d), _System._tuple#20$T9, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#20$T10: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple20._10(d), _System._tuple#20$T10, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple20.___hMake20_q(d)
       && (exists _System._tuple#20$T0: Ty, 
          _System._tuple#20$T1: Ty, 
          _System._tuple#20$T2: Ty, 
          _System._tuple#20$T3: Ty, 
          _System._tuple#20$T4: Ty, 
          _System._tuple#20$T5: Ty, 
          _System._tuple#20$T6: Ty, 
          _System._tuple#20$T7: Ty, 
          _System._tuple#20$T8: Ty, 
          _System._tuple#20$T9: Ty, 
          _System._tuple#20$T11: Ty, 
          _System._tuple#20$T12: Ty, 
          _System._tuple#20$T13: Ty, 
          _System._tuple#20$T14: Ty, 
          _System._tuple#20$T15: Ty, 
          _System._tuple#20$T16: Ty, 
          _System._tuple#20$T17: Ty, 
          _System._tuple#20$T18: Ty, 
          _System._tuple#20$T19: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple20(_System._tuple#20$T0, 
              _System._tuple#20$T1, 
              _System._tuple#20$T2, 
              _System._tuple#20$T3, 
              _System._tuple#20$T4, 
              _System._tuple#20$T5, 
              _System._tuple#20$T6, 
              _System._tuple#20$T7, 
              _System._tuple#20$T8, 
              _System._tuple#20$T9, 
              _System._tuple#20$T10, 
              _System._tuple#20$T11, 
              _System._tuple#20$T12, 
              _System._tuple#20$T13, 
              _System._tuple#20$T14, 
              _System._tuple#20$T15, 
              _System._tuple#20$T16, 
              _System._tuple#20$T17, 
              _System._tuple#20$T18, 
              _System._tuple#20$T19), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple20(_System._tuple#20$T0, 
            _System._tuple#20$T1, 
            _System._tuple#20$T2, 
            _System._tuple#20$T3, 
            _System._tuple#20$T4, 
            _System._tuple#20$T5, 
            _System._tuple#20$T6, 
            _System._tuple#20$T7, 
            _System._tuple#20$T8, 
            _System._tuple#20$T9, 
            _System._tuple#20$T10, 
            _System._tuple#20$T11, 
            _System._tuple#20$T12, 
            _System._tuple#20$T13, 
            _System._tuple#20$T14, 
            _System._tuple#20$T15, 
            _System._tuple#20$T16, 
            _System._tuple#20$T17, 
            _System._tuple#20$T18, 
            _System._tuple#20$T19), 
          $h))
     ==> $IsAllocBox(_System.Tuple20._10(d), _System._tuple#20$T10, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#20$T11: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple20._11(d), _System._tuple#20$T11, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple20.___hMake20_q(d)
       && (exists _System._tuple#20$T0: Ty, 
          _System._tuple#20$T1: Ty, 
          _System._tuple#20$T2: Ty, 
          _System._tuple#20$T3: Ty, 
          _System._tuple#20$T4: Ty, 
          _System._tuple#20$T5: Ty, 
          _System._tuple#20$T6: Ty, 
          _System._tuple#20$T7: Ty, 
          _System._tuple#20$T8: Ty, 
          _System._tuple#20$T9: Ty, 
          _System._tuple#20$T10: Ty, 
          _System._tuple#20$T12: Ty, 
          _System._tuple#20$T13: Ty, 
          _System._tuple#20$T14: Ty, 
          _System._tuple#20$T15: Ty, 
          _System._tuple#20$T16: Ty, 
          _System._tuple#20$T17: Ty, 
          _System._tuple#20$T18: Ty, 
          _System._tuple#20$T19: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple20(_System._tuple#20$T0, 
              _System._tuple#20$T1, 
              _System._tuple#20$T2, 
              _System._tuple#20$T3, 
              _System._tuple#20$T4, 
              _System._tuple#20$T5, 
              _System._tuple#20$T6, 
              _System._tuple#20$T7, 
              _System._tuple#20$T8, 
              _System._tuple#20$T9, 
              _System._tuple#20$T10, 
              _System._tuple#20$T11, 
              _System._tuple#20$T12, 
              _System._tuple#20$T13, 
              _System._tuple#20$T14, 
              _System._tuple#20$T15, 
              _System._tuple#20$T16, 
              _System._tuple#20$T17, 
              _System._tuple#20$T18, 
              _System._tuple#20$T19), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple20(_System._tuple#20$T0, 
            _System._tuple#20$T1, 
            _System._tuple#20$T2, 
            _System._tuple#20$T3, 
            _System._tuple#20$T4, 
            _System._tuple#20$T5, 
            _System._tuple#20$T6, 
            _System._tuple#20$T7, 
            _System._tuple#20$T8, 
            _System._tuple#20$T9, 
            _System._tuple#20$T10, 
            _System._tuple#20$T11, 
            _System._tuple#20$T12, 
            _System._tuple#20$T13, 
            _System._tuple#20$T14, 
            _System._tuple#20$T15, 
            _System._tuple#20$T16, 
            _System._tuple#20$T17, 
            _System._tuple#20$T18, 
            _System._tuple#20$T19), 
          $h))
     ==> $IsAllocBox(_System.Tuple20._11(d), _System._tuple#20$T11, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#20$T12: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple20._12(d), _System._tuple#20$T12, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple20.___hMake20_q(d)
       && (exists _System._tuple#20$T0: Ty, 
          _System._tuple#20$T1: Ty, 
          _System._tuple#20$T2: Ty, 
          _System._tuple#20$T3: Ty, 
          _System._tuple#20$T4: Ty, 
          _System._tuple#20$T5: Ty, 
          _System._tuple#20$T6: Ty, 
          _System._tuple#20$T7: Ty, 
          _System._tuple#20$T8: Ty, 
          _System._tuple#20$T9: Ty, 
          _System._tuple#20$T10: Ty, 
          _System._tuple#20$T11: Ty, 
          _System._tuple#20$T13: Ty, 
          _System._tuple#20$T14: Ty, 
          _System._tuple#20$T15: Ty, 
          _System._tuple#20$T16: Ty, 
          _System._tuple#20$T17: Ty, 
          _System._tuple#20$T18: Ty, 
          _System._tuple#20$T19: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple20(_System._tuple#20$T0, 
              _System._tuple#20$T1, 
              _System._tuple#20$T2, 
              _System._tuple#20$T3, 
              _System._tuple#20$T4, 
              _System._tuple#20$T5, 
              _System._tuple#20$T6, 
              _System._tuple#20$T7, 
              _System._tuple#20$T8, 
              _System._tuple#20$T9, 
              _System._tuple#20$T10, 
              _System._tuple#20$T11, 
              _System._tuple#20$T12, 
              _System._tuple#20$T13, 
              _System._tuple#20$T14, 
              _System._tuple#20$T15, 
              _System._tuple#20$T16, 
              _System._tuple#20$T17, 
              _System._tuple#20$T18, 
              _System._tuple#20$T19), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple20(_System._tuple#20$T0, 
            _System._tuple#20$T1, 
            _System._tuple#20$T2, 
            _System._tuple#20$T3, 
            _System._tuple#20$T4, 
            _System._tuple#20$T5, 
            _System._tuple#20$T6, 
            _System._tuple#20$T7, 
            _System._tuple#20$T8, 
            _System._tuple#20$T9, 
            _System._tuple#20$T10, 
            _System._tuple#20$T11, 
            _System._tuple#20$T12, 
            _System._tuple#20$T13, 
            _System._tuple#20$T14, 
            _System._tuple#20$T15, 
            _System._tuple#20$T16, 
            _System._tuple#20$T17, 
            _System._tuple#20$T18, 
            _System._tuple#20$T19), 
          $h))
     ==> $IsAllocBox(_System.Tuple20._12(d), _System._tuple#20$T12, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#20$T13: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple20._13(d), _System._tuple#20$T13, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple20.___hMake20_q(d)
       && (exists _System._tuple#20$T0: Ty, 
          _System._tuple#20$T1: Ty, 
          _System._tuple#20$T2: Ty, 
          _System._tuple#20$T3: Ty, 
          _System._tuple#20$T4: Ty, 
          _System._tuple#20$T5: Ty, 
          _System._tuple#20$T6: Ty, 
          _System._tuple#20$T7: Ty, 
          _System._tuple#20$T8: Ty, 
          _System._tuple#20$T9: Ty, 
          _System._tuple#20$T10: Ty, 
          _System._tuple#20$T11: Ty, 
          _System._tuple#20$T12: Ty, 
          _System._tuple#20$T14: Ty, 
          _System._tuple#20$T15: Ty, 
          _System._tuple#20$T16: Ty, 
          _System._tuple#20$T17: Ty, 
          _System._tuple#20$T18: Ty, 
          _System._tuple#20$T19: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple20(_System._tuple#20$T0, 
              _System._tuple#20$T1, 
              _System._tuple#20$T2, 
              _System._tuple#20$T3, 
              _System._tuple#20$T4, 
              _System._tuple#20$T5, 
              _System._tuple#20$T6, 
              _System._tuple#20$T7, 
              _System._tuple#20$T8, 
              _System._tuple#20$T9, 
              _System._tuple#20$T10, 
              _System._tuple#20$T11, 
              _System._tuple#20$T12, 
              _System._tuple#20$T13, 
              _System._tuple#20$T14, 
              _System._tuple#20$T15, 
              _System._tuple#20$T16, 
              _System._tuple#20$T17, 
              _System._tuple#20$T18, 
              _System._tuple#20$T19), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple20(_System._tuple#20$T0, 
            _System._tuple#20$T1, 
            _System._tuple#20$T2, 
            _System._tuple#20$T3, 
            _System._tuple#20$T4, 
            _System._tuple#20$T5, 
            _System._tuple#20$T6, 
            _System._tuple#20$T7, 
            _System._tuple#20$T8, 
            _System._tuple#20$T9, 
            _System._tuple#20$T10, 
            _System._tuple#20$T11, 
            _System._tuple#20$T12, 
            _System._tuple#20$T13, 
            _System._tuple#20$T14, 
            _System._tuple#20$T15, 
            _System._tuple#20$T16, 
            _System._tuple#20$T17, 
            _System._tuple#20$T18, 
            _System._tuple#20$T19), 
          $h))
     ==> $IsAllocBox(_System.Tuple20._13(d), _System._tuple#20$T13, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#20$T14: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple20._14(d), _System._tuple#20$T14, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple20.___hMake20_q(d)
       && (exists _System._tuple#20$T0: Ty, 
          _System._tuple#20$T1: Ty, 
          _System._tuple#20$T2: Ty, 
          _System._tuple#20$T3: Ty, 
          _System._tuple#20$T4: Ty, 
          _System._tuple#20$T5: Ty, 
          _System._tuple#20$T6: Ty, 
          _System._tuple#20$T7: Ty, 
          _System._tuple#20$T8: Ty, 
          _System._tuple#20$T9: Ty, 
          _System._tuple#20$T10: Ty, 
          _System._tuple#20$T11: Ty, 
          _System._tuple#20$T12: Ty, 
          _System._tuple#20$T13: Ty, 
          _System._tuple#20$T15: Ty, 
          _System._tuple#20$T16: Ty, 
          _System._tuple#20$T17: Ty, 
          _System._tuple#20$T18: Ty, 
          _System._tuple#20$T19: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple20(_System._tuple#20$T0, 
              _System._tuple#20$T1, 
              _System._tuple#20$T2, 
              _System._tuple#20$T3, 
              _System._tuple#20$T4, 
              _System._tuple#20$T5, 
              _System._tuple#20$T6, 
              _System._tuple#20$T7, 
              _System._tuple#20$T8, 
              _System._tuple#20$T9, 
              _System._tuple#20$T10, 
              _System._tuple#20$T11, 
              _System._tuple#20$T12, 
              _System._tuple#20$T13, 
              _System._tuple#20$T14, 
              _System._tuple#20$T15, 
              _System._tuple#20$T16, 
              _System._tuple#20$T17, 
              _System._tuple#20$T18, 
              _System._tuple#20$T19), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple20(_System._tuple#20$T0, 
            _System._tuple#20$T1, 
            _System._tuple#20$T2, 
            _System._tuple#20$T3, 
            _System._tuple#20$T4, 
            _System._tuple#20$T5, 
            _System._tuple#20$T6, 
            _System._tuple#20$T7, 
            _System._tuple#20$T8, 
            _System._tuple#20$T9, 
            _System._tuple#20$T10, 
            _System._tuple#20$T11, 
            _System._tuple#20$T12, 
            _System._tuple#20$T13, 
            _System._tuple#20$T14, 
            _System._tuple#20$T15, 
            _System._tuple#20$T16, 
            _System._tuple#20$T17, 
            _System._tuple#20$T18, 
            _System._tuple#20$T19), 
          $h))
     ==> $IsAllocBox(_System.Tuple20._14(d), _System._tuple#20$T14, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#20$T15: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple20._15(d), _System._tuple#20$T15, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple20.___hMake20_q(d)
       && (exists _System._tuple#20$T0: Ty, 
          _System._tuple#20$T1: Ty, 
          _System._tuple#20$T2: Ty, 
          _System._tuple#20$T3: Ty, 
          _System._tuple#20$T4: Ty, 
          _System._tuple#20$T5: Ty, 
          _System._tuple#20$T6: Ty, 
          _System._tuple#20$T7: Ty, 
          _System._tuple#20$T8: Ty, 
          _System._tuple#20$T9: Ty, 
          _System._tuple#20$T10: Ty, 
          _System._tuple#20$T11: Ty, 
          _System._tuple#20$T12: Ty, 
          _System._tuple#20$T13: Ty, 
          _System._tuple#20$T14: Ty, 
          _System._tuple#20$T16: Ty, 
          _System._tuple#20$T17: Ty, 
          _System._tuple#20$T18: Ty, 
          _System._tuple#20$T19: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple20(_System._tuple#20$T0, 
              _System._tuple#20$T1, 
              _System._tuple#20$T2, 
              _System._tuple#20$T3, 
              _System._tuple#20$T4, 
              _System._tuple#20$T5, 
              _System._tuple#20$T6, 
              _System._tuple#20$T7, 
              _System._tuple#20$T8, 
              _System._tuple#20$T9, 
              _System._tuple#20$T10, 
              _System._tuple#20$T11, 
              _System._tuple#20$T12, 
              _System._tuple#20$T13, 
              _System._tuple#20$T14, 
              _System._tuple#20$T15, 
              _System._tuple#20$T16, 
              _System._tuple#20$T17, 
              _System._tuple#20$T18, 
              _System._tuple#20$T19), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple20(_System._tuple#20$T0, 
            _System._tuple#20$T1, 
            _System._tuple#20$T2, 
            _System._tuple#20$T3, 
            _System._tuple#20$T4, 
            _System._tuple#20$T5, 
            _System._tuple#20$T6, 
            _System._tuple#20$T7, 
            _System._tuple#20$T8, 
            _System._tuple#20$T9, 
            _System._tuple#20$T10, 
            _System._tuple#20$T11, 
            _System._tuple#20$T12, 
            _System._tuple#20$T13, 
            _System._tuple#20$T14, 
            _System._tuple#20$T15, 
            _System._tuple#20$T16, 
            _System._tuple#20$T17, 
            _System._tuple#20$T18, 
            _System._tuple#20$T19), 
          $h))
     ==> $IsAllocBox(_System.Tuple20._15(d), _System._tuple#20$T15, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#20$T16: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple20._16(d), _System._tuple#20$T16, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple20.___hMake20_q(d)
       && (exists _System._tuple#20$T0: Ty, 
          _System._tuple#20$T1: Ty, 
          _System._tuple#20$T2: Ty, 
          _System._tuple#20$T3: Ty, 
          _System._tuple#20$T4: Ty, 
          _System._tuple#20$T5: Ty, 
          _System._tuple#20$T6: Ty, 
          _System._tuple#20$T7: Ty, 
          _System._tuple#20$T8: Ty, 
          _System._tuple#20$T9: Ty, 
          _System._tuple#20$T10: Ty, 
          _System._tuple#20$T11: Ty, 
          _System._tuple#20$T12: Ty, 
          _System._tuple#20$T13: Ty, 
          _System._tuple#20$T14: Ty, 
          _System._tuple#20$T15: Ty, 
          _System._tuple#20$T17: Ty, 
          _System._tuple#20$T18: Ty, 
          _System._tuple#20$T19: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple20(_System._tuple#20$T0, 
              _System._tuple#20$T1, 
              _System._tuple#20$T2, 
              _System._tuple#20$T3, 
              _System._tuple#20$T4, 
              _System._tuple#20$T5, 
              _System._tuple#20$T6, 
              _System._tuple#20$T7, 
              _System._tuple#20$T8, 
              _System._tuple#20$T9, 
              _System._tuple#20$T10, 
              _System._tuple#20$T11, 
              _System._tuple#20$T12, 
              _System._tuple#20$T13, 
              _System._tuple#20$T14, 
              _System._tuple#20$T15, 
              _System._tuple#20$T16, 
              _System._tuple#20$T17, 
              _System._tuple#20$T18, 
              _System._tuple#20$T19), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple20(_System._tuple#20$T0, 
            _System._tuple#20$T1, 
            _System._tuple#20$T2, 
            _System._tuple#20$T3, 
            _System._tuple#20$T4, 
            _System._tuple#20$T5, 
            _System._tuple#20$T6, 
            _System._tuple#20$T7, 
            _System._tuple#20$T8, 
            _System._tuple#20$T9, 
            _System._tuple#20$T10, 
            _System._tuple#20$T11, 
            _System._tuple#20$T12, 
            _System._tuple#20$T13, 
            _System._tuple#20$T14, 
            _System._tuple#20$T15, 
            _System._tuple#20$T16, 
            _System._tuple#20$T17, 
            _System._tuple#20$T18, 
            _System._tuple#20$T19), 
          $h))
     ==> $IsAllocBox(_System.Tuple20._16(d), _System._tuple#20$T16, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#20$T17: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple20._17(d), _System._tuple#20$T17, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple20.___hMake20_q(d)
       && (exists _System._tuple#20$T0: Ty, 
          _System._tuple#20$T1: Ty, 
          _System._tuple#20$T2: Ty, 
          _System._tuple#20$T3: Ty, 
          _System._tuple#20$T4: Ty, 
          _System._tuple#20$T5: Ty, 
          _System._tuple#20$T6: Ty, 
          _System._tuple#20$T7: Ty, 
          _System._tuple#20$T8: Ty, 
          _System._tuple#20$T9: Ty, 
          _System._tuple#20$T10: Ty, 
          _System._tuple#20$T11: Ty, 
          _System._tuple#20$T12: Ty, 
          _System._tuple#20$T13: Ty, 
          _System._tuple#20$T14: Ty, 
          _System._tuple#20$T15: Ty, 
          _System._tuple#20$T16: Ty, 
          _System._tuple#20$T18: Ty, 
          _System._tuple#20$T19: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple20(_System._tuple#20$T0, 
              _System._tuple#20$T1, 
              _System._tuple#20$T2, 
              _System._tuple#20$T3, 
              _System._tuple#20$T4, 
              _System._tuple#20$T5, 
              _System._tuple#20$T6, 
              _System._tuple#20$T7, 
              _System._tuple#20$T8, 
              _System._tuple#20$T9, 
              _System._tuple#20$T10, 
              _System._tuple#20$T11, 
              _System._tuple#20$T12, 
              _System._tuple#20$T13, 
              _System._tuple#20$T14, 
              _System._tuple#20$T15, 
              _System._tuple#20$T16, 
              _System._tuple#20$T17, 
              _System._tuple#20$T18, 
              _System._tuple#20$T19), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple20(_System._tuple#20$T0, 
            _System._tuple#20$T1, 
            _System._tuple#20$T2, 
            _System._tuple#20$T3, 
            _System._tuple#20$T4, 
            _System._tuple#20$T5, 
            _System._tuple#20$T6, 
            _System._tuple#20$T7, 
            _System._tuple#20$T8, 
            _System._tuple#20$T9, 
            _System._tuple#20$T10, 
            _System._tuple#20$T11, 
            _System._tuple#20$T12, 
            _System._tuple#20$T13, 
            _System._tuple#20$T14, 
            _System._tuple#20$T15, 
            _System._tuple#20$T16, 
            _System._tuple#20$T17, 
            _System._tuple#20$T18, 
            _System._tuple#20$T19), 
          $h))
     ==> $IsAllocBox(_System.Tuple20._17(d), _System._tuple#20$T17, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#20$T18: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple20._18(d), _System._tuple#20$T18, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple20.___hMake20_q(d)
       && (exists _System._tuple#20$T0: Ty, 
          _System._tuple#20$T1: Ty, 
          _System._tuple#20$T2: Ty, 
          _System._tuple#20$T3: Ty, 
          _System._tuple#20$T4: Ty, 
          _System._tuple#20$T5: Ty, 
          _System._tuple#20$T6: Ty, 
          _System._tuple#20$T7: Ty, 
          _System._tuple#20$T8: Ty, 
          _System._tuple#20$T9: Ty, 
          _System._tuple#20$T10: Ty, 
          _System._tuple#20$T11: Ty, 
          _System._tuple#20$T12: Ty, 
          _System._tuple#20$T13: Ty, 
          _System._tuple#20$T14: Ty, 
          _System._tuple#20$T15: Ty, 
          _System._tuple#20$T16: Ty, 
          _System._tuple#20$T17: Ty, 
          _System._tuple#20$T19: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple20(_System._tuple#20$T0, 
              _System._tuple#20$T1, 
              _System._tuple#20$T2, 
              _System._tuple#20$T3, 
              _System._tuple#20$T4, 
              _System._tuple#20$T5, 
              _System._tuple#20$T6, 
              _System._tuple#20$T7, 
              _System._tuple#20$T8, 
              _System._tuple#20$T9, 
              _System._tuple#20$T10, 
              _System._tuple#20$T11, 
              _System._tuple#20$T12, 
              _System._tuple#20$T13, 
              _System._tuple#20$T14, 
              _System._tuple#20$T15, 
              _System._tuple#20$T16, 
              _System._tuple#20$T17, 
              _System._tuple#20$T18, 
              _System._tuple#20$T19), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple20(_System._tuple#20$T0, 
            _System._tuple#20$T1, 
            _System._tuple#20$T2, 
            _System._tuple#20$T3, 
            _System._tuple#20$T4, 
            _System._tuple#20$T5, 
            _System._tuple#20$T6, 
            _System._tuple#20$T7, 
            _System._tuple#20$T8, 
            _System._tuple#20$T9, 
            _System._tuple#20$T10, 
            _System._tuple#20$T11, 
            _System._tuple#20$T12, 
            _System._tuple#20$T13, 
            _System._tuple#20$T14, 
            _System._tuple#20$T15, 
            _System._tuple#20$T16, 
            _System._tuple#20$T17, 
            _System._tuple#20$T18, 
            _System._tuple#20$T19), 
          $h))
     ==> $IsAllocBox(_System.Tuple20._18(d), _System._tuple#20$T18, $h));

// Destructor $IsAlloc
axiom (forall d: DatatypeType, _System._tuple#20$T19: Ty, $h: Heap :: 
  { $IsAllocBox(_System.Tuple20._19(d), _System._tuple#20$T19, $h) } 
  $IsGoodHeap($h)
       && 
      _System.Tuple20.___hMake20_q(d)
       && (exists _System._tuple#20$T0: Ty, 
          _System._tuple#20$T1: Ty, 
          _System._tuple#20$T2: Ty, 
          _System._tuple#20$T3: Ty, 
          _System._tuple#20$T4: Ty, 
          _System._tuple#20$T5: Ty, 
          _System._tuple#20$T6: Ty, 
          _System._tuple#20$T7: Ty, 
          _System._tuple#20$T8: Ty, 
          _System._tuple#20$T9: Ty, 
          _System._tuple#20$T10: Ty, 
          _System._tuple#20$T11: Ty, 
          _System._tuple#20$T12: Ty, 
          _System._tuple#20$T13: Ty, 
          _System._tuple#20$T14: Ty, 
          _System._tuple#20$T15: Ty, 
          _System._tuple#20$T16: Ty, 
          _System._tuple#20$T17: Ty, 
          _System._tuple#20$T18: Ty :: 
        { $IsAlloc(d, 
            Tclass._System.Tuple20(_System._tuple#20$T0, 
              _System._tuple#20$T1, 
              _System._tuple#20$T2, 
              _System._tuple#20$T3, 
              _System._tuple#20$T4, 
              _System._tuple#20$T5, 
              _System._tuple#20$T6, 
              _System._tuple#20$T7, 
              _System._tuple#20$T8, 
              _System._tuple#20$T9, 
              _System._tuple#20$T10, 
              _System._tuple#20$T11, 
              _System._tuple#20$T12, 
              _System._tuple#20$T13, 
              _System._tuple#20$T14, 
              _System._tuple#20$T15, 
              _System._tuple#20$T16, 
              _System._tuple#20$T17, 
              _System._tuple#20$T18, 
              _System._tuple#20$T19), 
            $h) } 
        $IsAlloc(d, 
          Tclass._System.Tuple20(_System._tuple#20$T0, 
            _System._tuple#20$T1, 
            _System._tuple#20$T2, 
            _System._tuple#20$T3, 
            _System._tuple#20$T4, 
            _System._tuple#20$T5, 
            _System._tuple#20$T6, 
            _System._tuple#20$T7, 
            _System._tuple#20$T8, 
            _System._tuple#20$T9, 
            _System._tuple#20$T10, 
            _System._tuple#20$T11, 
            _System._tuple#20$T12, 
            _System._tuple#20$T13, 
            _System._tuple#20$T14, 
            _System._tuple#20$T15, 
            _System._tuple#20$T16, 
            _System._tuple#20$T17, 
            _System._tuple#20$T18, 
            _System._tuple#20$T19), 
          $h))
     ==> $IsAllocBox(_System.Tuple20._19(d), _System._tuple#20$T19, $h));

// Constructor literal
axiom (forall a#465#0#0: Box, 
    a#465#1#0: Box, 
    a#465#2#0: Box, 
    a#465#3#0: Box, 
    a#465#4#0: Box, 
    a#465#5#0: Box, 
    a#465#6#0: Box, 
    a#465#7#0: Box, 
    a#465#8#0: Box, 
    a#465#9#0: Box, 
    a#465#10#0: Box, 
    a#465#11#0: Box, 
    a#465#12#0: Box, 
    a#465#13#0: Box, 
    a#465#14#0: Box, 
    a#465#15#0: Box, 
    a#465#16#0: Box, 
    a#465#17#0: Box, 
    a#465#18#0: Box, 
    a#465#19#0: Box :: 
  { #_System._tuple#20._#Make20(Lit(a#465#0#0), 
      Lit(a#465#1#0), 
      Lit(a#465#2#0), 
      Lit(a#465#3#0), 
      Lit(a#465#4#0), 
      Lit(a#465#5#0), 
      Lit(a#465#6#0), 
      Lit(a#465#7#0), 
      Lit(a#465#8#0), 
      Lit(a#465#9#0), 
      Lit(a#465#10#0), 
      Lit(a#465#11#0), 
      Lit(a#465#12#0), 
      Lit(a#465#13#0), 
      Lit(a#465#14#0), 
      Lit(a#465#15#0), 
      Lit(a#465#16#0), 
      Lit(a#465#17#0), 
      Lit(a#465#18#0), 
      Lit(a#465#19#0)) } 
  #_System._tuple#20._#Make20(Lit(a#465#0#0), 
      Lit(a#465#1#0), 
      Lit(a#465#2#0), 
      Lit(a#465#3#0), 
      Lit(a#465#4#0), 
      Lit(a#465#5#0), 
      Lit(a#465#6#0), 
      Lit(a#465#7#0), 
      Lit(a#465#8#0), 
      Lit(a#465#9#0), 
      Lit(a#465#10#0), 
      Lit(a#465#11#0), 
      Lit(a#465#12#0), 
      Lit(a#465#13#0), 
      Lit(a#465#14#0), 
      Lit(a#465#15#0), 
      Lit(a#465#16#0), 
      Lit(a#465#17#0), 
      Lit(a#465#18#0), 
      Lit(a#465#19#0))
     == Lit(#_System._tuple#20._#Make20(a#465#0#0, 
        a#465#1#0, 
        a#465#2#0, 
        a#465#3#0, 
        a#465#4#0, 
        a#465#5#0, 
        a#465#6#0, 
        a#465#7#0, 
        a#465#8#0, 
        a#465#9#0, 
        a#465#10#0, 
        a#465#11#0, 
        a#465#12#0, 
        a#465#13#0, 
        a#465#14#0, 
        a#465#15#0, 
        a#465#16#0, 
        a#465#17#0, 
        a#465#18#0, 
        a#465#19#0)));

function _System.Tuple20._0(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#466#0#0: Box, 
    a#466#1#0: Box, 
    a#466#2#0: Box, 
    a#466#3#0: Box, 
    a#466#4#0: Box, 
    a#466#5#0: Box, 
    a#466#6#0: Box, 
    a#466#7#0: Box, 
    a#466#8#0: Box, 
    a#466#9#0: Box, 
    a#466#10#0: Box, 
    a#466#11#0: Box, 
    a#466#12#0: Box, 
    a#466#13#0: Box, 
    a#466#14#0: Box, 
    a#466#15#0: Box, 
    a#466#16#0: Box, 
    a#466#17#0: Box, 
    a#466#18#0: Box, 
    a#466#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#466#0#0, 
      a#466#1#0, 
      a#466#2#0, 
      a#466#3#0, 
      a#466#4#0, 
      a#466#5#0, 
      a#466#6#0, 
      a#466#7#0, 
      a#466#8#0, 
      a#466#9#0, 
      a#466#10#0, 
      a#466#11#0, 
      a#466#12#0, 
      a#466#13#0, 
      a#466#14#0, 
      a#466#15#0, 
      a#466#16#0, 
      a#466#17#0, 
      a#466#18#0, 
      a#466#19#0) } 
  _System.Tuple20._0(#_System._tuple#20._#Make20(a#466#0#0, 
        a#466#1#0, 
        a#466#2#0, 
        a#466#3#0, 
        a#466#4#0, 
        a#466#5#0, 
        a#466#6#0, 
        a#466#7#0, 
        a#466#8#0, 
        a#466#9#0, 
        a#466#10#0, 
        a#466#11#0, 
        a#466#12#0, 
        a#466#13#0, 
        a#466#14#0, 
        a#466#15#0, 
        a#466#16#0, 
        a#466#17#0, 
        a#466#18#0, 
        a#466#19#0))
     == a#466#0#0);

// Inductive rank
axiom (forall a#467#0#0: Box, 
    a#467#1#0: Box, 
    a#467#2#0: Box, 
    a#467#3#0: Box, 
    a#467#4#0: Box, 
    a#467#5#0: Box, 
    a#467#6#0: Box, 
    a#467#7#0: Box, 
    a#467#8#0: Box, 
    a#467#9#0: Box, 
    a#467#10#0: Box, 
    a#467#11#0: Box, 
    a#467#12#0: Box, 
    a#467#13#0: Box, 
    a#467#14#0: Box, 
    a#467#15#0: Box, 
    a#467#16#0: Box, 
    a#467#17#0: Box, 
    a#467#18#0: Box, 
    a#467#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#467#0#0, 
      a#467#1#0, 
      a#467#2#0, 
      a#467#3#0, 
      a#467#4#0, 
      a#467#5#0, 
      a#467#6#0, 
      a#467#7#0, 
      a#467#8#0, 
      a#467#9#0, 
      a#467#10#0, 
      a#467#11#0, 
      a#467#12#0, 
      a#467#13#0, 
      a#467#14#0, 
      a#467#15#0, 
      a#467#16#0, 
      a#467#17#0, 
      a#467#18#0, 
      a#467#19#0) } 
  BoxRank(a#467#0#0)
     < DtRank(#_System._tuple#20._#Make20(a#467#0#0, 
        a#467#1#0, 
        a#467#2#0, 
        a#467#3#0, 
        a#467#4#0, 
        a#467#5#0, 
        a#467#6#0, 
        a#467#7#0, 
        a#467#8#0, 
        a#467#9#0, 
        a#467#10#0, 
        a#467#11#0, 
        a#467#12#0, 
        a#467#13#0, 
        a#467#14#0, 
        a#467#15#0, 
        a#467#16#0, 
        a#467#17#0, 
        a#467#18#0, 
        a#467#19#0)));

function _System.Tuple20._1(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#468#0#0: Box, 
    a#468#1#0: Box, 
    a#468#2#0: Box, 
    a#468#3#0: Box, 
    a#468#4#0: Box, 
    a#468#5#0: Box, 
    a#468#6#0: Box, 
    a#468#7#0: Box, 
    a#468#8#0: Box, 
    a#468#9#0: Box, 
    a#468#10#0: Box, 
    a#468#11#0: Box, 
    a#468#12#0: Box, 
    a#468#13#0: Box, 
    a#468#14#0: Box, 
    a#468#15#0: Box, 
    a#468#16#0: Box, 
    a#468#17#0: Box, 
    a#468#18#0: Box, 
    a#468#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#468#0#0, 
      a#468#1#0, 
      a#468#2#0, 
      a#468#3#0, 
      a#468#4#0, 
      a#468#5#0, 
      a#468#6#0, 
      a#468#7#0, 
      a#468#8#0, 
      a#468#9#0, 
      a#468#10#0, 
      a#468#11#0, 
      a#468#12#0, 
      a#468#13#0, 
      a#468#14#0, 
      a#468#15#0, 
      a#468#16#0, 
      a#468#17#0, 
      a#468#18#0, 
      a#468#19#0) } 
  _System.Tuple20._1(#_System._tuple#20._#Make20(a#468#0#0, 
        a#468#1#0, 
        a#468#2#0, 
        a#468#3#0, 
        a#468#4#0, 
        a#468#5#0, 
        a#468#6#0, 
        a#468#7#0, 
        a#468#8#0, 
        a#468#9#0, 
        a#468#10#0, 
        a#468#11#0, 
        a#468#12#0, 
        a#468#13#0, 
        a#468#14#0, 
        a#468#15#0, 
        a#468#16#0, 
        a#468#17#0, 
        a#468#18#0, 
        a#468#19#0))
     == a#468#1#0);

// Inductive rank
axiom (forall a#469#0#0: Box, 
    a#469#1#0: Box, 
    a#469#2#0: Box, 
    a#469#3#0: Box, 
    a#469#4#0: Box, 
    a#469#5#0: Box, 
    a#469#6#0: Box, 
    a#469#7#0: Box, 
    a#469#8#0: Box, 
    a#469#9#0: Box, 
    a#469#10#0: Box, 
    a#469#11#0: Box, 
    a#469#12#0: Box, 
    a#469#13#0: Box, 
    a#469#14#0: Box, 
    a#469#15#0: Box, 
    a#469#16#0: Box, 
    a#469#17#0: Box, 
    a#469#18#0: Box, 
    a#469#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#469#0#0, 
      a#469#1#0, 
      a#469#2#0, 
      a#469#3#0, 
      a#469#4#0, 
      a#469#5#0, 
      a#469#6#0, 
      a#469#7#0, 
      a#469#8#0, 
      a#469#9#0, 
      a#469#10#0, 
      a#469#11#0, 
      a#469#12#0, 
      a#469#13#0, 
      a#469#14#0, 
      a#469#15#0, 
      a#469#16#0, 
      a#469#17#0, 
      a#469#18#0, 
      a#469#19#0) } 
  BoxRank(a#469#1#0)
     < DtRank(#_System._tuple#20._#Make20(a#469#0#0, 
        a#469#1#0, 
        a#469#2#0, 
        a#469#3#0, 
        a#469#4#0, 
        a#469#5#0, 
        a#469#6#0, 
        a#469#7#0, 
        a#469#8#0, 
        a#469#9#0, 
        a#469#10#0, 
        a#469#11#0, 
        a#469#12#0, 
        a#469#13#0, 
        a#469#14#0, 
        a#469#15#0, 
        a#469#16#0, 
        a#469#17#0, 
        a#469#18#0, 
        a#469#19#0)));

function _System.Tuple20._2(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#470#0#0: Box, 
    a#470#1#0: Box, 
    a#470#2#0: Box, 
    a#470#3#0: Box, 
    a#470#4#0: Box, 
    a#470#5#0: Box, 
    a#470#6#0: Box, 
    a#470#7#0: Box, 
    a#470#8#0: Box, 
    a#470#9#0: Box, 
    a#470#10#0: Box, 
    a#470#11#0: Box, 
    a#470#12#0: Box, 
    a#470#13#0: Box, 
    a#470#14#0: Box, 
    a#470#15#0: Box, 
    a#470#16#0: Box, 
    a#470#17#0: Box, 
    a#470#18#0: Box, 
    a#470#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#470#0#0, 
      a#470#1#0, 
      a#470#2#0, 
      a#470#3#0, 
      a#470#4#0, 
      a#470#5#0, 
      a#470#6#0, 
      a#470#7#0, 
      a#470#8#0, 
      a#470#9#0, 
      a#470#10#0, 
      a#470#11#0, 
      a#470#12#0, 
      a#470#13#0, 
      a#470#14#0, 
      a#470#15#0, 
      a#470#16#0, 
      a#470#17#0, 
      a#470#18#0, 
      a#470#19#0) } 
  _System.Tuple20._2(#_System._tuple#20._#Make20(a#470#0#0, 
        a#470#1#0, 
        a#470#2#0, 
        a#470#3#0, 
        a#470#4#0, 
        a#470#5#0, 
        a#470#6#0, 
        a#470#7#0, 
        a#470#8#0, 
        a#470#9#0, 
        a#470#10#0, 
        a#470#11#0, 
        a#470#12#0, 
        a#470#13#0, 
        a#470#14#0, 
        a#470#15#0, 
        a#470#16#0, 
        a#470#17#0, 
        a#470#18#0, 
        a#470#19#0))
     == a#470#2#0);

// Inductive rank
axiom (forall a#471#0#0: Box, 
    a#471#1#0: Box, 
    a#471#2#0: Box, 
    a#471#3#0: Box, 
    a#471#4#0: Box, 
    a#471#5#0: Box, 
    a#471#6#0: Box, 
    a#471#7#0: Box, 
    a#471#8#0: Box, 
    a#471#9#0: Box, 
    a#471#10#0: Box, 
    a#471#11#0: Box, 
    a#471#12#0: Box, 
    a#471#13#0: Box, 
    a#471#14#0: Box, 
    a#471#15#0: Box, 
    a#471#16#0: Box, 
    a#471#17#0: Box, 
    a#471#18#0: Box, 
    a#471#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#471#0#0, 
      a#471#1#0, 
      a#471#2#0, 
      a#471#3#0, 
      a#471#4#0, 
      a#471#5#0, 
      a#471#6#0, 
      a#471#7#0, 
      a#471#8#0, 
      a#471#9#0, 
      a#471#10#0, 
      a#471#11#0, 
      a#471#12#0, 
      a#471#13#0, 
      a#471#14#0, 
      a#471#15#0, 
      a#471#16#0, 
      a#471#17#0, 
      a#471#18#0, 
      a#471#19#0) } 
  BoxRank(a#471#2#0)
     < DtRank(#_System._tuple#20._#Make20(a#471#0#0, 
        a#471#1#0, 
        a#471#2#0, 
        a#471#3#0, 
        a#471#4#0, 
        a#471#5#0, 
        a#471#6#0, 
        a#471#7#0, 
        a#471#8#0, 
        a#471#9#0, 
        a#471#10#0, 
        a#471#11#0, 
        a#471#12#0, 
        a#471#13#0, 
        a#471#14#0, 
        a#471#15#0, 
        a#471#16#0, 
        a#471#17#0, 
        a#471#18#0, 
        a#471#19#0)));

function _System.Tuple20._3(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#472#0#0: Box, 
    a#472#1#0: Box, 
    a#472#2#0: Box, 
    a#472#3#0: Box, 
    a#472#4#0: Box, 
    a#472#5#0: Box, 
    a#472#6#0: Box, 
    a#472#7#0: Box, 
    a#472#8#0: Box, 
    a#472#9#0: Box, 
    a#472#10#0: Box, 
    a#472#11#0: Box, 
    a#472#12#0: Box, 
    a#472#13#0: Box, 
    a#472#14#0: Box, 
    a#472#15#0: Box, 
    a#472#16#0: Box, 
    a#472#17#0: Box, 
    a#472#18#0: Box, 
    a#472#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#472#0#0, 
      a#472#1#0, 
      a#472#2#0, 
      a#472#3#0, 
      a#472#4#0, 
      a#472#5#0, 
      a#472#6#0, 
      a#472#7#0, 
      a#472#8#0, 
      a#472#9#0, 
      a#472#10#0, 
      a#472#11#0, 
      a#472#12#0, 
      a#472#13#0, 
      a#472#14#0, 
      a#472#15#0, 
      a#472#16#0, 
      a#472#17#0, 
      a#472#18#0, 
      a#472#19#0) } 
  _System.Tuple20._3(#_System._tuple#20._#Make20(a#472#0#0, 
        a#472#1#0, 
        a#472#2#0, 
        a#472#3#0, 
        a#472#4#0, 
        a#472#5#0, 
        a#472#6#0, 
        a#472#7#0, 
        a#472#8#0, 
        a#472#9#0, 
        a#472#10#0, 
        a#472#11#0, 
        a#472#12#0, 
        a#472#13#0, 
        a#472#14#0, 
        a#472#15#0, 
        a#472#16#0, 
        a#472#17#0, 
        a#472#18#0, 
        a#472#19#0))
     == a#472#3#0);

// Inductive rank
axiom (forall a#473#0#0: Box, 
    a#473#1#0: Box, 
    a#473#2#0: Box, 
    a#473#3#0: Box, 
    a#473#4#0: Box, 
    a#473#5#0: Box, 
    a#473#6#0: Box, 
    a#473#7#0: Box, 
    a#473#8#0: Box, 
    a#473#9#0: Box, 
    a#473#10#0: Box, 
    a#473#11#0: Box, 
    a#473#12#0: Box, 
    a#473#13#0: Box, 
    a#473#14#0: Box, 
    a#473#15#0: Box, 
    a#473#16#0: Box, 
    a#473#17#0: Box, 
    a#473#18#0: Box, 
    a#473#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#473#0#0, 
      a#473#1#0, 
      a#473#2#0, 
      a#473#3#0, 
      a#473#4#0, 
      a#473#5#0, 
      a#473#6#0, 
      a#473#7#0, 
      a#473#8#0, 
      a#473#9#0, 
      a#473#10#0, 
      a#473#11#0, 
      a#473#12#0, 
      a#473#13#0, 
      a#473#14#0, 
      a#473#15#0, 
      a#473#16#0, 
      a#473#17#0, 
      a#473#18#0, 
      a#473#19#0) } 
  BoxRank(a#473#3#0)
     < DtRank(#_System._tuple#20._#Make20(a#473#0#0, 
        a#473#1#0, 
        a#473#2#0, 
        a#473#3#0, 
        a#473#4#0, 
        a#473#5#0, 
        a#473#6#0, 
        a#473#7#0, 
        a#473#8#0, 
        a#473#9#0, 
        a#473#10#0, 
        a#473#11#0, 
        a#473#12#0, 
        a#473#13#0, 
        a#473#14#0, 
        a#473#15#0, 
        a#473#16#0, 
        a#473#17#0, 
        a#473#18#0, 
        a#473#19#0)));

function _System.Tuple20._4(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#474#0#0: Box, 
    a#474#1#0: Box, 
    a#474#2#0: Box, 
    a#474#3#0: Box, 
    a#474#4#0: Box, 
    a#474#5#0: Box, 
    a#474#6#0: Box, 
    a#474#7#0: Box, 
    a#474#8#0: Box, 
    a#474#9#0: Box, 
    a#474#10#0: Box, 
    a#474#11#0: Box, 
    a#474#12#0: Box, 
    a#474#13#0: Box, 
    a#474#14#0: Box, 
    a#474#15#0: Box, 
    a#474#16#0: Box, 
    a#474#17#0: Box, 
    a#474#18#0: Box, 
    a#474#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#474#0#0, 
      a#474#1#0, 
      a#474#2#0, 
      a#474#3#0, 
      a#474#4#0, 
      a#474#5#0, 
      a#474#6#0, 
      a#474#7#0, 
      a#474#8#0, 
      a#474#9#0, 
      a#474#10#0, 
      a#474#11#0, 
      a#474#12#0, 
      a#474#13#0, 
      a#474#14#0, 
      a#474#15#0, 
      a#474#16#0, 
      a#474#17#0, 
      a#474#18#0, 
      a#474#19#0) } 
  _System.Tuple20._4(#_System._tuple#20._#Make20(a#474#0#0, 
        a#474#1#0, 
        a#474#2#0, 
        a#474#3#0, 
        a#474#4#0, 
        a#474#5#0, 
        a#474#6#0, 
        a#474#7#0, 
        a#474#8#0, 
        a#474#9#0, 
        a#474#10#0, 
        a#474#11#0, 
        a#474#12#0, 
        a#474#13#0, 
        a#474#14#0, 
        a#474#15#0, 
        a#474#16#0, 
        a#474#17#0, 
        a#474#18#0, 
        a#474#19#0))
     == a#474#4#0);

// Inductive rank
axiom (forall a#475#0#0: Box, 
    a#475#1#0: Box, 
    a#475#2#0: Box, 
    a#475#3#0: Box, 
    a#475#4#0: Box, 
    a#475#5#0: Box, 
    a#475#6#0: Box, 
    a#475#7#0: Box, 
    a#475#8#0: Box, 
    a#475#9#0: Box, 
    a#475#10#0: Box, 
    a#475#11#0: Box, 
    a#475#12#0: Box, 
    a#475#13#0: Box, 
    a#475#14#0: Box, 
    a#475#15#0: Box, 
    a#475#16#0: Box, 
    a#475#17#0: Box, 
    a#475#18#0: Box, 
    a#475#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#475#0#0, 
      a#475#1#0, 
      a#475#2#0, 
      a#475#3#0, 
      a#475#4#0, 
      a#475#5#0, 
      a#475#6#0, 
      a#475#7#0, 
      a#475#8#0, 
      a#475#9#0, 
      a#475#10#0, 
      a#475#11#0, 
      a#475#12#0, 
      a#475#13#0, 
      a#475#14#0, 
      a#475#15#0, 
      a#475#16#0, 
      a#475#17#0, 
      a#475#18#0, 
      a#475#19#0) } 
  BoxRank(a#475#4#0)
     < DtRank(#_System._tuple#20._#Make20(a#475#0#0, 
        a#475#1#0, 
        a#475#2#0, 
        a#475#3#0, 
        a#475#4#0, 
        a#475#5#0, 
        a#475#6#0, 
        a#475#7#0, 
        a#475#8#0, 
        a#475#9#0, 
        a#475#10#0, 
        a#475#11#0, 
        a#475#12#0, 
        a#475#13#0, 
        a#475#14#0, 
        a#475#15#0, 
        a#475#16#0, 
        a#475#17#0, 
        a#475#18#0, 
        a#475#19#0)));

function _System.Tuple20._5(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#476#0#0: Box, 
    a#476#1#0: Box, 
    a#476#2#0: Box, 
    a#476#3#0: Box, 
    a#476#4#0: Box, 
    a#476#5#0: Box, 
    a#476#6#0: Box, 
    a#476#7#0: Box, 
    a#476#8#0: Box, 
    a#476#9#0: Box, 
    a#476#10#0: Box, 
    a#476#11#0: Box, 
    a#476#12#0: Box, 
    a#476#13#0: Box, 
    a#476#14#0: Box, 
    a#476#15#0: Box, 
    a#476#16#0: Box, 
    a#476#17#0: Box, 
    a#476#18#0: Box, 
    a#476#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#476#0#0, 
      a#476#1#0, 
      a#476#2#0, 
      a#476#3#0, 
      a#476#4#0, 
      a#476#5#0, 
      a#476#6#0, 
      a#476#7#0, 
      a#476#8#0, 
      a#476#9#0, 
      a#476#10#0, 
      a#476#11#0, 
      a#476#12#0, 
      a#476#13#0, 
      a#476#14#0, 
      a#476#15#0, 
      a#476#16#0, 
      a#476#17#0, 
      a#476#18#0, 
      a#476#19#0) } 
  _System.Tuple20._5(#_System._tuple#20._#Make20(a#476#0#0, 
        a#476#1#0, 
        a#476#2#0, 
        a#476#3#0, 
        a#476#4#0, 
        a#476#5#0, 
        a#476#6#0, 
        a#476#7#0, 
        a#476#8#0, 
        a#476#9#0, 
        a#476#10#0, 
        a#476#11#0, 
        a#476#12#0, 
        a#476#13#0, 
        a#476#14#0, 
        a#476#15#0, 
        a#476#16#0, 
        a#476#17#0, 
        a#476#18#0, 
        a#476#19#0))
     == a#476#5#0);

// Inductive rank
axiom (forall a#477#0#0: Box, 
    a#477#1#0: Box, 
    a#477#2#0: Box, 
    a#477#3#0: Box, 
    a#477#4#0: Box, 
    a#477#5#0: Box, 
    a#477#6#0: Box, 
    a#477#7#0: Box, 
    a#477#8#0: Box, 
    a#477#9#0: Box, 
    a#477#10#0: Box, 
    a#477#11#0: Box, 
    a#477#12#0: Box, 
    a#477#13#0: Box, 
    a#477#14#0: Box, 
    a#477#15#0: Box, 
    a#477#16#0: Box, 
    a#477#17#0: Box, 
    a#477#18#0: Box, 
    a#477#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#477#0#0, 
      a#477#1#0, 
      a#477#2#0, 
      a#477#3#0, 
      a#477#4#0, 
      a#477#5#0, 
      a#477#6#0, 
      a#477#7#0, 
      a#477#8#0, 
      a#477#9#0, 
      a#477#10#0, 
      a#477#11#0, 
      a#477#12#0, 
      a#477#13#0, 
      a#477#14#0, 
      a#477#15#0, 
      a#477#16#0, 
      a#477#17#0, 
      a#477#18#0, 
      a#477#19#0) } 
  BoxRank(a#477#5#0)
     < DtRank(#_System._tuple#20._#Make20(a#477#0#0, 
        a#477#1#0, 
        a#477#2#0, 
        a#477#3#0, 
        a#477#4#0, 
        a#477#5#0, 
        a#477#6#0, 
        a#477#7#0, 
        a#477#8#0, 
        a#477#9#0, 
        a#477#10#0, 
        a#477#11#0, 
        a#477#12#0, 
        a#477#13#0, 
        a#477#14#0, 
        a#477#15#0, 
        a#477#16#0, 
        a#477#17#0, 
        a#477#18#0, 
        a#477#19#0)));

function _System.Tuple20._6(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#478#0#0: Box, 
    a#478#1#0: Box, 
    a#478#2#0: Box, 
    a#478#3#0: Box, 
    a#478#4#0: Box, 
    a#478#5#0: Box, 
    a#478#6#0: Box, 
    a#478#7#0: Box, 
    a#478#8#0: Box, 
    a#478#9#0: Box, 
    a#478#10#0: Box, 
    a#478#11#0: Box, 
    a#478#12#0: Box, 
    a#478#13#0: Box, 
    a#478#14#0: Box, 
    a#478#15#0: Box, 
    a#478#16#0: Box, 
    a#478#17#0: Box, 
    a#478#18#0: Box, 
    a#478#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#478#0#0, 
      a#478#1#0, 
      a#478#2#0, 
      a#478#3#0, 
      a#478#4#0, 
      a#478#5#0, 
      a#478#6#0, 
      a#478#7#0, 
      a#478#8#0, 
      a#478#9#0, 
      a#478#10#0, 
      a#478#11#0, 
      a#478#12#0, 
      a#478#13#0, 
      a#478#14#0, 
      a#478#15#0, 
      a#478#16#0, 
      a#478#17#0, 
      a#478#18#0, 
      a#478#19#0) } 
  _System.Tuple20._6(#_System._tuple#20._#Make20(a#478#0#0, 
        a#478#1#0, 
        a#478#2#0, 
        a#478#3#0, 
        a#478#4#0, 
        a#478#5#0, 
        a#478#6#0, 
        a#478#7#0, 
        a#478#8#0, 
        a#478#9#0, 
        a#478#10#0, 
        a#478#11#0, 
        a#478#12#0, 
        a#478#13#0, 
        a#478#14#0, 
        a#478#15#0, 
        a#478#16#0, 
        a#478#17#0, 
        a#478#18#0, 
        a#478#19#0))
     == a#478#6#0);

// Inductive rank
axiom (forall a#479#0#0: Box, 
    a#479#1#0: Box, 
    a#479#2#0: Box, 
    a#479#3#0: Box, 
    a#479#4#0: Box, 
    a#479#5#0: Box, 
    a#479#6#0: Box, 
    a#479#7#0: Box, 
    a#479#8#0: Box, 
    a#479#9#0: Box, 
    a#479#10#0: Box, 
    a#479#11#0: Box, 
    a#479#12#0: Box, 
    a#479#13#0: Box, 
    a#479#14#0: Box, 
    a#479#15#0: Box, 
    a#479#16#0: Box, 
    a#479#17#0: Box, 
    a#479#18#0: Box, 
    a#479#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#479#0#0, 
      a#479#1#0, 
      a#479#2#0, 
      a#479#3#0, 
      a#479#4#0, 
      a#479#5#0, 
      a#479#6#0, 
      a#479#7#0, 
      a#479#8#0, 
      a#479#9#0, 
      a#479#10#0, 
      a#479#11#0, 
      a#479#12#0, 
      a#479#13#0, 
      a#479#14#0, 
      a#479#15#0, 
      a#479#16#0, 
      a#479#17#0, 
      a#479#18#0, 
      a#479#19#0) } 
  BoxRank(a#479#6#0)
     < DtRank(#_System._tuple#20._#Make20(a#479#0#0, 
        a#479#1#0, 
        a#479#2#0, 
        a#479#3#0, 
        a#479#4#0, 
        a#479#5#0, 
        a#479#6#0, 
        a#479#7#0, 
        a#479#8#0, 
        a#479#9#0, 
        a#479#10#0, 
        a#479#11#0, 
        a#479#12#0, 
        a#479#13#0, 
        a#479#14#0, 
        a#479#15#0, 
        a#479#16#0, 
        a#479#17#0, 
        a#479#18#0, 
        a#479#19#0)));

function _System.Tuple20._7(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#480#0#0: Box, 
    a#480#1#0: Box, 
    a#480#2#0: Box, 
    a#480#3#0: Box, 
    a#480#4#0: Box, 
    a#480#5#0: Box, 
    a#480#6#0: Box, 
    a#480#7#0: Box, 
    a#480#8#0: Box, 
    a#480#9#0: Box, 
    a#480#10#0: Box, 
    a#480#11#0: Box, 
    a#480#12#0: Box, 
    a#480#13#0: Box, 
    a#480#14#0: Box, 
    a#480#15#0: Box, 
    a#480#16#0: Box, 
    a#480#17#0: Box, 
    a#480#18#0: Box, 
    a#480#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#480#0#0, 
      a#480#1#0, 
      a#480#2#0, 
      a#480#3#0, 
      a#480#4#0, 
      a#480#5#0, 
      a#480#6#0, 
      a#480#7#0, 
      a#480#8#0, 
      a#480#9#0, 
      a#480#10#0, 
      a#480#11#0, 
      a#480#12#0, 
      a#480#13#0, 
      a#480#14#0, 
      a#480#15#0, 
      a#480#16#0, 
      a#480#17#0, 
      a#480#18#0, 
      a#480#19#0) } 
  _System.Tuple20._7(#_System._tuple#20._#Make20(a#480#0#0, 
        a#480#1#0, 
        a#480#2#0, 
        a#480#3#0, 
        a#480#4#0, 
        a#480#5#0, 
        a#480#6#0, 
        a#480#7#0, 
        a#480#8#0, 
        a#480#9#0, 
        a#480#10#0, 
        a#480#11#0, 
        a#480#12#0, 
        a#480#13#0, 
        a#480#14#0, 
        a#480#15#0, 
        a#480#16#0, 
        a#480#17#0, 
        a#480#18#0, 
        a#480#19#0))
     == a#480#7#0);

// Inductive rank
axiom (forall a#481#0#0: Box, 
    a#481#1#0: Box, 
    a#481#2#0: Box, 
    a#481#3#0: Box, 
    a#481#4#0: Box, 
    a#481#5#0: Box, 
    a#481#6#0: Box, 
    a#481#7#0: Box, 
    a#481#8#0: Box, 
    a#481#9#0: Box, 
    a#481#10#0: Box, 
    a#481#11#0: Box, 
    a#481#12#0: Box, 
    a#481#13#0: Box, 
    a#481#14#0: Box, 
    a#481#15#0: Box, 
    a#481#16#0: Box, 
    a#481#17#0: Box, 
    a#481#18#0: Box, 
    a#481#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#481#0#0, 
      a#481#1#0, 
      a#481#2#0, 
      a#481#3#0, 
      a#481#4#0, 
      a#481#5#0, 
      a#481#6#0, 
      a#481#7#0, 
      a#481#8#0, 
      a#481#9#0, 
      a#481#10#0, 
      a#481#11#0, 
      a#481#12#0, 
      a#481#13#0, 
      a#481#14#0, 
      a#481#15#0, 
      a#481#16#0, 
      a#481#17#0, 
      a#481#18#0, 
      a#481#19#0) } 
  BoxRank(a#481#7#0)
     < DtRank(#_System._tuple#20._#Make20(a#481#0#0, 
        a#481#1#0, 
        a#481#2#0, 
        a#481#3#0, 
        a#481#4#0, 
        a#481#5#0, 
        a#481#6#0, 
        a#481#7#0, 
        a#481#8#0, 
        a#481#9#0, 
        a#481#10#0, 
        a#481#11#0, 
        a#481#12#0, 
        a#481#13#0, 
        a#481#14#0, 
        a#481#15#0, 
        a#481#16#0, 
        a#481#17#0, 
        a#481#18#0, 
        a#481#19#0)));

function _System.Tuple20._8(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#482#0#0: Box, 
    a#482#1#0: Box, 
    a#482#2#0: Box, 
    a#482#3#0: Box, 
    a#482#4#0: Box, 
    a#482#5#0: Box, 
    a#482#6#0: Box, 
    a#482#7#0: Box, 
    a#482#8#0: Box, 
    a#482#9#0: Box, 
    a#482#10#0: Box, 
    a#482#11#0: Box, 
    a#482#12#0: Box, 
    a#482#13#0: Box, 
    a#482#14#0: Box, 
    a#482#15#0: Box, 
    a#482#16#0: Box, 
    a#482#17#0: Box, 
    a#482#18#0: Box, 
    a#482#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#482#0#0, 
      a#482#1#0, 
      a#482#2#0, 
      a#482#3#0, 
      a#482#4#0, 
      a#482#5#0, 
      a#482#6#0, 
      a#482#7#0, 
      a#482#8#0, 
      a#482#9#0, 
      a#482#10#0, 
      a#482#11#0, 
      a#482#12#0, 
      a#482#13#0, 
      a#482#14#0, 
      a#482#15#0, 
      a#482#16#0, 
      a#482#17#0, 
      a#482#18#0, 
      a#482#19#0) } 
  _System.Tuple20._8(#_System._tuple#20._#Make20(a#482#0#0, 
        a#482#1#0, 
        a#482#2#0, 
        a#482#3#0, 
        a#482#4#0, 
        a#482#5#0, 
        a#482#6#0, 
        a#482#7#0, 
        a#482#8#0, 
        a#482#9#0, 
        a#482#10#0, 
        a#482#11#0, 
        a#482#12#0, 
        a#482#13#0, 
        a#482#14#0, 
        a#482#15#0, 
        a#482#16#0, 
        a#482#17#0, 
        a#482#18#0, 
        a#482#19#0))
     == a#482#8#0);

// Inductive rank
axiom (forall a#483#0#0: Box, 
    a#483#1#0: Box, 
    a#483#2#0: Box, 
    a#483#3#0: Box, 
    a#483#4#0: Box, 
    a#483#5#0: Box, 
    a#483#6#0: Box, 
    a#483#7#0: Box, 
    a#483#8#0: Box, 
    a#483#9#0: Box, 
    a#483#10#0: Box, 
    a#483#11#0: Box, 
    a#483#12#0: Box, 
    a#483#13#0: Box, 
    a#483#14#0: Box, 
    a#483#15#0: Box, 
    a#483#16#0: Box, 
    a#483#17#0: Box, 
    a#483#18#0: Box, 
    a#483#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#483#0#0, 
      a#483#1#0, 
      a#483#2#0, 
      a#483#3#0, 
      a#483#4#0, 
      a#483#5#0, 
      a#483#6#0, 
      a#483#7#0, 
      a#483#8#0, 
      a#483#9#0, 
      a#483#10#0, 
      a#483#11#0, 
      a#483#12#0, 
      a#483#13#0, 
      a#483#14#0, 
      a#483#15#0, 
      a#483#16#0, 
      a#483#17#0, 
      a#483#18#0, 
      a#483#19#0) } 
  BoxRank(a#483#8#0)
     < DtRank(#_System._tuple#20._#Make20(a#483#0#0, 
        a#483#1#0, 
        a#483#2#0, 
        a#483#3#0, 
        a#483#4#0, 
        a#483#5#0, 
        a#483#6#0, 
        a#483#7#0, 
        a#483#8#0, 
        a#483#9#0, 
        a#483#10#0, 
        a#483#11#0, 
        a#483#12#0, 
        a#483#13#0, 
        a#483#14#0, 
        a#483#15#0, 
        a#483#16#0, 
        a#483#17#0, 
        a#483#18#0, 
        a#483#19#0)));

function _System.Tuple20._9(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#484#0#0: Box, 
    a#484#1#0: Box, 
    a#484#2#0: Box, 
    a#484#3#0: Box, 
    a#484#4#0: Box, 
    a#484#5#0: Box, 
    a#484#6#0: Box, 
    a#484#7#0: Box, 
    a#484#8#0: Box, 
    a#484#9#0: Box, 
    a#484#10#0: Box, 
    a#484#11#0: Box, 
    a#484#12#0: Box, 
    a#484#13#0: Box, 
    a#484#14#0: Box, 
    a#484#15#0: Box, 
    a#484#16#0: Box, 
    a#484#17#0: Box, 
    a#484#18#0: Box, 
    a#484#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#484#0#0, 
      a#484#1#0, 
      a#484#2#0, 
      a#484#3#0, 
      a#484#4#0, 
      a#484#5#0, 
      a#484#6#0, 
      a#484#7#0, 
      a#484#8#0, 
      a#484#9#0, 
      a#484#10#0, 
      a#484#11#0, 
      a#484#12#0, 
      a#484#13#0, 
      a#484#14#0, 
      a#484#15#0, 
      a#484#16#0, 
      a#484#17#0, 
      a#484#18#0, 
      a#484#19#0) } 
  _System.Tuple20._9(#_System._tuple#20._#Make20(a#484#0#0, 
        a#484#1#0, 
        a#484#2#0, 
        a#484#3#0, 
        a#484#4#0, 
        a#484#5#0, 
        a#484#6#0, 
        a#484#7#0, 
        a#484#8#0, 
        a#484#9#0, 
        a#484#10#0, 
        a#484#11#0, 
        a#484#12#0, 
        a#484#13#0, 
        a#484#14#0, 
        a#484#15#0, 
        a#484#16#0, 
        a#484#17#0, 
        a#484#18#0, 
        a#484#19#0))
     == a#484#9#0);

// Inductive rank
axiom (forall a#485#0#0: Box, 
    a#485#1#0: Box, 
    a#485#2#0: Box, 
    a#485#3#0: Box, 
    a#485#4#0: Box, 
    a#485#5#0: Box, 
    a#485#6#0: Box, 
    a#485#7#0: Box, 
    a#485#8#0: Box, 
    a#485#9#0: Box, 
    a#485#10#0: Box, 
    a#485#11#0: Box, 
    a#485#12#0: Box, 
    a#485#13#0: Box, 
    a#485#14#0: Box, 
    a#485#15#0: Box, 
    a#485#16#0: Box, 
    a#485#17#0: Box, 
    a#485#18#0: Box, 
    a#485#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#485#0#0, 
      a#485#1#0, 
      a#485#2#0, 
      a#485#3#0, 
      a#485#4#0, 
      a#485#5#0, 
      a#485#6#0, 
      a#485#7#0, 
      a#485#8#0, 
      a#485#9#0, 
      a#485#10#0, 
      a#485#11#0, 
      a#485#12#0, 
      a#485#13#0, 
      a#485#14#0, 
      a#485#15#0, 
      a#485#16#0, 
      a#485#17#0, 
      a#485#18#0, 
      a#485#19#0) } 
  BoxRank(a#485#9#0)
     < DtRank(#_System._tuple#20._#Make20(a#485#0#0, 
        a#485#1#0, 
        a#485#2#0, 
        a#485#3#0, 
        a#485#4#0, 
        a#485#5#0, 
        a#485#6#0, 
        a#485#7#0, 
        a#485#8#0, 
        a#485#9#0, 
        a#485#10#0, 
        a#485#11#0, 
        a#485#12#0, 
        a#485#13#0, 
        a#485#14#0, 
        a#485#15#0, 
        a#485#16#0, 
        a#485#17#0, 
        a#485#18#0, 
        a#485#19#0)));

function _System.Tuple20._10(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#486#0#0: Box, 
    a#486#1#0: Box, 
    a#486#2#0: Box, 
    a#486#3#0: Box, 
    a#486#4#0: Box, 
    a#486#5#0: Box, 
    a#486#6#0: Box, 
    a#486#7#0: Box, 
    a#486#8#0: Box, 
    a#486#9#0: Box, 
    a#486#10#0: Box, 
    a#486#11#0: Box, 
    a#486#12#0: Box, 
    a#486#13#0: Box, 
    a#486#14#0: Box, 
    a#486#15#0: Box, 
    a#486#16#0: Box, 
    a#486#17#0: Box, 
    a#486#18#0: Box, 
    a#486#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#486#0#0, 
      a#486#1#0, 
      a#486#2#0, 
      a#486#3#0, 
      a#486#4#0, 
      a#486#5#0, 
      a#486#6#0, 
      a#486#7#0, 
      a#486#8#0, 
      a#486#9#0, 
      a#486#10#0, 
      a#486#11#0, 
      a#486#12#0, 
      a#486#13#0, 
      a#486#14#0, 
      a#486#15#0, 
      a#486#16#0, 
      a#486#17#0, 
      a#486#18#0, 
      a#486#19#0) } 
  _System.Tuple20._10(#_System._tuple#20._#Make20(a#486#0#0, 
        a#486#1#0, 
        a#486#2#0, 
        a#486#3#0, 
        a#486#4#0, 
        a#486#5#0, 
        a#486#6#0, 
        a#486#7#0, 
        a#486#8#0, 
        a#486#9#0, 
        a#486#10#0, 
        a#486#11#0, 
        a#486#12#0, 
        a#486#13#0, 
        a#486#14#0, 
        a#486#15#0, 
        a#486#16#0, 
        a#486#17#0, 
        a#486#18#0, 
        a#486#19#0))
     == a#486#10#0);

// Inductive rank
axiom (forall a#487#0#0: Box, 
    a#487#1#0: Box, 
    a#487#2#0: Box, 
    a#487#3#0: Box, 
    a#487#4#0: Box, 
    a#487#5#0: Box, 
    a#487#6#0: Box, 
    a#487#7#0: Box, 
    a#487#8#0: Box, 
    a#487#9#0: Box, 
    a#487#10#0: Box, 
    a#487#11#0: Box, 
    a#487#12#0: Box, 
    a#487#13#0: Box, 
    a#487#14#0: Box, 
    a#487#15#0: Box, 
    a#487#16#0: Box, 
    a#487#17#0: Box, 
    a#487#18#0: Box, 
    a#487#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#487#0#0, 
      a#487#1#0, 
      a#487#2#0, 
      a#487#3#0, 
      a#487#4#0, 
      a#487#5#0, 
      a#487#6#0, 
      a#487#7#0, 
      a#487#8#0, 
      a#487#9#0, 
      a#487#10#0, 
      a#487#11#0, 
      a#487#12#0, 
      a#487#13#0, 
      a#487#14#0, 
      a#487#15#0, 
      a#487#16#0, 
      a#487#17#0, 
      a#487#18#0, 
      a#487#19#0) } 
  BoxRank(a#487#10#0)
     < DtRank(#_System._tuple#20._#Make20(a#487#0#0, 
        a#487#1#0, 
        a#487#2#0, 
        a#487#3#0, 
        a#487#4#0, 
        a#487#5#0, 
        a#487#6#0, 
        a#487#7#0, 
        a#487#8#0, 
        a#487#9#0, 
        a#487#10#0, 
        a#487#11#0, 
        a#487#12#0, 
        a#487#13#0, 
        a#487#14#0, 
        a#487#15#0, 
        a#487#16#0, 
        a#487#17#0, 
        a#487#18#0, 
        a#487#19#0)));

function _System.Tuple20._11(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#488#0#0: Box, 
    a#488#1#0: Box, 
    a#488#2#0: Box, 
    a#488#3#0: Box, 
    a#488#4#0: Box, 
    a#488#5#0: Box, 
    a#488#6#0: Box, 
    a#488#7#0: Box, 
    a#488#8#0: Box, 
    a#488#9#0: Box, 
    a#488#10#0: Box, 
    a#488#11#0: Box, 
    a#488#12#0: Box, 
    a#488#13#0: Box, 
    a#488#14#0: Box, 
    a#488#15#0: Box, 
    a#488#16#0: Box, 
    a#488#17#0: Box, 
    a#488#18#0: Box, 
    a#488#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#488#0#0, 
      a#488#1#0, 
      a#488#2#0, 
      a#488#3#0, 
      a#488#4#0, 
      a#488#5#0, 
      a#488#6#0, 
      a#488#7#0, 
      a#488#8#0, 
      a#488#9#0, 
      a#488#10#0, 
      a#488#11#0, 
      a#488#12#0, 
      a#488#13#0, 
      a#488#14#0, 
      a#488#15#0, 
      a#488#16#0, 
      a#488#17#0, 
      a#488#18#0, 
      a#488#19#0) } 
  _System.Tuple20._11(#_System._tuple#20._#Make20(a#488#0#0, 
        a#488#1#0, 
        a#488#2#0, 
        a#488#3#0, 
        a#488#4#0, 
        a#488#5#0, 
        a#488#6#0, 
        a#488#7#0, 
        a#488#8#0, 
        a#488#9#0, 
        a#488#10#0, 
        a#488#11#0, 
        a#488#12#0, 
        a#488#13#0, 
        a#488#14#0, 
        a#488#15#0, 
        a#488#16#0, 
        a#488#17#0, 
        a#488#18#0, 
        a#488#19#0))
     == a#488#11#0);

// Inductive rank
axiom (forall a#489#0#0: Box, 
    a#489#1#0: Box, 
    a#489#2#0: Box, 
    a#489#3#0: Box, 
    a#489#4#0: Box, 
    a#489#5#0: Box, 
    a#489#6#0: Box, 
    a#489#7#0: Box, 
    a#489#8#0: Box, 
    a#489#9#0: Box, 
    a#489#10#0: Box, 
    a#489#11#0: Box, 
    a#489#12#0: Box, 
    a#489#13#0: Box, 
    a#489#14#0: Box, 
    a#489#15#0: Box, 
    a#489#16#0: Box, 
    a#489#17#0: Box, 
    a#489#18#0: Box, 
    a#489#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#489#0#0, 
      a#489#1#0, 
      a#489#2#0, 
      a#489#3#0, 
      a#489#4#0, 
      a#489#5#0, 
      a#489#6#0, 
      a#489#7#0, 
      a#489#8#0, 
      a#489#9#0, 
      a#489#10#0, 
      a#489#11#0, 
      a#489#12#0, 
      a#489#13#0, 
      a#489#14#0, 
      a#489#15#0, 
      a#489#16#0, 
      a#489#17#0, 
      a#489#18#0, 
      a#489#19#0) } 
  BoxRank(a#489#11#0)
     < DtRank(#_System._tuple#20._#Make20(a#489#0#0, 
        a#489#1#0, 
        a#489#2#0, 
        a#489#3#0, 
        a#489#4#0, 
        a#489#5#0, 
        a#489#6#0, 
        a#489#7#0, 
        a#489#8#0, 
        a#489#9#0, 
        a#489#10#0, 
        a#489#11#0, 
        a#489#12#0, 
        a#489#13#0, 
        a#489#14#0, 
        a#489#15#0, 
        a#489#16#0, 
        a#489#17#0, 
        a#489#18#0, 
        a#489#19#0)));

function _System.Tuple20._12(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#490#0#0: Box, 
    a#490#1#0: Box, 
    a#490#2#0: Box, 
    a#490#3#0: Box, 
    a#490#4#0: Box, 
    a#490#5#0: Box, 
    a#490#6#0: Box, 
    a#490#7#0: Box, 
    a#490#8#0: Box, 
    a#490#9#0: Box, 
    a#490#10#0: Box, 
    a#490#11#0: Box, 
    a#490#12#0: Box, 
    a#490#13#0: Box, 
    a#490#14#0: Box, 
    a#490#15#0: Box, 
    a#490#16#0: Box, 
    a#490#17#0: Box, 
    a#490#18#0: Box, 
    a#490#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#490#0#0, 
      a#490#1#0, 
      a#490#2#0, 
      a#490#3#0, 
      a#490#4#0, 
      a#490#5#0, 
      a#490#6#0, 
      a#490#7#0, 
      a#490#8#0, 
      a#490#9#0, 
      a#490#10#0, 
      a#490#11#0, 
      a#490#12#0, 
      a#490#13#0, 
      a#490#14#0, 
      a#490#15#0, 
      a#490#16#0, 
      a#490#17#0, 
      a#490#18#0, 
      a#490#19#0) } 
  _System.Tuple20._12(#_System._tuple#20._#Make20(a#490#0#0, 
        a#490#1#0, 
        a#490#2#0, 
        a#490#3#0, 
        a#490#4#0, 
        a#490#5#0, 
        a#490#6#0, 
        a#490#7#0, 
        a#490#8#0, 
        a#490#9#0, 
        a#490#10#0, 
        a#490#11#0, 
        a#490#12#0, 
        a#490#13#0, 
        a#490#14#0, 
        a#490#15#0, 
        a#490#16#0, 
        a#490#17#0, 
        a#490#18#0, 
        a#490#19#0))
     == a#490#12#0);

// Inductive rank
axiom (forall a#491#0#0: Box, 
    a#491#1#0: Box, 
    a#491#2#0: Box, 
    a#491#3#0: Box, 
    a#491#4#0: Box, 
    a#491#5#0: Box, 
    a#491#6#0: Box, 
    a#491#7#0: Box, 
    a#491#8#0: Box, 
    a#491#9#0: Box, 
    a#491#10#0: Box, 
    a#491#11#0: Box, 
    a#491#12#0: Box, 
    a#491#13#0: Box, 
    a#491#14#0: Box, 
    a#491#15#0: Box, 
    a#491#16#0: Box, 
    a#491#17#0: Box, 
    a#491#18#0: Box, 
    a#491#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#491#0#0, 
      a#491#1#0, 
      a#491#2#0, 
      a#491#3#0, 
      a#491#4#0, 
      a#491#5#0, 
      a#491#6#0, 
      a#491#7#0, 
      a#491#8#0, 
      a#491#9#0, 
      a#491#10#0, 
      a#491#11#0, 
      a#491#12#0, 
      a#491#13#0, 
      a#491#14#0, 
      a#491#15#0, 
      a#491#16#0, 
      a#491#17#0, 
      a#491#18#0, 
      a#491#19#0) } 
  BoxRank(a#491#12#0)
     < DtRank(#_System._tuple#20._#Make20(a#491#0#0, 
        a#491#1#0, 
        a#491#2#0, 
        a#491#3#0, 
        a#491#4#0, 
        a#491#5#0, 
        a#491#6#0, 
        a#491#7#0, 
        a#491#8#0, 
        a#491#9#0, 
        a#491#10#0, 
        a#491#11#0, 
        a#491#12#0, 
        a#491#13#0, 
        a#491#14#0, 
        a#491#15#0, 
        a#491#16#0, 
        a#491#17#0, 
        a#491#18#0, 
        a#491#19#0)));

function _System.Tuple20._13(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#492#0#0: Box, 
    a#492#1#0: Box, 
    a#492#2#0: Box, 
    a#492#3#0: Box, 
    a#492#4#0: Box, 
    a#492#5#0: Box, 
    a#492#6#0: Box, 
    a#492#7#0: Box, 
    a#492#8#0: Box, 
    a#492#9#0: Box, 
    a#492#10#0: Box, 
    a#492#11#0: Box, 
    a#492#12#0: Box, 
    a#492#13#0: Box, 
    a#492#14#0: Box, 
    a#492#15#0: Box, 
    a#492#16#0: Box, 
    a#492#17#0: Box, 
    a#492#18#0: Box, 
    a#492#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#492#0#0, 
      a#492#1#0, 
      a#492#2#0, 
      a#492#3#0, 
      a#492#4#0, 
      a#492#5#0, 
      a#492#6#0, 
      a#492#7#0, 
      a#492#8#0, 
      a#492#9#0, 
      a#492#10#0, 
      a#492#11#0, 
      a#492#12#0, 
      a#492#13#0, 
      a#492#14#0, 
      a#492#15#0, 
      a#492#16#0, 
      a#492#17#0, 
      a#492#18#0, 
      a#492#19#0) } 
  _System.Tuple20._13(#_System._tuple#20._#Make20(a#492#0#0, 
        a#492#1#0, 
        a#492#2#0, 
        a#492#3#0, 
        a#492#4#0, 
        a#492#5#0, 
        a#492#6#0, 
        a#492#7#0, 
        a#492#8#0, 
        a#492#9#0, 
        a#492#10#0, 
        a#492#11#0, 
        a#492#12#0, 
        a#492#13#0, 
        a#492#14#0, 
        a#492#15#0, 
        a#492#16#0, 
        a#492#17#0, 
        a#492#18#0, 
        a#492#19#0))
     == a#492#13#0);

// Inductive rank
axiom (forall a#493#0#0: Box, 
    a#493#1#0: Box, 
    a#493#2#0: Box, 
    a#493#3#0: Box, 
    a#493#4#0: Box, 
    a#493#5#0: Box, 
    a#493#6#0: Box, 
    a#493#7#0: Box, 
    a#493#8#0: Box, 
    a#493#9#0: Box, 
    a#493#10#0: Box, 
    a#493#11#0: Box, 
    a#493#12#0: Box, 
    a#493#13#0: Box, 
    a#493#14#0: Box, 
    a#493#15#0: Box, 
    a#493#16#0: Box, 
    a#493#17#0: Box, 
    a#493#18#0: Box, 
    a#493#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#493#0#0, 
      a#493#1#0, 
      a#493#2#0, 
      a#493#3#0, 
      a#493#4#0, 
      a#493#5#0, 
      a#493#6#0, 
      a#493#7#0, 
      a#493#8#0, 
      a#493#9#0, 
      a#493#10#0, 
      a#493#11#0, 
      a#493#12#0, 
      a#493#13#0, 
      a#493#14#0, 
      a#493#15#0, 
      a#493#16#0, 
      a#493#17#0, 
      a#493#18#0, 
      a#493#19#0) } 
  BoxRank(a#493#13#0)
     < DtRank(#_System._tuple#20._#Make20(a#493#0#0, 
        a#493#1#0, 
        a#493#2#0, 
        a#493#3#0, 
        a#493#4#0, 
        a#493#5#0, 
        a#493#6#0, 
        a#493#7#0, 
        a#493#8#0, 
        a#493#9#0, 
        a#493#10#0, 
        a#493#11#0, 
        a#493#12#0, 
        a#493#13#0, 
        a#493#14#0, 
        a#493#15#0, 
        a#493#16#0, 
        a#493#17#0, 
        a#493#18#0, 
        a#493#19#0)));

function _System.Tuple20._14(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#494#0#0: Box, 
    a#494#1#0: Box, 
    a#494#2#0: Box, 
    a#494#3#0: Box, 
    a#494#4#0: Box, 
    a#494#5#0: Box, 
    a#494#6#0: Box, 
    a#494#7#0: Box, 
    a#494#8#0: Box, 
    a#494#9#0: Box, 
    a#494#10#0: Box, 
    a#494#11#0: Box, 
    a#494#12#0: Box, 
    a#494#13#0: Box, 
    a#494#14#0: Box, 
    a#494#15#0: Box, 
    a#494#16#0: Box, 
    a#494#17#0: Box, 
    a#494#18#0: Box, 
    a#494#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#494#0#0, 
      a#494#1#0, 
      a#494#2#0, 
      a#494#3#0, 
      a#494#4#0, 
      a#494#5#0, 
      a#494#6#0, 
      a#494#7#0, 
      a#494#8#0, 
      a#494#9#0, 
      a#494#10#0, 
      a#494#11#0, 
      a#494#12#0, 
      a#494#13#0, 
      a#494#14#0, 
      a#494#15#0, 
      a#494#16#0, 
      a#494#17#0, 
      a#494#18#0, 
      a#494#19#0) } 
  _System.Tuple20._14(#_System._tuple#20._#Make20(a#494#0#0, 
        a#494#1#0, 
        a#494#2#0, 
        a#494#3#0, 
        a#494#4#0, 
        a#494#5#0, 
        a#494#6#0, 
        a#494#7#0, 
        a#494#8#0, 
        a#494#9#0, 
        a#494#10#0, 
        a#494#11#0, 
        a#494#12#0, 
        a#494#13#0, 
        a#494#14#0, 
        a#494#15#0, 
        a#494#16#0, 
        a#494#17#0, 
        a#494#18#0, 
        a#494#19#0))
     == a#494#14#0);

// Inductive rank
axiom (forall a#495#0#0: Box, 
    a#495#1#0: Box, 
    a#495#2#0: Box, 
    a#495#3#0: Box, 
    a#495#4#0: Box, 
    a#495#5#0: Box, 
    a#495#6#0: Box, 
    a#495#7#0: Box, 
    a#495#8#0: Box, 
    a#495#9#0: Box, 
    a#495#10#0: Box, 
    a#495#11#0: Box, 
    a#495#12#0: Box, 
    a#495#13#0: Box, 
    a#495#14#0: Box, 
    a#495#15#0: Box, 
    a#495#16#0: Box, 
    a#495#17#0: Box, 
    a#495#18#0: Box, 
    a#495#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#495#0#0, 
      a#495#1#0, 
      a#495#2#0, 
      a#495#3#0, 
      a#495#4#0, 
      a#495#5#0, 
      a#495#6#0, 
      a#495#7#0, 
      a#495#8#0, 
      a#495#9#0, 
      a#495#10#0, 
      a#495#11#0, 
      a#495#12#0, 
      a#495#13#0, 
      a#495#14#0, 
      a#495#15#0, 
      a#495#16#0, 
      a#495#17#0, 
      a#495#18#0, 
      a#495#19#0) } 
  BoxRank(a#495#14#0)
     < DtRank(#_System._tuple#20._#Make20(a#495#0#0, 
        a#495#1#0, 
        a#495#2#0, 
        a#495#3#0, 
        a#495#4#0, 
        a#495#5#0, 
        a#495#6#0, 
        a#495#7#0, 
        a#495#8#0, 
        a#495#9#0, 
        a#495#10#0, 
        a#495#11#0, 
        a#495#12#0, 
        a#495#13#0, 
        a#495#14#0, 
        a#495#15#0, 
        a#495#16#0, 
        a#495#17#0, 
        a#495#18#0, 
        a#495#19#0)));

function _System.Tuple20._15(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#496#0#0: Box, 
    a#496#1#0: Box, 
    a#496#2#0: Box, 
    a#496#3#0: Box, 
    a#496#4#0: Box, 
    a#496#5#0: Box, 
    a#496#6#0: Box, 
    a#496#7#0: Box, 
    a#496#8#0: Box, 
    a#496#9#0: Box, 
    a#496#10#0: Box, 
    a#496#11#0: Box, 
    a#496#12#0: Box, 
    a#496#13#0: Box, 
    a#496#14#0: Box, 
    a#496#15#0: Box, 
    a#496#16#0: Box, 
    a#496#17#0: Box, 
    a#496#18#0: Box, 
    a#496#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#496#0#0, 
      a#496#1#0, 
      a#496#2#0, 
      a#496#3#0, 
      a#496#4#0, 
      a#496#5#0, 
      a#496#6#0, 
      a#496#7#0, 
      a#496#8#0, 
      a#496#9#0, 
      a#496#10#0, 
      a#496#11#0, 
      a#496#12#0, 
      a#496#13#0, 
      a#496#14#0, 
      a#496#15#0, 
      a#496#16#0, 
      a#496#17#0, 
      a#496#18#0, 
      a#496#19#0) } 
  _System.Tuple20._15(#_System._tuple#20._#Make20(a#496#0#0, 
        a#496#1#0, 
        a#496#2#0, 
        a#496#3#0, 
        a#496#4#0, 
        a#496#5#0, 
        a#496#6#0, 
        a#496#7#0, 
        a#496#8#0, 
        a#496#9#0, 
        a#496#10#0, 
        a#496#11#0, 
        a#496#12#0, 
        a#496#13#0, 
        a#496#14#0, 
        a#496#15#0, 
        a#496#16#0, 
        a#496#17#0, 
        a#496#18#0, 
        a#496#19#0))
     == a#496#15#0);

// Inductive rank
axiom (forall a#497#0#0: Box, 
    a#497#1#0: Box, 
    a#497#2#0: Box, 
    a#497#3#0: Box, 
    a#497#4#0: Box, 
    a#497#5#0: Box, 
    a#497#6#0: Box, 
    a#497#7#0: Box, 
    a#497#8#0: Box, 
    a#497#9#0: Box, 
    a#497#10#0: Box, 
    a#497#11#0: Box, 
    a#497#12#0: Box, 
    a#497#13#0: Box, 
    a#497#14#0: Box, 
    a#497#15#0: Box, 
    a#497#16#0: Box, 
    a#497#17#0: Box, 
    a#497#18#0: Box, 
    a#497#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#497#0#0, 
      a#497#1#0, 
      a#497#2#0, 
      a#497#3#0, 
      a#497#4#0, 
      a#497#5#0, 
      a#497#6#0, 
      a#497#7#0, 
      a#497#8#0, 
      a#497#9#0, 
      a#497#10#0, 
      a#497#11#0, 
      a#497#12#0, 
      a#497#13#0, 
      a#497#14#0, 
      a#497#15#0, 
      a#497#16#0, 
      a#497#17#0, 
      a#497#18#0, 
      a#497#19#0) } 
  BoxRank(a#497#15#0)
     < DtRank(#_System._tuple#20._#Make20(a#497#0#0, 
        a#497#1#0, 
        a#497#2#0, 
        a#497#3#0, 
        a#497#4#0, 
        a#497#5#0, 
        a#497#6#0, 
        a#497#7#0, 
        a#497#8#0, 
        a#497#9#0, 
        a#497#10#0, 
        a#497#11#0, 
        a#497#12#0, 
        a#497#13#0, 
        a#497#14#0, 
        a#497#15#0, 
        a#497#16#0, 
        a#497#17#0, 
        a#497#18#0, 
        a#497#19#0)));

function _System.Tuple20._16(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#498#0#0: Box, 
    a#498#1#0: Box, 
    a#498#2#0: Box, 
    a#498#3#0: Box, 
    a#498#4#0: Box, 
    a#498#5#0: Box, 
    a#498#6#0: Box, 
    a#498#7#0: Box, 
    a#498#8#0: Box, 
    a#498#9#0: Box, 
    a#498#10#0: Box, 
    a#498#11#0: Box, 
    a#498#12#0: Box, 
    a#498#13#0: Box, 
    a#498#14#0: Box, 
    a#498#15#0: Box, 
    a#498#16#0: Box, 
    a#498#17#0: Box, 
    a#498#18#0: Box, 
    a#498#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#498#0#0, 
      a#498#1#0, 
      a#498#2#0, 
      a#498#3#0, 
      a#498#4#0, 
      a#498#5#0, 
      a#498#6#0, 
      a#498#7#0, 
      a#498#8#0, 
      a#498#9#0, 
      a#498#10#0, 
      a#498#11#0, 
      a#498#12#0, 
      a#498#13#0, 
      a#498#14#0, 
      a#498#15#0, 
      a#498#16#0, 
      a#498#17#0, 
      a#498#18#0, 
      a#498#19#0) } 
  _System.Tuple20._16(#_System._tuple#20._#Make20(a#498#0#0, 
        a#498#1#0, 
        a#498#2#0, 
        a#498#3#0, 
        a#498#4#0, 
        a#498#5#0, 
        a#498#6#0, 
        a#498#7#0, 
        a#498#8#0, 
        a#498#9#0, 
        a#498#10#0, 
        a#498#11#0, 
        a#498#12#0, 
        a#498#13#0, 
        a#498#14#0, 
        a#498#15#0, 
        a#498#16#0, 
        a#498#17#0, 
        a#498#18#0, 
        a#498#19#0))
     == a#498#16#0);

// Inductive rank
axiom (forall a#499#0#0: Box, 
    a#499#1#0: Box, 
    a#499#2#0: Box, 
    a#499#3#0: Box, 
    a#499#4#0: Box, 
    a#499#5#0: Box, 
    a#499#6#0: Box, 
    a#499#7#0: Box, 
    a#499#8#0: Box, 
    a#499#9#0: Box, 
    a#499#10#0: Box, 
    a#499#11#0: Box, 
    a#499#12#0: Box, 
    a#499#13#0: Box, 
    a#499#14#0: Box, 
    a#499#15#0: Box, 
    a#499#16#0: Box, 
    a#499#17#0: Box, 
    a#499#18#0: Box, 
    a#499#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#499#0#0, 
      a#499#1#0, 
      a#499#2#0, 
      a#499#3#0, 
      a#499#4#0, 
      a#499#5#0, 
      a#499#6#0, 
      a#499#7#0, 
      a#499#8#0, 
      a#499#9#0, 
      a#499#10#0, 
      a#499#11#0, 
      a#499#12#0, 
      a#499#13#0, 
      a#499#14#0, 
      a#499#15#0, 
      a#499#16#0, 
      a#499#17#0, 
      a#499#18#0, 
      a#499#19#0) } 
  BoxRank(a#499#16#0)
     < DtRank(#_System._tuple#20._#Make20(a#499#0#0, 
        a#499#1#0, 
        a#499#2#0, 
        a#499#3#0, 
        a#499#4#0, 
        a#499#5#0, 
        a#499#6#0, 
        a#499#7#0, 
        a#499#8#0, 
        a#499#9#0, 
        a#499#10#0, 
        a#499#11#0, 
        a#499#12#0, 
        a#499#13#0, 
        a#499#14#0, 
        a#499#15#0, 
        a#499#16#0, 
        a#499#17#0, 
        a#499#18#0, 
        a#499#19#0)));

function _System.Tuple20._17(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#500#0#0: Box, 
    a#500#1#0: Box, 
    a#500#2#0: Box, 
    a#500#3#0: Box, 
    a#500#4#0: Box, 
    a#500#5#0: Box, 
    a#500#6#0: Box, 
    a#500#7#0: Box, 
    a#500#8#0: Box, 
    a#500#9#0: Box, 
    a#500#10#0: Box, 
    a#500#11#0: Box, 
    a#500#12#0: Box, 
    a#500#13#0: Box, 
    a#500#14#0: Box, 
    a#500#15#0: Box, 
    a#500#16#0: Box, 
    a#500#17#0: Box, 
    a#500#18#0: Box, 
    a#500#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#500#0#0, 
      a#500#1#0, 
      a#500#2#0, 
      a#500#3#0, 
      a#500#4#0, 
      a#500#5#0, 
      a#500#6#0, 
      a#500#7#0, 
      a#500#8#0, 
      a#500#9#0, 
      a#500#10#0, 
      a#500#11#0, 
      a#500#12#0, 
      a#500#13#0, 
      a#500#14#0, 
      a#500#15#0, 
      a#500#16#0, 
      a#500#17#0, 
      a#500#18#0, 
      a#500#19#0) } 
  _System.Tuple20._17(#_System._tuple#20._#Make20(a#500#0#0, 
        a#500#1#0, 
        a#500#2#0, 
        a#500#3#0, 
        a#500#4#0, 
        a#500#5#0, 
        a#500#6#0, 
        a#500#7#0, 
        a#500#8#0, 
        a#500#9#0, 
        a#500#10#0, 
        a#500#11#0, 
        a#500#12#0, 
        a#500#13#0, 
        a#500#14#0, 
        a#500#15#0, 
        a#500#16#0, 
        a#500#17#0, 
        a#500#18#0, 
        a#500#19#0))
     == a#500#17#0);

// Inductive rank
axiom (forall a#501#0#0: Box, 
    a#501#1#0: Box, 
    a#501#2#0: Box, 
    a#501#3#0: Box, 
    a#501#4#0: Box, 
    a#501#5#0: Box, 
    a#501#6#0: Box, 
    a#501#7#0: Box, 
    a#501#8#0: Box, 
    a#501#9#0: Box, 
    a#501#10#0: Box, 
    a#501#11#0: Box, 
    a#501#12#0: Box, 
    a#501#13#0: Box, 
    a#501#14#0: Box, 
    a#501#15#0: Box, 
    a#501#16#0: Box, 
    a#501#17#0: Box, 
    a#501#18#0: Box, 
    a#501#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#501#0#0, 
      a#501#1#0, 
      a#501#2#0, 
      a#501#3#0, 
      a#501#4#0, 
      a#501#5#0, 
      a#501#6#0, 
      a#501#7#0, 
      a#501#8#0, 
      a#501#9#0, 
      a#501#10#0, 
      a#501#11#0, 
      a#501#12#0, 
      a#501#13#0, 
      a#501#14#0, 
      a#501#15#0, 
      a#501#16#0, 
      a#501#17#0, 
      a#501#18#0, 
      a#501#19#0) } 
  BoxRank(a#501#17#0)
     < DtRank(#_System._tuple#20._#Make20(a#501#0#0, 
        a#501#1#0, 
        a#501#2#0, 
        a#501#3#0, 
        a#501#4#0, 
        a#501#5#0, 
        a#501#6#0, 
        a#501#7#0, 
        a#501#8#0, 
        a#501#9#0, 
        a#501#10#0, 
        a#501#11#0, 
        a#501#12#0, 
        a#501#13#0, 
        a#501#14#0, 
        a#501#15#0, 
        a#501#16#0, 
        a#501#17#0, 
        a#501#18#0, 
        a#501#19#0)));

function _System.Tuple20._18(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#502#0#0: Box, 
    a#502#1#0: Box, 
    a#502#2#0: Box, 
    a#502#3#0: Box, 
    a#502#4#0: Box, 
    a#502#5#0: Box, 
    a#502#6#0: Box, 
    a#502#7#0: Box, 
    a#502#8#0: Box, 
    a#502#9#0: Box, 
    a#502#10#0: Box, 
    a#502#11#0: Box, 
    a#502#12#0: Box, 
    a#502#13#0: Box, 
    a#502#14#0: Box, 
    a#502#15#0: Box, 
    a#502#16#0: Box, 
    a#502#17#0: Box, 
    a#502#18#0: Box, 
    a#502#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#502#0#0, 
      a#502#1#0, 
      a#502#2#0, 
      a#502#3#0, 
      a#502#4#0, 
      a#502#5#0, 
      a#502#6#0, 
      a#502#7#0, 
      a#502#8#0, 
      a#502#9#0, 
      a#502#10#0, 
      a#502#11#0, 
      a#502#12#0, 
      a#502#13#0, 
      a#502#14#0, 
      a#502#15#0, 
      a#502#16#0, 
      a#502#17#0, 
      a#502#18#0, 
      a#502#19#0) } 
  _System.Tuple20._18(#_System._tuple#20._#Make20(a#502#0#0, 
        a#502#1#0, 
        a#502#2#0, 
        a#502#3#0, 
        a#502#4#0, 
        a#502#5#0, 
        a#502#6#0, 
        a#502#7#0, 
        a#502#8#0, 
        a#502#9#0, 
        a#502#10#0, 
        a#502#11#0, 
        a#502#12#0, 
        a#502#13#0, 
        a#502#14#0, 
        a#502#15#0, 
        a#502#16#0, 
        a#502#17#0, 
        a#502#18#0, 
        a#502#19#0))
     == a#502#18#0);

// Inductive rank
axiom (forall a#503#0#0: Box, 
    a#503#1#0: Box, 
    a#503#2#0: Box, 
    a#503#3#0: Box, 
    a#503#4#0: Box, 
    a#503#5#0: Box, 
    a#503#6#0: Box, 
    a#503#7#0: Box, 
    a#503#8#0: Box, 
    a#503#9#0: Box, 
    a#503#10#0: Box, 
    a#503#11#0: Box, 
    a#503#12#0: Box, 
    a#503#13#0: Box, 
    a#503#14#0: Box, 
    a#503#15#0: Box, 
    a#503#16#0: Box, 
    a#503#17#0: Box, 
    a#503#18#0: Box, 
    a#503#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#503#0#0, 
      a#503#1#0, 
      a#503#2#0, 
      a#503#3#0, 
      a#503#4#0, 
      a#503#5#0, 
      a#503#6#0, 
      a#503#7#0, 
      a#503#8#0, 
      a#503#9#0, 
      a#503#10#0, 
      a#503#11#0, 
      a#503#12#0, 
      a#503#13#0, 
      a#503#14#0, 
      a#503#15#0, 
      a#503#16#0, 
      a#503#17#0, 
      a#503#18#0, 
      a#503#19#0) } 
  BoxRank(a#503#18#0)
     < DtRank(#_System._tuple#20._#Make20(a#503#0#0, 
        a#503#1#0, 
        a#503#2#0, 
        a#503#3#0, 
        a#503#4#0, 
        a#503#5#0, 
        a#503#6#0, 
        a#503#7#0, 
        a#503#8#0, 
        a#503#9#0, 
        a#503#10#0, 
        a#503#11#0, 
        a#503#12#0, 
        a#503#13#0, 
        a#503#14#0, 
        a#503#15#0, 
        a#503#16#0, 
        a#503#17#0, 
        a#503#18#0, 
        a#503#19#0)));

function _System.Tuple20._19(DatatypeType) : Box;

// Constructor injectivity
axiom (forall a#504#0#0: Box, 
    a#504#1#0: Box, 
    a#504#2#0: Box, 
    a#504#3#0: Box, 
    a#504#4#0: Box, 
    a#504#5#0: Box, 
    a#504#6#0: Box, 
    a#504#7#0: Box, 
    a#504#8#0: Box, 
    a#504#9#0: Box, 
    a#504#10#0: Box, 
    a#504#11#0: Box, 
    a#504#12#0: Box, 
    a#504#13#0: Box, 
    a#504#14#0: Box, 
    a#504#15#0: Box, 
    a#504#16#0: Box, 
    a#504#17#0: Box, 
    a#504#18#0: Box, 
    a#504#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#504#0#0, 
      a#504#1#0, 
      a#504#2#0, 
      a#504#3#0, 
      a#504#4#0, 
      a#504#5#0, 
      a#504#6#0, 
      a#504#7#0, 
      a#504#8#0, 
      a#504#9#0, 
      a#504#10#0, 
      a#504#11#0, 
      a#504#12#0, 
      a#504#13#0, 
      a#504#14#0, 
      a#504#15#0, 
      a#504#16#0, 
      a#504#17#0, 
      a#504#18#0, 
      a#504#19#0) } 
  _System.Tuple20._19(#_System._tuple#20._#Make20(a#504#0#0, 
        a#504#1#0, 
        a#504#2#0, 
        a#504#3#0, 
        a#504#4#0, 
        a#504#5#0, 
        a#504#6#0, 
        a#504#7#0, 
        a#504#8#0, 
        a#504#9#0, 
        a#504#10#0, 
        a#504#11#0, 
        a#504#12#0, 
        a#504#13#0, 
        a#504#14#0, 
        a#504#15#0, 
        a#504#16#0, 
        a#504#17#0, 
        a#504#18#0, 
        a#504#19#0))
     == a#504#19#0);

// Inductive rank
axiom (forall a#505#0#0: Box, 
    a#505#1#0: Box, 
    a#505#2#0: Box, 
    a#505#3#0: Box, 
    a#505#4#0: Box, 
    a#505#5#0: Box, 
    a#505#6#0: Box, 
    a#505#7#0: Box, 
    a#505#8#0: Box, 
    a#505#9#0: Box, 
    a#505#10#0: Box, 
    a#505#11#0: Box, 
    a#505#12#0: Box, 
    a#505#13#0: Box, 
    a#505#14#0: Box, 
    a#505#15#0: Box, 
    a#505#16#0: Box, 
    a#505#17#0: Box, 
    a#505#18#0: Box, 
    a#505#19#0: Box :: 
  { #_System._tuple#20._#Make20(a#505#0#0, 
      a#505#1#0, 
      a#505#2#0, 
      a#505#3#0, 
      a#505#4#0, 
      a#505#5#0, 
      a#505#6#0, 
      a#505#7#0, 
      a#505#8#0, 
      a#505#9#0, 
      a#505#10#0, 
      a#505#11#0, 
      a#505#12#0, 
      a#505#13#0, 
      a#505#14#0, 
      a#505#15#0, 
      a#505#16#0, 
      a#505#17#0, 
      a#505#18#0, 
      a#505#19#0) } 
  BoxRank(a#505#19#0)
     < DtRank(#_System._tuple#20._#Make20(a#505#0#0, 
        a#505#1#0, 
        a#505#2#0, 
        a#505#3#0, 
        a#505#4#0, 
        a#505#5#0, 
        a#505#6#0, 
        a#505#7#0, 
        a#505#8#0, 
        a#505#9#0, 
        a#505#10#0, 
        a#505#11#0, 
        a#505#12#0, 
        a#505#13#0, 
        a#505#14#0, 
        a#505#15#0, 
        a#505#16#0, 
        a#505#17#0, 
        a#505#18#0, 
        a#505#19#0)));

// Depth-one case-split function
function $IsA#_System.Tuple20(DatatypeType) : bool;

// Depth-one case-split axiom
axiom (forall d: DatatypeType :: 
  { $IsA#_System.Tuple20(d) } 
  $IsA#_System.Tuple20(d) ==> _System.Tuple20.___hMake20_q(d));

// Questionmark data type disjunctivity
axiom (forall _System._tuple#20$T0: Ty, 
    _System._tuple#20$T1: Ty, 
    _System._tuple#20$T2: Ty, 
    _System._tuple#20$T3: Ty, 
    _System._tuple#20$T4: Ty, 
    _System._tuple#20$T5: Ty, 
    _System._tuple#20$T6: Ty, 
    _System._tuple#20$T7: Ty, 
    _System._tuple#20$T8: Ty, 
    _System._tuple#20$T9: Ty, 
    _System._tuple#20$T10: Ty, 
    _System._tuple#20$T11: Ty, 
    _System._tuple#20$T12: Ty, 
    _System._tuple#20$T13: Ty, 
    _System._tuple#20$T14: Ty, 
    _System._tuple#20$T15: Ty, 
    _System._tuple#20$T16: Ty, 
    _System._tuple#20$T17: Ty, 
    _System._tuple#20$T18: Ty, 
    _System._tuple#20$T19: Ty, 
    d: DatatypeType :: 
  { _System.Tuple20.___hMake20_q(d), $Is(d, 
      Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19)) } 
  $Is(d, 
      Tclass._System.Tuple20(_System._tuple#20$T0, 
        _System._tuple#20$T1, 
        _System._tuple#20$T2, 
        _System._tuple#20$T3, 
        _System._tuple#20$T4, 
        _System._tuple#20$T5, 
        _System._tuple#20$T6, 
        _System._tuple#20$T7, 
        _System._tuple#20$T8, 
        _System._tuple#20$T9, 
        _System._tuple#20$T10, 
        _System._tuple#20$T11, 
        _System._tuple#20$T12, 
        _System._tuple#20$T13, 
        _System._tuple#20$T14, 
        _System._tuple#20$T15, 
        _System._tuple#20$T16, 
        _System._tuple#20$T17, 
        _System._tuple#20$T18, 
        _System._tuple#20$T19))
     ==> _System.Tuple20.___hMake20_q(d));

// Datatype extensional equality declaration
function _System.Tuple20#Equal(DatatypeType, DatatypeType) : bool;

// Datatype extensional equality definition: #_System._tuple#20._#Make20
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple20#Equal(a, b) } 
  _System.Tuple20#Equal(a, b)
     <==> _System.Tuple20._0(a) == _System.Tuple20._0(b)
       && _System.Tuple20._1(a) == _System.Tuple20._1(b)
       && _System.Tuple20._2(a) == _System.Tuple20._2(b)
       && _System.Tuple20._3(a) == _System.Tuple20._3(b)
       && _System.Tuple20._4(a) == _System.Tuple20._4(b)
       && _System.Tuple20._5(a) == _System.Tuple20._5(b)
       && _System.Tuple20._6(a) == _System.Tuple20._6(b)
       && _System.Tuple20._7(a) == _System.Tuple20._7(b)
       && _System.Tuple20._8(a) == _System.Tuple20._8(b)
       && _System.Tuple20._9(a) == _System.Tuple20._9(b)
       && _System.Tuple20._10(a) == _System.Tuple20._10(b)
       && _System.Tuple20._11(a) == _System.Tuple20._11(b)
       && _System.Tuple20._12(a) == _System.Tuple20._12(b)
       && _System.Tuple20._13(a) == _System.Tuple20._13(b)
       && _System.Tuple20._14(a) == _System.Tuple20._14(b)
       && _System.Tuple20._15(a) == _System.Tuple20._15(b)
       && _System.Tuple20._16(a) == _System.Tuple20._16(b)
       && _System.Tuple20._17(a) == _System.Tuple20._17(b)
       && _System.Tuple20._18(a) == _System.Tuple20._18(b)
       && _System.Tuple20._19(a) == _System.Tuple20._19(b));

// Datatype extensionality axiom: _System._tuple#20
axiom (forall a: DatatypeType, b: DatatypeType :: 
  { _System.Tuple20#Equal(a, b) } 
  _System.Tuple20#Equal(a, b) <==> a == b);

const unique class._System.Tuple20: ClassName;

function Tclass._System.___hFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc2: TyTag;

// Tclass._System.___hFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == Tagclass._System.___hFunc2
     && TagFamily(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == tytagFamily$_#Func2);

function Tclass._System.___hFunc2_0(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_0(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$T0);

function Tclass._System.___hFunc2_1(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_1(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$T1);

function Tclass._System.___hFunc2_2(Ty) : Ty;

// Tclass._System.___hFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hFunc2_2(Tclass._System.___hFunc2(#$T0, #$T1, #$R)) == #$R);

// Box/unbox axiom for Tclass._System.___hFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc2(#$T0, #$T1, #$R)));

function Handle2([Heap,Box,Box]Box, [Heap,Box,Box]bool, [Heap,Box,Box]Set) : HandleType;

function Apply2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : Box;

function Requires2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : bool;

function Reads2(Ty, Ty, Ty, Heap, HandleType, Box, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set, 
    bx0: Box, 
    bx1: Box :: 
  { Apply2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) } 
  Apply2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) == h[heap, bx0, bx1]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set, 
    bx0: Box, 
    bx1: Box :: 
  { Requires2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1) } 
  r[heap, bx0, bx1] ==> Requires2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box]Box, 
    r: [Heap,Box,Box]bool, 
    rd: [Heap,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx: Box :: 
  { Set#IsMember(Reads2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1), bx) } 
  Set#IsMember(Reads2(t0, t1, t2, heap, Handle2(h, r, rd), bx0, bx1), bx)
     == Set#IsMember(rd[heap, bx0, bx1], bx));

function {:inline} Requires2#canCall(t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box) : bool
{
  true
}

function {:inline} Reads2#canCall(t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box) : bool
{
  true
}

// frame axiom for Reads2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Reads2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h0, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads2(t0, t1, t2, h0, f, bx0, bx1) == Reads2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Reads2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Reads2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h1, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads2(t0, t1, t2, h0, f, bx0, bx1) == Reads2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Requires2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h0, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires2(t0, t1, t2, h0, f, bx0, bx1) == Requires2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Requires2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h1, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires2(t0, t1, t2, h0, f, bx0, bx1) == Requires2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Apply2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Apply2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h0, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply2(t0, t1, t2, h0, f, bx0, bx1) == Apply2(t0, t1, t2, h1, f, bx0, bx1));

// frame axiom for Apply2
axiom (forall t0: Ty, t1: Ty, t2: Ty, h0: Heap, h1: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { $HeapSucc(h0, h1), Apply2(t0, t1, t2, h1, f, bx0, bx1) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads2(t0, t1, t2, h1, f, bx0, bx1), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply2(t0, t1, t2, h0, f, bx0, bx1) == Apply2(t0, t1, t2, h1, f, bx0, bx1));

// empty-reads property for Reads2 
axiom (forall t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), $IsGoodHeap(heap) } 
    { Reads2(t0, t1, t2, heap, f, bx0, bx1) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
     ==> (Set#Equal(Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), Set#Empty(): Set)
       <==> Set#Equal(Reads2(t0, t1, t2, heap, f, bx0, bx1), Set#Empty(): Set)));

// empty-reads property for Requires2
axiom (forall t0: Ty, t1: Ty, t2: Ty, heap: Heap, f: HandleType, bx0: Box, bx1: Box :: 
  { Requires2(t0, t1, t2, $OneHeap, f, bx0, bx1), $IsGoodHeap(heap) } 
    { Requires2(t0, t1, t2, heap, f, bx0, bx1) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && Set#Equal(Reads2(t0, t1, t2, $OneHeap, f, bx0, bx1), Set#Empty(): Set)
     ==> Requires2(t0, t1, t2, $OneHeap, f, bx0, bx1)
       == Requires2(t0, t1, t2, heap, f, bx0, bx1));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty :: 
  { $Is(f, Tclass._System.___hFunc2(t0, t1, t2)) } 
  $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
     <==> (forall h: Heap, bx0: Box, bx1: Box :: 
      { Apply2(t0, t1, t2, h, f, bx0, bx1) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && Requires2(t0, t1, t2, h, f, bx0, bx1)
         ==> $IsBox(Apply2(t0, t1, t2, h, f, bx0, bx1), t2)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, u0: Ty, u1: Ty, u2: Ty :: 
  { $Is(f, Tclass._System.___hFunc2(t0, t1, t2)), $Is(f, Tclass._System.___hFunc2(u0, u1, u2)) } 
  $Is(f, Tclass._System.___hFunc2(t0, t1, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, t2) } { $IsBox(bx, u2) } 
        $IsBox(bx, t2) ==> $IsBox(bx, u2))
     ==> $Is(f, Tclass._System.___hFunc2(u0, u1, u2)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h)
       <==> (forall bx0: Box, bx1: Box :: 
        { Apply2(t0, t1, t2, h, f, bx0, bx1) } { Reads2(t0, t1, t2, h, f, bx0, bx1) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && Requires2(t0, t1, t2, h, f, bx0, bx1)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads2(t0, t1, t2, h, f, bx0, bx1), $Box(r)) } 
            r != null && Set#IsMember(Reads2(t0, t1, t2, h, f, bx0, bx1), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc2(t0, t1, t2), h)
     ==> (forall bx0: Box, bx1: Box :: 
      { Apply2(t0, t1, t2, h, f, bx0, bx1) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && Requires2(t0, t1, t2, h, f, bx0, bx1)
         ==> $IsAllocBox(Apply2(t0, t1, t2, h, f, bx0, bx1), t2, h)));

function Tclass._System.___hPartialFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc2: TyTag;

// Tclass._System.___hPartialFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       == Tagclass._System.___hPartialFunc2
     && TagFamily(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       == tytagFamily$_#PartialFunc2);

function Tclass._System.___hPartialFunc2_0(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_0(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc2_1(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_1(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc2_2(Ty) : Ty;

// Tclass._System.___hPartialFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hPartialFunc2_2(Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)));

// $Is axiom for subset type _System._#PartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc2(#$T0, #$T1, #$R))
       && (forall x0#0: Box, x1#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1)
           ==> Set#Equal(Reads2(#$T0, #$T1, #$R, $OneHeap, f#0, x0#0, x1#0), Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc2(#$T0, #$T1, #$R), $h));

function Tclass._System.___hTotalFunc2(Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc2: TyTag;

// Tclass._System.___hTotalFunc2 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tag(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
       == Tagclass._System.___hTotalFunc2
     && TagFamily(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
       == tytagFamily$_#TotalFunc2);

function Tclass._System.___hTotalFunc2_0(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_0(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc2_1(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_1(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc2_2(Ty) : Ty;

// Tclass._System.___hTotalFunc2 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R) } 
  Tclass._System.___hTotalFunc2_2(Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)));

// $Is axiom for subset type _System._#TotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R))
       && (forall x0#0: Box, x1#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1)
           ==> Requires2(#$T0, #$T1, #$R, $OneHeap, f#0, x0#0, x1#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc2
axiom (forall #$T0: Ty, #$T1: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc2(#$T0, #$T1, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc2(#$T0, #$T1, #$R), $h));

function Tclass._System.___hFunc3(Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc3: TyTag;

// Tclass._System.___hFunc3 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tag(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
       == Tagclass._System.___hFunc3
     && TagFamily(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
       == tytagFamily$_#Func3);

function Tclass._System.___hFunc3_0(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_0(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T0);

function Tclass._System.___hFunc3_1(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_1(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T1);

function Tclass._System.___hFunc3_2(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_2(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T2);

function Tclass._System.___hFunc3_3(Ty) : Ty;

// Tclass._System.___hFunc3 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hFunc3_3(Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R)));

function Handle3([Heap,Box,Box,Box]Box, [Heap,Box,Box,Box]bool, [Heap,Box,Box,Box]Set)
   : HandleType;

function Apply3(Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box) : Box;

function Requires3(Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box) : bool;

function Reads3(Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Apply3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2) } 
  Apply3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2)
     == h[heap, bx0, bx1, bx2]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Requires3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2) } 
  r[heap, bx0, bx1, bx2]
     ==> Requires3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx: Box :: 
  { Set#IsMember(Reads3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2), bx) } 
  Set#IsMember(Reads3(t0, t1, t2, t3, heap, Handle3(h, r, rd), bx0, bx1, bx2), bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2], bx));

function {:inline} Requires3#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box)
   : bool
{
  true
}

function {:inline} Reads3#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box)
   : bool
{
  true
}

// frame axiom for Reads3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Reads3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Requires3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Requires3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Requires3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Apply3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// frame axiom for Apply3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { $HeapSucc(h0, h1), Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall o: ref, fld: Field :: 
        o != null && Set#IsMember(Reads3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply3(t0, t1, t2, t3, h0, f, bx0, bx1, bx2)
       == Apply3(t0, t1, t2, t3, h1, f, bx0, bx1, bx2));

// empty-reads property for Reads3 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Reads3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), $IsGoodHeap(heap) } 
    { Reads3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
     ==> (Set#Equal(Reads3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), Set#Empty(): Set)
       <==> Set#Equal(Reads3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2), Set#Empty(): Set)));

// empty-reads property for Requires3
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box :: 
  { Requires3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), $IsGoodHeap(heap) } 
    { Requires3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && Set#Equal(Reads3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2), Set#Empty(): Set)
     ==> Requires3(t0, t1, t2, t3, $OneHeap, f, bx0, bx1, bx2)
       == Requires3(t0, t1, t2, t3, heap, f, bx0, bx1, bx2));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty :: 
  { $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3)) } 
  $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
     <==> (forall h: Heap, bx0: Box, bx1: Box, bx2: Box :: 
      { Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && Requires3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)
         ==> $IsBox(Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), t3)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, u0: Ty, u1: Ty, u2: Ty, u3: Ty :: 
  { $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3)), $Is(f, Tclass._System.___hFunc3(u0, u1, u2, u3)) } 
  $Is(f, Tclass._System.___hFunc3(t0, t1, t2, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, t3) } { $IsBox(bx, u3) } 
        $IsBox(bx, t3) ==> $IsBox(bx, u3))
     ==> $Is(f, Tclass._System.___hFunc3(u0, u1, u2, u3)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h)
       <==> (forall bx0: Box, bx1: Box, bx2: Box :: 
        { Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
          { Reads3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && Requires3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), $Box(r)) } 
            r != null && Set#IsMember(Reads3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc3(t0, t1, t2, t3), h)
     ==> (forall bx0: Box, bx1: Box, bx2: Box :: 
      { Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && Requires3(t0, t1, t2, t3, h, f, bx0, bx1, bx2)
         ==> $IsAllocBox(Apply3(t0, t1, t2, t3, h, f, bx0, bx1, bx2), t3, h)));

function Tclass._System.___hPartialFunc3(Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc3: TyTag;

// Tclass._System.___hPartialFunc3 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tag(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
       == Tagclass._System.___hPartialFunc3
     && TagFamily(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
       == tytagFamily$_#PartialFunc3);

function Tclass._System.___hPartialFunc3_0(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_0(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc3_1(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_1(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc3_2(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_2(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc3_3(Ty) : Ty;

// Tclass._System.___hPartialFunc3 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hPartialFunc3_3(Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R)));

// $Is axiom for subset type _System._#PartialFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1) && $IsBox(x2#0, #$T2)
           ==> Set#Equal(Reads3(#$T0, #$T1, #$T2, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0), Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc3(#$T0, #$T1, #$T2, #$R), $h));

function Tclass._System.___hTotalFunc3(Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc3: TyTag;

// Tclass._System.___hTotalFunc3 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tag(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
       == Tagclass._System.___hTotalFunc3
     && TagFamily(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
       == tytagFamily$_#TotalFunc3);

function Tclass._System.___hTotalFunc3_0(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_0(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc3_1(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_1(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc3_2(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_2(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc3_3(Ty) : Ty;

// Tclass._System.___hTotalFunc3 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R) } 
  Tclass._System.___hTotalFunc3_3(Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R)));

// $Is axiom for subset type _System._#TotalFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box :: 
        $IsBox(x0#0, #$T0) && $IsBox(x1#0, #$T1) && $IsBox(x2#0, #$T2)
           ==> Requires3(#$T0, #$T1, #$T2, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc3(#$T0, #$T1, #$T2, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc3(#$T0, #$T1, #$T2, #$R), $h));

function Tclass._System.___hFunc4(Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc4: TyTag;

// Tclass._System.___hFunc4 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tag(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == Tagclass._System.___hFunc4
     && TagFamily(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == tytagFamily$_#Func4);

function Tclass._System.___hFunc4_0(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_0(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T0);

function Tclass._System.___hFunc4_1(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_1(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T1);

function Tclass._System.___hFunc4_2(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_2(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T2);

function Tclass._System.___hFunc4_3(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_3(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T3);

function Tclass._System.___hFunc4_4(Ty) : Ty;

// Tclass._System.___hFunc4 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hFunc4_4(Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R)));

function Handle4([Heap,Box,Box,Box,Box]Box, [Heap,Box,Box,Box,Box]bool, [Heap,Box,Box,Box,Box]Set)
   : HandleType;

function Apply4(Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box) : Box;

function Requires4(Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box) : bool;

function Reads4(Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Apply4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3) } 
  Apply4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3)
     == h[heap, bx0, bx1, bx2, bx3]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Requires4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3) } 
  r[heap, bx0, bx1, bx2, bx3]
     ==> Requires4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx: Box :: 
  { Set#IsMember(Reads4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3), bx) } 
  Set#IsMember(Reads4(t0, t1, t2, t3, t4, heap, Handle4(h, r, rd), bx0, bx1, bx2, bx3), bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2, bx3], bx));

function {:inline} Requires4#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box)
   : bool
{
  true
}

function {:inline} Reads4#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box)
   : bool
{
  true
}

// frame axiom for Reads4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Reads4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Requires4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Requires4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Requires4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Apply4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// frame axiom for Apply4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { $HeapSucc(h0, h1), Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply4(t0, t1, t2, t3, t4, h0, f, bx0, bx1, bx2, bx3)
       == Apply4(t0, t1, t2, t3, t4, h1, f, bx0, bx1, bx2, bx3));

// empty-reads property for Reads4 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Reads4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), $IsGoodHeap(heap) } 
    { Reads4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
     ==> (Set#Equal(Reads4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), Set#Empty(): Set)
       <==> Set#Equal(Reads4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3), Set#Empty(): Set)));

// empty-reads property for Requires4
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box :: 
  { Requires4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), $IsGoodHeap(heap) } 
    { Requires4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && Set#Equal(Reads4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3), Set#Empty(): Set)
     ==> Requires4(t0, t1, t2, t3, t4, $OneHeap, f, bx0, bx1, bx2, bx3)
       == Requires4(t0, t1, t2, t3, t4, heap, f, bx0, bx1, bx2, bx3));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty :: 
  { $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4)) } 
  $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
     <==> (forall h: Heap, bx0: Box, bx1: Box, bx2: Box, bx3: Box :: 
      { Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && $IsBox(bx3, t3)
           && Requires4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)
         ==> $IsBox(Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3), t4)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    u0: Ty, 
    u1: Ty, 
    u2: Ty, 
    u3: Ty, 
    u4: Ty :: 
  { $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4)), $Is(f, Tclass._System.___hFunc4(u0, u1, u2, u3, u4)) } 
  $Is(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u3) } { $IsBox(bx, t3) } 
        $IsBox(bx, u3) ==> $IsBox(bx, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, t4) } { $IsBox(bx, u4) } 
        $IsBox(bx, t4) ==> $IsBox(bx, u4))
     ==> $Is(f, Tclass._System.___hFunc4(u0, u1, u2, u3, u4)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h)
       <==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box :: 
        { Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
          { Reads4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && 
            $IsBox(bx3, t3)
             && $IsAllocBox(bx3, t3, h)
             && Requires4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3), $Box(r)) } 
            r != null
                 && Set#IsMember(Reads4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h) } 
  $IsGoodHeap(h) && $IsAlloc(f, Tclass._System.___hFunc4(t0, t1, t2, t3, t4), h)
     ==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box :: 
      { Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && $IsAllocBox(bx3, t3, h)
           && Requires4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3)
         ==> $IsAllocBox(Apply4(t0, t1, t2, t3, t4, h, f, bx0, bx1, bx2, bx3), t4, h)));

function Tclass._System.___hPartialFunc4(Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc4: TyTag;

// Tclass._System.___hPartialFunc4 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tag(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == Tagclass._System.___hPartialFunc4
     && TagFamily(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == tytagFamily$_#PartialFunc4);

function Tclass._System.___hPartialFunc4_0(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_0(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc4_1(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_1(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc4_2(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_2(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc4_3(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_3(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T3);

function Tclass._System.___hPartialFunc4_4(Ty) : Ty;

// Tclass._System.___hPartialFunc4 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hPartialFunc4_4(Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R)));

// $Is axiom for subset type _System._#PartialFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
           ==> Set#Equal(Reads4(#$T0, #$T1, #$T2, #$T3, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0, x3#0), 
            Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h));

function Tclass._System.___hTotalFunc4(Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc4: TyTag;

// Tclass._System.___hTotalFunc4 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tag(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == Tagclass._System.___hTotalFunc4
     && TagFamily(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       == tytagFamily$_#TotalFunc4);

function Tclass._System.___hTotalFunc4_0(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_0(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc4_1(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_1(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc4_2(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_2(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc4_3(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_3(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$T3);

function Tclass._System.___hTotalFunc4_4(Ty) : Ty;

// Tclass._System.___hTotalFunc4 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R) } 
  Tclass._System.___hTotalFunc4_4(Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R)));

// $Is axiom for subset type _System._#TotalFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
           ==> Requires4(#$T0, #$T1, #$T2, #$T3, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0, x3#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$R: Ty, f#0: HandleType, $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc4(#$T0, #$T1, #$T2, #$T3, #$R), $h));

function Tclass._System.___hFunc5(Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc5: TyTag;

// Tclass._System.___hFunc5 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tag(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       == Tagclass._System.___hFunc5
     && TagFamily(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       == tytagFamily$_#Func5);

function Tclass._System.___hFunc5_0(Ty) : Ty;

// Tclass._System.___hFunc5 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hFunc5_0(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T0);

function Tclass._System.___hFunc5_1(Ty) : Ty;

// Tclass._System.___hFunc5 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hFunc5_1(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T1);

function Tclass._System.___hFunc5_2(Ty) : Ty;

// Tclass._System.___hFunc5 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hFunc5_2(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T2);

function Tclass._System.___hFunc5_3(Ty) : Ty;

// Tclass._System.___hFunc5 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hFunc5_3(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T3);

function Tclass._System.___hFunc5_4(Ty) : Ty;

// Tclass._System.___hFunc5 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hFunc5_4(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T4);

function Tclass._System.___hFunc5_5(Ty) : Ty;

// Tclass._System.___hFunc5 injectivity 5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hFunc5_5(Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)));

function Handle5([Heap,Box,Box,Box,Box,Box]Box, 
    [Heap,Box,Box,Box,Box,Box]bool, 
    [Heap,Box,Box,Box,Box,Box]Set)
   : HandleType;

function Apply5(Ty, Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box, Box) : Box;

function Requires5(Ty, Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box, Box) : bool;

function Reads5(Ty, Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box, Box) : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { Apply5(t0, t1, t2, t3, t4, t5, heap, Handle5(h, r, rd), bx0, bx1, bx2, bx3, bx4) } 
  Apply5(t0, t1, t2, t3, t4, t5, heap, Handle5(h, r, rd), bx0, bx1, bx2, bx3, bx4)
     == h[heap, bx0, bx1, bx2, bx3, bx4]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { Requires5(t0, t1, t2, t3, t4, t5, heap, Handle5(h, r, rd), bx0, bx1, bx2, bx3, bx4) } 
  r[heap, bx0, bx1, bx2, bx3, bx4]
     ==> Requires5(t0, t1, t2, t3, t4, t5, heap, Handle5(h, r, rd), bx0, bx1, bx2, bx3, bx4));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx: Box :: 
  { Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, heap, Handle5(h, r, rd), bx0, bx1, bx2, bx3, bx4), 
      bx) } 
  Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, heap, Handle5(h, r, rd), bx0, bx1, bx2, bx3, bx4), 
      bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2, bx3, bx4], bx));

function {:inline} Requires5#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box)
   : bool
{
  true
}

function {:inline} Reads5#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box)
   : bool
{
  true
}

// frame axiom for Reads5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { $HeapSucc(h0, h1), Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)
       == Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4));

// frame axiom for Reads5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { $HeapSucc(h0, h1), Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)
       == Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4));

// frame axiom for Requires5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { $HeapSucc(h0, h1), Requires5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)
       == Requires5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4));

// frame axiom for Requires5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { $HeapSucc(h0, h1), Requires5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)
       == Requires5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4));

// frame axiom for Apply5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { $HeapSucc(h0, h1), Apply5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)
       == Apply5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4));

// frame axiom for Apply5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { $HeapSucc(h0, h1), Apply5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply5(t0, t1, t2, t3, t4, t5, h0, f, bx0, bx1, bx2, bx3, bx4)
       == Apply5(t0, t1, t2, t3, t4, t5, h1, f, bx0, bx1, bx2, bx3, bx4));

// empty-reads property for Reads5 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { Reads5(t0, t1, t2, t3, t4, t5, $OneHeap, f, bx0, bx1, bx2, bx3, bx4), $IsGoodHeap(heap) } 
    { Reads5(t0, t1, t2, t3, t4, t5, heap, f, bx0, bx1, bx2, bx3, bx4) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
     ==> (Set#Equal(Reads5(t0, t1, t2, t3, t4, t5, $OneHeap, f, bx0, bx1, bx2, bx3, bx4), 
        Set#Empty(): Set)
       <==> Set#Equal(Reads5(t0, t1, t2, t3, t4, t5, heap, f, bx0, bx1, bx2, bx3, bx4), 
        Set#Empty(): Set)));

// empty-reads property for Requires5
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box :: 
  { Requires5(t0, t1, t2, t3, t4, t5, $OneHeap, f, bx0, bx1, bx2, bx3, bx4), $IsGoodHeap(heap) } 
    { Requires5(t0, t1, t2, t3, t4, t5, heap, f, bx0, bx1, bx2, bx3, bx4) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && Set#Equal(Reads5(t0, t1, t2, t3, t4, t5, $OneHeap, f, bx0, bx1, bx2, bx3, bx4), 
        Set#Empty(): Set)
     ==> Requires5(t0, t1, t2, t3, t4, t5, $OneHeap, f, bx0, bx1, bx2, bx3, bx4)
       == Requires5(t0, t1, t2, t3, t4, t5, heap, f, bx0, bx1, bx2, bx3, bx4));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, t5: Ty :: 
  { $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5)) } 
  $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
     <==> (forall h: Heap, bx0: Box, bx1: Box, bx2: Box, bx3: Box, bx4: Box :: 
      { Apply5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && $IsBox(bx3, t3)
           && $IsBox(bx4, t4)
           && Requires5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4)
         ==> $IsBox(Apply5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4), t5)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    u0: Ty, 
    u1: Ty, 
    u2: Ty, 
    u3: Ty, 
    u4: Ty, 
    u5: Ty :: 
  { $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5)), $Is(f, Tclass._System.___hFunc5(u0, u1, u2, u3, u4, u5)) } 
  $Is(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u3) } { $IsBox(bx, t3) } 
        $IsBox(bx, u3) ==> $IsBox(bx, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, u4) } { $IsBox(bx, t4) } 
        $IsBox(bx, u4) ==> $IsBox(bx, t4))
       && (forall bx: Box :: 
        { $IsBox(bx, t5) } { $IsBox(bx, u5) } 
        $IsBox(bx, t5) ==> $IsBox(bx, u5))
     ==> $Is(f, Tclass._System.___hFunc5(u0, u1, u2, u3, u4, u5)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, t5: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5), h)
       <==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box, bx4: Box :: 
        { Apply5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4) } 
          { Reads5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && 
            $IsBox(bx3, t3)
             && $IsAllocBox(bx3, t3, h)
             && 
            $IsBox(bx4, t4)
             && $IsAllocBox(bx4, t4, h)
             && Requires5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4), $Box(r)) } 
            r != null
                 && Set#IsMember(Reads5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, t5: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5), h) } 
  $IsGoodHeap(h)
       && $IsAlloc(f, Tclass._System.___hFunc5(t0, t1, t2, t3, t4, t5), h)
     ==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box, bx4: Box :: 
      { Apply5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && $IsAllocBox(bx3, t3, h)
           && $IsAllocBox(bx4, t4, h)
           && Requires5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4)
         ==> $IsAllocBox(Apply5(t0, t1, t2, t3, t4, t5, h, f, bx0, bx1, bx2, bx3, bx4), t5, h)));

function Tclass._System.___hPartialFunc5(Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc5: TyTag;

// Tclass._System.___hPartialFunc5 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tag(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       == Tagclass._System.___hPartialFunc5
     && TagFamily(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       == tytagFamily$_#PartialFunc5);

function Tclass._System.___hPartialFunc5_0(Ty) : Ty;

// Tclass._System.___hPartialFunc5 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hPartialFunc5_0(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc5_1(Ty) : Ty;

// Tclass._System.___hPartialFunc5 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hPartialFunc5_1(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc5_2(Ty) : Ty;

// Tclass._System.___hPartialFunc5 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hPartialFunc5_2(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc5_3(Ty) : Ty;

// Tclass._System.___hPartialFunc5 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hPartialFunc5_3(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T3);

function Tclass._System.___hPartialFunc5_4(Ty) : Ty;

// Tclass._System.___hPartialFunc5 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hPartialFunc5_4(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T4);

function Tclass._System.___hPartialFunc5_5(Ty) : Ty;

// Tclass._System.___hPartialFunc5 injectivity 5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hPartialFunc5_5(Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)));

// $Is axiom for subset type _System._#PartialFunc5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box, x4#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
           ==> Set#Equal(Reads5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0, x3#0, x4#0), 
            Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R), $h));

function Tclass._System.___hTotalFunc5(Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc5: TyTag;

// Tclass._System.___hTotalFunc5 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tag(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       == Tagclass._System.___hTotalFunc5
     && TagFamily(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       == tytagFamily$_#TotalFunc5);

function Tclass._System.___hTotalFunc5_0(Ty) : Ty;

// Tclass._System.___hTotalFunc5 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hTotalFunc5_0(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc5_1(Ty) : Ty;

// Tclass._System.___hTotalFunc5 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hTotalFunc5_1(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc5_2(Ty) : Ty;

// Tclass._System.___hTotalFunc5 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hTotalFunc5_2(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc5_3(Ty) : Ty;

// Tclass._System.___hTotalFunc5 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hTotalFunc5_3(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T3);

function Tclass._System.___hTotalFunc5_4(Ty) : Ty;

// Tclass._System.___hTotalFunc5 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hTotalFunc5_4(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$T4);

function Tclass._System.___hTotalFunc5_5(Ty) : Ty;

// Tclass._System.___hTotalFunc5 injectivity 5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R) } 
  Tclass._System.___hTotalFunc5_5(Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)));

// $Is axiom for subset type _System._#TotalFunc5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$R: Ty, f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box, x4#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
           ==> Requires5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R, $OneHeap, f#0, x0#0, x1#0, x2#0, x3#0, x4#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R), $h)
     <==> $IsAlloc(f#0, Tclass._System.___hPartialFunc5(#$T0, #$T1, #$T2, #$T3, #$T4, #$R), $h));

function Tclass._System.___hFunc6(Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc6: TyTag;

// Tclass._System.___hFunc6 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tag(Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
       == Tagclass._System.___hFunc6
     && TagFamily(Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
       == tytagFamily$_#Func6);

function Tclass._System.___hFunc6_0(Ty) : Ty;

// Tclass._System.___hFunc6 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hFunc6_0(Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T0);

function Tclass._System.___hFunc6_1(Ty) : Ty;

// Tclass._System.___hFunc6 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hFunc6_1(Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T1);

function Tclass._System.___hFunc6_2(Ty) : Ty;

// Tclass._System.___hFunc6 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hFunc6_2(Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T2);

function Tclass._System.___hFunc6_3(Ty) : Ty;

// Tclass._System.___hFunc6 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hFunc6_3(Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T3);

function Tclass._System.___hFunc6_4(Ty) : Ty;

// Tclass._System.___hFunc6 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hFunc6_4(Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T4);

function Tclass._System.___hFunc6_5(Ty) : Ty;

// Tclass._System.___hFunc6 injectivity 5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hFunc6_5(Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T5);

function Tclass._System.___hFunc6_6(Ty) : Ty;

// Tclass._System.___hFunc6 injectivity 6
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hFunc6_6(Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc6
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R)));

function Handle6([Heap,Box,Box,Box,Box,Box,Box]Box, 
    [Heap,Box,Box,Box,Box,Box,Box]bool, 
    [Heap,Box,Box,Box,Box,Box,Box]Set)
   : HandleType;

function Apply6(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box, Box, Box)
   : Box;

function Requires6(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box, Box, Box)
   : bool;

function Reads6(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Heap, HandleType, Box, Box, Box, Box, Box, Box)
   : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box :: 
  { Apply6(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      heap, 
      Handle6(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5) } 
  Apply6(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      heap, 
      Handle6(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5)
     == h[heap, bx0, bx1, bx2, bx3, bx4, bx5]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box :: 
  { Requires6(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      heap, 
      Handle6(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5) } 
  r[heap, bx0, bx1, bx2, bx3, bx4, bx5]
     ==> Requires6(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      heap, 
      Handle6(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx: Box :: 
  { Set#IsMember(Reads6(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        heap, 
        Handle6(h, r, rd), 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5), 
      bx) } 
  Set#IsMember(Reads6(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        heap, 
        Handle6(h, r, rd), 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5), 
      bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2, bx3, bx4, bx5], bx));

function {:inline} Requires6#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box)
   : bool
{
  true
}

function {:inline} Reads6#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box)
   : bool
{
  true
}

// frame axiom for Reads6
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box :: 
  { $HeapSucc(h0, h1), Reads6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $Is(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads6(t0, t1, t2, t3, t4, t5, t6, h0, f, bx0, bx1, bx2, bx3, bx4, bx5), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads6(t0, t1, t2, t3, t4, t5, t6, h0, f, bx0, bx1, bx2, bx3, bx4, bx5)
       == Reads6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5));

// frame axiom for Reads6
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box :: 
  { $HeapSucc(h0, h1), Reads6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $Is(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads6(t0, t1, t2, t3, t4, t5, t6, h0, f, bx0, bx1, bx2, bx3, bx4, bx5)
       == Reads6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5));

// frame axiom for Requires6
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box :: 
  { $HeapSucc(h0, h1), Requires6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $Is(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads6(t0, t1, t2, t3, t4, t5, t6, h0, f, bx0, bx1, bx2, bx3, bx4, bx5), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires6(t0, t1, t2, t3, t4, t5, t6, h0, f, bx0, bx1, bx2, bx3, bx4, bx5)
       == Requires6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5));

// frame axiom for Requires6
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box :: 
  { $HeapSucc(h0, h1), Requires6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $Is(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires6(t0, t1, t2, t3, t4, t5, t6, h0, f, bx0, bx1, bx2, bx3, bx4, bx5)
       == Requires6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5));

// frame axiom for Apply6
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box :: 
  { $HeapSucc(h0, h1), Apply6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $Is(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads6(t0, t1, t2, t3, t4, t5, t6, h0, f, bx0, bx1, bx2, bx3, bx4, bx5), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply6(t0, t1, t2, t3, t4, t5, t6, h0, f, bx0, bx1, bx2, bx3, bx4, bx5)
       == Apply6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5));

// frame axiom for Apply6
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box :: 
  { $HeapSucc(h0, h1), Apply6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $Is(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5), $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply6(t0, t1, t2, t3, t4, t5, t6, h0, f, bx0, bx1, bx2, bx3, bx4, bx5)
       == Apply6(t0, t1, t2, t3, t4, t5, t6, h1, f, bx0, bx1, bx2, bx3, bx4, bx5));

// empty-reads property for Reads6 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box :: 
  { Reads6(t0, t1, t2, t3, t4, t5, t6, $OneHeap, f, bx0, bx1, bx2, bx3, bx4, bx5), $IsGoodHeap(heap) } 
    { Reads6(t0, t1, t2, t3, t4, t5, t6, heap, f, bx0, bx1, bx2, bx3, bx4, bx5) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $Is(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6))
     ==> (Set#Equal(Reads6(t0, t1, t2, t3, t4, t5, t6, $OneHeap, f, bx0, bx1, bx2, bx3, bx4, bx5), 
        Set#Empty(): Set)
       <==> Set#Equal(Reads6(t0, t1, t2, t3, t4, t5, t6, heap, f, bx0, bx1, bx2, bx3, bx4, bx5), 
        Set#Empty(): Set)));

// empty-reads property for Requires6
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box :: 
  { Requires6(t0, t1, t2, t3, t4, t5, t6, $OneHeap, f, bx0, bx1, bx2, bx3, bx4, bx5), $IsGoodHeap(heap) } 
    { Requires6(t0, t1, t2, t3, t4, t5, t6, heap, f, bx0, bx1, bx2, bx3, bx4, bx5) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $Is(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6))
       && Set#Equal(Reads6(t0, t1, t2, t3, t4, t5, t6, $OneHeap, f, bx0, bx1, bx2, bx3, bx4, bx5), 
        Set#Empty(): Set)
     ==> Requires6(t0, t1, t2, t3, t4, t5, t6, $OneHeap, f, bx0, bx1, bx2, bx3, bx4, bx5)
       == Requires6(t0, t1, t2, t3, t4, t5, t6, heap, f, bx0, bx1, bx2, bx3, bx4, bx5));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, t5: Ty, t6: Ty :: 
  { $Is(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6)) } 
  $Is(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6))
     <==> (forall h: Heap, bx0: Box, bx1: Box, bx2: Box, bx3: Box, bx4: Box, bx5: Box :: 
      { Apply6(t0, t1, t2, t3, t4, t5, t6, h, f, bx0, bx1, bx2, bx3, bx4, bx5) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && $IsBox(bx3, t3)
           && $IsBox(bx4, t4)
           && $IsBox(bx5, t5)
           && Requires6(t0, t1, t2, t3, t4, t5, t6, h, f, bx0, bx1, bx2, bx3, bx4, bx5)
         ==> $IsBox(Apply6(t0, t1, t2, t3, t4, t5, t6, h, f, bx0, bx1, bx2, bx3, bx4, bx5), t6)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    u0: Ty, 
    u1: Ty, 
    u2: Ty, 
    u3: Ty, 
    u4: Ty, 
    u5: Ty, 
    u6: Ty :: 
  { $Is(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6)), $Is(f, Tclass._System.___hFunc6(u0, u1, u2, u3, u4, u5, u6)) } 
  $Is(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u3) } { $IsBox(bx, t3) } 
        $IsBox(bx, u3) ==> $IsBox(bx, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, u4) } { $IsBox(bx, t4) } 
        $IsBox(bx, u4) ==> $IsBox(bx, t4))
       && (forall bx: Box :: 
        { $IsBox(bx, u5) } { $IsBox(bx, t5) } 
        $IsBox(bx, u5) ==> $IsBox(bx, t5))
       && (forall bx: Box :: 
        { $IsBox(bx, t6) } { $IsBox(bx, u6) } 
        $IsBox(bx, t6) ==> $IsBox(bx, u6))
     ==> $Is(f, Tclass._System.___hFunc6(u0, u1, u2, u3, u4, u5, u6)));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, t5: Ty, t6: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6), h)
       <==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box, bx4: Box, bx5: Box :: 
        { Apply6(t0, t1, t2, t3, t4, t5, t6, h, f, bx0, bx1, bx2, bx3, bx4, bx5) } 
          { Reads6(t0, t1, t2, t3, t4, t5, t6, h, f, bx0, bx1, bx2, bx3, bx4, bx5) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && 
            $IsBox(bx3, t3)
             && $IsAllocBox(bx3, t3, h)
             && 
            $IsBox(bx4, t4)
             && $IsAllocBox(bx4, t4, h)
             && 
            $IsBox(bx5, t5)
             && $IsAllocBox(bx5, t5, h)
             && Requires6(t0, t1, t2, t3, t4, t5, t6, h, f, bx0, bx1, bx2, bx3, bx4, bx5)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads6(t0, t1, t2, t3, t4, t5, t6, h, f, bx0, bx1, bx2, bx3, bx4, bx5), $Box(r)) } 
            r != null
                 && Set#IsMember(Reads6(t0, t1, t2, t3, t4, t5, t6, h, f, bx0, bx1, bx2, bx3, bx4, bx5), $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, t5: Ty, t6: Ty, h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6), h) } 
  $IsGoodHeap(h)
       && $IsAlloc(f, Tclass._System.___hFunc6(t0, t1, t2, t3, t4, t5, t6), h)
     ==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box, bx4: Box, bx5: Box :: 
      { Apply6(t0, t1, t2, t3, t4, t5, t6, h, f, bx0, bx1, bx2, bx3, bx4, bx5) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && $IsAllocBox(bx3, t3, h)
           && $IsAllocBox(bx4, t4, h)
           && $IsAllocBox(bx5, t5, h)
           && Requires6(t0, t1, t2, t3, t4, t5, t6, h, f, bx0, bx1, bx2, bx3, bx4, bx5)
         ==> $IsAllocBox(Apply6(t0, t1, t2, t3, t4, t5, t6, h, f, bx0, bx1, bx2, bx3, bx4, bx5), t6, h)));

function Tclass._System.___hPartialFunc6(Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc6: TyTag;

// Tclass._System.___hPartialFunc6 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tag(Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
       == Tagclass._System.___hPartialFunc6
     && TagFamily(Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
       == tytagFamily$_#PartialFunc6);

function Tclass._System.___hPartialFunc6_0(Ty) : Ty;

// Tclass._System.___hPartialFunc6 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hPartialFunc6_0(Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc6_1(Ty) : Ty;

// Tclass._System.___hPartialFunc6 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hPartialFunc6_1(Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc6_2(Ty) : Ty;

// Tclass._System.___hPartialFunc6 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hPartialFunc6_2(Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc6_3(Ty) : Ty;

// Tclass._System.___hPartialFunc6 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hPartialFunc6_3(Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T3);

function Tclass._System.___hPartialFunc6_4(Ty) : Ty;

// Tclass._System.___hPartialFunc6 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hPartialFunc6_4(Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T4);

function Tclass._System.___hPartialFunc6_5(Ty) : Ty;

// Tclass._System.___hPartialFunc6 injectivity 5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hPartialFunc6_5(Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T5);

function Tclass._System.___hPartialFunc6_6(Ty) : Ty;

// Tclass._System.___hPartialFunc6 injectivity 6
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hPartialFunc6_6(Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc6
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R)) } 
  $IsBox(bx, Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R)));

// $Is axiom for subset type _System._#PartialFunc6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$R: Ty, 
    f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R)) } 
  $Is(f#0, Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box, x4#0: Box, x5#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
             && $IsBox(x5#0, #$T5)
           ==> Set#Equal(Reads6(#$T0, 
              #$T1, 
              #$T2, 
              #$T3, 
              #$T4, 
              #$T5, 
              #$R, 
              $OneHeap, 
              f#0, 
              x0#0, 
              x1#0, 
              x2#0, 
              x3#0, 
              x4#0, 
              x5#0), 
            Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R), 
      $h) } 
  $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R), 
      $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R), $h));

function Tclass._System.___hTotalFunc6(Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc6: TyTag;

// Tclass._System.___hTotalFunc6 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tag(Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
       == Tagclass._System.___hTotalFunc6
     && TagFamily(Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
       == tytagFamily$_#TotalFunc6);

function Tclass._System.___hTotalFunc6_0(Ty) : Ty;

// Tclass._System.___hTotalFunc6 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hTotalFunc6_0(Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc6_1(Ty) : Ty;

// Tclass._System.___hTotalFunc6 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hTotalFunc6_1(Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc6_2(Ty) : Ty;

// Tclass._System.___hTotalFunc6 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hTotalFunc6_2(Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc6_3(Ty) : Ty;

// Tclass._System.___hTotalFunc6 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hTotalFunc6_3(Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T3);

function Tclass._System.___hTotalFunc6_4(Ty) : Ty;

// Tclass._System.___hTotalFunc6 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hTotalFunc6_4(Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T4);

function Tclass._System.___hTotalFunc6_5(Ty) : Ty;

// Tclass._System.___hTotalFunc6 injectivity 5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hTotalFunc6_5(Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$T5);

function Tclass._System.___hTotalFunc6_6(Ty) : Ty;

// Tclass._System.___hTotalFunc6 injectivity 6
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R) } 
  Tclass._System.___hTotalFunc6_6(Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc6
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$R: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R)));

// $Is axiom for subset type _System._#TotalFunc6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$R: Ty, 
    f#0: HandleType :: 
  { $Is(f#0, Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R)) } 
  $Is(f#0, Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
     <==> $Is(f#0, Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box, x4#0: Box, x5#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
             && $IsBox(x5#0, #$T5)
           ==> Requires6(#$T0, 
            #$T1, 
            #$T2, 
            #$T3, 
            #$T4, 
            #$T5, 
            #$R, 
            $OneHeap, 
            f#0, 
            x0#0, 
            x1#0, 
            x2#0, 
            x3#0, 
            x4#0, 
            x5#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R), $h) } 
  $IsAlloc(f#0, Tclass._System.___hTotalFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R), $h)
     <==> $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc6(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$R), 
      $h));

function Tclass._System.___hFunc7(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc7: TyTag;

// Tclass._System.___hFunc7 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tag(Tclass._System.___hFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
       == Tagclass._System.___hFunc7
     && TagFamily(Tclass._System.___hFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
       == tytagFamily$_#Func7);

function Tclass._System.___hFunc7_0(Ty) : Ty;

// Tclass._System.___hFunc7 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tclass._System.___hFunc7_0(Tclass._System.___hFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     == #$T0);

function Tclass._System.___hFunc7_1(Ty) : Ty;

// Tclass._System.___hFunc7 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tclass._System.___hFunc7_1(Tclass._System.___hFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     == #$T1);

function Tclass._System.___hFunc7_2(Ty) : Ty;

// Tclass._System.___hFunc7 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tclass._System.___hFunc7_2(Tclass._System.___hFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     == #$T2);

function Tclass._System.___hFunc7_3(Ty) : Ty;

// Tclass._System.___hFunc7 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tclass._System.___hFunc7_3(Tclass._System.___hFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     == #$T3);

function Tclass._System.___hFunc7_4(Ty) : Ty;

// Tclass._System.___hFunc7 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tclass._System.___hFunc7_4(Tclass._System.___hFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     == #$T4);

function Tclass._System.___hFunc7_5(Ty) : Ty;

// Tclass._System.___hFunc7 injectivity 5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tclass._System.___hFunc7_5(Tclass._System.___hFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     == #$T5);

function Tclass._System.___hFunc7_6(Ty) : Ty;

// Tclass._System.___hFunc7 injectivity 6
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tclass._System.___hFunc7_6(Tclass._System.___hFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     == #$T6);

function Tclass._System.___hFunc7_7(Ty) : Ty;

// Tclass._System.___hFunc7 injectivity 7
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tclass._System.___hFunc7_7(Tclass._System.___hFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, Tclass._System.___hFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R)) } 
  $IsBox(bx, Tclass._System.___hFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R)));

function Handle7([Heap,Box,Box,Box,Box,Box,Box,Box]Box, 
    [Heap,Box,Box,Box,Box,Box,Box,Box]bool, 
    [Heap,Box,Box,Box,Box,Box,Box,Box]Set)
   : HandleType;

function Apply7(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : Box;

function Requires7(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : bool;

function Reads7(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box :: 
  { Apply7(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      heap, 
      Handle7(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6) } 
  Apply7(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      heap, 
      Handle7(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6)
     == h[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box :: 
  { Requires7(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      heap, 
      Handle7(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6) } 
  r[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6]
     ==> Requires7(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      heap, 
      Handle7(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx: Box :: 
  { Set#IsMember(Reads7(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        heap, 
        Handle7(h, r, rd), 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6), 
      bx) } 
  Set#IsMember(Reads7(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        heap, 
        Handle7(h, r, rd), 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6), 
      bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6], bx));

function {:inline} Requires7#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box)
   : bool
{
  true
}

function {:inline} Reads7#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box)
   : bool
{
  true
}

// frame axiom for Reads7
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box :: 
  { $HeapSucc(h0, h1), Reads7(t0, t1, t2, t3, t4, t5, t6, t7, h1, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $Is(f, Tclass._System.___hFunc7(t0, t1, t2, t3, t4, t5, t6, t7))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads7(t0, t1, t2, t3, t4, t5, t6, t7, h0, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads7(t0, t1, t2, t3, t4, t5, t6, t7, h0, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6)
       == Reads7(t0, t1, t2, t3, t4, t5, t6, t7, h1, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6));

// frame axiom for Reads7
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box :: 
  { $HeapSucc(h0, h1), Reads7(t0, t1, t2, t3, t4, t5, t6, t7, h1, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $Is(f, Tclass._System.___hFunc7(t0, t1, t2, t3, t4, t5, t6, t7))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads7(t0, t1, t2, t3, t4, t5, t6, t7, h1, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads7(t0, t1, t2, t3, t4, t5, t6, t7, h0, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6)
       == Reads7(t0, t1, t2, t3, t4, t5, t6, t7, h1, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6));

// frame axiom for Requires7
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box :: 
  { $HeapSucc(h0, h1), Requires7(t0, t1, t2, t3, t4, t5, t6, t7, h1, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $Is(f, Tclass._System.___hFunc7(t0, t1, t2, t3, t4, t5, t6, t7))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads7(t0, t1, t2, t3, t4, t5, t6, t7, h0, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires7(t0, t1, t2, t3, t4, t5, t6, t7, h0, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6)
       == Requires7(t0, t1, t2, t3, t4, t5, t6, t7, h1, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6));

// frame axiom for Requires7
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box :: 
  { $HeapSucc(h0, h1), Requires7(t0, t1, t2, t3, t4, t5, t6, t7, h1, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $Is(f, Tclass._System.___hFunc7(t0, t1, t2, t3, t4, t5, t6, t7))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads7(t0, t1, t2, t3, t4, t5, t6, t7, h1, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires7(t0, t1, t2, t3, t4, t5, t6, t7, h0, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6)
       == Requires7(t0, t1, t2, t3, t4, t5, t6, t7, h1, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6));

// frame axiom for Apply7
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box :: 
  { $HeapSucc(h0, h1), Apply7(t0, t1, t2, t3, t4, t5, t6, t7, h1, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $Is(f, Tclass._System.___hFunc7(t0, t1, t2, t3, t4, t5, t6, t7))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads7(t0, t1, t2, t3, t4, t5, t6, t7, h0, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply7(t0, t1, t2, t3, t4, t5, t6, t7, h0, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6)
       == Apply7(t0, t1, t2, t3, t4, t5, t6, t7, h1, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6));

// frame axiom for Apply7
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box :: 
  { $HeapSucc(h0, h1), Apply7(t0, t1, t2, t3, t4, t5, t6, t7, h1, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $Is(f, Tclass._System.___hFunc7(t0, t1, t2, t3, t4, t5, t6, t7))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads7(t0, t1, t2, t3, t4, t5, t6, t7, h1, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply7(t0, t1, t2, t3, t4, t5, t6, t7, h0, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6)
       == Apply7(t0, t1, t2, t3, t4, t5, t6, t7, h1, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6));

// empty-reads property for Reads7 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box :: 
  { Reads7(t0, t1, t2, t3, t4, t5, t6, t7, $OneHeap, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6), $IsGoodHeap(heap) } 
    { Reads7(t0, t1, t2, t3, t4, t5, t6, t7, heap, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $Is(f, Tclass._System.___hFunc7(t0, t1, t2, t3, t4, t5, t6, t7))
     ==> (Set#Equal(Reads7(t0, t1, t2, t3, t4, t5, t6, t7, $OneHeap, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6), 
        Set#Empty(): Set)
       <==> Set#Equal(Reads7(t0, t1, t2, t3, t4, t5, t6, t7, heap, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6), 
        Set#Empty(): Set)));

// empty-reads property for Requires7
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box :: 
  { Requires7(t0, t1, t2, t3, t4, t5, t6, t7, $OneHeap, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6), $IsGoodHeap(heap) } 
    { Requires7(t0, t1, t2, t3, t4, t5, t6, t7, heap, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $Is(f, Tclass._System.___hFunc7(t0, t1, t2, t3, t4, t5, t6, t7))
       && Set#Equal(Reads7(t0, t1, t2, t3, t4, t5, t6, t7, $OneHeap, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6), 
        Set#Empty(): Set)
     ==> Requires7(t0, t1, t2, t3, t4, t5, t6, t7, $OneHeap, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6)
       == Requires7(t0, t1, t2, t3, t4, t5, t6, t7, heap, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6));

axiom (forall f: HandleType, t0: Ty, t1: Ty, t2: Ty, t3: Ty, t4: Ty, t5: Ty, t6: Ty, t7: Ty :: 
  { $Is(f, Tclass._System.___hFunc7(t0, t1, t2, t3, t4, t5, t6, t7)) } 
  $Is(f, Tclass._System.___hFunc7(t0, t1, t2, t3, t4, t5, t6, t7))
     <==> (forall h: Heap, bx0: Box, bx1: Box, bx2: Box, bx3: Box, bx4: Box, bx5: Box, bx6: Box :: 
      { Apply7(t0, t1, t2, t3, t4, t5, t6, t7, h, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && $IsBox(bx3, t3)
           && $IsBox(bx4, t4)
           && $IsBox(bx5, t5)
           && $IsBox(bx6, t6)
           && Requires7(t0, t1, t2, t3, t4, t5, t6, t7, h, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6)
         ==> $IsBox(Apply7(t0, t1, t2, t3, t4, t5, t6, t7, h, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6), 
          t7)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    u0: Ty, 
    u1: Ty, 
    u2: Ty, 
    u3: Ty, 
    u4: Ty, 
    u5: Ty, 
    u6: Ty, 
    u7: Ty :: 
  { $Is(f, Tclass._System.___hFunc7(t0, t1, t2, t3, t4, t5, t6, t7)), $Is(f, Tclass._System.___hFunc7(u0, u1, u2, u3, u4, u5, u6, u7)) } 
  $Is(f, Tclass._System.___hFunc7(t0, t1, t2, t3, t4, t5, t6, t7))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u3) } { $IsBox(bx, t3) } 
        $IsBox(bx, u3) ==> $IsBox(bx, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, u4) } { $IsBox(bx, t4) } 
        $IsBox(bx, u4) ==> $IsBox(bx, t4))
       && (forall bx: Box :: 
        { $IsBox(bx, u5) } { $IsBox(bx, t5) } 
        $IsBox(bx, u5) ==> $IsBox(bx, t5))
       && (forall bx: Box :: 
        { $IsBox(bx, u6) } { $IsBox(bx, t6) } 
        $IsBox(bx, u6) ==> $IsBox(bx, t6))
       && (forall bx: Box :: 
        { $IsBox(bx, t7) } { $IsBox(bx, u7) } 
        $IsBox(bx, t7) ==> $IsBox(bx, u7))
     ==> $Is(f, Tclass._System.___hFunc7(u0, u1, u2, u3, u4, u5, u6, u7)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc7(t0, t1, t2, t3, t4, t5, t6, t7), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc7(t0, t1, t2, t3, t4, t5, t6, t7), h)
       <==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box, bx4: Box, bx5: Box, bx6: Box :: 
        { Apply7(t0, t1, t2, t3, t4, t5, t6, t7, h, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6) } 
          { Reads7(t0, t1, t2, t3, t4, t5, t6, t7, h, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && 
            $IsBox(bx3, t3)
             && $IsAllocBox(bx3, t3, h)
             && 
            $IsBox(bx4, t4)
             && $IsAllocBox(bx4, t4, h)
             && 
            $IsBox(bx5, t5)
             && $IsAllocBox(bx5, t5, h)
             && 
            $IsBox(bx6, t6)
             && $IsAllocBox(bx6, t6, h)
             && Requires7(t0, t1, t2, t3, t4, t5, t6, t7, h, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads7(t0, t1, t2, t3, t4, t5, t6, t7, h, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6), 
                $Box(r)) } 
            r != null
                 && Set#IsMember(Reads7(t0, t1, t2, t3, t4, t5, t6, t7, h, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6), 
                  $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc7(t0, t1, t2, t3, t4, t5, t6, t7), h) } 
  $IsGoodHeap(h)
       && $IsAlloc(f, Tclass._System.___hFunc7(t0, t1, t2, t3, t4, t5, t6, t7), h)
     ==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box, bx4: Box, bx5: Box, bx6: Box :: 
      { Apply7(t0, t1, t2, t3, t4, t5, t6, t7, h, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && $IsAllocBox(bx3, t3, h)
           && $IsAllocBox(bx4, t4, h)
           && $IsAllocBox(bx5, t5, h)
           && $IsAllocBox(bx6, t6, h)
           && Requires7(t0, t1, t2, t3, t4, t5, t6, t7, h, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6)
         ==> $IsAllocBox(Apply7(t0, t1, t2, t3, t4, t5, t6, t7, h, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6), 
          t7, 
          h)));

function Tclass._System.___hPartialFunc7(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc7: TyTag;

// Tclass._System.___hPartialFunc7 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tag(Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
       == Tagclass._System.___hPartialFunc7
     && TagFamily(Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
       == tytagFamily$_#PartialFunc7);

function Tclass._System.___hPartialFunc7_0(Ty) : Ty;

// Tclass._System.___hPartialFunc7 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tclass._System.___hPartialFunc7_0(Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc7_1(Ty) : Ty;

// Tclass._System.___hPartialFunc7 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tclass._System.___hPartialFunc7_1(Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc7_2(Ty) : Ty;

// Tclass._System.___hPartialFunc7 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tclass._System.___hPartialFunc7_2(Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc7_3(Ty) : Ty;

// Tclass._System.___hPartialFunc7 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tclass._System.___hPartialFunc7_3(Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     == #$T3);

function Tclass._System.___hPartialFunc7_4(Ty) : Ty;

// Tclass._System.___hPartialFunc7 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tclass._System.___hPartialFunc7_4(Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     == #$T4);

function Tclass._System.___hPartialFunc7_5(Ty) : Ty;

// Tclass._System.___hPartialFunc7 injectivity 5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tclass._System.___hPartialFunc7_5(Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     == #$T5);

function Tclass._System.___hPartialFunc7_6(Ty) : Ty;

// Tclass._System.___hPartialFunc7 injectivity 6
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tclass._System.___hPartialFunc7_6(Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     == #$T6);

function Tclass._System.___hPartialFunc7_7(Ty) : Ty;

// Tclass._System.___hPartialFunc7 injectivity 7
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tclass._System.___hPartialFunc7_7(Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R)));

// $Is axiom for subset type _System._#PartialFunc7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$R: Ty, 
    f#0: HandleType :: 
  { $Is(f#0, 
      Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R)) } 
  $Is(f#0, 
      Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     <==> $Is(f#0, Tclass._System.___hFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box, x4#0: Box, x5#0: Box, x6#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
             && $IsBox(x5#0, #$T5)
             && $IsBox(x6#0, #$T6)
           ==> Set#Equal(Reads7(#$T0, 
              #$T1, 
              #$T2, 
              #$T3, 
              #$T4, 
              #$T5, 
              #$T6, 
              #$R, 
              $OneHeap, 
              f#0, 
              x0#0, 
              x1#0, 
              x2#0, 
              x3#0, 
              x4#0, 
              x5#0, 
              x6#0), 
            Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R), 
      $h) } 
  $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R), 
      $h)
     <==> $IsAlloc(f#0, Tclass._System.___hFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R), $h));

function Tclass._System.___hTotalFunc7(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc7: TyTag;

// Tclass._System.___hTotalFunc7 Tag
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tag(Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
       == Tagclass._System.___hTotalFunc7
     && TagFamily(Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
       == tytagFamily$_#TotalFunc7);

function Tclass._System.___hTotalFunc7_0(Ty) : Ty;

// Tclass._System.___hTotalFunc7 injectivity 0
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tclass._System.___hTotalFunc7_0(Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc7_1(Ty) : Ty;

// Tclass._System.___hTotalFunc7 injectivity 1
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tclass._System.___hTotalFunc7_1(Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc7_2(Ty) : Ty;

// Tclass._System.___hTotalFunc7 injectivity 2
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tclass._System.___hTotalFunc7_2(Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc7_3(Ty) : Ty;

// Tclass._System.___hTotalFunc7 injectivity 3
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tclass._System.___hTotalFunc7_3(Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     == #$T3);

function Tclass._System.___hTotalFunc7_4(Ty) : Ty;

// Tclass._System.___hTotalFunc7 injectivity 4
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tclass._System.___hTotalFunc7_4(Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     == #$T4);

function Tclass._System.___hTotalFunc7_5(Ty) : Ty;

// Tclass._System.___hTotalFunc7 injectivity 5
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tclass._System.___hTotalFunc7_5(Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     == #$T5);

function Tclass._System.___hTotalFunc7_6(Ty) : Ty;

// Tclass._System.___hTotalFunc7 injectivity 6
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tclass._System.___hTotalFunc7_6(Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     == #$T6);

function Tclass._System.___hTotalFunc7_7(Ty) : Ty;

// Tclass._System.___hTotalFunc7 injectivity 7
axiom (forall #$T0: Ty, #$T1: Ty, #$T2: Ty, #$T3: Ty, #$T4: Ty, #$T5: Ty, #$T6: Ty, #$R: Ty :: 
  { Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R) } 
  Tclass._System.___hTotalFunc7_7(Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R)) } 
  $IsBox(bx, Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R)));

// $Is axiom for subset type _System._#TotalFunc7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$R: Ty, 
    f#0: HandleType :: 
  { $Is(f#0, 
      Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R)) } 
  $Is(f#0, 
      Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
     <==> $Is(f#0, 
        Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R))
       && (forall x0#0: Box, x1#0: Box, x2#0: Box, x3#0: Box, x4#0: Box, x5#0: Box, x6#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
             && $IsBox(x5#0, #$T5)
             && $IsBox(x6#0, #$T6)
           ==> Requires7(#$T0, 
            #$T1, 
            #$T2, 
            #$T3, 
            #$T4, 
            #$T5, 
            #$T6, 
            #$R, 
            $OneHeap, 
            f#0, 
            x0#0, 
            x1#0, 
            x2#0, 
            x3#0, 
            x4#0, 
            x5#0, 
            x6#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, 
      Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R), 
      $h) } 
  $IsAlloc(f#0, 
      Tclass._System.___hTotalFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R), 
      $h)
     <==> $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc7(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$R), 
      $h));

function Tclass._System.___hFunc8(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc8: TyTag;

// Tclass._System.___hFunc8 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tag(Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
       == Tagclass._System.___hFunc8
     && TagFamily(Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
       == tytagFamily$_#Func8);

function Tclass._System.___hFunc8_0(Ty) : Ty;

// Tclass._System.___hFunc8 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hFunc8_0(Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$T0);

function Tclass._System.___hFunc8_1(Ty) : Ty;

// Tclass._System.___hFunc8 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hFunc8_1(Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$T1);

function Tclass._System.___hFunc8_2(Ty) : Ty;

// Tclass._System.___hFunc8 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hFunc8_2(Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$T2);

function Tclass._System.___hFunc8_3(Ty) : Ty;

// Tclass._System.___hFunc8 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hFunc8_3(Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$T3);

function Tclass._System.___hFunc8_4(Ty) : Ty;

// Tclass._System.___hFunc8 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hFunc8_4(Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$T4);

function Tclass._System.___hFunc8_5(Ty) : Ty;

// Tclass._System.___hFunc8 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hFunc8_5(Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$T5);

function Tclass._System.___hFunc8_6(Ty) : Ty;

// Tclass._System.___hFunc8 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hFunc8_6(Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$T6);

function Tclass._System.___hFunc8_7(Ty) : Ty;

// Tclass._System.___hFunc8 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hFunc8_7(Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$T7);

function Tclass._System.___hFunc8_8(Ty) : Ty;

// Tclass._System.___hFunc8 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hFunc8_8(Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R)));

function Handle8([Heap,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    [Heap,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    [Heap,Box,Box,Box,Box,Box,Box,Box,Box]Set)
   : HandleType;

function Apply8(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : Box;

function Requires8(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : bool;

function Reads8(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box :: 
  { Apply8(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      heap, 
      Handle8(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7) } 
  Apply8(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      heap, 
      Handle8(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7)
     == h[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box :: 
  { Requires8(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      heap, 
      Handle8(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7) } 
  r[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7]
     ==> Requires8(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      heap, 
      Handle8(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx: Box :: 
  { Set#IsMember(Reads8(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        heap, 
        Handle8(h, r, rd), 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7), 
      bx) } 
  Set#IsMember(Reads8(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        heap, 
        Handle8(h, r, rd), 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7), 
      bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7], bx));

function {:inline} Requires8#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box)
   : bool
{
  true
}

function {:inline} Reads8#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box)
   : bool
{
  true
}

// frame axiom for Reads8
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box :: 
  { $HeapSucc(h0, h1), Reads8(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $Is(f, Tclass._System.___hFunc8(t0, t1, t2, t3, t4, t5, t6, t7, t8))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads8(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads8(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7)
       == Reads8(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7));

// frame axiom for Reads8
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box :: 
  { $HeapSucc(h0, h1), Reads8(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $Is(f, Tclass._System.___hFunc8(t0, t1, t2, t3, t4, t5, t6, t7, t8))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads8(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads8(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7)
       == Reads8(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7));

// frame axiom for Requires8
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box :: 
  { $HeapSucc(h0, h1), Requires8(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $Is(f, Tclass._System.___hFunc8(t0, t1, t2, t3, t4, t5, t6, t7, t8))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads8(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires8(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7)
       == Requires8(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7));

// frame axiom for Requires8
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box :: 
  { $HeapSucc(h0, h1), Requires8(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $Is(f, Tclass._System.___hFunc8(t0, t1, t2, t3, t4, t5, t6, t7, t8))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads8(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires8(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7)
       == Requires8(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7));

// frame axiom for Apply8
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box :: 
  { $HeapSucc(h0, h1), Apply8(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $Is(f, Tclass._System.___hFunc8(t0, t1, t2, t3, t4, t5, t6, t7, t8))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads8(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply8(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7)
       == Apply8(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7));

// frame axiom for Apply8
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box :: 
  { $HeapSucc(h0, h1), Apply8(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $Is(f, Tclass._System.___hFunc8(t0, t1, t2, t3, t4, t5, t6, t7, t8))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads8(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply8(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7)
       == Apply8(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7));

// empty-reads property for Reads8 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box :: 
  { Reads8(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      $OneHeap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7), $IsGoodHeap(heap) } 
    { Reads8(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      heap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $Is(f, Tclass._System.___hFunc8(t0, t1, t2, t3, t4, t5, t6, t7, t8))
     ==> (Set#Equal(Reads8(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          $OneHeap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7), 
        Set#Empty(): Set)
       <==> Set#Equal(Reads8(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          heap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7), 
        Set#Empty(): Set)));

// empty-reads property for Requires8
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box :: 
  { Requires8(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      $OneHeap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7), $IsGoodHeap(heap) } 
    { Requires8(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      heap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $Is(f, Tclass._System.___hFunc8(t0, t1, t2, t3, t4, t5, t6, t7, t8))
       && Set#Equal(Reads8(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          $OneHeap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7), 
        Set#Empty(): Set)
     ==> Requires8(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        $OneHeap, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7)
       == Requires8(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        heap, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty :: 
  { $Is(f, Tclass._System.___hFunc8(t0, t1, t2, t3, t4, t5, t6, t7, t8)) } 
  $Is(f, Tclass._System.___hFunc8(t0, t1, t2, t3, t4, t5, t6, t7, t8))
     <==> (forall h: Heap, 
        bx0: Box, 
        bx1: Box, 
        bx2: Box, 
        bx3: Box, 
        bx4: Box, 
        bx5: Box, 
        bx6: Box, 
        bx7: Box :: 
      { Apply8(t0, t1, t2, t3, t4, t5, t6, t7, t8, h, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && $IsBox(bx3, t3)
           && $IsBox(bx4, t4)
           && $IsBox(bx5, t5)
           && $IsBox(bx6, t6)
           && $IsBox(bx7, t7)
           && Requires8(t0, t1, t2, t3, t4, t5, t6, t7, t8, h, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7)
         ==> $IsBox(Apply8(t0, t1, t2, t3, t4, t5, t6, t7, t8, h, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7), 
          t8)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    u0: Ty, 
    u1: Ty, 
    u2: Ty, 
    u3: Ty, 
    u4: Ty, 
    u5: Ty, 
    u6: Ty, 
    u7: Ty, 
    u8: Ty :: 
  { $Is(f, Tclass._System.___hFunc8(t0, t1, t2, t3, t4, t5, t6, t7, t8)), $Is(f, Tclass._System.___hFunc8(u0, u1, u2, u3, u4, u5, u6, u7, u8)) } 
  $Is(f, Tclass._System.___hFunc8(t0, t1, t2, t3, t4, t5, t6, t7, t8))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u3) } { $IsBox(bx, t3) } 
        $IsBox(bx, u3) ==> $IsBox(bx, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, u4) } { $IsBox(bx, t4) } 
        $IsBox(bx, u4) ==> $IsBox(bx, t4))
       && (forall bx: Box :: 
        { $IsBox(bx, u5) } { $IsBox(bx, t5) } 
        $IsBox(bx, u5) ==> $IsBox(bx, t5))
       && (forall bx: Box :: 
        { $IsBox(bx, u6) } { $IsBox(bx, t6) } 
        $IsBox(bx, u6) ==> $IsBox(bx, t6))
       && (forall bx: Box :: 
        { $IsBox(bx, u7) } { $IsBox(bx, t7) } 
        $IsBox(bx, u7) ==> $IsBox(bx, t7))
       && (forall bx: Box :: 
        { $IsBox(bx, t8) } { $IsBox(bx, u8) } 
        $IsBox(bx, t8) ==> $IsBox(bx, u8))
     ==> $Is(f, Tclass._System.___hFunc8(u0, u1, u2, u3, u4, u5, u6, u7, u8)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc8(t0, t1, t2, t3, t4, t5, t6, t7, t8), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc8(t0, t1, t2, t3, t4, t5, t6, t7, t8), h)
       <==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box, bx4: Box, bx5: Box, bx6: Box, bx7: Box :: 
        { Apply8(t0, t1, t2, t3, t4, t5, t6, t7, t8, h, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7) } 
          { Reads8(t0, t1, t2, t3, t4, t5, t6, t7, t8, h, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && 
            $IsBox(bx3, t3)
             && $IsAllocBox(bx3, t3, h)
             && 
            $IsBox(bx4, t4)
             && $IsAllocBox(bx4, t4, h)
             && 
            $IsBox(bx5, t5)
             && $IsAllocBox(bx5, t5, h)
             && 
            $IsBox(bx6, t6)
             && $IsAllocBox(bx6, t6, h)
             && 
            $IsBox(bx7, t7)
             && $IsAllocBox(bx7, t7, h)
             && Requires8(t0, t1, t2, t3, t4, t5, t6, t7, t8, h, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads8(t0, t1, t2, t3, t4, t5, t6, t7, t8, h, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7), 
                $Box(r)) } 
            r != null
                 && Set#IsMember(Reads8(t0, t1, t2, t3, t4, t5, t6, t7, t8, h, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7), 
                  $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc8(t0, t1, t2, t3, t4, t5, t6, t7, t8), h) } 
  $IsGoodHeap(h)
       && $IsAlloc(f, Tclass._System.___hFunc8(t0, t1, t2, t3, t4, t5, t6, t7, t8), h)
     ==> (forall bx0: Box, bx1: Box, bx2: Box, bx3: Box, bx4: Box, bx5: Box, bx6: Box, bx7: Box :: 
      { Apply8(t0, t1, t2, t3, t4, t5, t6, t7, t8, h, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && $IsAllocBox(bx3, t3, h)
           && $IsAllocBox(bx4, t4, h)
           && $IsAllocBox(bx5, t5, h)
           && $IsAllocBox(bx6, t6, h)
           && $IsAllocBox(bx7, t7, h)
           && Requires8(t0, t1, t2, t3, t4, t5, t6, t7, t8, h, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7)
         ==> $IsAllocBox(Apply8(t0, t1, t2, t3, t4, t5, t6, t7, t8, h, f, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7), 
          t8, 
          h)));

function Tclass._System.___hPartialFunc8(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc8: TyTag;

// Tclass._System.___hPartialFunc8 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tag(Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
       == Tagclass._System.___hPartialFunc8
     && TagFamily(Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
       == tytagFamily$_#PartialFunc8);

function Tclass._System.___hPartialFunc8_0(Ty) : Ty;

// Tclass._System.___hPartialFunc8 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hPartialFunc8_0(Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc8_1(Ty) : Ty;

// Tclass._System.___hPartialFunc8 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hPartialFunc8_1(Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc8_2(Ty) : Ty;

// Tclass._System.___hPartialFunc8 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hPartialFunc8_2(Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc8_3(Ty) : Ty;

// Tclass._System.___hPartialFunc8 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hPartialFunc8_3(Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$T3);

function Tclass._System.___hPartialFunc8_4(Ty) : Ty;

// Tclass._System.___hPartialFunc8 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hPartialFunc8_4(Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$T4);

function Tclass._System.___hPartialFunc8_5(Ty) : Ty;

// Tclass._System.___hPartialFunc8 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hPartialFunc8_5(Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$T5);

function Tclass._System.___hPartialFunc8_6(Ty) : Ty;

// Tclass._System.___hPartialFunc8 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hPartialFunc8_6(Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$T6);

function Tclass._System.___hPartialFunc8_7(Ty) : Ty;

// Tclass._System.___hPartialFunc8 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hPartialFunc8_7(Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$T7);

function Tclass._System.___hPartialFunc8_8(Ty) : Ty;

// Tclass._System.___hPartialFunc8 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hPartialFunc8_8(Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R)));

// $Is axiom for subset type _System._#PartialFunc8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty, 
    f#0: HandleType :: 
  { $Is(f#0, 
      Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R)) } 
  $Is(f#0, 
      Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     <==> $Is(f#0, 
        Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
       && (forall x0#0: Box, 
          x1#0: Box, 
          x2#0: Box, 
          x3#0: Box, 
          x4#0: Box, 
          x5#0: Box, 
          x6#0: Box, 
          x7#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
             && $IsBox(x5#0, #$T5)
             && $IsBox(x6#0, #$T6)
             && $IsBox(x7#0, #$T7)
           ==> Set#Equal(Reads8(#$T0, 
              #$T1, 
              #$T2, 
              #$T3, 
              #$T4, 
              #$T5, 
              #$T6, 
              #$T7, 
              #$R, 
              $OneHeap, 
              f#0, 
              x0#0, 
              x1#0, 
              x2#0, 
              x3#0, 
              x4#0, 
              x5#0, 
              x6#0, 
              x7#0), 
            Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R), 
      $h) } 
  $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R), 
      $h)
     <==> $IsAlloc(f#0, 
      Tclass._System.___hFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R), 
      $h));

function Tclass._System.___hTotalFunc8(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc8: TyTag;

// Tclass._System.___hTotalFunc8 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tag(Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
       == Tagclass._System.___hTotalFunc8
     && TagFamily(Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
       == tytagFamily$_#TotalFunc8);

function Tclass._System.___hTotalFunc8_0(Ty) : Ty;

// Tclass._System.___hTotalFunc8 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hTotalFunc8_0(Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc8_1(Ty) : Ty;

// Tclass._System.___hTotalFunc8 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hTotalFunc8_1(Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc8_2(Ty) : Ty;

// Tclass._System.___hTotalFunc8 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hTotalFunc8_2(Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc8_3(Ty) : Ty;

// Tclass._System.___hTotalFunc8 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hTotalFunc8_3(Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$T3);

function Tclass._System.___hTotalFunc8_4(Ty) : Ty;

// Tclass._System.___hTotalFunc8 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hTotalFunc8_4(Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$T4);

function Tclass._System.___hTotalFunc8_5(Ty) : Ty;

// Tclass._System.___hTotalFunc8 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hTotalFunc8_5(Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$T5);

function Tclass._System.___hTotalFunc8_6(Ty) : Ty;

// Tclass._System.___hTotalFunc8 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hTotalFunc8_6(Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$T6);

function Tclass._System.___hTotalFunc8_7(Ty) : Ty;

// Tclass._System.___hTotalFunc8 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hTotalFunc8_7(Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$T7);

function Tclass._System.___hTotalFunc8_8(Ty) : Ty;

// Tclass._System.___hTotalFunc8 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R) } 
  Tclass._System.___hTotalFunc8_8(Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R)));

// $Is axiom for subset type _System._#TotalFunc8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty, 
    f#0: HandleType :: 
  { $Is(f#0, 
      Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R)) } 
  $Is(f#0, 
      Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
     <==> $Is(f#0, 
        Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R))
       && (forall x0#0: Box, 
          x1#0: Box, 
          x2#0: Box, 
          x3#0: Box, 
          x4#0: Box, 
          x5#0: Box, 
          x6#0: Box, 
          x7#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
             && $IsBox(x5#0, #$T5)
             && $IsBox(x6#0, #$T6)
             && $IsBox(x7#0, #$T7)
           ==> Requires8(#$T0, 
            #$T1, 
            #$T2, 
            #$T3, 
            #$T4, 
            #$T5, 
            #$T6, 
            #$T7, 
            #$R, 
            $OneHeap, 
            f#0, 
            x0#0, 
            x1#0, 
            x2#0, 
            x3#0, 
            x4#0, 
            x5#0, 
            x6#0, 
            x7#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, 
      Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R), 
      $h) } 
  $IsAlloc(f#0, 
      Tclass._System.___hTotalFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R), 
      $h)
     <==> $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc8(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$R), 
      $h));

function Tclass._System.___hFunc9(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc9: TyTag;

// Tclass._System.___hFunc9 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tag(Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
       == Tagclass._System.___hFunc9
     && TagFamily(Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
       == tytagFamily$_#Func9);

function Tclass._System.___hFunc9_0(Ty) : Ty;

// Tclass._System.___hFunc9 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hFunc9_0(Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T0);

function Tclass._System.___hFunc9_1(Ty) : Ty;

// Tclass._System.___hFunc9 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hFunc9_1(Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T1);

function Tclass._System.___hFunc9_2(Ty) : Ty;

// Tclass._System.___hFunc9 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hFunc9_2(Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T2);

function Tclass._System.___hFunc9_3(Ty) : Ty;

// Tclass._System.___hFunc9 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hFunc9_3(Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T3);

function Tclass._System.___hFunc9_4(Ty) : Ty;

// Tclass._System.___hFunc9 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hFunc9_4(Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T4);

function Tclass._System.___hFunc9_5(Ty) : Ty;

// Tclass._System.___hFunc9 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hFunc9_5(Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T5);

function Tclass._System.___hFunc9_6(Ty) : Ty;

// Tclass._System.___hFunc9 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hFunc9_6(Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T6);

function Tclass._System.___hFunc9_7(Ty) : Ty;

// Tclass._System.___hFunc9 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hFunc9_7(Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T7);

function Tclass._System.___hFunc9_8(Ty) : Ty;

// Tclass._System.___hFunc9 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hFunc9_8(Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T8);

function Tclass._System.___hFunc9_9(Ty) : Ty;

// Tclass._System.___hFunc9 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hFunc9_9(Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R)));

function Handle9([Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set)
   : HandleType;

function Apply9(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : Box;

function Requires9(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : bool;

function Reads9(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box :: 
  { Apply9(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      heap, 
      Handle9(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8) } 
  Apply9(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      heap, 
      Handle9(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8)
     == h[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box :: 
  { Requires9(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      heap, 
      Handle9(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8) } 
  r[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8]
     ==> Requires9(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      heap, 
      Handle9(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx: Box :: 
  { Set#IsMember(Reads9(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        heap, 
        Handle9(h, r, rd), 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8), 
      bx) } 
  Set#IsMember(Reads9(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        heap, 
        Handle9(h, r, rd), 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8), 
      bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8], bx));

function {:inline} Requires9#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box)
   : bool
{
  true
}

function {:inline} Reads9#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box)
   : bool
{
  true
}

// frame axiom for Reads9
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box :: 
  { $HeapSucc(h0, h1), Reads9(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $Is(f, Tclass._System.___hFunc9(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads9(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads9(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8)
       == Reads9(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8));

// frame axiom for Reads9
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box :: 
  { $HeapSucc(h0, h1), Reads9(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $Is(f, Tclass._System.___hFunc9(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads9(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads9(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8)
       == Reads9(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8));

// frame axiom for Requires9
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box :: 
  { $HeapSucc(h0, h1), Requires9(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $Is(f, Tclass._System.___hFunc9(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads9(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires9(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8)
       == Requires9(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8));

// frame axiom for Requires9
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box :: 
  { $HeapSucc(h0, h1), Requires9(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $Is(f, Tclass._System.___hFunc9(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads9(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires9(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8)
       == Requires9(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8));

// frame axiom for Apply9
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box :: 
  { $HeapSucc(h0, h1), Apply9(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $Is(f, Tclass._System.___hFunc9(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads9(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply9(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8)
       == Apply9(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8));

// frame axiom for Apply9
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box :: 
  { $HeapSucc(h0, h1), Apply9(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $Is(f, Tclass._System.___hFunc9(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads9(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply9(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8)
       == Apply9(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8));

// empty-reads property for Reads9 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box :: 
  { Reads9(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      $OneHeap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8), $IsGoodHeap(heap) } 
    { Reads9(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      heap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $Is(f, Tclass._System.___hFunc9(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9))
     ==> (Set#Equal(Reads9(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          $OneHeap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8), 
        Set#Empty(): Set)
       <==> Set#Equal(Reads9(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          heap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8), 
        Set#Empty(): Set)));

// empty-reads property for Requires9
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box :: 
  { Requires9(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      $OneHeap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8), $IsGoodHeap(heap) } 
    { Requires9(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      heap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $Is(f, Tclass._System.___hFunc9(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9))
       && Set#Equal(Reads9(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          $OneHeap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8), 
        Set#Empty(): Set)
     ==> Requires9(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        $OneHeap, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8)
       == Requires9(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        heap, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty :: 
  { $Is(f, Tclass._System.___hFunc9(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9)) } 
  $Is(f, Tclass._System.___hFunc9(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9))
     <==> (forall h: Heap, 
        bx0: Box, 
        bx1: Box, 
        bx2: Box, 
        bx3: Box, 
        bx4: Box, 
        bx5: Box, 
        bx6: Box, 
        bx7: Box, 
        bx8: Box :: 
      { Apply9(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          h, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && $IsBox(bx3, t3)
           && $IsBox(bx4, t4)
           && $IsBox(bx5, t5)
           && $IsBox(bx6, t6)
           && $IsBox(bx7, t7)
           && $IsBox(bx8, t8)
           && Requires9(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8)
         ==> $IsBox(Apply9(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8), 
          t9)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    u0: Ty, 
    u1: Ty, 
    u2: Ty, 
    u3: Ty, 
    u4: Ty, 
    u5: Ty, 
    u6: Ty, 
    u7: Ty, 
    u8: Ty, 
    u9: Ty :: 
  { $Is(f, Tclass._System.___hFunc9(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9)), $Is(f, Tclass._System.___hFunc9(u0, u1, u2, u3, u4, u5, u6, u7, u8, u9)) } 
  $Is(f, Tclass._System.___hFunc9(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u3) } { $IsBox(bx, t3) } 
        $IsBox(bx, u3) ==> $IsBox(bx, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, u4) } { $IsBox(bx, t4) } 
        $IsBox(bx, u4) ==> $IsBox(bx, t4))
       && (forall bx: Box :: 
        { $IsBox(bx, u5) } { $IsBox(bx, t5) } 
        $IsBox(bx, u5) ==> $IsBox(bx, t5))
       && (forall bx: Box :: 
        { $IsBox(bx, u6) } { $IsBox(bx, t6) } 
        $IsBox(bx, u6) ==> $IsBox(bx, t6))
       && (forall bx: Box :: 
        { $IsBox(bx, u7) } { $IsBox(bx, t7) } 
        $IsBox(bx, u7) ==> $IsBox(bx, t7))
       && (forall bx: Box :: 
        { $IsBox(bx, u8) } { $IsBox(bx, t8) } 
        $IsBox(bx, u8) ==> $IsBox(bx, t8))
       && (forall bx: Box :: 
        { $IsBox(bx, t9) } { $IsBox(bx, u9) } 
        $IsBox(bx, t9) ==> $IsBox(bx, u9))
     ==> $Is(f, Tclass._System.___hFunc9(u0, u1, u2, u3, u4, u5, u6, u7, u8, u9)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc9(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc9(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9), h)
       <==> (forall bx0: Box, 
          bx1: Box, 
          bx2: Box, 
          bx3: Box, 
          bx4: Box, 
          bx5: Box, 
          bx6: Box, 
          bx7: Box, 
          bx8: Box :: 
        { Apply9(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8) } 
          { Reads9(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && 
            $IsBox(bx3, t3)
             && $IsAllocBox(bx3, t3, h)
             && 
            $IsBox(bx4, t4)
             && $IsAllocBox(bx4, t4, h)
             && 
            $IsBox(bx5, t5)
             && $IsAllocBox(bx5, t5, h)
             && 
            $IsBox(bx6, t6)
             && $IsAllocBox(bx6, t6, h)
             && 
            $IsBox(bx7, t7)
             && $IsAllocBox(bx7, t7, h)
             && 
            $IsBox(bx8, t8)
             && $IsAllocBox(bx8, t8, h)
             && Requires9(t0, 
              t1, 
              t2, 
              t3, 
              t4, 
              t5, 
              t6, 
              t7, 
              t8, 
              t9, 
              h, 
              f, 
              bx0, 
              bx1, 
              bx2, 
              bx3, 
              bx4, 
              bx5, 
              bx6, 
              bx7, 
              bx8)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads9(t0, 
                  t1, 
                  t2, 
                  t3, 
                  t4, 
                  t5, 
                  t6, 
                  t7, 
                  t8, 
                  t9, 
                  h, 
                  f, 
                  bx0, 
                  bx1, 
                  bx2, 
                  bx3, 
                  bx4, 
                  bx5, 
                  bx6, 
                  bx7, 
                  bx8), 
                $Box(r)) } 
            r != null
                 && Set#IsMember(Reads9(t0, 
                    t1, 
                    t2, 
                    t3, 
                    t4, 
                    t5, 
                    t6, 
                    t7, 
                    t8, 
                    t9, 
                    h, 
                    f, 
                    bx0, 
                    bx1, 
                    bx2, 
                    bx3, 
                    bx4, 
                    bx5, 
                    bx6, 
                    bx7, 
                    bx8), 
                  $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc9(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9), h) } 
  $IsGoodHeap(h)
       && $IsAlloc(f, Tclass._System.___hFunc9(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9), h)
     ==> (forall bx0: Box, 
        bx1: Box, 
        bx2: Box, 
        bx3: Box, 
        bx4: Box, 
        bx5: Box, 
        bx6: Box, 
        bx7: Box, 
        bx8: Box :: 
      { Apply9(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          h, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && $IsAllocBox(bx3, t3, h)
           && $IsAllocBox(bx4, t4, h)
           && $IsAllocBox(bx5, t5, h)
           && $IsAllocBox(bx6, t6, h)
           && $IsAllocBox(bx7, t7, h)
           && $IsAllocBox(bx8, t8, h)
           && Requires9(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8)
         ==> $IsAllocBox(Apply9(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8), 
          t9, 
          h)));

function Tclass._System.___hPartialFunc9(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc9: TyTag;

// Tclass._System.___hPartialFunc9 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tag(Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
       == Tagclass._System.___hPartialFunc9
     && TagFamily(Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
       == tytagFamily$_#PartialFunc9);

function Tclass._System.___hPartialFunc9_0(Ty) : Ty;

// Tclass._System.___hPartialFunc9 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hPartialFunc9_0(Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc9_1(Ty) : Ty;

// Tclass._System.___hPartialFunc9 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hPartialFunc9_1(Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc9_2(Ty) : Ty;

// Tclass._System.___hPartialFunc9 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hPartialFunc9_2(Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc9_3(Ty) : Ty;

// Tclass._System.___hPartialFunc9 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hPartialFunc9_3(Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T3);

function Tclass._System.___hPartialFunc9_4(Ty) : Ty;

// Tclass._System.___hPartialFunc9 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hPartialFunc9_4(Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T4);

function Tclass._System.___hPartialFunc9_5(Ty) : Ty;

// Tclass._System.___hPartialFunc9 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hPartialFunc9_5(Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T5);

function Tclass._System.___hPartialFunc9_6(Ty) : Ty;

// Tclass._System.___hPartialFunc9 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hPartialFunc9_6(Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T6);

function Tclass._System.___hPartialFunc9_7(Ty) : Ty;

// Tclass._System.___hPartialFunc9 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hPartialFunc9_7(Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T7);

function Tclass._System.___hPartialFunc9_8(Ty) : Ty;

// Tclass._System.___hPartialFunc9 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hPartialFunc9_8(Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T8);

function Tclass._System.___hPartialFunc9_9(Ty) : Ty;

// Tclass._System.___hPartialFunc9 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hPartialFunc9_9(Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R)));

// $Is axiom for subset type _System._#PartialFunc9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty, 
    f#0: HandleType :: 
  { $Is(f#0, 
      Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R)) } 
  $Is(f#0, 
      Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     <==> $Is(f#0, 
        Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
       && (forall x0#0: Box, 
          x1#0: Box, 
          x2#0: Box, 
          x3#0: Box, 
          x4#0: Box, 
          x5#0: Box, 
          x6#0: Box, 
          x7#0: Box, 
          x8#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
             && $IsBox(x5#0, #$T5)
             && $IsBox(x6#0, #$T6)
             && $IsBox(x7#0, #$T7)
             && $IsBox(x8#0, #$T8)
           ==> Set#Equal(Reads9(#$T0, 
              #$T1, 
              #$T2, 
              #$T3, 
              #$T4, 
              #$T5, 
              #$T6, 
              #$T7, 
              #$T8, 
              #$R, 
              $OneHeap, 
              f#0, 
              x0#0, 
              x1#0, 
              x2#0, 
              x3#0, 
              x4#0, 
              x5#0, 
              x6#0, 
              x7#0, 
              x8#0), 
            Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R), 
      $h) } 
  $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R), 
      $h)
     <==> $IsAlloc(f#0, 
      Tclass._System.___hFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R), 
      $h));

function Tclass._System.___hTotalFunc9(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc9: TyTag;

// Tclass._System.___hTotalFunc9 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tag(Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
       == Tagclass._System.___hTotalFunc9
     && TagFamily(Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
       == tytagFamily$_#TotalFunc9);

function Tclass._System.___hTotalFunc9_0(Ty) : Ty;

// Tclass._System.___hTotalFunc9 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hTotalFunc9_0(Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc9_1(Ty) : Ty;

// Tclass._System.___hTotalFunc9 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hTotalFunc9_1(Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc9_2(Ty) : Ty;

// Tclass._System.___hTotalFunc9 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hTotalFunc9_2(Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc9_3(Ty) : Ty;

// Tclass._System.___hTotalFunc9 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hTotalFunc9_3(Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T3);

function Tclass._System.___hTotalFunc9_4(Ty) : Ty;

// Tclass._System.___hTotalFunc9 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hTotalFunc9_4(Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T4);

function Tclass._System.___hTotalFunc9_5(Ty) : Ty;

// Tclass._System.___hTotalFunc9 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hTotalFunc9_5(Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T5);

function Tclass._System.___hTotalFunc9_6(Ty) : Ty;

// Tclass._System.___hTotalFunc9 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hTotalFunc9_6(Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T6);

function Tclass._System.___hTotalFunc9_7(Ty) : Ty;

// Tclass._System.___hTotalFunc9 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hTotalFunc9_7(Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T7);

function Tclass._System.___hTotalFunc9_8(Ty) : Ty;

// Tclass._System.___hTotalFunc9 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hTotalFunc9_8(Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$T8);

function Tclass._System.___hTotalFunc9_9(Ty) : Ty;

// Tclass._System.___hTotalFunc9 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R) } 
  Tclass._System.___hTotalFunc9_9(Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R)));

// $Is axiom for subset type _System._#TotalFunc9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty, 
    f#0: HandleType :: 
  { $Is(f#0, 
      Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R)) } 
  $Is(f#0, 
      Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
     <==> $Is(f#0, 
        Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R))
       && (forall x0#0: Box, 
          x1#0: Box, 
          x2#0: Box, 
          x3#0: Box, 
          x4#0: Box, 
          x5#0: Box, 
          x6#0: Box, 
          x7#0: Box, 
          x8#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
             && $IsBox(x5#0, #$T5)
             && $IsBox(x6#0, #$T6)
             && $IsBox(x7#0, #$T7)
             && $IsBox(x8#0, #$T8)
           ==> Requires9(#$T0, 
            #$T1, 
            #$T2, 
            #$T3, 
            #$T4, 
            #$T5, 
            #$T6, 
            #$T7, 
            #$T8, 
            #$R, 
            $OneHeap, 
            f#0, 
            x0#0, 
            x1#0, 
            x2#0, 
            x3#0, 
            x4#0, 
            x5#0, 
            x6#0, 
            x7#0, 
            x8#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, 
      Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R), 
      $h) } 
  $IsAlloc(f#0, 
      Tclass._System.___hTotalFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R), 
      $h)
     <==> $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc9(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$R), 
      $h));

function Tclass._System.___hFunc10(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc10: TyTag;

// Tclass._System.___hFunc10 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tag(Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
       == Tagclass._System.___hFunc10
     && TagFamily(Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
       == tytagFamily$_#Func10);

function Tclass._System.___hFunc10_0(Ty) : Ty;

// Tclass._System.___hFunc10 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hFunc10_0(Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T0);

function Tclass._System.___hFunc10_1(Ty) : Ty;

// Tclass._System.___hFunc10 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hFunc10_1(Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T1);

function Tclass._System.___hFunc10_2(Ty) : Ty;

// Tclass._System.___hFunc10 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hFunc10_2(Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T2);

function Tclass._System.___hFunc10_3(Ty) : Ty;

// Tclass._System.___hFunc10 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hFunc10_3(Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T3);

function Tclass._System.___hFunc10_4(Ty) : Ty;

// Tclass._System.___hFunc10 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hFunc10_4(Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T4);

function Tclass._System.___hFunc10_5(Ty) : Ty;

// Tclass._System.___hFunc10 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hFunc10_5(Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T5);

function Tclass._System.___hFunc10_6(Ty) : Ty;

// Tclass._System.___hFunc10 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hFunc10_6(Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T6);

function Tclass._System.___hFunc10_7(Ty) : Ty;

// Tclass._System.___hFunc10 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hFunc10_7(Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T7);

function Tclass._System.___hFunc10_8(Ty) : Ty;

// Tclass._System.___hFunc10 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hFunc10_8(Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T8);

function Tclass._System.___hFunc10_9(Ty) : Ty;

// Tclass._System.___hFunc10 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hFunc10_9(Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T9);

function Tclass._System.___hFunc10_10(Ty) : Ty;

// Tclass._System.___hFunc10 injectivity 10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hFunc10_10(Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R)));

function Handle10([Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set)
   : HandleType;

function Apply10(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : Box;

function Requires10(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : bool;

function Reads10(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box :: 
  { Apply10(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      heap, 
      Handle10(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9) } 
  Apply10(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      heap, 
      Handle10(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9)
     == h[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8, bx9]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box :: 
  { Requires10(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      heap, 
      Handle10(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9) } 
  r[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8, bx9]
     ==> Requires10(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      heap, 
      Handle10(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx: Box :: 
  { Set#IsMember(Reads10(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        heap, 
        Handle10(h, r, rd), 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9), 
      bx) } 
  Set#IsMember(Reads10(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        heap, 
        Handle10(h, r, rd), 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9), 
      bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8, bx9], bx));

function {:inline} Requires10#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box)
   : bool
{
  true
}

function {:inline} Reads10#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box)
   : bool
{
  true
}

// frame axiom for Reads10
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box :: 
  { $HeapSucc(h0, h1), Reads10(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $Is(f, Tclass._System.___hFunc10(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads10(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads10(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9)
       == Reads10(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9));

// frame axiom for Reads10
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box :: 
  { $HeapSucc(h0, h1), Reads10(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $Is(f, Tclass._System.___hFunc10(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads10(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads10(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9)
       == Reads10(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9));

// frame axiom for Requires10
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box :: 
  { $HeapSucc(h0, h1), Requires10(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $Is(f, Tclass._System.___hFunc10(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads10(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires10(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9)
       == Requires10(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9));

// frame axiom for Requires10
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box :: 
  { $HeapSucc(h0, h1), Requires10(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $Is(f, Tclass._System.___hFunc10(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads10(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires10(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9)
       == Requires10(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9));

// frame axiom for Apply10
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box :: 
  { $HeapSucc(h0, h1), Apply10(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $Is(f, Tclass._System.___hFunc10(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads10(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply10(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9)
       == Apply10(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9));

// frame axiom for Apply10
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box :: 
  { $HeapSucc(h0, h1), Apply10(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $Is(f, Tclass._System.___hFunc10(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads10(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply10(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9)
       == Apply10(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9));

// empty-reads property for Reads10 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box :: 
  { Reads10(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      $OneHeap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9), $IsGoodHeap(heap) } 
    { Reads10(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      heap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $Is(f, Tclass._System.___hFunc10(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10))
     ==> (Set#Equal(Reads10(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          $OneHeap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9), 
        Set#Empty(): Set)
       <==> Set#Equal(Reads10(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          heap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9), 
        Set#Empty(): Set)));

// empty-reads property for Requires10
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box :: 
  { Requires10(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      $OneHeap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9), $IsGoodHeap(heap) } 
    { Requires10(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      heap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $Is(f, Tclass._System.___hFunc10(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10))
       && Set#Equal(Reads10(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          $OneHeap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9), 
        Set#Empty(): Set)
     ==> Requires10(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        $OneHeap, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9)
       == Requires10(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        heap, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty :: 
  { $Is(f, Tclass._System.___hFunc10(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10)) } 
  $Is(f, Tclass._System.___hFunc10(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10))
     <==> (forall h: Heap, 
        bx0: Box, 
        bx1: Box, 
        bx2: Box, 
        bx3: Box, 
        bx4: Box, 
        bx5: Box, 
        bx6: Box, 
        bx7: Box, 
        bx8: Box, 
        bx9: Box :: 
      { Apply10(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          h, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && $IsBox(bx3, t3)
           && $IsBox(bx4, t4)
           && $IsBox(bx5, t5)
           && $IsBox(bx6, t6)
           && $IsBox(bx7, t7)
           && $IsBox(bx8, t8)
           && $IsBox(bx9, t9)
           && Requires10(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9)
         ==> $IsBox(Apply10(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9), 
          t10)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    u0: Ty, 
    u1: Ty, 
    u2: Ty, 
    u3: Ty, 
    u4: Ty, 
    u5: Ty, 
    u6: Ty, 
    u7: Ty, 
    u8: Ty, 
    u9: Ty, 
    u10: Ty :: 
  { $Is(f, Tclass._System.___hFunc10(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10)), $Is(f, Tclass._System.___hFunc10(u0, u1, u2, u3, u4, u5, u6, u7, u8, u9, u10)) } 
  $Is(f, Tclass._System.___hFunc10(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u3) } { $IsBox(bx, t3) } 
        $IsBox(bx, u3) ==> $IsBox(bx, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, u4) } { $IsBox(bx, t4) } 
        $IsBox(bx, u4) ==> $IsBox(bx, t4))
       && (forall bx: Box :: 
        { $IsBox(bx, u5) } { $IsBox(bx, t5) } 
        $IsBox(bx, u5) ==> $IsBox(bx, t5))
       && (forall bx: Box :: 
        { $IsBox(bx, u6) } { $IsBox(bx, t6) } 
        $IsBox(bx, u6) ==> $IsBox(bx, t6))
       && (forall bx: Box :: 
        { $IsBox(bx, u7) } { $IsBox(bx, t7) } 
        $IsBox(bx, u7) ==> $IsBox(bx, t7))
       && (forall bx: Box :: 
        { $IsBox(bx, u8) } { $IsBox(bx, t8) } 
        $IsBox(bx, u8) ==> $IsBox(bx, t8))
       && (forall bx: Box :: 
        { $IsBox(bx, u9) } { $IsBox(bx, t9) } 
        $IsBox(bx, u9) ==> $IsBox(bx, t9))
       && (forall bx: Box :: 
        { $IsBox(bx, t10) } { $IsBox(bx, u10) } 
        $IsBox(bx, t10) ==> $IsBox(bx, u10))
     ==> $Is(f, Tclass._System.___hFunc10(u0, u1, u2, u3, u4, u5, u6, u7, u8, u9, u10)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc10(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10), h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, Tclass._System.___hFunc10(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10), h)
       <==> (forall bx0: Box, 
          bx1: Box, 
          bx2: Box, 
          bx3: Box, 
          bx4: Box, 
          bx5: Box, 
          bx6: Box, 
          bx7: Box, 
          bx8: Box, 
          bx9: Box :: 
        { Apply10(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9) } 
          { Reads10(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && 
            $IsBox(bx3, t3)
             && $IsAllocBox(bx3, t3, h)
             && 
            $IsBox(bx4, t4)
             && $IsAllocBox(bx4, t4, h)
             && 
            $IsBox(bx5, t5)
             && $IsAllocBox(bx5, t5, h)
             && 
            $IsBox(bx6, t6)
             && $IsAllocBox(bx6, t6, h)
             && 
            $IsBox(bx7, t7)
             && $IsAllocBox(bx7, t7, h)
             && 
            $IsBox(bx8, t8)
             && $IsAllocBox(bx8, t8, h)
             && 
            $IsBox(bx9, t9)
             && $IsAllocBox(bx9, t9, h)
             && Requires10(t0, 
              t1, 
              t2, 
              t3, 
              t4, 
              t5, 
              t6, 
              t7, 
              t8, 
              t9, 
              t10, 
              h, 
              f, 
              bx0, 
              bx1, 
              bx2, 
              bx3, 
              bx4, 
              bx5, 
              bx6, 
              bx7, 
              bx8, 
              bx9)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads10(t0, 
                  t1, 
                  t2, 
                  t3, 
                  t4, 
                  t5, 
                  t6, 
                  t7, 
                  t8, 
                  t9, 
                  t10, 
                  h, 
                  f, 
                  bx0, 
                  bx1, 
                  bx2, 
                  bx3, 
                  bx4, 
                  bx5, 
                  bx6, 
                  bx7, 
                  bx8, 
                  bx9), 
                $Box(r)) } 
            r != null
                 && Set#IsMember(Reads10(t0, 
                    t1, 
                    t2, 
                    t3, 
                    t4, 
                    t5, 
                    t6, 
                    t7, 
                    t8, 
                    t9, 
                    t10, 
                    h, 
                    f, 
                    bx0, 
                    bx1, 
                    bx2, 
                    bx3, 
                    bx4, 
                    bx5, 
                    bx6, 
                    bx7, 
                    bx8, 
                    bx9), 
                  $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    h: Heap :: 
  { $IsAlloc(f, Tclass._System.___hFunc10(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10), h) } 
  $IsGoodHeap(h)
       && $IsAlloc(f, Tclass._System.___hFunc10(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10), h)
     ==> (forall bx0: Box, 
        bx1: Box, 
        bx2: Box, 
        bx3: Box, 
        bx4: Box, 
        bx5: Box, 
        bx6: Box, 
        bx7: Box, 
        bx8: Box, 
        bx9: Box :: 
      { Apply10(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          h, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && $IsAllocBox(bx3, t3, h)
           && $IsAllocBox(bx4, t4, h)
           && $IsAllocBox(bx5, t5, h)
           && $IsAllocBox(bx6, t6, h)
           && $IsAllocBox(bx7, t7, h)
           && $IsAllocBox(bx8, t8, h)
           && $IsAllocBox(bx9, t9, h)
           && Requires10(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9)
         ==> $IsAllocBox(Apply10(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9), 
          t10, 
          h)));

function Tclass._System.___hPartialFunc10(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc10: TyTag;

// Tclass._System.___hPartialFunc10 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tag(Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
       == Tagclass._System.___hPartialFunc10
     && TagFamily(Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
       == tytagFamily$_#PartialFunc10);

function Tclass._System.___hPartialFunc10_0(Ty) : Ty;

// Tclass._System.___hPartialFunc10 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hPartialFunc10_0(Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc10_1(Ty) : Ty;

// Tclass._System.___hPartialFunc10 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hPartialFunc10_1(Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc10_2(Ty) : Ty;

// Tclass._System.___hPartialFunc10 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hPartialFunc10_2(Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc10_3(Ty) : Ty;

// Tclass._System.___hPartialFunc10 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hPartialFunc10_3(Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T3);

function Tclass._System.___hPartialFunc10_4(Ty) : Ty;

// Tclass._System.___hPartialFunc10 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hPartialFunc10_4(Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T4);

function Tclass._System.___hPartialFunc10_5(Ty) : Ty;

// Tclass._System.___hPartialFunc10 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hPartialFunc10_5(Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T5);

function Tclass._System.___hPartialFunc10_6(Ty) : Ty;

// Tclass._System.___hPartialFunc10 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hPartialFunc10_6(Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T6);

function Tclass._System.___hPartialFunc10_7(Ty) : Ty;

// Tclass._System.___hPartialFunc10 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hPartialFunc10_7(Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T7);

function Tclass._System.___hPartialFunc10_8(Ty) : Ty;

// Tclass._System.___hPartialFunc10 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hPartialFunc10_8(Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T8);

function Tclass._System.___hPartialFunc10_9(Ty) : Ty;

// Tclass._System.___hPartialFunc10 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hPartialFunc10_9(Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T9);

function Tclass._System.___hPartialFunc10_10(Ty) : Ty;

// Tclass._System.___hPartialFunc10 injectivity 10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hPartialFunc10_10(Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R)));

// $Is axiom for subset type _System._#PartialFunc10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty, 
    f#0: HandleType :: 
  { $Is(f#0, 
      Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R)) } 
  $Is(f#0, 
      Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     <==> $Is(f#0, 
        Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
       && (forall x0#0: Box, 
          x1#0: Box, 
          x2#0: Box, 
          x3#0: Box, 
          x4#0: Box, 
          x5#0: Box, 
          x6#0: Box, 
          x7#0: Box, 
          x8#0: Box, 
          x9#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
             && $IsBox(x5#0, #$T5)
             && $IsBox(x6#0, #$T6)
             && $IsBox(x7#0, #$T7)
             && $IsBox(x8#0, #$T8)
             && $IsBox(x9#0, #$T9)
           ==> Set#Equal(Reads10(#$T0, 
              #$T1, 
              #$T2, 
              #$T3, 
              #$T4, 
              #$T5, 
              #$T6, 
              #$T7, 
              #$T8, 
              #$T9, 
              #$R, 
              $OneHeap, 
              f#0, 
              x0#0, 
              x1#0, 
              x2#0, 
              x3#0, 
              x4#0, 
              x5#0, 
              x6#0, 
              x7#0, 
              x8#0, 
              x9#0), 
            Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R), 
      $h) } 
  $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R), 
      $h)
     <==> $IsAlloc(f#0, 
      Tclass._System.___hFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R), 
      $h));

function Tclass._System.___hTotalFunc10(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc10: TyTag;

// Tclass._System.___hTotalFunc10 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tag(Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
       == Tagclass._System.___hTotalFunc10
     && TagFamily(Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
       == tytagFamily$_#TotalFunc10);

function Tclass._System.___hTotalFunc10_0(Ty) : Ty;

// Tclass._System.___hTotalFunc10 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hTotalFunc10_0(Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc10_1(Ty) : Ty;

// Tclass._System.___hTotalFunc10 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hTotalFunc10_1(Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc10_2(Ty) : Ty;

// Tclass._System.___hTotalFunc10 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hTotalFunc10_2(Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc10_3(Ty) : Ty;

// Tclass._System.___hTotalFunc10 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hTotalFunc10_3(Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T3);

function Tclass._System.___hTotalFunc10_4(Ty) : Ty;

// Tclass._System.___hTotalFunc10 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hTotalFunc10_4(Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T4);

function Tclass._System.___hTotalFunc10_5(Ty) : Ty;

// Tclass._System.___hTotalFunc10 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hTotalFunc10_5(Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T5);

function Tclass._System.___hTotalFunc10_6(Ty) : Ty;

// Tclass._System.___hTotalFunc10 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hTotalFunc10_6(Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T6);

function Tclass._System.___hTotalFunc10_7(Ty) : Ty;

// Tclass._System.___hTotalFunc10 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hTotalFunc10_7(Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T7);

function Tclass._System.___hTotalFunc10_8(Ty) : Ty;

// Tclass._System.___hTotalFunc10 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hTotalFunc10_8(Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T8);

function Tclass._System.___hTotalFunc10_9(Ty) : Ty;

// Tclass._System.___hTotalFunc10 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hTotalFunc10_9(Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$T9);

function Tclass._System.___hTotalFunc10_10(Ty) : Ty;

// Tclass._System.___hTotalFunc10 injectivity 10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R) } 
  Tclass._System.___hTotalFunc10_10(Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R)));

// $Is axiom for subset type _System._#TotalFunc10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty, 
    f#0: HandleType :: 
  { $Is(f#0, 
      Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R)) } 
  $Is(f#0, 
      Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
     <==> $Is(f#0, 
        Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R))
       && (forall x0#0: Box, 
          x1#0: Box, 
          x2#0: Box, 
          x3#0: Box, 
          x4#0: Box, 
          x5#0: Box, 
          x6#0: Box, 
          x7#0: Box, 
          x8#0: Box, 
          x9#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
             && $IsBox(x5#0, #$T5)
             && $IsBox(x6#0, #$T6)
             && $IsBox(x7#0, #$T7)
             && $IsBox(x8#0, #$T8)
             && $IsBox(x9#0, #$T9)
           ==> Requires10(#$T0, 
            #$T1, 
            #$T2, 
            #$T3, 
            #$T4, 
            #$T5, 
            #$T6, 
            #$T7, 
            #$T8, 
            #$T9, 
            #$R, 
            $OneHeap, 
            f#0, 
            x0#0, 
            x1#0, 
            x2#0, 
            x3#0, 
            x4#0, 
            x5#0, 
            x6#0, 
            x7#0, 
            x8#0, 
            x9#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, 
      Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R), 
      $h) } 
  $IsAlloc(f#0, 
      Tclass._System.___hTotalFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R), 
      $h)
     <==> $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc10(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$R), 
      $h));

function Tclass._System.___hFunc11(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc11: TyTag;

// Tclass._System.___hFunc11 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tag(Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
       == Tagclass._System.___hFunc11
     && TagFamily(Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
       == tytagFamily$_#Func11);

function Tclass._System.___hFunc11_0(Ty) : Ty;

// Tclass._System.___hFunc11 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hFunc11_0(Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T0);

function Tclass._System.___hFunc11_1(Ty) : Ty;

// Tclass._System.___hFunc11 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hFunc11_1(Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T1);

function Tclass._System.___hFunc11_2(Ty) : Ty;

// Tclass._System.___hFunc11 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hFunc11_2(Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T2);

function Tclass._System.___hFunc11_3(Ty) : Ty;

// Tclass._System.___hFunc11 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hFunc11_3(Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T3);

function Tclass._System.___hFunc11_4(Ty) : Ty;

// Tclass._System.___hFunc11 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hFunc11_4(Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T4);

function Tclass._System.___hFunc11_5(Ty) : Ty;

// Tclass._System.___hFunc11 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hFunc11_5(Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T5);

function Tclass._System.___hFunc11_6(Ty) : Ty;

// Tclass._System.___hFunc11 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hFunc11_6(Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T6);

function Tclass._System.___hFunc11_7(Ty) : Ty;

// Tclass._System.___hFunc11 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hFunc11_7(Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T7);

function Tclass._System.___hFunc11_8(Ty) : Ty;

// Tclass._System.___hFunc11 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hFunc11_8(Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T8);

function Tclass._System.___hFunc11_9(Ty) : Ty;

// Tclass._System.___hFunc11 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hFunc11_9(Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T9);

function Tclass._System.___hFunc11_10(Ty) : Ty;

// Tclass._System.___hFunc11 injectivity 10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hFunc11_10(Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T10);

function Tclass._System.___hFunc11_11(Ty) : Ty;

// Tclass._System.___hFunc11 injectivity 11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hFunc11_11(Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R)));

function Handle11([Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set)
   : HandleType;

function Apply11(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : Box;

function Requires11(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : bool;

function Reads11(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box :: 
  { Apply11(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      heap, 
      Handle11(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10) } 
  Apply11(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      heap, 
      Handle11(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10)
     == h[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8, bx9, bx10]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box :: 
  { Requires11(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      heap, 
      Handle11(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10) } 
  r[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8, bx9, bx10]
     ==> Requires11(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      heap, 
      Handle11(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx: Box :: 
  { Set#IsMember(Reads11(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        heap, 
        Handle11(h, r, rd), 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10), 
      bx) } 
  Set#IsMember(Reads11(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        heap, 
        Handle11(h, r, rd), 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10), 
      bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8, bx9, bx10], bx));

function {:inline} Requires11#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box)
   : bool
{
  true
}

function {:inline} Reads11#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box)
   : bool
{
  true
}

// frame axiom for Reads11
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box :: 
  { $HeapSucc(h0, h1), Reads11(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $Is(f, Tclass._System.___hFunc11(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads11(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads11(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10)
       == Reads11(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10));

// frame axiom for Reads11
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box :: 
  { $HeapSucc(h0, h1), Reads11(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $Is(f, Tclass._System.___hFunc11(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads11(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads11(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10)
       == Reads11(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10));

// frame axiom for Requires11
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box :: 
  { $HeapSucc(h0, h1), Requires11(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $Is(f, Tclass._System.___hFunc11(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads11(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires11(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10)
       == Requires11(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10));

// frame axiom for Requires11
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box :: 
  { $HeapSucc(h0, h1), Requires11(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $Is(f, Tclass._System.___hFunc11(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads11(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires11(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10)
       == Requires11(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10));

// frame axiom for Apply11
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box :: 
  { $HeapSucc(h0, h1), Apply11(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $Is(f, Tclass._System.___hFunc11(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads11(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply11(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10)
       == Apply11(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10));

// frame axiom for Apply11
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box :: 
  { $HeapSucc(h0, h1), Apply11(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $Is(f, Tclass._System.___hFunc11(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads11(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply11(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10)
       == Apply11(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10));

// empty-reads property for Reads11 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box :: 
  { Reads11(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      $OneHeap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10), $IsGoodHeap(heap) } 
    { Reads11(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      heap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $Is(f, Tclass._System.___hFunc11(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11))
     ==> (Set#Equal(Reads11(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          $OneHeap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10), 
        Set#Empty(): Set)
       <==> Set#Equal(Reads11(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          heap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10), 
        Set#Empty(): Set)));

// empty-reads property for Requires11
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box :: 
  { Requires11(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      $OneHeap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10), $IsGoodHeap(heap) } 
    { Requires11(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      heap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $Is(f, Tclass._System.___hFunc11(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11))
       && Set#Equal(Reads11(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          $OneHeap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10), 
        Set#Empty(): Set)
     ==> Requires11(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        $OneHeap, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10)
       == Requires11(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        heap, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty :: 
  { $Is(f, Tclass._System.___hFunc11(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11)) } 
  $Is(f, Tclass._System.___hFunc11(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11))
     <==> (forall h: Heap, 
        bx0: Box, 
        bx1: Box, 
        bx2: Box, 
        bx3: Box, 
        bx4: Box, 
        bx5: Box, 
        bx6: Box, 
        bx7: Box, 
        bx8: Box, 
        bx9: Box, 
        bx10: Box :: 
      { Apply11(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          h, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && $IsBox(bx3, t3)
           && $IsBox(bx4, t4)
           && $IsBox(bx5, t5)
           && $IsBox(bx6, t6)
           && $IsBox(bx7, t7)
           && $IsBox(bx8, t8)
           && $IsBox(bx9, t9)
           && $IsBox(bx10, t10)
           && Requires11(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10)
         ==> $IsBox(Apply11(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10), 
          t11)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    u0: Ty, 
    u1: Ty, 
    u2: Ty, 
    u3: Ty, 
    u4: Ty, 
    u5: Ty, 
    u6: Ty, 
    u7: Ty, 
    u8: Ty, 
    u9: Ty, 
    u10: Ty, 
    u11: Ty :: 
  { $Is(f, Tclass._System.___hFunc11(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11)), $Is(f, Tclass._System.___hFunc11(u0, u1, u2, u3, u4, u5, u6, u7, u8, u9, u10, u11)) } 
  $Is(f, Tclass._System.___hFunc11(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u3) } { $IsBox(bx, t3) } 
        $IsBox(bx, u3) ==> $IsBox(bx, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, u4) } { $IsBox(bx, t4) } 
        $IsBox(bx, u4) ==> $IsBox(bx, t4))
       && (forall bx: Box :: 
        { $IsBox(bx, u5) } { $IsBox(bx, t5) } 
        $IsBox(bx, u5) ==> $IsBox(bx, t5))
       && (forall bx: Box :: 
        { $IsBox(bx, u6) } { $IsBox(bx, t6) } 
        $IsBox(bx, u6) ==> $IsBox(bx, t6))
       && (forall bx: Box :: 
        { $IsBox(bx, u7) } { $IsBox(bx, t7) } 
        $IsBox(bx, u7) ==> $IsBox(bx, t7))
       && (forall bx: Box :: 
        { $IsBox(bx, u8) } { $IsBox(bx, t8) } 
        $IsBox(bx, u8) ==> $IsBox(bx, t8))
       && (forall bx: Box :: 
        { $IsBox(bx, u9) } { $IsBox(bx, t9) } 
        $IsBox(bx, u9) ==> $IsBox(bx, t9))
       && (forall bx: Box :: 
        { $IsBox(bx, u10) } { $IsBox(bx, t10) } 
        $IsBox(bx, u10) ==> $IsBox(bx, t10))
       && (forall bx: Box :: 
        { $IsBox(bx, t11) } { $IsBox(bx, u11) } 
        $IsBox(bx, t11) ==> $IsBox(bx, u11))
     ==> $Is(f, Tclass._System.___hFunc11(u0, u1, u2, u3, u4, u5, u6, u7, u8, u9, u10, u11)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    h: Heap :: 
  { $IsAlloc(f, 
      Tclass._System.___hFunc11(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11), 
      h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, 
        Tclass._System.___hFunc11(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11), 
        h)
       <==> (forall bx0: Box, 
          bx1: Box, 
          bx2: Box, 
          bx3: Box, 
          bx4: Box, 
          bx5: Box, 
          bx6: Box, 
          bx7: Box, 
          bx8: Box, 
          bx9: Box, 
          bx10: Box :: 
        { Apply11(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10) } 
          { Reads11(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && 
            $IsBox(bx3, t3)
             && $IsAllocBox(bx3, t3, h)
             && 
            $IsBox(bx4, t4)
             && $IsAllocBox(bx4, t4, h)
             && 
            $IsBox(bx5, t5)
             && $IsAllocBox(bx5, t5, h)
             && 
            $IsBox(bx6, t6)
             && $IsAllocBox(bx6, t6, h)
             && 
            $IsBox(bx7, t7)
             && $IsAllocBox(bx7, t7, h)
             && 
            $IsBox(bx8, t8)
             && $IsAllocBox(bx8, t8, h)
             && 
            $IsBox(bx9, t9)
             && $IsAllocBox(bx9, t9, h)
             && 
            $IsBox(bx10, t10)
             && $IsAllocBox(bx10, t10, h)
             && Requires11(t0, 
              t1, 
              t2, 
              t3, 
              t4, 
              t5, 
              t6, 
              t7, 
              t8, 
              t9, 
              t10, 
              t11, 
              h, 
              f, 
              bx0, 
              bx1, 
              bx2, 
              bx3, 
              bx4, 
              bx5, 
              bx6, 
              bx7, 
              bx8, 
              bx9, 
              bx10)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads11(t0, 
                  t1, 
                  t2, 
                  t3, 
                  t4, 
                  t5, 
                  t6, 
                  t7, 
                  t8, 
                  t9, 
                  t10, 
                  t11, 
                  h, 
                  f, 
                  bx0, 
                  bx1, 
                  bx2, 
                  bx3, 
                  bx4, 
                  bx5, 
                  bx6, 
                  bx7, 
                  bx8, 
                  bx9, 
                  bx10), 
                $Box(r)) } 
            r != null
                 && Set#IsMember(Reads11(t0, 
                    t1, 
                    t2, 
                    t3, 
                    t4, 
                    t5, 
                    t6, 
                    t7, 
                    t8, 
                    t9, 
                    t10, 
                    t11, 
                    h, 
                    f, 
                    bx0, 
                    bx1, 
                    bx2, 
                    bx3, 
                    bx4, 
                    bx5, 
                    bx6, 
                    bx7, 
                    bx8, 
                    bx9, 
                    bx10), 
                  $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    h: Heap :: 
  { $IsAlloc(f, 
      Tclass._System.___hFunc11(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11), 
      h) } 
  $IsGoodHeap(h)
       && $IsAlloc(f, 
        Tclass._System.___hFunc11(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11), 
        h)
     ==> (forall bx0: Box, 
        bx1: Box, 
        bx2: Box, 
        bx3: Box, 
        bx4: Box, 
        bx5: Box, 
        bx6: Box, 
        bx7: Box, 
        bx8: Box, 
        bx9: Box, 
        bx10: Box :: 
      { Apply11(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          h, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && $IsAllocBox(bx3, t3, h)
           && $IsAllocBox(bx4, t4, h)
           && $IsAllocBox(bx5, t5, h)
           && $IsAllocBox(bx6, t6, h)
           && $IsAllocBox(bx7, t7, h)
           && $IsAllocBox(bx8, t8, h)
           && $IsAllocBox(bx9, t9, h)
           && $IsAllocBox(bx10, t10, h)
           && Requires11(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10)
         ==> $IsAllocBox(Apply11(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10), 
          t11, 
          h)));

function Tclass._System.___hPartialFunc11(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc11: TyTag;

// Tclass._System.___hPartialFunc11 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tag(Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
       == Tagclass._System.___hPartialFunc11
     && TagFamily(Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
       == tytagFamily$_#PartialFunc11);

function Tclass._System.___hPartialFunc11_0(Ty) : Ty;

// Tclass._System.___hPartialFunc11 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hPartialFunc11_0(Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc11_1(Ty) : Ty;

// Tclass._System.___hPartialFunc11 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hPartialFunc11_1(Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc11_2(Ty) : Ty;

// Tclass._System.___hPartialFunc11 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hPartialFunc11_2(Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc11_3(Ty) : Ty;

// Tclass._System.___hPartialFunc11 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hPartialFunc11_3(Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T3);

function Tclass._System.___hPartialFunc11_4(Ty) : Ty;

// Tclass._System.___hPartialFunc11 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hPartialFunc11_4(Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T4);

function Tclass._System.___hPartialFunc11_5(Ty) : Ty;

// Tclass._System.___hPartialFunc11 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hPartialFunc11_5(Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T5);

function Tclass._System.___hPartialFunc11_6(Ty) : Ty;

// Tclass._System.___hPartialFunc11 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hPartialFunc11_6(Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T6);

function Tclass._System.___hPartialFunc11_7(Ty) : Ty;

// Tclass._System.___hPartialFunc11 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hPartialFunc11_7(Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T7);

function Tclass._System.___hPartialFunc11_8(Ty) : Ty;

// Tclass._System.___hPartialFunc11 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hPartialFunc11_8(Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T8);

function Tclass._System.___hPartialFunc11_9(Ty) : Ty;

// Tclass._System.___hPartialFunc11 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hPartialFunc11_9(Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T9);

function Tclass._System.___hPartialFunc11_10(Ty) : Ty;

// Tclass._System.___hPartialFunc11 injectivity 10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hPartialFunc11_10(Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T10);

function Tclass._System.___hPartialFunc11_11(Ty) : Ty;

// Tclass._System.___hPartialFunc11 injectivity 11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hPartialFunc11_11(Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R)));

// $Is axiom for subset type _System._#PartialFunc11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty, 
    f#0: HandleType :: 
  { $Is(f#0, 
      Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R)) } 
  $Is(f#0, 
      Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     <==> $Is(f#0, 
        Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
       && (forall x0#0: Box, 
          x1#0: Box, 
          x2#0: Box, 
          x3#0: Box, 
          x4#0: Box, 
          x5#0: Box, 
          x6#0: Box, 
          x7#0: Box, 
          x8#0: Box, 
          x9#0: Box, 
          x10#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
             && $IsBox(x5#0, #$T5)
             && $IsBox(x6#0, #$T6)
             && $IsBox(x7#0, #$T7)
             && $IsBox(x8#0, #$T8)
             && $IsBox(x9#0, #$T9)
             && $IsBox(x10#0, #$T10)
           ==> Set#Equal(Reads11(#$T0, 
              #$T1, 
              #$T2, 
              #$T3, 
              #$T4, 
              #$T5, 
              #$T6, 
              #$T7, 
              #$T8, 
              #$T9, 
              #$T10, 
              #$R, 
              $OneHeap, 
              f#0, 
              x0#0, 
              x1#0, 
              x2#0, 
              x3#0, 
              x4#0, 
              x5#0, 
              x6#0, 
              x7#0, 
              x8#0, 
              x9#0, 
              x10#0), 
            Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R), 
      $h) } 
  $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R), 
      $h)
     <==> $IsAlloc(f#0, 
      Tclass._System.___hFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R), 
      $h));

function Tclass._System.___hTotalFunc11(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc11: TyTag;

// Tclass._System.___hTotalFunc11 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tag(Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
       == Tagclass._System.___hTotalFunc11
     && TagFamily(Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
       == tytagFamily$_#TotalFunc11);

function Tclass._System.___hTotalFunc11_0(Ty) : Ty;

// Tclass._System.___hTotalFunc11 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hTotalFunc11_0(Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc11_1(Ty) : Ty;

// Tclass._System.___hTotalFunc11 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hTotalFunc11_1(Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc11_2(Ty) : Ty;

// Tclass._System.___hTotalFunc11 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hTotalFunc11_2(Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc11_3(Ty) : Ty;

// Tclass._System.___hTotalFunc11 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hTotalFunc11_3(Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T3);

function Tclass._System.___hTotalFunc11_4(Ty) : Ty;

// Tclass._System.___hTotalFunc11 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hTotalFunc11_4(Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T4);

function Tclass._System.___hTotalFunc11_5(Ty) : Ty;

// Tclass._System.___hTotalFunc11 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hTotalFunc11_5(Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T5);

function Tclass._System.___hTotalFunc11_6(Ty) : Ty;

// Tclass._System.___hTotalFunc11 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hTotalFunc11_6(Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T6);

function Tclass._System.___hTotalFunc11_7(Ty) : Ty;

// Tclass._System.___hTotalFunc11 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hTotalFunc11_7(Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T7);

function Tclass._System.___hTotalFunc11_8(Ty) : Ty;

// Tclass._System.___hTotalFunc11 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hTotalFunc11_8(Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T8);

function Tclass._System.___hTotalFunc11_9(Ty) : Ty;

// Tclass._System.___hTotalFunc11 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hTotalFunc11_9(Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T9);

function Tclass._System.___hTotalFunc11_10(Ty) : Ty;

// Tclass._System.___hTotalFunc11 injectivity 10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hTotalFunc11_10(Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$T10);

function Tclass._System.___hTotalFunc11_11(Ty) : Ty;

// Tclass._System.___hTotalFunc11 injectivity 11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R) } 
  Tclass._System.___hTotalFunc11_11(Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R)));

// $Is axiom for subset type _System._#TotalFunc11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty, 
    f#0: HandleType :: 
  { $Is(f#0, 
      Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R)) } 
  $Is(f#0, 
      Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
     <==> $Is(f#0, 
        Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R))
       && (forall x0#0: Box, 
          x1#0: Box, 
          x2#0: Box, 
          x3#0: Box, 
          x4#0: Box, 
          x5#0: Box, 
          x6#0: Box, 
          x7#0: Box, 
          x8#0: Box, 
          x9#0: Box, 
          x10#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
             && $IsBox(x5#0, #$T5)
             && $IsBox(x6#0, #$T6)
             && $IsBox(x7#0, #$T7)
             && $IsBox(x8#0, #$T8)
             && $IsBox(x9#0, #$T9)
             && $IsBox(x10#0, #$T10)
           ==> Requires11(#$T0, 
            #$T1, 
            #$T2, 
            #$T3, 
            #$T4, 
            #$T5, 
            #$T6, 
            #$T7, 
            #$T8, 
            #$T9, 
            #$T10, 
            #$R, 
            $OneHeap, 
            f#0, 
            x0#0, 
            x1#0, 
            x2#0, 
            x3#0, 
            x4#0, 
            x5#0, 
            x6#0, 
            x7#0, 
            x8#0, 
            x9#0, 
            x10#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, 
      Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R), 
      $h) } 
  $IsAlloc(f#0, 
      Tclass._System.___hTotalFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R), 
      $h)
     <==> $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc11(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$R), 
      $h));

function Tclass._System.___hFunc12(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc12: TyTag;

// Tclass._System.___hFunc12 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tag(Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
       == Tagclass._System.___hFunc12
     && TagFamily(Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
       == tytagFamily$_#Func12);

function Tclass._System.___hFunc12_0(Ty) : Ty;

// Tclass._System.___hFunc12 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hFunc12_0(Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T0);

function Tclass._System.___hFunc12_1(Ty) : Ty;

// Tclass._System.___hFunc12 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hFunc12_1(Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T1);

function Tclass._System.___hFunc12_2(Ty) : Ty;

// Tclass._System.___hFunc12 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hFunc12_2(Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T2);

function Tclass._System.___hFunc12_3(Ty) : Ty;

// Tclass._System.___hFunc12 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hFunc12_3(Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T3);

function Tclass._System.___hFunc12_4(Ty) : Ty;

// Tclass._System.___hFunc12 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hFunc12_4(Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T4);

function Tclass._System.___hFunc12_5(Ty) : Ty;

// Tclass._System.___hFunc12 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hFunc12_5(Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T5);

function Tclass._System.___hFunc12_6(Ty) : Ty;

// Tclass._System.___hFunc12 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hFunc12_6(Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T6);

function Tclass._System.___hFunc12_7(Ty) : Ty;

// Tclass._System.___hFunc12 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hFunc12_7(Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T7);

function Tclass._System.___hFunc12_8(Ty) : Ty;

// Tclass._System.___hFunc12 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hFunc12_8(Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T8);

function Tclass._System.___hFunc12_9(Ty) : Ty;

// Tclass._System.___hFunc12 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hFunc12_9(Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T9);

function Tclass._System.___hFunc12_10(Ty) : Ty;

// Tclass._System.___hFunc12 injectivity 10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hFunc12_10(Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T10);

function Tclass._System.___hFunc12_11(Ty) : Ty;

// Tclass._System.___hFunc12 injectivity 11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hFunc12_11(Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T11);

function Tclass._System.___hFunc12_12(Ty) : Ty;

// Tclass._System.___hFunc12 injectivity 12
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hFunc12_12(Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc12
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R)));

function Handle12([Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set)
   : HandleType;

function Apply12(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : Box;

function Requires12(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : bool;

function Reads12(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box :: 
  { Apply12(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      heap, 
      Handle12(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11) } 
  Apply12(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      heap, 
      Handle12(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11)
     == h[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8, bx9, bx10, bx11]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box :: 
  { Requires12(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      heap, 
      Handle12(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11) } 
  r[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8, bx9, bx10, bx11]
     ==> Requires12(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      heap, 
      Handle12(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx: Box :: 
  { Set#IsMember(Reads12(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        heap, 
        Handle12(h, r, rd), 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11), 
      bx) } 
  Set#IsMember(Reads12(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        heap, 
        Handle12(h, r, rd), 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11), 
      bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8, bx9, bx10, bx11], bx));

function {:inline} Requires12#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box)
   : bool
{
  true
}

function {:inline} Reads12#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box)
   : bool
{
  true
}

// frame axiom for Reads12
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box :: 
  { $HeapSucc(h0, h1), Reads12(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $Is(f, 
        Tclass._System.___hFunc12(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads12(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads12(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11)
       == Reads12(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11));

// frame axiom for Reads12
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box :: 
  { $HeapSucc(h0, h1), Reads12(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $Is(f, 
        Tclass._System.___hFunc12(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads12(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads12(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11)
       == Reads12(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11));

// frame axiom for Requires12
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box :: 
  { $HeapSucc(h0, h1), Requires12(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $Is(f, 
        Tclass._System.___hFunc12(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads12(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires12(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11)
       == Requires12(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11));

// frame axiom for Requires12
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box :: 
  { $HeapSucc(h0, h1), Requires12(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $Is(f, 
        Tclass._System.___hFunc12(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads12(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires12(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11)
       == Requires12(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11));

// frame axiom for Apply12
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box :: 
  { $HeapSucc(h0, h1), Apply12(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $Is(f, 
        Tclass._System.___hFunc12(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads12(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply12(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11)
       == Apply12(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11));

// frame axiom for Apply12
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box :: 
  { $HeapSucc(h0, h1), Apply12(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $Is(f, 
        Tclass._System.___hFunc12(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads12(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply12(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11)
       == Apply12(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11));

// empty-reads property for Reads12 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box :: 
  { Reads12(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      $OneHeap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11), $IsGoodHeap(heap) } 
    { Reads12(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      heap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $Is(f, 
        Tclass._System.___hFunc12(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12))
     ==> (Set#Equal(Reads12(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          $OneHeap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11), 
        Set#Empty(): Set)
       <==> Set#Equal(Reads12(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          heap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11), 
        Set#Empty(): Set)));

// empty-reads property for Requires12
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box :: 
  { Requires12(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      $OneHeap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11), $IsGoodHeap(heap) } 
    { Requires12(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      heap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $Is(f, 
        Tclass._System.___hFunc12(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12))
       && Set#Equal(Reads12(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          $OneHeap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11), 
        Set#Empty(): Set)
     ==> Requires12(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        $OneHeap, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11)
       == Requires12(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        heap, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty :: 
  { $Is(f, 
      Tclass._System.___hFunc12(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12)) } 
  $Is(f, 
      Tclass._System.___hFunc12(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12))
     <==> (forall h: Heap, 
        bx0: Box, 
        bx1: Box, 
        bx2: Box, 
        bx3: Box, 
        bx4: Box, 
        bx5: Box, 
        bx6: Box, 
        bx7: Box, 
        bx8: Box, 
        bx9: Box, 
        bx10: Box, 
        bx11: Box :: 
      { Apply12(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          h, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && $IsBox(bx3, t3)
           && $IsBox(bx4, t4)
           && $IsBox(bx5, t5)
           && $IsBox(bx6, t6)
           && $IsBox(bx7, t7)
           && $IsBox(bx8, t8)
           && $IsBox(bx9, t9)
           && $IsBox(bx10, t10)
           && $IsBox(bx11, t11)
           && Requires12(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11)
         ==> $IsBox(Apply12(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11), 
          t12)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    u0: Ty, 
    u1: Ty, 
    u2: Ty, 
    u3: Ty, 
    u4: Ty, 
    u5: Ty, 
    u6: Ty, 
    u7: Ty, 
    u8: Ty, 
    u9: Ty, 
    u10: Ty, 
    u11: Ty, 
    u12: Ty :: 
  { $Is(f, 
      Tclass._System.___hFunc12(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12)), $Is(f, 
      Tclass._System.___hFunc12(u0, u1, u2, u3, u4, u5, u6, u7, u8, u9, u10, u11, u12)) } 
  $Is(f, 
        Tclass._System.___hFunc12(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u3) } { $IsBox(bx, t3) } 
        $IsBox(bx, u3) ==> $IsBox(bx, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, u4) } { $IsBox(bx, t4) } 
        $IsBox(bx, u4) ==> $IsBox(bx, t4))
       && (forall bx: Box :: 
        { $IsBox(bx, u5) } { $IsBox(bx, t5) } 
        $IsBox(bx, u5) ==> $IsBox(bx, t5))
       && (forall bx: Box :: 
        { $IsBox(bx, u6) } { $IsBox(bx, t6) } 
        $IsBox(bx, u6) ==> $IsBox(bx, t6))
       && (forall bx: Box :: 
        { $IsBox(bx, u7) } { $IsBox(bx, t7) } 
        $IsBox(bx, u7) ==> $IsBox(bx, t7))
       && (forall bx: Box :: 
        { $IsBox(bx, u8) } { $IsBox(bx, t8) } 
        $IsBox(bx, u8) ==> $IsBox(bx, t8))
       && (forall bx: Box :: 
        { $IsBox(bx, u9) } { $IsBox(bx, t9) } 
        $IsBox(bx, u9) ==> $IsBox(bx, t9))
       && (forall bx: Box :: 
        { $IsBox(bx, u10) } { $IsBox(bx, t10) } 
        $IsBox(bx, u10) ==> $IsBox(bx, t10))
       && (forall bx: Box :: 
        { $IsBox(bx, u11) } { $IsBox(bx, t11) } 
        $IsBox(bx, u11) ==> $IsBox(bx, t11))
       && (forall bx: Box :: 
        { $IsBox(bx, t12) } { $IsBox(bx, u12) } 
        $IsBox(bx, t12) ==> $IsBox(bx, u12))
     ==> $Is(f, 
      Tclass._System.___hFunc12(u0, u1, u2, u3, u4, u5, u6, u7, u8, u9, u10, u11, u12)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    h: Heap :: 
  { $IsAlloc(f, 
      Tclass._System.___hFunc12(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12), 
      h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, 
        Tclass._System.___hFunc12(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12), 
        h)
       <==> (forall bx0: Box, 
          bx1: Box, 
          bx2: Box, 
          bx3: Box, 
          bx4: Box, 
          bx5: Box, 
          bx6: Box, 
          bx7: Box, 
          bx8: Box, 
          bx9: Box, 
          bx10: Box, 
          bx11: Box :: 
        { Apply12(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11) } 
          { Reads12(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && 
            $IsBox(bx3, t3)
             && $IsAllocBox(bx3, t3, h)
             && 
            $IsBox(bx4, t4)
             && $IsAllocBox(bx4, t4, h)
             && 
            $IsBox(bx5, t5)
             && $IsAllocBox(bx5, t5, h)
             && 
            $IsBox(bx6, t6)
             && $IsAllocBox(bx6, t6, h)
             && 
            $IsBox(bx7, t7)
             && $IsAllocBox(bx7, t7, h)
             && 
            $IsBox(bx8, t8)
             && $IsAllocBox(bx8, t8, h)
             && 
            $IsBox(bx9, t9)
             && $IsAllocBox(bx9, t9, h)
             && 
            $IsBox(bx10, t10)
             && $IsAllocBox(bx10, t10, h)
             && 
            $IsBox(bx11, t11)
             && $IsAllocBox(bx11, t11, h)
             && Requires12(t0, 
              t1, 
              t2, 
              t3, 
              t4, 
              t5, 
              t6, 
              t7, 
              t8, 
              t9, 
              t10, 
              t11, 
              t12, 
              h, 
              f, 
              bx0, 
              bx1, 
              bx2, 
              bx3, 
              bx4, 
              bx5, 
              bx6, 
              bx7, 
              bx8, 
              bx9, 
              bx10, 
              bx11)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads12(t0, 
                  t1, 
                  t2, 
                  t3, 
                  t4, 
                  t5, 
                  t6, 
                  t7, 
                  t8, 
                  t9, 
                  t10, 
                  t11, 
                  t12, 
                  h, 
                  f, 
                  bx0, 
                  bx1, 
                  bx2, 
                  bx3, 
                  bx4, 
                  bx5, 
                  bx6, 
                  bx7, 
                  bx8, 
                  bx9, 
                  bx10, 
                  bx11), 
                $Box(r)) } 
            r != null
                 && Set#IsMember(Reads12(t0, 
                    t1, 
                    t2, 
                    t3, 
                    t4, 
                    t5, 
                    t6, 
                    t7, 
                    t8, 
                    t9, 
                    t10, 
                    t11, 
                    t12, 
                    h, 
                    f, 
                    bx0, 
                    bx1, 
                    bx2, 
                    bx3, 
                    bx4, 
                    bx5, 
                    bx6, 
                    bx7, 
                    bx8, 
                    bx9, 
                    bx10, 
                    bx11), 
                  $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    h: Heap :: 
  { $IsAlloc(f, 
      Tclass._System.___hFunc12(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12), 
      h) } 
  $IsGoodHeap(h)
       && $IsAlloc(f, 
        Tclass._System.___hFunc12(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12), 
        h)
     ==> (forall bx0: Box, 
        bx1: Box, 
        bx2: Box, 
        bx3: Box, 
        bx4: Box, 
        bx5: Box, 
        bx6: Box, 
        bx7: Box, 
        bx8: Box, 
        bx9: Box, 
        bx10: Box, 
        bx11: Box :: 
      { Apply12(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          h, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && $IsAllocBox(bx3, t3, h)
           && $IsAllocBox(bx4, t4, h)
           && $IsAllocBox(bx5, t5, h)
           && $IsAllocBox(bx6, t6, h)
           && $IsAllocBox(bx7, t7, h)
           && $IsAllocBox(bx8, t8, h)
           && $IsAllocBox(bx9, t9, h)
           && $IsAllocBox(bx10, t10, h)
           && $IsAllocBox(bx11, t11, h)
           && Requires12(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11)
         ==> $IsAllocBox(Apply12(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11), 
          t12, 
          h)));

function Tclass._System.___hPartialFunc12(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc12: TyTag;

// Tclass._System.___hPartialFunc12 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tag(Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
       == Tagclass._System.___hPartialFunc12
     && TagFamily(Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
       == tytagFamily$_#PartialFunc12);

function Tclass._System.___hPartialFunc12_0(Ty) : Ty;

// Tclass._System.___hPartialFunc12 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hPartialFunc12_0(Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T0);

function Tclass._System.___hPartialFunc12_1(Ty) : Ty;

// Tclass._System.___hPartialFunc12 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hPartialFunc12_1(Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T1);

function Tclass._System.___hPartialFunc12_2(Ty) : Ty;

// Tclass._System.___hPartialFunc12 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hPartialFunc12_2(Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T2);

function Tclass._System.___hPartialFunc12_3(Ty) : Ty;

// Tclass._System.___hPartialFunc12 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hPartialFunc12_3(Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T3);

function Tclass._System.___hPartialFunc12_4(Ty) : Ty;

// Tclass._System.___hPartialFunc12 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hPartialFunc12_4(Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T4);

function Tclass._System.___hPartialFunc12_5(Ty) : Ty;

// Tclass._System.___hPartialFunc12 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hPartialFunc12_5(Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T5);

function Tclass._System.___hPartialFunc12_6(Ty) : Ty;

// Tclass._System.___hPartialFunc12 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hPartialFunc12_6(Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T6);

function Tclass._System.___hPartialFunc12_7(Ty) : Ty;

// Tclass._System.___hPartialFunc12 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hPartialFunc12_7(Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T7);

function Tclass._System.___hPartialFunc12_8(Ty) : Ty;

// Tclass._System.___hPartialFunc12 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hPartialFunc12_8(Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T8);

function Tclass._System.___hPartialFunc12_9(Ty) : Ty;

// Tclass._System.___hPartialFunc12 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hPartialFunc12_9(Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T9);

function Tclass._System.___hPartialFunc12_10(Ty) : Ty;

// Tclass._System.___hPartialFunc12 injectivity 10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hPartialFunc12_10(Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T10);

function Tclass._System.___hPartialFunc12_11(Ty) : Ty;

// Tclass._System.___hPartialFunc12 injectivity 11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hPartialFunc12_11(Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T11);

function Tclass._System.___hPartialFunc12_12(Ty) : Ty;

// Tclass._System.___hPartialFunc12 injectivity 12
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hPartialFunc12_12(Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc12
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R)));

// $Is axiom for subset type _System._#PartialFunc12
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty, 
    f#0: HandleType :: 
  { $Is(f#0, 
      Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R)) } 
  $Is(f#0, 
      Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     <==> $Is(f#0, 
        Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
       && (forall x0#0: Box, 
          x1#0: Box, 
          x2#0: Box, 
          x3#0: Box, 
          x4#0: Box, 
          x5#0: Box, 
          x6#0: Box, 
          x7#0: Box, 
          x8#0: Box, 
          x9#0: Box, 
          x10#0: Box, 
          x11#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
             && $IsBox(x5#0, #$T5)
             && $IsBox(x6#0, #$T6)
             && $IsBox(x7#0, #$T7)
             && $IsBox(x8#0, #$T8)
             && $IsBox(x9#0, #$T9)
             && $IsBox(x10#0, #$T10)
             && $IsBox(x11#0, #$T11)
           ==> Set#Equal(Reads12(#$T0, 
              #$T1, 
              #$T2, 
              #$T3, 
              #$T4, 
              #$T5, 
              #$T6, 
              #$T7, 
              #$T8, 
              #$T9, 
              #$T10, 
              #$T11, 
              #$R, 
              $OneHeap, 
              f#0, 
              x0#0, 
              x1#0, 
              x2#0, 
              x3#0, 
              x4#0, 
              x5#0, 
              x6#0, 
              x7#0, 
              x8#0, 
              x9#0, 
              x10#0, 
              x11#0), 
            Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc12
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R), 
      $h) } 
  $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R), 
      $h)
     <==> $IsAlloc(f#0, 
      Tclass._System.___hFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R), 
      $h));

function Tclass._System.___hTotalFunc12(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc12: TyTag;

// Tclass._System.___hTotalFunc12 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tag(Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
       == Tagclass._System.___hTotalFunc12
     && TagFamily(Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
       == tytagFamily$_#TotalFunc12);

function Tclass._System.___hTotalFunc12_0(Ty) : Ty;

// Tclass._System.___hTotalFunc12 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hTotalFunc12_0(Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T0);

function Tclass._System.___hTotalFunc12_1(Ty) : Ty;

// Tclass._System.___hTotalFunc12 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hTotalFunc12_1(Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T1);

function Tclass._System.___hTotalFunc12_2(Ty) : Ty;

// Tclass._System.___hTotalFunc12 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hTotalFunc12_2(Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T2);

function Tclass._System.___hTotalFunc12_3(Ty) : Ty;

// Tclass._System.___hTotalFunc12 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hTotalFunc12_3(Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T3);

function Tclass._System.___hTotalFunc12_4(Ty) : Ty;

// Tclass._System.___hTotalFunc12 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hTotalFunc12_4(Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T4);

function Tclass._System.___hTotalFunc12_5(Ty) : Ty;

// Tclass._System.___hTotalFunc12 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hTotalFunc12_5(Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T5);

function Tclass._System.___hTotalFunc12_6(Ty) : Ty;

// Tclass._System.___hTotalFunc12 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hTotalFunc12_6(Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T6);

function Tclass._System.___hTotalFunc12_7(Ty) : Ty;

// Tclass._System.___hTotalFunc12 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hTotalFunc12_7(Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T7);

function Tclass._System.___hTotalFunc12_8(Ty) : Ty;

// Tclass._System.___hTotalFunc12 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hTotalFunc12_8(Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T8);

function Tclass._System.___hTotalFunc12_9(Ty) : Ty;

// Tclass._System.___hTotalFunc12 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hTotalFunc12_9(Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T9);

function Tclass._System.___hTotalFunc12_10(Ty) : Ty;

// Tclass._System.___hTotalFunc12 injectivity 10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hTotalFunc12_10(Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T10);

function Tclass._System.___hTotalFunc12_11(Ty) : Ty;

// Tclass._System.___hTotalFunc12 injectivity 11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hTotalFunc12_11(Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$T11);

function Tclass._System.___hTotalFunc12_12(Ty) : Ty;

// Tclass._System.___hTotalFunc12 injectivity 12
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R) } 
  Tclass._System.___hTotalFunc12_12(Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc12
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R)));

// $Is axiom for subset type _System._#TotalFunc12
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty, 
    f#0: HandleType :: 
  { $Is(f#0, 
      Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R)) } 
  $Is(f#0, 
      Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
     <==> $Is(f#0, 
        Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R))
       && (forall x0#0: Box, 
          x1#0: Box, 
          x2#0: Box, 
          x3#0: Box, 
          x4#0: Box, 
          x5#0: Box, 
          x6#0: Box, 
          x7#0: Box, 
          x8#0: Box, 
          x9#0: Box, 
          x10#0: Box, 
          x11#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
             && $IsBox(x5#0, #$T5)
             && $IsBox(x6#0, #$T6)
             && $IsBox(x7#0, #$T7)
             && $IsBox(x8#0, #$T8)
             && $IsBox(x9#0, #$T9)
             && $IsBox(x10#0, #$T10)
             && $IsBox(x11#0, #$T11)
           ==> Requires12(#$T0, 
            #$T1, 
            #$T2, 
            #$T3, 
            #$T4, 
            #$T5, 
            #$T6, 
            #$T7, 
            #$T8, 
            #$T9, 
            #$T10, 
            #$T11, 
            #$R, 
            $OneHeap, 
            f#0, 
            x0#0, 
            x1#0, 
            x2#0, 
            x3#0, 
            x4#0, 
            x5#0, 
            x6#0, 
            x7#0, 
            x8#0, 
            x9#0, 
            x10#0, 
            x11#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc12
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, 
      Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R), 
      $h) } 
  $IsAlloc(f#0, 
      Tclass._System.___hTotalFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R), 
      $h)
     <==> $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc12(#$T0, #$T1, #$T2, #$T3, #$T4, #$T5, #$T6, #$T7, #$T8, #$T9, #$T10, #$T11, #$R), 
      $h));

function Tclass._System.___hFunc13(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc13: TyTag;

// Tclass._System.___hFunc13 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tag(Tclass._System.___hFunc13(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$R))
       == Tagclass._System.___hFunc13
     && TagFamily(Tclass._System.___hFunc13(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$R))
       == tytagFamily$_#Func13);

function Tclass._System.___hFunc13_0(Ty) : Ty;

// Tclass._System.___hFunc13 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hFunc13_0(Tclass._System.___hFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T0);

function Tclass._System.___hFunc13_1(Ty) : Ty;

// Tclass._System.___hFunc13 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hFunc13_1(Tclass._System.___hFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T1);

function Tclass._System.___hFunc13_2(Ty) : Ty;

// Tclass._System.___hFunc13 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hFunc13_2(Tclass._System.___hFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T2);

function Tclass._System.___hFunc13_3(Ty) : Ty;

// Tclass._System.___hFunc13 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hFunc13_3(Tclass._System.___hFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T3);

function Tclass._System.___hFunc13_4(Ty) : Ty;

// Tclass._System.___hFunc13 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hFunc13_4(Tclass._System.___hFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T4);

function Tclass._System.___hFunc13_5(Ty) : Ty;

// Tclass._System.___hFunc13 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hFunc13_5(Tclass._System.___hFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T5);

function Tclass._System.___hFunc13_6(Ty) : Ty;

// Tclass._System.___hFunc13 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hFunc13_6(Tclass._System.___hFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T6);

function Tclass._System.___hFunc13_7(Ty) : Ty;

// Tclass._System.___hFunc13 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hFunc13_7(Tclass._System.___hFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T7);

function Tclass._System.___hFunc13_8(Ty) : Ty;

// Tclass._System.___hFunc13 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hFunc13_8(Tclass._System.___hFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T8);

function Tclass._System.___hFunc13_9(Ty) : Ty;

// Tclass._System.___hFunc13 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hFunc13_9(Tclass._System.___hFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T9);

function Tclass._System.___hFunc13_10(Ty) : Ty;

// Tclass._System.___hFunc13 injectivity 10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hFunc13_10(Tclass._System.___hFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T10);

function Tclass._System.___hFunc13_11(Ty) : Ty;

// Tclass._System.___hFunc13 injectivity 11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hFunc13_11(Tclass._System.___hFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T11);

function Tclass._System.___hFunc13_12(Ty) : Ty;

// Tclass._System.___hFunc13 injectivity 12
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hFunc13_12(Tclass._System.___hFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T12);

function Tclass._System.___hFunc13_13(Ty) : Ty;

// Tclass._System.___hFunc13 injectivity 13
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hFunc13_13(Tclass._System.___hFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc13
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hFunc13(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$R)));

function Handle13([Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set)
   : HandleType;

function Apply13(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : Box;

function Requires13(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : bool;

function Reads13(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box :: 
  { Apply13(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      heap, 
      Handle13(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12) } 
  Apply13(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      heap, 
      Handle13(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12)
     == h[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8, bx9, bx10, bx11, bx12]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box :: 
  { Requires13(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      heap, 
      Handle13(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12) } 
  r[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8, bx9, bx10, bx11, bx12]
     ==> Requires13(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      heap, 
      Handle13(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx: Box :: 
  { Set#IsMember(Reads13(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        heap, 
        Handle13(h, r, rd), 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12), 
      bx) } 
  Set#IsMember(Reads13(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        heap, 
        Handle13(h, r, rd), 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12), 
      bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8, bx9, bx10, bx11, bx12], bx));

function {:inline} Requires13#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box)
   : bool
{
  true
}

function {:inline} Reads13#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box)
   : bool
{
  true
}

// frame axiom for Reads13
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box :: 
  { $HeapSucc(h0, h1), Reads13(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $Is(f, 
        Tclass._System.___hFunc13(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads13(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                t13, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11, 
                bx12), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads13(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12)
       == Reads13(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12));

// frame axiom for Reads13
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box :: 
  { $HeapSucc(h0, h1), Reads13(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $Is(f, 
        Tclass._System.___hFunc13(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads13(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                t13, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11, 
                bx12), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads13(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12)
       == Reads13(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12));

// frame axiom for Requires13
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box :: 
  { $HeapSucc(h0, h1), Requires13(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $Is(f, 
        Tclass._System.___hFunc13(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads13(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                t13, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11, 
                bx12), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires13(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12)
       == Requires13(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12));

// frame axiom for Requires13
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box :: 
  { $HeapSucc(h0, h1), Requires13(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $Is(f, 
        Tclass._System.___hFunc13(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads13(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                t13, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11, 
                bx12), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires13(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12)
       == Requires13(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12));

// frame axiom for Apply13
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box :: 
  { $HeapSucc(h0, h1), Apply13(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $Is(f, 
        Tclass._System.___hFunc13(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads13(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                t13, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11, 
                bx12), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply13(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12)
       == Apply13(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12));

// frame axiom for Apply13
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box :: 
  { $HeapSucc(h0, h1), Apply13(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $Is(f, 
        Tclass._System.___hFunc13(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads13(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                t13, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11, 
                bx12), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply13(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12)
       == Apply13(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12));

// empty-reads property for Reads13 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box :: 
  { Reads13(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      $OneHeap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12), $IsGoodHeap(heap) } 
    { Reads13(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      heap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $Is(f, 
        Tclass._System.___hFunc13(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13))
     ==> (Set#Equal(Reads13(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          t13, 
          $OneHeap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11, 
          bx12), 
        Set#Empty(): Set)
       <==> Set#Equal(Reads13(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          t13, 
          heap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11, 
          bx12), 
        Set#Empty(): Set)));

// empty-reads property for Requires13
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box :: 
  { Requires13(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      $OneHeap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12), $IsGoodHeap(heap) } 
    { Requires13(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      heap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $Is(f, 
        Tclass._System.___hFunc13(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13))
       && Set#Equal(Reads13(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          t13, 
          $OneHeap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11, 
          bx12), 
        Set#Empty(): Set)
     ==> Requires13(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        $OneHeap, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12)
       == Requires13(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        heap, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty :: 
  { $Is(f, 
      Tclass._System.___hFunc13(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13)) } 
  $Is(f, 
      Tclass._System.___hFunc13(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13))
     <==> (forall h: Heap, 
        bx0: Box, 
        bx1: Box, 
        bx2: Box, 
        bx3: Box, 
        bx4: Box, 
        bx5: Box, 
        bx6: Box, 
        bx7: Box, 
        bx8: Box, 
        bx9: Box, 
        bx10: Box, 
        bx11: Box, 
        bx12: Box :: 
      { Apply13(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          t13, 
          h, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11, 
          bx12) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && $IsBox(bx3, t3)
           && $IsBox(bx4, t4)
           && $IsBox(bx5, t5)
           && $IsBox(bx6, t6)
           && $IsBox(bx7, t7)
           && $IsBox(bx8, t8)
           && $IsBox(bx9, t9)
           && $IsBox(bx10, t10)
           && $IsBox(bx11, t11)
           && $IsBox(bx12, t12)
           && Requires13(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            t13, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11, 
            bx12)
         ==> $IsBox(Apply13(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            t13, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11, 
            bx12), 
          t13)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    u0: Ty, 
    u1: Ty, 
    u2: Ty, 
    u3: Ty, 
    u4: Ty, 
    u5: Ty, 
    u6: Ty, 
    u7: Ty, 
    u8: Ty, 
    u9: Ty, 
    u10: Ty, 
    u11: Ty, 
    u12: Ty, 
    u13: Ty :: 
  { $Is(f, 
      Tclass._System.___hFunc13(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13)), $Is(f, 
      Tclass._System.___hFunc13(u0, u1, u2, u3, u4, u5, u6, u7, u8, u9, u10, u11, u12, u13)) } 
  $Is(f, 
        Tclass._System.___hFunc13(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u3) } { $IsBox(bx, t3) } 
        $IsBox(bx, u3) ==> $IsBox(bx, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, u4) } { $IsBox(bx, t4) } 
        $IsBox(bx, u4) ==> $IsBox(bx, t4))
       && (forall bx: Box :: 
        { $IsBox(bx, u5) } { $IsBox(bx, t5) } 
        $IsBox(bx, u5) ==> $IsBox(bx, t5))
       && (forall bx: Box :: 
        { $IsBox(bx, u6) } { $IsBox(bx, t6) } 
        $IsBox(bx, u6) ==> $IsBox(bx, t6))
       && (forall bx: Box :: 
        { $IsBox(bx, u7) } { $IsBox(bx, t7) } 
        $IsBox(bx, u7) ==> $IsBox(bx, t7))
       && (forall bx: Box :: 
        { $IsBox(bx, u8) } { $IsBox(bx, t8) } 
        $IsBox(bx, u8) ==> $IsBox(bx, t8))
       && (forall bx: Box :: 
        { $IsBox(bx, u9) } { $IsBox(bx, t9) } 
        $IsBox(bx, u9) ==> $IsBox(bx, t9))
       && (forall bx: Box :: 
        { $IsBox(bx, u10) } { $IsBox(bx, t10) } 
        $IsBox(bx, u10) ==> $IsBox(bx, t10))
       && (forall bx: Box :: 
        { $IsBox(bx, u11) } { $IsBox(bx, t11) } 
        $IsBox(bx, u11) ==> $IsBox(bx, t11))
       && (forall bx: Box :: 
        { $IsBox(bx, u12) } { $IsBox(bx, t12) } 
        $IsBox(bx, u12) ==> $IsBox(bx, t12))
       && (forall bx: Box :: 
        { $IsBox(bx, t13) } { $IsBox(bx, u13) } 
        $IsBox(bx, t13) ==> $IsBox(bx, u13))
     ==> $Is(f, 
      Tclass._System.___hFunc13(u0, u1, u2, u3, u4, u5, u6, u7, u8, u9, u10, u11, u12, u13)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    h: Heap :: 
  { $IsAlloc(f, 
      Tclass._System.___hFunc13(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13), 
      h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, 
        Tclass._System.___hFunc13(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13), 
        h)
       <==> (forall bx0: Box, 
          bx1: Box, 
          bx2: Box, 
          bx3: Box, 
          bx4: Box, 
          bx5: Box, 
          bx6: Box, 
          bx7: Box, 
          bx8: Box, 
          bx9: Box, 
          bx10: Box, 
          bx11: Box, 
          bx12: Box :: 
        { Apply13(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            t13, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11, 
            bx12) } 
          { Reads13(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            t13, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11, 
            bx12) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && 
            $IsBox(bx3, t3)
             && $IsAllocBox(bx3, t3, h)
             && 
            $IsBox(bx4, t4)
             && $IsAllocBox(bx4, t4, h)
             && 
            $IsBox(bx5, t5)
             && $IsAllocBox(bx5, t5, h)
             && 
            $IsBox(bx6, t6)
             && $IsAllocBox(bx6, t6, h)
             && 
            $IsBox(bx7, t7)
             && $IsAllocBox(bx7, t7, h)
             && 
            $IsBox(bx8, t8)
             && $IsAllocBox(bx8, t8, h)
             && 
            $IsBox(bx9, t9)
             && $IsAllocBox(bx9, t9, h)
             && 
            $IsBox(bx10, t10)
             && $IsAllocBox(bx10, t10, h)
             && 
            $IsBox(bx11, t11)
             && $IsAllocBox(bx11, t11, h)
             && 
            $IsBox(bx12, t12)
             && $IsAllocBox(bx12, t12, h)
             && Requires13(t0, 
              t1, 
              t2, 
              t3, 
              t4, 
              t5, 
              t6, 
              t7, 
              t8, 
              t9, 
              t10, 
              t11, 
              t12, 
              t13, 
              h, 
              f, 
              bx0, 
              bx1, 
              bx2, 
              bx3, 
              bx4, 
              bx5, 
              bx6, 
              bx7, 
              bx8, 
              bx9, 
              bx10, 
              bx11, 
              bx12)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads13(t0, 
                  t1, 
                  t2, 
                  t3, 
                  t4, 
                  t5, 
                  t6, 
                  t7, 
                  t8, 
                  t9, 
                  t10, 
                  t11, 
                  t12, 
                  t13, 
                  h, 
                  f, 
                  bx0, 
                  bx1, 
                  bx2, 
                  bx3, 
                  bx4, 
                  bx5, 
                  bx6, 
                  bx7, 
                  bx8, 
                  bx9, 
                  bx10, 
                  bx11, 
                  bx12), 
                $Box(r)) } 
            r != null
                 && Set#IsMember(Reads13(t0, 
                    t1, 
                    t2, 
                    t3, 
                    t4, 
                    t5, 
                    t6, 
                    t7, 
                    t8, 
                    t9, 
                    t10, 
                    t11, 
                    t12, 
                    t13, 
                    h, 
                    f, 
                    bx0, 
                    bx1, 
                    bx2, 
                    bx3, 
                    bx4, 
                    bx5, 
                    bx6, 
                    bx7, 
                    bx8, 
                    bx9, 
                    bx10, 
                    bx11, 
                    bx12), 
                  $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    h: Heap :: 
  { $IsAlloc(f, 
      Tclass._System.___hFunc13(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13), 
      h) } 
  $IsGoodHeap(h)
       && $IsAlloc(f, 
        Tclass._System.___hFunc13(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13), 
        h)
     ==> (forall bx0: Box, 
        bx1: Box, 
        bx2: Box, 
        bx3: Box, 
        bx4: Box, 
        bx5: Box, 
        bx6: Box, 
        bx7: Box, 
        bx8: Box, 
        bx9: Box, 
        bx10: Box, 
        bx11: Box, 
        bx12: Box :: 
      { Apply13(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          t13, 
          h, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11, 
          bx12) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && $IsAllocBox(bx3, t3, h)
           && $IsAllocBox(bx4, t4, h)
           && $IsAllocBox(bx5, t5, h)
           && $IsAllocBox(bx6, t6, h)
           && $IsAllocBox(bx7, t7, h)
           && $IsAllocBox(bx8, t8, h)
           && $IsAllocBox(bx9, t9, h)
           && $IsAllocBox(bx10, t10, h)
           && $IsAllocBox(bx11, t11, h)
           && $IsAllocBox(bx12, t12, h)
           && Requires13(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            t13, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11, 
            bx12)
         ==> $IsAllocBox(Apply13(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            t13, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11, 
            bx12), 
          t13, 
          h)));

function Tclass._System.___hPartialFunc13(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc13: TyTag;

// Tclass._System.___hPartialFunc13 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tag(Tclass._System.___hPartialFunc13(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$R))
       == Tagclass._System.___hPartialFunc13
     && TagFamily(Tclass._System.___hPartialFunc13(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$R))
       == tytagFamily$_#PartialFunc13);

function Tclass._System.___hPartialFunc13_0(Ty) : Ty;

// Tclass._System.___hPartialFunc13 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hPartialFunc13_0(Tclass._System.___hPartialFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T0);

function Tclass._System.___hPartialFunc13_1(Ty) : Ty;

// Tclass._System.___hPartialFunc13 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hPartialFunc13_1(Tclass._System.___hPartialFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T1);

function Tclass._System.___hPartialFunc13_2(Ty) : Ty;

// Tclass._System.___hPartialFunc13 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hPartialFunc13_2(Tclass._System.___hPartialFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T2);

function Tclass._System.___hPartialFunc13_3(Ty) : Ty;

// Tclass._System.___hPartialFunc13 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hPartialFunc13_3(Tclass._System.___hPartialFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T3);

function Tclass._System.___hPartialFunc13_4(Ty) : Ty;

// Tclass._System.___hPartialFunc13 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hPartialFunc13_4(Tclass._System.___hPartialFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T4);

function Tclass._System.___hPartialFunc13_5(Ty) : Ty;

// Tclass._System.___hPartialFunc13 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hPartialFunc13_5(Tclass._System.___hPartialFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T5);

function Tclass._System.___hPartialFunc13_6(Ty) : Ty;

// Tclass._System.___hPartialFunc13 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hPartialFunc13_6(Tclass._System.___hPartialFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T6);

function Tclass._System.___hPartialFunc13_7(Ty) : Ty;

// Tclass._System.___hPartialFunc13 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hPartialFunc13_7(Tclass._System.___hPartialFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T7);

function Tclass._System.___hPartialFunc13_8(Ty) : Ty;

// Tclass._System.___hPartialFunc13 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hPartialFunc13_8(Tclass._System.___hPartialFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T8);

function Tclass._System.___hPartialFunc13_9(Ty) : Ty;

// Tclass._System.___hPartialFunc13 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hPartialFunc13_9(Tclass._System.___hPartialFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T9);

function Tclass._System.___hPartialFunc13_10(Ty) : Ty;

// Tclass._System.___hPartialFunc13 injectivity 10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hPartialFunc13_10(Tclass._System.___hPartialFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T10);

function Tclass._System.___hPartialFunc13_11(Ty) : Ty;

// Tclass._System.___hPartialFunc13 injectivity 11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hPartialFunc13_11(Tclass._System.___hPartialFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T11);

function Tclass._System.___hPartialFunc13_12(Ty) : Ty;

// Tclass._System.___hPartialFunc13 injectivity 12
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hPartialFunc13_12(Tclass._System.___hPartialFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T12);

function Tclass._System.___hPartialFunc13_13(Ty) : Ty;

// Tclass._System.___hPartialFunc13 injectivity 13
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hPartialFunc13_13(Tclass._System.___hPartialFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc13
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hPartialFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hPartialFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hPartialFunc13(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$R)));

// $Is axiom for subset type _System._#PartialFunc13
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty, 
    f#0: HandleType :: 
  { $Is(f#0, 
      Tclass._System.___hPartialFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R)) } 
  $Is(f#0, 
      Tclass._System.___hPartialFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     <==> $Is(f#0, 
        Tclass._System.___hFunc13(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$R))
       && (forall x0#0: Box, 
          x1#0: Box, 
          x2#0: Box, 
          x3#0: Box, 
          x4#0: Box, 
          x5#0: Box, 
          x6#0: Box, 
          x7#0: Box, 
          x8#0: Box, 
          x9#0: Box, 
          x10#0: Box, 
          x11#0: Box, 
          x12#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
             && $IsBox(x5#0, #$T5)
             && $IsBox(x6#0, #$T6)
             && $IsBox(x7#0, #$T7)
             && $IsBox(x8#0, #$T8)
             && $IsBox(x9#0, #$T9)
             && $IsBox(x10#0, #$T10)
             && $IsBox(x11#0, #$T11)
             && $IsBox(x12#0, #$T12)
           ==> Set#Equal(Reads13(#$T0, 
              #$T1, 
              #$T2, 
              #$T3, 
              #$T4, 
              #$T5, 
              #$T6, 
              #$T7, 
              #$T8, 
              #$T9, 
              #$T10, 
              #$T11, 
              #$T12, 
              #$R, 
              $OneHeap, 
              f#0, 
              x0#0, 
              x1#0, 
              x2#0, 
              x3#0, 
              x4#0, 
              x5#0, 
              x6#0, 
              x7#0, 
              x8#0, 
              x9#0, 
              x10#0, 
              x11#0, 
              x12#0), 
            Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc13
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R), 
      $h) } 
  $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R), 
      $h)
     <==> $IsAlloc(f#0, 
      Tclass._System.___hFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R), 
      $h));

function Tclass._System.___hTotalFunc13(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc13: TyTag;

// Tclass._System.___hTotalFunc13 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tag(Tclass._System.___hTotalFunc13(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$R))
       == Tagclass._System.___hTotalFunc13
     && TagFamily(Tclass._System.___hTotalFunc13(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$R))
       == tytagFamily$_#TotalFunc13);

function Tclass._System.___hTotalFunc13_0(Ty) : Ty;

// Tclass._System.___hTotalFunc13 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hTotalFunc13_0(Tclass._System.___hTotalFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T0);

function Tclass._System.___hTotalFunc13_1(Ty) : Ty;

// Tclass._System.___hTotalFunc13 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hTotalFunc13_1(Tclass._System.___hTotalFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T1);

function Tclass._System.___hTotalFunc13_2(Ty) : Ty;

// Tclass._System.___hTotalFunc13 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hTotalFunc13_2(Tclass._System.___hTotalFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T2);

function Tclass._System.___hTotalFunc13_3(Ty) : Ty;

// Tclass._System.___hTotalFunc13 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hTotalFunc13_3(Tclass._System.___hTotalFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T3);

function Tclass._System.___hTotalFunc13_4(Ty) : Ty;

// Tclass._System.___hTotalFunc13 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hTotalFunc13_4(Tclass._System.___hTotalFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T4);

function Tclass._System.___hTotalFunc13_5(Ty) : Ty;

// Tclass._System.___hTotalFunc13 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hTotalFunc13_5(Tclass._System.___hTotalFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T5);

function Tclass._System.___hTotalFunc13_6(Ty) : Ty;

// Tclass._System.___hTotalFunc13 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hTotalFunc13_6(Tclass._System.___hTotalFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T6);

function Tclass._System.___hTotalFunc13_7(Ty) : Ty;

// Tclass._System.___hTotalFunc13 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hTotalFunc13_7(Tclass._System.___hTotalFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T7);

function Tclass._System.___hTotalFunc13_8(Ty) : Ty;

// Tclass._System.___hTotalFunc13 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hTotalFunc13_8(Tclass._System.___hTotalFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T8);

function Tclass._System.___hTotalFunc13_9(Ty) : Ty;

// Tclass._System.___hTotalFunc13 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hTotalFunc13_9(Tclass._System.___hTotalFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T9);

function Tclass._System.___hTotalFunc13_10(Ty) : Ty;

// Tclass._System.___hTotalFunc13 injectivity 10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hTotalFunc13_10(Tclass._System.___hTotalFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T10);

function Tclass._System.___hTotalFunc13_11(Ty) : Ty;

// Tclass._System.___hTotalFunc13 injectivity 11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hTotalFunc13_11(Tclass._System.___hTotalFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T11);

function Tclass._System.___hTotalFunc13_12(Ty) : Ty;

// Tclass._System.___hTotalFunc13 injectivity 12
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hTotalFunc13_12(Tclass._System.___hTotalFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$T12);

function Tclass._System.___hTotalFunc13_13(Ty) : Ty;

// Tclass._System.___hTotalFunc13 injectivity 13
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc13(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$R) } 
  Tclass._System.___hTotalFunc13_13(Tclass._System.___hTotalFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc13
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hTotalFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hTotalFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hTotalFunc13(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$R)));

// $Is axiom for subset type _System._#TotalFunc13
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty, 
    f#0: HandleType :: 
  { $Is(f#0, 
      Tclass._System.___hTotalFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R)) } 
  $Is(f#0, 
      Tclass._System.___hTotalFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R))
     <==> $Is(f#0, 
        Tclass._System.___hPartialFunc13(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$R))
       && (forall x0#0: Box, 
          x1#0: Box, 
          x2#0: Box, 
          x3#0: Box, 
          x4#0: Box, 
          x5#0: Box, 
          x6#0: Box, 
          x7#0: Box, 
          x8#0: Box, 
          x9#0: Box, 
          x10#0: Box, 
          x11#0: Box, 
          x12#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
             && $IsBox(x5#0, #$T5)
             && $IsBox(x6#0, #$T6)
             && $IsBox(x7#0, #$T7)
             && $IsBox(x8#0, #$T8)
             && $IsBox(x9#0, #$T9)
             && $IsBox(x10#0, #$T10)
             && $IsBox(x11#0, #$T11)
             && $IsBox(x12#0, #$T12)
           ==> Requires13(#$T0, 
            #$T1, 
            #$T2, 
            #$T3, 
            #$T4, 
            #$T5, 
            #$T6, 
            #$T7, 
            #$T8, 
            #$T9, 
            #$T10, 
            #$T11, 
            #$T12, 
            #$R, 
            $OneHeap, 
            f#0, 
            x0#0, 
            x1#0, 
            x2#0, 
            x3#0, 
            x4#0, 
            x5#0, 
            x6#0, 
            x7#0, 
            x8#0, 
            x9#0, 
            x10#0, 
            x11#0, 
            x12#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc13
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, 
      Tclass._System.___hTotalFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R), 
      $h) } 
  $IsAlloc(f#0, 
      Tclass._System.___hTotalFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R), 
      $h)
     <==> $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc13(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$R), 
      $h));

function Tclass._System.___hFunc14(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc14: TyTag;

// Tclass._System.___hFunc14 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tag(Tclass._System.___hFunc14(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$R))
       == Tagclass._System.___hFunc14
     && TagFamily(Tclass._System.___hFunc14(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$R))
       == tytagFamily$_#Func14);

function Tclass._System.___hFunc14_0(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hFunc14_0(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T0);

function Tclass._System.___hFunc14_1(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hFunc14_1(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T1);

function Tclass._System.___hFunc14_2(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hFunc14_2(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T2);

function Tclass._System.___hFunc14_3(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hFunc14_3(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T3);

function Tclass._System.___hFunc14_4(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hFunc14_4(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T4);

function Tclass._System.___hFunc14_5(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hFunc14_5(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T5);

function Tclass._System.___hFunc14_6(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hFunc14_6(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T6);

function Tclass._System.___hFunc14_7(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hFunc14_7(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T7);

function Tclass._System.___hFunc14_8(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hFunc14_8(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T8);

function Tclass._System.___hFunc14_9(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hFunc14_9(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T9);

function Tclass._System.___hFunc14_10(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hFunc14_10(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T10);

function Tclass._System.___hFunc14_11(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hFunc14_11(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T11);

function Tclass._System.___hFunc14_12(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 12
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hFunc14_12(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T12);

function Tclass._System.___hFunc14_13(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 13
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hFunc14_13(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T13);

function Tclass._System.___hFunc14_14(Ty) : Ty;

// Tclass._System.___hFunc14 injectivity 14
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hFunc14_14(Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc14
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hFunc14(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$R)));

function Handle14([Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set)
   : HandleType;

function Apply14(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : Box;

function Requires14(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : bool;

function Reads14(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box :: 
  { Apply14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      heap, 
      Handle14(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13) } 
  Apply14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      heap, 
      Handle14(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13)
     == h[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8, bx9, bx10, bx11, bx12, bx13]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box :: 
  { Requires14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      heap, 
      Handle14(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13) } 
  r[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8, bx9, bx10, bx11, bx12, bx13]
     ==> Requires14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      heap, 
      Handle14(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx: Box :: 
  { Set#IsMember(Reads14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        heap, 
        Handle14(h, r, rd), 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13), 
      bx) } 
  Set#IsMember(Reads14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        heap, 
        Handle14(h, r, rd), 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13), 
      bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8, bx9, bx10, bx11, bx12, bx13], 
      bx));

function {:inline} Requires14#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box)
   : bool
{
  true
}

function {:inline} Reads14#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box)
   : bool
{
  true
}

// frame axiom for Reads14
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box :: 
  { $HeapSucc(h0, h1), Reads14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $IsBox(bx13, t13)
       && $Is(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads14(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                t13, 
                t14, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11, 
                bx12, 
                bx13), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13)
       == Reads14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13));

// frame axiom for Reads14
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box :: 
  { $HeapSucc(h0, h1), Reads14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $IsBox(bx13, t13)
       && $Is(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads14(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                t13, 
                t14, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11, 
                bx12, 
                bx13), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13)
       == Reads14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13));

// frame axiom for Requires14
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box :: 
  { $HeapSucc(h0, h1), Requires14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $IsBox(bx13, t13)
       && $Is(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads14(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                t13, 
                t14, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11, 
                bx12, 
                bx13), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13)
       == Requires14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13));

// frame axiom for Requires14
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box :: 
  { $HeapSucc(h0, h1), Requires14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $IsBox(bx13, t13)
       && $Is(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads14(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                t13, 
                t14, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11, 
                bx12, 
                bx13), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13)
       == Requires14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13));

// frame axiom for Apply14
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box :: 
  { $HeapSucc(h0, h1), Apply14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $IsBox(bx13, t13)
       && $Is(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads14(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                t13, 
                t14, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11, 
                bx12, 
                bx13), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13)
       == Apply14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13));

// frame axiom for Apply14
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box :: 
  { $HeapSucc(h0, h1), Apply14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $IsBox(bx13, t13)
       && $Is(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads14(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                t13, 
                t14, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11, 
                bx12, 
                bx13), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13)
       == Apply14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13));

// empty-reads property for Reads14 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box :: 
  { Reads14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      $OneHeap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13), $IsGoodHeap(heap) } 
    { Reads14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      heap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $IsBox(bx13, t13)
       && $Is(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14))
     ==> (Set#Equal(Reads14(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          t13, 
          t14, 
          $OneHeap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11, 
          bx12, 
          bx13), 
        Set#Empty(): Set)
       <==> Set#Equal(Reads14(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          t13, 
          t14, 
          heap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11, 
          bx12, 
          bx13), 
        Set#Empty(): Set)));

// empty-reads property for Requires14
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box :: 
  { Requires14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      $OneHeap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13), $IsGoodHeap(heap) } 
    { Requires14(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      heap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $IsBox(bx13, t13)
       && $Is(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14))
       && Set#Equal(Reads14(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          t13, 
          t14, 
          $OneHeap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11, 
          bx12, 
          bx13), 
        Set#Empty(): Set)
     ==> Requires14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        $OneHeap, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13)
       == Requires14(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        heap, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty :: 
  { $Is(f, 
      Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14)) } 
  $Is(f, 
      Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14))
     <==> (forall h: Heap, 
        bx0: Box, 
        bx1: Box, 
        bx2: Box, 
        bx3: Box, 
        bx4: Box, 
        bx5: Box, 
        bx6: Box, 
        bx7: Box, 
        bx8: Box, 
        bx9: Box, 
        bx10: Box, 
        bx11: Box, 
        bx12: Box, 
        bx13: Box :: 
      { Apply14(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          t13, 
          t14, 
          h, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11, 
          bx12, 
          bx13) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && $IsBox(bx3, t3)
           && $IsBox(bx4, t4)
           && $IsBox(bx5, t5)
           && $IsBox(bx6, t6)
           && $IsBox(bx7, t7)
           && $IsBox(bx8, t8)
           && $IsBox(bx9, t9)
           && $IsBox(bx10, t10)
           && $IsBox(bx11, t11)
           && $IsBox(bx12, t12)
           && $IsBox(bx13, t13)
           && Requires14(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            t13, 
            t14, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11, 
            bx12, 
            bx13)
         ==> $IsBox(Apply14(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            t13, 
            t14, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11, 
            bx12, 
            bx13), 
          t14)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    u0: Ty, 
    u1: Ty, 
    u2: Ty, 
    u3: Ty, 
    u4: Ty, 
    u5: Ty, 
    u6: Ty, 
    u7: Ty, 
    u8: Ty, 
    u9: Ty, 
    u10: Ty, 
    u11: Ty, 
    u12: Ty, 
    u13: Ty, 
    u14: Ty :: 
  { $Is(f, 
      Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14)), $Is(f, 
      Tclass._System.___hFunc14(u0, u1, u2, u3, u4, u5, u6, u7, u8, u9, u10, u11, u12, u13, u14)) } 
  $Is(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u3) } { $IsBox(bx, t3) } 
        $IsBox(bx, u3) ==> $IsBox(bx, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, u4) } { $IsBox(bx, t4) } 
        $IsBox(bx, u4) ==> $IsBox(bx, t4))
       && (forall bx: Box :: 
        { $IsBox(bx, u5) } { $IsBox(bx, t5) } 
        $IsBox(bx, u5) ==> $IsBox(bx, t5))
       && (forall bx: Box :: 
        { $IsBox(bx, u6) } { $IsBox(bx, t6) } 
        $IsBox(bx, u6) ==> $IsBox(bx, t6))
       && (forall bx: Box :: 
        { $IsBox(bx, u7) } { $IsBox(bx, t7) } 
        $IsBox(bx, u7) ==> $IsBox(bx, t7))
       && (forall bx: Box :: 
        { $IsBox(bx, u8) } { $IsBox(bx, t8) } 
        $IsBox(bx, u8) ==> $IsBox(bx, t8))
       && (forall bx: Box :: 
        { $IsBox(bx, u9) } { $IsBox(bx, t9) } 
        $IsBox(bx, u9) ==> $IsBox(bx, t9))
       && (forall bx: Box :: 
        { $IsBox(bx, u10) } { $IsBox(bx, t10) } 
        $IsBox(bx, u10) ==> $IsBox(bx, t10))
       && (forall bx: Box :: 
        { $IsBox(bx, u11) } { $IsBox(bx, t11) } 
        $IsBox(bx, u11) ==> $IsBox(bx, t11))
       && (forall bx: Box :: 
        { $IsBox(bx, u12) } { $IsBox(bx, t12) } 
        $IsBox(bx, u12) ==> $IsBox(bx, t12))
       && (forall bx: Box :: 
        { $IsBox(bx, u13) } { $IsBox(bx, t13) } 
        $IsBox(bx, u13) ==> $IsBox(bx, t13))
       && (forall bx: Box :: 
        { $IsBox(bx, t14) } { $IsBox(bx, u14) } 
        $IsBox(bx, t14) ==> $IsBox(bx, u14))
     ==> $Is(f, 
      Tclass._System.___hFunc14(u0, u1, u2, u3, u4, u5, u6, u7, u8, u9, u10, u11, u12, u13, u14)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    h: Heap :: 
  { $IsAlloc(f, 
      Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14), 
      h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14), 
        h)
       <==> (forall bx0: Box, 
          bx1: Box, 
          bx2: Box, 
          bx3: Box, 
          bx4: Box, 
          bx5: Box, 
          bx6: Box, 
          bx7: Box, 
          bx8: Box, 
          bx9: Box, 
          bx10: Box, 
          bx11: Box, 
          bx12: Box, 
          bx13: Box :: 
        { Apply14(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            t13, 
            t14, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11, 
            bx12, 
            bx13) } 
          { Reads14(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            t13, 
            t14, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11, 
            bx12, 
            bx13) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && 
            $IsBox(bx3, t3)
             && $IsAllocBox(bx3, t3, h)
             && 
            $IsBox(bx4, t4)
             && $IsAllocBox(bx4, t4, h)
             && 
            $IsBox(bx5, t5)
             && $IsAllocBox(bx5, t5, h)
             && 
            $IsBox(bx6, t6)
             && $IsAllocBox(bx6, t6, h)
             && 
            $IsBox(bx7, t7)
             && $IsAllocBox(bx7, t7, h)
             && 
            $IsBox(bx8, t8)
             && $IsAllocBox(bx8, t8, h)
             && 
            $IsBox(bx9, t9)
             && $IsAllocBox(bx9, t9, h)
             && 
            $IsBox(bx10, t10)
             && $IsAllocBox(bx10, t10, h)
             && 
            $IsBox(bx11, t11)
             && $IsAllocBox(bx11, t11, h)
             && 
            $IsBox(bx12, t12)
             && $IsAllocBox(bx12, t12, h)
             && 
            $IsBox(bx13, t13)
             && $IsAllocBox(bx13, t13, h)
             && Requires14(t0, 
              t1, 
              t2, 
              t3, 
              t4, 
              t5, 
              t6, 
              t7, 
              t8, 
              t9, 
              t10, 
              t11, 
              t12, 
              t13, 
              t14, 
              h, 
              f, 
              bx0, 
              bx1, 
              bx2, 
              bx3, 
              bx4, 
              bx5, 
              bx6, 
              bx7, 
              bx8, 
              bx9, 
              bx10, 
              bx11, 
              bx12, 
              bx13)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads14(t0, 
                  t1, 
                  t2, 
                  t3, 
                  t4, 
                  t5, 
                  t6, 
                  t7, 
                  t8, 
                  t9, 
                  t10, 
                  t11, 
                  t12, 
                  t13, 
                  t14, 
                  h, 
                  f, 
                  bx0, 
                  bx1, 
                  bx2, 
                  bx3, 
                  bx4, 
                  bx5, 
                  bx6, 
                  bx7, 
                  bx8, 
                  bx9, 
                  bx10, 
                  bx11, 
                  bx12, 
                  bx13), 
                $Box(r)) } 
            r != null
                 && Set#IsMember(Reads14(t0, 
                    t1, 
                    t2, 
                    t3, 
                    t4, 
                    t5, 
                    t6, 
                    t7, 
                    t8, 
                    t9, 
                    t10, 
                    t11, 
                    t12, 
                    t13, 
                    t14, 
                    h, 
                    f, 
                    bx0, 
                    bx1, 
                    bx2, 
                    bx3, 
                    bx4, 
                    bx5, 
                    bx6, 
                    bx7, 
                    bx8, 
                    bx9, 
                    bx10, 
                    bx11, 
                    bx12, 
                    bx13), 
                  $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    h: Heap :: 
  { $IsAlloc(f, 
      Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14), 
      h) } 
  $IsGoodHeap(h)
       && $IsAlloc(f, 
        Tclass._System.___hFunc14(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14), 
        h)
     ==> (forall bx0: Box, 
        bx1: Box, 
        bx2: Box, 
        bx3: Box, 
        bx4: Box, 
        bx5: Box, 
        bx6: Box, 
        bx7: Box, 
        bx8: Box, 
        bx9: Box, 
        bx10: Box, 
        bx11: Box, 
        bx12: Box, 
        bx13: Box :: 
      { Apply14(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          t13, 
          t14, 
          h, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11, 
          bx12, 
          bx13) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && $IsAllocBox(bx3, t3, h)
           && $IsAllocBox(bx4, t4, h)
           && $IsAllocBox(bx5, t5, h)
           && $IsAllocBox(bx6, t6, h)
           && $IsAllocBox(bx7, t7, h)
           && $IsAllocBox(bx8, t8, h)
           && $IsAllocBox(bx9, t9, h)
           && $IsAllocBox(bx10, t10, h)
           && $IsAllocBox(bx11, t11, h)
           && $IsAllocBox(bx12, t12, h)
           && $IsAllocBox(bx13, t13, h)
           && Requires14(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            t13, 
            t14, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11, 
            bx12, 
            bx13)
         ==> $IsAllocBox(Apply14(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            t13, 
            t14, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11, 
            bx12, 
            bx13), 
          t14, 
          h)));

function Tclass._System.___hPartialFunc14(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc14: TyTag;

// Tclass._System.___hPartialFunc14 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tag(Tclass._System.___hPartialFunc14(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$R))
       == Tagclass._System.___hPartialFunc14
     && TagFamily(Tclass._System.___hPartialFunc14(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$R))
       == tytagFamily$_#PartialFunc14);

function Tclass._System.___hPartialFunc14_0(Ty) : Ty;

// Tclass._System.___hPartialFunc14 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hPartialFunc14_0(Tclass._System.___hPartialFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T0);

function Tclass._System.___hPartialFunc14_1(Ty) : Ty;

// Tclass._System.___hPartialFunc14 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hPartialFunc14_1(Tclass._System.___hPartialFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T1);

function Tclass._System.___hPartialFunc14_2(Ty) : Ty;

// Tclass._System.___hPartialFunc14 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hPartialFunc14_2(Tclass._System.___hPartialFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T2);

function Tclass._System.___hPartialFunc14_3(Ty) : Ty;

// Tclass._System.___hPartialFunc14 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hPartialFunc14_3(Tclass._System.___hPartialFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T3);

function Tclass._System.___hPartialFunc14_4(Ty) : Ty;

// Tclass._System.___hPartialFunc14 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hPartialFunc14_4(Tclass._System.___hPartialFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T4);

function Tclass._System.___hPartialFunc14_5(Ty) : Ty;

// Tclass._System.___hPartialFunc14 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hPartialFunc14_5(Tclass._System.___hPartialFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T5);

function Tclass._System.___hPartialFunc14_6(Ty) : Ty;

// Tclass._System.___hPartialFunc14 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hPartialFunc14_6(Tclass._System.___hPartialFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T6);

function Tclass._System.___hPartialFunc14_7(Ty) : Ty;

// Tclass._System.___hPartialFunc14 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hPartialFunc14_7(Tclass._System.___hPartialFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T7);

function Tclass._System.___hPartialFunc14_8(Ty) : Ty;

// Tclass._System.___hPartialFunc14 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hPartialFunc14_8(Tclass._System.___hPartialFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T8);

function Tclass._System.___hPartialFunc14_9(Ty) : Ty;

// Tclass._System.___hPartialFunc14 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hPartialFunc14_9(Tclass._System.___hPartialFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T9);

function Tclass._System.___hPartialFunc14_10(Ty) : Ty;

// Tclass._System.___hPartialFunc14 injectivity 10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hPartialFunc14_10(Tclass._System.___hPartialFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T10);

function Tclass._System.___hPartialFunc14_11(Ty) : Ty;

// Tclass._System.___hPartialFunc14 injectivity 11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hPartialFunc14_11(Tclass._System.___hPartialFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T11);

function Tclass._System.___hPartialFunc14_12(Ty) : Ty;

// Tclass._System.___hPartialFunc14 injectivity 12
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hPartialFunc14_12(Tclass._System.___hPartialFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T12);

function Tclass._System.___hPartialFunc14_13(Ty) : Ty;

// Tclass._System.___hPartialFunc14 injectivity 13
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hPartialFunc14_13(Tclass._System.___hPartialFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T13);

function Tclass._System.___hPartialFunc14_14(Ty) : Ty;

// Tclass._System.___hPartialFunc14 injectivity 14
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hPartialFunc14_14(Tclass._System.___hPartialFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc14
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hPartialFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hPartialFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hPartialFunc14(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$R)));

// $Is axiom for subset type _System._#PartialFunc14
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty, 
    f#0: HandleType :: 
  { $Is(f#0, 
      Tclass._System.___hPartialFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R)) } 
  $Is(f#0, 
      Tclass._System.___hPartialFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     <==> $Is(f#0, 
        Tclass._System.___hFunc14(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$R))
       && (forall x0#0: Box, 
          x1#0: Box, 
          x2#0: Box, 
          x3#0: Box, 
          x4#0: Box, 
          x5#0: Box, 
          x6#0: Box, 
          x7#0: Box, 
          x8#0: Box, 
          x9#0: Box, 
          x10#0: Box, 
          x11#0: Box, 
          x12#0: Box, 
          x13#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
             && $IsBox(x5#0, #$T5)
             && $IsBox(x6#0, #$T6)
             && $IsBox(x7#0, #$T7)
             && $IsBox(x8#0, #$T8)
             && $IsBox(x9#0, #$T9)
             && $IsBox(x10#0, #$T10)
             && $IsBox(x11#0, #$T11)
             && $IsBox(x12#0, #$T12)
             && $IsBox(x13#0, #$T13)
           ==> Set#Equal(Reads14(#$T0, 
              #$T1, 
              #$T2, 
              #$T3, 
              #$T4, 
              #$T5, 
              #$T6, 
              #$T7, 
              #$T8, 
              #$T9, 
              #$T10, 
              #$T11, 
              #$T12, 
              #$T13, 
              #$R, 
              $OneHeap, 
              f#0, 
              x0#0, 
              x1#0, 
              x2#0, 
              x3#0, 
              x4#0, 
              x5#0, 
              x6#0, 
              x7#0, 
              x8#0, 
              x9#0, 
              x10#0, 
              x11#0, 
              x12#0, 
              x13#0), 
            Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc14
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R), 
      $h) } 
  $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R), 
      $h)
     <==> $IsAlloc(f#0, 
      Tclass._System.___hFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R), 
      $h));

function Tclass._System.___hTotalFunc14(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc14: TyTag;

// Tclass._System.___hTotalFunc14 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tag(Tclass._System.___hTotalFunc14(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$R))
       == Tagclass._System.___hTotalFunc14
     && TagFamily(Tclass._System.___hTotalFunc14(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$R))
       == tytagFamily$_#TotalFunc14);

function Tclass._System.___hTotalFunc14_0(Ty) : Ty;

// Tclass._System.___hTotalFunc14 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hTotalFunc14_0(Tclass._System.___hTotalFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T0);

function Tclass._System.___hTotalFunc14_1(Ty) : Ty;

// Tclass._System.___hTotalFunc14 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hTotalFunc14_1(Tclass._System.___hTotalFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T1);

function Tclass._System.___hTotalFunc14_2(Ty) : Ty;

// Tclass._System.___hTotalFunc14 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hTotalFunc14_2(Tclass._System.___hTotalFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T2);

function Tclass._System.___hTotalFunc14_3(Ty) : Ty;

// Tclass._System.___hTotalFunc14 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hTotalFunc14_3(Tclass._System.___hTotalFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T3);

function Tclass._System.___hTotalFunc14_4(Ty) : Ty;

// Tclass._System.___hTotalFunc14 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hTotalFunc14_4(Tclass._System.___hTotalFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T4);

function Tclass._System.___hTotalFunc14_5(Ty) : Ty;

// Tclass._System.___hTotalFunc14 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hTotalFunc14_5(Tclass._System.___hTotalFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T5);

function Tclass._System.___hTotalFunc14_6(Ty) : Ty;

// Tclass._System.___hTotalFunc14 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hTotalFunc14_6(Tclass._System.___hTotalFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T6);

function Tclass._System.___hTotalFunc14_7(Ty) : Ty;

// Tclass._System.___hTotalFunc14 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hTotalFunc14_7(Tclass._System.___hTotalFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T7);

function Tclass._System.___hTotalFunc14_8(Ty) : Ty;

// Tclass._System.___hTotalFunc14 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hTotalFunc14_8(Tclass._System.___hTotalFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T8);

function Tclass._System.___hTotalFunc14_9(Ty) : Ty;

// Tclass._System.___hTotalFunc14 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hTotalFunc14_9(Tclass._System.___hTotalFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T9);

function Tclass._System.___hTotalFunc14_10(Ty) : Ty;

// Tclass._System.___hTotalFunc14 injectivity 10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hTotalFunc14_10(Tclass._System.___hTotalFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T10);

function Tclass._System.___hTotalFunc14_11(Ty) : Ty;

// Tclass._System.___hTotalFunc14 injectivity 11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hTotalFunc14_11(Tclass._System.___hTotalFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T11);

function Tclass._System.___hTotalFunc14_12(Ty) : Ty;

// Tclass._System.___hTotalFunc14 injectivity 12
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hTotalFunc14_12(Tclass._System.___hTotalFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T12);

function Tclass._System.___hTotalFunc14_13(Ty) : Ty;

// Tclass._System.___hTotalFunc14 injectivity 13
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hTotalFunc14_13(Tclass._System.___hTotalFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$T13);

function Tclass._System.___hTotalFunc14_14(Ty) : Ty;

// Tclass._System.___hTotalFunc14 injectivity 14
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc14(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$R) } 
  Tclass._System.___hTotalFunc14_14(Tclass._System.___hTotalFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc14
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hTotalFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hTotalFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hTotalFunc14(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$R)));

// $Is axiom for subset type _System._#TotalFunc14
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty, 
    f#0: HandleType :: 
  { $Is(f#0, 
      Tclass._System.___hTotalFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R)) } 
  $Is(f#0, 
      Tclass._System.___hTotalFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R))
     <==> $Is(f#0, 
        Tclass._System.___hPartialFunc14(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$R))
       && (forall x0#0: Box, 
          x1#0: Box, 
          x2#0: Box, 
          x3#0: Box, 
          x4#0: Box, 
          x5#0: Box, 
          x6#0: Box, 
          x7#0: Box, 
          x8#0: Box, 
          x9#0: Box, 
          x10#0: Box, 
          x11#0: Box, 
          x12#0: Box, 
          x13#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
             && $IsBox(x5#0, #$T5)
             && $IsBox(x6#0, #$T6)
             && $IsBox(x7#0, #$T7)
             && $IsBox(x8#0, #$T8)
             && $IsBox(x9#0, #$T9)
             && $IsBox(x10#0, #$T10)
             && $IsBox(x11#0, #$T11)
             && $IsBox(x12#0, #$T12)
             && $IsBox(x13#0, #$T13)
           ==> Requires14(#$T0, 
            #$T1, 
            #$T2, 
            #$T3, 
            #$T4, 
            #$T5, 
            #$T6, 
            #$T7, 
            #$T8, 
            #$T9, 
            #$T10, 
            #$T11, 
            #$T12, 
            #$T13, 
            #$R, 
            $OneHeap, 
            f#0, 
            x0#0, 
            x1#0, 
            x2#0, 
            x3#0, 
            x4#0, 
            x5#0, 
            x6#0, 
            x7#0, 
            x8#0, 
            x9#0, 
            x10#0, 
            x11#0, 
            x12#0, 
            x13#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc14
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, 
      Tclass._System.___hTotalFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R), 
      $h) } 
  $IsAlloc(f#0, 
      Tclass._System.___hTotalFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R), 
      $h)
     <==> $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc14(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$R), 
      $h));

function Tclass._System.___hFunc15(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc15: TyTag;

// Tclass._System.___hFunc15 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tag(Tclass._System.___hFunc15(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$T14, 
          #$R))
       == Tagclass._System.___hFunc15
     && TagFamily(Tclass._System.___hFunc15(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$T14, 
          #$R))
       == tytagFamily$_#Func15);

function Tclass._System.___hFunc15_0(Ty) : Ty;

// Tclass._System.___hFunc15 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hFunc15_0(Tclass._System.___hFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T0);

function Tclass._System.___hFunc15_1(Ty) : Ty;

// Tclass._System.___hFunc15 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hFunc15_1(Tclass._System.___hFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T1);

function Tclass._System.___hFunc15_2(Ty) : Ty;

// Tclass._System.___hFunc15 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hFunc15_2(Tclass._System.___hFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T2);

function Tclass._System.___hFunc15_3(Ty) : Ty;

// Tclass._System.___hFunc15 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hFunc15_3(Tclass._System.___hFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T3);

function Tclass._System.___hFunc15_4(Ty) : Ty;

// Tclass._System.___hFunc15 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hFunc15_4(Tclass._System.___hFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T4);

function Tclass._System.___hFunc15_5(Ty) : Ty;

// Tclass._System.___hFunc15 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hFunc15_5(Tclass._System.___hFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T5);

function Tclass._System.___hFunc15_6(Ty) : Ty;

// Tclass._System.___hFunc15 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hFunc15_6(Tclass._System.___hFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T6);

function Tclass._System.___hFunc15_7(Ty) : Ty;

// Tclass._System.___hFunc15 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hFunc15_7(Tclass._System.___hFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T7);

function Tclass._System.___hFunc15_8(Ty) : Ty;

// Tclass._System.___hFunc15 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hFunc15_8(Tclass._System.___hFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T8);

function Tclass._System.___hFunc15_9(Ty) : Ty;

// Tclass._System.___hFunc15 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hFunc15_9(Tclass._System.___hFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T9);

function Tclass._System.___hFunc15_10(Ty) : Ty;

// Tclass._System.___hFunc15 injectivity 10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hFunc15_10(Tclass._System.___hFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T10);

function Tclass._System.___hFunc15_11(Ty) : Ty;

// Tclass._System.___hFunc15 injectivity 11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hFunc15_11(Tclass._System.___hFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T11);

function Tclass._System.___hFunc15_12(Ty) : Ty;

// Tclass._System.___hFunc15 injectivity 12
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hFunc15_12(Tclass._System.___hFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T12);

function Tclass._System.___hFunc15_13(Ty) : Ty;

// Tclass._System.___hFunc15 injectivity 13
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hFunc15_13(Tclass._System.___hFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T13);

function Tclass._System.___hFunc15_14(Ty) : Ty;

// Tclass._System.___hFunc15 injectivity 14
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hFunc15_14(Tclass._System.___hFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T14);

function Tclass._System.___hFunc15_15(Ty) : Ty;

// Tclass._System.___hFunc15 injectivity 15
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hFunc15_15(Tclass._System.___hFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc15
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hFunc15(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$T14, 
          #$R)));

function Handle15([Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set)
   : HandleType;

function Apply15(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : Box;

function Requires15(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : bool;

function Reads15(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box :: 
  { Apply15(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      heap, 
      Handle15(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14) } 
  Apply15(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      heap, 
      Handle15(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14)
     == h[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8, bx9, bx10, bx11, bx12, bx13, bx14]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box :: 
  { Requires15(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      heap, 
      Handle15(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14) } 
  r[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8, bx9, bx10, bx11, bx12, bx13, bx14]
     ==> Requires15(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      heap, 
      Handle15(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box, 
    bx: Box :: 
  { Set#IsMember(Reads15(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        heap, 
        Handle15(h, r, rd), 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14), 
      bx) } 
  Set#IsMember(Reads15(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        heap, 
        Handle15(h, r, rd), 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14), 
      bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8, bx9, bx10, bx11, bx12, bx13, bx14], 
      bx));

function {:inline} Requires15#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box)
   : bool
{
  true
}

function {:inline} Reads15#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box)
   : bool
{
  true
}

// frame axiom for Reads15
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box :: 
  { $HeapSucc(h0, h1), Reads15(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $IsBox(bx13, t13)
       && $IsBox(bx14, t14)
       && $Is(f, 
        Tclass._System.___hFunc15(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads15(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                t13, 
                t14, 
                t15, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11, 
                bx12, 
                bx13, 
                bx14), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads15(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14)
       == Reads15(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14));

// frame axiom for Reads15
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box :: 
  { $HeapSucc(h0, h1), Reads15(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $IsBox(bx13, t13)
       && $IsBox(bx14, t14)
       && $Is(f, 
        Tclass._System.___hFunc15(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads15(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                t13, 
                t14, 
                t15, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11, 
                bx12, 
                bx13, 
                bx14), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads15(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14)
       == Reads15(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14));

// frame axiom for Requires15
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box :: 
  { $HeapSucc(h0, h1), Requires15(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $IsBox(bx13, t13)
       && $IsBox(bx14, t14)
       && $Is(f, 
        Tclass._System.___hFunc15(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads15(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                t13, 
                t14, 
                t15, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11, 
                bx12, 
                bx13, 
                bx14), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires15(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14)
       == Requires15(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14));

// frame axiom for Requires15
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box :: 
  { $HeapSucc(h0, h1), Requires15(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $IsBox(bx13, t13)
       && $IsBox(bx14, t14)
       && $Is(f, 
        Tclass._System.___hFunc15(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads15(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                t13, 
                t14, 
                t15, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11, 
                bx12, 
                bx13, 
                bx14), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires15(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14)
       == Requires15(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14));

// frame axiom for Apply15
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box :: 
  { $HeapSucc(h0, h1), Apply15(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $IsBox(bx13, t13)
       && $IsBox(bx14, t14)
       && $Is(f, 
        Tclass._System.___hFunc15(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads15(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                t13, 
                t14, 
                t15, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11, 
                bx12, 
                bx13, 
                bx14), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply15(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14)
       == Apply15(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14));

// frame axiom for Apply15
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box :: 
  { $HeapSucc(h0, h1), Apply15(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $IsBox(bx13, t13)
       && $IsBox(bx14, t14)
       && $Is(f, 
        Tclass._System.___hFunc15(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads15(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                t13, 
                t14, 
                t15, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11, 
                bx12, 
                bx13, 
                bx14), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply15(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14)
       == Apply15(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14));

// empty-reads property for Reads15 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box :: 
  { Reads15(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      $OneHeap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14), $IsGoodHeap(heap) } 
    { Reads15(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      heap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $IsBox(bx13, t13)
       && $IsBox(bx14, t14)
       && $Is(f, 
        Tclass._System.___hFunc15(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15))
     ==> (Set#Equal(Reads15(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          t13, 
          t14, 
          t15, 
          $OneHeap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11, 
          bx12, 
          bx13, 
          bx14), 
        Set#Empty(): Set)
       <==> Set#Equal(Reads15(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          t13, 
          t14, 
          t15, 
          heap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11, 
          bx12, 
          bx13, 
          bx14), 
        Set#Empty(): Set)));

// empty-reads property for Requires15
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box :: 
  { Requires15(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      $OneHeap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14), $IsGoodHeap(heap) } 
    { Requires15(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      heap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $IsBox(bx13, t13)
       && $IsBox(bx14, t14)
       && $Is(f, 
        Tclass._System.___hFunc15(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15))
       && Set#Equal(Reads15(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          t13, 
          t14, 
          t15, 
          $OneHeap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11, 
          bx12, 
          bx13, 
          bx14), 
        Set#Empty(): Set)
     ==> Requires15(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        $OneHeap, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14)
       == Requires15(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        heap, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty :: 
  { $Is(f, 
      Tclass._System.___hFunc15(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15)) } 
  $Is(f, 
      Tclass._System.___hFunc15(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15))
     <==> (forall h: Heap, 
        bx0: Box, 
        bx1: Box, 
        bx2: Box, 
        bx3: Box, 
        bx4: Box, 
        bx5: Box, 
        bx6: Box, 
        bx7: Box, 
        bx8: Box, 
        bx9: Box, 
        bx10: Box, 
        bx11: Box, 
        bx12: Box, 
        bx13: Box, 
        bx14: Box :: 
      { Apply15(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          t13, 
          t14, 
          t15, 
          h, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11, 
          bx12, 
          bx13, 
          bx14) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && $IsBox(bx3, t3)
           && $IsBox(bx4, t4)
           && $IsBox(bx5, t5)
           && $IsBox(bx6, t6)
           && $IsBox(bx7, t7)
           && $IsBox(bx8, t8)
           && $IsBox(bx9, t9)
           && $IsBox(bx10, t10)
           && $IsBox(bx11, t11)
           && $IsBox(bx12, t12)
           && $IsBox(bx13, t13)
           && $IsBox(bx14, t14)
           && Requires15(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            t13, 
            t14, 
            t15, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11, 
            bx12, 
            bx13, 
            bx14)
         ==> $IsBox(Apply15(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            t13, 
            t14, 
            t15, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11, 
            bx12, 
            bx13, 
            bx14), 
          t15)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    u0: Ty, 
    u1: Ty, 
    u2: Ty, 
    u3: Ty, 
    u4: Ty, 
    u5: Ty, 
    u6: Ty, 
    u7: Ty, 
    u8: Ty, 
    u9: Ty, 
    u10: Ty, 
    u11: Ty, 
    u12: Ty, 
    u13: Ty, 
    u14: Ty, 
    u15: Ty :: 
  { $Is(f, 
      Tclass._System.___hFunc15(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15)), $Is(f, 
      Tclass._System.___hFunc15(u0, u1, u2, u3, u4, u5, u6, u7, u8, u9, u10, u11, u12, u13, u14, u15)) } 
  $Is(f, 
        Tclass._System.___hFunc15(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u3) } { $IsBox(bx, t3) } 
        $IsBox(bx, u3) ==> $IsBox(bx, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, u4) } { $IsBox(bx, t4) } 
        $IsBox(bx, u4) ==> $IsBox(bx, t4))
       && (forall bx: Box :: 
        { $IsBox(bx, u5) } { $IsBox(bx, t5) } 
        $IsBox(bx, u5) ==> $IsBox(bx, t5))
       && (forall bx: Box :: 
        { $IsBox(bx, u6) } { $IsBox(bx, t6) } 
        $IsBox(bx, u6) ==> $IsBox(bx, t6))
       && (forall bx: Box :: 
        { $IsBox(bx, u7) } { $IsBox(bx, t7) } 
        $IsBox(bx, u7) ==> $IsBox(bx, t7))
       && (forall bx: Box :: 
        { $IsBox(bx, u8) } { $IsBox(bx, t8) } 
        $IsBox(bx, u8) ==> $IsBox(bx, t8))
       && (forall bx: Box :: 
        { $IsBox(bx, u9) } { $IsBox(bx, t9) } 
        $IsBox(bx, u9) ==> $IsBox(bx, t9))
       && (forall bx: Box :: 
        { $IsBox(bx, u10) } { $IsBox(bx, t10) } 
        $IsBox(bx, u10) ==> $IsBox(bx, t10))
       && (forall bx: Box :: 
        { $IsBox(bx, u11) } { $IsBox(bx, t11) } 
        $IsBox(bx, u11) ==> $IsBox(bx, t11))
       && (forall bx: Box :: 
        { $IsBox(bx, u12) } { $IsBox(bx, t12) } 
        $IsBox(bx, u12) ==> $IsBox(bx, t12))
       && (forall bx: Box :: 
        { $IsBox(bx, u13) } { $IsBox(bx, t13) } 
        $IsBox(bx, u13) ==> $IsBox(bx, t13))
       && (forall bx: Box :: 
        { $IsBox(bx, u14) } { $IsBox(bx, t14) } 
        $IsBox(bx, u14) ==> $IsBox(bx, t14))
       && (forall bx: Box :: 
        { $IsBox(bx, t15) } { $IsBox(bx, u15) } 
        $IsBox(bx, t15) ==> $IsBox(bx, u15))
     ==> $Is(f, 
      Tclass._System.___hFunc15(u0, u1, u2, u3, u4, u5, u6, u7, u8, u9, u10, u11, u12, u13, u14, u15)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    h: Heap :: 
  { $IsAlloc(f, 
      Tclass._System.___hFunc15(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15), 
      h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, 
        Tclass._System.___hFunc15(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15), 
        h)
       <==> (forall bx0: Box, 
          bx1: Box, 
          bx2: Box, 
          bx3: Box, 
          bx4: Box, 
          bx5: Box, 
          bx6: Box, 
          bx7: Box, 
          bx8: Box, 
          bx9: Box, 
          bx10: Box, 
          bx11: Box, 
          bx12: Box, 
          bx13: Box, 
          bx14: Box :: 
        { Apply15(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            t13, 
            t14, 
            t15, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11, 
            bx12, 
            bx13, 
            bx14) } 
          { Reads15(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            t13, 
            t14, 
            t15, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11, 
            bx12, 
            bx13, 
            bx14) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && 
            $IsBox(bx3, t3)
             && $IsAllocBox(bx3, t3, h)
             && 
            $IsBox(bx4, t4)
             && $IsAllocBox(bx4, t4, h)
             && 
            $IsBox(bx5, t5)
             && $IsAllocBox(bx5, t5, h)
             && 
            $IsBox(bx6, t6)
             && $IsAllocBox(bx6, t6, h)
             && 
            $IsBox(bx7, t7)
             && $IsAllocBox(bx7, t7, h)
             && 
            $IsBox(bx8, t8)
             && $IsAllocBox(bx8, t8, h)
             && 
            $IsBox(bx9, t9)
             && $IsAllocBox(bx9, t9, h)
             && 
            $IsBox(bx10, t10)
             && $IsAllocBox(bx10, t10, h)
             && 
            $IsBox(bx11, t11)
             && $IsAllocBox(bx11, t11, h)
             && 
            $IsBox(bx12, t12)
             && $IsAllocBox(bx12, t12, h)
             && 
            $IsBox(bx13, t13)
             && $IsAllocBox(bx13, t13, h)
             && 
            $IsBox(bx14, t14)
             && $IsAllocBox(bx14, t14, h)
             && Requires15(t0, 
              t1, 
              t2, 
              t3, 
              t4, 
              t5, 
              t6, 
              t7, 
              t8, 
              t9, 
              t10, 
              t11, 
              t12, 
              t13, 
              t14, 
              t15, 
              h, 
              f, 
              bx0, 
              bx1, 
              bx2, 
              bx3, 
              bx4, 
              bx5, 
              bx6, 
              bx7, 
              bx8, 
              bx9, 
              bx10, 
              bx11, 
              bx12, 
              bx13, 
              bx14)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads15(t0, 
                  t1, 
                  t2, 
                  t3, 
                  t4, 
                  t5, 
                  t6, 
                  t7, 
                  t8, 
                  t9, 
                  t10, 
                  t11, 
                  t12, 
                  t13, 
                  t14, 
                  t15, 
                  h, 
                  f, 
                  bx0, 
                  bx1, 
                  bx2, 
                  bx3, 
                  bx4, 
                  bx5, 
                  bx6, 
                  bx7, 
                  bx8, 
                  bx9, 
                  bx10, 
                  bx11, 
                  bx12, 
                  bx13, 
                  bx14), 
                $Box(r)) } 
            r != null
                 && Set#IsMember(Reads15(t0, 
                    t1, 
                    t2, 
                    t3, 
                    t4, 
                    t5, 
                    t6, 
                    t7, 
                    t8, 
                    t9, 
                    t10, 
                    t11, 
                    t12, 
                    t13, 
                    t14, 
                    t15, 
                    h, 
                    f, 
                    bx0, 
                    bx1, 
                    bx2, 
                    bx3, 
                    bx4, 
                    bx5, 
                    bx6, 
                    bx7, 
                    bx8, 
                    bx9, 
                    bx10, 
                    bx11, 
                    bx12, 
                    bx13, 
                    bx14), 
                  $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    h: Heap :: 
  { $IsAlloc(f, 
      Tclass._System.___hFunc15(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15), 
      h) } 
  $IsGoodHeap(h)
       && $IsAlloc(f, 
        Tclass._System.___hFunc15(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15), 
        h)
     ==> (forall bx0: Box, 
        bx1: Box, 
        bx2: Box, 
        bx3: Box, 
        bx4: Box, 
        bx5: Box, 
        bx6: Box, 
        bx7: Box, 
        bx8: Box, 
        bx9: Box, 
        bx10: Box, 
        bx11: Box, 
        bx12: Box, 
        bx13: Box, 
        bx14: Box :: 
      { Apply15(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          t13, 
          t14, 
          t15, 
          h, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11, 
          bx12, 
          bx13, 
          bx14) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && $IsAllocBox(bx3, t3, h)
           && $IsAllocBox(bx4, t4, h)
           && $IsAllocBox(bx5, t5, h)
           && $IsAllocBox(bx6, t6, h)
           && $IsAllocBox(bx7, t7, h)
           && $IsAllocBox(bx8, t8, h)
           && $IsAllocBox(bx9, t9, h)
           && $IsAllocBox(bx10, t10, h)
           && $IsAllocBox(bx11, t11, h)
           && $IsAllocBox(bx12, t12, h)
           && $IsAllocBox(bx13, t13, h)
           && $IsAllocBox(bx14, t14, h)
           && Requires15(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            t13, 
            t14, 
            t15, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11, 
            bx12, 
            bx13, 
            bx14)
         ==> $IsAllocBox(Apply15(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            t13, 
            t14, 
            t15, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11, 
            bx12, 
            bx13, 
            bx14), 
          t15, 
          h)));

function Tclass._System.___hPartialFunc15(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc15: TyTag;

// Tclass._System.___hPartialFunc15 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tag(Tclass._System.___hPartialFunc15(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$T14, 
          #$R))
       == Tagclass._System.___hPartialFunc15
     && TagFamily(Tclass._System.___hPartialFunc15(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$T14, 
          #$R))
       == tytagFamily$_#PartialFunc15);

function Tclass._System.___hPartialFunc15_0(Ty) : Ty;

// Tclass._System.___hPartialFunc15 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hPartialFunc15_0(Tclass._System.___hPartialFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T0);

function Tclass._System.___hPartialFunc15_1(Ty) : Ty;

// Tclass._System.___hPartialFunc15 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hPartialFunc15_1(Tclass._System.___hPartialFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T1);

function Tclass._System.___hPartialFunc15_2(Ty) : Ty;

// Tclass._System.___hPartialFunc15 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hPartialFunc15_2(Tclass._System.___hPartialFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T2);

function Tclass._System.___hPartialFunc15_3(Ty) : Ty;

// Tclass._System.___hPartialFunc15 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hPartialFunc15_3(Tclass._System.___hPartialFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T3);

function Tclass._System.___hPartialFunc15_4(Ty) : Ty;

// Tclass._System.___hPartialFunc15 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hPartialFunc15_4(Tclass._System.___hPartialFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T4);

function Tclass._System.___hPartialFunc15_5(Ty) : Ty;

// Tclass._System.___hPartialFunc15 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hPartialFunc15_5(Tclass._System.___hPartialFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T5);

function Tclass._System.___hPartialFunc15_6(Ty) : Ty;

// Tclass._System.___hPartialFunc15 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hPartialFunc15_6(Tclass._System.___hPartialFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T6);

function Tclass._System.___hPartialFunc15_7(Ty) : Ty;

// Tclass._System.___hPartialFunc15 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hPartialFunc15_7(Tclass._System.___hPartialFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T7);

function Tclass._System.___hPartialFunc15_8(Ty) : Ty;

// Tclass._System.___hPartialFunc15 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hPartialFunc15_8(Tclass._System.___hPartialFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T8);

function Tclass._System.___hPartialFunc15_9(Ty) : Ty;

// Tclass._System.___hPartialFunc15 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hPartialFunc15_9(Tclass._System.___hPartialFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T9);

function Tclass._System.___hPartialFunc15_10(Ty) : Ty;

// Tclass._System.___hPartialFunc15 injectivity 10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hPartialFunc15_10(Tclass._System.___hPartialFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T10);

function Tclass._System.___hPartialFunc15_11(Ty) : Ty;

// Tclass._System.___hPartialFunc15 injectivity 11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hPartialFunc15_11(Tclass._System.___hPartialFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T11);

function Tclass._System.___hPartialFunc15_12(Ty) : Ty;

// Tclass._System.___hPartialFunc15 injectivity 12
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hPartialFunc15_12(Tclass._System.___hPartialFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T12);

function Tclass._System.___hPartialFunc15_13(Ty) : Ty;

// Tclass._System.___hPartialFunc15 injectivity 13
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hPartialFunc15_13(Tclass._System.___hPartialFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T13);

function Tclass._System.___hPartialFunc15_14(Ty) : Ty;

// Tclass._System.___hPartialFunc15 injectivity 14
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hPartialFunc15_14(Tclass._System.___hPartialFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T14);

function Tclass._System.___hPartialFunc15_15(Ty) : Ty;

// Tclass._System.___hPartialFunc15 injectivity 15
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hPartialFunc15_15(Tclass._System.___hPartialFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc15
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hPartialFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hPartialFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hPartialFunc15(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$T14, 
          #$R)));

// $Is axiom for subset type _System._#PartialFunc15
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty, 
    f#0: HandleType :: 
  { $Is(f#0, 
      Tclass._System.___hPartialFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R)) } 
  $Is(f#0, 
      Tclass._System.___hPartialFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     <==> $Is(f#0, 
        Tclass._System.___hFunc15(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$T14, 
          #$R))
       && (forall x0#0: Box, 
          x1#0: Box, 
          x2#0: Box, 
          x3#0: Box, 
          x4#0: Box, 
          x5#0: Box, 
          x6#0: Box, 
          x7#0: Box, 
          x8#0: Box, 
          x9#0: Box, 
          x10#0: Box, 
          x11#0: Box, 
          x12#0: Box, 
          x13#0: Box, 
          x14#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
             && $IsBox(x5#0, #$T5)
             && $IsBox(x6#0, #$T6)
             && $IsBox(x7#0, #$T7)
             && $IsBox(x8#0, #$T8)
             && $IsBox(x9#0, #$T9)
             && $IsBox(x10#0, #$T10)
             && $IsBox(x11#0, #$T11)
             && $IsBox(x12#0, #$T12)
             && $IsBox(x13#0, #$T13)
             && $IsBox(x14#0, #$T14)
           ==> Set#Equal(Reads15(#$T0, 
              #$T1, 
              #$T2, 
              #$T3, 
              #$T4, 
              #$T5, 
              #$T6, 
              #$T7, 
              #$T8, 
              #$T9, 
              #$T10, 
              #$T11, 
              #$T12, 
              #$T13, 
              #$T14, 
              #$R, 
              $OneHeap, 
              f#0, 
              x0#0, 
              x1#0, 
              x2#0, 
              x3#0, 
              x4#0, 
              x5#0, 
              x6#0, 
              x7#0, 
              x8#0, 
              x9#0, 
              x10#0, 
              x11#0, 
              x12#0, 
              x13#0, 
              x14#0), 
            Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc15
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R), 
      $h) } 
  $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R), 
      $h)
     <==> $IsAlloc(f#0, 
      Tclass._System.___hFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R), 
      $h));

function Tclass._System.___hTotalFunc15(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc15: TyTag;

// Tclass._System.___hTotalFunc15 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tag(Tclass._System.___hTotalFunc15(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$T14, 
          #$R))
       == Tagclass._System.___hTotalFunc15
     && TagFamily(Tclass._System.___hTotalFunc15(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$T14, 
          #$R))
       == tytagFamily$_#TotalFunc15);

function Tclass._System.___hTotalFunc15_0(Ty) : Ty;

// Tclass._System.___hTotalFunc15 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hTotalFunc15_0(Tclass._System.___hTotalFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T0);

function Tclass._System.___hTotalFunc15_1(Ty) : Ty;

// Tclass._System.___hTotalFunc15 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hTotalFunc15_1(Tclass._System.___hTotalFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T1);

function Tclass._System.___hTotalFunc15_2(Ty) : Ty;

// Tclass._System.___hTotalFunc15 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hTotalFunc15_2(Tclass._System.___hTotalFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T2);

function Tclass._System.___hTotalFunc15_3(Ty) : Ty;

// Tclass._System.___hTotalFunc15 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hTotalFunc15_3(Tclass._System.___hTotalFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T3);

function Tclass._System.___hTotalFunc15_4(Ty) : Ty;

// Tclass._System.___hTotalFunc15 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hTotalFunc15_4(Tclass._System.___hTotalFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T4);

function Tclass._System.___hTotalFunc15_5(Ty) : Ty;

// Tclass._System.___hTotalFunc15 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hTotalFunc15_5(Tclass._System.___hTotalFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T5);

function Tclass._System.___hTotalFunc15_6(Ty) : Ty;

// Tclass._System.___hTotalFunc15 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hTotalFunc15_6(Tclass._System.___hTotalFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T6);

function Tclass._System.___hTotalFunc15_7(Ty) : Ty;

// Tclass._System.___hTotalFunc15 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hTotalFunc15_7(Tclass._System.___hTotalFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T7);

function Tclass._System.___hTotalFunc15_8(Ty) : Ty;

// Tclass._System.___hTotalFunc15 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hTotalFunc15_8(Tclass._System.___hTotalFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T8);

function Tclass._System.___hTotalFunc15_9(Ty) : Ty;

// Tclass._System.___hTotalFunc15 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hTotalFunc15_9(Tclass._System.___hTotalFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T9);

function Tclass._System.___hTotalFunc15_10(Ty) : Ty;

// Tclass._System.___hTotalFunc15 injectivity 10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hTotalFunc15_10(Tclass._System.___hTotalFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T10);

function Tclass._System.___hTotalFunc15_11(Ty) : Ty;

// Tclass._System.___hTotalFunc15 injectivity 11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hTotalFunc15_11(Tclass._System.___hTotalFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T11);

function Tclass._System.___hTotalFunc15_12(Ty) : Ty;

// Tclass._System.___hTotalFunc15 injectivity 12
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hTotalFunc15_12(Tclass._System.___hTotalFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T12);

function Tclass._System.___hTotalFunc15_13(Ty) : Ty;

// Tclass._System.___hTotalFunc15 injectivity 13
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hTotalFunc15_13(Tclass._System.___hTotalFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T13);

function Tclass._System.___hTotalFunc15_14(Ty) : Ty;

// Tclass._System.___hTotalFunc15 injectivity 14
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hTotalFunc15_14(Tclass._System.___hTotalFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$T14);

function Tclass._System.___hTotalFunc15_15(Ty) : Ty;

// Tclass._System.___hTotalFunc15 injectivity 15
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc15(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$R) } 
  Tclass._System.___hTotalFunc15_15(Tclass._System.___hTotalFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc15
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hTotalFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hTotalFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hTotalFunc15(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$T14, 
          #$R)));

// $Is axiom for subset type _System._#TotalFunc15
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty, 
    f#0: HandleType :: 
  { $Is(f#0, 
      Tclass._System.___hTotalFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R)) } 
  $Is(f#0, 
      Tclass._System.___hTotalFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R))
     <==> $Is(f#0, 
        Tclass._System.___hPartialFunc15(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$T14, 
          #$R))
       && (forall x0#0: Box, 
          x1#0: Box, 
          x2#0: Box, 
          x3#0: Box, 
          x4#0: Box, 
          x5#0: Box, 
          x6#0: Box, 
          x7#0: Box, 
          x8#0: Box, 
          x9#0: Box, 
          x10#0: Box, 
          x11#0: Box, 
          x12#0: Box, 
          x13#0: Box, 
          x14#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
             && $IsBox(x5#0, #$T5)
             && $IsBox(x6#0, #$T6)
             && $IsBox(x7#0, #$T7)
             && $IsBox(x8#0, #$T8)
             && $IsBox(x9#0, #$T9)
             && $IsBox(x10#0, #$T10)
             && $IsBox(x11#0, #$T11)
             && $IsBox(x12#0, #$T12)
             && $IsBox(x13#0, #$T13)
             && $IsBox(x14#0, #$T14)
           ==> Requires15(#$T0, 
            #$T1, 
            #$T2, 
            #$T3, 
            #$T4, 
            #$T5, 
            #$T6, 
            #$T7, 
            #$T8, 
            #$T9, 
            #$T10, 
            #$T11, 
            #$T12, 
            #$T13, 
            #$T14, 
            #$R, 
            $OneHeap, 
            f#0, 
            x0#0, 
            x1#0, 
            x2#0, 
            x3#0, 
            x4#0, 
            x5#0, 
            x6#0, 
            x7#0, 
            x8#0, 
            x9#0, 
            x10#0, 
            x11#0, 
            x12#0, 
            x13#0, 
            x14#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc15
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, 
      Tclass._System.___hTotalFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R), 
      $h) } 
  $IsAlloc(f#0, 
      Tclass._System.___hTotalFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R), 
      $h)
     <==> $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc15(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$R), 
      $h));

function Tclass._System.___hFunc16(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hFunc16: TyTag;

// Tclass._System.___hFunc16 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tag(Tclass._System.___hFunc16(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$T14, 
          #$T15, 
          #$R))
       == Tagclass._System.___hFunc16
     && TagFamily(Tclass._System.___hFunc16(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$T14, 
          #$T15, 
          #$R))
       == tytagFamily$_#Func16);

function Tclass._System.___hFunc16_0(Ty) : Ty;

// Tclass._System.___hFunc16 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hFunc16_0(Tclass._System.___hFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T0);

function Tclass._System.___hFunc16_1(Ty) : Ty;

// Tclass._System.___hFunc16 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hFunc16_1(Tclass._System.___hFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T1);

function Tclass._System.___hFunc16_2(Ty) : Ty;

// Tclass._System.___hFunc16 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hFunc16_2(Tclass._System.___hFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T2);

function Tclass._System.___hFunc16_3(Ty) : Ty;

// Tclass._System.___hFunc16 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hFunc16_3(Tclass._System.___hFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T3);

function Tclass._System.___hFunc16_4(Ty) : Ty;

// Tclass._System.___hFunc16 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hFunc16_4(Tclass._System.___hFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T4);

function Tclass._System.___hFunc16_5(Ty) : Ty;

// Tclass._System.___hFunc16 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hFunc16_5(Tclass._System.___hFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T5);

function Tclass._System.___hFunc16_6(Ty) : Ty;

// Tclass._System.___hFunc16 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hFunc16_6(Tclass._System.___hFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T6);

function Tclass._System.___hFunc16_7(Ty) : Ty;

// Tclass._System.___hFunc16 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hFunc16_7(Tclass._System.___hFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T7);

function Tclass._System.___hFunc16_8(Ty) : Ty;

// Tclass._System.___hFunc16 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hFunc16_8(Tclass._System.___hFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T8);

function Tclass._System.___hFunc16_9(Ty) : Ty;

// Tclass._System.___hFunc16 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hFunc16_9(Tclass._System.___hFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T9);

function Tclass._System.___hFunc16_10(Ty) : Ty;

// Tclass._System.___hFunc16 injectivity 10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hFunc16_10(Tclass._System.___hFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T10);

function Tclass._System.___hFunc16_11(Ty) : Ty;

// Tclass._System.___hFunc16 injectivity 11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hFunc16_11(Tclass._System.___hFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T11);

function Tclass._System.___hFunc16_12(Ty) : Ty;

// Tclass._System.___hFunc16 injectivity 12
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hFunc16_12(Tclass._System.___hFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T12);

function Tclass._System.___hFunc16_13(Ty) : Ty;

// Tclass._System.___hFunc16 injectivity 13
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hFunc16_13(Tclass._System.___hFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T13);

function Tclass._System.___hFunc16_14(Ty) : Ty;

// Tclass._System.___hFunc16 injectivity 14
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hFunc16_14(Tclass._System.___hFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T14);

function Tclass._System.___hFunc16_15(Ty) : Ty;

// Tclass._System.___hFunc16 injectivity 15
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hFunc16_15(Tclass._System.___hFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T15);

function Tclass._System.___hFunc16_16(Ty) : Ty;

// Tclass._System.___hFunc16 injectivity 16
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hFunc16_16(Tclass._System.___hFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hFunc16
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hFunc16(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$T14, 
          #$T15, 
          #$R)));

function Handle16([Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set)
   : HandleType;

function Apply16(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : Box;

function Requires16(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : bool;

function Reads16(Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Ty, 
    Heap, 
    HandleType, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box, 
    Box)
   : Set;

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    t16: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box, 
    bx15: Box :: 
  { Apply16(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      t16, 
      heap, 
      Handle16(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14, 
      bx15) } 
  Apply16(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      t16, 
      heap, 
      Handle16(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14, 
      bx15)
     == h[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8, bx9, bx10, bx11, bx12, bx13, bx14, bx15]);

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    t16: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box, 
    bx15: Box :: 
  { Requires16(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      t16, 
      heap, 
      Handle16(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14, 
      bx15) } 
  r[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8, bx9, bx10, bx11, bx12, bx13, bx14, bx15]
     ==> Requires16(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      t16, 
      heap, 
      Handle16(h, r, rd), 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14, 
      bx15));

axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    t16: Ty, 
    heap: Heap, 
    h: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Box, 
    r: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]bool, 
    rd: [Heap,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box,Box]Set, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box, 
    bx15: Box, 
    bx: Box :: 
  { Set#IsMember(Reads16(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        t16, 
        heap, 
        Handle16(h, r, rd), 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14, 
        bx15), 
      bx) } 
  Set#IsMember(Reads16(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        t16, 
        heap, 
        Handle16(h, r, rd), 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14, 
        bx15), 
      bx)
     == Set#IsMember(rd[heap, bx0, bx1, bx2, bx3, bx4, bx5, bx6, bx7, bx8, bx9, bx10, bx11, bx12, bx13, bx14, bx15], 
      bx));

function {:inline} Requires16#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    t16: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box, 
    bx15: Box)
   : bool
{
  true
}

function {:inline} Reads16#canCall(t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    t16: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box, 
    bx15: Box)
   : bool
{
  true
}

// frame axiom for Reads16
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    t16: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box, 
    bx15: Box :: 
  { $HeapSucc(h0, h1), Reads16(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      t16, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14, 
      bx15) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $IsBox(bx13, t13)
       && $IsBox(bx14, t14)
       && $IsBox(bx15, t15)
       && $Is(f, 
        Tclass._System.___hFunc16(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads16(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                t13, 
                t14, 
                t15, 
                t16, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11, 
                bx12, 
                bx13, 
                bx14, 
                bx15), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads16(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        t16, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14, 
        bx15)
       == Reads16(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        t16, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14, 
        bx15));

// frame axiom for Reads16
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    t16: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box, 
    bx15: Box :: 
  { $HeapSucc(h0, h1), Reads16(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      t16, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14, 
      bx15) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $IsBox(bx13, t13)
       && $IsBox(bx14, t14)
       && $IsBox(bx15, t15)
       && $Is(f, 
        Tclass._System.___hFunc16(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads16(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                t13, 
                t14, 
                t15, 
                t16, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11, 
                bx12, 
                bx13, 
                bx14, 
                bx15), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Reads16(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        t16, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14, 
        bx15)
       == Reads16(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        t16, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14, 
        bx15));

// frame axiom for Requires16
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    t16: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box, 
    bx15: Box :: 
  { $HeapSucc(h0, h1), Requires16(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      t16, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14, 
      bx15) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $IsBox(bx13, t13)
       && $IsBox(bx14, t14)
       && $IsBox(bx15, t15)
       && $Is(f, 
        Tclass._System.___hFunc16(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads16(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                t13, 
                t14, 
                t15, 
                t16, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11, 
                bx12, 
                bx13, 
                bx14, 
                bx15), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires16(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        t16, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14, 
        bx15)
       == Requires16(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        t16, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14, 
        bx15));

// frame axiom for Requires16
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    t16: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box, 
    bx15: Box :: 
  { $HeapSucc(h0, h1), Requires16(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      t16, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14, 
      bx15) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $IsBox(bx13, t13)
       && $IsBox(bx14, t14)
       && $IsBox(bx15, t15)
       && $Is(f, 
        Tclass._System.___hFunc16(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads16(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                t13, 
                t14, 
                t15, 
                t16, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11, 
                bx12, 
                bx13, 
                bx14, 
                bx15), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Requires16(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        t16, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14, 
        bx15)
       == Requires16(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        t16, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14, 
        bx15));

// frame axiom for Apply16
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    t16: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box, 
    bx15: Box :: 
  { $HeapSucc(h0, h1), Apply16(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      t16, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14, 
      bx15) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $IsBox(bx13, t13)
       && $IsBox(bx14, t14)
       && $IsBox(bx15, t15)
       && $Is(f, 
        Tclass._System.___hFunc16(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads16(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                t13, 
                t14, 
                t15, 
                t16, 
                h0, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11, 
                bx12, 
                bx13, 
                bx14, 
                bx15), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply16(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        t16, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14, 
        bx15)
       == Apply16(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        t16, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14, 
        bx15));

// frame axiom for Apply16
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    t16: Ty, 
    h0: Heap, 
    h1: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box, 
    bx15: Box :: 
  { $HeapSucc(h0, h1), Apply16(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      t16, 
      h1, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14, 
      bx15) } 
  $HeapSucc(h0, h1)
       && 
      $IsGoodHeap(h0)
       && $IsGoodHeap(h1)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $IsBox(bx13, t13)
       && $IsBox(bx14, t14)
       && $IsBox(bx15, t15)
       && $Is(f, 
        Tclass._System.___hFunc16(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16))
       && (forall o: ref, fld: Field :: 
        o != null
             && Set#IsMember(Reads16(t0, 
                t1, 
                t2, 
                t3, 
                t4, 
                t5, 
                t6, 
                t7, 
                t8, 
                t9, 
                t10, 
                t11, 
                t12, 
                t13, 
                t14, 
                t15, 
                t16, 
                h1, 
                f, 
                bx0, 
                bx1, 
                bx2, 
                bx3, 
                bx4, 
                bx5, 
                bx6, 
                bx7, 
                bx8, 
                bx9, 
                bx10, 
                bx11, 
                bx12, 
                bx13, 
                bx14, 
                bx15), 
              $Box(o))
           ==> read(h0, o, fld) == read(h1, o, fld))
     ==> Apply16(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        t16, 
        h0, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14, 
        bx15)
       == Apply16(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        t16, 
        h1, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14, 
        bx15));

// empty-reads property for Reads16 
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    t16: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box, 
    bx15: Box :: 
  { Reads16(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      t16, 
      $OneHeap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14, 
      bx15), $IsGoodHeap(heap) } 
    { Reads16(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      t16, 
      heap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14, 
      bx15) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $IsBox(bx13, t13)
       && $IsBox(bx14, t14)
       && $IsBox(bx15, t15)
       && $Is(f, 
        Tclass._System.___hFunc16(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16))
     ==> (Set#Equal(Reads16(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          t13, 
          t14, 
          t15, 
          t16, 
          $OneHeap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11, 
          bx12, 
          bx13, 
          bx14, 
          bx15), 
        Set#Empty(): Set)
       <==> Set#Equal(Reads16(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          t13, 
          t14, 
          t15, 
          t16, 
          heap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11, 
          bx12, 
          bx13, 
          bx14, 
          bx15), 
        Set#Empty(): Set)));

// empty-reads property for Requires16
axiom (forall t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    t16: Ty, 
    heap: Heap, 
    f: HandleType, 
    bx0: Box, 
    bx1: Box, 
    bx2: Box, 
    bx3: Box, 
    bx4: Box, 
    bx5: Box, 
    bx6: Box, 
    bx7: Box, 
    bx8: Box, 
    bx9: Box, 
    bx10: Box, 
    bx11: Box, 
    bx12: Box, 
    bx13: Box, 
    bx14: Box, 
    bx15: Box :: 
  { Requires16(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      t16, 
      $OneHeap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14, 
      bx15), $IsGoodHeap(heap) } 
    { Requires16(t0, 
      t1, 
      t2, 
      t3, 
      t4, 
      t5, 
      t6, 
      t7, 
      t8, 
      t9, 
      t10, 
      t11, 
      t12, 
      t13, 
      t14, 
      t15, 
      t16, 
      heap, 
      f, 
      bx0, 
      bx1, 
      bx2, 
      bx3, 
      bx4, 
      bx5, 
      bx6, 
      bx7, 
      bx8, 
      bx9, 
      bx10, 
      bx11, 
      bx12, 
      bx13, 
      bx14, 
      bx15) } 
  $IsGoodHeap(heap)
       && 
      $IsBox(bx0, t0)
       && $IsBox(bx1, t1)
       && $IsBox(bx2, t2)
       && $IsBox(bx3, t3)
       && $IsBox(bx4, t4)
       && $IsBox(bx5, t5)
       && $IsBox(bx6, t6)
       && $IsBox(bx7, t7)
       && $IsBox(bx8, t8)
       && $IsBox(bx9, t9)
       && $IsBox(bx10, t10)
       && $IsBox(bx11, t11)
       && $IsBox(bx12, t12)
       && $IsBox(bx13, t13)
       && $IsBox(bx14, t14)
       && $IsBox(bx15, t15)
       && $Is(f, 
        Tclass._System.___hFunc16(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16))
       && Set#Equal(Reads16(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          t13, 
          t14, 
          t15, 
          t16, 
          $OneHeap, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11, 
          bx12, 
          bx13, 
          bx14, 
          bx15), 
        Set#Empty(): Set)
     ==> Requires16(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        t16, 
        $OneHeap, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14, 
        bx15)
       == Requires16(t0, 
        t1, 
        t2, 
        t3, 
        t4, 
        t5, 
        t6, 
        t7, 
        t8, 
        t9, 
        t10, 
        t11, 
        t12, 
        t13, 
        t14, 
        t15, 
        t16, 
        heap, 
        f, 
        bx0, 
        bx1, 
        bx2, 
        bx3, 
        bx4, 
        bx5, 
        bx6, 
        bx7, 
        bx8, 
        bx9, 
        bx10, 
        bx11, 
        bx12, 
        bx13, 
        bx14, 
        bx15));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    t16: Ty :: 
  { $Is(f, 
      Tclass._System.___hFunc16(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16)) } 
  $Is(f, 
      Tclass._System.___hFunc16(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16))
     <==> (forall h: Heap, 
        bx0: Box, 
        bx1: Box, 
        bx2: Box, 
        bx3: Box, 
        bx4: Box, 
        bx5: Box, 
        bx6: Box, 
        bx7: Box, 
        bx8: Box, 
        bx9: Box, 
        bx10: Box, 
        bx11: Box, 
        bx12: Box, 
        bx13: Box, 
        bx14: Box, 
        bx15: Box :: 
      { Apply16(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          t13, 
          t14, 
          t15, 
          t16, 
          h, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11, 
          bx12, 
          bx13, 
          bx14, 
          bx15) } 
      $IsGoodHeap(h)
           && 
          $IsBox(bx0, t0)
           && $IsBox(bx1, t1)
           && $IsBox(bx2, t2)
           && $IsBox(bx3, t3)
           && $IsBox(bx4, t4)
           && $IsBox(bx5, t5)
           && $IsBox(bx6, t6)
           && $IsBox(bx7, t7)
           && $IsBox(bx8, t8)
           && $IsBox(bx9, t9)
           && $IsBox(bx10, t10)
           && $IsBox(bx11, t11)
           && $IsBox(bx12, t12)
           && $IsBox(bx13, t13)
           && $IsBox(bx14, t14)
           && $IsBox(bx15, t15)
           && Requires16(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            t13, 
            t14, 
            t15, 
            t16, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11, 
            bx12, 
            bx13, 
            bx14, 
            bx15)
         ==> $IsBox(Apply16(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            t13, 
            t14, 
            t15, 
            t16, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11, 
            bx12, 
            bx13, 
            bx14, 
            bx15), 
          t16)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    t16: Ty, 
    u0: Ty, 
    u1: Ty, 
    u2: Ty, 
    u3: Ty, 
    u4: Ty, 
    u5: Ty, 
    u6: Ty, 
    u7: Ty, 
    u8: Ty, 
    u9: Ty, 
    u10: Ty, 
    u11: Ty, 
    u12: Ty, 
    u13: Ty, 
    u14: Ty, 
    u15: Ty, 
    u16: Ty :: 
  { $Is(f, 
      Tclass._System.___hFunc16(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16)), $Is(f, 
      Tclass._System.___hFunc16(u0, u1, u2, u3, u4, u5, u6, u7, u8, u9, u10, u11, u12, u13, u14, u15, u16)) } 
  $Is(f, 
        Tclass._System.___hFunc16(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16))
       && (forall bx: Box :: 
        { $IsBox(bx, u0) } { $IsBox(bx, t0) } 
        $IsBox(bx, u0) ==> $IsBox(bx, t0))
       && (forall bx: Box :: 
        { $IsBox(bx, u1) } { $IsBox(bx, t1) } 
        $IsBox(bx, u1) ==> $IsBox(bx, t1))
       && (forall bx: Box :: 
        { $IsBox(bx, u2) } { $IsBox(bx, t2) } 
        $IsBox(bx, u2) ==> $IsBox(bx, t2))
       && (forall bx: Box :: 
        { $IsBox(bx, u3) } { $IsBox(bx, t3) } 
        $IsBox(bx, u3) ==> $IsBox(bx, t3))
       && (forall bx: Box :: 
        { $IsBox(bx, u4) } { $IsBox(bx, t4) } 
        $IsBox(bx, u4) ==> $IsBox(bx, t4))
       && (forall bx: Box :: 
        { $IsBox(bx, u5) } { $IsBox(bx, t5) } 
        $IsBox(bx, u5) ==> $IsBox(bx, t5))
       && (forall bx: Box :: 
        { $IsBox(bx, u6) } { $IsBox(bx, t6) } 
        $IsBox(bx, u6) ==> $IsBox(bx, t6))
       && (forall bx: Box :: 
        { $IsBox(bx, u7) } { $IsBox(bx, t7) } 
        $IsBox(bx, u7) ==> $IsBox(bx, t7))
       && (forall bx: Box :: 
        { $IsBox(bx, u8) } { $IsBox(bx, t8) } 
        $IsBox(bx, u8) ==> $IsBox(bx, t8))
       && (forall bx: Box :: 
        { $IsBox(bx, u9) } { $IsBox(bx, t9) } 
        $IsBox(bx, u9) ==> $IsBox(bx, t9))
       && (forall bx: Box :: 
        { $IsBox(bx, u10) } { $IsBox(bx, t10) } 
        $IsBox(bx, u10) ==> $IsBox(bx, t10))
       && (forall bx: Box :: 
        { $IsBox(bx, u11) } { $IsBox(bx, t11) } 
        $IsBox(bx, u11) ==> $IsBox(bx, t11))
       && (forall bx: Box :: 
        { $IsBox(bx, u12) } { $IsBox(bx, t12) } 
        $IsBox(bx, u12) ==> $IsBox(bx, t12))
       && (forall bx: Box :: 
        { $IsBox(bx, u13) } { $IsBox(bx, t13) } 
        $IsBox(bx, u13) ==> $IsBox(bx, t13))
       && (forall bx: Box :: 
        { $IsBox(bx, u14) } { $IsBox(bx, t14) } 
        $IsBox(bx, u14) ==> $IsBox(bx, t14))
       && (forall bx: Box :: 
        { $IsBox(bx, u15) } { $IsBox(bx, t15) } 
        $IsBox(bx, u15) ==> $IsBox(bx, t15))
       && (forall bx: Box :: 
        { $IsBox(bx, t16) } { $IsBox(bx, u16) } 
        $IsBox(bx, t16) ==> $IsBox(bx, u16))
     ==> $Is(f, 
      Tclass._System.___hFunc16(u0, u1, u2, u3, u4, u5, u6, u7, u8, u9, u10, u11, u12, u13, u14, u15, u16)));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    t16: Ty, 
    h: Heap :: 
  { $IsAlloc(f, 
      Tclass._System.___hFunc16(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16), 
      h) } 
  $IsGoodHeap(h)
     ==> ($IsAlloc(f, 
        Tclass._System.___hFunc16(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16), 
        h)
       <==> (forall bx0: Box, 
          bx1: Box, 
          bx2: Box, 
          bx3: Box, 
          bx4: Box, 
          bx5: Box, 
          bx6: Box, 
          bx7: Box, 
          bx8: Box, 
          bx9: Box, 
          bx10: Box, 
          bx11: Box, 
          bx12: Box, 
          bx13: Box, 
          bx14: Box, 
          bx15: Box :: 
        { Apply16(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            t13, 
            t14, 
            t15, 
            t16, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11, 
            bx12, 
            bx13, 
            bx14, 
            bx15) } 
          { Reads16(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            t13, 
            t14, 
            t15, 
            t16, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11, 
            bx12, 
            bx13, 
            bx14, 
            bx15) } 
        $IsBox(bx0, t0)
             && $IsAllocBox(bx0, t0, h)
             && 
            $IsBox(bx1, t1)
             && $IsAllocBox(bx1, t1, h)
             && 
            $IsBox(bx2, t2)
             && $IsAllocBox(bx2, t2, h)
             && 
            $IsBox(bx3, t3)
             && $IsAllocBox(bx3, t3, h)
             && 
            $IsBox(bx4, t4)
             && $IsAllocBox(bx4, t4, h)
             && 
            $IsBox(bx5, t5)
             && $IsAllocBox(bx5, t5, h)
             && 
            $IsBox(bx6, t6)
             && $IsAllocBox(bx6, t6, h)
             && 
            $IsBox(bx7, t7)
             && $IsAllocBox(bx7, t7, h)
             && 
            $IsBox(bx8, t8)
             && $IsAllocBox(bx8, t8, h)
             && 
            $IsBox(bx9, t9)
             && $IsAllocBox(bx9, t9, h)
             && 
            $IsBox(bx10, t10)
             && $IsAllocBox(bx10, t10, h)
             && 
            $IsBox(bx11, t11)
             && $IsAllocBox(bx11, t11, h)
             && 
            $IsBox(bx12, t12)
             && $IsAllocBox(bx12, t12, h)
             && 
            $IsBox(bx13, t13)
             && $IsAllocBox(bx13, t13, h)
             && 
            $IsBox(bx14, t14)
             && $IsAllocBox(bx14, t14, h)
             && 
            $IsBox(bx15, t15)
             && $IsAllocBox(bx15, t15, h)
             && Requires16(t0, 
              t1, 
              t2, 
              t3, 
              t4, 
              t5, 
              t6, 
              t7, 
              t8, 
              t9, 
              t10, 
              t11, 
              t12, 
              t13, 
              t14, 
              t15, 
              t16, 
              h, 
              f, 
              bx0, 
              bx1, 
              bx2, 
              bx3, 
              bx4, 
              bx5, 
              bx6, 
              bx7, 
              bx8, 
              bx9, 
              bx10, 
              bx11, 
              bx12, 
              bx13, 
              bx14, 
              bx15)
           ==> (forall r: ref :: 
            { Set#IsMember(Reads16(t0, 
                  t1, 
                  t2, 
                  t3, 
                  t4, 
                  t5, 
                  t6, 
                  t7, 
                  t8, 
                  t9, 
                  t10, 
                  t11, 
                  t12, 
                  t13, 
                  t14, 
                  t15, 
                  t16, 
                  h, 
                  f, 
                  bx0, 
                  bx1, 
                  bx2, 
                  bx3, 
                  bx4, 
                  bx5, 
                  bx6, 
                  bx7, 
                  bx8, 
                  bx9, 
                  bx10, 
                  bx11, 
                  bx12, 
                  bx13, 
                  bx14, 
                  bx15), 
                $Box(r)) } 
            r != null
                 && Set#IsMember(Reads16(t0, 
                    t1, 
                    t2, 
                    t3, 
                    t4, 
                    t5, 
                    t6, 
                    t7, 
                    t8, 
                    t9, 
                    t10, 
                    t11, 
                    t12, 
                    t13, 
                    t14, 
                    t15, 
                    t16, 
                    h, 
                    f, 
                    bx0, 
                    bx1, 
                    bx2, 
                    bx3, 
                    bx4, 
                    bx5, 
                    bx6, 
                    bx7, 
                    bx8, 
                    bx9, 
                    bx10, 
                    bx11, 
                    bx12, 
                    bx13, 
                    bx14, 
                    bx15), 
                  $Box(r))
               ==> $Unbox(read(h, r, alloc)): bool))));

axiom (forall f: HandleType, 
    t0: Ty, 
    t1: Ty, 
    t2: Ty, 
    t3: Ty, 
    t4: Ty, 
    t5: Ty, 
    t6: Ty, 
    t7: Ty, 
    t8: Ty, 
    t9: Ty, 
    t10: Ty, 
    t11: Ty, 
    t12: Ty, 
    t13: Ty, 
    t14: Ty, 
    t15: Ty, 
    t16: Ty, 
    h: Heap :: 
  { $IsAlloc(f, 
      Tclass._System.___hFunc16(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16), 
      h) } 
  $IsGoodHeap(h)
       && $IsAlloc(f, 
        Tclass._System.___hFunc16(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16), 
        h)
     ==> (forall bx0: Box, 
        bx1: Box, 
        bx2: Box, 
        bx3: Box, 
        bx4: Box, 
        bx5: Box, 
        bx6: Box, 
        bx7: Box, 
        bx8: Box, 
        bx9: Box, 
        bx10: Box, 
        bx11: Box, 
        bx12: Box, 
        bx13: Box, 
        bx14: Box, 
        bx15: Box :: 
      { Apply16(t0, 
          t1, 
          t2, 
          t3, 
          t4, 
          t5, 
          t6, 
          t7, 
          t8, 
          t9, 
          t10, 
          t11, 
          t12, 
          t13, 
          t14, 
          t15, 
          t16, 
          h, 
          f, 
          bx0, 
          bx1, 
          bx2, 
          bx3, 
          bx4, 
          bx5, 
          bx6, 
          bx7, 
          bx8, 
          bx9, 
          bx10, 
          bx11, 
          bx12, 
          bx13, 
          bx14, 
          bx15) } 
      $IsAllocBox(bx0, t0, h)
           && $IsAllocBox(bx1, t1, h)
           && $IsAllocBox(bx2, t2, h)
           && $IsAllocBox(bx3, t3, h)
           && $IsAllocBox(bx4, t4, h)
           && $IsAllocBox(bx5, t5, h)
           && $IsAllocBox(bx6, t6, h)
           && $IsAllocBox(bx7, t7, h)
           && $IsAllocBox(bx8, t8, h)
           && $IsAllocBox(bx9, t9, h)
           && $IsAllocBox(bx10, t10, h)
           && $IsAllocBox(bx11, t11, h)
           && $IsAllocBox(bx12, t12, h)
           && $IsAllocBox(bx13, t13, h)
           && $IsAllocBox(bx14, t14, h)
           && $IsAllocBox(bx15, t15, h)
           && Requires16(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            t13, 
            t14, 
            t15, 
            t16, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11, 
            bx12, 
            bx13, 
            bx14, 
            bx15)
         ==> $IsAllocBox(Apply16(t0, 
            t1, 
            t2, 
            t3, 
            t4, 
            t5, 
            t6, 
            t7, 
            t8, 
            t9, 
            t10, 
            t11, 
            t12, 
            t13, 
            t14, 
            t15, 
            t16, 
            h, 
            f, 
            bx0, 
            bx1, 
            bx2, 
            bx3, 
            bx4, 
            bx5, 
            bx6, 
            bx7, 
            bx8, 
            bx9, 
            bx10, 
            bx11, 
            bx12, 
            bx13, 
            bx14, 
            bx15), 
          t16, 
          h)));

function Tclass._System.___hPartialFunc16(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hPartialFunc16: TyTag;

// Tclass._System.___hPartialFunc16 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tag(Tclass._System.___hPartialFunc16(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$T14, 
          #$T15, 
          #$R))
       == Tagclass._System.___hPartialFunc16
     && TagFamily(Tclass._System.___hPartialFunc16(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$T14, 
          #$T15, 
          #$R))
       == tytagFamily$_#PartialFunc16);

function Tclass._System.___hPartialFunc16_0(Ty) : Ty;

// Tclass._System.___hPartialFunc16 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hPartialFunc16_0(Tclass._System.___hPartialFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T0);

function Tclass._System.___hPartialFunc16_1(Ty) : Ty;

// Tclass._System.___hPartialFunc16 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hPartialFunc16_1(Tclass._System.___hPartialFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T1);

function Tclass._System.___hPartialFunc16_2(Ty) : Ty;

// Tclass._System.___hPartialFunc16 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hPartialFunc16_2(Tclass._System.___hPartialFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T2);

function Tclass._System.___hPartialFunc16_3(Ty) : Ty;

// Tclass._System.___hPartialFunc16 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hPartialFunc16_3(Tclass._System.___hPartialFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T3);

function Tclass._System.___hPartialFunc16_4(Ty) : Ty;

// Tclass._System.___hPartialFunc16 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hPartialFunc16_4(Tclass._System.___hPartialFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T4);

function Tclass._System.___hPartialFunc16_5(Ty) : Ty;

// Tclass._System.___hPartialFunc16 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hPartialFunc16_5(Tclass._System.___hPartialFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T5);

function Tclass._System.___hPartialFunc16_6(Ty) : Ty;

// Tclass._System.___hPartialFunc16 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hPartialFunc16_6(Tclass._System.___hPartialFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T6);

function Tclass._System.___hPartialFunc16_7(Ty) : Ty;

// Tclass._System.___hPartialFunc16 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hPartialFunc16_7(Tclass._System.___hPartialFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T7);

function Tclass._System.___hPartialFunc16_8(Ty) : Ty;

// Tclass._System.___hPartialFunc16 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hPartialFunc16_8(Tclass._System.___hPartialFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T8);

function Tclass._System.___hPartialFunc16_9(Ty) : Ty;

// Tclass._System.___hPartialFunc16 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hPartialFunc16_9(Tclass._System.___hPartialFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T9);

function Tclass._System.___hPartialFunc16_10(Ty) : Ty;

// Tclass._System.___hPartialFunc16 injectivity 10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hPartialFunc16_10(Tclass._System.___hPartialFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T10);

function Tclass._System.___hPartialFunc16_11(Ty) : Ty;

// Tclass._System.___hPartialFunc16 injectivity 11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hPartialFunc16_11(Tclass._System.___hPartialFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T11);

function Tclass._System.___hPartialFunc16_12(Ty) : Ty;

// Tclass._System.___hPartialFunc16 injectivity 12
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hPartialFunc16_12(Tclass._System.___hPartialFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T12);

function Tclass._System.___hPartialFunc16_13(Ty) : Ty;

// Tclass._System.___hPartialFunc16 injectivity 13
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hPartialFunc16_13(Tclass._System.___hPartialFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T13);

function Tclass._System.___hPartialFunc16_14(Ty) : Ty;

// Tclass._System.___hPartialFunc16 injectivity 14
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hPartialFunc16_14(Tclass._System.___hPartialFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T14);

function Tclass._System.___hPartialFunc16_15(Ty) : Ty;

// Tclass._System.___hPartialFunc16 injectivity 15
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hPartialFunc16_15(Tclass._System.___hPartialFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T15);

function Tclass._System.___hPartialFunc16_16(Ty) : Ty;

// Tclass._System.___hPartialFunc16 injectivity 16
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hPartialFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hPartialFunc16_16(Tclass._System.___hPartialFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hPartialFunc16
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hPartialFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hPartialFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hPartialFunc16(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$T14, 
          #$T15, 
          #$R)));

// $Is axiom for subset type _System._#PartialFunc16
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty, 
    f#0: HandleType :: 
  { $Is(f#0, 
      Tclass._System.___hPartialFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R)) } 
  $Is(f#0, 
      Tclass._System.___hPartialFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     <==> $Is(f#0, 
        Tclass._System.___hFunc16(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$T14, 
          #$T15, 
          #$R))
       && (forall x0#0: Box, 
          x1#0: Box, 
          x2#0: Box, 
          x3#0: Box, 
          x4#0: Box, 
          x5#0: Box, 
          x6#0: Box, 
          x7#0: Box, 
          x8#0: Box, 
          x9#0: Box, 
          x10#0: Box, 
          x11#0: Box, 
          x12#0: Box, 
          x13#0: Box, 
          x14#0: Box, 
          x15#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
             && $IsBox(x5#0, #$T5)
             && $IsBox(x6#0, #$T6)
             && $IsBox(x7#0, #$T7)
             && $IsBox(x8#0, #$T8)
             && $IsBox(x9#0, #$T9)
             && $IsBox(x10#0, #$T10)
             && $IsBox(x11#0, #$T11)
             && $IsBox(x12#0, #$T12)
             && $IsBox(x13#0, #$T13)
             && $IsBox(x14#0, #$T14)
             && $IsBox(x15#0, #$T15)
           ==> Set#Equal(Reads16(#$T0, 
              #$T1, 
              #$T2, 
              #$T3, 
              #$T4, 
              #$T5, 
              #$T6, 
              #$T7, 
              #$T8, 
              #$T9, 
              #$T10, 
              #$T11, 
              #$T12, 
              #$T13, 
              #$T14, 
              #$T15, 
              #$R, 
              $OneHeap, 
              f#0, 
              x0#0, 
              x1#0, 
              x2#0, 
              x3#0, 
              x4#0, 
              x5#0, 
              x6#0, 
              x7#0, 
              x8#0, 
              x9#0, 
              x10#0, 
              x11#0, 
              x12#0, 
              x13#0, 
              x14#0, 
              x15#0), 
            Set#Empty(): Set)));

// $IsAlloc axiom for subset type _System._#PartialFunc16
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R), 
      $h) } 
  $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R), 
      $h)
     <==> $IsAlloc(f#0, 
      Tclass._System.___hFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R), 
      $h));

function Tclass._System.___hTotalFunc16(Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty, Ty) : Ty;

const unique Tagclass._System.___hTotalFunc16: TyTag;

// Tclass._System.___hTotalFunc16 Tag
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tag(Tclass._System.___hTotalFunc16(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$T14, 
          #$T15, 
          #$R))
       == Tagclass._System.___hTotalFunc16
     && TagFamily(Tclass._System.___hTotalFunc16(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$T14, 
          #$T15, 
          #$R))
       == tytagFamily$_#TotalFunc16);

function Tclass._System.___hTotalFunc16_0(Ty) : Ty;

// Tclass._System.___hTotalFunc16 injectivity 0
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hTotalFunc16_0(Tclass._System.___hTotalFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T0);

function Tclass._System.___hTotalFunc16_1(Ty) : Ty;

// Tclass._System.___hTotalFunc16 injectivity 1
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hTotalFunc16_1(Tclass._System.___hTotalFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T1);

function Tclass._System.___hTotalFunc16_2(Ty) : Ty;

// Tclass._System.___hTotalFunc16 injectivity 2
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hTotalFunc16_2(Tclass._System.___hTotalFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T2);

function Tclass._System.___hTotalFunc16_3(Ty) : Ty;

// Tclass._System.___hTotalFunc16 injectivity 3
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hTotalFunc16_3(Tclass._System.___hTotalFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T3);

function Tclass._System.___hTotalFunc16_4(Ty) : Ty;

// Tclass._System.___hTotalFunc16 injectivity 4
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hTotalFunc16_4(Tclass._System.___hTotalFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T4);

function Tclass._System.___hTotalFunc16_5(Ty) : Ty;

// Tclass._System.___hTotalFunc16 injectivity 5
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hTotalFunc16_5(Tclass._System.___hTotalFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T5);

function Tclass._System.___hTotalFunc16_6(Ty) : Ty;

// Tclass._System.___hTotalFunc16 injectivity 6
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hTotalFunc16_6(Tclass._System.___hTotalFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T6);

function Tclass._System.___hTotalFunc16_7(Ty) : Ty;

// Tclass._System.___hTotalFunc16 injectivity 7
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hTotalFunc16_7(Tclass._System.___hTotalFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T7);

function Tclass._System.___hTotalFunc16_8(Ty) : Ty;

// Tclass._System.___hTotalFunc16 injectivity 8
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hTotalFunc16_8(Tclass._System.___hTotalFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T8);

function Tclass._System.___hTotalFunc16_9(Ty) : Ty;

// Tclass._System.___hTotalFunc16 injectivity 9
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hTotalFunc16_9(Tclass._System.___hTotalFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T9);

function Tclass._System.___hTotalFunc16_10(Ty) : Ty;

// Tclass._System.___hTotalFunc16 injectivity 10
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hTotalFunc16_10(Tclass._System.___hTotalFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T10);

function Tclass._System.___hTotalFunc16_11(Ty) : Ty;

// Tclass._System.___hTotalFunc16 injectivity 11
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hTotalFunc16_11(Tclass._System.___hTotalFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T11);

function Tclass._System.___hTotalFunc16_12(Ty) : Ty;

// Tclass._System.___hTotalFunc16 injectivity 12
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hTotalFunc16_12(Tclass._System.___hTotalFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T12);

function Tclass._System.___hTotalFunc16_13(Ty) : Ty;

// Tclass._System.___hTotalFunc16 injectivity 13
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hTotalFunc16_13(Tclass._System.___hTotalFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T13);

function Tclass._System.___hTotalFunc16_14(Ty) : Ty;

// Tclass._System.___hTotalFunc16 injectivity 14
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hTotalFunc16_14(Tclass._System.___hTotalFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T14);

function Tclass._System.___hTotalFunc16_15(Ty) : Ty;

// Tclass._System.___hTotalFunc16 injectivity 15
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hTotalFunc16_15(Tclass._System.___hTotalFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$T15);

function Tclass._System.___hTotalFunc16_16(Ty) : Ty;

// Tclass._System.___hTotalFunc16 injectivity 16
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty :: 
  { Tclass._System.___hTotalFunc16(#$T0, 
      #$T1, 
      #$T2, 
      #$T3, 
      #$T4, 
      #$T5, 
      #$T6, 
      #$T7, 
      #$T8, 
      #$T9, 
      #$T10, 
      #$T11, 
      #$T12, 
      #$T13, 
      #$T14, 
      #$T15, 
      #$R) } 
  Tclass._System.___hTotalFunc16_16(Tclass._System.___hTotalFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     == #$R);

// Box/unbox axiom for Tclass._System.___hTotalFunc16
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty, 
    bx: Box :: 
  { $IsBox(bx, 
      Tclass._System.___hTotalFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R)) } 
  $IsBox(bx, 
      Tclass._System.___hTotalFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     ==> $Box($Unbox(bx): HandleType) == bx
       && $Is($Unbox(bx): HandleType, 
        Tclass._System.___hTotalFunc16(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$T14, 
          #$T15, 
          #$R)));

// $Is axiom for subset type _System._#TotalFunc16
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty, 
    f#0: HandleType :: 
  { $Is(f#0, 
      Tclass._System.___hTotalFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R)) } 
  $Is(f#0, 
      Tclass._System.___hTotalFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R))
     <==> $Is(f#0, 
        Tclass._System.___hPartialFunc16(#$T0, 
          #$T1, 
          #$T2, 
          #$T3, 
          #$T4, 
          #$T5, 
          #$T6, 
          #$T7, 
          #$T8, 
          #$T9, 
          #$T10, 
          #$T11, 
          #$T12, 
          #$T13, 
          #$T14, 
          #$T15, 
          #$R))
       && (forall x0#0: Box, 
          x1#0: Box, 
          x2#0: Box, 
          x3#0: Box, 
          x4#0: Box, 
          x5#0: Box, 
          x6#0: Box, 
          x7#0: Box, 
          x8#0: Box, 
          x9#0: Box, 
          x10#0: Box, 
          x11#0: Box, 
          x12#0: Box, 
          x13#0: Box, 
          x14#0: Box, 
          x15#0: Box :: 
        $IsBox(x0#0, #$T0)
             && $IsBox(x1#0, #$T1)
             && $IsBox(x2#0, #$T2)
             && $IsBox(x3#0, #$T3)
             && $IsBox(x4#0, #$T4)
             && $IsBox(x5#0, #$T5)
             && $IsBox(x6#0, #$T6)
             && $IsBox(x7#0, #$T7)
             && $IsBox(x8#0, #$T8)
             && $IsBox(x9#0, #$T9)
             && $IsBox(x10#0, #$T10)
             && $IsBox(x11#0, #$T11)
             && $IsBox(x12#0, #$T12)
             && $IsBox(x13#0, #$T13)
             && $IsBox(x14#0, #$T14)
             && $IsBox(x15#0, #$T15)
           ==> Requires16(#$T0, 
            #$T1, 
            #$T2, 
            #$T3, 
            #$T4, 
            #$T5, 
            #$T6, 
            #$T7, 
            #$T8, 
            #$T9, 
            #$T10, 
            #$T11, 
            #$T12, 
            #$T13, 
            #$T14, 
            #$T15, 
            #$R, 
            $OneHeap, 
            f#0, 
            x0#0, 
            x1#0, 
            x2#0, 
            x3#0, 
            x4#0, 
            x5#0, 
            x6#0, 
            x7#0, 
            x8#0, 
            x9#0, 
            x10#0, 
            x11#0, 
            x12#0, 
            x13#0, 
            x14#0, 
            x15#0)));

// $IsAlloc axiom for subset type _System._#TotalFunc16
axiom (forall #$T0: Ty, 
    #$T1: Ty, 
    #$T2: Ty, 
    #$T3: Ty, 
    #$T4: Ty, 
    #$T5: Ty, 
    #$T6: Ty, 
    #$T7: Ty, 
    #$T8: Ty, 
    #$T9: Ty, 
    #$T10: Ty, 
    #$T11: Ty, 
    #$T12: Ty, 
    #$T13: Ty, 
    #$T14: Ty, 
    #$T15: Ty, 
    #$R: Ty, 
    f#0: HandleType, 
    $h: Heap :: 
  { $IsAlloc(f#0, 
      Tclass._System.___hTotalFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R), 
      $h) } 
  $IsAlloc(f#0, 
      Tclass._System.___hTotalFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R), 
      $h)
     <==> $IsAlloc(f#0, 
      Tclass._System.___hPartialFunc16(#$T0, 
        #$T1, 
        #$T2, 
        #$T3, 
        #$T4, 
        #$T5, 
        #$T6, 
        #$T7, 
        #$T8, 
        #$T9, 
        #$T10, 
        #$T11, 
        #$T12, 
        #$T13, 
        #$T14, 
        #$T15, 
        #$R), 
      $h));

const unique class._System.array2?: ClassName;

function Tclass._System.array2?(Ty) : Ty;

const unique Tagclass._System.array2?: TyTag;

// Tclass._System.array2? Tag
axiom (forall _System.array2$arg: Ty :: 
  { Tclass._System.array2?(_System.array2$arg) } 
  Tag(Tclass._System.array2?(_System.array2$arg)) == Tagclass._System.array2?
     && TagFamily(Tclass._System.array2?(_System.array2$arg)) == tytagFamily$array2);

function Tclass._System.array2?_0(Ty) : Ty;

// Tclass._System.array2? injectivity 0
axiom (forall _System.array2$arg: Ty :: 
  { Tclass._System.array2?(_System.array2$arg) } 
  Tclass._System.array2?_0(Tclass._System.array2?(_System.array2$arg))
     == _System.array2$arg);

// Box/unbox axiom for Tclass._System.array2?
axiom (forall _System.array2$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array2?(_System.array2$arg)) } 
  $IsBox(bx, Tclass._System.array2?(_System.array2$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array2?(_System.array2$arg)));

axiom (forall o: ref :: { _System.array2.Length0(o) } 0 <= _System.array2.Length0(o));

axiom (forall o: ref :: { _System.array2.Length1(o) } 0 <= _System.array2.Length1(o));

// array2.: Type axiom
axiom (forall _System.array2$arg: Ty, $h: Heap, $o: ref, $i0: int, $i1: int :: 
  { read($h, $o, MultiIndexField(IndexField($i0), $i1)), Tclass._System.array2?(_System.array2$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array2?(_System.array2$arg)
       && 
      0 <= $i0
       && $i0 < _System.array2.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array2.Length1($o)
     ==> $IsBox(read($h, $o, MultiIndexField(IndexField($i0), $i1)), _System.array2$arg));

// array2.: Allocation axiom
axiom (forall _System.array2$arg: Ty, $h: Heap, $o: ref, $i0: int, $i1: int :: 
  { read($h, $o, MultiIndexField(IndexField($i0), $i1)), Tclass._System.array2?(_System.array2$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array2?(_System.array2$arg)
       && 
      0 <= $i0
       && $i0 < _System.array2.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array2.Length1($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, $o, MultiIndexField(IndexField($i0), $i1)), _System.array2$arg, $h));

// $Is axiom for array type array2
axiom (forall _System.array2$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array2?(_System.array2$arg)) } 
  $Is($o, Tclass._System.array2?(_System.array2$arg))
     <==> $o == null || dtype($o) == Tclass._System.array2?(_System.array2$arg));

// $IsAlloc axiom for array type array2
axiom (forall _System.array2$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array2?(_System.array2$arg), $h) } 
  $IsAlloc($o, Tclass._System.array2?(_System.array2$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function _System.array2.Length0(ref) : int;

// array2.Length0: Type axiom
axiom (forall _System.array2$arg: Ty, $o: ref :: 
  { _System.array2.Length0($o), Tclass._System.array2?(_System.array2$arg) } 
  $o != null && dtype($o) == Tclass._System.array2?(_System.array2$arg)
     ==> $Is(_System.array2.Length0($o), TInt));

// array2.Length0: Allocation axiom
axiom (forall _System.array2$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array2.Length0($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array2?(_System.array2$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array2?(_System.array2$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array2.Length0($o), TInt, $h));

function _System.array2.Length1(ref) : int;

// array2.Length1: Type axiom
axiom (forall _System.array2$arg: Ty, $o: ref :: 
  { _System.array2.Length1($o), Tclass._System.array2?(_System.array2$arg) } 
  $o != null && dtype($o) == Tclass._System.array2?(_System.array2$arg)
     ==> $Is(_System.array2.Length1($o), TInt));

// array2.Length1: Allocation axiom
axiom (forall _System.array2$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array2.Length1($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array2?(_System.array2$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array2?(_System.array2$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array2.Length1($o), TInt, $h));

function Tclass._System.array2(Ty) : Ty;

const unique Tagclass._System.array2: TyTag;

// Tclass._System.array2 Tag
axiom (forall _System.array2$arg: Ty :: 
  { Tclass._System.array2(_System.array2$arg) } 
  Tag(Tclass._System.array2(_System.array2$arg)) == Tagclass._System.array2
     && TagFamily(Tclass._System.array2(_System.array2$arg)) == tytagFamily$array2);

function Tclass._System.array2_0(Ty) : Ty;

// Tclass._System.array2 injectivity 0
axiom (forall _System.array2$arg: Ty :: 
  { Tclass._System.array2(_System.array2$arg) } 
  Tclass._System.array2_0(Tclass._System.array2(_System.array2$arg))
     == _System.array2$arg);

// Box/unbox axiom for Tclass._System.array2
axiom (forall _System.array2$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array2(_System.array2$arg)) } 
  $IsBox(bx, Tclass._System.array2(_System.array2$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array2(_System.array2$arg)));

// $Is axiom for non-null type _System.array2
axiom (forall _System.array2$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array2(_System.array2$arg)) } 
    { $Is(c#0, Tclass._System.array2?(_System.array2$arg)) } 
  $Is(c#0, Tclass._System.array2(_System.array2$arg))
     <==> $Is(c#0, Tclass._System.array2?(_System.array2$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array2
axiom (forall _System.array2$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array2(_System.array2$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array2?(_System.array2$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array2(_System.array2$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array2?(_System.array2$arg), $h));

const unique class._System.array3?: ClassName;

function Tclass._System.array3?(Ty) : Ty;

const unique Tagclass._System.array3?: TyTag;

// Tclass._System.array3? Tag
axiom (forall _System.array3$arg: Ty :: 
  { Tclass._System.array3?(_System.array3$arg) } 
  Tag(Tclass._System.array3?(_System.array3$arg)) == Tagclass._System.array3?
     && TagFamily(Tclass._System.array3?(_System.array3$arg)) == tytagFamily$array3);

function Tclass._System.array3?_0(Ty) : Ty;

// Tclass._System.array3? injectivity 0
axiom (forall _System.array3$arg: Ty :: 
  { Tclass._System.array3?(_System.array3$arg) } 
  Tclass._System.array3?_0(Tclass._System.array3?(_System.array3$arg))
     == _System.array3$arg);

// Box/unbox axiom for Tclass._System.array3?
axiom (forall _System.array3$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array3?(_System.array3$arg)) } 
  $IsBox(bx, Tclass._System.array3?(_System.array3$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array3?(_System.array3$arg)));

axiom (forall o: ref :: { _System.array3.Length0(o) } 0 <= _System.array3.Length0(o));

axiom (forall o: ref :: { _System.array3.Length1(o) } 0 <= _System.array3.Length1(o));

axiom (forall o: ref :: { _System.array3.Length2(o) } 0 <= _System.array3.Length2(o));

// array3.: Type axiom
axiom (forall _System.array3$arg: Ty, $h: Heap, $o: ref, $i0: int, $i1: int, $i2: int :: 
  { read($h, $o, MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2)), Tclass._System.array3?(_System.array3$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array3?(_System.array3$arg)
       && 
      0 <= $i0
       && $i0 < _System.array3.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array3.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array3.Length2($o)
     ==> $IsBox(read($h, $o, MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2)), 
      _System.array3$arg));

// array3.: Allocation axiom
axiom (forall _System.array3$arg: Ty, $h: Heap, $o: ref, $i0: int, $i1: int, $i2: int :: 
  { read($h, $o, MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2)), Tclass._System.array3?(_System.array3$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array3?(_System.array3$arg)
       && 
      0 <= $i0
       && $i0 < _System.array3.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array3.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array3.Length2($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, $o, MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2)), 
      _System.array3$arg, 
      $h));

// $Is axiom for array type array3
axiom (forall _System.array3$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array3?(_System.array3$arg)) } 
  $Is($o, Tclass._System.array3?(_System.array3$arg))
     <==> $o == null || dtype($o) == Tclass._System.array3?(_System.array3$arg));

// $IsAlloc axiom for array type array3
axiom (forall _System.array3$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array3?(_System.array3$arg), $h) } 
  $IsAlloc($o, Tclass._System.array3?(_System.array3$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function _System.array3.Length0(ref) : int;

// array3.Length0: Type axiom
axiom (forall _System.array3$arg: Ty, $o: ref :: 
  { _System.array3.Length0($o), Tclass._System.array3?(_System.array3$arg) } 
  $o != null && dtype($o) == Tclass._System.array3?(_System.array3$arg)
     ==> $Is(_System.array3.Length0($o), TInt));

// array3.Length0: Allocation axiom
axiom (forall _System.array3$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array3.Length0($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array3?(_System.array3$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array3?(_System.array3$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array3.Length0($o), TInt, $h));

function _System.array3.Length1(ref) : int;

// array3.Length1: Type axiom
axiom (forall _System.array3$arg: Ty, $o: ref :: 
  { _System.array3.Length1($o), Tclass._System.array3?(_System.array3$arg) } 
  $o != null && dtype($o) == Tclass._System.array3?(_System.array3$arg)
     ==> $Is(_System.array3.Length1($o), TInt));

// array3.Length1: Allocation axiom
axiom (forall _System.array3$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array3.Length1($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array3?(_System.array3$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array3?(_System.array3$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array3.Length1($o), TInt, $h));

function _System.array3.Length2(ref) : int;

// array3.Length2: Type axiom
axiom (forall _System.array3$arg: Ty, $o: ref :: 
  { _System.array3.Length2($o), Tclass._System.array3?(_System.array3$arg) } 
  $o != null && dtype($o) == Tclass._System.array3?(_System.array3$arg)
     ==> $Is(_System.array3.Length2($o), TInt));

// array3.Length2: Allocation axiom
axiom (forall _System.array3$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array3.Length2($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array3?(_System.array3$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array3?(_System.array3$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array3.Length2($o), TInt, $h));

function Tclass._System.array3(Ty) : Ty;

const unique Tagclass._System.array3: TyTag;

// Tclass._System.array3 Tag
axiom (forall _System.array3$arg: Ty :: 
  { Tclass._System.array3(_System.array3$arg) } 
  Tag(Tclass._System.array3(_System.array3$arg)) == Tagclass._System.array3
     && TagFamily(Tclass._System.array3(_System.array3$arg)) == tytagFamily$array3);

function Tclass._System.array3_0(Ty) : Ty;

// Tclass._System.array3 injectivity 0
axiom (forall _System.array3$arg: Ty :: 
  { Tclass._System.array3(_System.array3$arg) } 
  Tclass._System.array3_0(Tclass._System.array3(_System.array3$arg))
     == _System.array3$arg);

// Box/unbox axiom for Tclass._System.array3
axiom (forall _System.array3$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array3(_System.array3$arg)) } 
  $IsBox(bx, Tclass._System.array3(_System.array3$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array3(_System.array3$arg)));

// $Is axiom for non-null type _System.array3
axiom (forall _System.array3$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array3(_System.array3$arg)) } 
    { $Is(c#0, Tclass._System.array3?(_System.array3$arg)) } 
  $Is(c#0, Tclass._System.array3(_System.array3$arg))
     <==> $Is(c#0, Tclass._System.array3?(_System.array3$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array3
axiom (forall _System.array3$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array3(_System.array3$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array3?(_System.array3$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array3(_System.array3$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array3?(_System.array3$arg), $h));

const unique class._System.array4?: ClassName;

function Tclass._System.array4?(Ty) : Ty;

const unique Tagclass._System.array4?: TyTag;

// Tclass._System.array4? Tag
axiom (forall _System.array4$arg: Ty :: 
  { Tclass._System.array4?(_System.array4$arg) } 
  Tag(Tclass._System.array4?(_System.array4$arg)) == Tagclass._System.array4?
     && TagFamily(Tclass._System.array4?(_System.array4$arg)) == tytagFamily$array4);

function Tclass._System.array4?_0(Ty) : Ty;

// Tclass._System.array4? injectivity 0
axiom (forall _System.array4$arg: Ty :: 
  { Tclass._System.array4?(_System.array4$arg) } 
  Tclass._System.array4?_0(Tclass._System.array4?(_System.array4$arg))
     == _System.array4$arg);

// Box/unbox axiom for Tclass._System.array4?
axiom (forall _System.array4$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array4?(_System.array4$arg)) } 
  $IsBox(bx, Tclass._System.array4?(_System.array4$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array4?(_System.array4$arg)));

axiom (forall o: ref :: { _System.array4.Length0(o) } 0 <= _System.array4.Length0(o));

axiom (forall o: ref :: { _System.array4.Length1(o) } 0 <= _System.array4.Length1(o));

axiom (forall o: ref :: { _System.array4.Length2(o) } 0 <= _System.array4.Length2(o));

axiom (forall o: ref :: { _System.array4.Length3(o) } 0 <= _System.array4.Length3(o));

// array4.: Type axiom
axiom (forall _System.array4$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3)), Tclass._System.array4?(_System.array4$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array4?(_System.array4$arg)
       && 
      0 <= $i0
       && $i0 < _System.array4.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array4.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array4.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array4.Length3($o)
     ==> $IsBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3)), 
      _System.array4$arg));

// array4.: Allocation axiom
axiom (forall _System.array4$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3)), Tclass._System.array4?(_System.array4$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array4?(_System.array4$arg)
       && 
      0 <= $i0
       && $i0 < _System.array4.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array4.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array4.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array4.Length3($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3)), 
      _System.array4$arg, 
      $h));

// $Is axiom for array type array4
axiom (forall _System.array4$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array4?(_System.array4$arg)) } 
  $Is($o, Tclass._System.array4?(_System.array4$arg))
     <==> $o == null || dtype($o) == Tclass._System.array4?(_System.array4$arg));

// $IsAlloc axiom for array type array4
axiom (forall _System.array4$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array4?(_System.array4$arg), $h) } 
  $IsAlloc($o, Tclass._System.array4?(_System.array4$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function _System.array4.Length0(ref) : int;

// array4.Length0: Type axiom
axiom (forall _System.array4$arg: Ty, $o: ref :: 
  { _System.array4.Length0($o), Tclass._System.array4?(_System.array4$arg) } 
  $o != null && dtype($o) == Tclass._System.array4?(_System.array4$arg)
     ==> $Is(_System.array4.Length0($o), TInt));

// array4.Length0: Allocation axiom
axiom (forall _System.array4$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array4.Length0($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array4?(_System.array4$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array4?(_System.array4$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array4.Length0($o), TInt, $h));

function _System.array4.Length1(ref) : int;

// array4.Length1: Type axiom
axiom (forall _System.array4$arg: Ty, $o: ref :: 
  { _System.array4.Length1($o), Tclass._System.array4?(_System.array4$arg) } 
  $o != null && dtype($o) == Tclass._System.array4?(_System.array4$arg)
     ==> $Is(_System.array4.Length1($o), TInt));

// array4.Length1: Allocation axiom
axiom (forall _System.array4$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array4.Length1($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array4?(_System.array4$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array4?(_System.array4$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array4.Length1($o), TInt, $h));

function _System.array4.Length2(ref) : int;

// array4.Length2: Type axiom
axiom (forall _System.array4$arg: Ty, $o: ref :: 
  { _System.array4.Length2($o), Tclass._System.array4?(_System.array4$arg) } 
  $o != null && dtype($o) == Tclass._System.array4?(_System.array4$arg)
     ==> $Is(_System.array4.Length2($o), TInt));

// array4.Length2: Allocation axiom
axiom (forall _System.array4$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array4.Length2($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array4?(_System.array4$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array4?(_System.array4$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array4.Length2($o), TInt, $h));

function _System.array4.Length3(ref) : int;

// array4.Length3: Type axiom
axiom (forall _System.array4$arg: Ty, $o: ref :: 
  { _System.array4.Length3($o), Tclass._System.array4?(_System.array4$arg) } 
  $o != null && dtype($o) == Tclass._System.array4?(_System.array4$arg)
     ==> $Is(_System.array4.Length3($o), TInt));

// array4.Length3: Allocation axiom
axiom (forall _System.array4$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array4.Length3($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array4?(_System.array4$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array4?(_System.array4$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array4.Length3($o), TInt, $h));

function Tclass._System.array4(Ty) : Ty;

const unique Tagclass._System.array4: TyTag;

// Tclass._System.array4 Tag
axiom (forall _System.array4$arg: Ty :: 
  { Tclass._System.array4(_System.array4$arg) } 
  Tag(Tclass._System.array4(_System.array4$arg)) == Tagclass._System.array4
     && TagFamily(Tclass._System.array4(_System.array4$arg)) == tytagFamily$array4);

function Tclass._System.array4_0(Ty) : Ty;

// Tclass._System.array4 injectivity 0
axiom (forall _System.array4$arg: Ty :: 
  { Tclass._System.array4(_System.array4$arg) } 
  Tclass._System.array4_0(Tclass._System.array4(_System.array4$arg))
     == _System.array4$arg);

// Box/unbox axiom for Tclass._System.array4
axiom (forall _System.array4$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array4(_System.array4$arg)) } 
  $IsBox(bx, Tclass._System.array4(_System.array4$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array4(_System.array4$arg)));

// $Is axiom for non-null type _System.array4
axiom (forall _System.array4$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array4(_System.array4$arg)) } 
    { $Is(c#0, Tclass._System.array4?(_System.array4$arg)) } 
  $Is(c#0, Tclass._System.array4(_System.array4$arg))
     <==> $Is(c#0, Tclass._System.array4?(_System.array4$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array4
axiom (forall _System.array4$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array4(_System.array4$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array4?(_System.array4$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array4(_System.array4$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array4?(_System.array4$arg), $h));

const unique class._System.array5?: ClassName;

function Tclass._System.array5?(Ty) : Ty;

const unique Tagclass._System.array5?: TyTag;

// Tclass._System.array5? Tag
axiom (forall _System.array5$arg: Ty :: 
  { Tclass._System.array5?(_System.array5$arg) } 
  Tag(Tclass._System.array5?(_System.array5$arg)) == Tagclass._System.array5?
     && TagFamily(Tclass._System.array5?(_System.array5$arg)) == tytagFamily$array5);

function Tclass._System.array5?_0(Ty) : Ty;

// Tclass._System.array5? injectivity 0
axiom (forall _System.array5$arg: Ty :: 
  { Tclass._System.array5?(_System.array5$arg) } 
  Tclass._System.array5?_0(Tclass._System.array5?(_System.array5$arg))
     == _System.array5$arg);

// Box/unbox axiom for Tclass._System.array5?
axiom (forall _System.array5$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array5?(_System.array5$arg)) } 
  $IsBox(bx, Tclass._System.array5?(_System.array5$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array5?(_System.array5$arg)));

axiom (forall o: ref :: { _System.array5.Length0(o) } 0 <= _System.array5.Length0(o));

axiom (forall o: ref :: { _System.array5.Length1(o) } 0 <= _System.array5.Length1(o));

axiom (forall o: ref :: { _System.array5.Length2(o) } 0 <= _System.array5.Length2(o));

axiom (forall o: ref :: { _System.array5.Length3(o) } 0 <= _System.array5.Length3(o));

axiom (forall o: ref :: { _System.array5.Length4(o) } 0 <= _System.array5.Length4(o));

// array5.: Type axiom
axiom (forall _System.array5$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int, 
    $i4: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
        $i4)), Tclass._System.array5?(_System.array5$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array5?(_System.array5$arg)
       && 
      0 <= $i0
       && $i0 < _System.array5.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array5.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array5.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array5.Length3($o)
       && 
      0 <= $i4
       && $i4 < _System.array5.Length4($o)
     ==> $IsBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
          $i4)), 
      _System.array5$arg));

// array5.: Allocation axiom
axiom (forall _System.array5$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int, 
    $i4: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
        $i4)), Tclass._System.array5?(_System.array5$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array5?(_System.array5$arg)
       && 
      0 <= $i0
       && $i0 < _System.array5.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array5.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array5.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array5.Length3($o)
       && 
      0 <= $i4
       && $i4 < _System.array5.Length4($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
          $i4)), 
      _System.array5$arg, 
      $h));

// $Is axiom for array type array5
axiom (forall _System.array5$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array5?(_System.array5$arg)) } 
  $Is($o, Tclass._System.array5?(_System.array5$arg))
     <==> $o == null || dtype($o) == Tclass._System.array5?(_System.array5$arg));

// $IsAlloc axiom for array type array5
axiom (forall _System.array5$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array5?(_System.array5$arg), $h) } 
  $IsAlloc($o, Tclass._System.array5?(_System.array5$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function _System.array5.Length0(ref) : int;

// array5.Length0: Type axiom
axiom (forall _System.array5$arg: Ty, $o: ref :: 
  { _System.array5.Length0($o), Tclass._System.array5?(_System.array5$arg) } 
  $o != null && dtype($o) == Tclass._System.array5?(_System.array5$arg)
     ==> $Is(_System.array5.Length0($o), TInt));

// array5.Length0: Allocation axiom
axiom (forall _System.array5$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array5.Length0($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array5?(_System.array5$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array5?(_System.array5$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array5.Length0($o), TInt, $h));

function _System.array5.Length1(ref) : int;

// array5.Length1: Type axiom
axiom (forall _System.array5$arg: Ty, $o: ref :: 
  { _System.array5.Length1($o), Tclass._System.array5?(_System.array5$arg) } 
  $o != null && dtype($o) == Tclass._System.array5?(_System.array5$arg)
     ==> $Is(_System.array5.Length1($o), TInt));

// array5.Length1: Allocation axiom
axiom (forall _System.array5$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array5.Length1($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array5?(_System.array5$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array5?(_System.array5$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array5.Length1($o), TInt, $h));

function _System.array5.Length2(ref) : int;

// array5.Length2: Type axiom
axiom (forall _System.array5$arg: Ty, $o: ref :: 
  { _System.array5.Length2($o), Tclass._System.array5?(_System.array5$arg) } 
  $o != null && dtype($o) == Tclass._System.array5?(_System.array5$arg)
     ==> $Is(_System.array5.Length2($o), TInt));

// array5.Length2: Allocation axiom
axiom (forall _System.array5$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array5.Length2($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array5?(_System.array5$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array5?(_System.array5$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array5.Length2($o), TInt, $h));

function _System.array5.Length3(ref) : int;

// array5.Length3: Type axiom
axiom (forall _System.array5$arg: Ty, $o: ref :: 
  { _System.array5.Length3($o), Tclass._System.array5?(_System.array5$arg) } 
  $o != null && dtype($o) == Tclass._System.array5?(_System.array5$arg)
     ==> $Is(_System.array5.Length3($o), TInt));

// array5.Length3: Allocation axiom
axiom (forall _System.array5$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array5.Length3($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array5?(_System.array5$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array5?(_System.array5$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array5.Length3($o), TInt, $h));

function _System.array5.Length4(ref) : int;

// array5.Length4: Type axiom
axiom (forall _System.array5$arg: Ty, $o: ref :: 
  { _System.array5.Length4($o), Tclass._System.array5?(_System.array5$arg) } 
  $o != null && dtype($o) == Tclass._System.array5?(_System.array5$arg)
     ==> $Is(_System.array5.Length4($o), TInt));

// array5.Length4: Allocation axiom
axiom (forall _System.array5$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array5.Length4($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array5?(_System.array5$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array5?(_System.array5$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array5.Length4($o), TInt, $h));

function Tclass._System.array5(Ty) : Ty;

const unique Tagclass._System.array5: TyTag;

// Tclass._System.array5 Tag
axiom (forall _System.array5$arg: Ty :: 
  { Tclass._System.array5(_System.array5$arg) } 
  Tag(Tclass._System.array5(_System.array5$arg)) == Tagclass._System.array5
     && TagFamily(Tclass._System.array5(_System.array5$arg)) == tytagFamily$array5);

function Tclass._System.array5_0(Ty) : Ty;

// Tclass._System.array5 injectivity 0
axiom (forall _System.array5$arg: Ty :: 
  { Tclass._System.array5(_System.array5$arg) } 
  Tclass._System.array5_0(Tclass._System.array5(_System.array5$arg))
     == _System.array5$arg);

// Box/unbox axiom for Tclass._System.array5
axiom (forall _System.array5$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array5(_System.array5$arg)) } 
  $IsBox(bx, Tclass._System.array5(_System.array5$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array5(_System.array5$arg)));

// $Is axiom for non-null type _System.array5
axiom (forall _System.array5$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array5(_System.array5$arg)) } 
    { $Is(c#0, Tclass._System.array5?(_System.array5$arg)) } 
  $Is(c#0, Tclass._System.array5(_System.array5$arg))
     <==> $Is(c#0, Tclass._System.array5?(_System.array5$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array5
axiom (forall _System.array5$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array5(_System.array5$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array5?(_System.array5$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array5(_System.array5$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array5?(_System.array5$arg), $h));

const unique class._System.array6?: ClassName;

function Tclass._System.array6?(Ty) : Ty;

const unique Tagclass._System.array6?: TyTag;

// Tclass._System.array6? Tag
axiom (forall _System.array6$arg: Ty :: 
  { Tclass._System.array6?(_System.array6$arg) } 
  Tag(Tclass._System.array6?(_System.array6$arg)) == Tagclass._System.array6?
     && TagFamily(Tclass._System.array6?(_System.array6$arg)) == tytagFamily$array6);

function Tclass._System.array6?_0(Ty) : Ty;

// Tclass._System.array6? injectivity 0
axiom (forall _System.array6$arg: Ty :: 
  { Tclass._System.array6?(_System.array6$arg) } 
  Tclass._System.array6?_0(Tclass._System.array6?(_System.array6$arg))
     == _System.array6$arg);

// Box/unbox axiom for Tclass._System.array6?
axiom (forall _System.array6$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array6?(_System.array6$arg)) } 
  $IsBox(bx, Tclass._System.array6?(_System.array6$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array6?(_System.array6$arg)));

axiom (forall o: ref :: { _System.array6.Length0(o) } 0 <= _System.array6.Length0(o));

axiom (forall o: ref :: { _System.array6.Length1(o) } 0 <= _System.array6.Length1(o));

axiom (forall o: ref :: { _System.array6.Length2(o) } 0 <= _System.array6.Length2(o));

axiom (forall o: ref :: { _System.array6.Length3(o) } 0 <= _System.array6.Length3(o));

axiom (forall o: ref :: { _System.array6.Length4(o) } 0 <= _System.array6.Length4(o));

axiom (forall o: ref :: { _System.array6.Length5(o) } 0 <= _System.array6.Length5(o));

// array6.: Type axiom
axiom (forall _System.array6$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int, 
    $i4: int, 
    $i5: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
          $i4), 
        $i5)), Tclass._System.array6?(_System.array6$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array6?(_System.array6$arg)
       && 
      0 <= $i0
       && $i0 < _System.array6.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array6.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array6.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array6.Length3($o)
       && 
      0 <= $i4
       && $i4 < _System.array6.Length4($o)
       && 
      0 <= $i5
       && $i5 < _System.array6.Length5($o)
     ==> $IsBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
            $i4), 
          $i5)), 
      _System.array6$arg));

// array6.: Allocation axiom
axiom (forall _System.array6$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int, 
    $i4: int, 
    $i5: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
          $i4), 
        $i5)), Tclass._System.array6?(_System.array6$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array6?(_System.array6$arg)
       && 
      0 <= $i0
       && $i0 < _System.array6.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array6.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array6.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array6.Length3($o)
       && 
      0 <= $i4
       && $i4 < _System.array6.Length4($o)
       && 
      0 <= $i5
       && $i5 < _System.array6.Length5($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
            $i4), 
          $i5)), 
      _System.array6$arg, 
      $h));

// $Is axiom for array type array6
axiom (forall _System.array6$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array6?(_System.array6$arg)) } 
  $Is($o, Tclass._System.array6?(_System.array6$arg))
     <==> $o == null || dtype($o) == Tclass._System.array6?(_System.array6$arg));

// $IsAlloc axiom for array type array6
axiom (forall _System.array6$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array6?(_System.array6$arg), $h) } 
  $IsAlloc($o, Tclass._System.array6?(_System.array6$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function _System.array6.Length0(ref) : int;

// array6.Length0: Type axiom
axiom (forall _System.array6$arg: Ty, $o: ref :: 
  { _System.array6.Length0($o), Tclass._System.array6?(_System.array6$arg) } 
  $o != null && dtype($o) == Tclass._System.array6?(_System.array6$arg)
     ==> $Is(_System.array6.Length0($o), TInt));

// array6.Length0: Allocation axiom
axiom (forall _System.array6$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array6.Length0($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array6?(_System.array6$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array6?(_System.array6$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array6.Length0($o), TInt, $h));

function _System.array6.Length1(ref) : int;

// array6.Length1: Type axiom
axiom (forall _System.array6$arg: Ty, $o: ref :: 
  { _System.array6.Length1($o), Tclass._System.array6?(_System.array6$arg) } 
  $o != null && dtype($o) == Tclass._System.array6?(_System.array6$arg)
     ==> $Is(_System.array6.Length1($o), TInt));

// array6.Length1: Allocation axiom
axiom (forall _System.array6$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array6.Length1($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array6?(_System.array6$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array6?(_System.array6$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array6.Length1($o), TInt, $h));

function _System.array6.Length2(ref) : int;

// array6.Length2: Type axiom
axiom (forall _System.array6$arg: Ty, $o: ref :: 
  { _System.array6.Length2($o), Tclass._System.array6?(_System.array6$arg) } 
  $o != null && dtype($o) == Tclass._System.array6?(_System.array6$arg)
     ==> $Is(_System.array6.Length2($o), TInt));

// array6.Length2: Allocation axiom
axiom (forall _System.array6$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array6.Length2($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array6?(_System.array6$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array6?(_System.array6$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array6.Length2($o), TInt, $h));

function _System.array6.Length3(ref) : int;

// array6.Length3: Type axiom
axiom (forall _System.array6$arg: Ty, $o: ref :: 
  { _System.array6.Length3($o), Tclass._System.array6?(_System.array6$arg) } 
  $o != null && dtype($o) == Tclass._System.array6?(_System.array6$arg)
     ==> $Is(_System.array6.Length3($o), TInt));

// array6.Length3: Allocation axiom
axiom (forall _System.array6$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array6.Length3($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array6?(_System.array6$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array6?(_System.array6$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array6.Length3($o), TInt, $h));

function _System.array6.Length4(ref) : int;

// array6.Length4: Type axiom
axiom (forall _System.array6$arg: Ty, $o: ref :: 
  { _System.array6.Length4($o), Tclass._System.array6?(_System.array6$arg) } 
  $o != null && dtype($o) == Tclass._System.array6?(_System.array6$arg)
     ==> $Is(_System.array6.Length4($o), TInt));

// array6.Length4: Allocation axiom
axiom (forall _System.array6$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array6.Length4($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array6?(_System.array6$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array6?(_System.array6$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array6.Length4($o), TInt, $h));

function _System.array6.Length5(ref) : int;

// array6.Length5: Type axiom
axiom (forall _System.array6$arg: Ty, $o: ref :: 
  { _System.array6.Length5($o), Tclass._System.array6?(_System.array6$arg) } 
  $o != null && dtype($o) == Tclass._System.array6?(_System.array6$arg)
     ==> $Is(_System.array6.Length5($o), TInt));

// array6.Length5: Allocation axiom
axiom (forall _System.array6$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array6.Length5($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array6?(_System.array6$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array6?(_System.array6$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array6.Length5($o), TInt, $h));

function Tclass._System.array6(Ty) : Ty;

const unique Tagclass._System.array6: TyTag;

// Tclass._System.array6 Tag
axiom (forall _System.array6$arg: Ty :: 
  { Tclass._System.array6(_System.array6$arg) } 
  Tag(Tclass._System.array6(_System.array6$arg)) == Tagclass._System.array6
     && TagFamily(Tclass._System.array6(_System.array6$arg)) == tytagFamily$array6);

function Tclass._System.array6_0(Ty) : Ty;

// Tclass._System.array6 injectivity 0
axiom (forall _System.array6$arg: Ty :: 
  { Tclass._System.array6(_System.array6$arg) } 
  Tclass._System.array6_0(Tclass._System.array6(_System.array6$arg))
     == _System.array6$arg);

// Box/unbox axiom for Tclass._System.array6
axiom (forall _System.array6$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array6(_System.array6$arg)) } 
  $IsBox(bx, Tclass._System.array6(_System.array6$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array6(_System.array6$arg)));

// $Is axiom for non-null type _System.array6
axiom (forall _System.array6$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array6(_System.array6$arg)) } 
    { $Is(c#0, Tclass._System.array6?(_System.array6$arg)) } 
  $Is(c#0, Tclass._System.array6(_System.array6$arg))
     <==> $Is(c#0, Tclass._System.array6?(_System.array6$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array6
axiom (forall _System.array6$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array6(_System.array6$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array6?(_System.array6$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array6(_System.array6$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array6?(_System.array6$arg), $h));

const unique class._System.array7?: ClassName;

function Tclass._System.array7?(Ty) : Ty;

const unique Tagclass._System.array7?: TyTag;

// Tclass._System.array7? Tag
axiom (forall _System.array7$arg: Ty :: 
  { Tclass._System.array7?(_System.array7$arg) } 
  Tag(Tclass._System.array7?(_System.array7$arg)) == Tagclass._System.array7?
     && TagFamily(Tclass._System.array7?(_System.array7$arg)) == tytagFamily$array7);

function Tclass._System.array7?_0(Ty) : Ty;

// Tclass._System.array7? injectivity 0
axiom (forall _System.array7$arg: Ty :: 
  { Tclass._System.array7?(_System.array7$arg) } 
  Tclass._System.array7?_0(Tclass._System.array7?(_System.array7$arg))
     == _System.array7$arg);

// Box/unbox axiom for Tclass._System.array7?
axiom (forall _System.array7$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array7?(_System.array7$arg)) } 
  $IsBox(bx, Tclass._System.array7?(_System.array7$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array7?(_System.array7$arg)));

axiom (forall o: ref :: { _System.array7.Length0(o) } 0 <= _System.array7.Length0(o));

axiom (forall o: ref :: { _System.array7.Length1(o) } 0 <= _System.array7.Length1(o));

axiom (forall o: ref :: { _System.array7.Length2(o) } 0 <= _System.array7.Length2(o));

axiom (forall o: ref :: { _System.array7.Length3(o) } 0 <= _System.array7.Length3(o));

axiom (forall o: ref :: { _System.array7.Length4(o) } 0 <= _System.array7.Length4(o));

axiom (forall o: ref :: { _System.array7.Length5(o) } 0 <= _System.array7.Length5(o));

axiom (forall o: ref :: { _System.array7.Length6(o) } 0 <= _System.array7.Length6(o));

// array7.: Type axiom
axiom (forall _System.array7$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int, 
    $i4: int, 
    $i5: int, 
    $i6: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
            $i4), 
          $i5), 
        $i6)), Tclass._System.array7?(_System.array7$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array7?(_System.array7$arg)
       && 
      0 <= $i0
       && $i0 < _System.array7.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array7.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array7.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array7.Length3($o)
       && 
      0 <= $i4
       && $i4 < _System.array7.Length4($o)
       && 
      0 <= $i5
       && $i5 < _System.array7.Length5($o)
       && 
      0 <= $i6
       && $i6 < _System.array7.Length6($o)
     ==> $IsBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
              $i4), 
            $i5), 
          $i6)), 
      _System.array7$arg));

// array7.: Allocation axiom
axiom (forall _System.array7$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int, 
    $i4: int, 
    $i5: int, 
    $i6: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
            $i4), 
          $i5), 
        $i6)), Tclass._System.array7?(_System.array7$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array7?(_System.array7$arg)
       && 
      0 <= $i0
       && $i0 < _System.array7.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array7.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array7.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array7.Length3($o)
       && 
      0 <= $i4
       && $i4 < _System.array7.Length4($o)
       && 
      0 <= $i5
       && $i5 < _System.array7.Length5($o)
       && 
      0 <= $i6
       && $i6 < _System.array7.Length6($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
              $i4), 
            $i5), 
          $i6)), 
      _System.array7$arg, 
      $h));

// $Is axiom for array type array7
axiom (forall _System.array7$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array7?(_System.array7$arg)) } 
  $Is($o, Tclass._System.array7?(_System.array7$arg))
     <==> $o == null || dtype($o) == Tclass._System.array7?(_System.array7$arg));

// $IsAlloc axiom for array type array7
axiom (forall _System.array7$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array7?(_System.array7$arg), $h) } 
  $IsAlloc($o, Tclass._System.array7?(_System.array7$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function _System.array7.Length0(ref) : int;

// array7.Length0: Type axiom
axiom (forall _System.array7$arg: Ty, $o: ref :: 
  { _System.array7.Length0($o), Tclass._System.array7?(_System.array7$arg) } 
  $o != null && dtype($o) == Tclass._System.array7?(_System.array7$arg)
     ==> $Is(_System.array7.Length0($o), TInt));

// array7.Length0: Allocation axiom
axiom (forall _System.array7$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array7.Length0($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array7?(_System.array7$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array7?(_System.array7$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array7.Length0($o), TInt, $h));

function _System.array7.Length1(ref) : int;

// array7.Length1: Type axiom
axiom (forall _System.array7$arg: Ty, $o: ref :: 
  { _System.array7.Length1($o), Tclass._System.array7?(_System.array7$arg) } 
  $o != null && dtype($o) == Tclass._System.array7?(_System.array7$arg)
     ==> $Is(_System.array7.Length1($o), TInt));

// array7.Length1: Allocation axiom
axiom (forall _System.array7$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array7.Length1($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array7?(_System.array7$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array7?(_System.array7$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array7.Length1($o), TInt, $h));

function _System.array7.Length2(ref) : int;

// array7.Length2: Type axiom
axiom (forall _System.array7$arg: Ty, $o: ref :: 
  { _System.array7.Length2($o), Tclass._System.array7?(_System.array7$arg) } 
  $o != null && dtype($o) == Tclass._System.array7?(_System.array7$arg)
     ==> $Is(_System.array7.Length2($o), TInt));

// array7.Length2: Allocation axiom
axiom (forall _System.array7$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array7.Length2($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array7?(_System.array7$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array7?(_System.array7$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array7.Length2($o), TInt, $h));

function _System.array7.Length3(ref) : int;

// array7.Length3: Type axiom
axiom (forall _System.array7$arg: Ty, $o: ref :: 
  { _System.array7.Length3($o), Tclass._System.array7?(_System.array7$arg) } 
  $o != null && dtype($o) == Tclass._System.array7?(_System.array7$arg)
     ==> $Is(_System.array7.Length3($o), TInt));

// array7.Length3: Allocation axiom
axiom (forall _System.array7$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array7.Length3($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array7?(_System.array7$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array7?(_System.array7$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array7.Length3($o), TInt, $h));

function _System.array7.Length4(ref) : int;

// array7.Length4: Type axiom
axiom (forall _System.array7$arg: Ty, $o: ref :: 
  { _System.array7.Length4($o), Tclass._System.array7?(_System.array7$arg) } 
  $o != null && dtype($o) == Tclass._System.array7?(_System.array7$arg)
     ==> $Is(_System.array7.Length4($o), TInt));

// array7.Length4: Allocation axiom
axiom (forall _System.array7$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array7.Length4($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array7?(_System.array7$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array7?(_System.array7$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array7.Length4($o), TInt, $h));

function _System.array7.Length5(ref) : int;

// array7.Length5: Type axiom
axiom (forall _System.array7$arg: Ty, $o: ref :: 
  { _System.array7.Length5($o), Tclass._System.array7?(_System.array7$arg) } 
  $o != null && dtype($o) == Tclass._System.array7?(_System.array7$arg)
     ==> $Is(_System.array7.Length5($o), TInt));

// array7.Length5: Allocation axiom
axiom (forall _System.array7$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array7.Length5($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array7?(_System.array7$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array7?(_System.array7$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array7.Length5($o), TInt, $h));

function _System.array7.Length6(ref) : int;

// array7.Length6: Type axiom
axiom (forall _System.array7$arg: Ty, $o: ref :: 
  { _System.array7.Length6($o), Tclass._System.array7?(_System.array7$arg) } 
  $o != null && dtype($o) == Tclass._System.array7?(_System.array7$arg)
     ==> $Is(_System.array7.Length6($o), TInt));

// array7.Length6: Allocation axiom
axiom (forall _System.array7$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array7.Length6($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array7?(_System.array7$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array7?(_System.array7$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array7.Length6($o), TInt, $h));

function Tclass._System.array7(Ty) : Ty;

const unique Tagclass._System.array7: TyTag;

// Tclass._System.array7 Tag
axiom (forall _System.array7$arg: Ty :: 
  { Tclass._System.array7(_System.array7$arg) } 
  Tag(Tclass._System.array7(_System.array7$arg)) == Tagclass._System.array7
     && TagFamily(Tclass._System.array7(_System.array7$arg)) == tytagFamily$array7);

function Tclass._System.array7_0(Ty) : Ty;

// Tclass._System.array7 injectivity 0
axiom (forall _System.array7$arg: Ty :: 
  { Tclass._System.array7(_System.array7$arg) } 
  Tclass._System.array7_0(Tclass._System.array7(_System.array7$arg))
     == _System.array7$arg);

// Box/unbox axiom for Tclass._System.array7
axiom (forall _System.array7$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array7(_System.array7$arg)) } 
  $IsBox(bx, Tclass._System.array7(_System.array7$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array7(_System.array7$arg)));

// $Is axiom for non-null type _System.array7
axiom (forall _System.array7$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array7(_System.array7$arg)) } 
    { $Is(c#0, Tclass._System.array7?(_System.array7$arg)) } 
  $Is(c#0, Tclass._System.array7(_System.array7$arg))
     <==> $Is(c#0, Tclass._System.array7?(_System.array7$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array7
axiom (forall _System.array7$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array7(_System.array7$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array7?(_System.array7$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array7(_System.array7$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array7?(_System.array7$arg), $h));

const unique class._System.array8?: ClassName;

function Tclass._System.array8?(Ty) : Ty;

const unique Tagclass._System.array8?: TyTag;

// Tclass._System.array8? Tag
axiom (forall _System.array8$arg: Ty :: 
  { Tclass._System.array8?(_System.array8$arg) } 
  Tag(Tclass._System.array8?(_System.array8$arg)) == Tagclass._System.array8?
     && TagFamily(Tclass._System.array8?(_System.array8$arg)) == tytagFamily$array8);

function Tclass._System.array8?_0(Ty) : Ty;

// Tclass._System.array8? injectivity 0
axiom (forall _System.array8$arg: Ty :: 
  { Tclass._System.array8?(_System.array8$arg) } 
  Tclass._System.array8?_0(Tclass._System.array8?(_System.array8$arg))
     == _System.array8$arg);

// Box/unbox axiom for Tclass._System.array8?
axiom (forall _System.array8$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array8?(_System.array8$arg)) } 
  $IsBox(bx, Tclass._System.array8?(_System.array8$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array8?(_System.array8$arg)));

axiom (forall o: ref :: { _System.array8.Length0(o) } 0 <= _System.array8.Length0(o));

axiom (forall o: ref :: { _System.array8.Length1(o) } 0 <= _System.array8.Length1(o));

axiom (forall o: ref :: { _System.array8.Length2(o) } 0 <= _System.array8.Length2(o));

axiom (forall o: ref :: { _System.array8.Length3(o) } 0 <= _System.array8.Length3(o));

axiom (forall o: ref :: { _System.array8.Length4(o) } 0 <= _System.array8.Length4(o));

axiom (forall o: ref :: { _System.array8.Length5(o) } 0 <= _System.array8.Length5(o));

axiom (forall o: ref :: { _System.array8.Length6(o) } 0 <= _System.array8.Length6(o));

axiom (forall o: ref :: { _System.array8.Length7(o) } 0 <= _System.array8.Length7(o));

// array8.: Type axiom
axiom (forall _System.array8$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int, 
    $i4: int, 
    $i5: int, 
    $i6: int, 
    $i7: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
              $i4), 
            $i5), 
          $i6), 
        $i7)), Tclass._System.array8?(_System.array8$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array8?(_System.array8$arg)
       && 
      0 <= $i0
       && $i0 < _System.array8.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array8.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array8.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array8.Length3($o)
       && 
      0 <= $i4
       && $i4 < _System.array8.Length4($o)
       && 
      0 <= $i5
       && $i5 < _System.array8.Length5($o)
       && 
      0 <= $i6
       && $i6 < _System.array8.Length6($o)
       && 
      0 <= $i7
       && $i7 < _System.array8.Length7($o)
     ==> $IsBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                $i4), 
              $i5), 
            $i6), 
          $i7)), 
      _System.array8$arg));

// array8.: Allocation axiom
axiom (forall _System.array8$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int, 
    $i4: int, 
    $i5: int, 
    $i6: int, 
    $i7: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
              $i4), 
            $i5), 
          $i6), 
        $i7)), Tclass._System.array8?(_System.array8$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array8?(_System.array8$arg)
       && 
      0 <= $i0
       && $i0 < _System.array8.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array8.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array8.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array8.Length3($o)
       && 
      0 <= $i4
       && $i4 < _System.array8.Length4($o)
       && 
      0 <= $i5
       && $i5 < _System.array8.Length5($o)
       && 
      0 <= $i6
       && $i6 < _System.array8.Length6($o)
       && 
      0 <= $i7
       && $i7 < _System.array8.Length7($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                $i4), 
              $i5), 
            $i6), 
          $i7)), 
      _System.array8$arg, 
      $h));

// $Is axiom for array type array8
axiom (forall _System.array8$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array8?(_System.array8$arg)) } 
  $Is($o, Tclass._System.array8?(_System.array8$arg))
     <==> $o == null || dtype($o) == Tclass._System.array8?(_System.array8$arg));

// $IsAlloc axiom for array type array8
axiom (forall _System.array8$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array8?(_System.array8$arg), $h) } 
  $IsAlloc($o, Tclass._System.array8?(_System.array8$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function _System.array8.Length0(ref) : int;

// array8.Length0: Type axiom
axiom (forall _System.array8$arg: Ty, $o: ref :: 
  { _System.array8.Length0($o), Tclass._System.array8?(_System.array8$arg) } 
  $o != null && dtype($o) == Tclass._System.array8?(_System.array8$arg)
     ==> $Is(_System.array8.Length0($o), TInt));

// array8.Length0: Allocation axiom
axiom (forall _System.array8$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array8.Length0($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array8?(_System.array8$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array8?(_System.array8$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array8.Length0($o), TInt, $h));

function _System.array8.Length1(ref) : int;

// array8.Length1: Type axiom
axiom (forall _System.array8$arg: Ty, $o: ref :: 
  { _System.array8.Length1($o), Tclass._System.array8?(_System.array8$arg) } 
  $o != null && dtype($o) == Tclass._System.array8?(_System.array8$arg)
     ==> $Is(_System.array8.Length1($o), TInt));

// array8.Length1: Allocation axiom
axiom (forall _System.array8$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array8.Length1($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array8?(_System.array8$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array8?(_System.array8$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array8.Length1($o), TInt, $h));

function _System.array8.Length2(ref) : int;

// array8.Length2: Type axiom
axiom (forall _System.array8$arg: Ty, $o: ref :: 
  { _System.array8.Length2($o), Tclass._System.array8?(_System.array8$arg) } 
  $o != null && dtype($o) == Tclass._System.array8?(_System.array8$arg)
     ==> $Is(_System.array8.Length2($o), TInt));

// array8.Length2: Allocation axiom
axiom (forall _System.array8$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array8.Length2($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array8?(_System.array8$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array8?(_System.array8$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array8.Length2($o), TInt, $h));

function _System.array8.Length3(ref) : int;

// array8.Length3: Type axiom
axiom (forall _System.array8$arg: Ty, $o: ref :: 
  { _System.array8.Length3($o), Tclass._System.array8?(_System.array8$arg) } 
  $o != null && dtype($o) == Tclass._System.array8?(_System.array8$arg)
     ==> $Is(_System.array8.Length3($o), TInt));

// array8.Length3: Allocation axiom
axiom (forall _System.array8$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array8.Length3($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array8?(_System.array8$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array8?(_System.array8$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array8.Length3($o), TInt, $h));

function _System.array8.Length4(ref) : int;

// array8.Length4: Type axiom
axiom (forall _System.array8$arg: Ty, $o: ref :: 
  { _System.array8.Length4($o), Tclass._System.array8?(_System.array8$arg) } 
  $o != null && dtype($o) == Tclass._System.array8?(_System.array8$arg)
     ==> $Is(_System.array8.Length4($o), TInt));

// array8.Length4: Allocation axiom
axiom (forall _System.array8$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array8.Length4($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array8?(_System.array8$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array8?(_System.array8$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array8.Length4($o), TInt, $h));

function _System.array8.Length5(ref) : int;

// array8.Length5: Type axiom
axiom (forall _System.array8$arg: Ty, $o: ref :: 
  { _System.array8.Length5($o), Tclass._System.array8?(_System.array8$arg) } 
  $o != null && dtype($o) == Tclass._System.array8?(_System.array8$arg)
     ==> $Is(_System.array8.Length5($o), TInt));

// array8.Length5: Allocation axiom
axiom (forall _System.array8$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array8.Length5($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array8?(_System.array8$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array8?(_System.array8$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array8.Length5($o), TInt, $h));

function _System.array8.Length6(ref) : int;

// array8.Length6: Type axiom
axiom (forall _System.array8$arg: Ty, $o: ref :: 
  { _System.array8.Length6($o), Tclass._System.array8?(_System.array8$arg) } 
  $o != null && dtype($o) == Tclass._System.array8?(_System.array8$arg)
     ==> $Is(_System.array8.Length6($o), TInt));

// array8.Length6: Allocation axiom
axiom (forall _System.array8$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array8.Length6($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array8?(_System.array8$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array8?(_System.array8$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array8.Length6($o), TInt, $h));

function _System.array8.Length7(ref) : int;

// array8.Length7: Type axiom
axiom (forall _System.array8$arg: Ty, $o: ref :: 
  { _System.array8.Length7($o), Tclass._System.array8?(_System.array8$arg) } 
  $o != null && dtype($o) == Tclass._System.array8?(_System.array8$arg)
     ==> $Is(_System.array8.Length7($o), TInt));

// array8.Length7: Allocation axiom
axiom (forall _System.array8$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array8.Length7($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array8?(_System.array8$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array8?(_System.array8$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array8.Length7($o), TInt, $h));

function Tclass._System.array8(Ty) : Ty;

const unique Tagclass._System.array8: TyTag;

// Tclass._System.array8 Tag
axiom (forall _System.array8$arg: Ty :: 
  { Tclass._System.array8(_System.array8$arg) } 
  Tag(Tclass._System.array8(_System.array8$arg)) == Tagclass._System.array8
     && TagFamily(Tclass._System.array8(_System.array8$arg)) == tytagFamily$array8);

function Tclass._System.array8_0(Ty) : Ty;

// Tclass._System.array8 injectivity 0
axiom (forall _System.array8$arg: Ty :: 
  { Tclass._System.array8(_System.array8$arg) } 
  Tclass._System.array8_0(Tclass._System.array8(_System.array8$arg))
     == _System.array8$arg);

// Box/unbox axiom for Tclass._System.array8
axiom (forall _System.array8$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array8(_System.array8$arg)) } 
  $IsBox(bx, Tclass._System.array8(_System.array8$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array8(_System.array8$arg)));

// $Is axiom for non-null type _System.array8
axiom (forall _System.array8$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array8(_System.array8$arg)) } 
    { $Is(c#0, Tclass._System.array8?(_System.array8$arg)) } 
  $Is(c#0, Tclass._System.array8(_System.array8$arg))
     <==> $Is(c#0, Tclass._System.array8?(_System.array8$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array8
axiom (forall _System.array8$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array8(_System.array8$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array8?(_System.array8$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array8(_System.array8$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array8?(_System.array8$arg), $h));

const unique class._System.array9?: ClassName;

function Tclass._System.array9?(Ty) : Ty;

const unique Tagclass._System.array9?: TyTag;

// Tclass._System.array9? Tag
axiom (forall _System.array9$arg: Ty :: 
  { Tclass._System.array9?(_System.array9$arg) } 
  Tag(Tclass._System.array9?(_System.array9$arg)) == Tagclass._System.array9?
     && TagFamily(Tclass._System.array9?(_System.array9$arg)) == tytagFamily$array9);

function Tclass._System.array9?_0(Ty) : Ty;

// Tclass._System.array9? injectivity 0
axiom (forall _System.array9$arg: Ty :: 
  { Tclass._System.array9?(_System.array9$arg) } 
  Tclass._System.array9?_0(Tclass._System.array9?(_System.array9$arg))
     == _System.array9$arg);

// Box/unbox axiom for Tclass._System.array9?
axiom (forall _System.array9$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array9?(_System.array9$arg)) } 
  $IsBox(bx, Tclass._System.array9?(_System.array9$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array9?(_System.array9$arg)));

axiom (forall o: ref :: { _System.array9.Length0(o) } 0 <= _System.array9.Length0(o));

axiom (forall o: ref :: { _System.array9.Length1(o) } 0 <= _System.array9.Length1(o));

axiom (forall o: ref :: { _System.array9.Length2(o) } 0 <= _System.array9.Length2(o));

axiom (forall o: ref :: { _System.array9.Length3(o) } 0 <= _System.array9.Length3(o));

axiom (forall o: ref :: { _System.array9.Length4(o) } 0 <= _System.array9.Length4(o));

axiom (forall o: ref :: { _System.array9.Length5(o) } 0 <= _System.array9.Length5(o));

axiom (forall o: ref :: { _System.array9.Length6(o) } 0 <= _System.array9.Length6(o));

axiom (forall o: ref :: { _System.array9.Length7(o) } 0 <= _System.array9.Length7(o));

axiom (forall o: ref :: { _System.array9.Length8(o) } 0 <= _System.array9.Length8(o));

// array9.: Type axiom
axiom (forall _System.array9$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int, 
    $i4: int, 
    $i5: int, 
    $i6: int, 
    $i7: int, 
    $i8: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                $i4), 
              $i5), 
            $i6), 
          $i7), 
        $i8)), Tclass._System.array9?(_System.array9$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array9?(_System.array9$arg)
       && 
      0 <= $i0
       && $i0 < _System.array9.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array9.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array9.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array9.Length3($o)
       && 
      0 <= $i4
       && $i4 < _System.array9.Length4($o)
       && 
      0 <= $i5
       && $i5 < _System.array9.Length5($o)
       && 
      0 <= $i6
       && $i6 < _System.array9.Length6($o)
       && 
      0 <= $i7
       && $i7 < _System.array9.Length7($o)
       && 
      0 <= $i8
       && $i8 < _System.array9.Length8($o)
     ==> $IsBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                  $i4), 
                $i5), 
              $i6), 
            $i7), 
          $i8)), 
      _System.array9$arg));

// array9.: Allocation axiom
axiom (forall _System.array9$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int, 
    $i4: int, 
    $i5: int, 
    $i6: int, 
    $i7: int, 
    $i8: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                $i4), 
              $i5), 
            $i6), 
          $i7), 
        $i8)), Tclass._System.array9?(_System.array9$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array9?(_System.array9$arg)
       && 
      0 <= $i0
       && $i0 < _System.array9.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array9.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array9.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array9.Length3($o)
       && 
      0 <= $i4
       && $i4 < _System.array9.Length4($o)
       && 
      0 <= $i5
       && $i5 < _System.array9.Length5($o)
       && 
      0 <= $i6
       && $i6 < _System.array9.Length6($o)
       && 
      0 <= $i7
       && $i7 < _System.array9.Length7($o)
       && 
      0 <= $i8
       && $i8 < _System.array9.Length8($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                  $i4), 
                $i5), 
              $i6), 
            $i7), 
          $i8)), 
      _System.array9$arg, 
      $h));

// $Is axiom for array type array9
axiom (forall _System.array9$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array9?(_System.array9$arg)) } 
  $Is($o, Tclass._System.array9?(_System.array9$arg))
     <==> $o == null || dtype($o) == Tclass._System.array9?(_System.array9$arg));

// $IsAlloc axiom for array type array9
axiom (forall _System.array9$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array9?(_System.array9$arg), $h) } 
  $IsAlloc($o, Tclass._System.array9?(_System.array9$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function _System.array9.Length0(ref) : int;

// array9.Length0: Type axiom
axiom (forall _System.array9$arg: Ty, $o: ref :: 
  { _System.array9.Length0($o), Tclass._System.array9?(_System.array9$arg) } 
  $o != null && dtype($o) == Tclass._System.array9?(_System.array9$arg)
     ==> $Is(_System.array9.Length0($o), TInt));

// array9.Length0: Allocation axiom
axiom (forall _System.array9$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array9.Length0($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array9?(_System.array9$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array9?(_System.array9$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array9.Length0($o), TInt, $h));

function _System.array9.Length1(ref) : int;

// array9.Length1: Type axiom
axiom (forall _System.array9$arg: Ty, $o: ref :: 
  { _System.array9.Length1($o), Tclass._System.array9?(_System.array9$arg) } 
  $o != null && dtype($o) == Tclass._System.array9?(_System.array9$arg)
     ==> $Is(_System.array9.Length1($o), TInt));

// array9.Length1: Allocation axiom
axiom (forall _System.array9$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array9.Length1($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array9?(_System.array9$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array9?(_System.array9$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array9.Length1($o), TInt, $h));

function _System.array9.Length2(ref) : int;

// array9.Length2: Type axiom
axiom (forall _System.array9$arg: Ty, $o: ref :: 
  { _System.array9.Length2($o), Tclass._System.array9?(_System.array9$arg) } 
  $o != null && dtype($o) == Tclass._System.array9?(_System.array9$arg)
     ==> $Is(_System.array9.Length2($o), TInt));

// array9.Length2: Allocation axiom
axiom (forall _System.array9$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array9.Length2($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array9?(_System.array9$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array9?(_System.array9$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array9.Length2($o), TInt, $h));

function _System.array9.Length3(ref) : int;

// array9.Length3: Type axiom
axiom (forall _System.array9$arg: Ty, $o: ref :: 
  { _System.array9.Length3($o), Tclass._System.array9?(_System.array9$arg) } 
  $o != null && dtype($o) == Tclass._System.array9?(_System.array9$arg)
     ==> $Is(_System.array9.Length3($o), TInt));

// array9.Length3: Allocation axiom
axiom (forall _System.array9$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array9.Length3($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array9?(_System.array9$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array9?(_System.array9$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array9.Length3($o), TInt, $h));

function _System.array9.Length4(ref) : int;

// array9.Length4: Type axiom
axiom (forall _System.array9$arg: Ty, $o: ref :: 
  { _System.array9.Length4($o), Tclass._System.array9?(_System.array9$arg) } 
  $o != null && dtype($o) == Tclass._System.array9?(_System.array9$arg)
     ==> $Is(_System.array9.Length4($o), TInt));

// array9.Length4: Allocation axiom
axiom (forall _System.array9$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array9.Length4($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array9?(_System.array9$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array9?(_System.array9$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array9.Length4($o), TInt, $h));

function _System.array9.Length5(ref) : int;

// array9.Length5: Type axiom
axiom (forall _System.array9$arg: Ty, $o: ref :: 
  { _System.array9.Length5($o), Tclass._System.array9?(_System.array9$arg) } 
  $o != null && dtype($o) == Tclass._System.array9?(_System.array9$arg)
     ==> $Is(_System.array9.Length5($o), TInt));

// array9.Length5: Allocation axiom
axiom (forall _System.array9$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array9.Length5($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array9?(_System.array9$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array9?(_System.array9$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array9.Length5($o), TInt, $h));

function _System.array9.Length6(ref) : int;

// array9.Length6: Type axiom
axiom (forall _System.array9$arg: Ty, $o: ref :: 
  { _System.array9.Length6($o), Tclass._System.array9?(_System.array9$arg) } 
  $o != null && dtype($o) == Tclass._System.array9?(_System.array9$arg)
     ==> $Is(_System.array9.Length6($o), TInt));

// array9.Length6: Allocation axiom
axiom (forall _System.array9$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array9.Length6($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array9?(_System.array9$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array9?(_System.array9$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array9.Length6($o), TInt, $h));

function _System.array9.Length7(ref) : int;

// array9.Length7: Type axiom
axiom (forall _System.array9$arg: Ty, $o: ref :: 
  { _System.array9.Length7($o), Tclass._System.array9?(_System.array9$arg) } 
  $o != null && dtype($o) == Tclass._System.array9?(_System.array9$arg)
     ==> $Is(_System.array9.Length7($o), TInt));

// array9.Length7: Allocation axiom
axiom (forall _System.array9$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array9.Length7($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array9?(_System.array9$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array9?(_System.array9$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array9.Length7($o), TInt, $h));

function _System.array9.Length8(ref) : int;

// array9.Length8: Type axiom
axiom (forall _System.array9$arg: Ty, $o: ref :: 
  { _System.array9.Length8($o), Tclass._System.array9?(_System.array9$arg) } 
  $o != null && dtype($o) == Tclass._System.array9?(_System.array9$arg)
     ==> $Is(_System.array9.Length8($o), TInt));

// array9.Length8: Allocation axiom
axiom (forall _System.array9$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array9.Length8($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array9?(_System.array9$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array9?(_System.array9$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array9.Length8($o), TInt, $h));

function Tclass._System.array9(Ty) : Ty;

const unique Tagclass._System.array9: TyTag;

// Tclass._System.array9 Tag
axiom (forall _System.array9$arg: Ty :: 
  { Tclass._System.array9(_System.array9$arg) } 
  Tag(Tclass._System.array9(_System.array9$arg)) == Tagclass._System.array9
     && TagFamily(Tclass._System.array9(_System.array9$arg)) == tytagFamily$array9);

function Tclass._System.array9_0(Ty) : Ty;

// Tclass._System.array9 injectivity 0
axiom (forall _System.array9$arg: Ty :: 
  { Tclass._System.array9(_System.array9$arg) } 
  Tclass._System.array9_0(Tclass._System.array9(_System.array9$arg))
     == _System.array9$arg);

// Box/unbox axiom for Tclass._System.array9
axiom (forall _System.array9$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array9(_System.array9$arg)) } 
  $IsBox(bx, Tclass._System.array9(_System.array9$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array9(_System.array9$arg)));

// $Is axiom for non-null type _System.array9
axiom (forall _System.array9$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array9(_System.array9$arg)) } 
    { $Is(c#0, Tclass._System.array9?(_System.array9$arg)) } 
  $Is(c#0, Tclass._System.array9(_System.array9$arg))
     <==> $Is(c#0, Tclass._System.array9?(_System.array9$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array9
axiom (forall _System.array9$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array9(_System.array9$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array9?(_System.array9$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array9(_System.array9$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array9?(_System.array9$arg), $h));

const unique class._System.array10?: ClassName;

function Tclass._System.array10?(Ty) : Ty;

const unique Tagclass._System.array10?: TyTag;

// Tclass._System.array10? Tag
axiom (forall _System.array10$arg: Ty :: 
  { Tclass._System.array10?(_System.array10$arg) } 
  Tag(Tclass._System.array10?(_System.array10$arg)) == Tagclass._System.array10?
     && TagFamily(Tclass._System.array10?(_System.array10$arg)) == tytagFamily$array10);

function Tclass._System.array10?_0(Ty) : Ty;

// Tclass._System.array10? injectivity 0
axiom (forall _System.array10$arg: Ty :: 
  { Tclass._System.array10?(_System.array10$arg) } 
  Tclass._System.array10?_0(Tclass._System.array10?(_System.array10$arg))
     == _System.array10$arg);

// Box/unbox axiom for Tclass._System.array10?
axiom (forall _System.array10$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array10?(_System.array10$arg)) } 
  $IsBox(bx, Tclass._System.array10?(_System.array10$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array10?(_System.array10$arg)));

axiom (forall o: ref :: 
  { _System.array10.Length0(o) } 
  0 <= _System.array10.Length0(o));

axiom (forall o: ref :: 
  { _System.array10.Length1(o) } 
  0 <= _System.array10.Length1(o));

axiom (forall o: ref :: 
  { _System.array10.Length2(o) } 
  0 <= _System.array10.Length2(o));

axiom (forall o: ref :: 
  { _System.array10.Length3(o) } 
  0 <= _System.array10.Length3(o));

axiom (forall o: ref :: 
  { _System.array10.Length4(o) } 
  0 <= _System.array10.Length4(o));

axiom (forall o: ref :: 
  { _System.array10.Length5(o) } 
  0 <= _System.array10.Length5(o));

axiom (forall o: ref :: 
  { _System.array10.Length6(o) } 
  0 <= _System.array10.Length6(o));

axiom (forall o: ref :: 
  { _System.array10.Length7(o) } 
  0 <= _System.array10.Length7(o));

axiom (forall o: ref :: 
  { _System.array10.Length8(o) } 
  0 <= _System.array10.Length8(o));

axiom (forall o: ref :: 
  { _System.array10.Length9(o) } 
  0 <= _System.array10.Length9(o));

// array10.: Type axiom
axiom (forall _System.array10$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int, 
    $i4: int, 
    $i5: int, 
    $i6: int, 
    $i7: int, 
    $i8: int, 
    $i9: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                  $i4), 
                $i5), 
              $i6), 
            $i7), 
          $i8), 
        $i9)), Tclass._System.array10?(_System.array10$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array10?(_System.array10$arg)
       && 
      0 <= $i0
       && $i0 < _System.array10.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array10.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array10.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array10.Length3($o)
       && 
      0 <= $i4
       && $i4 < _System.array10.Length4($o)
       && 
      0 <= $i5
       && $i5 < _System.array10.Length5($o)
       && 
      0 <= $i6
       && $i6 < _System.array10.Length6($o)
       && 
      0 <= $i7
       && $i7 < _System.array10.Length7($o)
       && 
      0 <= $i8
       && $i8 < _System.array10.Length8($o)
       && 
      0 <= $i9
       && $i9 < _System.array10.Length9($o)
     ==> $IsBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                    $i4), 
                  $i5), 
                $i6), 
              $i7), 
            $i8), 
          $i9)), 
      _System.array10$arg));

// array10.: Allocation axiom
axiom (forall _System.array10$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int, 
    $i4: int, 
    $i5: int, 
    $i6: int, 
    $i7: int, 
    $i8: int, 
    $i9: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                  $i4), 
                $i5), 
              $i6), 
            $i7), 
          $i8), 
        $i9)), Tclass._System.array10?(_System.array10$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array10?(_System.array10$arg)
       && 
      0 <= $i0
       && $i0 < _System.array10.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array10.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array10.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array10.Length3($o)
       && 
      0 <= $i4
       && $i4 < _System.array10.Length4($o)
       && 
      0 <= $i5
       && $i5 < _System.array10.Length5($o)
       && 
      0 <= $i6
       && $i6 < _System.array10.Length6($o)
       && 
      0 <= $i7
       && $i7 < _System.array10.Length7($o)
       && 
      0 <= $i8
       && $i8 < _System.array10.Length8($o)
       && 
      0 <= $i9
       && $i9 < _System.array10.Length9($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                    $i4), 
                  $i5), 
                $i6), 
              $i7), 
            $i8), 
          $i9)), 
      _System.array10$arg, 
      $h));

// $Is axiom for array type array10
axiom (forall _System.array10$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array10?(_System.array10$arg)) } 
  $Is($o, Tclass._System.array10?(_System.array10$arg))
     <==> $o == null || dtype($o) == Tclass._System.array10?(_System.array10$arg));

// $IsAlloc axiom for array type array10
axiom (forall _System.array10$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array10?(_System.array10$arg), $h) } 
  $IsAlloc($o, Tclass._System.array10?(_System.array10$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function _System.array10.Length0(ref) : int;

// array10.Length0: Type axiom
axiom (forall _System.array10$arg: Ty, $o: ref :: 
  { _System.array10.Length0($o), Tclass._System.array10?(_System.array10$arg) } 
  $o != null && dtype($o) == Tclass._System.array10?(_System.array10$arg)
     ==> $Is(_System.array10.Length0($o), TInt));

// array10.Length0: Allocation axiom
axiom (forall _System.array10$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array10.Length0($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array10?(_System.array10$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array10?(_System.array10$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array10.Length0($o), TInt, $h));

function _System.array10.Length1(ref) : int;

// array10.Length1: Type axiom
axiom (forall _System.array10$arg: Ty, $o: ref :: 
  { _System.array10.Length1($o), Tclass._System.array10?(_System.array10$arg) } 
  $o != null && dtype($o) == Tclass._System.array10?(_System.array10$arg)
     ==> $Is(_System.array10.Length1($o), TInt));

// array10.Length1: Allocation axiom
axiom (forall _System.array10$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array10.Length1($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array10?(_System.array10$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array10?(_System.array10$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array10.Length1($o), TInt, $h));

function _System.array10.Length2(ref) : int;

// array10.Length2: Type axiom
axiom (forall _System.array10$arg: Ty, $o: ref :: 
  { _System.array10.Length2($o), Tclass._System.array10?(_System.array10$arg) } 
  $o != null && dtype($o) == Tclass._System.array10?(_System.array10$arg)
     ==> $Is(_System.array10.Length2($o), TInt));

// array10.Length2: Allocation axiom
axiom (forall _System.array10$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array10.Length2($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array10?(_System.array10$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array10?(_System.array10$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array10.Length2($o), TInt, $h));

function _System.array10.Length3(ref) : int;

// array10.Length3: Type axiom
axiom (forall _System.array10$arg: Ty, $o: ref :: 
  { _System.array10.Length3($o), Tclass._System.array10?(_System.array10$arg) } 
  $o != null && dtype($o) == Tclass._System.array10?(_System.array10$arg)
     ==> $Is(_System.array10.Length3($o), TInt));

// array10.Length3: Allocation axiom
axiom (forall _System.array10$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array10.Length3($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array10?(_System.array10$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array10?(_System.array10$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array10.Length3($o), TInt, $h));

function _System.array10.Length4(ref) : int;

// array10.Length4: Type axiom
axiom (forall _System.array10$arg: Ty, $o: ref :: 
  { _System.array10.Length4($o), Tclass._System.array10?(_System.array10$arg) } 
  $o != null && dtype($o) == Tclass._System.array10?(_System.array10$arg)
     ==> $Is(_System.array10.Length4($o), TInt));

// array10.Length4: Allocation axiom
axiom (forall _System.array10$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array10.Length4($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array10?(_System.array10$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array10?(_System.array10$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array10.Length4($o), TInt, $h));

function _System.array10.Length5(ref) : int;

// array10.Length5: Type axiom
axiom (forall _System.array10$arg: Ty, $o: ref :: 
  { _System.array10.Length5($o), Tclass._System.array10?(_System.array10$arg) } 
  $o != null && dtype($o) == Tclass._System.array10?(_System.array10$arg)
     ==> $Is(_System.array10.Length5($o), TInt));

// array10.Length5: Allocation axiom
axiom (forall _System.array10$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array10.Length5($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array10?(_System.array10$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array10?(_System.array10$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array10.Length5($o), TInt, $h));

function _System.array10.Length6(ref) : int;

// array10.Length6: Type axiom
axiom (forall _System.array10$arg: Ty, $o: ref :: 
  { _System.array10.Length6($o), Tclass._System.array10?(_System.array10$arg) } 
  $o != null && dtype($o) == Tclass._System.array10?(_System.array10$arg)
     ==> $Is(_System.array10.Length6($o), TInt));

// array10.Length6: Allocation axiom
axiom (forall _System.array10$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array10.Length6($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array10?(_System.array10$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array10?(_System.array10$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array10.Length6($o), TInt, $h));

function _System.array10.Length7(ref) : int;

// array10.Length7: Type axiom
axiom (forall _System.array10$arg: Ty, $o: ref :: 
  { _System.array10.Length7($o), Tclass._System.array10?(_System.array10$arg) } 
  $o != null && dtype($o) == Tclass._System.array10?(_System.array10$arg)
     ==> $Is(_System.array10.Length7($o), TInt));

// array10.Length7: Allocation axiom
axiom (forall _System.array10$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array10.Length7($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array10?(_System.array10$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array10?(_System.array10$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array10.Length7($o), TInt, $h));

function _System.array10.Length8(ref) : int;

// array10.Length8: Type axiom
axiom (forall _System.array10$arg: Ty, $o: ref :: 
  { _System.array10.Length8($o), Tclass._System.array10?(_System.array10$arg) } 
  $o != null && dtype($o) == Tclass._System.array10?(_System.array10$arg)
     ==> $Is(_System.array10.Length8($o), TInt));

// array10.Length8: Allocation axiom
axiom (forall _System.array10$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array10.Length8($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array10?(_System.array10$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array10?(_System.array10$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array10.Length8($o), TInt, $h));

function _System.array10.Length9(ref) : int;

// array10.Length9: Type axiom
axiom (forall _System.array10$arg: Ty, $o: ref :: 
  { _System.array10.Length9($o), Tclass._System.array10?(_System.array10$arg) } 
  $o != null && dtype($o) == Tclass._System.array10?(_System.array10$arg)
     ==> $Is(_System.array10.Length9($o), TInt));

// array10.Length9: Allocation axiom
axiom (forall _System.array10$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array10.Length9($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array10?(_System.array10$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array10?(_System.array10$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array10.Length9($o), TInt, $h));

function Tclass._System.array10(Ty) : Ty;

const unique Tagclass._System.array10: TyTag;

// Tclass._System.array10 Tag
axiom (forall _System.array10$arg: Ty :: 
  { Tclass._System.array10(_System.array10$arg) } 
  Tag(Tclass._System.array10(_System.array10$arg)) == Tagclass._System.array10
     && TagFamily(Tclass._System.array10(_System.array10$arg)) == tytagFamily$array10);

function Tclass._System.array10_0(Ty) : Ty;

// Tclass._System.array10 injectivity 0
axiom (forall _System.array10$arg: Ty :: 
  { Tclass._System.array10(_System.array10$arg) } 
  Tclass._System.array10_0(Tclass._System.array10(_System.array10$arg))
     == _System.array10$arg);

// Box/unbox axiom for Tclass._System.array10
axiom (forall _System.array10$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array10(_System.array10$arg)) } 
  $IsBox(bx, Tclass._System.array10(_System.array10$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array10(_System.array10$arg)));

// $Is axiom for non-null type _System.array10
axiom (forall _System.array10$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array10(_System.array10$arg)) } 
    { $Is(c#0, Tclass._System.array10?(_System.array10$arg)) } 
  $Is(c#0, Tclass._System.array10(_System.array10$arg))
     <==> $Is(c#0, Tclass._System.array10?(_System.array10$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array10
axiom (forall _System.array10$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array10(_System.array10$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array10?(_System.array10$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array10(_System.array10$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array10?(_System.array10$arg), $h));

const unique class._System.array11?: ClassName;

function Tclass._System.array11?(Ty) : Ty;

const unique Tagclass._System.array11?: TyTag;

// Tclass._System.array11? Tag
axiom (forall _System.array11$arg: Ty :: 
  { Tclass._System.array11?(_System.array11$arg) } 
  Tag(Tclass._System.array11?(_System.array11$arg)) == Tagclass._System.array11?
     && TagFamily(Tclass._System.array11?(_System.array11$arg)) == tytagFamily$array11);

function Tclass._System.array11?_0(Ty) : Ty;

// Tclass._System.array11? injectivity 0
axiom (forall _System.array11$arg: Ty :: 
  { Tclass._System.array11?(_System.array11$arg) } 
  Tclass._System.array11?_0(Tclass._System.array11?(_System.array11$arg))
     == _System.array11$arg);

// Box/unbox axiom for Tclass._System.array11?
axiom (forall _System.array11$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array11?(_System.array11$arg)) } 
  $IsBox(bx, Tclass._System.array11?(_System.array11$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array11?(_System.array11$arg)));

axiom (forall o: ref :: 
  { _System.array11.Length0(o) } 
  0 <= _System.array11.Length0(o));

axiom (forall o: ref :: 
  { _System.array11.Length1(o) } 
  0 <= _System.array11.Length1(o));

axiom (forall o: ref :: 
  { _System.array11.Length2(o) } 
  0 <= _System.array11.Length2(o));

axiom (forall o: ref :: 
  { _System.array11.Length3(o) } 
  0 <= _System.array11.Length3(o));

axiom (forall o: ref :: 
  { _System.array11.Length4(o) } 
  0 <= _System.array11.Length4(o));

axiom (forall o: ref :: 
  { _System.array11.Length5(o) } 
  0 <= _System.array11.Length5(o));

axiom (forall o: ref :: 
  { _System.array11.Length6(o) } 
  0 <= _System.array11.Length6(o));

axiom (forall o: ref :: 
  { _System.array11.Length7(o) } 
  0 <= _System.array11.Length7(o));

axiom (forall o: ref :: 
  { _System.array11.Length8(o) } 
  0 <= _System.array11.Length8(o));

axiom (forall o: ref :: 
  { _System.array11.Length9(o) } 
  0 <= _System.array11.Length9(o));

axiom (forall o: ref :: 
  { _System.array11.Length10(o) } 
  0 <= _System.array11.Length10(o));

// array11.: Type axiom
axiom (forall _System.array11$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int, 
    $i4: int, 
    $i5: int, 
    $i6: int, 
    $i7: int, 
    $i8: int, 
    $i9: int, 
    $i10: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                    $i4), 
                  $i5), 
                $i6), 
              $i7), 
            $i8), 
          $i9), 
        $i10)), Tclass._System.array11?(_System.array11$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array11?(_System.array11$arg)
       && 
      0 <= $i0
       && $i0 < _System.array11.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array11.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array11.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array11.Length3($o)
       && 
      0 <= $i4
       && $i4 < _System.array11.Length4($o)
       && 
      0 <= $i5
       && $i5 < _System.array11.Length5($o)
       && 
      0 <= $i6
       && $i6 < _System.array11.Length6($o)
       && 
      0 <= $i7
       && $i7 < _System.array11.Length7($o)
       && 
      0 <= $i8
       && $i8 < _System.array11.Length8($o)
       && 
      0 <= $i9
       && $i9 < _System.array11.Length9($o)
       && 
      0 <= $i10
       && $i10 < _System.array11.Length10($o)
     ==> $IsBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                      $i4), 
                    $i5), 
                  $i6), 
                $i7), 
              $i8), 
            $i9), 
          $i10)), 
      _System.array11$arg));

// array11.: Allocation axiom
axiom (forall _System.array11$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int, 
    $i4: int, 
    $i5: int, 
    $i6: int, 
    $i7: int, 
    $i8: int, 
    $i9: int, 
    $i10: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                    $i4), 
                  $i5), 
                $i6), 
              $i7), 
            $i8), 
          $i9), 
        $i10)), Tclass._System.array11?(_System.array11$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array11?(_System.array11$arg)
       && 
      0 <= $i0
       && $i0 < _System.array11.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array11.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array11.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array11.Length3($o)
       && 
      0 <= $i4
       && $i4 < _System.array11.Length4($o)
       && 
      0 <= $i5
       && $i5 < _System.array11.Length5($o)
       && 
      0 <= $i6
       && $i6 < _System.array11.Length6($o)
       && 
      0 <= $i7
       && $i7 < _System.array11.Length7($o)
       && 
      0 <= $i8
       && $i8 < _System.array11.Length8($o)
       && 
      0 <= $i9
       && $i9 < _System.array11.Length9($o)
       && 
      0 <= $i10
       && $i10 < _System.array11.Length10($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                      $i4), 
                    $i5), 
                  $i6), 
                $i7), 
              $i8), 
            $i9), 
          $i10)), 
      _System.array11$arg, 
      $h));

// $Is axiom for array type array11
axiom (forall _System.array11$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array11?(_System.array11$arg)) } 
  $Is($o, Tclass._System.array11?(_System.array11$arg))
     <==> $o == null || dtype($o) == Tclass._System.array11?(_System.array11$arg));

// $IsAlloc axiom for array type array11
axiom (forall _System.array11$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array11?(_System.array11$arg), $h) } 
  $IsAlloc($o, Tclass._System.array11?(_System.array11$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function _System.array11.Length0(ref) : int;

// array11.Length0: Type axiom
axiom (forall _System.array11$arg: Ty, $o: ref :: 
  { _System.array11.Length0($o), Tclass._System.array11?(_System.array11$arg) } 
  $o != null && dtype($o) == Tclass._System.array11?(_System.array11$arg)
     ==> $Is(_System.array11.Length0($o), TInt));

// array11.Length0: Allocation axiom
axiom (forall _System.array11$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array11.Length0($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array11?(_System.array11$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array11?(_System.array11$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array11.Length0($o), TInt, $h));

function _System.array11.Length1(ref) : int;

// array11.Length1: Type axiom
axiom (forall _System.array11$arg: Ty, $o: ref :: 
  { _System.array11.Length1($o), Tclass._System.array11?(_System.array11$arg) } 
  $o != null && dtype($o) == Tclass._System.array11?(_System.array11$arg)
     ==> $Is(_System.array11.Length1($o), TInt));

// array11.Length1: Allocation axiom
axiom (forall _System.array11$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array11.Length1($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array11?(_System.array11$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array11?(_System.array11$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array11.Length1($o), TInt, $h));

function _System.array11.Length2(ref) : int;

// array11.Length2: Type axiom
axiom (forall _System.array11$arg: Ty, $o: ref :: 
  { _System.array11.Length2($o), Tclass._System.array11?(_System.array11$arg) } 
  $o != null && dtype($o) == Tclass._System.array11?(_System.array11$arg)
     ==> $Is(_System.array11.Length2($o), TInt));

// array11.Length2: Allocation axiom
axiom (forall _System.array11$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array11.Length2($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array11?(_System.array11$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array11?(_System.array11$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array11.Length2($o), TInt, $h));

function _System.array11.Length3(ref) : int;

// array11.Length3: Type axiom
axiom (forall _System.array11$arg: Ty, $o: ref :: 
  { _System.array11.Length3($o), Tclass._System.array11?(_System.array11$arg) } 
  $o != null && dtype($o) == Tclass._System.array11?(_System.array11$arg)
     ==> $Is(_System.array11.Length3($o), TInt));

// array11.Length3: Allocation axiom
axiom (forall _System.array11$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array11.Length3($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array11?(_System.array11$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array11?(_System.array11$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array11.Length3($o), TInt, $h));

function _System.array11.Length4(ref) : int;

// array11.Length4: Type axiom
axiom (forall _System.array11$arg: Ty, $o: ref :: 
  { _System.array11.Length4($o), Tclass._System.array11?(_System.array11$arg) } 
  $o != null && dtype($o) == Tclass._System.array11?(_System.array11$arg)
     ==> $Is(_System.array11.Length4($o), TInt));

// array11.Length4: Allocation axiom
axiom (forall _System.array11$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array11.Length4($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array11?(_System.array11$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array11?(_System.array11$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array11.Length4($o), TInt, $h));

function _System.array11.Length5(ref) : int;

// array11.Length5: Type axiom
axiom (forall _System.array11$arg: Ty, $o: ref :: 
  { _System.array11.Length5($o), Tclass._System.array11?(_System.array11$arg) } 
  $o != null && dtype($o) == Tclass._System.array11?(_System.array11$arg)
     ==> $Is(_System.array11.Length5($o), TInt));

// array11.Length5: Allocation axiom
axiom (forall _System.array11$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array11.Length5($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array11?(_System.array11$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array11?(_System.array11$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array11.Length5($o), TInt, $h));

function _System.array11.Length6(ref) : int;

// array11.Length6: Type axiom
axiom (forall _System.array11$arg: Ty, $o: ref :: 
  { _System.array11.Length6($o), Tclass._System.array11?(_System.array11$arg) } 
  $o != null && dtype($o) == Tclass._System.array11?(_System.array11$arg)
     ==> $Is(_System.array11.Length6($o), TInt));

// array11.Length6: Allocation axiom
axiom (forall _System.array11$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array11.Length6($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array11?(_System.array11$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array11?(_System.array11$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array11.Length6($o), TInt, $h));

function _System.array11.Length7(ref) : int;

// array11.Length7: Type axiom
axiom (forall _System.array11$arg: Ty, $o: ref :: 
  { _System.array11.Length7($o), Tclass._System.array11?(_System.array11$arg) } 
  $o != null && dtype($o) == Tclass._System.array11?(_System.array11$arg)
     ==> $Is(_System.array11.Length7($o), TInt));

// array11.Length7: Allocation axiom
axiom (forall _System.array11$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array11.Length7($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array11?(_System.array11$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array11?(_System.array11$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array11.Length7($o), TInt, $h));

function _System.array11.Length8(ref) : int;

// array11.Length8: Type axiom
axiom (forall _System.array11$arg: Ty, $o: ref :: 
  { _System.array11.Length8($o), Tclass._System.array11?(_System.array11$arg) } 
  $o != null && dtype($o) == Tclass._System.array11?(_System.array11$arg)
     ==> $Is(_System.array11.Length8($o), TInt));

// array11.Length8: Allocation axiom
axiom (forall _System.array11$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array11.Length8($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array11?(_System.array11$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array11?(_System.array11$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array11.Length8($o), TInt, $h));

function _System.array11.Length9(ref) : int;

// array11.Length9: Type axiom
axiom (forall _System.array11$arg: Ty, $o: ref :: 
  { _System.array11.Length9($o), Tclass._System.array11?(_System.array11$arg) } 
  $o != null && dtype($o) == Tclass._System.array11?(_System.array11$arg)
     ==> $Is(_System.array11.Length9($o), TInt));

// array11.Length9: Allocation axiom
axiom (forall _System.array11$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array11.Length9($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array11?(_System.array11$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array11?(_System.array11$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array11.Length9($o), TInt, $h));

function _System.array11.Length10(ref) : int;

// array11.Length10: Type axiom
axiom (forall _System.array11$arg: Ty, $o: ref :: 
  { _System.array11.Length10($o), Tclass._System.array11?(_System.array11$arg) } 
  $o != null && dtype($o) == Tclass._System.array11?(_System.array11$arg)
     ==> $Is(_System.array11.Length10($o), TInt));

// array11.Length10: Allocation axiom
axiom (forall _System.array11$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array11.Length10($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array11?(_System.array11$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array11?(_System.array11$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array11.Length10($o), TInt, $h));

function Tclass._System.array11(Ty) : Ty;

const unique Tagclass._System.array11: TyTag;

// Tclass._System.array11 Tag
axiom (forall _System.array11$arg: Ty :: 
  { Tclass._System.array11(_System.array11$arg) } 
  Tag(Tclass._System.array11(_System.array11$arg)) == Tagclass._System.array11
     && TagFamily(Tclass._System.array11(_System.array11$arg)) == tytagFamily$array11);

function Tclass._System.array11_0(Ty) : Ty;

// Tclass._System.array11 injectivity 0
axiom (forall _System.array11$arg: Ty :: 
  { Tclass._System.array11(_System.array11$arg) } 
  Tclass._System.array11_0(Tclass._System.array11(_System.array11$arg))
     == _System.array11$arg);

// Box/unbox axiom for Tclass._System.array11
axiom (forall _System.array11$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array11(_System.array11$arg)) } 
  $IsBox(bx, Tclass._System.array11(_System.array11$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array11(_System.array11$arg)));

// $Is axiom for non-null type _System.array11
axiom (forall _System.array11$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array11(_System.array11$arg)) } 
    { $Is(c#0, Tclass._System.array11?(_System.array11$arg)) } 
  $Is(c#0, Tclass._System.array11(_System.array11$arg))
     <==> $Is(c#0, Tclass._System.array11?(_System.array11$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array11
axiom (forall _System.array11$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array11(_System.array11$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array11?(_System.array11$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array11(_System.array11$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array11?(_System.array11$arg), $h));

const unique class._System.array12?: ClassName;

function Tclass._System.array12?(Ty) : Ty;

const unique Tagclass._System.array12?: TyTag;

// Tclass._System.array12? Tag
axiom (forall _System.array12$arg: Ty :: 
  { Tclass._System.array12?(_System.array12$arg) } 
  Tag(Tclass._System.array12?(_System.array12$arg)) == Tagclass._System.array12?
     && TagFamily(Tclass._System.array12?(_System.array12$arg)) == tytagFamily$array12);

function Tclass._System.array12?_0(Ty) : Ty;

// Tclass._System.array12? injectivity 0
axiom (forall _System.array12$arg: Ty :: 
  { Tclass._System.array12?(_System.array12$arg) } 
  Tclass._System.array12?_0(Tclass._System.array12?(_System.array12$arg))
     == _System.array12$arg);

// Box/unbox axiom for Tclass._System.array12?
axiom (forall _System.array12$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array12?(_System.array12$arg)) } 
  $IsBox(bx, Tclass._System.array12?(_System.array12$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array12?(_System.array12$arg)));

axiom (forall o: ref :: 
  { _System.array12.Length0(o) } 
  0 <= _System.array12.Length0(o));

axiom (forall o: ref :: 
  { _System.array12.Length1(o) } 
  0 <= _System.array12.Length1(o));

axiom (forall o: ref :: 
  { _System.array12.Length2(o) } 
  0 <= _System.array12.Length2(o));

axiom (forall o: ref :: 
  { _System.array12.Length3(o) } 
  0 <= _System.array12.Length3(o));

axiom (forall o: ref :: 
  { _System.array12.Length4(o) } 
  0 <= _System.array12.Length4(o));

axiom (forall o: ref :: 
  { _System.array12.Length5(o) } 
  0 <= _System.array12.Length5(o));

axiom (forall o: ref :: 
  { _System.array12.Length6(o) } 
  0 <= _System.array12.Length6(o));

axiom (forall o: ref :: 
  { _System.array12.Length7(o) } 
  0 <= _System.array12.Length7(o));

axiom (forall o: ref :: 
  { _System.array12.Length8(o) } 
  0 <= _System.array12.Length8(o));

axiom (forall o: ref :: 
  { _System.array12.Length9(o) } 
  0 <= _System.array12.Length9(o));

axiom (forall o: ref :: 
  { _System.array12.Length10(o) } 
  0 <= _System.array12.Length10(o));

axiom (forall o: ref :: 
  { _System.array12.Length11(o) } 
  0 <= _System.array12.Length11(o));

// array12.: Type axiom
axiom (forall _System.array12$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int, 
    $i4: int, 
    $i5: int, 
    $i6: int, 
    $i7: int, 
    $i8: int, 
    $i9: int, 
    $i10: int, 
    $i11: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                      $i4), 
                    $i5), 
                  $i6), 
                $i7), 
              $i8), 
            $i9), 
          $i10), 
        $i11)), Tclass._System.array12?(_System.array12$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array12?(_System.array12$arg)
       && 
      0 <= $i0
       && $i0 < _System.array12.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array12.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array12.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array12.Length3($o)
       && 
      0 <= $i4
       && $i4 < _System.array12.Length4($o)
       && 
      0 <= $i5
       && $i5 < _System.array12.Length5($o)
       && 
      0 <= $i6
       && $i6 < _System.array12.Length6($o)
       && 
      0 <= $i7
       && $i7 < _System.array12.Length7($o)
       && 
      0 <= $i8
       && $i8 < _System.array12.Length8($o)
       && 
      0 <= $i9
       && $i9 < _System.array12.Length9($o)
       && 
      0 <= $i10
       && $i10 < _System.array12.Length10($o)
       && 
      0 <= $i11
       && $i11 < _System.array12.Length11($o)
     ==> $IsBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                        $i4), 
                      $i5), 
                    $i6), 
                  $i7), 
                $i8), 
              $i9), 
            $i10), 
          $i11)), 
      _System.array12$arg));

// array12.: Allocation axiom
axiom (forall _System.array12$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int, 
    $i4: int, 
    $i5: int, 
    $i6: int, 
    $i7: int, 
    $i8: int, 
    $i9: int, 
    $i10: int, 
    $i11: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                      $i4), 
                    $i5), 
                  $i6), 
                $i7), 
              $i8), 
            $i9), 
          $i10), 
        $i11)), Tclass._System.array12?(_System.array12$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array12?(_System.array12$arg)
       && 
      0 <= $i0
       && $i0 < _System.array12.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array12.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array12.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array12.Length3($o)
       && 
      0 <= $i4
       && $i4 < _System.array12.Length4($o)
       && 
      0 <= $i5
       && $i5 < _System.array12.Length5($o)
       && 
      0 <= $i6
       && $i6 < _System.array12.Length6($o)
       && 
      0 <= $i7
       && $i7 < _System.array12.Length7($o)
       && 
      0 <= $i8
       && $i8 < _System.array12.Length8($o)
       && 
      0 <= $i9
       && $i9 < _System.array12.Length9($o)
       && 
      0 <= $i10
       && $i10 < _System.array12.Length10($o)
       && 
      0 <= $i11
       && $i11 < _System.array12.Length11($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                        $i4), 
                      $i5), 
                    $i6), 
                  $i7), 
                $i8), 
              $i9), 
            $i10), 
          $i11)), 
      _System.array12$arg, 
      $h));

// $Is axiom for array type array12
axiom (forall _System.array12$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array12?(_System.array12$arg)) } 
  $Is($o, Tclass._System.array12?(_System.array12$arg))
     <==> $o == null || dtype($o) == Tclass._System.array12?(_System.array12$arg));

// $IsAlloc axiom for array type array12
axiom (forall _System.array12$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array12?(_System.array12$arg), $h) } 
  $IsAlloc($o, Tclass._System.array12?(_System.array12$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function _System.array12.Length0(ref) : int;

// array12.Length0: Type axiom
axiom (forall _System.array12$arg: Ty, $o: ref :: 
  { _System.array12.Length0($o), Tclass._System.array12?(_System.array12$arg) } 
  $o != null && dtype($o) == Tclass._System.array12?(_System.array12$arg)
     ==> $Is(_System.array12.Length0($o), TInt));

// array12.Length0: Allocation axiom
axiom (forall _System.array12$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array12.Length0($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array12?(_System.array12$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array12?(_System.array12$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array12.Length0($o), TInt, $h));

function _System.array12.Length1(ref) : int;

// array12.Length1: Type axiom
axiom (forall _System.array12$arg: Ty, $o: ref :: 
  { _System.array12.Length1($o), Tclass._System.array12?(_System.array12$arg) } 
  $o != null && dtype($o) == Tclass._System.array12?(_System.array12$arg)
     ==> $Is(_System.array12.Length1($o), TInt));

// array12.Length1: Allocation axiom
axiom (forall _System.array12$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array12.Length1($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array12?(_System.array12$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array12?(_System.array12$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array12.Length1($o), TInt, $h));

function _System.array12.Length2(ref) : int;

// array12.Length2: Type axiom
axiom (forall _System.array12$arg: Ty, $o: ref :: 
  { _System.array12.Length2($o), Tclass._System.array12?(_System.array12$arg) } 
  $o != null && dtype($o) == Tclass._System.array12?(_System.array12$arg)
     ==> $Is(_System.array12.Length2($o), TInt));

// array12.Length2: Allocation axiom
axiom (forall _System.array12$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array12.Length2($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array12?(_System.array12$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array12?(_System.array12$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array12.Length2($o), TInt, $h));

function _System.array12.Length3(ref) : int;

// array12.Length3: Type axiom
axiom (forall _System.array12$arg: Ty, $o: ref :: 
  { _System.array12.Length3($o), Tclass._System.array12?(_System.array12$arg) } 
  $o != null && dtype($o) == Tclass._System.array12?(_System.array12$arg)
     ==> $Is(_System.array12.Length3($o), TInt));

// array12.Length3: Allocation axiom
axiom (forall _System.array12$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array12.Length3($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array12?(_System.array12$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array12?(_System.array12$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array12.Length3($o), TInt, $h));

function _System.array12.Length4(ref) : int;

// array12.Length4: Type axiom
axiom (forall _System.array12$arg: Ty, $o: ref :: 
  { _System.array12.Length4($o), Tclass._System.array12?(_System.array12$arg) } 
  $o != null && dtype($o) == Tclass._System.array12?(_System.array12$arg)
     ==> $Is(_System.array12.Length4($o), TInt));

// array12.Length4: Allocation axiom
axiom (forall _System.array12$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array12.Length4($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array12?(_System.array12$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array12?(_System.array12$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array12.Length4($o), TInt, $h));

function _System.array12.Length5(ref) : int;

// array12.Length5: Type axiom
axiom (forall _System.array12$arg: Ty, $o: ref :: 
  { _System.array12.Length5($o), Tclass._System.array12?(_System.array12$arg) } 
  $o != null && dtype($o) == Tclass._System.array12?(_System.array12$arg)
     ==> $Is(_System.array12.Length5($o), TInt));

// array12.Length5: Allocation axiom
axiom (forall _System.array12$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array12.Length5($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array12?(_System.array12$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array12?(_System.array12$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array12.Length5($o), TInt, $h));

function _System.array12.Length6(ref) : int;

// array12.Length6: Type axiom
axiom (forall _System.array12$arg: Ty, $o: ref :: 
  { _System.array12.Length6($o), Tclass._System.array12?(_System.array12$arg) } 
  $o != null && dtype($o) == Tclass._System.array12?(_System.array12$arg)
     ==> $Is(_System.array12.Length6($o), TInt));

// array12.Length6: Allocation axiom
axiom (forall _System.array12$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array12.Length6($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array12?(_System.array12$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array12?(_System.array12$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array12.Length6($o), TInt, $h));

function _System.array12.Length7(ref) : int;

// array12.Length7: Type axiom
axiom (forall _System.array12$arg: Ty, $o: ref :: 
  { _System.array12.Length7($o), Tclass._System.array12?(_System.array12$arg) } 
  $o != null && dtype($o) == Tclass._System.array12?(_System.array12$arg)
     ==> $Is(_System.array12.Length7($o), TInt));

// array12.Length7: Allocation axiom
axiom (forall _System.array12$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array12.Length7($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array12?(_System.array12$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array12?(_System.array12$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array12.Length7($o), TInt, $h));

function _System.array12.Length8(ref) : int;

// array12.Length8: Type axiom
axiom (forall _System.array12$arg: Ty, $o: ref :: 
  { _System.array12.Length8($o), Tclass._System.array12?(_System.array12$arg) } 
  $o != null && dtype($o) == Tclass._System.array12?(_System.array12$arg)
     ==> $Is(_System.array12.Length8($o), TInt));

// array12.Length8: Allocation axiom
axiom (forall _System.array12$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array12.Length8($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array12?(_System.array12$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array12?(_System.array12$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array12.Length8($o), TInt, $h));

function _System.array12.Length9(ref) : int;

// array12.Length9: Type axiom
axiom (forall _System.array12$arg: Ty, $o: ref :: 
  { _System.array12.Length9($o), Tclass._System.array12?(_System.array12$arg) } 
  $o != null && dtype($o) == Tclass._System.array12?(_System.array12$arg)
     ==> $Is(_System.array12.Length9($o), TInt));

// array12.Length9: Allocation axiom
axiom (forall _System.array12$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array12.Length9($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array12?(_System.array12$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array12?(_System.array12$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array12.Length9($o), TInt, $h));

function _System.array12.Length10(ref) : int;

// array12.Length10: Type axiom
axiom (forall _System.array12$arg: Ty, $o: ref :: 
  { _System.array12.Length10($o), Tclass._System.array12?(_System.array12$arg) } 
  $o != null && dtype($o) == Tclass._System.array12?(_System.array12$arg)
     ==> $Is(_System.array12.Length10($o), TInt));

// array12.Length10: Allocation axiom
axiom (forall _System.array12$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array12.Length10($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array12?(_System.array12$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array12?(_System.array12$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array12.Length10($o), TInt, $h));

function _System.array12.Length11(ref) : int;

// array12.Length11: Type axiom
axiom (forall _System.array12$arg: Ty, $o: ref :: 
  { _System.array12.Length11($o), Tclass._System.array12?(_System.array12$arg) } 
  $o != null && dtype($o) == Tclass._System.array12?(_System.array12$arg)
     ==> $Is(_System.array12.Length11($o), TInt));

// array12.Length11: Allocation axiom
axiom (forall _System.array12$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array12.Length11($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array12?(_System.array12$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array12?(_System.array12$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array12.Length11($o), TInt, $h));

function Tclass._System.array12(Ty) : Ty;

const unique Tagclass._System.array12: TyTag;

// Tclass._System.array12 Tag
axiom (forall _System.array12$arg: Ty :: 
  { Tclass._System.array12(_System.array12$arg) } 
  Tag(Tclass._System.array12(_System.array12$arg)) == Tagclass._System.array12
     && TagFamily(Tclass._System.array12(_System.array12$arg)) == tytagFamily$array12);

function Tclass._System.array12_0(Ty) : Ty;

// Tclass._System.array12 injectivity 0
axiom (forall _System.array12$arg: Ty :: 
  { Tclass._System.array12(_System.array12$arg) } 
  Tclass._System.array12_0(Tclass._System.array12(_System.array12$arg))
     == _System.array12$arg);

// Box/unbox axiom for Tclass._System.array12
axiom (forall _System.array12$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array12(_System.array12$arg)) } 
  $IsBox(bx, Tclass._System.array12(_System.array12$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array12(_System.array12$arg)));

// $Is axiom for non-null type _System.array12
axiom (forall _System.array12$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array12(_System.array12$arg)) } 
    { $Is(c#0, Tclass._System.array12?(_System.array12$arg)) } 
  $Is(c#0, Tclass._System.array12(_System.array12$arg))
     <==> $Is(c#0, Tclass._System.array12?(_System.array12$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array12
axiom (forall _System.array12$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array12(_System.array12$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array12?(_System.array12$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array12(_System.array12$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array12?(_System.array12$arg), $h));

const unique class._System.array13?: ClassName;

function Tclass._System.array13?(Ty) : Ty;

const unique Tagclass._System.array13?: TyTag;

// Tclass._System.array13? Tag
axiom (forall _System.array13$arg: Ty :: 
  { Tclass._System.array13?(_System.array13$arg) } 
  Tag(Tclass._System.array13?(_System.array13$arg)) == Tagclass._System.array13?
     && TagFamily(Tclass._System.array13?(_System.array13$arg)) == tytagFamily$array13);

function Tclass._System.array13?_0(Ty) : Ty;

// Tclass._System.array13? injectivity 0
axiom (forall _System.array13$arg: Ty :: 
  { Tclass._System.array13?(_System.array13$arg) } 
  Tclass._System.array13?_0(Tclass._System.array13?(_System.array13$arg))
     == _System.array13$arg);

// Box/unbox axiom for Tclass._System.array13?
axiom (forall _System.array13$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array13?(_System.array13$arg)) } 
  $IsBox(bx, Tclass._System.array13?(_System.array13$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array13?(_System.array13$arg)));

axiom (forall o: ref :: 
  { _System.array13.Length0(o) } 
  0 <= _System.array13.Length0(o));

axiom (forall o: ref :: 
  { _System.array13.Length1(o) } 
  0 <= _System.array13.Length1(o));

axiom (forall o: ref :: 
  { _System.array13.Length2(o) } 
  0 <= _System.array13.Length2(o));

axiom (forall o: ref :: 
  { _System.array13.Length3(o) } 
  0 <= _System.array13.Length3(o));

axiom (forall o: ref :: 
  { _System.array13.Length4(o) } 
  0 <= _System.array13.Length4(o));

axiom (forall o: ref :: 
  { _System.array13.Length5(o) } 
  0 <= _System.array13.Length5(o));

axiom (forall o: ref :: 
  { _System.array13.Length6(o) } 
  0 <= _System.array13.Length6(o));

axiom (forall o: ref :: 
  { _System.array13.Length7(o) } 
  0 <= _System.array13.Length7(o));

axiom (forall o: ref :: 
  { _System.array13.Length8(o) } 
  0 <= _System.array13.Length8(o));

axiom (forall o: ref :: 
  { _System.array13.Length9(o) } 
  0 <= _System.array13.Length9(o));

axiom (forall o: ref :: 
  { _System.array13.Length10(o) } 
  0 <= _System.array13.Length10(o));

axiom (forall o: ref :: 
  { _System.array13.Length11(o) } 
  0 <= _System.array13.Length11(o));

axiom (forall o: ref :: 
  { _System.array13.Length12(o) } 
  0 <= _System.array13.Length12(o));

// array13.: Type axiom
axiom (forall _System.array13$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int, 
    $i4: int, 
    $i5: int, 
    $i6: int, 
    $i7: int, 
    $i8: int, 
    $i9: int, 
    $i10: int, 
    $i11: int, 
    $i12: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                        $i4), 
                      $i5), 
                    $i6), 
                  $i7), 
                $i8), 
              $i9), 
            $i10), 
          $i11), 
        $i12)), Tclass._System.array13?(_System.array13$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array13?(_System.array13$arg)
       && 
      0 <= $i0
       && $i0 < _System.array13.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array13.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array13.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array13.Length3($o)
       && 
      0 <= $i4
       && $i4 < _System.array13.Length4($o)
       && 
      0 <= $i5
       && $i5 < _System.array13.Length5($o)
       && 
      0 <= $i6
       && $i6 < _System.array13.Length6($o)
       && 
      0 <= $i7
       && $i7 < _System.array13.Length7($o)
       && 
      0 <= $i8
       && $i8 < _System.array13.Length8($o)
       && 
      0 <= $i9
       && $i9 < _System.array13.Length9($o)
       && 
      0 <= $i10
       && $i10 < _System.array13.Length10($o)
       && 
      0 <= $i11
       && $i11 < _System.array13.Length11($o)
       && 
      0 <= $i12
       && $i12 < _System.array13.Length12($o)
     ==> $IsBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                          $i4), 
                        $i5), 
                      $i6), 
                    $i7), 
                  $i8), 
                $i9), 
              $i10), 
            $i11), 
          $i12)), 
      _System.array13$arg));

// array13.: Allocation axiom
axiom (forall _System.array13$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int, 
    $i4: int, 
    $i5: int, 
    $i6: int, 
    $i7: int, 
    $i8: int, 
    $i9: int, 
    $i10: int, 
    $i11: int, 
    $i12: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                        $i4), 
                      $i5), 
                    $i6), 
                  $i7), 
                $i8), 
              $i9), 
            $i10), 
          $i11), 
        $i12)), Tclass._System.array13?(_System.array13$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array13?(_System.array13$arg)
       && 
      0 <= $i0
       && $i0 < _System.array13.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array13.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array13.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array13.Length3($o)
       && 
      0 <= $i4
       && $i4 < _System.array13.Length4($o)
       && 
      0 <= $i5
       && $i5 < _System.array13.Length5($o)
       && 
      0 <= $i6
       && $i6 < _System.array13.Length6($o)
       && 
      0 <= $i7
       && $i7 < _System.array13.Length7($o)
       && 
      0 <= $i8
       && $i8 < _System.array13.Length8($o)
       && 
      0 <= $i9
       && $i9 < _System.array13.Length9($o)
       && 
      0 <= $i10
       && $i10 < _System.array13.Length10($o)
       && 
      0 <= $i11
       && $i11 < _System.array13.Length11($o)
       && 
      0 <= $i12
       && $i12 < _System.array13.Length12($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                          $i4), 
                        $i5), 
                      $i6), 
                    $i7), 
                  $i8), 
                $i9), 
              $i10), 
            $i11), 
          $i12)), 
      _System.array13$arg, 
      $h));

// $Is axiom for array type array13
axiom (forall _System.array13$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array13?(_System.array13$arg)) } 
  $Is($o, Tclass._System.array13?(_System.array13$arg))
     <==> $o == null || dtype($o) == Tclass._System.array13?(_System.array13$arg));

// $IsAlloc axiom for array type array13
axiom (forall _System.array13$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array13?(_System.array13$arg), $h) } 
  $IsAlloc($o, Tclass._System.array13?(_System.array13$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function _System.array13.Length0(ref) : int;

// array13.Length0: Type axiom
axiom (forall _System.array13$arg: Ty, $o: ref :: 
  { _System.array13.Length0($o), Tclass._System.array13?(_System.array13$arg) } 
  $o != null && dtype($o) == Tclass._System.array13?(_System.array13$arg)
     ==> $Is(_System.array13.Length0($o), TInt));

// array13.Length0: Allocation axiom
axiom (forall _System.array13$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array13.Length0($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array13?(_System.array13$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array13?(_System.array13$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array13.Length0($o), TInt, $h));

function _System.array13.Length1(ref) : int;

// array13.Length1: Type axiom
axiom (forall _System.array13$arg: Ty, $o: ref :: 
  { _System.array13.Length1($o), Tclass._System.array13?(_System.array13$arg) } 
  $o != null && dtype($o) == Tclass._System.array13?(_System.array13$arg)
     ==> $Is(_System.array13.Length1($o), TInt));

// array13.Length1: Allocation axiom
axiom (forall _System.array13$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array13.Length1($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array13?(_System.array13$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array13?(_System.array13$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array13.Length1($o), TInt, $h));

function _System.array13.Length2(ref) : int;

// array13.Length2: Type axiom
axiom (forall _System.array13$arg: Ty, $o: ref :: 
  { _System.array13.Length2($o), Tclass._System.array13?(_System.array13$arg) } 
  $o != null && dtype($o) == Tclass._System.array13?(_System.array13$arg)
     ==> $Is(_System.array13.Length2($o), TInt));

// array13.Length2: Allocation axiom
axiom (forall _System.array13$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array13.Length2($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array13?(_System.array13$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array13?(_System.array13$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array13.Length2($o), TInt, $h));

function _System.array13.Length3(ref) : int;

// array13.Length3: Type axiom
axiom (forall _System.array13$arg: Ty, $o: ref :: 
  { _System.array13.Length3($o), Tclass._System.array13?(_System.array13$arg) } 
  $o != null && dtype($o) == Tclass._System.array13?(_System.array13$arg)
     ==> $Is(_System.array13.Length3($o), TInt));

// array13.Length3: Allocation axiom
axiom (forall _System.array13$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array13.Length3($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array13?(_System.array13$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array13?(_System.array13$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array13.Length3($o), TInt, $h));

function _System.array13.Length4(ref) : int;

// array13.Length4: Type axiom
axiom (forall _System.array13$arg: Ty, $o: ref :: 
  { _System.array13.Length4($o), Tclass._System.array13?(_System.array13$arg) } 
  $o != null && dtype($o) == Tclass._System.array13?(_System.array13$arg)
     ==> $Is(_System.array13.Length4($o), TInt));

// array13.Length4: Allocation axiom
axiom (forall _System.array13$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array13.Length4($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array13?(_System.array13$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array13?(_System.array13$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array13.Length4($o), TInt, $h));

function _System.array13.Length5(ref) : int;

// array13.Length5: Type axiom
axiom (forall _System.array13$arg: Ty, $o: ref :: 
  { _System.array13.Length5($o), Tclass._System.array13?(_System.array13$arg) } 
  $o != null && dtype($o) == Tclass._System.array13?(_System.array13$arg)
     ==> $Is(_System.array13.Length5($o), TInt));

// array13.Length5: Allocation axiom
axiom (forall _System.array13$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array13.Length5($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array13?(_System.array13$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array13?(_System.array13$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array13.Length5($o), TInt, $h));

function _System.array13.Length6(ref) : int;

// array13.Length6: Type axiom
axiom (forall _System.array13$arg: Ty, $o: ref :: 
  { _System.array13.Length6($o), Tclass._System.array13?(_System.array13$arg) } 
  $o != null && dtype($o) == Tclass._System.array13?(_System.array13$arg)
     ==> $Is(_System.array13.Length6($o), TInt));

// array13.Length6: Allocation axiom
axiom (forall _System.array13$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array13.Length6($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array13?(_System.array13$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array13?(_System.array13$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array13.Length6($o), TInt, $h));

function _System.array13.Length7(ref) : int;

// array13.Length7: Type axiom
axiom (forall _System.array13$arg: Ty, $o: ref :: 
  { _System.array13.Length7($o), Tclass._System.array13?(_System.array13$arg) } 
  $o != null && dtype($o) == Tclass._System.array13?(_System.array13$arg)
     ==> $Is(_System.array13.Length7($o), TInt));

// array13.Length7: Allocation axiom
axiom (forall _System.array13$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array13.Length7($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array13?(_System.array13$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array13?(_System.array13$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array13.Length7($o), TInt, $h));

function _System.array13.Length8(ref) : int;

// array13.Length8: Type axiom
axiom (forall _System.array13$arg: Ty, $o: ref :: 
  { _System.array13.Length8($o), Tclass._System.array13?(_System.array13$arg) } 
  $o != null && dtype($o) == Tclass._System.array13?(_System.array13$arg)
     ==> $Is(_System.array13.Length8($o), TInt));

// array13.Length8: Allocation axiom
axiom (forall _System.array13$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array13.Length8($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array13?(_System.array13$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array13?(_System.array13$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array13.Length8($o), TInt, $h));

function _System.array13.Length9(ref) : int;

// array13.Length9: Type axiom
axiom (forall _System.array13$arg: Ty, $o: ref :: 
  { _System.array13.Length9($o), Tclass._System.array13?(_System.array13$arg) } 
  $o != null && dtype($o) == Tclass._System.array13?(_System.array13$arg)
     ==> $Is(_System.array13.Length9($o), TInt));

// array13.Length9: Allocation axiom
axiom (forall _System.array13$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array13.Length9($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array13?(_System.array13$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array13?(_System.array13$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array13.Length9($o), TInt, $h));

function _System.array13.Length10(ref) : int;

// array13.Length10: Type axiom
axiom (forall _System.array13$arg: Ty, $o: ref :: 
  { _System.array13.Length10($o), Tclass._System.array13?(_System.array13$arg) } 
  $o != null && dtype($o) == Tclass._System.array13?(_System.array13$arg)
     ==> $Is(_System.array13.Length10($o), TInt));

// array13.Length10: Allocation axiom
axiom (forall _System.array13$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array13.Length10($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array13?(_System.array13$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array13?(_System.array13$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array13.Length10($o), TInt, $h));

function _System.array13.Length11(ref) : int;

// array13.Length11: Type axiom
axiom (forall _System.array13$arg: Ty, $o: ref :: 
  { _System.array13.Length11($o), Tclass._System.array13?(_System.array13$arg) } 
  $o != null && dtype($o) == Tclass._System.array13?(_System.array13$arg)
     ==> $Is(_System.array13.Length11($o), TInt));

// array13.Length11: Allocation axiom
axiom (forall _System.array13$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array13.Length11($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array13?(_System.array13$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array13?(_System.array13$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array13.Length11($o), TInt, $h));

function _System.array13.Length12(ref) : int;

// array13.Length12: Type axiom
axiom (forall _System.array13$arg: Ty, $o: ref :: 
  { _System.array13.Length12($o), Tclass._System.array13?(_System.array13$arg) } 
  $o != null && dtype($o) == Tclass._System.array13?(_System.array13$arg)
     ==> $Is(_System.array13.Length12($o), TInt));

// array13.Length12: Allocation axiom
axiom (forall _System.array13$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array13.Length12($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array13?(_System.array13$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array13?(_System.array13$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array13.Length12($o), TInt, $h));

function Tclass._System.array13(Ty) : Ty;

const unique Tagclass._System.array13: TyTag;

// Tclass._System.array13 Tag
axiom (forall _System.array13$arg: Ty :: 
  { Tclass._System.array13(_System.array13$arg) } 
  Tag(Tclass._System.array13(_System.array13$arg)) == Tagclass._System.array13
     && TagFamily(Tclass._System.array13(_System.array13$arg)) == tytagFamily$array13);

function Tclass._System.array13_0(Ty) : Ty;

// Tclass._System.array13 injectivity 0
axiom (forall _System.array13$arg: Ty :: 
  { Tclass._System.array13(_System.array13$arg) } 
  Tclass._System.array13_0(Tclass._System.array13(_System.array13$arg))
     == _System.array13$arg);

// Box/unbox axiom for Tclass._System.array13
axiom (forall _System.array13$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array13(_System.array13$arg)) } 
  $IsBox(bx, Tclass._System.array13(_System.array13$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array13(_System.array13$arg)));

// $Is axiom for non-null type _System.array13
axiom (forall _System.array13$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array13(_System.array13$arg)) } 
    { $Is(c#0, Tclass._System.array13?(_System.array13$arg)) } 
  $Is(c#0, Tclass._System.array13(_System.array13$arg))
     <==> $Is(c#0, Tclass._System.array13?(_System.array13$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array13
axiom (forall _System.array13$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array13(_System.array13$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array13?(_System.array13$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array13(_System.array13$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array13?(_System.array13$arg), $h));

const unique class._System.array14?: ClassName;

function Tclass._System.array14?(Ty) : Ty;

const unique Tagclass._System.array14?: TyTag;

// Tclass._System.array14? Tag
axiom (forall _System.array14$arg: Ty :: 
  { Tclass._System.array14?(_System.array14$arg) } 
  Tag(Tclass._System.array14?(_System.array14$arg)) == Tagclass._System.array14?
     && TagFamily(Tclass._System.array14?(_System.array14$arg)) == tytagFamily$array14);

function Tclass._System.array14?_0(Ty) : Ty;

// Tclass._System.array14? injectivity 0
axiom (forall _System.array14$arg: Ty :: 
  { Tclass._System.array14?(_System.array14$arg) } 
  Tclass._System.array14?_0(Tclass._System.array14?(_System.array14$arg))
     == _System.array14$arg);

// Box/unbox axiom for Tclass._System.array14?
axiom (forall _System.array14$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array14?(_System.array14$arg)) } 
  $IsBox(bx, Tclass._System.array14?(_System.array14$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array14?(_System.array14$arg)));

axiom (forall o: ref :: 
  { _System.array14.Length0(o) } 
  0 <= _System.array14.Length0(o));

axiom (forall o: ref :: 
  { _System.array14.Length1(o) } 
  0 <= _System.array14.Length1(o));

axiom (forall o: ref :: 
  { _System.array14.Length2(o) } 
  0 <= _System.array14.Length2(o));

axiom (forall o: ref :: 
  { _System.array14.Length3(o) } 
  0 <= _System.array14.Length3(o));

axiom (forall o: ref :: 
  { _System.array14.Length4(o) } 
  0 <= _System.array14.Length4(o));

axiom (forall o: ref :: 
  { _System.array14.Length5(o) } 
  0 <= _System.array14.Length5(o));

axiom (forall o: ref :: 
  { _System.array14.Length6(o) } 
  0 <= _System.array14.Length6(o));

axiom (forall o: ref :: 
  { _System.array14.Length7(o) } 
  0 <= _System.array14.Length7(o));

axiom (forall o: ref :: 
  { _System.array14.Length8(o) } 
  0 <= _System.array14.Length8(o));

axiom (forall o: ref :: 
  { _System.array14.Length9(o) } 
  0 <= _System.array14.Length9(o));

axiom (forall o: ref :: 
  { _System.array14.Length10(o) } 
  0 <= _System.array14.Length10(o));

axiom (forall o: ref :: 
  { _System.array14.Length11(o) } 
  0 <= _System.array14.Length11(o));

axiom (forall o: ref :: 
  { _System.array14.Length12(o) } 
  0 <= _System.array14.Length12(o));

axiom (forall o: ref :: 
  { _System.array14.Length13(o) } 
  0 <= _System.array14.Length13(o));

// array14.: Type axiom
axiom (forall _System.array14$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int, 
    $i4: int, 
    $i5: int, 
    $i6: int, 
    $i7: int, 
    $i8: int, 
    $i9: int, 
    $i10: int, 
    $i11: int, 
    $i12: int, 
    $i13: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                          $i4), 
                        $i5), 
                      $i6), 
                    $i7), 
                  $i8), 
                $i9), 
              $i10), 
            $i11), 
          $i12), 
        $i13)), Tclass._System.array14?(_System.array14$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array14?(_System.array14$arg)
       && 
      0 <= $i0
       && $i0 < _System.array14.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array14.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array14.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array14.Length3($o)
       && 
      0 <= $i4
       && $i4 < _System.array14.Length4($o)
       && 
      0 <= $i5
       && $i5 < _System.array14.Length5($o)
       && 
      0 <= $i6
       && $i6 < _System.array14.Length6($o)
       && 
      0 <= $i7
       && $i7 < _System.array14.Length7($o)
       && 
      0 <= $i8
       && $i8 < _System.array14.Length8($o)
       && 
      0 <= $i9
       && $i9 < _System.array14.Length9($o)
       && 
      0 <= $i10
       && $i10 < _System.array14.Length10($o)
       && 
      0 <= $i11
       && $i11 < _System.array14.Length11($o)
       && 
      0 <= $i12
       && $i12 < _System.array14.Length12($o)
       && 
      0 <= $i13
       && $i13 < _System.array14.Length13($o)
     ==> $IsBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                            $i4), 
                          $i5), 
                        $i6), 
                      $i7), 
                    $i8), 
                  $i9), 
                $i10), 
              $i11), 
            $i12), 
          $i13)), 
      _System.array14$arg));

// array14.: Allocation axiom
axiom (forall _System.array14$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int, 
    $i4: int, 
    $i5: int, 
    $i6: int, 
    $i7: int, 
    $i8: int, 
    $i9: int, 
    $i10: int, 
    $i11: int, 
    $i12: int, 
    $i13: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                          $i4), 
                        $i5), 
                      $i6), 
                    $i7), 
                  $i8), 
                $i9), 
              $i10), 
            $i11), 
          $i12), 
        $i13)), Tclass._System.array14?(_System.array14$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array14?(_System.array14$arg)
       && 
      0 <= $i0
       && $i0 < _System.array14.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array14.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array14.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array14.Length3($o)
       && 
      0 <= $i4
       && $i4 < _System.array14.Length4($o)
       && 
      0 <= $i5
       && $i5 < _System.array14.Length5($o)
       && 
      0 <= $i6
       && $i6 < _System.array14.Length6($o)
       && 
      0 <= $i7
       && $i7 < _System.array14.Length7($o)
       && 
      0 <= $i8
       && $i8 < _System.array14.Length8($o)
       && 
      0 <= $i9
       && $i9 < _System.array14.Length9($o)
       && 
      0 <= $i10
       && $i10 < _System.array14.Length10($o)
       && 
      0 <= $i11
       && $i11 < _System.array14.Length11($o)
       && 
      0 <= $i12
       && $i12 < _System.array14.Length12($o)
       && 
      0 <= $i13
       && $i13 < _System.array14.Length13($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                            $i4), 
                          $i5), 
                        $i6), 
                      $i7), 
                    $i8), 
                  $i9), 
                $i10), 
              $i11), 
            $i12), 
          $i13)), 
      _System.array14$arg, 
      $h));

// $Is axiom for array type array14
axiom (forall _System.array14$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array14?(_System.array14$arg)) } 
  $Is($o, Tclass._System.array14?(_System.array14$arg))
     <==> $o == null || dtype($o) == Tclass._System.array14?(_System.array14$arg));

// $IsAlloc axiom for array type array14
axiom (forall _System.array14$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array14?(_System.array14$arg), $h) } 
  $IsAlloc($o, Tclass._System.array14?(_System.array14$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function _System.array14.Length0(ref) : int;

// array14.Length0: Type axiom
axiom (forall _System.array14$arg: Ty, $o: ref :: 
  { _System.array14.Length0($o), Tclass._System.array14?(_System.array14$arg) } 
  $o != null && dtype($o) == Tclass._System.array14?(_System.array14$arg)
     ==> $Is(_System.array14.Length0($o), TInt));

// array14.Length0: Allocation axiom
axiom (forall _System.array14$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array14.Length0($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array14?(_System.array14$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array14?(_System.array14$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array14.Length0($o), TInt, $h));

function _System.array14.Length1(ref) : int;

// array14.Length1: Type axiom
axiom (forall _System.array14$arg: Ty, $o: ref :: 
  { _System.array14.Length1($o), Tclass._System.array14?(_System.array14$arg) } 
  $o != null && dtype($o) == Tclass._System.array14?(_System.array14$arg)
     ==> $Is(_System.array14.Length1($o), TInt));

// array14.Length1: Allocation axiom
axiom (forall _System.array14$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array14.Length1($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array14?(_System.array14$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array14?(_System.array14$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array14.Length1($o), TInt, $h));

function _System.array14.Length2(ref) : int;

// array14.Length2: Type axiom
axiom (forall _System.array14$arg: Ty, $o: ref :: 
  { _System.array14.Length2($o), Tclass._System.array14?(_System.array14$arg) } 
  $o != null && dtype($o) == Tclass._System.array14?(_System.array14$arg)
     ==> $Is(_System.array14.Length2($o), TInt));

// array14.Length2: Allocation axiom
axiom (forall _System.array14$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array14.Length2($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array14?(_System.array14$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array14?(_System.array14$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array14.Length2($o), TInt, $h));

function _System.array14.Length3(ref) : int;

// array14.Length3: Type axiom
axiom (forall _System.array14$arg: Ty, $o: ref :: 
  { _System.array14.Length3($o), Tclass._System.array14?(_System.array14$arg) } 
  $o != null && dtype($o) == Tclass._System.array14?(_System.array14$arg)
     ==> $Is(_System.array14.Length3($o), TInt));

// array14.Length3: Allocation axiom
axiom (forall _System.array14$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array14.Length3($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array14?(_System.array14$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array14?(_System.array14$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array14.Length3($o), TInt, $h));

function _System.array14.Length4(ref) : int;

// array14.Length4: Type axiom
axiom (forall _System.array14$arg: Ty, $o: ref :: 
  { _System.array14.Length4($o), Tclass._System.array14?(_System.array14$arg) } 
  $o != null && dtype($o) == Tclass._System.array14?(_System.array14$arg)
     ==> $Is(_System.array14.Length4($o), TInt));

// array14.Length4: Allocation axiom
axiom (forall _System.array14$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array14.Length4($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array14?(_System.array14$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array14?(_System.array14$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array14.Length4($o), TInt, $h));

function _System.array14.Length5(ref) : int;

// array14.Length5: Type axiom
axiom (forall _System.array14$arg: Ty, $o: ref :: 
  { _System.array14.Length5($o), Tclass._System.array14?(_System.array14$arg) } 
  $o != null && dtype($o) == Tclass._System.array14?(_System.array14$arg)
     ==> $Is(_System.array14.Length5($o), TInt));

// array14.Length5: Allocation axiom
axiom (forall _System.array14$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array14.Length5($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array14?(_System.array14$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array14?(_System.array14$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array14.Length5($o), TInt, $h));

function _System.array14.Length6(ref) : int;

// array14.Length6: Type axiom
axiom (forall _System.array14$arg: Ty, $o: ref :: 
  { _System.array14.Length6($o), Tclass._System.array14?(_System.array14$arg) } 
  $o != null && dtype($o) == Tclass._System.array14?(_System.array14$arg)
     ==> $Is(_System.array14.Length6($o), TInt));

// array14.Length6: Allocation axiom
axiom (forall _System.array14$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array14.Length6($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array14?(_System.array14$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array14?(_System.array14$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array14.Length6($o), TInt, $h));

function _System.array14.Length7(ref) : int;

// array14.Length7: Type axiom
axiom (forall _System.array14$arg: Ty, $o: ref :: 
  { _System.array14.Length7($o), Tclass._System.array14?(_System.array14$arg) } 
  $o != null && dtype($o) == Tclass._System.array14?(_System.array14$arg)
     ==> $Is(_System.array14.Length7($o), TInt));

// array14.Length7: Allocation axiom
axiom (forall _System.array14$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array14.Length7($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array14?(_System.array14$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array14?(_System.array14$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array14.Length7($o), TInt, $h));

function _System.array14.Length8(ref) : int;

// array14.Length8: Type axiom
axiom (forall _System.array14$arg: Ty, $o: ref :: 
  { _System.array14.Length8($o), Tclass._System.array14?(_System.array14$arg) } 
  $o != null && dtype($o) == Tclass._System.array14?(_System.array14$arg)
     ==> $Is(_System.array14.Length8($o), TInt));

// array14.Length8: Allocation axiom
axiom (forall _System.array14$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array14.Length8($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array14?(_System.array14$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array14?(_System.array14$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array14.Length8($o), TInt, $h));

function _System.array14.Length9(ref) : int;

// array14.Length9: Type axiom
axiom (forall _System.array14$arg: Ty, $o: ref :: 
  { _System.array14.Length9($o), Tclass._System.array14?(_System.array14$arg) } 
  $o != null && dtype($o) == Tclass._System.array14?(_System.array14$arg)
     ==> $Is(_System.array14.Length9($o), TInt));

// array14.Length9: Allocation axiom
axiom (forall _System.array14$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array14.Length9($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array14?(_System.array14$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array14?(_System.array14$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array14.Length9($o), TInt, $h));

function _System.array14.Length10(ref) : int;

// array14.Length10: Type axiom
axiom (forall _System.array14$arg: Ty, $o: ref :: 
  { _System.array14.Length10($o), Tclass._System.array14?(_System.array14$arg) } 
  $o != null && dtype($o) == Tclass._System.array14?(_System.array14$arg)
     ==> $Is(_System.array14.Length10($o), TInt));

// array14.Length10: Allocation axiom
axiom (forall _System.array14$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array14.Length10($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array14?(_System.array14$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array14?(_System.array14$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array14.Length10($o), TInt, $h));

function _System.array14.Length11(ref) : int;

// array14.Length11: Type axiom
axiom (forall _System.array14$arg: Ty, $o: ref :: 
  { _System.array14.Length11($o), Tclass._System.array14?(_System.array14$arg) } 
  $o != null && dtype($o) == Tclass._System.array14?(_System.array14$arg)
     ==> $Is(_System.array14.Length11($o), TInt));

// array14.Length11: Allocation axiom
axiom (forall _System.array14$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array14.Length11($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array14?(_System.array14$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array14?(_System.array14$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array14.Length11($o), TInt, $h));

function _System.array14.Length12(ref) : int;

// array14.Length12: Type axiom
axiom (forall _System.array14$arg: Ty, $o: ref :: 
  { _System.array14.Length12($o), Tclass._System.array14?(_System.array14$arg) } 
  $o != null && dtype($o) == Tclass._System.array14?(_System.array14$arg)
     ==> $Is(_System.array14.Length12($o), TInt));

// array14.Length12: Allocation axiom
axiom (forall _System.array14$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array14.Length12($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array14?(_System.array14$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array14?(_System.array14$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array14.Length12($o), TInt, $h));

function _System.array14.Length13(ref) : int;

// array14.Length13: Type axiom
axiom (forall _System.array14$arg: Ty, $o: ref :: 
  { _System.array14.Length13($o), Tclass._System.array14?(_System.array14$arg) } 
  $o != null && dtype($o) == Tclass._System.array14?(_System.array14$arg)
     ==> $Is(_System.array14.Length13($o), TInt));

// array14.Length13: Allocation axiom
axiom (forall _System.array14$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array14.Length13($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array14?(_System.array14$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array14?(_System.array14$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array14.Length13($o), TInt, $h));

function Tclass._System.array14(Ty) : Ty;

const unique Tagclass._System.array14: TyTag;

// Tclass._System.array14 Tag
axiom (forall _System.array14$arg: Ty :: 
  { Tclass._System.array14(_System.array14$arg) } 
  Tag(Tclass._System.array14(_System.array14$arg)) == Tagclass._System.array14
     && TagFamily(Tclass._System.array14(_System.array14$arg)) == tytagFamily$array14);

function Tclass._System.array14_0(Ty) : Ty;

// Tclass._System.array14 injectivity 0
axiom (forall _System.array14$arg: Ty :: 
  { Tclass._System.array14(_System.array14$arg) } 
  Tclass._System.array14_0(Tclass._System.array14(_System.array14$arg))
     == _System.array14$arg);

// Box/unbox axiom for Tclass._System.array14
axiom (forall _System.array14$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array14(_System.array14$arg)) } 
  $IsBox(bx, Tclass._System.array14(_System.array14$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array14(_System.array14$arg)));

// $Is axiom for non-null type _System.array14
axiom (forall _System.array14$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array14(_System.array14$arg)) } 
    { $Is(c#0, Tclass._System.array14?(_System.array14$arg)) } 
  $Is(c#0, Tclass._System.array14(_System.array14$arg))
     <==> $Is(c#0, Tclass._System.array14?(_System.array14$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array14
axiom (forall _System.array14$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array14(_System.array14$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array14?(_System.array14$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array14(_System.array14$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array14?(_System.array14$arg), $h));

const unique class._System.array15?: ClassName;

function Tclass._System.array15?(Ty) : Ty;

const unique Tagclass._System.array15?: TyTag;

// Tclass._System.array15? Tag
axiom (forall _System.array15$arg: Ty :: 
  { Tclass._System.array15?(_System.array15$arg) } 
  Tag(Tclass._System.array15?(_System.array15$arg)) == Tagclass._System.array15?
     && TagFamily(Tclass._System.array15?(_System.array15$arg)) == tytagFamily$array15);

function Tclass._System.array15?_0(Ty) : Ty;

// Tclass._System.array15? injectivity 0
axiom (forall _System.array15$arg: Ty :: 
  { Tclass._System.array15?(_System.array15$arg) } 
  Tclass._System.array15?_0(Tclass._System.array15?(_System.array15$arg))
     == _System.array15$arg);

// Box/unbox axiom for Tclass._System.array15?
axiom (forall _System.array15$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array15?(_System.array15$arg)) } 
  $IsBox(bx, Tclass._System.array15?(_System.array15$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array15?(_System.array15$arg)));

axiom (forall o: ref :: 
  { _System.array15.Length0(o) } 
  0 <= _System.array15.Length0(o));

axiom (forall o: ref :: 
  { _System.array15.Length1(o) } 
  0 <= _System.array15.Length1(o));

axiom (forall o: ref :: 
  { _System.array15.Length2(o) } 
  0 <= _System.array15.Length2(o));

axiom (forall o: ref :: 
  { _System.array15.Length3(o) } 
  0 <= _System.array15.Length3(o));

axiom (forall o: ref :: 
  { _System.array15.Length4(o) } 
  0 <= _System.array15.Length4(o));

axiom (forall o: ref :: 
  { _System.array15.Length5(o) } 
  0 <= _System.array15.Length5(o));

axiom (forall o: ref :: 
  { _System.array15.Length6(o) } 
  0 <= _System.array15.Length6(o));

axiom (forall o: ref :: 
  { _System.array15.Length7(o) } 
  0 <= _System.array15.Length7(o));

axiom (forall o: ref :: 
  { _System.array15.Length8(o) } 
  0 <= _System.array15.Length8(o));

axiom (forall o: ref :: 
  { _System.array15.Length9(o) } 
  0 <= _System.array15.Length9(o));

axiom (forall o: ref :: 
  { _System.array15.Length10(o) } 
  0 <= _System.array15.Length10(o));

axiom (forall o: ref :: 
  { _System.array15.Length11(o) } 
  0 <= _System.array15.Length11(o));

axiom (forall o: ref :: 
  { _System.array15.Length12(o) } 
  0 <= _System.array15.Length12(o));

axiom (forall o: ref :: 
  { _System.array15.Length13(o) } 
  0 <= _System.array15.Length13(o));

axiom (forall o: ref :: 
  { _System.array15.Length14(o) } 
  0 <= _System.array15.Length14(o));

// array15.: Type axiom
axiom (forall _System.array15$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int, 
    $i4: int, 
    $i5: int, 
    $i6: int, 
    $i7: int, 
    $i8: int, 
    $i9: int, 
    $i10: int, 
    $i11: int, 
    $i12: int, 
    $i13: int, 
    $i14: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                            $i4), 
                          $i5), 
                        $i6), 
                      $i7), 
                    $i8), 
                  $i9), 
                $i10), 
              $i11), 
            $i12), 
          $i13), 
        $i14)), Tclass._System.array15?(_System.array15$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array15?(_System.array15$arg)
       && 
      0 <= $i0
       && $i0 < _System.array15.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array15.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array15.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array15.Length3($o)
       && 
      0 <= $i4
       && $i4 < _System.array15.Length4($o)
       && 
      0 <= $i5
       && $i5 < _System.array15.Length5($o)
       && 
      0 <= $i6
       && $i6 < _System.array15.Length6($o)
       && 
      0 <= $i7
       && $i7 < _System.array15.Length7($o)
       && 
      0 <= $i8
       && $i8 < _System.array15.Length8($o)
       && 
      0 <= $i9
       && $i9 < _System.array15.Length9($o)
       && 
      0 <= $i10
       && $i10 < _System.array15.Length10($o)
       && 
      0 <= $i11
       && $i11 < _System.array15.Length11($o)
       && 
      0 <= $i12
       && $i12 < _System.array15.Length12($o)
       && 
      0 <= $i13
       && $i13 < _System.array15.Length13($o)
       && 
      0 <= $i14
       && $i14 < _System.array15.Length14($o)
     ==> $IsBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                              $i4), 
                            $i5), 
                          $i6), 
                        $i7), 
                      $i8), 
                    $i9), 
                  $i10), 
                $i11), 
              $i12), 
            $i13), 
          $i14)), 
      _System.array15$arg));

// array15.: Allocation axiom
axiom (forall _System.array15$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int, 
    $i4: int, 
    $i5: int, 
    $i6: int, 
    $i7: int, 
    $i8: int, 
    $i9: int, 
    $i10: int, 
    $i11: int, 
    $i12: int, 
    $i13: int, 
    $i14: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                            $i4), 
                          $i5), 
                        $i6), 
                      $i7), 
                    $i8), 
                  $i9), 
                $i10), 
              $i11), 
            $i12), 
          $i13), 
        $i14)), Tclass._System.array15?(_System.array15$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array15?(_System.array15$arg)
       && 
      0 <= $i0
       && $i0 < _System.array15.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array15.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array15.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array15.Length3($o)
       && 
      0 <= $i4
       && $i4 < _System.array15.Length4($o)
       && 
      0 <= $i5
       && $i5 < _System.array15.Length5($o)
       && 
      0 <= $i6
       && $i6 < _System.array15.Length6($o)
       && 
      0 <= $i7
       && $i7 < _System.array15.Length7($o)
       && 
      0 <= $i8
       && $i8 < _System.array15.Length8($o)
       && 
      0 <= $i9
       && $i9 < _System.array15.Length9($o)
       && 
      0 <= $i10
       && $i10 < _System.array15.Length10($o)
       && 
      0 <= $i11
       && $i11 < _System.array15.Length11($o)
       && 
      0 <= $i12
       && $i12 < _System.array15.Length12($o)
       && 
      0 <= $i13
       && $i13 < _System.array15.Length13($o)
       && 
      0 <= $i14
       && $i14 < _System.array15.Length14($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                              $i4), 
                            $i5), 
                          $i6), 
                        $i7), 
                      $i8), 
                    $i9), 
                  $i10), 
                $i11), 
              $i12), 
            $i13), 
          $i14)), 
      _System.array15$arg, 
      $h));

// $Is axiom for array type array15
axiom (forall _System.array15$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array15?(_System.array15$arg)) } 
  $Is($o, Tclass._System.array15?(_System.array15$arg))
     <==> $o == null || dtype($o) == Tclass._System.array15?(_System.array15$arg));

// $IsAlloc axiom for array type array15
axiom (forall _System.array15$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array15?(_System.array15$arg), $h) } 
  $IsAlloc($o, Tclass._System.array15?(_System.array15$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function _System.array15.Length0(ref) : int;

// array15.Length0: Type axiom
axiom (forall _System.array15$arg: Ty, $o: ref :: 
  { _System.array15.Length0($o), Tclass._System.array15?(_System.array15$arg) } 
  $o != null && dtype($o) == Tclass._System.array15?(_System.array15$arg)
     ==> $Is(_System.array15.Length0($o), TInt));

// array15.Length0: Allocation axiom
axiom (forall _System.array15$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array15.Length0($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array15?(_System.array15$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array15?(_System.array15$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array15.Length0($o), TInt, $h));

function _System.array15.Length1(ref) : int;

// array15.Length1: Type axiom
axiom (forall _System.array15$arg: Ty, $o: ref :: 
  { _System.array15.Length1($o), Tclass._System.array15?(_System.array15$arg) } 
  $o != null && dtype($o) == Tclass._System.array15?(_System.array15$arg)
     ==> $Is(_System.array15.Length1($o), TInt));

// array15.Length1: Allocation axiom
axiom (forall _System.array15$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array15.Length1($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array15?(_System.array15$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array15?(_System.array15$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array15.Length1($o), TInt, $h));

function _System.array15.Length2(ref) : int;

// array15.Length2: Type axiom
axiom (forall _System.array15$arg: Ty, $o: ref :: 
  { _System.array15.Length2($o), Tclass._System.array15?(_System.array15$arg) } 
  $o != null && dtype($o) == Tclass._System.array15?(_System.array15$arg)
     ==> $Is(_System.array15.Length2($o), TInt));

// array15.Length2: Allocation axiom
axiom (forall _System.array15$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array15.Length2($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array15?(_System.array15$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array15?(_System.array15$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array15.Length2($o), TInt, $h));

function _System.array15.Length3(ref) : int;

// array15.Length3: Type axiom
axiom (forall _System.array15$arg: Ty, $o: ref :: 
  { _System.array15.Length3($o), Tclass._System.array15?(_System.array15$arg) } 
  $o != null && dtype($o) == Tclass._System.array15?(_System.array15$arg)
     ==> $Is(_System.array15.Length3($o), TInt));

// array15.Length3: Allocation axiom
axiom (forall _System.array15$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array15.Length3($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array15?(_System.array15$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array15?(_System.array15$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array15.Length3($o), TInt, $h));

function _System.array15.Length4(ref) : int;

// array15.Length4: Type axiom
axiom (forall _System.array15$arg: Ty, $o: ref :: 
  { _System.array15.Length4($o), Tclass._System.array15?(_System.array15$arg) } 
  $o != null && dtype($o) == Tclass._System.array15?(_System.array15$arg)
     ==> $Is(_System.array15.Length4($o), TInt));

// array15.Length4: Allocation axiom
axiom (forall _System.array15$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array15.Length4($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array15?(_System.array15$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array15?(_System.array15$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array15.Length4($o), TInt, $h));

function _System.array15.Length5(ref) : int;

// array15.Length5: Type axiom
axiom (forall _System.array15$arg: Ty, $o: ref :: 
  { _System.array15.Length5($o), Tclass._System.array15?(_System.array15$arg) } 
  $o != null && dtype($o) == Tclass._System.array15?(_System.array15$arg)
     ==> $Is(_System.array15.Length5($o), TInt));

// array15.Length5: Allocation axiom
axiom (forall _System.array15$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array15.Length5($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array15?(_System.array15$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array15?(_System.array15$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array15.Length5($o), TInt, $h));

function _System.array15.Length6(ref) : int;

// array15.Length6: Type axiom
axiom (forall _System.array15$arg: Ty, $o: ref :: 
  { _System.array15.Length6($o), Tclass._System.array15?(_System.array15$arg) } 
  $o != null && dtype($o) == Tclass._System.array15?(_System.array15$arg)
     ==> $Is(_System.array15.Length6($o), TInt));

// array15.Length6: Allocation axiom
axiom (forall _System.array15$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array15.Length6($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array15?(_System.array15$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array15?(_System.array15$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array15.Length6($o), TInt, $h));

function _System.array15.Length7(ref) : int;

// array15.Length7: Type axiom
axiom (forall _System.array15$arg: Ty, $o: ref :: 
  { _System.array15.Length7($o), Tclass._System.array15?(_System.array15$arg) } 
  $o != null && dtype($o) == Tclass._System.array15?(_System.array15$arg)
     ==> $Is(_System.array15.Length7($o), TInt));

// array15.Length7: Allocation axiom
axiom (forall _System.array15$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array15.Length7($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array15?(_System.array15$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array15?(_System.array15$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array15.Length7($o), TInt, $h));

function _System.array15.Length8(ref) : int;

// array15.Length8: Type axiom
axiom (forall _System.array15$arg: Ty, $o: ref :: 
  { _System.array15.Length8($o), Tclass._System.array15?(_System.array15$arg) } 
  $o != null && dtype($o) == Tclass._System.array15?(_System.array15$arg)
     ==> $Is(_System.array15.Length8($o), TInt));

// array15.Length8: Allocation axiom
axiom (forall _System.array15$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array15.Length8($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array15?(_System.array15$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array15?(_System.array15$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array15.Length8($o), TInt, $h));

function _System.array15.Length9(ref) : int;

// array15.Length9: Type axiom
axiom (forall _System.array15$arg: Ty, $o: ref :: 
  { _System.array15.Length9($o), Tclass._System.array15?(_System.array15$arg) } 
  $o != null && dtype($o) == Tclass._System.array15?(_System.array15$arg)
     ==> $Is(_System.array15.Length9($o), TInt));

// array15.Length9: Allocation axiom
axiom (forall _System.array15$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array15.Length9($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array15?(_System.array15$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array15?(_System.array15$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array15.Length9($o), TInt, $h));

function _System.array15.Length10(ref) : int;

// array15.Length10: Type axiom
axiom (forall _System.array15$arg: Ty, $o: ref :: 
  { _System.array15.Length10($o), Tclass._System.array15?(_System.array15$arg) } 
  $o != null && dtype($o) == Tclass._System.array15?(_System.array15$arg)
     ==> $Is(_System.array15.Length10($o), TInt));

// array15.Length10: Allocation axiom
axiom (forall _System.array15$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array15.Length10($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array15?(_System.array15$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array15?(_System.array15$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array15.Length10($o), TInt, $h));

function _System.array15.Length11(ref) : int;

// array15.Length11: Type axiom
axiom (forall _System.array15$arg: Ty, $o: ref :: 
  { _System.array15.Length11($o), Tclass._System.array15?(_System.array15$arg) } 
  $o != null && dtype($o) == Tclass._System.array15?(_System.array15$arg)
     ==> $Is(_System.array15.Length11($o), TInt));

// array15.Length11: Allocation axiom
axiom (forall _System.array15$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array15.Length11($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array15?(_System.array15$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array15?(_System.array15$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array15.Length11($o), TInt, $h));

function _System.array15.Length12(ref) : int;

// array15.Length12: Type axiom
axiom (forall _System.array15$arg: Ty, $o: ref :: 
  { _System.array15.Length12($o), Tclass._System.array15?(_System.array15$arg) } 
  $o != null && dtype($o) == Tclass._System.array15?(_System.array15$arg)
     ==> $Is(_System.array15.Length12($o), TInt));

// array15.Length12: Allocation axiom
axiom (forall _System.array15$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array15.Length12($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array15?(_System.array15$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array15?(_System.array15$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array15.Length12($o), TInt, $h));

function _System.array15.Length13(ref) : int;

// array15.Length13: Type axiom
axiom (forall _System.array15$arg: Ty, $o: ref :: 
  { _System.array15.Length13($o), Tclass._System.array15?(_System.array15$arg) } 
  $o != null && dtype($o) == Tclass._System.array15?(_System.array15$arg)
     ==> $Is(_System.array15.Length13($o), TInt));

// array15.Length13: Allocation axiom
axiom (forall _System.array15$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array15.Length13($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array15?(_System.array15$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array15?(_System.array15$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array15.Length13($o), TInt, $h));

function _System.array15.Length14(ref) : int;

// array15.Length14: Type axiom
axiom (forall _System.array15$arg: Ty, $o: ref :: 
  { _System.array15.Length14($o), Tclass._System.array15?(_System.array15$arg) } 
  $o != null && dtype($o) == Tclass._System.array15?(_System.array15$arg)
     ==> $Is(_System.array15.Length14($o), TInt));

// array15.Length14: Allocation axiom
axiom (forall _System.array15$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array15.Length14($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array15?(_System.array15$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array15?(_System.array15$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array15.Length14($o), TInt, $h));

function Tclass._System.array15(Ty) : Ty;

const unique Tagclass._System.array15: TyTag;

// Tclass._System.array15 Tag
axiom (forall _System.array15$arg: Ty :: 
  { Tclass._System.array15(_System.array15$arg) } 
  Tag(Tclass._System.array15(_System.array15$arg)) == Tagclass._System.array15
     && TagFamily(Tclass._System.array15(_System.array15$arg)) == tytagFamily$array15);

function Tclass._System.array15_0(Ty) : Ty;

// Tclass._System.array15 injectivity 0
axiom (forall _System.array15$arg: Ty :: 
  { Tclass._System.array15(_System.array15$arg) } 
  Tclass._System.array15_0(Tclass._System.array15(_System.array15$arg))
     == _System.array15$arg);

// Box/unbox axiom for Tclass._System.array15
axiom (forall _System.array15$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array15(_System.array15$arg)) } 
  $IsBox(bx, Tclass._System.array15(_System.array15$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array15(_System.array15$arg)));

// $Is axiom for non-null type _System.array15
axiom (forall _System.array15$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array15(_System.array15$arg)) } 
    { $Is(c#0, Tclass._System.array15?(_System.array15$arg)) } 
  $Is(c#0, Tclass._System.array15(_System.array15$arg))
     <==> $Is(c#0, Tclass._System.array15?(_System.array15$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array15
axiom (forall _System.array15$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array15(_System.array15$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array15?(_System.array15$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array15(_System.array15$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array15?(_System.array15$arg), $h));

const unique class._System.array16?: ClassName;

function Tclass._System.array16?(Ty) : Ty;

const unique Tagclass._System.array16?: TyTag;

// Tclass._System.array16? Tag
axiom (forall _System.array16$arg: Ty :: 
  { Tclass._System.array16?(_System.array16$arg) } 
  Tag(Tclass._System.array16?(_System.array16$arg)) == Tagclass._System.array16?
     && TagFamily(Tclass._System.array16?(_System.array16$arg)) == tytagFamily$array16);

function Tclass._System.array16?_0(Ty) : Ty;

// Tclass._System.array16? injectivity 0
axiom (forall _System.array16$arg: Ty :: 
  { Tclass._System.array16?(_System.array16$arg) } 
  Tclass._System.array16?_0(Tclass._System.array16?(_System.array16$arg))
     == _System.array16$arg);

// Box/unbox axiom for Tclass._System.array16?
axiom (forall _System.array16$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array16?(_System.array16$arg)) } 
  $IsBox(bx, Tclass._System.array16?(_System.array16$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array16?(_System.array16$arg)));

axiom (forall o: ref :: 
  { _System.array16.Length0(o) } 
  0 <= _System.array16.Length0(o));

axiom (forall o: ref :: 
  { _System.array16.Length1(o) } 
  0 <= _System.array16.Length1(o));

axiom (forall o: ref :: 
  { _System.array16.Length2(o) } 
  0 <= _System.array16.Length2(o));

axiom (forall o: ref :: 
  { _System.array16.Length3(o) } 
  0 <= _System.array16.Length3(o));

axiom (forall o: ref :: 
  { _System.array16.Length4(o) } 
  0 <= _System.array16.Length4(o));

axiom (forall o: ref :: 
  { _System.array16.Length5(o) } 
  0 <= _System.array16.Length5(o));

axiom (forall o: ref :: 
  { _System.array16.Length6(o) } 
  0 <= _System.array16.Length6(o));

axiom (forall o: ref :: 
  { _System.array16.Length7(o) } 
  0 <= _System.array16.Length7(o));

axiom (forall o: ref :: 
  { _System.array16.Length8(o) } 
  0 <= _System.array16.Length8(o));

axiom (forall o: ref :: 
  { _System.array16.Length9(o) } 
  0 <= _System.array16.Length9(o));

axiom (forall o: ref :: 
  { _System.array16.Length10(o) } 
  0 <= _System.array16.Length10(o));

axiom (forall o: ref :: 
  { _System.array16.Length11(o) } 
  0 <= _System.array16.Length11(o));

axiom (forall o: ref :: 
  { _System.array16.Length12(o) } 
  0 <= _System.array16.Length12(o));

axiom (forall o: ref :: 
  { _System.array16.Length13(o) } 
  0 <= _System.array16.Length13(o));

axiom (forall o: ref :: 
  { _System.array16.Length14(o) } 
  0 <= _System.array16.Length14(o));

axiom (forall o: ref :: 
  { _System.array16.Length15(o) } 
  0 <= _System.array16.Length15(o));

// array16.: Type axiom
axiom (forall _System.array16$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int, 
    $i4: int, 
    $i5: int, 
    $i6: int, 
    $i7: int, 
    $i8: int, 
    $i9: int, 
    $i10: int, 
    $i11: int, 
    $i12: int, 
    $i13: int, 
    $i14: int, 
    $i15: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                              $i4), 
                            $i5), 
                          $i6), 
                        $i7), 
                      $i8), 
                    $i9), 
                  $i10), 
                $i11), 
              $i12), 
            $i13), 
          $i14), 
        $i15)), Tclass._System.array16?(_System.array16$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array16?(_System.array16$arg)
       && 
      0 <= $i0
       && $i0 < _System.array16.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array16.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array16.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array16.Length3($o)
       && 
      0 <= $i4
       && $i4 < _System.array16.Length4($o)
       && 
      0 <= $i5
       && $i5 < _System.array16.Length5($o)
       && 
      0 <= $i6
       && $i6 < _System.array16.Length6($o)
       && 
      0 <= $i7
       && $i7 < _System.array16.Length7($o)
       && 
      0 <= $i8
       && $i8 < _System.array16.Length8($o)
       && 
      0 <= $i9
       && $i9 < _System.array16.Length9($o)
       && 
      0 <= $i10
       && $i10 < _System.array16.Length10($o)
       && 
      0 <= $i11
       && $i11 < _System.array16.Length11($o)
       && 
      0 <= $i12
       && $i12 < _System.array16.Length12($o)
       && 
      0 <= $i13
       && $i13 < _System.array16.Length13($o)
       && 
      0 <= $i14
       && $i14 < _System.array16.Length14($o)
       && 
      0 <= $i15
       && $i15 < _System.array16.Length15($o)
     ==> $IsBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                                $i4), 
                              $i5), 
                            $i6), 
                          $i7), 
                        $i8), 
                      $i9), 
                    $i10), 
                  $i11), 
                $i12), 
              $i13), 
            $i14), 
          $i15)), 
      _System.array16$arg));

// array16.: Allocation axiom
axiom (forall _System.array16$arg: Ty, 
    $h: Heap, 
    $o: ref, 
    $i0: int, 
    $i1: int, 
    $i2: int, 
    $i3: int, 
    $i4: int, 
    $i5: int, 
    $i6: int, 
    $i7: int, 
    $i8: int, 
    $i9: int, 
    $i10: int, 
    $i11: int, 
    $i12: int, 
    $i13: int, 
    $i14: int, 
    $i15: int :: 
  { read($h, 
      $o, 
      MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                              $i4), 
                            $i5), 
                          $i6), 
                        $i7), 
                      $i8), 
                    $i9), 
                  $i10), 
                $i11), 
              $i12), 
            $i13), 
          $i14), 
        $i15)), Tclass._System.array16?(_System.array16$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array16?(_System.array16$arg)
       && 
      0 <= $i0
       && $i0 < _System.array16.Length0($o)
       && 
      0 <= $i1
       && $i1 < _System.array16.Length1($o)
       && 
      0 <= $i2
       && $i2 < _System.array16.Length2($o)
       && 
      0 <= $i3
       && $i3 < _System.array16.Length3($o)
       && 
      0 <= $i4
       && $i4 < _System.array16.Length4($o)
       && 
      0 <= $i5
       && $i5 < _System.array16.Length5($o)
       && 
      0 <= $i6
       && $i6 < _System.array16.Length6($o)
       && 
      0 <= $i7
       && $i7 < _System.array16.Length7($o)
       && 
      0 <= $i8
       && $i8 < _System.array16.Length8($o)
       && 
      0 <= $i9
       && $i9 < _System.array16.Length9($o)
       && 
      0 <= $i10
       && $i10 < _System.array16.Length10($o)
       && 
      0 <= $i11
       && $i11 < _System.array16.Length11($o)
       && 
      0 <= $i12
       && $i12 < _System.array16.Length12($o)
       && 
      0 <= $i13
       && $i13 < _System.array16.Length13($o)
       && 
      0 <= $i14
       && $i14 < _System.array16.Length14($o)
       && 
      0 <= $i15
       && $i15 < _System.array16.Length15($o)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAllocBox(read($h, 
        $o, 
        MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(MultiIndexField(IndexField($i0), $i1), $i2), $i3), 
                                $i4), 
                              $i5), 
                            $i6), 
                          $i7), 
                        $i8), 
                      $i9), 
                    $i10), 
                  $i11), 
                $i12), 
              $i13), 
            $i14), 
          $i15)), 
      _System.array16$arg, 
      $h));

// $Is axiom for array type array16
axiom (forall _System.array16$arg: Ty, $o: ref :: 
  { $Is($o, Tclass._System.array16?(_System.array16$arg)) } 
  $Is($o, Tclass._System.array16?(_System.array16$arg))
     <==> $o == null || dtype($o) == Tclass._System.array16?(_System.array16$arg));

// $IsAlloc axiom for array type array16
axiom (forall _System.array16$arg: Ty, $o: ref, $h: Heap :: 
  { $IsAlloc($o, Tclass._System.array16?(_System.array16$arg), $h) } 
  $IsAlloc($o, Tclass._System.array16?(_System.array16$arg), $h)
     <==> $o == null || $Unbox(read($h, $o, alloc)): bool);

function _System.array16.Length0(ref) : int;

// array16.Length0: Type axiom
axiom (forall _System.array16$arg: Ty, $o: ref :: 
  { _System.array16.Length0($o), Tclass._System.array16?(_System.array16$arg) } 
  $o != null && dtype($o) == Tclass._System.array16?(_System.array16$arg)
     ==> $Is(_System.array16.Length0($o), TInt));

// array16.Length0: Allocation axiom
axiom (forall _System.array16$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array16.Length0($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array16?(_System.array16$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array16?(_System.array16$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array16.Length0($o), TInt, $h));

function _System.array16.Length1(ref) : int;

// array16.Length1: Type axiom
axiom (forall _System.array16$arg: Ty, $o: ref :: 
  { _System.array16.Length1($o), Tclass._System.array16?(_System.array16$arg) } 
  $o != null && dtype($o) == Tclass._System.array16?(_System.array16$arg)
     ==> $Is(_System.array16.Length1($o), TInt));

// array16.Length1: Allocation axiom
axiom (forall _System.array16$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array16.Length1($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array16?(_System.array16$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array16?(_System.array16$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array16.Length1($o), TInt, $h));

function _System.array16.Length2(ref) : int;

// array16.Length2: Type axiom
axiom (forall _System.array16$arg: Ty, $o: ref :: 
  { _System.array16.Length2($o), Tclass._System.array16?(_System.array16$arg) } 
  $o != null && dtype($o) == Tclass._System.array16?(_System.array16$arg)
     ==> $Is(_System.array16.Length2($o), TInt));

// array16.Length2: Allocation axiom
axiom (forall _System.array16$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array16.Length2($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array16?(_System.array16$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array16?(_System.array16$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array16.Length2($o), TInt, $h));

function _System.array16.Length3(ref) : int;

// array16.Length3: Type axiom
axiom (forall _System.array16$arg: Ty, $o: ref :: 
  { _System.array16.Length3($o), Tclass._System.array16?(_System.array16$arg) } 
  $o != null && dtype($o) == Tclass._System.array16?(_System.array16$arg)
     ==> $Is(_System.array16.Length3($o), TInt));

// array16.Length3: Allocation axiom
axiom (forall _System.array16$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array16.Length3($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array16?(_System.array16$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array16?(_System.array16$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array16.Length3($o), TInt, $h));

function _System.array16.Length4(ref) : int;

// array16.Length4: Type axiom
axiom (forall _System.array16$arg: Ty, $o: ref :: 
  { _System.array16.Length4($o), Tclass._System.array16?(_System.array16$arg) } 
  $o != null && dtype($o) == Tclass._System.array16?(_System.array16$arg)
     ==> $Is(_System.array16.Length4($o), TInt));

// array16.Length4: Allocation axiom
axiom (forall _System.array16$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array16.Length4($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array16?(_System.array16$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array16?(_System.array16$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array16.Length4($o), TInt, $h));

function _System.array16.Length5(ref) : int;

// array16.Length5: Type axiom
axiom (forall _System.array16$arg: Ty, $o: ref :: 
  { _System.array16.Length5($o), Tclass._System.array16?(_System.array16$arg) } 
  $o != null && dtype($o) == Tclass._System.array16?(_System.array16$arg)
     ==> $Is(_System.array16.Length5($o), TInt));

// array16.Length5: Allocation axiom
axiom (forall _System.array16$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array16.Length5($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array16?(_System.array16$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array16?(_System.array16$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array16.Length5($o), TInt, $h));

function _System.array16.Length6(ref) : int;

// array16.Length6: Type axiom
axiom (forall _System.array16$arg: Ty, $o: ref :: 
  { _System.array16.Length6($o), Tclass._System.array16?(_System.array16$arg) } 
  $o != null && dtype($o) == Tclass._System.array16?(_System.array16$arg)
     ==> $Is(_System.array16.Length6($o), TInt));

// array16.Length6: Allocation axiom
axiom (forall _System.array16$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array16.Length6($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array16?(_System.array16$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array16?(_System.array16$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array16.Length6($o), TInt, $h));

function _System.array16.Length7(ref) : int;

// array16.Length7: Type axiom
axiom (forall _System.array16$arg: Ty, $o: ref :: 
  { _System.array16.Length7($o), Tclass._System.array16?(_System.array16$arg) } 
  $o != null && dtype($o) == Tclass._System.array16?(_System.array16$arg)
     ==> $Is(_System.array16.Length7($o), TInt));

// array16.Length7: Allocation axiom
axiom (forall _System.array16$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array16.Length7($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array16?(_System.array16$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array16?(_System.array16$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array16.Length7($o), TInt, $h));

function _System.array16.Length8(ref) : int;

// array16.Length8: Type axiom
axiom (forall _System.array16$arg: Ty, $o: ref :: 
  { _System.array16.Length8($o), Tclass._System.array16?(_System.array16$arg) } 
  $o != null && dtype($o) == Tclass._System.array16?(_System.array16$arg)
     ==> $Is(_System.array16.Length8($o), TInt));

// array16.Length8: Allocation axiom
axiom (forall _System.array16$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array16.Length8($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array16?(_System.array16$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array16?(_System.array16$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array16.Length8($o), TInt, $h));

function _System.array16.Length9(ref) : int;

// array16.Length9: Type axiom
axiom (forall _System.array16$arg: Ty, $o: ref :: 
  { _System.array16.Length9($o), Tclass._System.array16?(_System.array16$arg) } 
  $o != null && dtype($o) == Tclass._System.array16?(_System.array16$arg)
     ==> $Is(_System.array16.Length9($o), TInt));

// array16.Length9: Allocation axiom
axiom (forall _System.array16$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array16.Length9($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array16?(_System.array16$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array16?(_System.array16$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array16.Length9($o), TInt, $h));

function _System.array16.Length10(ref) : int;

// array16.Length10: Type axiom
axiom (forall _System.array16$arg: Ty, $o: ref :: 
  { _System.array16.Length10($o), Tclass._System.array16?(_System.array16$arg) } 
  $o != null && dtype($o) == Tclass._System.array16?(_System.array16$arg)
     ==> $Is(_System.array16.Length10($o), TInt));

// array16.Length10: Allocation axiom
axiom (forall _System.array16$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array16.Length10($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array16?(_System.array16$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array16?(_System.array16$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array16.Length10($o), TInt, $h));

function _System.array16.Length11(ref) : int;

// array16.Length11: Type axiom
axiom (forall _System.array16$arg: Ty, $o: ref :: 
  { _System.array16.Length11($o), Tclass._System.array16?(_System.array16$arg) } 
  $o != null && dtype($o) == Tclass._System.array16?(_System.array16$arg)
     ==> $Is(_System.array16.Length11($o), TInt));

// array16.Length11: Allocation axiom
axiom (forall _System.array16$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array16.Length11($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array16?(_System.array16$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array16?(_System.array16$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array16.Length11($o), TInt, $h));

function _System.array16.Length12(ref) : int;

// array16.Length12: Type axiom
axiom (forall _System.array16$arg: Ty, $o: ref :: 
  { _System.array16.Length12($o), Tclass._System.array16?(_System.array16$arg) } 
  $o != null && dtype($o) == Tclass._System.array16?(_System.array16$arg)
     ==> $Is(_System.array16.Length12($o), TInt));

// array16.Length12: Allocation axiom
axiom (forall _System.array16$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array16.Length12($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array16?(_System.array16$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array16?(_System.array16$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array16.Length12($o), TInt, $h));

function _System.array16.Length13(ref) : int;

// array16.Length13: Type axiom
axiom (forall _System.array16$arg: Ty, $o: ref :: 
  { _System.array16.Length13($o), Tclass._System.array16?(_System.array16$arg) } 
  $o != null && dtype($o) == Tclass._System.array16?(_System.array16$arg)
     ==> $Is(_System.array16.Length13($o), TInt));

// array16.Length13: Allocation axiom
axiom (forall _System.array16$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array16.Length13($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array16?(_System.array16$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array16?(_System.array16$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array16.Length13($o), TInt, $h));

function _System.array16.Length14(ref) : int;

// array16.Length14: Type axiom
axiom (forall _System.array16$arg: Ty, $o: ref :: 
  { _System.array16.Length14($o), Tclass._System.array16?(_System.array16$arg) } 
  $o != null && dtype($o) == Tclass._System.array16?(_System.array16$arg)
     ==> $Is(_System.array16.Length14($o), TInt));

// array16.Length14: Allocation axiom
axiom (forall _System.array16$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array16.Length14($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array16?(_System.array16$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array16?(_System.array16$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array16.Length14($o), TInt, $h));

function _System.array16.Length15(ref) : int;

// array16.Length15: Type axiom
axiom (forall _System.array16$arg: Ty, $o: ref :: 
  { _System.array16.Length15($o), Tclass._System.array16?(_System.array16$arg) } 
  $o != null && dtype($o) == Tclass._System.array16?(_System.array16$arg)
     ==> $Is(_System.array16.Length15($o), TInt));

// array16.Length15: Allocation axiom
axiom (forall _System.array16$arg: Ty, $h: Heap, $o: ref :: 
  { _System.array16.Length15($o), $Unbox(read($h, $o, alloc)): bool, Tclass._System.array16?(_System.array16$arg) } 
  $IsGoodHeap($h)
       && 
      $o != null
       && dtype($o) == Tclass._System.array16?(_System.array16$arg)
       && $Unbox(read($h, $o, alloc)): bool
     ==> $IsAlloc(_System.array16.Length15($o), TInt, $h));

function Tclass._System.array16(Ty) : Ty;

const unique Tagclass._System.array16: TyTag;

// Tclass._System.array16 Tag
axiom (forall _System.array16$arg: Ty :: 
  { Tclass._System.array16(_System.array16$arg) } 
  Tag(Tclass._System.array16(_System.array16$arg)) == Tagclass._System.array16
     && TagFamily(Tclass._System.array16(_System.array16$arg)) == tytagFamily$array16);

function Tclass._System.array16_0(Ty) : Ty;

// Tclass._System.array16 injectivity 0
axiom (forall _System.array16$arg: Ty :: 
  { Tclass._System.array16(_System.array16$arg) } 
  Tclass._System.array16_0(Tclass._System.array16(_System.array16$arg))
     == _System.array16$arg);

// Box/unbox axiom for Tclass._System.array16
axiom (forall _System.array16$arg: Ty, bx: Box :: 
  { $IsBox(bx, Tclass._System.array16(_System.array16$arg)) } 
  $IsBox(bx, Tclass._System.array16(_System.array16$arg))
     ==> $Box($Unbox(bx): ref) == bx
       && $Is($Unbox(bx): ref, Tclass._System.array16(_System.array16$arg)));

// $Is axiom for non-null type _System.array16
axiom (forall _System.array16$arg: Ty, c#0: ref :: 
  { $Is(c#0, Tclass._System.array16(_System.array16$arg)) } 
    { $Is(c#0, Tclass._System.array16?(_System.array16$arg)) } 
  $Is(c#0, Tclass._System.array16(_System.array16$arg))
     <==> $Is(c#0, Tclass._System.array16?(_System.array16$arg)) && c#0 != null);

// $IsAlloc axiom for non-null type _System.array16
axiom (forall _System.array16$arg: Ty, c#0: ref, $h: Heap :: 
  { $IsAlloc(c#0, Tclass._System.array16(_System.array16$arg), $h) } 
    { $IsAlloc(c#0, Tclass._System.array16?(_System.array16$arg), $h) } 
  $IsAlloc(c#0, Tclass._System.array16(_System.array16$arg), $h)
     <==> $IsAlloc(c#0, Tclass._System.array16?(_System.array16$arg), $h));

const unique class._module.__default: ClassName;

procedure {:verboseName "HasTuples (well-formedness)"} CheckWellFormed$$_module.__default.HasTuples();
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "HasTuples (call)"} Call$$_module.__default.HasTuples();
  modifies $Heap;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "HasTuples (correctness)"} Impl$$_module.__default.HasTuples() returns ($_reverifyPost: bool);
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "HasArrows (well-formedness)"} CheckWellFormed$$_module.__default.HasArrows();
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "HasArrows (call)"} Call$$_module.__default.HasArrows();
  modifies $Heap;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "HasArrows (correctness)"} Impl$$_module.__default.HasArrows() returns ($_reverifyPost: bool);
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "HasArrays (well-formedness)"} CheckWellFormed$$_module.__default.HasArrays();
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "HasArrays (call)"} Call$$_module.__default.HasArrays();
  modifies $Heap;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "HasArrays (correctness)"} Impl$$_module.__default.HasArrays() returns ($_reverifyPost: bool);
  free requires 1 == $FunctionContextHeight;
  modifies $Heap;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "HasArrays (correctness)"} Impl$$_module.__default.HasArrays() returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;
  var n#0: int where LitInt(0) <= n#0 && n#0 < 256;
  var newtype$check#0: int;
  var has1#0: ref
     where $Is(has1#0, Tclass._System.array(TBool))
       && $IsAlloc(has1#0, Tclass._System.array(TBool), $Heap);
  var $nw: ref;
  var has2#0: ref
     where $Is(has2#0, Tclass._System.array2(TBool))
       && $IsAlloc(has2#0, Tclass._System.array2(TBool), $Heap);
  var has3#0: ref
     where $Is(has3#0, Tclass._System.array3(TBool))
       && $IsAlloc(has3#0, Tclass._System.array3(TBool), $Heap);
  var has4#0: ref
     where $Is(has4#0, Tclass._System.array4(TBool))
       && $IsAlloc(has4#0, Tclass._System.array4(TBool), $Heap);
  var has5#0: ref
     where $Is(has5#0, Tclass._System.array5(TBool))
       && $IsAlloc(has5#0, Tclass._System.array5(TBool), $Heap);
  var has6#0: ref
     where $Is(has6#0, Tclass._System.array6(TBool))
       && $IsAlloc(has6#0, Tclass._System.array6(TBool), $Heap);
  var has7#0: ref
     where $Is(has7#0, Tclass._System.array7(TBool))
       && $IsAlloc(has7#0, Tclass._System.array7(TBool), $Heap);
  var has8#0: ref
     where $Is(has8#0, Tclass._System.array8(TBool))
       && $IsAlloc(has8#0, Tclass._System.array8(TBool), $Heap);
  var has9#0: ref
     where $Is(has9#0, Tclass._System.array9(TBool))
       && $IsAlloc(has9#0, Tclass._System.array9(TBool), $Heap);
  var has10#0: ref
     where $Is(has10#0, Tclass._System.array10(TBool))
       && $IsAlloc(has10#0, Tclass._System.array10(TBool), $Heap);
  var has11#0: ref
     where $Is(has11#0, Tclass._System.array11(TBool))
       && $IsAlloc(has11#0, Tclass._System.array11(TBool), $Heap);
  var has12#0: ref
     where $Is(has12#0, Tclass._System.array12(TBool))
       && $IsAlloc(has12#0, Tclass._System.array12(TBool), $Heap);
  var has13#0: ref
     where $Is(has13#0, Tclass._System.array13(TBool))
       && $IsAlloc(has13#0, Tclass._System.array13(TBool), $Heap);
  var has14#0: ref
     where $Is(has14#0, Tclass._System.array14(TBool))
       && $IsAlloc(has14#0, Tclass._System.array14(TBool), $Heap);
  var has15#0: ref
     where $Is(has15#0, Tclass._System.array15(TBool))
       && $IsAlloc(has15#0, Tclass._System.array15(TBool), $Heap);
  var has16#0: ref
     where $Is(has16#0, Tclass._System.array16(TBool))
       && $IsAlloc(has16#0, Tclass._System.array16(TBool), $Heap);

    // AddMethodImpl: HasArrays, Impl$$_module.__default.HasArrays
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/comp/BuiltIns.dfy(55,15)
    assume true;
    newtype$check#0 := LitInt(0);
    assert {:id "id56"} LitInt(0) <= newtype$check#0 && newtype$check#0 < 256;
    assume true;
    n#0 := LitInt(0);
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/comp/BuiltIns.dfy(56,12)
    assume true;
    assert {:id "id58"} 0 <= n#0;
    havoc $nw;
    assume $nw != null && $Is($nw, Tclass._System.array?(TBool));
    assume !$Unbox(read($Heap, $nw, alloc)): bool;
    assume _System.array.Length($nw) == n#0;
    $Heap := update($Heap, $nw, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    has1#0 := $nw;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/comp/BuiltIns.dfy(57,12)
    assume true;
    assert {:id "id60"} 0 <= n#0;
    assert {:id "id61"} 0 <= n#0;
    havoc $nw;
    assume $nw != null && $Is($nw, Tclass._System.array2?(TBool));
    assume !$Unbox(read($Heap, $nw, alloc)): bool;
    assume _System.array2.Length0($nw) == n#0;
    assume _System.array2.Length1($nw) == n#0;
    $Heap := update($Heap, $nw, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    has2#0 := $nw;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/comp/BuiltIns.dfy(58,12)
    assume true;
    assert {:id "id63"} 0 <= n#0;
    assert {:id "id64"} 0 <= n#0;
    assert {:id "id65"} 0 <= n#0;
    havoc $nw;
    assume $nw != null && $Is($nw, Tclass._System.array3?(TBool));
    assume !$Unbox(read($Heap, $nw, alloc)): bool;
    assume _System.array3.Length0($nw) == n#0;
    assume _System.array3.Length1($nw) == n#0;
    assume _System.array3.Length2($nw) == n#0;
    $Heap := update($Heap, $nw, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    has3#0 := $nw;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/comp/BuiltIns.dfy(59,12)
    assume true;
    assert {:id "id67"} 0 <= n#0;
    assert {:id "id68"} 0 <= n#0;
    assert {:id "id69"} 0 <= n#0;
    assert {:id "id70"} 0 <= n#0;
    havoc $nw;
    assume $nw != null && $Is($nw, Tclass._System.array4?(TBool));
    assume !$Unbox(read($Heap, $nw, alloc)): bool;
    assume _System.array4.Length0($nw) == n#0;
    assume _System.array4.Length1($nw) == n#0;
    assume _System.array4.Length2($nw) == n#0;
    assume _System.array4.Length3($nw) == n#0;
    $Heap := update($Heap, $nw, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    has4#0 := $nw;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/comp/BuiltIns.dfy(60,12)
    assume true;
    assert {:id "id72"} 0 <= n#0;
    assert {:id "id73"} 0 <= n#0;
    assert {:id "id74"} 0 <= n#0;
    assert {:id "id75"} 0 <= n#0;
    assert {:id "id76"} 0 <= n#0;
    havoc $nw;
    assume $nw != null && $Is($nw, Tclass._System.array5?(TBool));
    assume !$Unbox(read($Heap, $nw, alloc)): bool;
    assume _System.array5.Length0($nw) == n#0;
    assume _System.array5.Length1($nw) == n#0;
    assume _System.array5.Length2($nw) == n#0;
    assume _System.array5.Length3($nw) == n#0;
    assume _System.array5.Length4($nw) == n#0;
    $Heap := update($Heap, $nw, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    has5#0 := $nw;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/comp/BuiltIns.dfy(61,12)
    assume true;
    assert {:id "id78"} 0 <= n#0;
    assert {:id "id79"} 0 <= n#0;
    assert {:id "id80"} 0 <= n#0;
    assert {:id "id81"} 0 <= n#0;
    assert {:id "id82"} 0 <= n#0;
    assert {:id "id83"} 0 <= n#0;
    havoc $nw;
    assume $nw != null && $Is($nw, Tclass._System.array6?(TBool));
    assume !$Unbox(read($Heap, $nw, alloc)): bool;
    assume _System.array6.Length0($nw) == n#0;
    assume _System.array6.Length1($nw) == n#0;
    assume _System.array6.Length2($nw) == n#0;
    assume _System.array6.Length3($nw) == n#0;
    assume _System.array6.Length4($nw) == n#0;
    assume _System.array6.Length5($nw) == n#0;
    $Heap := update($Heap, $nw, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    has6#0 := $nw;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/comp/BuiltIns.dfy(62,12)
    assume true;
    assert {:id "id85"} 0 <= n#0;
    assert {:id "id86"} 0 <= n#0;
    assert {:id "id87"} 0 <= n#0;
    assert {:id "id88"} 0 <= n#0;
    assert {:id "id89"} 0 <= n#0;
    assert {:id "id90"} 0 <= n#0;
    assert {:id "id91"} 0 <= n#0;
    havoc $nw;
    assume $nw != null && $Is($nw, Tclass._System.array7?(TBool));
    assume !$Unbox(read($Heap, $nw, alloc)): bool;
    assume _System.array7.Length0($nw) == n#0;
    assume _System.array7.Length1($nw) == n#0;
    assume _System.array7.Length2($nw) == n#0;
    assume _System.array7.Length3($nw) == n#0;
    assume _System.array7.Length4($nw) == n#0;
    assume _System.array7.Length5($nw) == n#0;
    assume _System.array7.Length6($nw) == n#0;
    $Heap := update($Heap, $nw, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    has7#0 := $nw;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/comp/BuiltIns.dfy(63,12)
    assume true;
    assert {:id "id93"} 0 <= n#0;
    assert {:id "id94"} 0 <= n#0;
    assert {:id "id95"} 0 <= n#0;
    assert {:id "id96"} 0 <= n#0;
    assert {:id "id97"} 0 <= n#0;
    assert {:id "id98"} 0 <= n#0;
    assert {:id "id99"} 0 <= n#0;
    assert {:id "id100"} 0 <= n#0;
    havoc $nw;
    assume $nw != null && $Is($nw, Tclass._System.array8?(TBool));
    assume !$Unbox(read($Heap, $nw, alloc)): bool;
    assume _System.array8.Length0($nw) == n#0;
    assume _System.array8.Length1($nw) == n#0;
    assume _System.array8.Length2($nw) == n#0;
    assume _System.array8.Length3($nw) == n#0;
    assume _System.array8.Length4($nw) == n#0;
    assume _System.array8.Length5($nw) == n#0;
    assume _System.array8.Length6($nw) == n#0;
    assume _System.array8.Length7($nw) == n#0;
    $Heap := update($Heap, $nw, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    has8#0 := $nw;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/comp/BuiltIns.dfy(64,12)
    assume true;
    assert {:id "id102"} 0 <= n#0;
    assert {:id "id103"} 0 <= n#0;
    assert {:id "id104"} 0 <= n#0;
    assert {:id "id105"} 0 <= n#0;
    assert {:id "id106"} 0 <= n#0;
    assert {:id "id107"} 0 <= n#0;
    assert {:id "id108"} 0 <= n#0;
    assert {:id "id109"} 0 <= n#0;
    assert {:id "id110"} 0 <= n#0;
    havoc $nw;
    assume $nw != null && $Is($nw, Tclass._System.array9?(TBool));
    assume !$Unbox(read($Heap, $nw, alloc)): bool;
    assume _System.array9.Length0($nw) == n#0;
    assume _System.array9.Length1($nw) == n#0;
    assume _System.array9.Length2($nw) == n#0;
    assume _System.array9.Length3($nw) == n#0;
    assume _System.array9.Length4($nw) == n#0;
    assume _System.array9.Length5($nw) == n#0;
    assume _System.array9.Length6($nw) == n#0;
    assume _System.array9.Length7($nw) == n#0;
    assume _System.array9.Length8($nw) == n#0;
    $Heap := update($Heap, $nw, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    has9#0 := $nw;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/comp/BuiltIns.dfy(65,13)
    assume true;
    assert {:id "id112"} 0 <= n#0;
    assert {:id "id113"} 0 <= n#0;
    assert {:id "id114"} 0 <= n#0;
    assert {:id "id115"} 0 <= n#0;
    assert {:id "id116"} 0 <= n#0;
    assert {:id "id117"} 0 <= n#0;
    assert {:id "id118"} 0 <= n#0;
    assert {:id "id119"} 0 <= n#0;
    assert {:id "id120"} 0 <= n#0;
    assert {:id "id121"} 0 <= n#0;
    havoc $nw;
    assume $nw != null && $Is($nw, Tclass._System.array10?(TBool));
    assume !$Unbox(read($Heap, $nw, alloc)): bool;
    assume _System.array10.Length0($nw) == n#0;
    assume _System.array10.Length1($nw) == n#0;
    assume _System.array10.Length2($nw) == n#0;
    assume _System.array10.Length3($nw) == n#0;
    assume _System.array10.Length4($nw) == n#0;
    assume _System.array10.Length5($nw) == n#0;
    assume _System.array10.Length6($nw) == n#0;
    assume _System.array10.Length7($nw) == n#0;
    assume _System.array10.Length8($nw) == n#0;
    assume _System.array10.Length9($nw) == n#0;
    $Heap := update($Heap, $nw, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    has10#0 := $nw;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/comp/BuiltIns.dfy(66,13)
    assume true;
    assert {:id "id123"} 0 <= n#0;
    assert {:id "id124"} 0 <= n#0;
    assert {:id "id125"} 0 <= n#0;
    assert {:id "id126"} 0 <= n#0;
    assert {:id "id127"} 0 <= n#0;
    assert {:id "id128"} 0 <= n#0;
    assert {:id "id129"} 0 <= n#0;
    assert {:id "id130"} 0 <= n#0;
    assert {:id "id131"} 0 <= n#0;
    assert {:id "id132"} 0 <= n#0;
    assert {:id "id133"} 0 <= n#0;
    havoc $nw;
    assume $nw != null && $Is($nw, Tclass._System.array11?(TBool));
    assume !$Unbox(read($Heap, $nw, alloc)): bool;
    assume _System.array11.Length0($nw) == n#0;
    assume _System.array11.Length1($nw) == n#0;
    assume _System.array11.Length2($nw) == n#0;
    assume _System.array11.Length3($nw) == n#0;
    assume _System.array11.Length4($nw) == n#0;
    assume _System.array11.Length5($nw) == n#0;
    assume _System.array11.Length6($nw) == n#0;
    assume _System.array11.Length7($nw) == n#0;
    assume _System.array11.Length8($nw) == n#0;
    assume _System.array11.Length9($nw) == n#0;
    assume _System.array11.Length10($nw) == n#0;
    $Heap := update($Heap, $nw, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    has11#0 := $nw;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/comp/BuiltIns.dfy(67,13)
    assume true;
    assert {:id "id135"} 0 <= n#0;
    assert {:id "id136"} 0 <= n#0;
    assert {:id "id137"} 0 <= n#0;
    assert {:id "id138"} 0 <= n#0;
    assert {:id "id139"} 0 <= n#0;
    assert {:id "id140"} 0 <= n#0;
    assert {:id "id141"} 0 <= n#0;
    assert {:id "id142"} 0 <= n#0;
    assert {:id "id143"} 0 <= n#0;
    assert {:id "id144"} 0 <= n#0;
    assert {:id "id145"} 0 <= n#0;
    assert {:id "id146"} 0 <= n#0;
    havoc $nw;
    assume $nw != null && $Is($nw, Tclass._System.array12?(TBool));
    assume !$Unbox(read($Heap, $nw, alloc)): bool;
    assume _System.array12.Length0($nw) == n#0;
    assume _System.array12.Length1($nw) == n#0;
    assume _System.array12.Length2($nw) == n#0;
    assume _System.array12.Length3($nw) == n#0;
    assume _System.array12.Length4($nw) == n#0;
    assume _System.array12.Length5($nw) == n#0;
    assume _System.array12.Length6($nw) == n#0;
    assume _System.array12.Length7($nw) == n#0;
    assume _System.array12.Length8($nw) == n#0;
    assume _System.array12.Length9($nw) == n#0;
    assume _System.array12.Length10($nw) == n#0;
    assume _System.array12.Length11($nw) == n#0;
    $Heap := update($Heap, $nw, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    has12#0 := $nw;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/comp/BuiltIns.dfy(68,13)
    assume true;
    assert {:id "id148"} 0 <= n#0;
    assert {:id "id149"} 0 <= n#0;
    assert {:id "id150"} 0 <= n#0;
    assert {:id "id151"} 0 <= n#0;
    assert {:id "id152"} 0 <= n#0;
    assert {:id "id153"} 0 <= n#0;
    assert {:id "id154"} 0 <= n#0;
    assert {:id "id155"} 0 <= n#0;
    assert {:id "id156"} 0 <= n#0;
    assert {:id "id157"} 0 <= n#0;
    assert {:id "id158"} 0 <= n#0;
    assert {:id "id159"} 0 <= n#0;
    assert {:id "id160"} 0 <= n#0;
    havoc $nw;
    assume $nw != null && $Is($nw, Tclass._System.array13?(TBool));
    assume !$Unbox(read($Heap, $nw, alloc)): bool;
    assume _System.array13.Length0($nw) == n#0;
    assume _System.array13.Length1($nw) == n#0;
    assume _System.array13.Length2($nw) == n#0;
    assume _System.array13.Length3($nw) == n#0;
    assume _System.array13.Length4($nw) == n#0;
    assume _System.array13.Length5($nw) == n#0;
    assume _System.array13.Length6($nw) == n#0;
    assume _System.array13.Length7($nw) == n#0;
    assume _System.array13.Length8($nw) == n#0;
    assume _System.array13.Length9($nw) == n#0;
    assume _System.array13.Length10($nw) == n#0;
    assume _System.array13.Length11($nw) == n#0;
    assume _System.array13.Length12($nw) == n#0;
    $Heap := update($Heap, $nw, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    has13#0 := $nw;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/comp/BuiltIns.dfy(69,13)
    assume true;
    assert {:id "id162"} 0 <= n#0;
    assert {:id "id163"} 0 <= n#0;
    assert {:id "id164"} 0 <= n#0;
    assert {:id "id165"} 0 <= n#0;
    assert {:id "id166"} 0 <= n#0;
    assert {:id "id167"} 0 <= n#0;
    assert {:id "id168"} 0 <= n#0;
    assert {:id "id169"} 0 <= n#0;
    assert {:id "id170"} 0 <= n#0;
    assert {:id "id171"} 0 <= n#0;
    assert {:id "id172"} 0 <= n#0;
    assert {:id "id173"} 0 <= n#0;
    assert {:id "id174"} 0 <= n#0;
    assert {:id "id175"} 0 <= n#0;
    havoc $nw;
    assume $nw != null && $Is($nw, Tclass._System.array14?(TBool));
    assume !$Unbox(read($Heap, $nw, alloc)): bool;
    assume _System.array14.Length0($nw) == n#0;
    assume _System.array14.Length1($nw) == n#0;
    assume _System.array14.Length2($nw) == n#0;
    assume _System.array14.Length3($nw) == n#0;
    assume _System.array14.Length4($nw) == n#0;
    assume _System.array14.Length5($nw) == n#0;
    assume _System.array14.Length6($nw) == n#0;
    assume _System.array14.Length7($nw) == n#0;
    assume _System.array14.Length8($nw) == n#0;
    assume _System.array14.Length9($nw) == n#0;
    assume _System.array14.Length10($nw) == n#0;
    assume _System.array14.Length11($nw) == n#0;
    assume _System.array14.Length12($nw) == n#0;
    assume _System.array14.Length13($nw) == n#0;
    $Heap := update($Heap, $nw, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    has14#0 := $nw;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/comp/BuiltIns.dfy(70,13)
    assume true;
    assert {:id "id177"} 0 <= n#0;
    assert {:id "id178"} 0 <= n#0;
    assert {:id "id179"} 0 <= n#0;
    assert {:id "id180"} 0 <= n#0;
    assert {:id "id181"} 0 <= n#0;
    assert {:id "id182"} 0 <= n#0;
    assert {:id "id183"} 0 <= n#0;
    assert {:id "id184"} 0 <= n#0;
    assert {:id "id185"} 0 <= n#0;
    assert {:id "id186"} 0 <= n#0;
    assert {:id "id187"} 0 <= n#0;
    assert {:id "id188"} 0 <= n#0;
    assert {:id "id189"} 0 <= n#0;
    assert {:id "id190"} 0 <= n#0;
    assert {:id "id191"} 0 <= n#0;
    havoc $nw;
    assume $nw != null && $Is($nw, Tclass._System.array15?(TBool));
    assume !$Unbox(read($Heap, $nw, alloc)): bool;
    assume _System.array15.Length0($nw) == n#0;
    assume _System.array15.Length1($nw) == n#0;
    assume _System.array15.Length2($nw) == n#0;
    assume _System.array15.Length3($nw) == n#0;
    assume _System.array15.Length4($nw) == n#0;
    assume _System.array15.Length5($nw) == n#0;
    assume _System.array15.Length6($nw) == n#0;
    assume _System.array15.Length7($nw) == n#0;
    assume _System.array15.Length8($nw) == n#0;
    assume _System.array15.Length9($nw) == n#0;
    assume _System.array15.Length10($nw) == n#0;
    assume _System.array15.Length11($nw) == n#0;
    assume _System.array15.Length12($nw) == n#0;
    assume _System.array15.Length13($nw) == n#0;
    assume _System.array15.Length14($nw) == n#0;
    $Heap := update($Heap, $nw, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    has15#0 := $nw;
    // ----- assignment statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/comp/BuiltIns.dfy(71,13)
    assume true;
    assert {:id "id193"} 0 <= n#0;
    assert {:id "id194"} 0 <= n#0;
    assert {:id "id195"} 0 <= n#0;
    assert {:id "id196"} 0 <= n#0;
    assert {:id "id197"} 0 <= n#0;
    assert {:id "id198"} 0 <= n#0;
    assert {:id "id199"} 0 <= n#0;
    assert {:id "id200"} 0 <= n#0;
    assert {:id "id201"} 0 <= n#0;
    assert {:id "id202"} 0 <= n#0;
    assert {:id "id203"} 0 <= n#0;
    assert {:id "id204"} 0 <= n#0;
    assert {:id "id205"} 0 <= n#0;
    assert {:id "id206"} 0 <= n#0;
    assert {:id "id207"} 0 <= n#0;
    assert {:id "id208"} 0 <= n#0;
    havoc $nw;
    assume $nw != null && $Is($nw, Tclass._System.array16?(TBool));
    assume !$Unbox(read($Heap, $nw, alloc)): bool;
    assume _System.array16.Length0($nw) == n#0;
    assume _System.array16.Length1($nw) == n#0;
    assume _System.array16.Length2($nw) == n#0;
    assume _System.array16.Length3($nw) == n#0;
    assume _System.array16.Length4($nw) == n#0;
    assume _System.array16.Length5($nw) == n#0;
    assume _System.array16.Length6($nw) == n#0;
    assume _System.array16.Length7($nw) == n#0;
    assume _System.array16.Length8($nw) == n#0;
    assume _System.array16.Length9($nw) == n#0;
    assume _System.array16.Length10($nw) == n#0;
    assume _System.array16.Length11($nw) == n#0;
    assume _System.array16.Length12($nw) == n#0;
    assume _System.array16.Length13($nw) == n#0;
    assume _System.array16.Length14($nw) == n#0;
    assume _System.array16.Length15($nw) == n#0;
    $Heap := update($Heap, $nw, alloc, $Box(true));
    assume $IsGoodHeap($Heap);
    assume $IsHeapAnchor($Heap);
    has16#0 := $nw;
}



procedure {:verboseName "Main (well-formedness)"} CheckWellFormed$$_module.__default.Main();
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;



procedure {:verboseName "Main (call)"} Call$$_module.__default.Main();
  modifies $Heap;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



procedure {:verboseName "Main (correctness)"} Impl$$_module.__default.Main() returns ($_reverifyPost: bool);
  free requires 2 == $FunctionContextHeight;
  modifies $Heap;
  // frame condition: object granularity
  free ensures (forall $o: ref :: 
    { $Heap[$o] } 
    $o != null && $Unbox(read(old($Heap), $o, alloc)): bool
       ==> $Heap[$o] == old($Heap)[$o]);
  // boilerplate
  free ensures $HeapSucc(old($Heap), $Heap);



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "Main (correctness)"} Impl$$_module.__default.Main() returns ($_reverifyPost: bool)
{
  var $_ModifiesFrame: [ref,Field]bool;

    // AddMethodImpl: Main, Impl$$_module.__default.Main
    $_ModifiesFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    $_reverifyPost := false;
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/comp/BuiltIns.dfy(75,12)
    // TrCallStmt: Before ProcessCallStmt
    call {:id "id210"} Call$$_module.__default.HasTuples();
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/comp/BuiltIns.dfy(76,12)
    // TrCallStmt: Before ProcessCallStmt
    call {:id "id211"} Call$$_module.__default.HasArrows();
    // TrCallStmt: After ProcessCallStmt
    // ----- call statement ----- /home/runner/work/smt-logs/smt-logs/dafny/dafny/Source/IntegrationTests/TestFiles/LitTests/LitTest/comp/BuiltIns.dfy(77,12)
    // TrCallStmt: Before ProcessCallStmt
    call {:id "id212"} Call$$_module.__default.HasArrays();
    // TrCallStmt: After ProcessCallStmt
}



procedure {:verboseName "byte (well-formedness)"} CheckWellFormed$$_module.byte(x#0: int);
  free requires 0 == $FunctionContextHeight;
  modifies $Heap;



implementation {:smt_option "smt.arith.solver", "2"} {:verboseName "byte (well-formedness)"} CheckWellFormed$$_module.byte(x#0: int)
{
  var $_ReadsFrame: [ref,Field]bool;


    // AddWellformednessCheck for newtype byte
    $_ReadsFrame := (lambda $o: ref, $f: Field :: 
      $o != null && $Unbox(read($Heap, $o, alloc)): bool ==> false);
    if (*)
    {
        // check well-formedness of newtype constraint
        if (LitInt(0) <= x#0)
        {
        }

        assume {:id "id213"} LitInt(0) <= x#0 && x#0 < 256;
        assume false;
    }

    if (*)
    {
        // check well-formedness of newtype witness, and that it satisfies the constraint
        assume true;
        assert {:id "id214"} {:subsumption 0} LitInt(0) <= LitInt(0);
        assert {:id "id215"} {:subsumption 0} Lit(0 < 256);
        assume false;
    }
}



function Tclass._module.byte() : Ty
uses {
// Tclass._module.byte Tag
axiom Tag(Tclass._module.byte()) == Tagclass._module.byte
   && TagFamily(Tclass._module.byte()) == tytagFamily$byte;
}

const unique Tagclass._module.byte: TyTag;

// Box/unbox axiom for Tclass._module.byte
axiom (forall bx: Box :: 
  { $IsBox(bx, Tclass._module.byte()) } 
  $IsBox(bx, Tclass._module.byte())
     ==> $Box($Unbox(bx): int) == bx && $Is($Unbox(bx): int, Tclass._module.byte()));

// $Is axiom for newtype _module.byte
axiom (forall x#0: int :: 
  { $Is(x#0, Tclass._module.byte()) } 
  $Is(x#0, Tclass._module.byte()) <==> LitInt(0) <= x#0 && x#0 < 256);

// $IsAlloc axiom for newtype _module.byte
axiom (forall x#0: int, $h: Heap :: 
  { $IsAlloc(x#0, Tclass._module.byte(), $h) } 
  $IsAlloc(x#0, Tclass._module.byte(), $h));

const unique class._module.byte: ClassName;

const unique tytagFamily$nat: TyTagFamily;

const unique tytagFamily$object: TyTagFamily;

const unique tytagFamily$array: TyTagFamily;

const unique tytagFamily$_#Func1: TyTagFamily;

const unique tytagFamily$_#PartialFunc1: TyTagFamily;

const unique tytagFamily$_#TotalFunc1: TyTagFamily;

const unique tytagFamily$_#Func0: TyTagFamily;

const unique tytagFamily$_#PartialFunc0: TyTagFamily;

const unique tytagFamily$_#TotalFunc0: TyTagFamily;

const unique tytagFamily$_tuple#2: TyTagFamily;

const unique tytagFamily$_tuple#0: TyTagFamily;

const unique tytagFamily$_tuple#2OG: TyTagFamily;

const unique tytagFamily$_tuple#3: TyTagFamily;

const unique tytagFamily$_tuple#4: TyTagFamily;

const unique tytagFamily$_tuple#5: TyTagFamily;

const unique tytagFamily$_tuple#6: TyTagFamily;

const unique tytagFamily$_tuple#7: TyTagFamily;

const unique tytagFamily$_tuple#8: TyTagFamily;

const unique tytagFamily$_tuple#9: TyTagFamily;

const unique tytagFamily$_tuple#10: TyTagFamily;

const unique tytagFamily$_tuple#11: TyTagFamily;

const unique tytagFamily$_tuple#12: TyTagFamily;

const unique tytagFamily$_tuple#13: TyTagFamily;

const unique tytagFamily$_tuple#14: TyTagFamily;

const unique tytagFamily$_tuple#15: TyTagFamily;

const unique tytagFamily$_tuple#16: TyTagFamily;

const unique tytagFamily$_tuple#17: TyTagFamily;

const unique tytagFamily$_tuple#18: TyTagFamily;

const unique tytagFamily$_tuple#19: TyTagFamily;

const unique tytagFamily$_tuple#20: TyTagFamily;

const unique tytagFamily$_#Func2: TyTagFamily;

const unique tytagFamily$_#PartialFunc2: TyTagFamily;

const unique tytagFamily$_#TotalFunc2: TyTagFamily;

const unique tytagFamily$_#Func3: TyTagFamily;

const unique tytagFamily$_#PartialFunc3: TyTagFamily;

const unique tytagFamily$_#TotalFunc3: TyTagFamily;

const unique tytagFamily$_#Func4: TyTagFamily;

const unique tytagFamily$_#PartialFunc4: TyTagFamily;

const unique tytagFamily$_#TotalFunc4: TyTagFamily;

const unique tytagFamily$_#Func5: TyTagFamily;

const unique tytagFamily$_#PartialFunc5: TyTagFamily;

const unique tytagFamily$_#TotalFunc5: TyTagFamily;

const unique tytagFamily$_#Func6: TyTagFamily;

const unique tytagFamily$_#PartialFunc6: TyTagFamily;

const unique tytagFamily$_#TotalFunc6: TyTagFamily;

const unique tytagFamily$_#Func7: TyTagFamily;

const unique tytagFamily$_#PartialFunc7: TyTagFamily;

const unique tytagFamily$_#TotalFunc7: TyTagFamily;

const unique tytagFamily$_#Func8: TyTagFamily;

const unique tytagFamily$_#PartialFunc8: TyTagFamily;

const unique tytagFamily$_#TotalFunc8: TyTagFamily;

const unique tytagFamily$_#Func9: TyTagFamily;

const unique tytagFamily$_#PartialFunc9: TyTagFamily;

const unique tytagFamily$_#TotalFunc9: TyTagFamily;

const unique tytagFamily$_#Func10: TyTagFamily;

const unique tytagFamily$_#PartialFunc10: TyTagFamily;

const unique tytagFamily$_#TotalFunc10: TyTagFamily;

const unique tytagFamily$_#Func11: TyTagFamily;

const unique tytagFamily$_#PartialFunc11: TyTagFamily;

const unique tytagFamily$_#TotalFunc11: TyTagFamily;

const unique tytagFamily$_#Func12: TyTagFamily;

const unique tytagFamily$_#PartialFunc12: TyTagFamily;

const unique tytagFamily$_#TotalFunc12: TyTagFamily;

const unique tytagFamily$_#Func13: TyTagFamily;

const unique tytagFamily$_#PartialFunc13: TyTagFamily;

const unique tytagFamily$_#TotalFunc13: TyTagFamily;

const unique tytagFamily$_#Func14: TyTagFamily;

const unique tytagFamily$_#PartialFunc14: TyTagFamily;

const unique tytagFamily$_#TotalFunc14: TyTagFamily;

const unique tytagFamily$_#Func15: TyTagFamily;

const unique tytagFamily$_#PartialFunc15: TyTagFamily;

const unique tytagFamily$_#TotalFunc15: TyTagFamily;

const unique tytagFamily$_#Func16: TyTagFamily;

const unique tytagFamily$_#PartialFunc16: TyTagFamily;

const unique tytagFamily$_#TotalFunc16: TyTagFamily;

const unique tytagFamily$array2: TyTagFamily;

const unique tytagFamily$array3: TyTagFamily;

const unique tytagFamily$array4: TyTagFamily;

const unique tytagFamily$array5: TyTagFamily;

const unique tytagFamily$array6: TyTagFamily;

const unique tytagFamily$array7: TyTagFamily;

const unique tytagFamily$array8: TyTagFamily;

const unique tytagFamily$array9: TyTagFamily;

const unique tytagFamily$array10: TyTagFamily;

const unique tytagFamily$array11: TyTagFamily;

const unique tytagFamily$array12: TyTagFamily;

const unique tytagFamily$array13: TyTagFamily;

const unique tytagFamily$array14: TyTagFamily;

const unique tytagFamily$array15: TyTagFamily;

const unique tytagFamily$array16: TyTagFamily;

const unique tytagFamily$byte: TyTagFamily;
