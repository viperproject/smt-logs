(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.array2? () T@U)
(declare-fun Tagclass._System.array2 () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._module.short () T@U)
(declare-fun Tagclass._module.Cell () T@U)
(declare-fun Tagclass._module.Cell? () T@U)
(declare-fun class._module.Cell? () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun tytagFamily$array2 () T@U)
(declare-fun |tytagFamily$_#Func2| () T@U)
(declare-fun tytagFamily$short () T@U)
(declare-fun tytagFamily$Cell () T@U)
(declare-fun field$arr () T@U)
(declare-fun field$mat () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun SetType () T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun _System.array2.Length0 (T@U) Int)
(declare-fun Tclass._System.array2? (T@U) T@U)
(declare-fun _System.array2.Length1 (T@U) Int)
(declare-fun |lambda#29| (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun MapType2Select (T@T T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun |lambda#20| (T@U T@U) T@U)
(declare-fun MapType2Store (T@T T@T T@T T@T T@U T@U T@U T@U T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.Cell.FArray (T@U T@U T@U) T@U)
(declare-fun |_module.Cell.FArray#canCall| (T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Tclass._module.Cell (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.nat () T@U)
(declare-fun Tclass._module.short () T@U)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.array2 (T@U) T@U)
(declare-fun Tclass._module.Cell? (T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun _module.Cell.arr () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _module.Cell.mat () T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $OneHeap () T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun TSet (T@U) T@U)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun _module.Cell.crr (T@U T@U) T@U)
(declare-fun AtLayer (T@T T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#7| (Bool) T@U)
(declare-fun |lambda#9| (T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.array2?_0 (T@U) T@U)
(declare-fun Tclass._System.array2_0 (T@U) T@U)
(declare-fun Tclass._module.Cell_0 (T@U) T@U)
(declare-fun Tclass._module.Cell?_0 (T@U) T@U)
(declare-fun |lambda#22| (T@U) T@U)
(declare-fun |lambda#58| (T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun |lambda#48| () T@U)
(declare-fun |lambda#8| (T@U) T@U)
(declare-fun |lambda#28| (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TInt TReal TagBool TagInt TagReal TagSet alloc allocName Tagclass._System.nat Tagclass._System.object? Tagclass._System.object Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc1 Tagclass._System.array2? Tagclass._System.array2 Tagclass._System.___hFunc2 Tagclass._module.short Tagclass._module.Cell Tagclass._module.Cell? class._module.Cell? tytagFamily$nat tytagFamily$object tytagFamily$array |tytagFamily$_#Func1| tytagFamily$array2 |tytagFamily$_#Func2| tytagFamily$short tytagFamily$Cell field$arr field$mat)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (= (DeclName alloc) allocName))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 3))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (= (Ctor SetType) 7)))
(assert (forall ((t0@@1 T@U) (t1@@1 T@U) (heap T@U) (h T@U) (r T@U) (rd T@U) (bx0 T@U) (bx T@U) ) (! (= (|Set#IsMember| (Reads1 t0@@1 t1@@1 heap (Handle1 h r rd) bx0) bx) (|Set#IsMember| (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType rd heap bx0) bx))
 :pattern ( (|Set#IsMember| (Reads1 t0@@1 t1@@1 heap (Handle1 h r rd) bx0) bx))
)))
(assert (forall ((_System.array$arg T@U) ($o T@U) ) (!  (=> (and (or (not (= $o null)) (not true)) (= (dtype $o) (Tclass._System.array? _System.array$arg))) ($Is intType (int_2_U (_System.array.Length $o)) TInt))
 :pattern ( (_System.array.Length $o) (Tclass._System.array? _System.array$arg))
)))
(assert (forall ((_System.array2$arg T@U) ($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (= (dtype $o@@0) (Tclass._System.array2? _System.array2$arg))) ($Is intType (int_2_U (_System.array2.Length0 $o@@0)) TInt))
 :pattern ( (_System.array2.Length0 $o@@0) (Tclass._System.array2? _System.array2$arg))
)))
(assert (forall ((_System.array2$arg@@0 T@U) ($o@@1 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (= (dtype $o@@1) (Tclass._System.array2? _System.array2$arg@@0))) ($Is intType (int_2_U (_System.array2.Length1 $o@@1)) TInt))
 :pattern ( (_System.array2.Length1 $o@@1) (Tclass._System.array2? _System.array2$arg@@0))
)))
(assert (forall ((|l#0| T@U) (|$l#1#heap#0| T@U) (|$l#1#_v3#0| T@U) ) (! (= (U_2_bool (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType (|lambda#29| |l#0|) |$l#1#heap#0| |$l#1#_v3#0|)) ($IsBox |$l#1#_v3#0| |l#0|))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType (|lambda#29| |l#0|) |$l#1#heap#0| |$l#1#_v3#0|))
)))
(assert  (and (forall ((t0@@2 T@T) (t1@@2 T@T) (t2@@0 T@T) (t3 T@T) (val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (x1@@2 T@U) (x2 T@U) ) (! (= (MapType2Select t0@@2 t1@@2 t2@@0 t3 (MapType2Store t0@@2 t1@@2 t2@@0 t3 m@@4 x0@@4 x1@@2 x2 val@@4) x0@@4 x1@@2 x2) val@@4)
 :weight 0
)) (and (and (forall ((u0@@2 T@T) (u1@@2 T@T) (u2@@1 T@T) (u3 T@T) (val@@5 T@U) (m@@5 T@U) (x0@@5 T@U) (x1@@3 T@U) (x2@@0 T@U) (y0@@2 T@U) (y1@@1 T@U) (y2 T@U) ) (!  (or (= x0@@5 y0@@2) (= (MapType2Select u0@@2 u1@@2 u2@@1 u3 (MapType2Store u0@@2 u1@@2 u2@@1 u3 m@@5 x0@@5 x1@@3 x2@@0 val@@5) y0@@2 y1@@1 y2) (MapType2Select u0@@2 u1@@2 u2@@1 u3 m@@5 y0@@2 y1@@1 y2)))
 :weight 0
)) (forall ((u0@@3 T@T) (u1@@3 T@T) (u2@@2 T@T) (u3@@0 T@T) (val@@6 T@U) (m@@6 T@U) (x0@@6 T@U) (x1@@4 T@U) (x2@@1 T@U) (y0@@3 T@U) (y1@@2 T@U) (y2@@0 T@U) ) (!  (or (= x1@@4 y1@@2) (= (MapType2Select u0@@3 u1@@3 u2@@2 u3@@0 (MapType2Store u0@@3 u1@@3 u2@@2 u3@@0 m@@6 x0@@6 x1@@4 x2@@1 val@@6) y0@@3 y1@@2 y2@@0) (MapType2Select u0@@3 u1@@3 u2@@2 u3@@0 m@@6 y0@@3 y1@@2 y2@@0)))
 :weight 0
))) (forall ((u0@@4 T@T) (u1@@4 T@T) (u2@@3 T@T) (u3@@1 T@T) (val@@7 T@U) (m@@7 T@U) (x0@@7 T@U) (x1@@5 T@U) (x2@@2 T@U) (y0@@4 T@U) (y1@@3 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType2Select u0@@4 u1@@4 u2@@3 u3@@1 (MapType2Store u0@@4 u1@@4 u2@@3 u3@@1 m@@7 x0@@7 x1@@5 x2@@2 val@@7) y0@@4 y1@@3 y2@@1) (MapType2Select u0@@4 u1@@4 u2@@3 u3@@1 m@@7 y0@@4 y1@@3 y2@@1)))
 :weight 0
)))))
(assert (forall ((|l#0@@0| T@U) (|l#1| T@U) (|$l#0#heap#0| T@U) (|$l#0#x#0| T@U) (|$l#0#y#0| T@U) ) (! (= (U_2_bool (MapType2Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType boolType (|lambda#20| |l#0@@0| |l#1|) |$l#0#heap#0| |$l#0#x#0| |$l#0#y#0|))  (and ($IsBox |$l#0#x#0| |l#0@@0|) ($IsBox |$l#0#y#0| |l#1|)))
 :pattern ( (MapType2Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType boolType (|lambda#20| |l#0@@0| |l#1|) |$l#0#heap#0| |$l#0#x#0| |$l#0#y#0|))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module.Cell$T T@U) ($Heap T@U) (this T@U) ) (!  (=> (or (|_module.Cell.FArray#canCall| _module.Cell$T $Heap this) (and (< 0 $FunctionContextHeight) (and ($IsGoodHeap $Heap) (and (or (not (= this null)) (not true)) (and ($Is refType this (Tclass._module.Cell _module.Cell$T)) ($IsAlloc refType this (Tclass._module.Cell _module.Cell$T) $Heap)))))) ($Is refType (_module.Cell.FArray _module.Cell$T $Heap this) (Tclass._System.array _module.Cell$T)))
 :pattern ( (_module.Cell.FArray _module.Cell$T $Heap this))
))))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert (forall ((|x#0@@0| T@U) ($h@@0 T@U) ) (! ($IsAlloc intType |x#0@@0| Tclass._module.short $h@@0)
 :pattern ( ($IsAlloc intType |x#0@@0| Tclass._module.short $h@@0))
)))
(assert (forall ((|#$T0| T@U) (|#$T1| T@U) (|#$R| T@U) ) (! (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R|)) |#$T0|)
 :pattern ( (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R|))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$T1@@0| T@U) (|#$R@@0| T@U) ) (! (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@0|)) |#$T1@@0|)
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@0|))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$T1@@1| T@U) (|#$R@@1| T@U) ) (! (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@1|)) |#$R@@1|)
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@1|))
)))
(assert (forall ((_System.array$arg@@0 T@U) (|c#0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h@@1) ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h@@1))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg@@0) $h@@1))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg@@0) $h@@1))
)))
(assert (forall ((_System.array2$arg@@1 T@U) (|c#0@@0| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType |c#0@@0| (Tclass._System.array2 _System.array2$arg@@1) $h@@2) ($IsAlloc refType |c#0@@0| (Tclass._System.array2? _System.array2$arg@@1) $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@0| (Tclass._System.array2 _System.array2$arg@@1) $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@0| (Tclass._System.array2? _System.array2$arg@@1) $h@@2))
)))
(assert (forall ((_module.Cell$T@@0 T@U) (|c#0@@1| T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType |c#0@@1| (Tclass._module.Cell _module.Cell$T@@0) $h@@3) ($IsAlloc refType |c#0@@1| (Tclass._module.Cell? _module.Cell$T@@0) $h@@3))
 :pattern ( ($IsAlloc refType |c#0@@1| (Tclass._module.Cell _module.Cell$T@@0) $h@@3))
 :pattern ( ($IsAlloc refType |c#0@@1| (Tclass._module.Cell? _module.Cell$T@@0) $h@@3))
)))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$T1@@2| T@U) (|#$R@@2| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@2|)) Tagclass._System.___hFunc2) (= (TagFamily (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@2|)) |tytagFamily$_#Func2|))
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@2|))
)))
(assert (= (Ctor HandleTypeType) 8))
(assert (forall ((|#$T0@@3| T@U) (|#$T1@@3| T@U) (|#$R@@3| T@U) (bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@3|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@0)) bx@@0) ($Is HandleTypeType ($Unbox HandleTypeType bx@@0) (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@3|))))
 :pattern ( ($IsBox bx@@0 (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@3|)))
)))
(assert (forall ((f T@U) (t0@@3 T@U) (t1@@3 T@U) (u0@@5 T@U) (u1@@5 T@U) ) (!  (=> (and (and ($Is HandleTypeType f (Tclass._System.___hFunc1 t0@@3 t1@@3)) (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 u0@@5) ($IsBox bx@@1 t0@@3))
 :pattern ( ($IsBox bx@@1 u0@@5))
 :pattern ( ($IsBox bx@@1 t0@@3))
))) (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 t1@@3) ($IsBox bx@@2 u1@@5))
 :pattern ( ($IsBox bx@@2 t1@@3))
 :pattern ( ($IsBox bx@@2 u1@@5))
))) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0@@5 u1@@5)))
 :pattern ( ($Is HandleTypeType f (Tclass._System.___hFunc1 t0@@3 t1@@3)) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0@@5 u1@@5)))
)))
(assert (forall ((|c#0@@2| T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType |c#0@@2| Tclass._System.object $h@@4) ($IsAlloc refType |c#0@@2| Tclass._System.object? $h@@4))
 :pattern ( ($IsAlloc refType |c#0@@2| Tclass._System.object $h@@4))
 :pattern ( ($IsAlloc refType |c#0@@2| Tclass._System.object? $h@@4))
)))
(assert (forall ((_module.Cell$T@@1 T@U) ($h0 T@U) ($h1 T@U) (this@@0 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (and (or (not (= this@@0 null)) (not true)) ($Is refType this@@0 (Tclass._module.Cell _module.Cell$T@@1)))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1))) (=> (forall (($o@@2 T@U) ($f T@U) )  (=> (and (or (not (= $o@@2 null)) (not true)) (= $o@@2 this@@0)) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h0 $o@@2) $f) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h1 $o@@2) $f)))) (= (_module.Cell.FArray _module.Cell$T@@1 $h0 this@@0) (_module.Cell.FArray _module.Cell$T@@1 $h1 this@@0))))
 :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (_module.Cell.FArray _module.Cell$T@@1 $h1 this@@0))
)))
(assert (forall ((_System.array$arg@@1 T@U) ($o@@3 T@U) ($h@@5 T@U) ) (! (= ($IsAlloc refType $o@@3 (Tclass._System.array? _System.array$arg@@1) $h@@5)  (or (= $o@@3 null) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@5 $o@@3) alloc)))))
 :pattern ( ($IsAlloc refType $o@@3 (Tclass._System.array? _System.array$arg@@1) $h@@5))
)))
(assert (forall ((_System.array2$arg@@2 T@U) ($o@@4 T@U) ($h@@6 T@U) ) (! (= ($IsAlloc refType $o@@4 (Tclass._System.array2? _System.array2$arg@@2) $h@@6)  (or (= $o@@4 null) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@6 $o@@4) alloc)))))
 :pattern ( ($IsAlloc refType $o@@4 (Tclass._System.array2? _System.array2$arg@@2) $h@@6))
)))
(assert (forall ((_module.Cell$T@@2 T@U) ($o@@5 T@U) ($h@@7 T@U) ) (! (= ($IsAlloc refType $o@@5 (Tclass._module.Cell? _module.Cell$T@@2) $h@@7)  (or (= $o@@5 null) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@7 $o@@5) alloc)))))
 :pattern ( ($IsAlloc refType $o@@5 (Tclass._module.Cell? _module.Cell$T@@2) $h@@7))
)))
(assert (= (FDim _module.Cell.arr) 0))
(assert (= (FieldOfDecl class._module.Cell? field$arr) _module.Cell.arr))
(assert  (not ($IsGhostField _module.Cell.arr)))
(assert (= (FDim _module.Cell.mat) 0))
(assert (= (FieldOfDecl class._module.Cell? field$mat) _module.Cell.mat))
(assert  (not ($IsGhostField _module.Cell.mat)))
(assert (forall (($o@@6 T@U) ($h@@8 T@U) ) (! (= ($IsAlloc refType $o@@6 Tclass._System.object? $h@@8)  (or (= $o@@6 null) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@8 $o@@6) alloc)))))
 :pattern ( ($IsAlloc refType $o@@6 Tclass._System.object? $h@@8))
)))
(assert (forall ((h@@0 T@U) (k T@U) ) (!  (=> ($HeapSucc h@@0 k) (forall ((o@@0 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@0 o@@0) alloc))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) k o@@0) alloc))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) k o@@0) alloc))
)))
 :pattern ( ($HeapSucc h@@0 k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((t0@@4 T@U) (t1@@4 T@U) (heap@@0 T@U) (f@@0 T@U) (bx0@@0 T@U) ) (!  (=> (and ($IsGoodHeap heap@@0) (and ($IsBox bx0@@0 t0@@4) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 t0@@4 t1@@4)))) (= (|Set#Equal| (Reads1 t0@@4 t1@@4 $OneHeap f@@0 bx0@@0) |Set#Empty|) (|Set#Equal| (Reads1 t0@@4 t1@@4 heap@@0 f@@0 bx0@@0) |Set#Empty|)))
 :pattern ( (Reads1 t0@@4 t1@@4 $OneHeap f@@0 bx0@@0) ($IsGoodHeap heap@@0))
 :pattern ( (Reads1 t0@@4 t1@@4 heap@@0 f@@0 bx0@@0))
)))
(assert (forall ((t0@@5 T@U) (t1@@5 T@U) (t2@@1 T@U) (heap@@1 T@U) (h@@1 T@U) (r@@0 T@U) (rd@@0 T@U) (bx0@@1 T@U) (bx1 T@U) (bx@@3 T@U) ) (! (= (|Set#IsMember| (Reads2 t0@@5 t1@@5 t2@@1 heap@@1 (Handle2 h@@1 r@@0 rd@@0) bx0@@1 bx1) bx@@3) (|Set#IsMember| (MapType2Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType SetType rd@@0 heap@@1 bx0@@1 bx1) bx@@3))
 :pattern ( (|Set#IsMember| (Reads2 t0@@5 t1@@5 t2@@1 heap@@1 (Handle2 h@@1 r@@0 rd@@0) bx0@@1 bx1) bx@@3))
)))
(assert (forall ((_System.array$arg@@2 T@U) ($h@@9 T@U) ($o@@7 T@U) ($i0 Int) ) (!  (=> (and (and (and ($IsGoodHeap $h@@9) (and (or (not (= $o@@7 null)) (not true)) (= (dtype $o@@7) (Tclass._System.array? _System.array$arg@@2)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@7)))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@9 $o@@7) alloc)))) ($IsAllocBox (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@9 $o@@7) (IndexField $i0)) _System.array$arg@@2 $h@@9))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@9 $o@@7) (IndexField $i0)) (Tclass._System.array? _System.array$arg@@2))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((t0@@6 T@U) (t1@@6 T@U) (h0 T@U) (h1 T@U) (f@@1 T@U) (bx0@@2 T@U) ) (!  (=> (and (and (and ($HeapSucc h0 h1) (and ($IsGoodHeap h0) ($IsGoodHeap h1))) (and ($IsBox bx0@@2 t0@@6) ($Is HandleTypeType f@@1 (Tclass._System.___hFunc1 t0@@6 t1@@6)))) (forall ((o@@1 T@U) (fld T@U) )  (=> (and (or (not (= o@@1 null)) (not true)) (|Set#IsMember| (Reads1 t0@@6 t1@@6 h0 f@@1 bx0@@2) ($Box refType o@@1))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0 o@@1) fld) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1 o@@1) fld))))) (= (Requires1 t0@@6 t1@@6 h0 f@@1 bx0@@2) (Requires1 t0@@6 t1@@6 h1 f@@1 bx0@@2)))
 :pattern ( ($HeapSucc h0 h1) (Requires1 t0@@6 t1@@6 h1 f@@1 bx0@@2))
)))
(assert (forall ((t0@@7 T@U) (t1@@7 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@2 T@U) (bx0@@3 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) (and ($IsBox bx0@@3 t0@@7) ($Is HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@7 t1@@7)))) (forall ((o@@2 T@U) (fld@@0 T@U) )  (=> (and (or (not (= o@@2 null)) (not true)) (|Set#IsMember| (Reads1 t0@@7 t1@@7 h1@@0 f@@2 bx0@@3) ($Box refType o@@2))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@0 o@@2) fld@@0) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@0 o@@2) fld@@0))))) (= (Requires1 t0@@7 t1@@7 h0@@0 f@@2 bx0@@3) (Requires1 t0@@7 t1@@7 h1@@0 f@@2 bx0@@3)))
 :pattern ( ($HeapSucc h0@@0 h1@@0) (Requires1 t0@@7 t1@@7 h1@@0 f@@2 bx0@@3))
)))
(assert (forall ((v T@U) (t0@@8 T@U) ) (! (= ($Is SetType v (TSet t0@@8)) (forall ((bx@@4 T@U) ) (!  (=> (|Set#IsMember| v bx@@4) ($IsBox bx@@4 t0@@8))
 :pattern ( (|Set#IsMember| v bx@@4))
)))
 :pattern ( ($Is SetType v (TSet t0@@8)))
)))
(assert (forall ((f@@3 T@U) (i Int) ) (! (= (FDim (MultiIndexField f@@3 i)) (+ (FDim f@@3) 1))
 :pattern ( (MultiIndexField f@@3 i))
)))
(assert  (=> (< 0 $FunctionContextHeight) (forall ((_module.Cell$T@@3 T@U) ($o@@8 T@U) ) (!  (=> (and (or (not (= $o@@8 null)) (not true)) (= (dtype $o@@8) (Tclass._module.Cell? _module.Cell$T@@3))) ($Is refType (_module.Cell.crr _module.Cell$T@@3 $o@@8) (Tclass._System.array _module.Cell$T@@3)))
 :pattern ( (_module.Cell.crr _module.Cell$T@@3 $o@@8))
))))
(assert (= (Ctor LayerTypeType) 9))
(assert (forall ((f@@4 T@U) (ly T@U) (A T@T) ) (! (= (AtLayer A f@@4 ly) (MapType1Select LayerTypeType A f@@4 ly))
 :pattern ( (AtLayer A f@@4 ly))
)))
(assert (forall ((|x#0@@1| T@U) ) (! (= ($Is intType |x#0@@1| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@1|)))
 :pattern ( ($Is intType |x#0@@1| Tclass._System.nat))
)))
(assert ($IsGhostField alloc))
(assert ($IsGoodHeap $OneHeap))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module.Cell$T@@4 T@U) ($Heap@@0 T@U) (this@@1 T@U) ) (!  (=> (or (|_module.Cell.FArray#canCall| _module.Cell$T@@4 $Heap@@0 this@@1) (and (< 0 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@0) (or (not (= this@@1 null)) (not true))) ($IsAlloc refType this@@1 (Tclass._module.Cell _module.Cell$T@@4) $Heap@@0)))) ($IsAlloc refType (_module.Cell.FArray _module.Cell$T@@4 $Heap@@0 this@@1) (Tclass._System.array _module.Cell$T@@4) $Heap@@0))
 :pattern ( ($IsAlloc refType (_module.Cell.FArray _module.Cell$T@@4 $Heap@@0 this@@1) (Tclass._System.array _module.Cell$T@@4) $Heap@@0))
))))
(assert (forall ((_System.array$arg@@3 T@U) (|c#0@@3| T@U) ) (! (= ($Is refType |c#0@@3| (Tclass._System.array _System.array$arg@@3))  (and ($Is refType |c#0@@3| (Tclass._System.array? _System.array$arg@@3)) (or (not (= |c#0@@3| null)) (not true))))
 :pattern ( ($Is refType |c#0@@3| (Tclass._System.array _System.array$arg@@3)))
 :pattern ( ($Is refType |c#0@@3| (Tclass._System.array? _System.array$arg@@3)))
)))
(assert (forall ((_System.array2$arg@@3 T@U) (|c#0@@4| T@U) ) (! (= ($Is refType |c#0@@4| (Tclass._System.array2 _System.array2$arg@@3))  (and ($Is refType |c#0@@4| (Tclass._System.array2? _System.array2$arg@@3)) (or (not (= |c#0@@4| null)) (not true))))
 :pattern ( ($Is refType |c#0@@4| (Tclass._System.array2 _System.array2$arg@@3)))
 :pattern ( ($Is refType |c#0@@4| (Tclass._System.array2? _System.array2$arg@@3)))
)))
(assert (forall ((_module.Cell$T@@5 T@U) (|c#0@@5| T@U) ) (! (= ($Is refType |c#0@@5| (Tclass._module.Cell _module.Cell$T@@5))  (and ($Is refType |c#0@@5| (Tclass._module.Cell? _module.Cell$T@@5)) (or (not (= |c#0@@5| null)) (not true))))
 :pattern ( ($Is refType |c#0@@5| (Tclass._module.Cell _module.Cell$T@@5)))
 :pattern ( ($Is refType |c#0@@5| (Tclass._module.Cell? _module.Cell$T@@5)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h@@2 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@2) ($IsAlloc T@@1 v@@0 t h@@2))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@2))
)))
(assert (forall ((_System.array2$arg@@4 T@U) ($h@@10 T@U) ($o@@9 T@U) ($i0@@0 Int) ($i1 Int) ) (!  (=> (and (and (and ($IsGoodHeap $h@@10) (and (or (not (= $o@@9 null)) (not true)) (= (dtype $o@@9) (Tclass._System.array2? _System.array2$arg@@4)))) (and (and (<= 0 $i0@@0) (< $i0@@0 (_System.array2.Length0 $o@@9))) (and (<= 0 $i1) (< $i1 (_System.array2.Length1 $o@@9))))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@10 $o@@9) alloc)))) ($IsAllocBox (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@10 $o@@9) (MultiIndexField (IndexField $i0@@0) $i1)) _System.array2$arg@@4 $h@@10))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@10 $o@@9) (MultiIndexField (IndexField $i0@@0) $i1)) (Tclass._System.array2? _System.array2$arg@@4))
)))
(assert (forall ((t0@@9 T@U) (t1@@8 T@U) (t2@@2 T@U) (heap@@2 T@U) (h@@3 T@U) (r@@1 T@U) (rd@@1 T@U) (bx0@@4 T@U) (bx1@@0 T@U) ) (! (= (Apply2 t0@@9 t1@@8 t2@@2 heap@@2 (Handle2 h@@3 r@@1 rd@@1) bx0@@4 bx1@@0) (MapType2Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType BoxType h@@3 heap@@2 bx0@@4 bx1@@0))
 :pattern ( (Apply2 t0@@9 t1@@8 t2@@2 heap@@2 (Handle2 h@@3 r@@1 rd@@1) bx0@@4 bx1@@0))
)))
(assert (forall ((h@@4 T@U) (k@@0 T@U) (bx@@5 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@4 k@@0) (=> ($IsAllocBox bx@@5 t@@0 h@@4) ($IsAllocBox bx@@5 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@4 k@@0) ($IsAllocBox bx@@5 t@@0 h@@4))
)))
(assert (forall ((h@@5 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@5 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@1 h@@5) ($IsAlloc T@@2 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@5 k@@1) ($IsAlloc T@@2 v@@1 t@@1 h@@5))
)))
(assert (forall ((t0@@10 T@U) (t1@@9 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@5 T@U) (bx0@@5 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) (and ($IsBox bx0@@5 t0@@10) ($Is HandleTypeType f@@5 (Tclass._System.___hFunc1 t0@@10 t1@@9)))) (forall ((o@@3 T@U) (fld@@1 T@U) )  (=> (and (or (not (= o@@3 null)) (not true)) (|Set#IsMember| (Reads1 t0@@10 t1@@9 h0@@1 f@@5 bx0@@5) ($Box refType o@@3))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@1 o@@3) fld@@1) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@1 o@@3) fld@@1))))) (= (Reads1 t0@@10 t1@@9 h0@@1 f@@5 bx0@@5) (Reads1 t0@@10 t1@@9 h1@@1 f@@5 bx0@@5)))
 :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads1 t0@@10 t1@@9 h1@@1 f@@5 bx0@@5))
)))
(assert (forall ((t0@@11 T@U) (t1@@10 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@6 T@U) (bx0@@6 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) (and ($IsBox bx0@@6 t0@@11) ($Is HandleTypeType f@@6 (Tclass._System.___hFunc1 t0@@11 t1@@10)))) (forall ((o@@4 T@U) (fld@@2 T@U) )  (=> (and (or (not (= o@@4 null)) (not true)) (|Set#IsMember| (Reads1 t0@@11 t1@@10 h1@@2 f@@6 bx0@@6) ($Box refType o@@4))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@2 o@@4) fld@@2) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@2 o@@4) fld@@2))))) (= (Reads1 t0@@11 t1@@10 h0@@2 f@@6 bx0@@6) (Reads1 t0@@11 t1@@10 h1@@2 f@@6 bx0@@6)))
 :pattern ( ($HeapSucc h0@@2 h1@@2) (Reads1 t0@@11 t1@@10 h1@@2 f@@6 bx0@@6))
)))
(assert (forall ((t0@@12 T@U) (t1@@11 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@7 T@U) (bx0@@7 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) (and ($IsBox bx0@@7 t0@@12) ($Is HandleTypeType f@@7 (Tclass._System.___hFunc1 t0@@12 t1@@11)))) (forall ((o@@5 T@U) (fld@@3 T@U) )  (=> (and (or (not (= o@@5 null)) (not true)) (|Set#IsMember| (Reads1 t0@@12 t1@@11 h0@@3 f@@7 bx0@@7) ($Box refType o@@5))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@3 o@@5) fld@@3) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@3 o@@5) fld@@3))))) (= (Apply1 t0@@12 t1@@11 h0@@3 f@@7 bx0@@7) (Apply1 t0@@12 t1@@11 h1@@3 f@@7 bx0@@7)))
 :pattern ( ($HeapSucc h0@@3 h1@@3) (Apply1 t0@@12 t1@@11 h1@@3 f@@7 bx0@@7))
)))
(assert (forall ((t0@@13 T@U) (t1@@12 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@8 T@U) (bx0@@8 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) (and ($IsBox bx0@@8 t0@@13) ($Is HandleTypeType f@@8 (Tclass._System.___hFunc1 t0@@13 t1@@12)))) (forall ((o@@6 T@U) (fld@@4 T@U) )  (=> (and (or (not (= o@@6 null)) (not true)) (|Set#IsMember| (Reads1 t0@@13 t1@@12 h1@@4 f@@8 bx0@@8) ($Box refType o@@6))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@4 o@@6) fld@@4) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@4 o@@6) fld@@4))))) (= (Apply1 t0@@13 t1@@12 h0@@4 f@@8 bx0@@8) (Apply1 t0@@13 t1@@12 h1@@4 f@@8 bx0@@8)))
 :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply1 t0@@13 t1@@12 h1@@4 f@@8 bx0@@8))
)))
(assert (forall ((_System.array$arg@@4 T@U) ) (!  (and (= (Tag (Tclass._System.array? _System.array$arg@@4)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg@@4)) tytagFamily$array))
 :pattern ( (Tclass._System.array? _System.array$arg@@4))
)))
(assert (forall ((_System.array$arg@@5 T@U) ) (!  (and (= (Tag (Tclass._System.array _System.array$arg@@5)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@5)) tytagFamily$array))
 :pattern ( (Tclass._System.array _System.array$arg@@5))
)))
(assert (forall ((_System.array2$arg@@5 T@U) ) (!  (and (= (Tag (Tclass._System.array2? _System.array2$arg@@5)) Tagclass._System.array2?) (= (TagFamily (Tclass._System.array2? _System.array2$arg@@5)) tytagFamily$array2))
 :pattern ( (Tclass._System.array2? _System.array2$arg@@5))
)))
(assert (forall ((_System.array2$arg@@6 T@U) ) (!  (and (= (Tag (Tclass._System.array2 _System.array2$arg@@6)) Tagclass._System.array2) (= (TagFamily (Tclass._System.array2 _System.array2$arg@@6)) tytagFamily$array2))
 :pattern ( (Tclass._System.array2 _System.array2$arg@@6))
)))
(assert (forall ((_module.Cell$T@@6 T@U) ) (!  (and (= (Tag (Tclass._module.Cell _module.Cell$T@@6)) Tagclass._module.Cell) (= (TagFamily (Tclass._module.Cell _module.Cell$T@@6)) tytagFamily$Cell))
 :pattern ( (Tclass._module.Cell _module.Cell$T@@6))
)))
(assert (forall ((_module.Cell$T@@7 T@U) ) (!  (and (= (Tag (Tclass._module.Cell? _module.Cell$T@@7)) Tagclass._module.Cell?) (= (TagFamily (Tclass._module.Cell? _module.Cell$T@@7)) tytagFamily$Cell))
 :pattern ( (Tclass._module.Cell? _module.Cell$T@@7))
)))
(assert  (=> (< 0 $FunctionContextHeight) (forall ((_module.Cell$T@@8 T@U) ($h@@11 T@U) ($o@@10 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@11) (and (or (not (= $o@@10 null)) (not true)) (= (dtype $o@@10) (Tclass._module.Cell? _module.Cell$T@@8)))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@11 $o@@10) alloc)))) ($IsAlloc refType (_module.Cell.crr _module.Cell$T@@8 $o@@10) (Tclass._System.array _module.Cell$T@@8) $h@@11))
 :pattern ( (_module.Cell.crr _module.Cell$T@@8 $o@@10) ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@11 $o@@10) alloc)))
))))
(assert (forall ((_module.Cell$T@@9 T@U) ($h@@12 T@U) ($o@@11 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@12) (and (or (not (= $o@@11 null)) (not true)) (= (dtype $o@@11) (Tclass._module.Cell? _module.Cell$T@@9)))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@12 $o@@11) alloc)))) ($IsAlloc refType ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@12 $o@@11) _module.Cell.arr)) (Tclass._System.array _module.Cell$T@@9) $h@@12))
 :pattern ( ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@12 $o@@11) _module.Cell.arr)) (Tclass._module.Cell? _module.Cell$T@@9))
)))
(assert (forall ((_module.Cell$T@@10 T@U) ($h@@13 T@U) ($o@@12 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@13) (and (or (not (= $o@@12 null)) (not true)) (= (dtype $o@@12) (Tclass._module.Cell? _module.Cell$T@@10)))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@13 $o@@12) alloc)))) ($IsAlloc refType ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@13 $o@@12) _module.Cell.mat)) (Tclass._System.array2 _module.Cell$T@@10) $h@@13))
 :pattern ( ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@13 $o@@12) _module.Cell.mat)) (Tclass._module.Cell? _module.Cell$T@@10))
)))
(assert (forall ((s T@U) (bx@@6 T@U) ) (! (= (|Set#IsMember| (SetRef_to_SetBox s) bx@@6) (U_2_bool (MapType1Select refType boolType s ($Unbox refType bx@@6))))
 :pattern ( (|Set#IsMember| (SetRef_to_SetBox s) bx@@6))
)))
(assert (forall ((t0@@14 T@U) (t1@@13 T@U) (heap@@3 T@U) (h@@6 T@U) (r@@2 T@U) (rd@@2 T@U) (bx0@@9 T@U) ) (! (= (Apply1 t0@@14 t1@@13 heap@@3 (Handle1 h@@6 r@@2 rd@@2) bx0@@9) (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType h@@6 heap@@3 bx0@@9))
 :pattern ( (Apply1 t0@@14 t1@@13 heap@@3 (Handle1 h@@6 r@@2 rd@@2) bx0@@9))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx@@7)) bx@@7) ($Is intType ($Unbox intType bx@@7) Tclass._System.nat)))
 :pattern ( ($IsBox bx@@7 Tclass._System.nat))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@8)) bx@@8) ($Is refType ($Unbox refType bx@@8) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@8 Tclass._System.object?))
)))
(assert (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@9)) bx@@9) ($Is refType ($Unbox refType bx@@9) Tclass._System.object)))
 :pattern ( ($IsBox bx@@9 Tclass._System.object))
)))
(assert (forall ((bx@@10 T@U) ) (!  (=> ($IsBox bx@@10 Tclass._module.short) (and (= ($Box intType ($Unbox intType bx@@10)) bx@@10) ($Is intType ($Unbox intType bx@@10) Tclass._module.short)))
 :pattern ( ($IsBox bx@@10 Tclass._module.short))
)))
(assert (forall ((_System.array$arg@@6 T@U) ($o@@13 T@U) ) (! (= ($Is refType $o@@13 (Tclass._System.array? _System.array$arg@@6))  (or (= $o@@13 null) (= (dtype $o@@13) (Tclass._System.array? _System.array$arg@@6))))
 :pattern ( ($Is refType $o@@13 (Tclass._System.array? _System.array$arg@@6)))
)))
(assert (forall ((_System.array2$arg@@7 T@U) ($o@@14 T@U) ) (! (= ($Is refType $o@@14 (Tclass._System.array2? _System.array2$arg@@7))  (or (= $o@@14 null) (= (dtype $o@@14) (Tclass._System.array2? _System.array2$arg@@7))))
 :pattern ( ($Is refType $o@@14 (Tclass._System.array2? _System.array2$arg@@7)))
)))
(assert (forall ((_module.Cell$T@@11 T@U) ($o@@15 T@U) ) (! (= ($Is refType $o@@15 (Tclass._module.Cell? _module.Cell$T@@11))  (or (= $o@@15 null) (= (dtype $o@@15) (Tclass._module.Cell? _module.Cell$T@@11))))
 :pattern ( ($Is refType $o@@15 (Tclass._module.Cell? _module.Cell$T@@11)))
)))
(assert (forall ((|c#0@@6| T@U) ) (! (= ($Is refType |c#0@@6| Tclass._System.object)  (and ($Is refType |c#0@@6| Tclass._System.object?) (or (not (= |c#0@@6| null)) (not true))))
 :pattern ( ($Is refType |c#0@@6| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@6| Tclass._System.object?))
)))
(assert (forall ((f@@9 T@U) (t0@@15 T@U) (t1@@14 T@U) (t2@@3 T@U) (h@@7 T@U) ) (!  (=> ($IsGoodHeap h@@7) (= ($IsAlloc HandleTypeType f@@9 (Tclass._System.___hFunc2 t0@@15 t1@@14 t2@@3) h@@7) (forall ((bx0@@10 T@U) (bx1@@1 T@U) ) (!  (=> (and (and (and ($IsBox bx0@@10 t0@@15) ($IsAllocBox bx0@@10 t0@@15 h@@7)) (and ($IsBox bx1@@1 t1@@14) ($IsAllocBox bx1@@1 t1@@14 h@@7))) (Requires2 t0@@15 t1@@14 t2@@3 h@@7 f@@9 bx0@@10 bx1@@1)) (forall ((r@@3 T@U) ) (!  (=> (and (or (not (= r@@3 null)) (not true)) (|Set#IsMember| (Reads2 t0@@15 t1@@14 t2@@3 h@@7 f@@9 bx0@@10 bx1@@1) ($Box refType r@@3))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@7 r@@3) alloc))))
 :pattern ( (|Set#IsMember| (Reads2 t0@@15 t1@@14 t2@@3 h@@7 f@@9 bx0@@10 bx1@@1) ($Box refType r@@3)))
)))
 :pattern ( (Apply2 t0@@15 t1@@14 t2@@3 h@@7 f@@9 bx0@@10 bx1@@1))
 :pattern ( (Reads2 t0@@15 t1@@14 t2@@3 h@@7 f@@9 bx0@@10 bx1@@1))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@9 (Tclass._System.___hFunc2 t0@@15 t1@@14 t2@@3) h@@7))
)))
(assert (forall ((f@@10 T@U) (t0@@16 T@U) (t1@@15 T@U) (h@@8 T@U) ) (!  (=> (and ($IsGoodHeap h@@8) ($IsAlloc HandleTypeType f@@10 (Tclass._System.___hFunc1 t0@@16 t1@@15) h@@8)) (forall ((bx0@@11 T@U) ) (!  (=> (and ($IsAllocBox bx0@@11 t0@@16 h@@8) (Requires1 t0@@16 t1@@15 h@@8 f@@10 bx0@@11)) ($IsAllocBox (Apply1 t0@@16 t1@@15 h@@8 f@@10 bx0@@11) t1@@15 h@@8))
 :pattern ( (Apply1 t0@@16 t1@@15 h@@8 f@@10 bx0@@11))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@10 (Tclass._System.___hFunc1 t0@@16 t1@@15) h@@8))
)))
(assert (forall ((|l#0@@1| Bool) (|$l#0#o#0| T@U) ) (! (= (U_2_bool (MapType1Select refType boolType (|lambda#7| |l#0@@1|) |$l#0#o#0|)) |l#0@@1|)
 :pattern ( (MapType1Select refType boolType (|lambda#7| |l#0@@1|) |$l#0#o#0|))
)))
(assert (forall ((|l#0@@2| T@U) (|$l#0#ly#0| T@U) ) (! (= (MapType1Select LayerTypeType HandleTypeType (|lambda#9| |l#0@@2|) |$l#0#ly#0|) |l#0@@2|)
 :pattern ( (MapType1Select LayerTypeType HandleTypeType (|lambda#9| |l#0@@2|) |$l#0#ly#0|))
)))
(assert (forall ((f@@11 T@U) (t0@@17 T@U) (t1@@16 T@U) (t2@@4 T@U) ) (! (= ($Is HandleTypeType f@@11 (Tclass._System.___hFunc2 t0@@17 t1@@16 t2@@4)) (forall ((h@@9 T@U) (bx0@@12 T@U) (bx1@@2 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@9) (and ($IsBox bx0@@12 t0@@17) ($IsBox bx1@@2 t1@@16))) (Requires2 t0@@17 t1@@16 t2@@4 h@@9 f@@11 bx0@@12 bx1@@2)) ($IsBox (Apply2 t0@@17 t1@@16 t2@@4 h@@9 f@@11 bx0@@12 bx1@@2) t2@@4))
 :pattern ( (Apply2 t0@@17 t1@@16 t2@@4 h@@9 f@@11 bx0@@12 bx1@@2))
)))
 :pattern ( ($Is HandleTypeType f@@11 (Tclass._System.___hFunc2 t0@@17 t1@@16 t2@@4)))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Set#Equal| a b) (= a b))
 :pattern ( (|Set#Equal| a b))
)))
(assert (forall ((t0@@18 T@U) (t1@@17 T@U) (t2@@5 T@U) (heap@@4 T@U) (f@@12 T@U) (bx0@@13 T@U) (bx1@@3 T@U) ) (!  (=> (and ($IsGoodHeap heap@@4) (and (and ($IsBox bx0@@13 t0@@18) ($IsBox bx1@@3 t1@@17)) ($Is HandleTypeType f@@12 (Tclass._System.___hFunc2 t0@@18 t1@@17 t2@@5)))) (= (|Set#Equal| (Reads2 t0@@18 t1@@17 t2@@5 $OneHeap f@@12 bx0@@13 bx1@@3) |Set#Empty|) (|Set#Equal| (Reads2 t0@@18 t1@@17 t2@@5 heap@@4 f@@12 bx0@@13 bx1@@3) |Set#Empty|)))
 :pattern ( (Reads2 t0@@18 t1@@17 t2@@5 $OneHeap f@@12 bx0@@13 bx1@@3) ($IsGoodHeap heap@@4))
 :pattern ( (Reads2 t0@@18 t1@@17 t2@@5 heap@@4 f@@12 bx0@@13 bx1@@3))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (or (not (= a@@0 c)) (not true)) (=> (and ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c)) ($HeapSucc a@@0 c)))
 :pattern ( ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c))
)))
(assert (forall ((_System.array2$arg@@8 T@U) ($h@@14 T@U) ($o@@16 T@U) ($i0@@1 Int) ($i1@@0 Int) ) (!  (=> (and (and ($IsGoodHeap $h@@14) (and (or (not (= $o@@16 null)) (not true)) (= (dtype $o@@16) (Tclass._System.array2? _System.array2$arg@@8)))) (and (and (<= 0 $i0@@1) (< $i0@@1 (_System.array2.Length0 $o@@16))) (and (<= 0 $i1@@0) (< $i1@@0 (_System.array2.Length1 $o@@16))))) ($IsBox (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@14 $o@@16) (MultiIndexField (IndexField $i0@@1) $i1@@0)) _System.array2$arg@@8))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@14 $o@@16) (MultiIndexField (IndexField $i0@@1) $i1@@0)) (Tclass._System.array2? _System.array2$arg@@8))
)))
(assert (forall ((f@@13 T@U) (t0@@19 T@U) (t1@@18 T@U) ) (! (= ($Is HandleTypeType f@@13 (Tclass._System.___hFunc1 t0@@19 t1@@18)) (forall ((h@@10 T@U) (bx0@@14 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@10) ($IsBox bx0@@14 t0@@19)) (Requires1 t0@@19 t1@@18 h@@10 f@@13 bx0@@14)) ($IsBox (Apply1 t0@@19 t1@@18 h@@10 f@@13 bx0@@14) t1@@18))
 :pattern ( (Apply1 t0@@19 t1@@18 h@@10 f@@13 bx0@@14))
)))
 :pattern ( ($Is HandleTypeType f@@13 (Tclass._System.___hFunc1 t0@@19 t1@@18)))
)))
(assert (forall ((f@@14 T@U) (t0@@20 T@U) (t1@@19 T@U) (t2@@6 T@U) (h@@11 T@U) ) (!  (=> (and ($IsGoodHeap h@@11) ($IsAlloc HandleTypeType f@@14 (Tclass._System.___hFunc2 t0@@20 t1@@19 t2@@6) h@@11)) (forall ((bx0@@15 T@U) (bx1@@4 T@U) ) (!  (=> (and (and ($IsAllocBox bx0@@15 t0@@20 h@@11) ($IsAllocBox bx1@@4 t1@@19 h@@11)) (Requires2 t0@@20 t1@@19 t2@@6 h@@11 f@@14 bx0@@15 bx1@@4)) ($IsAllocBox (Apply2 t0@@20 t1@@19 t2@@6 h@@11 f@@14 bx0@@15 bx1@@4) t2@@6 h@@11))
 :pattern ( (Apply2 t0@@20 t1@@19 t2@@6 h@@11 f@@14 bx0@@15 bx1@@4))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@14 (Tclass._System.___hFunc2 t0@@20 t1@@19 t2@@6) h@@11))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@11 T@U) ) (!  (=> ($IsBox bx@@11 TInt) (and (= ($Box intType ($Unbox intType bx@@11)) bx@@11) ($Is intType ($Unbox intType bx@@11) TInt)))
 :pattern ( ($IsBox bx@@11 TInt))
)))
(assert (forall ((bx@@12 T@U) ) (!  (=> ($IsBox bx@@12 TReal) (and (= ($Box realType ($Unbox realType bx@@12)) bx@@12) ($Is realType ($Unbox realType bx@@12) TReal)))
 :pattern ( ($IsBox bx@@12 TReal))
)))
(assert (forall ((bx@@13 T@U) ) (!  (=> ($IsBox bx@@13 TBool) (and (= ($Box boolType ($Unbox boolType bx@@13)) bx@@13) ($Is boolType ($Unbox boolType bx@@13) TBool)))
 :pattern ( ($IsBox bx@@13 TBool))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@2) ($Is T@@3 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@2))
)))
(assert (forall ((t0@@21 T@U) (t1@@20 T@U) (heap@@5 T@U) (h@@12 T@U) (r@@4 T@U) (rd@@3 T@U) (bx0@@16 T@U) ) (!  (=> (U_2_bool (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType r@@4 heap@@5 bx0@@16)) (Requires1 t0@@21 t1@@20 heap@@5 (Handle1 h@@12 r@@4 rd@@3) bx0@@16))
 :pattern ( (Requires1 t0@@21 t1@@20 heap@@5 (Handle1 h@@12 r@@4 rd@@3) bx0@@16))
)))
(assert (forall ((o@@7 T@U) ) (! (<= 0 (_System.array.Length o@@7))
 :pattern ( (_System.array.Length o@@7))
)))
(assert (forall ((o@@8 T@U) ) (! (<= 0 (_System.array2.Length0 o@@8))
 :pattern ( (_System.array2.Length0 o@@8))
)))
(assert (forall ((o@@9 T@U) ) (! (<= 0 (_System.array2.Length1 o@@9))
 :pattern ( (_System.array2.Length1 o@@9))
)))
(assert (forall ((v@@3 T@U) (t0@@22 T@U) (h@@13 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@22) h@@13) (forall ((bx@@14 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@14) ($IsAllocBox bx@@14 t0@@22 h@@13))
 :pattern ( (|Set#IsMember| v@@3 bx@@14))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@22) h@@13))
)))
(assert (forall ((|#$T0@@4| T@U) (|#$R@@4| T@U) ) (! (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@4| |#$R@@4|)) |#$T0@@4|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@4| |#$R@@4|))
)))
(assert (forall ((|#$T0@@5| T@U) (|#$R@@5| T@U) ) (! (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@5| |#$R@@5|)) |#$R@@5|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@5| |#$R@@5|))
)))
(assert (forall (($o@@17 T@U) ) (! ($Is refType $o@@17 Tclass._System.object?)
 :pattern ( ($Is refType $o@@17 Tclass._System.object?))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((i@@0 Int) ) (! (= (FDim (IndexField i@@0)) 1)
 :pattern ( (IndexField i@@0))
)))
(assert (forall ((i@@1 Int) ) (! (= (IndexField_Inverse (IndexField i@@1)) i@@1)
 :pattern ( (IndexField i@@1))
)))
(assert (forall ((_System.array$arg@@7 T@U) ) (! (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@7)) _System.array$arg@@7)
 :pattern ( (Tclass._System.array? _System.array$arg@@7))
)))
(assert (forall ((_System.array$arg@@8 T@U) ) (! (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@8)) _System.array$arg@@8)
 :pattern ( (Tclass._System.array _System.array$arg@@8))
)))
(assert (forall ((_System.array2$arg@@9 T@U) ) (! (= (Tclass._System.array2?_0 (Tclass._System.array2? _System.array2$arg@@9)) _System.array2$arg@@9)
 :pattern ( (Tclass._System.array2? _System.array2$arg@@9))
)))
(assert (forall ((_System.array2$arg@@10 T@U) ) (! (= (Tclass._System.array2_0 (Tclass._System.array2 _System.array2$arg@@10)) _System.array2$arg@@10)
 :pattern ( (Tclass._System.array2 _System.array2$arg@@10))
)))
(assert (forall ((_module.Cell$T@@12 T@U) ) (! (= (Tclass._module.Cell_0 (Tclass._module.Cell _module.Cell$T@@12)) _module.Cell$T@@12)
 :pattern ( (Tclass._module.Cell _module.Cell$T@@12))
)))
(assert (forall ((_module.Cell$T@@13 T@U) ) (! (= (Tclass._module.Cell?_0 (Tclass._module.Cell? _module.Cell$T@@13)) _module.Cell$T@@13)
 :pattern ( (Tclass._module.Cell? _module.Cell$T@@13))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (forall ((t0@@23 T@U) (t1@@21 T@U) (t2@@7 T@U) (heap@@6 T@U) (f@@15 T@U) (bx0@@17 T@U) (bx1@@5 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@6) (and (and ($IsBox bx0@@17 t0@@23) ($IsBox bx1@@5 t1@@21)) ($Is HandleTypeType f@@15 (Tclass._System.___hFunc2 t0@@23 t1@@21 t2@@7)))) (|Set#Equal| (Reads2 t0@@23 t1@@21 t2@@7 $OneHeap f@@15 bx0@@17 bx1@@5) |Set#Empty|)) (= (Requires2 t0@@23 t1@@21 t2@@7 $OneHeap f@@15 bx0@@17 bx1@@5) (Requires2 t0@@23 t1@@21 t2@@7 heap@@6 f@@15 bx0@@17 bx1@@5)))
 :pattern ( (Requires2 t0@@23 t1@@21 t2@@7 $OneHeap f@@15 bx0@@17 bx1@@5) ($IsGoodHeap heap@@6))
 :pattern ( (Requires2 t0@@23 t1@@21 t2@@7 heap@@6 f@@15 bx0@@17 bx1@@5))
)))
(assert (forall ((|l#0@@3| T@U) (|$l#0#heap#0@@0| T@U) (|$l#0#x#0@@0| T@U) (|$l#0#y#0@@0| T@U) ) (! (= (MapType2Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType SetType (|lambda#22| |l#0@@3|) |$l#0#heap#0@@0| |$l#0#x#0@@0| |$l#0#y#0@@0|) |l#0@@3|)
 :pattern ( (MapType2Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType SetType (|lambda#22| |l#0@@3|) |$l#0#heap#0@@0| |$l#0#x#0@@0| |$l#0#y#0@@0|))
)))
(assert (forall ((|l#0@@4| T@U) (|$l#4#heap#0| T@U) (|$l#4#_v5#0| T@U) (|$l#4#_v6#0| T@U) ) (! (= (MapType2Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType BoxType (|lambda#58| |l#0@@4|) |$l#4#heap#0| |$l#4#_v5#0| |$l#4#_v6#0|) |l#0@@4|)
 :pattern ( (MapType2Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType BoxType (|lambda#58| |l#0@@4|) |$l#4#heap#0| |$l#4#_v5#0| |$l#4#_v6#0|))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module.Cell$T@@14 T@U) ($Heap@@1 T@U) (this@@2 T@U) ) (!  (=> (or (|_module.Cell.FArray#canCall| _module.Cell$T@@14 $Heap@@1 this@@2) (and (< 0 $FunctionContextHeight) (and ($IsGoodHeap $Heap@@1) (and (or (not (= this@@2 null)) (not true)) (and ($Is refType this@@2 (Tclass._module.Cell _module.Cell$T@@14)) ($IsAlloc refType this@@2 (Tclass._module.Cell _module.Cell$T@@14) $Heap@@1)))))) (= (_module.Cell.FArray _module.Cell$T@@14 $Heap@@1 this@@2) ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@1 this@@2) _module.Cell.arr))))
 :pattern ( (_module.Cell.FArray _module.Cell$T@@14 $Heap@@1 this@@2) ($IsGoodHeap $Heap@@1))
))))
(assert (forall ((_System.array$arg@@9 T@U) ($h@@15 T@U) ($o@@18 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@15) (and (or (not (= $o@@18 null)) (not true)) (= (dtype $o@@18) (Tclass._System.array? _System.array$arg@@9)))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@15 $o@@18) alloc)))) ($IsAlloc intType (int_2_U (_System.array.Length $o@@18)) TInt $h@@15))
 :pattern ( (_System.array.Length $o@@18) ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@15 $o@@18) alloc)) (Tclass._System.array? _System.array$arg@@9))
)))
(assert (forall ((_System.array2$arg@@11 T@U) ($h@@16 T@U) ($o@@19 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@16) (and (or (not (= $o@@19 null)) (not true)) (= (dtype $o@@19) (Tclass._System.array2? _System.array2$arg@@11)))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@16 $o@@19) alloc)))) ($IsAlloc intType (int_2_U (_System.array2.Length0 $o@@19)) TInt $h@@16))
 :pattern ( (_System.array2.Length0 $o@@19) ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@16 $o@@19) alloc)) (Tclass._System.array2? _System.array2$arg@@11))
)))
(assert (forall ((_System.array2$arg@@12 T@U) ($h@@17 T@U) ($o@@20 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@17) (and (or (not (= $o@@20 null)) (not true)) (= (dtype $o@@20) (Tclass._System.array2? _System.array2$arg@@12)))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@17 $o@@20) alloc)))) ($IsAlloc intType (int_2_U (_System.array2.Length1 $o@@20)) TInt $h@@17))
 :pattern ( (_System.array2.Length1 $o@@20) ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@17 $o@@20) alloc)) (Tclass._System.array2? _System.array2$arg@@12))
)))
(assert (forall ((_System.array$arg@@10 T@U) ($h@@18 T@U) ($o@@21 T@U) ($i0@@2 Int) ) (!  (=> (and (and ($IsGoodHeap $h@@18) (and (or (not (= $o@@21 null)) (not true)) (= (dtype $o@@21) (Tclass._System.array? _System.array$arg@@10)))) (and (<= 0 $i0@@2) (< $i0@@2 (_System.array.Length $o@@21)))) ($IsBox (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@18 $o@@21) (IndexField $i0@@2)) _System.array$arg@@10))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@18 $o@@21) (IndexField $i0@@2)) (Tclass._System.array? _System.array$arg@@10))
)))
(assert (forall ((f@@16 T@U) (t0@@24 T@U) (t1@@22 T@U) (t2@@8 T@U) (u0@@6 T@U) (u1@@6 T@U) (u2@@4 T@U) ) (!  (=> (and (and (and ($Is HandleTypeType f@@16 (Tclass._System.___hFunc2 t0@@24 t1@@22 t2@@8)) (forall ((bx@@15 T@U) ) (!  (=> ($IsBox bx@@15 u0@@6) ($IsBox bx@@15 t0@@24))
 :pattern ( ($IsBox bx@@15 u0@@6))
 :pattern ( ($IsBox bx@@15 t0@@24))
))) (forall ((bx@@16 T@U) ) (!  (=> ($IsBox bx@@16 u1@@6) ($IsBox bx@@16 t1@@22))
 :pattern ( ($IsBox bx@@16 u1@@6))
 :pattern ( ($IsBox bx@@16 t1@@22))
))) (forall ((bx@@17 T@U) ) (!  (=> ($IsBox bx@@17 t2@@8) ($IsBox bx@@17 u2@@4))
 :pattern ( ($IsBox bx@@17 t2@@8))
 :pattern ( ($IsBox bx@@17 u2@@4))
))) ($Is HandleTypeType f@@16 (Tclass._System.___hFunc2 u0@@6 u1@@6 u2@@4)))
 :pattern ( ($Is HandleTypeType f@@16 (Tclass._System.___hFunc2 t0@@24 t1@@22 t2@@8)) ($Is HandleTypeType f@@16 (Tclass._System.___hFunc2 u0@@6 u1@@6 u2@@4)))
)))
(assert (forall ((f@@17 T@U) (ly@@0 T@U) (A@@0 T@T) ) (! (= (AtLayer A@@0 f@@17 ($LS ly@@0)) (AtLayer A@@0 f@@17 ly@@0))
 :pattern ( (AtLayer A@@0 f@@17 ($LS ly@@0)))
)))
(assert (forall ((f@@18 T@U) (t0@@25 T@U) (t1@@23 T@U) (h@@14 T@U) ) (!  (=> ($IsGoodHeap h@@14) (= ($IsAlloc HandleTypeType f@@18 (Tclass._System.___hFunc1 t0@@25 t1@@23) h@@14) (forall ((bx0@@18 T@U) ) (!  (=> (and (and ($IsBox bx0@@18 t0@@25) ($IsAllocBox bx0@@18 t0@@25 h@@14)) (Requires1 t0@@25 t1@@23 h@@14 f@@18 bx0@@18)) (forall ((r@@5 T@U) ) (!  (=> (and (or (not (= r@@5 null)) (not true)) (|Set#IsMember| (Reads1 t0@@25 t1@@23 h@@14 f@@18 bx0@@18) ($Box refType r@@5))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@14 r@@5) alloc))))
 :pattern ( (|Set#IsMember| (Reads1 t0@@25 t1@@23 h@@14 f@@18 bx0@@18) ($Box refType r@@5)))
)))
 :pattern ( (Apply1 t0@@25 t1@@23 h@@14 f@@18 bx0@@18))
 :pattern ( (Reads1 t0@@25 t1@@23 h@@14 f@@18 bx0@@18))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@18 (Tclass._System.___hFunc1 t0@@25 t1@@23) h@@14))
)))
(assert (forall ((|#$T0@@6| T@U) (|#$R@@6| T@U) (bx@@18 T@U) ) (!  (=> ($IsBox bx@@18 (Tclass._System.___hFunc1 |#$T0@@6| |#$R@@6|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@18)) bx@@18) ($Is HandleTypeType ($Unbox HandleTypeType bx@@18) (Tclass._System.___hFunc1 |#$T0@@6| |#$R@@6|))))
 :pattern ( ($IsBox bx@@18 (Tclass._System.___hFunc1 |#$T0@@6| |#$R@@6|)))
)))
(assert (forall ((|l#0@@5| T@U) (|l#1@@0| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@22 T@U) ($f@@0 T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@5| |l#1@@0| |l#2| |l#3|) $o@@22 $f@@0))  (=> (and (or (not (= $o@@22 |l#0@@5|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1@@0| $o@@22) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@5| |l#1@@0| |l#2| |l#3|) $o@@22 $f@@0))
)))
(assert (forall ((f@@19 T@U) (i@@2 Int) ) (!  (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@19 i@@2)) f@@19) (= (MultiIndexField_Inverse1 (MultiIndexField f@@19 i@@2)) i@@2))
 :pattern ( (MultiIndexField f@@19 i@@2))
)))
(assert (forall ((|#$T0@@7| T@U) (|#$R@@7| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@7|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@7|)) |tytagFamily$_#Func1|))
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@7|))
)))
(assert (forall ((_module.Cell$T@@15 T@U) ($h@@19 T@U) ($o@@23 T@U) ) (!  (=> (and ($IsGoodHeap $h@@19) (and (or (not (= $o@@23 null)) (not true)) (= (dtype $o@@23) (Tclass._module.Cell? _module.Cell$T@@15)))) ($Is refType ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@19 $o@@23) _module.Cell.arr)) (Tclass._System.array _module.Cell$T@@15)))
 :pattern ( ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@19 $o@@23) _module.Cell.arr)) (Tclass._module.Cell? _module.Cell$T@@15))
)))
(assert (forall ((_module.Cell$T@@16 T@U) ($h@@20 T@U) ($o@@24 T@U) ) (!  (=> (and ($IsGoodHeap $h@@20) (and (or (not (= $o@@24 null)) (not true)) (= (dtype $o@@24) (Tclass._module.Cell? _module.Cell$T@@16)))) ($Is refType ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@20 $o@@24) _module.Cell.mat)) (Tclass._System.array2 _module.Cell$T@@16)))
 :pattern ( ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@20 $o@@24) _module.Cell.mat)) (Tclass._module.Cell? _module.Cell$T@@16))
)))
(assert (forall ((|$l#0#heap#0@@1| T@U) (|$l#0#sa#0| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType |lambda#48| |$l#0#heap#0@@1| |$l#0#sa#0|) ($Box refType ($Unbox refType |$l#0#sa#0|)))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType |lambda#48| |$l#0#heap#0@@1| |$l#0#sa#0|))
)))
(assert (forall ((t0@@26 T@U) (t1@@24 T@U) (heap@@7 T@U) (f@@20 T@U) (bx0@@19 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@7) (and ($IsBox bx0@@19 t0@@26) ($Is HandleTypeType f@@20 (Tclass._System.___hFunc1 t0@@26 t1@@24)))) (|Set#Equal| (Reads1 t0@@26 t1@@24 $OneHeap f@@20 bx0@@19) |Set#Empty|)) (= (Requires1 t0@@26 t1@@24 $OneHeap f@@20 bx0@@19) (Requires1 t0@@26 t1@@24 heap@@7 f@@20 bx0@@19)))
 :pattern ( (Requires1 t0@@26 t1@@24 $OneHeap f@@20 bx0@@19) ($IsGoodHeap heap@@7))
 :pattern ( (Requires1 t0@@26 t1@@24 heap@@7 f@@20 bx0@@19))
)))
(assert (forall ((t0@@27 T@U) (t1@@25 T@U) (t2@@9 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@21 T@U) (bx0@@20 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) (and (and ($IsBox bx0@@20 t0@@27) ($IsBox bx1@@6 t1@@25)) ($Is HandleTypeType f@@21 (Tclass._System.___hFunc2 t0@@27 t1@@25 t2@@9)))) (forall ((o@@10 T@U) (fld@@5 T@U) )  (=> (and (or (not (= o@@10 null)) (not true)) (|Set#IsMember| (Reads2 t0@@27 t1@@25 t2@@9 h0@@5 f@@21 bx0@@20 bx1@@6) ($Box refType o@@10))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@5 o@@10) fld@@5) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@5 o@@10) fld@@5))))) (= (Requires2 t0@@27 t1@@25 t2@@9 h0@@5 f@@21 bx0@@20 bx1@@6) (Requires2 t0@@27 t1@@25 t2@@9 h1@@5 f@@21 bx0@@20 bx1@@6)))
 :pattern ( ($HeapSucc h0@@5 h1@@5) (Requires2 t0@@27 t1@@25 t2@@9 h1@@5 f@@21 bx0@@20 bx1@@6))
)))
(assert (forall ((t0@@28 T@U) (t1@@26 T@U) (t2@@10 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@22 T@U) (bx0@@21 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) (and (and ($IsBox bx0@@21 t0@@28) ($IsBox bx1@@7 t1@@26)) ($Is HandleTypeType f@@22 (Tclass._System.___hFunc2 t0@@28 t1@@26 t2@@10)))) (forall ((o@@11 T@U) (fld@@6 T@U) )  (=> (and (or (not (= o@@11 null)) (not true)) (|Set#IsMember| (Reads2 t0@@28 t1@@26 t2@@10 h1@@6 f@@22 bx0@@21 bx1@@7) ($Box refType o@@11))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@6 o@@11) fld@@6) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@6 o@@11) fld@@6))))) (= (Requires2 t0@@28 t1@@26 t2@@10 h0@@6 f@@22 bx0@@21 bx1@@7) (Requires2 t0@@28 t1@@26 t2@@10 h1@@6 f@@22 bx0@@21 bx1@@7)))
 :pattern ( ($HeapSucc h0@@6 h1@@6) (Requires2 t0@@28 t1@@26 t2@@10 h1@@6 f@@22 bx0@@21 bx1@@7))
)))
(assert (forall ((bx@@19 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@19 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@19)) bx@@19) ($Is SetType ($Unbox SetType bx@@19) (TSet t@@5))))
 :pattern ( ($IsBox bx@@19 (TSet t@@5)))
)))
(assert (forall ((_System.array$arg@@11 T@U) (bx@@20 T@U) ) (!  (=> ($IsBox bx@@20 (Tclass._System.array? _System.array$arg@@11)) (and (= ($Box refType ($Unbox refType bx@@20)) bx@@20) ($Is refType ($Unbox refType bx@@20) (Tclass._System.array? _System.array$arg@@11))))
 :pattern ( ($IsBox bx@@20 (Tclass._System.array? _System.array$arg@@11)))
)))
(assert (forall ((_System.array$arg@@12 T@U) (bx@@21 T@U) ) (!  (=> ($IsBox bx@@21 (Tclass._System.array _System.array$arg@@12)) (and (= ($Box refType ($Unbox refType bx@@21)) bx@@21) ($Is refType ($Unbox refType bx@@21) (Tclass._System.array _System.array$arg@@12))))
 :pattern ( ($IsBox bx@@21 (Tclass._System.array _System.array$arg@@12)))
)))
(assert (forall ((_System.array2$arg@@13 T@U) (bx@@22 T@U) ) (!  (=> ($IsBox bx@@22 (Tclass._System.array2? _System.array2$arg@@13)) (and (= ($Box refType ($Unbox refType bx@@22)) bx@@22) ($Is refType ($Unbox refType bx@@22) (Tclass._System.array2? _System.array2$arg@@13))))
 :pattern ( ($IsBox bx@@22 (Tclass._System.array2? _System.array2$arg@@13)))
)))
(assert (forall ((_System.array2$arg@@14 T@U) (bx@@23 T@U) ) (!  (=> ($IsBox bx@@23 (Tclass._System.array2 _System.array2$arg@@14)) (and (= ($Box refType ($Unbox refType bx@@23)) bx@@23) ($Is refType ($Unbox refType bx@@23) (Tclass._System.array2 _System.array2$arg@@14))))
 :pattern ( ($IsBox bx@@23 (Tclass._System.array2 _System.array2$arg@@14)))
)))
(assert (forall ((_module.Cell$T@@17 T@U) (bx@@24 T@U) ) (!  (=> ($IsBox bx@@24 (Tclass._module.Cell _module.Cell$T@@17)) (and (= ($Box refType ($Unbox refType bx@@24)) bx@@24) ($Is refType ($Unbox refType bx@@24) (Tclass._module.Cell _module.Cell$T@@17))))
 :pattern ( ($IsBox bx@@24 (Tclass._module.Cell _module.Cell$T@@17)))
)))
(assert (forall ((_module.Cell$T@@18 T@U) (bx@@25 T@U) ) (!  (=> ($IsBox bx@@25 (Tclass._module.Cell? _module.Cell$T@@18)) (and (= ($Box refType ($Unbox refType bx@@25)) bx@@25) ($Is refType ($Unbox refType bx@@25) (Tclass._module.Cell? _module.Cell$T@@18))))
 :pattern ( ($IsBox bx@@25 (Tclass._module.Cell? _module.Cell$T@@18)))
)))
(assert (forall ((h@@15 T@U) (r@@6 T@U) (f@@23 T@U) (x@@6 T@U) ) (!  (=> ($IsGoodHeap (MapType1Store refType (MapType1Type FieldType BoxType) h@@15 r@@6 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@15 r@@6) f@@23 x@@6))) ($HeapSucc h@@15 (MapType1Store refType (MapType1Type FieldType BoxType) h@@15 r@@6 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@15 r@@6) f@@23 x@@6))))
 :pattern ( (MapType1Store refType (MapType1Type FieldType BoxType) h@@15 r@@6 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@15 r@@6) f@@23 x@@6)))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (= (Tag Tclass._module.short) Tagclass._module.short))
(assert (= (TagFamily Tclass._module.short) tytagFamily$short))
(assert (forall ((s@@0 T@U) ) (! ($Is SetType (SetRef_to_SetBox s@@0) (TSet Tclass._System.object?))
 :pattern ( (SetRef_to_SetBox s@@0))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (! (= (|Set#Equal| a@@1 b@@1) (forall ((o@@12 T@U) ) (! (= (|Set#IsMember| a@@1 o@@12) (|Set#IsMember| b@@1 o@@12))
 :pattern ( (|Set#IsMember| a@@1 o@@12))
 :pattern ( (|Set#IsMember| b@@1 o@@12))
)))
 :pattern ( (|Set#Equal| a@@1 b@@1))
)))
(assert (forall ((t0@@29 T@U) (t1@@27 T@U) (t2@@11 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@24 T@U) (bx0@@22 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) (and (and ($IsBox bx0@@22 t0@@29) ($IsBox bx1@@8 t1@@27)) ($Is HandleTypeType f@@24 (Tclass._System.___hFunc2 t0@@29 t1@@27 t2@@11)))) (forall ((o@@13 T@U) (fld@@7 T@U) )  (=> (and (or (not (= o@@13 null)) (not true)) (|Set#IsMember| (Reads2 t0@@29 t1@@27 t2@@11 h0@@7 f@@24 bx0@@22 bx1@@8) ($Box refType o@@13))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@7 o@@13) fld@@7) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@7 o@@13) fld@@7))))) (= (Reads2 t0@@29 t1@@27 t2@@11 h0@@7 f@@24 bx0@@22 bx1@@8) (Reads2 t0@@29 t1@@27 t2@@11 h1@@7 f@@24 bx0@@22 bx1@@8)))
 :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads2 t0@@29 t1@@27 t2@@11 h1@@7 f@@24 bx0@@22 bx1@@8))
)))
(assert (forall ((t0@@30 T@U) (t1@@28 T@U) (t2@@12 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@25 T@U) (bx0@@23 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) (and (and ($IsBox bx0@@23 t0@@30) ($IsBox bx1@@9 t1@@28)) ($Is HandleTypeType f@@25 (Tclass._System.___hFunc2 t0@@30 t1@@28 t2@@12)))) (forall ((o@@14 T@U) (fld@@8 T@U) )  (=> (and (or (not (= o@@14 null)) (not true)) (|Set#IsMember| (Reads2 t0@@30 t1@@28 t2@@12 h1@@8 f@@25 bx0@@23 bx1@@9) ($Box refType o@@14))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@8 o@@14) fld@@8) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@8 o@@14) fld@@8))))) (= (Reads2 t0@@30 t1@@28 t2@@12 h0@@8 f@@25 bx0@@23 bx1@@9) (Reads2 t0@@30 t1@@28 t2@@12 h1@@8 f@@25 bx0@@23 bx1@@9)))
 :pattern ( ($HeapSucc h0@@8 h1@@8) (Reads2 t0@@30 t1@@28 t2@@12 h1@@8 f@@25 bx0@@23 bx1@@9))
)))
(assert (forall ((t0@@31 T@U) (t1@@29 T@U) (t2@@13 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@26 T@U) (bx0@@24 T@U) (bx1@@10 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) (and (and ($IsBox bx0@@24 t0@@31) ($IsBox bx1@@10 t1@@29)) ($Is HandleTypeType f@@26 (Tclass._System.___hFunc2 t0@@31 t1@@29 t2@@13)))) (forall ((o@@15 T@U) (fld@@9 T@U) )  (=> (and (or (not (= o@@15 null)) (not true)) (|Set#IsMember| (Reads2 t0@@31 t1@@29 t2@@13 h0@@9 f@@26 bx0@@24 bx1@@10) ($Box refType o@@15))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@9 o@@15) fld@@9) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@9 o@@15) fld@@9))))) (= (Apply2 t0@@31 t1@@29 t2@@13 h0@@9 f@@26 bx0@@24 bx1@@10) (Apply2 t0@@31 t1@@29 t2@@13 h1@@9 f@@26 bx0@@24 bx1@@10)))
 :pattern ( ($HeapSucc h0@@9 h1@@9) (Apply2 t0@@31 t1@@29 t2@@13 h1@@9 f@@26 bx0@@24 bx1@@10))
)))
(assert (forall ((t0@@32 T@U) (t1@@30 T@U) (t2@@14 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@27 T@U) (bx0@@25 T@U) (bx1@@11 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) (and (and ($IsBox bx0@@25 t0@@32) ($IsBox bx1@@11 t1@@30)) ($Is HandleTypeType f@@27 (Tclass._System.___hFunc2 t0@@32 t1@@30 t2@@14)))) (forall ((o@@16 T@U) (fld@@10 T@U) )  (=> (and (or (not (= o@@16 null)) (not true)) (|Set#IsMember| (Reads2 t0@@32 t1@@30 t2@@14 h1@@10 f@@27 bx0@@25 bx1@@11) ($Box refType o@@16))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@10 o@@16) fld@@10) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@10 o@@16) fld@@10))))) (= (Apply2 t0@@32 t1@@30 t2@@14 h0@@10 f@@27 bx0@@25 bx1@@11) (Apply2 t0@@32 t1@@30 t2@@14 h1@@10 f@@27 bx0@@25 bx1@@11)))
 :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply2 t0@@32 t1@@30 t2@@14 h1@@10 f@@27 bx0@@25 bx1@@11))
)))
(assert (forall ((|x#0@@2| T@U) ) (! (= ($Is intType |x#0@@2| Tclass._module.short)  (and (<= (LitInt (- 0 10)) (U_2_int |x#0@@2|)) (< (U_2_int |x#0@@2|) 12000)))
 :pattern ( ($Is intType |x#0@@2| Tclass._module.short))
)))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@8)) (Lit BoxType ($Box T@@5 x@@8)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@8)))
)))
(assert (forall ((t0@@33 T@U) (t1@@31 T@U) (t2@@15 T@U) (heap@@8 T@U) (h@@16 T@U) (r@@7 T@U) (rd@@4 T@U) (bx0@@26 T@U) (bx1@@12 T@U) ) (!  (=> (U_2_bool (MapType2Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType boolType r@@7 heap@@8 bx0@@26 bx1@@12)) (Requires2 t0@@33 t1@@31 t2@@15 heap@@8 (Handle2 h@@16 r@@7 rd@@4) bx0@@26 bx1@@12))
 :pattern ( (Requires2 t0@@33 t1@@31 t2@@15 heap@@8 (Handle2 h@@16 r@@7 rd@@4) bx0@@26 bx1@@12))
)))
(assert (forall ((h@@17 T@U) (v@@4 T@U) ) (! ($IsAlloc intType v@@4 TInt h@@17)
 :pattern ( ($IsAlloc intType v@@4 TInt h@@17))
)))
(assert (forall ((h@@18 T@U) (v@@5 T@U) ) (! ($IsAlloc realType v@@5 TReal h@@18)
 :pattern ( ($IsAlloc realType v@@5 TReal h@@18))
)))
(assert (forall ((h@@19 T@U) (v@@6 T@U) ) (! ($IsAlloc boolType v@@6 TBool h@@19)
 :pattern ( ($IsAlloc boolType v@@6 TBool h@@19))
)))
(assert (forall ((|l#0@@6| T@U) (|$l#0#heap#0@@2| T@U) (|$l#0#i#0| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType (|lambda#8| |l#0@@6|) |$l#0#heap#0@@2| |$l#0#i#0|) |l#0@@6|)
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType (|lambda#8| |l#0@@6|) |$l#0#heap#0@@2| |$l#0#i#0|))
)))
(assert (forall ((|l#0@@7| T@U) (|$l#1#heap#0@@0| T@U) (|$l#1#_v3#0@@0| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType (|lambda#28| |l#0@@7|) |$l#1#heap#0@@0| |$l#1#_v3#0@@0|) |l#0@@7|)
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType (|lambda#28| |l#0@@7|) |$l#1#heap#0@@0| |$l#1#_v3#0@@0|))
)))
(assert (forall ((v@@7 T@U) ) (! ($Is intType v@@7 TInt)
 :pattern ( ($Is intType v@@7 TInt))
)))
(assert (forall ((v@@8 T@U) ) (! ($Is realType v@@8 TReal)
 :pattern ( ($Is realType v@@8 TReal))
)))
(assert (forall ((v@@9 T@U) ) (! ($Is boolType v@@9 TBool)
 :pattern ( ($Is boolType v@@9 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |sa#0@0| () T@U)
(declare-fun |$lambdaHeap#0@0| () T@U)
(declare-fun |$_Frame#l0@0| () T@U)
(declare-fun |lambdaResult#0| () T@U)
(declare-fun $Heap@7 () T@U)
(declare-fun |_v4#0@0| () Int)
(declare-fun |$_Frame#l1@0| () T@U)
(declare-fun |$lambdaHeap#1@0| () T@U)
(declare-fun |lambdaResult#1| () T@U)
(declare-fun |b#0@0| () T@U)
(declare-fun |_v5#0@0| () Int)
(declare-fun |$_Frame#l2@0| () T@U)
(declare-fun |$lambdaHeap#2@0| () T@U)
(declare-fun |lambdaResult#2| () T@U)
(declare-fun $Heap@8 () T@U)
(declare-fun $nw@6 () T@U)
(declare-fun $LZ () T@U)
(declare-fun $Heap@9 () T@U)
(declare-fun |$rhs#10@0| () Int)
(declare-fun call3formal@this@0 () T@U)
(declare-fun $nw@5 () T@U)
(declare-fun |$rhs#8@0| () Int)
(declare-fun |$rhs#9@0| () Int)
(declare-fun |call4formal@y#0@0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap@@2 () T@U)
(declare-fun |newtype$check#0@0| () Int)
(declare-fun |newtype$check#1@0| () Int)
(declare-fun |t##0@0| () Int)
(declare-fun call3formal@this () T@U)
(declare-fun call0formal@_module.Cell$T () T@U)
(declare-fun call0formal@_module.Cell$T@0 () T@U)
(declare-fun |call1formal@t#0@0| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |a#0@0| () T@U)
(declare-fun |x#0@0| () Int)
(declare-fun $nw@0 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |y#0@0| () Int)
(declare-fun $nw@1 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun $nw@2 () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun $nw@3 () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun $nw@4 () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun |$rhs#0@0| () Bool)
(declare-fun |$rhs#1@0| () Int)
(declare-fun |$rhs#2@0| () T@U)
(declare-fun |$rhs#3@0| () T@U)
(declare-fun |a#0@1| () T@U)
(declare-fun |call3formal@x#0| () T@U)
(declare-fun call0formal@_module.Cell$T@@0 () T@U)
(declare-fun call0formal@_module.Cell$T@0@@0 () T@U)
(declare-fun $Heap@6 () T@U)
(declare-fun |call3formal@x#0@0| () T@U)
(declare-fun |$rhs#4@0| () Int)
(declare-fun |$rhs#5@0| () Int)
(declare-fun |call3formal@x#0@@0| () T@U)
(declare-fun call0formal@_module.Cell$T@@1 () T@U)
(declare-fun |call4formal@y#0| () T@U)
(declare-fun call0formal@_module.Cell$T@0@@1 () T@U)
(declare-fun |call3formal@x#0@0@@0| () T@U)
(declare-fun |$rhs#6@0| () Int)
(declare-fun |$rhs#7@0| () Int)
(declare-fun |defass#cell#0| () Bool)
(declare-fun |cell#0| () T@U)
(declare-fun |a#0| () T@U)
(declare-fun |x#0@@3| () Int)
(declare-fun |b#0| () T@U)
(declare-fun |y#0| () Int)
(declare-fun |c#0@@7| () T@U)
(declare-fun |d#0| () T@U)
(declare-fun |e#0| () T@U)
(declare-fun |f#0| () T@U)
(declare-fun |e0#0| () T@U)
(declare-fun |f0#0| () T@U)
(declare-fun |barray#0| () T@U)
(declare-fun |marray#0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 73) (let ((anon3_correct true))
(let ((anon14_Else_correct  (=> (and (not (and ($Is refType |sa#0@0| (Tclass._System.array Tclass._module.short)) ($IsAlloc refType |sa#0@0| (Tclass._System.array Tclass._module.short) |$lambdaHeap#0@0|))) (= (ControlFlow 0 35) 33)) anon3_correct)))
(let ((anon14_Then_correct  (=> (and ($Is refType |sa#0@0| (Tclass._System.array Tclass._module.short)) ($IsAlloc refType |sa#0@0| (Tclass._System.array Tclass._module.short) |$lambdaHeap#0@0|)) (=> (and (and (= |$_Frame#l0@0| (|lambda#0| null |$lambdaHeap#0@0| alloc false)) (= |lambdaResult#0| |sa#0@0|)) (and ($Is refType |lambdaResult#0| (Tclass._System.array Tclass._module.short)) (= (ControlFlow 0 34) 33))) anon3_correct))))
(let ((anon13_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#0@0|) (or (= $Heap@7 |$lambdaHeap#0@0|) ($HeapSucc $Heap@7 |$lambdaHeap#0@0|))) (and (=> (= (ControlFlow 0 36) 34) anon14_Then_correct) (=> (= (ControlFlow 0 36) 35) anon14_Else_correct)))))
(let ((anon7_correct true))
(let ((anon16_Else_correct  (=> (and (< |_v4#0@0| (LitInt 0)) (= (ControlFlow 0 29) 27)) anon7_correct)))
(let ((anon16_Then_correct  (=> (<= (LitInt 0) |_v4#0@0|) (=> (and (and (= |$_Frame#l1@0| (|lambda#0| null |$lambdaHeap#1@0| alloc false)) (= |lambdaResult#1| |b#0@0|)) (and ($Is refType |lambdaResult#1| (Tclass._System.array Tclass._module.short)) (= (ControlFlow 0 28) 27))) anon7_correct))))
(let ((anon15_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#1@0|) (or (= $Heap@7 |$lambdaHeap#1@0|) ($HeapSucc $Heap@7 |$lambdaHeap#1@0|))) (and (=> (= (ControlFlow 0 30) 28) anon16_Then_correct) (=> (= (ControlFlow 0 30) 29) anon16_Else_correct)))))
(let ((anon11_correct true))
(let ((anon18_Else_correct  (=> (and (< |_v5#0@0| (LitInt 0)) (= (ControlFlow 0 15) 13)) anon11_correct)))
(let ((anon18_Then_correct  (=> (<= (LitInt 0) |_v5#0@0|) (=> (and (and (= |$_Frame#l2@0| (|lambda#0| null |$lambdaHeap#2@0| alloc false)) (= |lambdaResult#2| |b#0@0|)) (and ($Is refType |lambdaResult#2| (Tclass._System.array Tclass._module.short)) (= (ControlFlow 0 14) 13))) anon11_correct))))
(let ((anon17_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#2@0|) (or (= $Heap@8 |$lambdaHeap#2@0|) ($HeapSucc $Heap@8 |$lambdaHeap#2@0|))) (and (=> (= (ControlFlow 0 16) 14) anon18_Then_correct) (=> (= (ControlFlow 0 16) 15) anon18_Else_correct)))))
(let ((anon17_Else_correct  (=> (and (and (and (or (not (= $nw@6 null)) (not true)) ($Is refType $nw@6 (Tclass._System.array2? (Tclass._System.array Tclass._module.short)))) (not (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@8 $nw@6) alloc))))) (and (= (_System.array2.Length0 $nw@6) (LitInt 9)) (= (_System.array2.Length1 $nw@6) (LitInt 2)))) (and (=> (= (ControlFlow 0 2) (- 0 12)) (forall ((|arrayinit#1#i0#0| Int) (|arrayinit#1#i1#0| Int) )  (=> (and (and (<= 0 |arrayinit#1#i0#0|) (< |arrayinit#1#i0#0| (LitInt 9))) (and (<= 0 |arrayinit#1#i1#0|) (< |arrayinit#1#i1#0| (LitInt 2)))) (Requires2 Tclass._System.nat TInt (Tclass._System.array Tclass._module.short) $Heap@8 (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#9| (Handle2 (|lambda#58| ($Box refType |b#0@0|)) (|lambda#20| Tclass._System.nat TInt) (|lambda#22| (SetRef_to_SetBox (|lambda#7| false))))) ($LS $LZ))) ($Box intType (int_2_U |arrayinit#1#i0#0|)) ($Box intType (int_2_U |arrayinit#1#i1#0|)))))) (=> (and (and (forall ((|arrayinit#1#i0#0@@0| Int) (|arrayinit#1#i1#0@@0| Int) ) (!  (=> (and (and (<= 0 |arrayinit#1#i0#0@@0|) (< |arrayinit#1#i0#0@@0| (LitInt 9))) (and (<= 0 |arrayinit#1#i1#0@@0|) (< |arrayinit#1#i1#0@@0| (LitInt 2)))) (= ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@8 $nw@6) (MultiIndexField (IndexField |arrayinit#1#i0#0@@0|) |arrayinit#1#i1#0@@0|))) ($Unbox refType (Apply2 Tclass._System.nat TInt (Tclass._System.array Tclass._module.short) $Heap@8 (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#9| (Handle2 (|lambda#58| ($Box refType |b#0@0|)) (|lambda#20| Tclass._System.nat TInt) (|lambda#22| (SetRef_to_SetBox (|lambda#7| false))))) ($LS $LZ))) ($Box intType (int_2_U |arrayinit#1#i0#0@@0|)) ($Box intType (int_2_U |arrayinit#1#i1#0@@0|))))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@8 $nw@6) (MultiIndexField (IndexField |arrayinit#1#i0#0@@0|) |arrayinit#1#i1#0@@0|)))
)) (= $Heap@9 (MapType1Store refType (MapType1Type FieldType BoxType) $Heap@8 $nw@6 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@8 $nw@6) alloc ($Box boolType (bool_2_U true)))))) (and ($IsGoodHeap $Heap@9) ($IsHeapAnchor $Heap@9))) (and (=> (= (ControlFlow 0 2) (- 0 11)) (or (not (= $nw@6 null)) (not true))) (=> (or (not (= $nw@6 null)) (not true)) (and (=> (= (ControlFlow 0 2) (- 0 10)) (and (<= 0 (LitInt 3)) (< (LitInt 3) (_System.array2.Length0 $nw@6)))) (=> (and (<= 0 (LitInt 3)) (< (LitInt 3) (_System.array2.Length0 $nw@6))) (and (=> (= (ControlFlow 0 2) (- 0 9)) (and (<= 0 (LitInt 1)) (< (LitInt 1) (_System.array2.Length1 $nw@6)))) (=> (and (<= 0 (LitInt 1)) (< (LitInt 1) (_System.array2.Length1 $nw@6))) (and (=> (= (ControlFlow 0 2) (- 0 8)) (or (not (= ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@9 $nw@6) (MultiIndexField (IndexField (LitInt 3)) (LitInt 1)))) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@9 $nw@6) (MultiIndexField (IndexField (LitInt 3)) (LitInt 1)))) null)) (not true)) (and (=> (= (ControlFlow 0 2) (- 0 7)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@9 $nw@6) (MultiIndexField (IndexField (LitInt 3)) (LitInt 1)))))))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@9 $nw@6) (MultiIndexField (IndexField (LitInt 3)) (LitInt 1))))))) (=> (= |$rhs#10@0| (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@9 ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@9 $nw@6) (MultiIndexField (IndexField (LitInt 3)) (LitInt 1))))) (IndexField (LitInt 0)))))) (and (=> (= (ControlFlow 0 2) (- 0 6)) true) (and (=> (= (ControlFlow 0 2) (- 0 5)) (or (not (= call3formal@this@0 null)) (not true))) (=> (or (not (= call3formal@this@0 null)) (not true)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (not (= ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@9 call3formal@this@0) _module.Cell.mat)) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@9 call3formal@this@0) _module.Cell.mat)) null)) (not true)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (<= 0 (LitInt 7)) (< (LitInt 7) (_System.array2.Length0 ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@9 call3formal@this@0) _module.Cell.mat)))))) (=> (and (<= 0 (LitInt 7)) (< (LitInt 7) (_System.array2.Length0 ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@9 call3formal@this@0) _module.Cell.mat))))) (=> (= (ControlFlow 0 2) (- 0 1)) (and (<= 0 (LitInt 6)) (< (LitInt 6) (_System.array2.Length1 ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@9 call3formal@this@0) _module.Cell.mat)))))))))))))))))))))))))))))
(let ((anon15_Else_correct  (=> (and (and (or (not (= $nw@5 null)) (not true)) ($Is refType $nw@5 (Tclass._System.array? (Tclass._System.array Tclass._module.short)))) (and (not (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 $nw@5) alloc)))) (= (_System.array.Length $nw@5) (LitInt 9)))) (and (=> (= (ControlFlow 0 17) (- 0 26)) (forall ((|arrayinit#0#i0#0| Int) )  (=> (and (<= 0 |arrayinit#0#i0#0|) (< |arrayinit#0#i0#0| (LitInt 9))) (Requires1 Tclass._System.nat (Tclass._System.array Tclass._module.short) $Heap@7 (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#9| (Handle1 (|lambda#28| ($Box refType |b#0@0|)) (|lambda#29| Tclass._System.nat) (|lambda#8| (SetRef_to_SetBox (|lambda#7| false))))) ($LS $LZ))) ($Box intType (int_2_U |arrayinit#0#i0#0|)))))) (=> (and (and (forall ((|arrayinit#0#i0#0@@0| Int) ) (!  (=> (and (<= 0 |arrayinit#0#i0#0@@0|) (< |arrayinit#0#i0#0@@0| (LitInt 9))) (= ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 $nw@5) (IndexField |arrayinit#0#i0#0@@0|))) ($Unbox refType (Apply1 Tclass._System.nat (Tclass._System.array Tclass._module.short) $Heap@7 (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#9| (Handle1 (|lambda#28| ($Box refType |b#0@0|)) (|lambda#29| Tclass._System.nat) (|lambda#8| (SetRef_to_SetBox (|lambda#7| false))))) ($LS $LZ))) ($Box intType (int_2_U |arrayinit#0#i0#0@@0|))))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 $nw@5) (IndexField |arrayinit#0#i0#0@@0|)))
)) (= $Heap@8 (MapType1Store refType (MapType1Type FieldType BoxType) $Heap@7 $nw@5 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 $nw@5) alloc ($Box boolType (bool_2_U true)))))) (and ($IsGoodHeap $Heap@8) ($IsHeapAnchor $Heap@8))) (and (=> (= (ControlFlow 0 17) (- 0 25)) (or (not (= |b#0@0| null)) (not true))) (=> (or (not (= |b#0@0| null)) (not true)) (and (=> (= (ControlFlow 0 17) (- 0 24)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length |b#0@0|)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length |b#0@0|))) (=> (= |$rhs#8@0| (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@8 |b#0@0|) (IndexField (LitInt 0)))))) (and (=> (= (ControlFlow 0 17) (- 0 23)) (or (not (= $nw@5 null)) (not true))) (=> (or (not (= $nw@5 null)) (not true)) (and (=> (= (ControlFlow 0 17) (- 0 22)) (and (<= 0 (LitInt 3)) (< (LitInt 3) (_System.array.Length $nw@5)))) (=> (and (<= 0 (LitInt 3)) (< (LitInt 3) (_System.array.Length $nw@5))) (and (=> (= (ControlFlow 0 17) (- 0 21)) (or (not (= ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@8 $nw@5) (IndexField (LitInt 3)))) null)) (not true))) (=> (or (not (= ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@8 $nw@5) (IndexField (LitInt 3)))) null)) (not true)) (and (=> (= (ControlFlow 0 17) (- 0 20)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@8 $nw@5) (IndexField (LitInt 3)))))))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@8 $nw@5) (IndexField (LitInt 3))))))) (=> (= |$rhs#9@0| (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@8 ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@8 $nw@5) (IndexField (LitInt 3))))) (IndexField (LitInt 0)))))) (and (=> (= (ControlFlow 0 17) (- 0 19)) (<= 0 (LitInt 9))) (=> (<= 0 (LitInt 9)) (and (=> (= (ControlFlow 0 17) (- 0 18)) (<= 0 (LitInt 2))) (=> (<= 0 (LitInt 2)) (and (=> (= (ControlFlow 0 17) 16) anon17_Then_correct) (=> (= (ControlFlow 0 17) 2) anon17_Else_correct)))))))))))))))))))))))))
(let ((anon13_Else_correct  (=> (= |b#0@0| ($Unbox refType (Apply1 (Tclass._System.array Tclass._module.short) (Tclass._System.array Tclass._module.short) $Heap@7 (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#9| (Handle1 |lambda#48| (|lambda#29| (Tclass._System.array Tclass._module.short)) (|lambda#8| (SetRef_to_SetBox (|lambda#7| false))))) ($LS $LZ))) ($Box refType |call4formal@y#0@0|)))) (and (=> (= (ControlFlow 0 31) (- 0 32)) (<= 0 (LitInt 9))) (=> (<= 0 (LitInt 9)) (and (=> (= (ControlFlow 0 31) 30) anon15_Then_correct) (=> (= (ControlFlow 0 31) 17) anon15_Else_correct)))))))
(let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@2 alloc false)) (= |newtype$check#0@0| (LitInt 8))) (and (=> (= (ControlFlow 0 37) (- 0 72)) (and (<= (LitInt (- 0 10)) |newtype$check#0@0|) (< |newtype$check#0@0| 12000))) (=> (and (<= (LitInt (- 0 10)) |newtype$check#0@0|) (< |newtype$check#0@0| 12000)) (=> (= |newtype$check#1@0| (LitInt 8)) (and (=> (= (ControlFlow 0 37) (- 0 71)) (and (<= (LitInt (- 0 10)) |newtype$check#1@0|) (< |newtype$check#1@0| 12000))) (=> (and (<= (LitInt (- 0 10)) |newtype$check#1@0|) (< |newtype$check#1@0| 12000)) (=> (= |t##0@0| (LitInt 8)) (=> (and (or (not (= call3formal@this null)) (not true)) (and ($Is refType call3formal@this (Tclass._module.Cell call0formal@_module.Cell$T)) ($IsAlloc refType call3formal@this (Tclass._module.Cell call0formal@_module.Cell$T) $Heap@@2))) (=> (and (and (= call0formal@_module.Cell$T@0 Tclass._module.short) (= |call1formal@t#0@0| ($Box intType (int_2_U |t##0@0|)))) (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0))) (=> (and (and (and (and (or (not (= call3formal@this@0 null)) (not true)) (and ($Is refType call3formal@this@0 (Tclass._module.Cell call0formal@_module.Cell$T@0)) ($IsAlloc refType call3formal@this@0 (Tclass._module.Cell call0formal@_module.Cell$T@0) $Heap@0))) (= (_System.array.Length ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 call3formal@this@0) _module.Cell.arr))) (LitInt 15))) (and (= ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 call3formal@this@0) _module.Cell.arr)) (_module.Cell.crr call0formal@_module.Cell$T@0 call3formal@this@0)) (= (_System.array2.Length0 ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 call3formal@this@0) _module.Cell.mat))) (_System.array2.Length1 ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 call3formal@this@0) _module.Cell.mat)))))) (and (and (= (_System.array2.Length1 ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 call3formal@this@0) _module.Cell.mat))) (LitInt 15)) (not (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@2 call3formal@this@0) alloc))))) (and (forall (($o@@25 T@U) ) (!  (=> (and (or (not (= $o@@25 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@2 $o@@25) alloc)))) (= (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $o@@25) (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@2 $o@@25)))
 :pattern ( (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $o@@25))
)) ($HeapSucc $Heap@@2 $Heap@0)))) (and (=> (= (ControlFlow 0 37) (- 0 70)) true) (and (=> (= (ControlFlow 0 37) (- 0 69)) (or (not (= call3formal@this@0 null)) (not true))) (=> (or (not (= call3formal@this@0 null)) (not true)) (=> (= |a#0@0| ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 call3formal@this@0) _module.Cell.arr))) (and (=> (= (ControlFlow 0 37) (- 0 68)) (or (not (= |a#0@0| null)) (not true))) (=> (or (not (= |a#0@0| null)) (not true)) (and (=> (= (ControlFlow 0 37) (- 0 67)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length |a#0@0|)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length |a#0@0|))) (=> (= |x#0@0| (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 |a#0@0|) (IndexField (LitInt 0)))))) (and (=> (= (ControlFlow 0 37) (- 0 66)) (<= 0 (LitInt 22))) (=> (<= 0 (LitInt 22)) (=> (and (and (and (or (not (= $nw@0 null)) (not true)) ($Is refType $nw@0 (Tclass._System.array? Tclass._module.short))) (not (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $nw@0) alloc))))) (and (and (= (_System.array.Length $nw@0) (LitInt 22)) (= $Heap@1 (MapType1Store refType (MapType1Type FieldType BoxType) $Heap@0 $nw@0 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $nw@0) alloc ($Box boolType (bool_2_U true)))))) (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)))) (and (=> (= (ControlFlow 0 37) (- 0 65)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 37) (- 0 64)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length $nw@0)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length $nw@0))) (=> (= |y#0@0| (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $nw@0) (IndexField (LitInt 0)))))) (and (=> (= (ControlFlow 0 37) (- 0 63)) (<= 0 (LitInt 22))) (=> (<= 0 (LitInt 22)) (=> (and (and (and (or (not (= $nw@1 null)) (not true)) ($Is refType $nw@1 (Tclass._System.array? TBool))) (not (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $nw@1) alloc))))) (and (and (= (_System.array.Length $nw@1) (LitInt 22)) (= $Heap@2 (MapType1Store refType (MapType1Type FieldType BoxType) $Heap@1 $nw@1 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $nw@1) alloc ($Box boolType (bool_2_U true)))))) (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)))) (and (=> (= (ControlFlow 0 37) (- 0 62)) (<= 0 (LitInt 22))) (=> (<= 0 (LitInt 22)) (=> (and (and (and (or (not (= $nw@2 null)) (not true)) ($Is refType $nw@2 (Tclass._System.array? TInt))) (not (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@2 $nw@2) alloc))))) (and (and (= (_System.array.Length $nw@2) (LitInt 22)) (= $Heap@3 (MapType1Store refType (MapType1Type FieldType BoxType) $Heap@2 $nw@2 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@2 $nw@2) alloc ($Box boolType (bool_2_U true)))))) (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)))) (and (=> (= (ControlFlow 0 37) (- 0 61)) (<= 0 (LitInt 22))) (=> (<= 0 (LitInt 22)) (=> (and (and (and (or (not (= $nw@3 null)) (not true)) ($Is refType $nw@3 (Tclass._System.array? Tclass._System.object?))) (not (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 $nw@3) alloc))))) (and (and (= (_System.array.Length $nw@3) (LitInt 22)) (= $Heap@4 (MapType1Store refType (MapType1Type FieldType BoxType) $Heap@3 $nw@3 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@3 $nw@3) alloc ($Box boolType (bool_2_U true)))))) (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)))) (and (=> (= (ControlFlow 0 37) (- 0 60)) (<= 0 (LitInt 22))) (=> (<= 0 (LitInt 22)) (=> (and (and (and (or (not (= $nw@4 null)) (not true)) ($Is refType $nw@4 (Tclass._System.array? (Tclass._module.Cell? TReal)))) (not (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@4 $nw@4) alloc))))) (and (and (= (_System.array.Length $nw@4) (LitInt 22)) (= $Heap@5 (MapType1Store refType (MapType1Type FieldType BoxType) $Heap@4 $nw@4 (MapType1Store FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@4 $nw@4) alloc ($Box boolType (bool_2_U true)))))) (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)))) (and (=> (= (ControlFlow 0 37) (- 0 59)) (or (not (= $nw@1 null)) (not true))) (=> (or (not (= $nw@1 null)) (not true)) (and (=> (= (ControlFlow 0 37) (- 0 58)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length $nw@1)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length $nw@1))) (=> (= |$rhs#0@0| (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@5 $nw@1) (IndexField (LitInt 0)))))) (and (=> (= (ControlFlow 0 37) (- 0 57)) (or (not (= $nw@2 null)) (not true))) (=> (or (not (= $nw@2 null)) (not true)) (and (=> (= (ControlFlow 0 37) (- 0 56)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length $nw@2)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length $nw@2))) (=> (= |$rhs#1@0| (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@5 $nw@2) (IndexField (LitInt 0)))))) (and (=> (= (ControlFlow 0 37) (- 0 55)) (or (not (= $nw@3 null)) (not true))) (=> (or (not (= $nw@3 null)) (not true)) (and (=> (= (ControlFlow 0 37) (- 0 54)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length $nw@3)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length $nw@3))) (=> (= |$rhs#2@0| ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@5 $nw@3) (IndexField (LitInt 0))))) (and (=> (= (ControlFlow 0 37) (- 0 53)) (or (not (= $nw@4 null)) (not true))) (=> (or (not (= $nw@4 null)) (not true)) (and (=> (= (ControlFlow 0 37) (- 0 52)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length $nw@4)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length $nw@4))) (=> (= |$rhs#3@0| ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@5 $nw@4) (IndexField (LitInt 0))))) (and (=> (= (ControlFlow 0 37) (- 0 51)) true) (and (=> (= (ControlFlow 0 37) (- 0 50)) (or (not (= call3formal@this@0 null)) (not true))) (=> (or (not (= call3formal@this@0 null)) (not true)) (=> (and (and ($IsAllocBox ($Box refType call3formal@this@0) (Tclass._module.Cell? Tclass._module.short) $Heap@5) (|_module.Cell.FArray#canCall| Tclass._module.short $Heap@5 call3formal@this@0)) (and (|_module.Cell.FArray#canCall| Tclass._module.short $Heap@5 call3formal@this@0) (= |a#0@1| (_module.Cell.FArray Tclass._module.short $Heap@5 call3formal@this@0)))) (and (=> (= (ControlFlow 0 37) (- 0 49)) true) (and (=> (= (ControlFlow 0 37) (- 0 48)) (or (not (= call3formal@this@0 null)) (not true))) (=> (or (not (= call3formal@this@0 null)) (not true)) (=> (and (and (and (and ($Is refType |call3formal@x#0| (Tclass._System.array call0formal@_module.Cell$T@@0)) ($IsAlloc refType |call3formal@x#0| (Tclass._System.array call0formal@_module.Cell$T@@0) $Heap@@2)) (= call0formal@_module.Cell$T@0@@0 Tclass._module.short)) (and ($IsGoodHeap $Heap@6) ($IsHeapAnchor $Heap@6))) (and (and (and ($Is refType |call3formal@x#0@0| (Tclass._System.array call0formal@_module.Cell$T@0@@0)) ($IsAlloc refType |call3formal@x#0@0| (Tclass._System.array call0formal@_module.Cell$T@0@@0) $Heap@6)) (= |call3formal@x#0@0| ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@6 call3formal@this@0) _module.Cell.arr)))) (and (forall (($o@@26 T@U) ) (!  (=> (and (or (not (= $o@@26 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@5 $o@@26) alloc)))) (= (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@6 $o@@26) (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@5 $o@@26)))
 :pattern ( (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@6 $o@@26))
)) ($HeapSucc $Heap@5 $Heap@6)))) (and (=> (= (ControlFlow 0 37) (- 0 47)) (or (not (= |a#0@1| null)) (not true))) (=> (or (not (= |a#0@1| null)) (not true)) (and (=> (= (ControlFlow 0 37) (- 0 46)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length |a#0@1|)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length |a#0@1|))) (=> (= |$rhs#4@0| (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@6 |a#0@1|) (IndexField (LitInt 0)))))) (and (=> (= (ControlFlow 0 37) (- 0 45)) (or (not (= |call3formal@x#0@0| null)) (not true))) (=> (or (not (= |call3formal@x#0@0| null)) (not true)) (and (=> (= (ControlFlow 0 37) (- 0 44)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length |call3formal@x#0@0|)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length |call3formal@x#0@0|))) (=> (= |$rhs#5@0| (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@6 |call3formal@x#0@0|) (IndexField (LitInt 0)))))) (and (=> (= (ControlFlow 0 37) (- 0 43)) true) (and (=> (= (ControlFlow 0 37) (- 0 42)) (or (not (= call3formal@this@0 null)) (not true))) (=> (or (not (= call3formal@this@0 null)) (not true)) (=> (and ($Is refType |call3formal@x#0@@0| (Tclass._System.array call0formal@_module.Cell$T@@1)) ($IsAlloc refType |call3formal@x#0@@0| (Tclass._System.array call0formal@_module.Cell$T@@1) $Heap@@2)) (=> (and (and (and (and ($Is refType |call4formal@y#0| (Tclass._System.array call0formal@_module.Cell$T@@1)) ($IsAlloc refType |call4formal@y#0| (Tclass._System.array call0formal@_module.Cell$T@@1) $Heap@@2)) (= call0formal@_module.Cell$T@0@@1 Tclass._module.short)) (and ($IsGoodHeap $Heap@7) ($IsHeapAnchor $Heap@7))) (and (and (and ($Is refType |call3formal@x#0@0@@0| (Tclass._System.array call0formal@_module.Cell$T@0@@1)) ($IsAlloc refType |call3formal@x#0@0@@0| (Tclass._System.array call0formal@_module.Cell$T@0@@1) $Heap@7)) (and ($Is refType |call4formal@y#0@0| (Tclass._System.array call0formal@_module.Cell$T@0@@1)) ($IsAlloc refType |call4formal@y#0@0| (Tclass._System.array call0formal@_module.Cell$T@0@@1) $Heap@7))) (and (and (= |call3formal@x#0@0@@0| |call4formal@y#0@0|) (= |call4formal@y#0@0| ($Unbox refType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 call3formal@this@0) _module.Cell.arr)))) (and (forall (($o@@27 T@U) ) (!  (=> (and (or (not (= $o@@27 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@6 $o@@27) alloc)))) (= (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 $o@@27) (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@6 $o@@27)))
 :pattern ( (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 $o@@27))
)) ($HeapSucc $Heap@6 $Heap@7))))) (and (=> (= (ControlFlow 0 37) (- 0 41)) (or (not (= |call3formal@x#0@0@@0| null)) (not true))) (=> (or (not (= |call3formal@x#0@0@@0| null)) (not true)) (and (=> (= (ControlFlow 0 37) (- 0 40)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length |call3formal@x#0@0@@0|)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length |call3formal@x#0@0@@0|))) (=> (= |$rhs#6@0| (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 |call3formal@x#0@0@@0|) (IndexField (LitInt 0)))))) (and (=> (= (ControlFlow 0 37) (- 0 39)) (or (not (= |call4formal@y#0@0| null)) (not true))) (=> (or (not (= |call4formal@y#0@0| null)) (not true)) (and (=> (= (ControlFlow 0 37) (- 0 38)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length |call4formal@y#0@0|)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (_System.array.Length |call4formal@y#0@0|))) (=> (= |$rhs#7@0| (U_2_int ($Unbox intType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@7 |call4formal@y#0@0|) (IndexField (LitInt 0)))))) (and (=> (= (ControlFlow 0 37) 36) anon13_Then_correct) (=> (= (ControlFlow 0 37) 31) anon13_Else_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap@@2) ($IsHeapAnchor $Heap@@2)) (and (=> |defass#cell#0| (and ($Is refType |cell#0| (Tclass._module.Cell Tclass._module.short)) ($IsAlloc refType |cell#0| (Tclass._module.Cell Tclass._module.short) $Heap@@2))) true)) (and (and ($Is refType |a#0| (Tclass._System.array Tclass._module.short)) ($IsAlloc refType |a#0| (Tclass._System.array Tclass._module.short) $Heap@@2)) true)) (=> (and (and (and (and (<= (LitInt (- 0 10)) |x#0@@3|) (< |x#0@@3| 12000)) true) (and (and ($Is refType |b#0| (Tclass._System.array Tclass._module.short)) ($IsAlloc refType |b#0| (Tclass._System.array Tclass._module.short) $Heap@@2)) true)) (and (and (and (<= (LitInt (- 0 10)) |y#0|) (< |y#0| 12000)) true) (and (and ($Is refType |c#0@@7| (Tclass._System.array TBool)) ($IsAlloc refType |c#0@@7| (Tclass._System.array TBool) $Heap@@2)) true))) (=> (and (and (and (and (and ($Is refType |d#0| (Tclass._System.array TInt)) ($IsAlloc refType |d#0| (Tclass._System.array TInt) $Heap@@2)) true) (and (and ($Is refType |e#0| (Tclass._System.array Tclass._System.object?)) ($IsAlloc refType |e#0| (Tclass._System.array Tclass._System.object?) $Heap@@2)) true)) (and (and (and ($Is refType |f#0| (Tclass._System.array (Tclass._module.Cell? TReal))) ($IsAlloc refType |f#0| (Tclass._System.array (Tclass._module.Cell? TReal)) $Heap@@2)) true) (and (and ($Is refType |e0#0| Tclass._System.object?) ($IsAlloc refType |e0#0| Tclass._System.object? $Heap@@2)) true))) (and (and (and (and ($Is refType |f0#0| (Tclass._module.Cell? TReal)) ($IsAlloc refType |f0#0| (Tclass._module.Cell? TReal) $Heap@@2)) true) (and (and ($Is refType |barray#0| (Tclass._System.array (Tclass._System.array Tclass._module.short))) ($IsAlloc refType |barray#0| (Tclass._System.array (Tclass._System.array Tclass._module.short)) $Heap@@2)) true)) (and (and (and ($Is refType |marray#0| (Tclass._System.array2 (Tclass._System.array Tclass._module.short))) ($IsAlloc refType |marray#0| (Tclass._System.array2 (Tclass._System.array Tclass._module.short)) $Heap@@2)) true) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 73) 37))))) anon0_correct)))))
PreconditionGeneratedEntry_correct))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
