(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated (T@T T@U) T@U)
(declare-fun $generated@@0 (T@T) Int)
(declare-fun $generated@@1 () T@T)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 (Bool) T@U)
(declare-fun $generated@@5 (T@U) Bool)
(declare-fun $generated@@6 (Int) T@U)
(declare-fun $generated@@7 (T@U) Int)
(declare-fun $generated@@8 (Real) T@U)
(declare-fun $generated@@9 (T@U) Real)
(declare-fun $generated@@18 (T@T T@U) T@U)
(declare-fun $generated@@19 (T@T T@U) T@U)
(declare-fun $generated@@24 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@28 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 (T@T T@T) T@T)
(declare-fun $generated@@31 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@32 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@33 (T@T) T@T)
(declare-fun $generated@@34 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@0 $generated@@1) 0) (= ($generated@@0 $generated@@2) 1)) (= ($generated@@0 $generated@@3) 2)) (forall (($generated@@10 Bool) ) (! (= ($generated@@5 ($generated@@4 $generated@@10)) $generated@@10)
 :pattern ( ($generated@@4 $generated@@10))
))) (forall (($generated@@11 T@U) ) (! (= ($generated@@4 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 Int) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Real) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))))
(assert (forall (($generated@@16 T@U) ($generated@@17 T@T) ) (! (= ($generated $generated@@17 $generated@@16) $generated@@16)
 :pattern ( ($generated $generated@@17 $generated@@16))
)))
(assert (forall (($generated@@20 T@U) ($generated@@21 T@T) ) (! (= ($generated@@19 $generated@@21 ($generated@@18 $generated@@21 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@18 $generated@@21 $generated@@20))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@18 $generated@@23 ($generated@@19 $generated@@23 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@19 $generated@@23 $generated@@22))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@35 T@T) ($generated@@36 T@T) ($generated@@37 T@T) ($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@U) ) (! (= ($generated@@24 $generated@@35 $generated@@36 $generated@@37 ($generated@@31 $generated@@35 $generated@@36 $generated@@37 $generated@@39 $generated@@40 $generated@@41 $generated@@38) $generated@@40 $generated@@41) $generated@@38)
 :weight 0
)) (and (forall (($generated@@42 T@T) ($generated@@43 T@T) ($generated@@44 T@T) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ) (!  (or (= $generated@@47 $generated@@49) (= ($generated@@24 $generated@@42 $generated@@43 $generated@@44 ($generated@@31 $generated@@42 $generated@@43 $generated@@44 $generated@@46 $generated@@47 $generated@@48 $generated@@45) $generated@@49 $generated@@50) ($generated@@24 $generated@@42 $generated@@43 $generated@@44 $generated@@46 $generated@@49 $generated@@50)))
 :weight 0
)) (forall (($generated@@51 T@T) ($generated@@52 T@T) ($generated@@53 T@T) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ) (!  (or (= $generated@@57 $generated@@59) (= ($generated@@24 $generated@@51 $generated@@52 $generated@@53 ($generated@@31 $generated@@51 $generated@@52 $generated@@53 $generated@@55 $generated@@56 $generated@@57 $generated@@54) $generated@@58 $generated@@59) ($generated@@24 $generated@@51 $generated@@52 $generated@@53 $generated@@55 $generated@@58 $generated@@59)))
 :weight 0
)))) (= ($generated@@0 $generated@@25) 3)) (= ($generated@@0 $generated@@26) 4)) (forall (($generated@@60 T@T) ($generated@@61 T@T) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ) (! (= ($generated@@28 $generated@@60 $generated@@61 ($generated@@32 $generated@@60 $generated@@61 $generated@@63 $generated@@64 $generated@@62) $generated@@64) $generated@@62)
 :weight 0
))) (forall (($generated@@65 T@T) ($generated@@66 T@T) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (!  (or (= $generated@@69 $generated@@70) (= ($generated@@28 $generated@@65 $generated@@66 ($generated@@32 $generated@@65 $generated@@66 $generated@@68 $generated@@69 $generated@@67) $generated@@70) ($generated@@28 $generated@@65 $generated@@66 $generated@@68 $generated@@70)))
 :weight 0
))) (= ($generated@@0 $generated@@29) 5)) (forall (($generated@@71 T@T) ($generated@@72 T@T) ) (= ($generated@@0 ($generated@@30 $generated@@71 $generated@@72)) 6))) (forall (($generated@@73 T@T) ($generated@@74 T@T) ) (! (= ($generated@@33 ($generated@@30 $generated@@73 $generated@@74)) $generated@@73)
 :pattern ( ($generated@@30 $generated@@73 $generated@@74))
))) (forall (($generated@@75 T@T) ($generated@@76 T@T) ) (! (= ($generated@@34 ($generated@@30 $generated@@75 $generated@@76)) $generated@@76)
 :pattern ( ($generated@@30 $generated@@75 $generated@@76))
))))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 Bool) ($generated@@81 T@U) ($generated@@82 T@U) ) (! (= ($generated@@5 ($generated@@24 $generated@@25 $generated@@26 $generated@@1 ($generated@@27 $generated@@77 $generated@@78 $generated@@79 $generated@@80) $generated@@81 $generated@@82))  (=> (and (or (not (= $generated@@81 $generated@@77)) (not true)) ($generated@@5 ($generated@@18 $generated@@1 ($generated@@28 $generated@@26 $generated@@29 ($generated@@28 $generated@@25 ($generated@@30 $generated@@26 $generated@@29) $generated@@78 $generated@@81) $generated@@79)))) $generated@@80))
 :pattern ( ($generated@@24 $generated@@25 $generated@@26 $generated@@1 ($generated@@27 $generated@@77 $generated@@78 $generated@@79 $generated@@80) $generated@@81 $generated@@82))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@T) ) (! (= ($generated@@19 $generated@@84 ($generated $generated@@84 $generated@@83)) ($generated $generated@@29 ($generated@@19 $generated@@84 $generated@@83)))
 :pattern ( ($generated@@19 $generated@@84 ($generated $generated@@84 $generated@@83)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@85 () T@U)
(declare-fun $generated@@86 () T@U)
(declare-fun $generated@@87 () T@U)
(declare-fun $generated@@88 () T@U)
(declare-fun $generated@@89 () (_ BitVec 8))
(declare-fun $generated@@90 (T@U) (_ BitVec 8))
(declare-fun $generated@@91 () T@T)
(declare-fun $generated@@92 ((_ BitVec 8)) T@U)
(declare-fun $generated@@93 () (_ BitVec 8))
(declare-fun $generated@@94 () (_ BitVec 8))
(declare-fun $generated@@95 () (_ BitVec 8))
(declare-fun $generated@@96 () (_ BitVec 7))
(declare-fun $generated@@97 (T@U) (_ BitVec 7))
(declare-fun $generated@@98 () T@T)
(declare-fun $generated@@99 ((_ BitVec 7)) T@U)
(declare-fun $generated@@100 () (_ BitVec 7))
(declare-fun $generated@@101 () (_ BitVec 16))
(declare-fun $generated@@102 (T@U) (_ BitVec 16))
(declare-fun $generated@@103 () T@T)
(declare-fun $generated@@104 ((_ BitVec 16)) T@U)
(declare-fun $generated@@105 () (_ BitVec 16))
(declare-fun $generated@@106 () (_ BitVec 16))
(declare-fun $generated@@107 () (_ BitVec 16))
(declare-fun $generated@@108 () (_ BitVec 15))
(declare-fun $generated@@109 (T@U) (_ BitVec 15))
(declare-fun $generated@@110 () T@T)
(declare-fun $generated@@111 ((_ BitVec 15)) T@U)
(declare-fun $generated@@112 () (_ BitVec 15))
(declare-fun $generated@@113 (T@U) Bool)
(declare-fun $generated@@114 (T@U) Bool)
(declare-fun $generated@@115 () Int)
(assert  (and (and (and (and (and (and (and (and (and (and (and (= ($generated@@0 $generated@@91) 7) (forall (($generated@@116 (_ BitVec 8)) ) (! (= ($generated@@90 ($generated@@92 $generated@@116)) $generated@@116)
 :pattern ( ($generated@@92 $generated@@116))
))) (forall (($generated@@117 T@U) ) (! (= ($generated@@92 ($generated@@90 $generated@@117)) $generated@@117)
 :pattern ( ($generated@@90 $generated@@117))
))) (= ($generated@@0 $generated@@98) 8)) (forall (($generated@@118 (_ BitVec 7)) ) (! (= ($generated@@97 ($generated@@99 $generated@@118)) $generated@@118)
 :pattern ( ($generated@@99 $generated@@118))
))) (forall (($generated@@119 T@U) ) (! (= ($generated@@99 ($generated@@97 $generated@@119)) $generated@@119)
 :pattern ( ($generated@@97 $generated@@119))
))) (= ($generated@@0 $generated@@103) 9)) (forall (($generated@@120 (_ BitVec 16)) ) (! (= ($generated@@102 ($generated@@104 $generated@@120)) $generated@@120)
 :pattern ( ($generated@@104 $generated@@120))
))) (forall (($generated@@121 T@U) ) (! (= ($generated@@104 ($generated@@102 $generated@@121)) $generated@@121)
 :pattern ( ($generated@@102 $generated@@121))
))) (= ($generated@@0 $generated@@110) 10)) (forall (($generated@@122 (_ BitVec 15)) ) (! (= ($generated@@109 ($generated@@111 $generated@@122)) $generated@@122)
 :pattern ( ($generated@@111 $generated@@122))
))) (forall (($generated@@123 T@U) ) (! (= ($generated@@111 ($generated@@109 $generated@@123)) $generated@@123)
 :pattern ( ($generated@@109 $generated@@123))
))))
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@124  (=> (and (= $generated@@85 ($generated@@27 $generated@@86 $generated@@87 $generated@@88 false)) (= $generated@@89 ($generated@@90 ($generated $generated@@91 ($generated@@92 #xfa))))) (and (=> (= (ControlFlow 0 2) (- 0 7)) (or (not (= ($generated@@90 ($generated $generated@@91 ($generated@@92 #x02))) #x00)) (not true))) (=> (or (not (= ($generated@@90 ($generated $generated@@91 ($generated@@92 #x02))) #x00)) (not true)) (=> (= $generated@@93 (bvudiv $generated@@89 #x02)) (=> (and (= $generated@@94 (bvmul $generated@@93 #x02)) (= $generated@@95 (bvadd $generated@@94 #x06))) (and (=> (= (ControlFlow 0 2) (- 0 6)) (= $generated@@95 ($generated@@90 ($generated $generated@@91 ($generated@@92 #x00))))) (=> (= $generated@@95 ($generated@@90 ($generated $generated@@91 ($generated@@92 #x00)))) (=> (and (= $generated@@96 ($generated@@97 ($generated $generated@@98 ($generated@@99 #b1111110)))) (= $generated@@100 (bvadd $generated@@96 #b0000101))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (= $generated@@100 ($generated@@97 ($generated $generated@@98 ($generated@@99 #b0000011))))) (=> (= $generated@@100 ($generated@@97 ($generated $generated@@98 ($generated@@99 #b0000011)))) (=> (= $generated@@101 ($generated@@102 ($generated $generated@@103 ($generated@@104 #xfffa)))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (not (= ($generated@@102 ($generated $generated@@103 ($generated@@104 #x0002))) #x0000)) (not true))) (=> (or (not (= ($generated@@102 ($generated $generated@@103 ($generated@@104 #x0002))) #x0000)) (not true)) (=> (= $generated@@105 (bvudiv $generated@@101 #x0002)) (=> (and (= $generated@@106 (bvmul $generated@@105 #x0002)) (= $generated@@107 (bvadd $generated@@106 #x000a))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (= $generated@@107 ($generated@@102 ($generated $generated@@103 ($generated@@104 #x0004))))) (=> (= $generated@@107 ($generated@@102 ($generated $generated@@103 ($generated@@104 #x0004)))) (=> (= $generated@@108 ($generated@@109 ($generated $generated@@110 ($generated@@111 #b111111111111011)))) (=> (and (= $generated@@112 (bvadd $generated@@108 #b000000000000110)) (= (ControlFlow 0 2) (- 0 1))) (= $generated@@112 ($generated@@109 ($generated $generated@@110 ($generated@@111 #b000000000000001)))))))))))))))))))))))))
(let (($generated@@125  (=> (and (and ($generated@@113 $generated@@87) ($generated@@114 $generated@@87)) (and (= 0 $generated@@115) (= (ControlFlow 0 8) 2))) $generated@@124)))
$generated@@125)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
