(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U T@U) T@U)
(declare-fun $generated@@19 (T@U T@U) Bool)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@30 (T@U) Int)
(declare-fun $generated@@31 () T@U)
(declare-fun $generated@@32 (Int) Int)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@41 (T@T T@U T@U) Bool)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 (T@U) T@U)
(declare-fun $generated@@44 (T@U T@U) Bool)
(declare-fun $generated@@48 (T@U T@U T@U) Bool)
(declare-fun $generated@@49 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@62 () T@T)
(declare-fun $generated@@63 (T@U) T@U)
(declare-fun $generated@@64 (T@U Int) T@U)
(declare-fun $generated@@69 (T@U) T@U)
(declare-fun $generated@@71 (T@U) T@U)
(declare-fun $generated@@73 (T@U) T@U)
(declare-fun $generated@@78 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@79 () T@T)
(declare-fun $generated@@80 () T@T)
(declare-fun $generated@@81 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@82 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@83 () T@T)
(declare-fun $generated@@84 (T@T T@T) T@T)
(declare-fun $generated@@85 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@86 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@87 (T@T) T@T)
(declare-fun $generated@@88 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (forall (($generated@@20 T@U) ($generated@@21 T@U) ) (! ($generated@@19 ($generated@@18 $generated@@20 $generated@@21) $generated@@21)
 :pattern ( ($generated@@18 $generated@@20 $generated@@21))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@U) ($generated@@24 T@U) ) (!  (=> ($generated@@19 $generated@@22 $generated@@24) ($generated@@19 ($generated@@18 $generated@@22 $generated@@23) $generated@@24))
 :pattern ( ($generated@@18 $generated@@22 $generated@@23) ($generated@@19 $generated@@22 $generated@@24))
)))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@U) ($generated@@27 T@U) ) (! (= ($generated@@19 ($generated@@18 $generated@@25 $generated@@26) $generated@@27)  (or (= $generated@@27 $generated@@26) ($generated@@19 $generated@@25 $generated@@27)))
 :pattern ( ($generated@@19 ($generated@@18 $generated@@25 $generated@@26) $generated@@27))
)))
(assert (forall (($generated@@29 T@U) ) (!  (not ($generated@@19 $generated@@28 $generated@@29))
 :pattern ( ($generated@@19 $generated@@28 $generated@@29))
)))
(assert (= ($generated@@30 $generated@@31) 0))
(assert (forall (($generated@@33 Int) ) (! (= ($generated@@32 $generated@@33) $generated@@33)
 :pattern ( ($generated@@32 $generated@@33))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@T) ) (! (= ($generated@@34 $generated@@36 $generated@@35) $generated@@35)
 :pattern ( ($generated@@34 $generated@@36 $generated@@35))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@T) ) (! (= ($generated@@38 $generated@@40 ($generated@@37 $generated@@40 $generated@@39)) $generated@@39)
 :pattern ( ($generated@@37 $generated@@40 $generated@@39))
)))
(assert (= ($generated@@2 $generated@@42) 3))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@U) ) (! (= ($generated@@41 $generated@@42 $generated@@45 ($generated@@43 $generated@@46)) (forall (($generated@@47 T@U) ) (!  (=> ($generated@@19 $generated@@45 $generated@@47) ($generated@@44 $generated@@47 $generated@@46))
 :pattern ( ($generated@@19 $generated@@45 $generated@@47))
)))
 :pattern ( ($generated@@41 $generated@@42 $generated@@45 ($generated@@43 $generated@@46)))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@48 ($generated@@38 $generated@@53 $generated@@50) $generated@@51 $generated@@52) ($generated@@49 $generated@@53 $generated@@50 $generated@@51 $generated@@52))
 :pattern ( ($generated@@48 ($generated@@38 $generated@@53 $generated@@50) $generated@@51 $generated@@52))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@44 ($generated@@38 $generated@@56 $generated@@54) $generated@@55) ($generated@@41 $generated@@56 $generated@@54 $generated@@55))
 :pattern ( ($generated@@44 ($generated@@38 $generated@@56 $generated@@54) $generated@@55))
)))
(assert (forall (($generated@@57 T@U) ) (! (<= 0 ($generated@@30 $generated@@57))
 :pattern ( ($generated@@30 $generated@@57))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ) (! (= ($generated@@49 $generated@@42 $generated@@58 ($generated@@43 $generated@@59) $generated@@60) (forall (($generated@@61 T@U) ) (!  (=> ($generated@@19 $generated@@58 $generated@@61) ($generated@@48 $generated@@61 $generated@@59 $generated@@60))
 :pattern ( ($generated@@19 $generated@@58 $generated@@61))
)))
 :pattern ( ($generated@@49 $generated@@42 $generated@@58 ($generated@@43 $generated@@59) $generated@@60))
)))
(assert (= ($generated@@2 $generated@@62) 4))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ) (! (= ($generated@@49 $generated@@62 $generated@@65 ($generated@@63 $generated@@66) $generated@@67) (forall (($generated@@68 Int) ) (!  (=> (and (<= 0 $generated@@68) (< $generated@@68 ($generated@@30 $generated@@65))) ($generated@@48 ($generated@@64 $generated@@65 $generated@@68) $generated@@66 $generated@@67))
 :pattern ( ($generated@@64 $generated@@65 $generated@@68))
)))
 :pattern ( ($generated@@49 $generated@@62 $generated@@65 ($generated@@63 $generated@@66) $generated@@67))
)))
(assert (forall (($generated@@70 T@U) ) (! (= ($generated@@69 ($generated@@43 $generated@@70)) $generated@@70)
 :pattern ( ($generated@@43 $generated@@70))
)))
(assert (forall (($generated@@72 T@U) ) (! (= ($generated@@71 ($generated@@43 $generated@@72)) $generated)
 :pattern ( ($generated@@43 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ) (! (= ($generated@@73 ($generated@@63 $generated@@74)) $generated@@74)
 :pattern ( ($generated@@63 $generated@@74))
)))
(assert (forall (($generated@@75 T@U) ) (! (= ($generated@@71 ($generated@@63 $generated@@75)) $generated@@0)
 :pattern ( ($generated@@63 $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@T) ) (! (= ($generated@@37 $generated@@77 ($generated@@38 $generated@@77 $generated@@76)) $generated@@76)
 :pattern ( ($generated@@38 $generated@@77 $generated@@76))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ) (! (= ($generated@@78 $generated@@89 $generated@@90 $generated@@91 ($generated@@85 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@95 $generated@@92) $generated@@94 $generated@@95) $generated@@92)
 :weight 0
)) (and (forall (($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (!  (or (= $generated@@101 $generated@@103) (= ($generated@@78 $generated@@96 $generated@@97 $generated@@98 ($generated@@85 $generated@@96 $generated@@97 $generated@@98 $generated@@100 $generated@@101 $generated@@102 $generated@@99) $generated@@103 $generated@@104) ($generated@@78 $generated@@96 $generated@@97 $generated@@98 $generated@@100 $generated@@103 $generated@@104)))
 :weight 0
)) (forall (($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (!  (or (= $generated@@111 $generated@@113) (= ($generated@@78 $generated@@105 $generated@@106 $generated@@107 ($generated@@85 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@111 $generated@@108) $generated@@112 $generated@@113) ($generated@@78 $generated@@105 $generated@@106 $generated@@107 $generated@@109 $generated@@112 $generated@@113)))
 :weight 0
)))) (= ($generated@@2 $generated@@79) 5)) (= ($generated@@2 $generated@@80) 6)) (forall (($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (! (= ($generated@@82 $generated@@114 $generated@@115 ($generated@@86 $generated@@114 $generated@@115 $generated@@117 $generated@@118 $generated@@116) $generated@@118) $generated@@116)
 :weight 0
))) (forall (($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ) (!  (or (= $generated@@123 $generated@@124) (= ($generated@@82 $generated@@119 $generated@@120 ($generated@@86 $generated@@119 $generated@@120 $generated@@122 $generated@@123 $generated@@121) $generated@@124) ($generated@@82 $generated@@119 $generated@@120 $generated@@122 $generated@@124)))
 :weight 0
))) (= ($generated@@2 $generated@@83) 7)) (forall (($generated@@125 T@T) ($generated@@126 T@T) ) (= ($generated@@2 ($generated@@84 $generated@@125 $generated@@126)) 8))) (forall (($generated@@127 T@T) ($generated@@128 T@T) ) (! (= ($generated@@87 ($generated@@84 $generated@@127 $generated@@128)) $generated@@127)
 :pattern ( ($generated@@84 $generated@@127 $generated@@128))
))) (forall (($generated@@129 T@T) ($generated@@130 T@T) ) (! (= ($generated@@88 ($generated@@84 $generated@@129 $generated@@130)) $generated@@130)
 :pattern ( ($generated@@84 $generated@@129 $generated@@130))
))))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 Bool) ($generated@@135 T@U) ($generated@@136 T@U) ) (! (= ($generated@@7 ($generated@@78 $generated@@79 $generated@@80 $generated@@3 ($generated@@81 $generated@@131 $generated@@132 $generated@@133 $generated@@134) $generated@@135 $generated@@136))  (=> (and (or (not (= $generated@@135 $generated@@131)) (not true)) ($generated@@7 ($generated@@37 $generated@@3 ($generated@@82 $generated@@80 $generated@@83 ($generated@@82 $generated@@79 ($generated@@84 $generated@@80 $generated@@83) $generated@@132 $generated@@135) $generated@@133)))) $generated@@134))
 :pattern ( ($generated@@78 $generated@@79 $generated@@80 $generated@@3 ($generated@@81 $generated@@131 $generated@@132 $generated@@133 $generated@@134) $generated@@135 $generated@@136))
)))
(assert (forall (($generated@@137 T@U) ($generated@@138 T@U) ) (!  (=> ($generated@@44 $generated@@137 ($generated@@43 $generated@@138)) (and (= ($generated@@38 $generated@@42 ($generated@@37 $generated@@42 $generated@@137)) $generated@@137) ($generated@@41 $generated@@42 ($generated@@37 $generated@@42 $generated@@137) ($generated@@43 $generated@@138))))
 :pattern ( ($generated@@44 $generated@@137 ($generated@@43 $generated@@138)))
)))
(assert (forall (($generated@@139 T@U) ($generated@@140 T@U) ) (!  (=> ($generated@@44 $generated@@139 ($generated@@63 $generated@@140)) (and (= ($generated@@38 $generated@@62 ($generated@@37 $generated@@62 $generated@@139)) $generated@@139) ($generated@@41 $generated@@62 ($generated@@37 $generated@@62 $generated@@139) ($generated@@63 $generated@@140))))
 :pattern ( ($generated@@44 $generated@@139 ($generated@@63 $generated@@140)))
)))
(assert (forall (($generated@@141 Int) ) (! (= ($generated@@38 $generated@@4 ($generated@@8 ($generated@@32 $generated@@141))) ($generated@@34 $generated@@83 ($generated@@38 $generated@@4 ($generated@@8 $generated@@141))))
 :pattern ( ($generated@@38 $generated@@4 ($generated@@8 ($generated@@32 $generated@@141))))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@T) ) (! (= ($generated@@38 $generated@@143 ($generated@@34 $generated@@143 $generated@@142)) ($generated@@34 $generated@@83 ($generated@@38 $generated@@143 $generated@@142)))
 :pattern ( ($generated@@38 $generated@@143 ($generated@@34 $generated@@143 $generated@@142)))
)))
(assert (forall (($generated@@144 T@U) ) (!  (=> (= ($generated@@30 $generated@@144) 0) (= $generated@@144 $generated@@31))
 :pattern ( ($generated@@30 $generated@@144))
)))
(assert (forall (($generated@@145 T@U) ($generated@@146 T@U) ) (! (= ($generated@@41 $generated@@62 $generated@@145 ($generated@@63 $generated@@146)) (forall (($generated@@147 Int) ) (!  (=> (and (<= 0 $generated@@147) (< $generated@@147 ($generated@@30 $generated@@145))) ($generated@@44 ($generated@@64 $generated@@145 $generated@@147) $generated@@146))
 :pattern ( ($generated@@64 $generated@@145 $generated@@147))
)))
 :pattern ( ($generated@@41 $generated@@62 $generated@@145 ($generated@@63 $generated@@146)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 (T@U) Bool)
(declare-fun $generated@@153 (T@U) Bool)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let (($generated@@157  (=> (and (or (not (= ($generated@@30 $generated@@148) ($generated@@32 0))) (not true)) (= (ControlFlow 0 3) (- 0 2))) (and (<= 0 ($generated@@32 0)) (< ($generated@@32 0) ($generated@@30 $generated@@148))))))
(let (($generated@@158 true))
(let (($generated@@159  (=> (= $generated@@149 ($generated@@81 $generated@@150 $generated@@151 $generated@@1 false)) (and (=> (= (ControlFlow 0 4) 1) $generated@@158) (=> (= (ControlFlow 0 4) 3) $generated@@157)))))
(let (($generated@@160  (=> (and (and (and ($generated@@152 $generated@@151) ($generated@@153 $generated@@151)) (and ($generated@@41 $generated@@62 $generated@@148 ($generated@@63 $generated@@154)) ($generated@@49 $generated@@62 $generated@@148 ($generated@@63 $generated@@154) $generated@@151))) (and (and ($generated@@41 $generated@@42 $generated@@155 ($generated@@43 $generated@@154)) ($generated@@49 $generated@@42 $generated@@155 ($generated@@43 $generated@@154) $generated@@151)) (and (= 0 $generated@@156) (= (ControlFlow 0 5) 4)))) $generated@@159)))
$generated@@160)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
