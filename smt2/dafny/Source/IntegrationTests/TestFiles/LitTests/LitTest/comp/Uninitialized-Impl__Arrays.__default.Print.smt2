(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 (T@T) Int)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 (Bool) T@U)
(declare-fun $generated@@13 (T@U) Bool)
(declare-fun $generated@@14 (Int) T@U)
(declare-fun $generated@@15 (T@U) Int)
(declare-fun $generated@@16 (Real) T@U)
(declare-fun $generated@@17 (T@U) Real)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@U) Int)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@28 (T@U) T@U)
(declare-fun $generated@@29 (T@T T@U T@U) Bool)
(declare-fun $generated@@32 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@34 (T@U) T@U)
(declare-fun $generated@@38 (T@U) Int)
(declare-fun $generated@@39 () T@U)
(declare-fun $generated@@40 (T@T T@U) T@U)
(declare-fun $generated@@41 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 () T@T)
(declare-fun $generated@@44 (T@T T@T) T@T)
(declare-fun $generated@@45 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@46 (T@T) T@T)
(declare-fun $generated@@47 (T@T) T@T)
(declare-fun $generated@@68 (Int) Int)
(declare-fun $generated@@70 (T@T T@U) T@U)
(declare-fun $generated@@73 (T@T T@U) T@U)
(declare-fun $generated@@78 (T@U T@U T@U) Bool)
(declare-fun $generated@@83 (T@U) T@U)
(declare-fun $generated@@88 (Int Int) Int)
(declare-fun $generated@@91 (T@U T@U) Bool)
(declare-fun $generated@@93 () T@T)
(declare-fun $generated@@100 () T@T)
(declare-fun $generated@@101 (T@U) T@U)
(declare-fun $generated@@102 (T@U Int) T@U)
(declare-fun $generated@@107 (T@U) T@U)
(declare-fun $generated@@110 (T@U) T@U)
(declare-fun $generated@@112 (T@U) T@U)
(declare-fun $generated@@116 (T@U) Bool)
(declare-fun $generated@@120 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@121 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@122 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@8 $generated@@9) 0) (= ($generated@@8 $generated@@10) 1)) (= ($generated@@8 $generated@@11) 2)) (forall (($generated@@18 Bool) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Int) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 Real) ) (! (= ($generated@@17 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 T@U) ) (! (= ($generated@@16 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7)
)
(assert (= ($generated@@24 $generated) $generated@@1))
(assert (= ($generated@@24 $generated@@0) $generated@@2))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@U) ) (!  (=> (and (or (not (= $generated@@31 $generated@@27)) (not true)) (= ($generated@@28 $generated@@31) ($generated@@26 $generated@@30))) ($generated@@29 $generated@@10 ($generated@@14 ($generated@@25 $generated@@31)) $generated@@0))
 :pattern ( ($generated@@25 $generated@@31) ($generated@@26 $generated@@30))
)))
(assert (= ($generated@@8 $generated@@33) 3))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 T@U) ) (! (= ($generated@@32 $generated@@33 $generated@@36 ($generated@@34 $generated@@35) $generated@@37) ($generated@@32 $generated@@33 $generated@@36 ($generated@@26 $generated@@35) $generated@@37))
 :pattern ( ($generated@@32 $generated@@33 $generated@@36 ($generated@@34 $generated@@35) $generated@@37))
 :pattern ( ($generated@@32 $generated@@33 $generated@@36 ($generated@@26 $generated@@35) $generated@@37))
)))
(assert (= ($generated@@38 $generated@@39) 0))
(assert  (and (and (and (and (and (and (forall (($generated@@48 T@T) ($generated@@49 T@T) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ) (! (= ($generated@@41 $generated@@48 $generated@@49 ($generated@@45 $generated@@48 $generated@@49 $generated@@51 $generated@@52 $generated@@50) $generated@@52) $generated@@50)
 :weight 0
)) (forall (($generated@@53 T@T) ($generated@@54 T@T) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ) (!  (or (= $generated@@57 $generated@@58) (= ($generated@@41 $generated@@53 $generated@@54 ($generated@@45 $generated@@53 $generated@@54 $generated@@56 $generated@@57 $generated@@55) $generated@@58) ($generated@@41 $generated@@53 $generated@@54 $generated@@56 $generated@@58)))
 :weight 0
))) (= ($generated@@8 $generated@@42) 4)) (= ($generated@@8 $generated@@43) 5)) (forall (($generated@@59 T@T) ($generated@@60 T@T) ) (= ($generated@@8 ($generated@@44 $generated@@59 $generated@@60)) 6))) (forall (($generated@@61 T@T) ($generated@@62 T@T) ) (! (= ($generated@@46 ($generated@@44 $generated@@61 $generated@@62)) $generated@@61)
 :pattern ( ($generated@@44 $generated@@61 $generated@@62))
))) (forall (($generated@@63 T@T) ($generated@@64 T@T) ) (! (= ($generated@@47 ($generated@@44 $generated@@63 $generated@@64)) $generated@@64)
 :pattern ( ($generated@@44 $generated@@63 $generated@@64))
))))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ) (! (= ($generated@@32 $generated@@33 $generated@@66 ($generated@@26 $generated@@65) $generated@@67)  (or (= $generated@@66 $generated@@27) ($generated@@13 ($generated@@40 $generated@@9 ($generated@@41 $generated@@42 $generated@@43 ($generated@@41 $generated@@33 ($generated@@44 $generated@@42 $generated@@43) $generated@@67 $generated@@66) $generated@@4)))))
 :pattern ( ($generated@@32 $generated@@33 $generated@@66 ($generated@@26 $generated@@65) $generated@@67))
)))
(assert (forall (($generated@@69 Int) ) (! (= ($generated@@68 $generated@@69) $generated@@69)
 :pattern ( ($generated@@68 $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@T) ) (! (= ($generated@@70 $generated@@72 $generated@@71) $generated@@71)
 :pattern ( ($generated@@70 $generated@@72 $generated@@71))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@T) ) (! (= ($generated@@73 $generated@@75 ($generated@@40 $generated@@75 $generated@@74)) $generated@@74)
 :pattern ( ($generated@@40 $generated@@75 $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@29 $generated@@33 $generated@@77 ($generated@@34 $generated@@76))  (and ($generated@@29 $generated@@33 $generated@@77 ($generated@@26 $generated@@76)) (or (not (= $generated@@77 $generated@@27)) (not true))))
 :pattern ( ($generated@@29 $generated@@33 $generated@@77 ($generated@@34 $generated@@76)))
 :pattern ( ($generated@@29 $generated@@33 $generated@@77 ($generated@@26 $generated@@76)))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@78 ($generated@@73 $generated@@82 $generated@@79) $generated@@80 $generated@@81) ($generated@@32 $generated@@82 $generated@@79 $generated@@80 $generated@@81))
 :pattern ( ($generated@@78 ($generated@@73 $generated@@82 $generated@@79) $generated@@80 $generated@@81))
)))
(assert (forall (($generated@@84 T@U) ) (!  (and (= ($generated@@24 ($generated@@26 $generated@@84)) $generated@@5) (= ($generated@@83 ($generated@@26 $generated@@84)) $generated@@7))
 :pattern ( ($generated@@26 $generated@@84))
)))
(assert (forall (($generated@@85 T@U) ) (!  (and (= ($generated@@24 ($generated@@34 $generated@@85)) $generated@@6) (= ($generated@@83 ($generated@@34 $generated@@85)) $generated@@7))
 :pattern ( ($generated@@34 $generated@@85))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@29 $generated@@33 $generated@@87 ($generated@@26 $generated@@86))  (or (= $generated@@87 $generated@@27) (= ($generated@@28 $generated@@87) ($generated@@26 $generated@@86))))
 :pattern ( ($generated@@29 $generated@@33 $generated@@87 ($generated@@26 $generated@@86)))
)))
(assert (forall (($generated@@89 Int) ($generated@@90 Int) ) (! (= ($generated@@88 $generated@@89 $generated@@90) (div $generated@@89 $generated@@90))
 :pattern ( ($generated@@88 $generated@@89 $generated@@90))
)))
(assert (forall (($generated@@92 T@U) ) (!  (=> ($generated@@91 $generated@@92 $generated@@0) (and (= ($generated@@73 $generated@@10 ($generated@@40 $generated@@10 $generated@@92)) $generated@@92) ($generated@@29 $generated@@10 ($generated@@40 $generated@@10 $generated@@92) $generated@@0)))
 :pattern ( ($generated@@91 $generated@@92 $generated@@0))
)))
(assert (= ($generated@@8 $generated@@93) 7))
(assert (forall (($generated@@94 T@U) ) (!  (=> ($generated@@91 $generated@@94 $generated) (and (= ($generated@@73 $generated@@93 ($generated@@40 $generated@@93 $generated@@94)) $generated@@94) ($generated@@29 $generated@@93 ($generated@@40 $generated@@93 $generated@@94) $generated)))
 :pattern ( ($generated@@91 $generated@@94 $generated))
)))
(assert (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@T) ) (! (= ($generated@@91 ($generated@@73 $generated@@97 $generated@@95) $generated@@96) ($generated@@29 $generated@@97 $generated@@95 $generated@@96))
 :pattern ( ($generated@@91 ($generated@@73 $generated@@97 $generated@@95) $generated@@96))
)))
(assert (forall (($generated@@98 T@U) ) (! (<= 0 ($generated@@25 $generated@@98))
 :pattern ( ($generated@@25 $generated@@98))
)))
(assert (forall (($generated@@99 T@U) ) (! (<= 0 ($generated@@38 $generated@@99))
 :pattern ( ($generated@@38 $generated@@99))
)))
(assert (= ($generated@@8 $generated@@100) 8))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (! (= ($generated@@32 $generated@@100 $generated@@103 ($generated@@101 $generated@@104) $generated@@105) (forall (($generated@@106 Int) ) (!  (=> (and (<= 0 $generated@@106) (< $generated@@106 ($generated@@38 $generated@@103))) ($generated@@78 ($generated@@102 $generated@@103 $generated@@106) $generated@@104 $generated@@105))
 :pattern ( ($generated@@102 $generated@@103 $generated@@106))
)))
 :pattern ( ($generated@@32 $generated@@100 $generated@@103 ($generated@@101 $generated@@104) $generated@@105))
)))
(assert (forall (($generated@@108 T@U) ) (! (= ($generated@@107 ($generated@@101 $generated@@108)) $generated@@108)
 :pattern ( ($generated@@101 $generated@@108))
)))
(assert (forall (($generated@@109 T@U) ) (! (= ($generated@@24 ($generated@@101 $generated@@109)) $generated@@3)
 :pattern ( ($generated@@101 $generated@@109))
)))
(assert (forall (($generated@@111 T@U) ) (! (= ($generated@@110 ($generated@@26 $generated@@111)) $generated@@111)
 :pattern ( ($generated@@26 $generated@@111))
)))
(assert (forall (($generated@@113 T@U) ) (! (= ($generated@@112 ($generated@@34 $generated@@113)) $generated@@113)
 :pattern ( ($generated@@34 $generated@@113))
)))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@T) ) (! (= ($generated@@40 $generated@@115 ($generated@@73 $generated@@115 $generated@@114)) $generated@@114)
 :pattern ( ($generated@@73 $generated@@115 $generated@@114))
)))
(assert (forall (($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ) (!  (=> (and (and ($generated@@116 $generated@@118) (and (or (not (= $generated@@119 $generated@@27)) (not true)) (= ($generated@@28 $generated@@119) ($generated@@26 $generated@@117)))) ($generated@@13 ($generated@@40 $generated@@9 ($generated@@41 $generated@@42 $generated@@43 ($generated@@41 $generated@@33 ($generated@@44 $generated@@42 $generated@@43) $generated@@118 $generated@@119) $generated@@4)))) ($generated@@32 $generated@@10 ($generated@@14 ($generated@@25 $generated@@119)) $generated@@0 $generated@@118))
 :pattern ( ($generated@@25 $generated@@119) ($generated@@40 $generated@@9 ($generated@@41 $generated@@42 $generated@@43 ($generated@@41 $generated@@33 ($generated@@44 $generated@@42 $generated@@43) $generated@@118 $generated@@119) $generated@@4)) ($generated@@26 $generated@@117))
)))
(assert  (and (forall (($generated@@123 T@T) ($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ) (! (= ($generated@@120 $generated@@123 $generated@@124 $generated@@125 ($generated@@122 $generated@@123 $generated@@124 $generated@@125 $generated@@127 $generated@@128 $generated@@129 $generated@@126) $generated@@128 $generated@@129) $generated@@126)
 :weight 0
)) (and (forall (($generated@@130 T@T) ($generated@@131 T@T) ($generated@@132 T@T) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 T@U) ) (!  (or (= $generated@@135 $generated@@137) (= ($generated@@120 $generated@@130 $generated@@131 $generated@@132 ($generated@@122 $generated@@130 $generated@@131 $generated@@132 $generated@@134 $generated@@135 $generated@@136 $generated@@133) $generated@@137 $generated@@138) ($generated@@120 $generated@@130 $generated@@131 $generated@@132 $generated@@134 $generated@@137 $generated@@138)))
 :weight 0
)) (forall (($generated@@139 T@T) ($generated@@140 T@T) ($generated@@141 T@T) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 T@U) ) (!  (or (= $generated@@145 $generated@@147) (= ($generated@@120 $generated@@139 $generated@@140 $generated@@141 ($generated@@122 $generated@@139 $generated@@140 $generated@@141 $generated@@143 $generated@@144 $generated@@145 $generated@@142) $generated@@146 $generated@@147) ($generated@@120 $generated@@139 $generated@@140 $generated@@141 $generated@@143 $generated@@146 $generated@@147)))
 :weight 0
)))))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 Bool) ($generated@@152 T@U) ($generated@@153 T@U) ) (! (= ($generated@@13 ($generated@@120 $generated@@33 $generated@@42 $generated@@9 ($generated@@121 $generated@@148 $generated@@149 $generated@@150 $generated@@151) $generated@@152 $generated@@153))  (=> (and (or (not (= $generated@@152 $generated@@148)) (not true)) ($generated@@13 ($generated@@40 $generated@@9 ($generated@@41 $generated@@42 $generated@@43 ($generated@@41 $generated@@33 ($generated@@44 $generated@@42 $generated@@43) $generated@@149 $generated@@152) $generated@@150)))) $generated@@151))
 :pattern ( ($generated@@120 $generated@@33 $generated@@42 $generated@@9 ($generated@@121 $generated@@148 $generated@@149 $generated@@150 $generated@@151) $generated@@152 $generated@@153))
)))
(assert (forall (($generated@@154 T@U) ($generated@@155 T@U) ) (!  (=> ($generated@@91 $generated@@154 ($generated@@101 $generated@@155)) (and (= ($generated@@73 $generated@@100 ($generated@@40 $generated@@100 $generated@@154)) $generated@@154) ($generated@@29 $generated@@100 ($generated@@40 $generated@@100 $generated@@154) ($generated@@101 $generated@@155))))
 :pattern ( ($generated@@91 $generated@@154 ($generated@@101 $generated@@155)))
)))
(assert (forall (($generated@@156 T@U) ($generated@@157 T@U) ) (!  (=> ($generated@@91 $generated@@157 ($generated@@26 $generated@@156)) (and (= ($generated@@73 $generated@@33 ($generated@@40 $generated@@33 $generated@@157)) $generated@@157) ($generated@@29 $generated@@33 ($generated@@40 $generated@@33 $generated@@157) ($generated@@26 $generated@@156))))
 :pattern ( ($generated@@91 $generated@@157 ($generated@@26 $generated@@156)))
)))
(assert (forall (($generated@@158 T@U) ($generated@@159 T@U) ) (!  (=> ($generated@@91 $generated@@159 ($generated@@34 $generated@@158)) (and (= ($generated@@73 $generated@@33 ($generated@@40 $generated@@33 $generated@@159)) $generated@@159) ($generated@@29 $generated@@33 ($generated@@40 $generated@@33 $generated@@159) ($generated@@34 $generated@@158))))
 :pattern ( ($generated@@91 $generated@@159 ($generated@@34 $generated@@158)))
)))
(assert (forall (($generated@@160 Int) ) (! (= ($generated@@73 $generated@@10 ($generated@@14 ($generated@@68 $generated@@160))) ($generated@@70 $generated@@43 ($generated@@73 $generated@@10 ($generated@@14 $generated@@160))))
 :pattern ( ($generated@@73 $generated@@10 ($generated@@14 ($generated@@68 $generated@@160))))
)))
(assert (forall (($generated@@161 T@U) ($generated@@162 T@T) ) (! (= ($generated@@73 $generated@@162 ($generated@@70 $generated@@162 $generated@@161)) ($generated@@70 $generated@@43 ($generated@@73 $generated@@162 $generated@@161)))
 :pattern ( ($generated@@73 $generated@@162 ($generated@@70 $generated@@162 $generated@@161)))
)))
(assert (forall (($generated@@163 T@U) ) (!  (=> (= ($generated@@38 $generated@@163) 0) (= $generated@@163 $generated@@39))
 :pattern ( ($generated@@38 $generated@@163))
)))
(assert (forall (($generated@@164 T@U) ($generated@@165 T@U) ) (! ($generated@@32 $generated@@10 $generated@@165 $generated@@0 $generated@@164)
 :pattern ( ($generated@@32 $generated@@10 $generated@@165 $generated@@0 $generated@@164))
)))
(assert (forall (($generated@@166 T@U) ($generated@@167 T@U) ) (! ($generated@@32 $generated@@93 $generated@@167 $generated $generated@@166)
 :pattern ( ($generated@@32 $generated@@93 $generated@@167 $generated $generated@@166))
)))
(assert (forall (($generated@@168 T@U) ($generated@@169 T@U) ) (! (= ($generated@@29 $generated@@100 $generated@@168 ($generated@@101 $generated@@169)) (forall (($generated@@170 Int) ) (!  (=> (and (<= 0 $generated@@170) (< $generated@@170 ($generated@@38 $generated@@168))) ($generated@@91 ($generated@@102 $generated@@168 $generated@@170) $generated@@169))
 :pattern ( ($generated@@102 $generated@@168 $generated@@170))
)))
 :pattern ( ($generated@@29 $generated@@100 $generated@@168 ($generated@@101 $generated@@169)))
)))
(assert (forall (($generated@@171 T@U) ) (! ($generated@@29 $generated@@10 $generated@@171 $generated@@0)
 :pattern ( ($generated@@29 $generated@@10 $generated@@171 $generated@@0))
)))
(assert (forall (($generated@@172 T@U) ) (! ($generated@@29 $generated@@93 $generated@@172 $generated)
 :pattern ( ($generated@@29 $generated@@93 $generated@@172 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 () T@U)
(declare-fun $generated@@176 (T@U) Bool)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 () T@U)
(declare-fun $generated@@179 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@180 true))
(let (($generated@@181  (=> (or (not (= ($generated@@25 $generated@@173) 0)) (not true)) (and (=> (= (ControlFlow 0 2) (- 0 5)) (or (not (= $generated@@173 $generated@@27)) (not true))) (=> (or (not (= $generated@@173 $generated@@27)) (not true)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (not (= $generated@@173 $generated@@27)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (not (= ($generated@@68 2) 0)) (not true))) (=> (= (ControlFlow 0 2) (- 0 1)) (and (<= 0 ($generated@@88 ($generated@@25 $generated@@173) ($generated@@68 2))) (< ($generated@@88 ($generated@@25 $generated@@173) ($generated@@68 2)) ($generated@@25 $generated@@173)))))))))))
(let (($generated@@182  (=> (= $generated@@174 ($generated@@121 $generated@@27 $generated@@175 $generated@@4 false)) (and (=> (= (ControlFlow 0 7) (- 0 8)) (or (not (= $generated@@173 $generated@@27)) (not true))) (=> (or (not (= $generated@@173 $generated@@27)) (not true)) (and (=> (= (ControlFlow 0 7) 2) $generated@@181) (=> (= (ControlFlow 0 7) 6) $generated@@180)))))))
(let (($generated@@183  (=> (and (and (and ($generated@@116 $generated@@175) ($generated@@176 $generated@@175)) (and ($generated@@29 $generated@@33 $generated@@173 ($generated@@34 $generated@@177)) ($generated@@32 $generated@@33 $generated@@173 ($generated@@34 $generated@@177) $generated@@175))) (and (and ($generated@@29 $generated@@100 $generated@@178 ($generated@@101 $generated)) ($generated@@32 $generated@@100 $generated@@178 ($generated@@101 $generated) $generated@@175)) (and (= 0 $generated@@179) (= (ControlFlow 0 9) 7)))) $generated@@182)))
$generated@@183)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
