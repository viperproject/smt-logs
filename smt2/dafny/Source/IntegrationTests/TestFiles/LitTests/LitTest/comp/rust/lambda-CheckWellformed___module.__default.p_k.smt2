(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 () Int)
(declare-fun $generated@@21 (T@U) Bool)
(declare-fun $generated@@22 (T@U) Bool)
(declare-fun $generated@@23 (T@T T@U T@U) Bool)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 (T@U) Int)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@28 (T@U Int) T@U)
(declare-fun $generated@@29 (Int) Int)
(declare-fun $generated@@31 (T@U T@U T@U T@U T@U) T@U)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@36 () T@U)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@44 (T@U) Bool)
(declare-fun $generated@@47 (T@U T@U) Bool)
(declare-fun $generated@@53 (T@U) T@U)
(declare-fun $generated@@58 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@59 () T@T)
(declare-fun $generated@@60 () T@T)
(declare-fun $generated@@61 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@62 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@63 () T@T)
(declare-fun $generated@@64 (T@T T@T) T@T)
(declare-fun $generated@@65 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@66 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@67 (T@T) T@T)
(declare-fun $generated@@68 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@3 $generated@@24) 3))
(assert  (=> (<= 0 $generated@@20) (forall (($generated@@30 T@U) ) (!  (=> (or ($generated@@22 $generated@@30) (and (< 0 $generated@@20) ($generated@@23 $generated@@24 $generated@@30 ($generated@@25 $generated)))) (= ($generated@@21 $generated@@30) (ite (> ($generated@@26 $generated@@30) 0)  (not ($generated@@8 ($generated@@27 $generated@@4 ($generated@@28 $generated@@30 ($generated@@29 0))))) false)))
 :pattern ( ($generated@@21 $generated@@30))
))))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@U) ) (! (= ($generated@@31 ($generated@@25 $generated) $generated $generated@@34 $generated@@32 $generated@@35) ($generated@@33 $generated@@4 ($generated@@7 ($generated@@21 ($generated@@27 $generated@@24 $generated@@35)))))
 :pattern ( ($generated@@31 ($generated@@25 $generated) $generated $generated@@34 $generated@@32 $generated@@35))
)))
(assert (= ($generated@@26 $generated@@36) 0))
(assert (forall (($generated@@37 Int) ) (! (= ($generated@@29 $generated@@37) $generated@@37)
 :pattern ( ($generated@@29 $generated@@37))
)))
(assert (forall (($generated@@39 T@U) ($generated@@40 T@T) ) (! (= ($generated@@38 $generated@@40 $generated@@39) $generated@@39)
 :pattern ( ($generated@@38 $generated@@40 $generated@@39))
)))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@T) ) (! (= ($generated@@33 $generated@@42 ($generated@@27 $generated@@42 $generated@@41)) $generated@@41)
 :pattern ( ($generated@@27 $generated@@42 $generated@@41))
)))
(assert  (=> (<= 0 $generated@@20) (forall (($generated@@43 T@U) ) (!  (=> (or ($generated@@22 ($generated@@38 $generated@@24 $generated@@43)) (and (< 0 $generated@@20) ($generated@@23 $generated@@24 $generated@@43 ($generated@@25 $generated)))) (= ($generated@@21 ($generated@@38 $generated@@24 $generated@@43)) (ite (> ($generated@@26 ($generated@@38 $generated@@24 $generated@@43)) 0)  (not ($generated@@8 ($generated@@27 $generated@@4 ($generated@@28 ($generated@@38 $generated@@24 $generated@@43) ($generated@@29 0))))) false)))
 :weight 3
 :pattern ( ($generated@@21 ($generated@@38 $generated@@24 $generated@@43)))
))))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@U) ) (! (= ($generated@@21 $generated@@46) ($generated@@8 ($generated@@27 $generated@@4 ($generated@@31 ($generated@@25 $generated) $generated $generated@@45 $generated@@32 ($generated@@33 $generated@@24 $generated@@46)))))
 :pattern ( ($generated@@21 $generated@@46) ($generated@@44 $generated@@45))
)))
(assert (forall (($generated@@48 T@U) ) (!  (=> ($generated@@47 $generated@@48 $generated) (and (= ($generated@@33 $generated@@4 ($generated@@27 $generated@@4 $generated@@48)) $generated@@48) ($generated@@23 $generated@@4 ($generated@@27 $generated@@4 $generated@@48) $generated)))
 :pattern ( ($generated@@47 $generated@@48 $generated))
)))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@47 ($generated@@33 $generated@@51 $generated@@49) $generated@@50) ($generated@@23 $generated@@51 $generated@@49 $generated@@50))
 :pattern ( ($generated@@47 ($generated@@33 $generated@@51 $generated@@49) $generated@@50))
)))
(assert (forall (($generated@@52 T@U) ) (! (<= 0 ($generated@@26 $generated@@52))
 :pattern ( ($generated@@26 $generated@@52))
)))
(assert (forall (($generated@@54 T@U) ) (! (= ($generated@@53 ($generated@@25 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@25 $generated@@54))
)))
(assert (forall (($generated@@55 T@U) ) (! (= ($generated@@19 ($generated@@25 $generated@@55)) $generated@@1)
 :pattern ( ($generated@@25 $generated@@55))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@27 $generated@@57 ($generated@@33 $generated@@57 $generated@@56)) $generated@@56)
 :pattern ( ($generated@@33 $generated@@57 $generated@@56))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@58 $generated@@69 $generated@@70 $generated@@71 ($generated@@65 $generated@@69 $generated@@70 $generated@@71 $generated@@73 $generated@@74 $generated@@75 $generated@@72) $generated@@74 $generated@@75) $generated@@72)
 :weight 0
)) (and (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (!  (or (= $generated@@81 $generated@@83) (= ($generated@@58 $generated@@76 $generated@@77 $generated@@78 ($generated@@65 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@81 $generated@@82 $generated@@79) $generated@@83 $generated@@84) ($generated@@58 $generated@@76 $generated@@77 $generated@@78 $generated@@80 $generated@@83 $generated@@84)))
 :weight 0
)) (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or (= $generated@@91 $generated@@93) (= ($generated@@58 $generated@@85 $generated@@86 $generated@@87 ($generated@@65 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@91 $generated@@88) $generated@@92 $generated@@93) ($generated@@58 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@92 $generated@@93)))
 :weight 0
)))) (= ($generated@@3 $generated@@59) 4)) (= ($generated@@3 $generated@@60) 5)) (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (! (= ($generated@@62 $generated@@94 $generated@@95 ($generated@@66 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@96) $generated@@98) $generated@@96)
 :weight 0
))) (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ) (!  (or (= $generated@@103 $generated@@104) (= ($generated@@62 $generated@@99 $generated@@100 ($generated@@66 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@101) $generated@@104) ($generated@@62 $generated@@99 $generated@@100 $generated@@102 $generated@@104)))
 :weight 0
))) (= ($generated@@3 $generated@@63) 6)) (forall (($generated@@105 T@T) ($generated@@106 T@T) ) (= ($generated@@3 ($generated@@64 $generated@@105 $generated@@106)) 7))) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (! (= ($generated@@67 ($generated@@64 $generated@@107 $generated@@108)) $generated@@107)
 :pattern ( ($generated@@64 $generated@@107 $generated@@108))
))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@68 ($generated@@64 $generated@@109 $generated@@110)) $generated@@110)
 :pattern ( ($generated@@64 $generated@@109 $generated@@110))
))))
(assert (forall (($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 Bool) ($generated@@115 T@U) ($generated@@116 T@U) ) (! (= ($generated@@8 ($generated@@58 $generated@@59 $generated@@60 $generated@@4 ($generated@@61 $generated@@111 $generated@@112 $generated@@113 $generated@@114) $generated@@115 $generated@@116))  (=> (and (or (not (= $generated@@115 $generated@@111)) (not true)) ($generated@@8 ($generated@@27 $generated@@4 ($generated@@62 $generated@@60 $generated@@63 ($generated@@62 $generated@@59 ($generated@@64 $generated@@60 $generated@@63) $generated@@112 $generated@@115) $generated@@113)))) $generated@@114))
 :pattern ( ($generated@@58 $generated@@59 $generated@@60 $generated@@4 ($generated@@61 $generated@@111 $generated@@112 $generated@@113 $generated@@114) $generated@@115 $generated@@116))
)))
(assert (forall (($generated@@117 T@U) ($generated@@118 T@U) ) (!  (=> ($generated@@47 $generated@@117 ($generated@@25 $generated@@118)) (and (= ($generated@@33 $generated@@24 ($generated@@27 $generated@@24 $generated@@117)) $generated@@117) ($generated@@23 $generated@@24 ($generated@@27 $generated@@24 $generated@@117) ($generated@@25 $generated@@118))))
 :pattern ( ($generated@@47 $generated@@117 ($generated@@25 $generated@@118)))
)))
(assert (forall (($generated@@119 Int) ) (! (= ($generated@@33 $generated@@5 ($generated@@9 ($generated@@29 $generated@@119))) ($generated@@38 $generated@@63 ($generated@@33 $generated@@5 ($generated@@9 $generated@@119))))
 :pattern ( ($generated@@33 $generated@@5 ($generated@@9 ($generated@@29 $generated@@119))))
)))
(assert (forall (($generated@@120 T@U) ($generated@@121 T@T) ) (! (= ($generated@@33 $generated@@121 ($generated@@38 $generated@@121 $generated@@120)) ($generated@@38 $generated@@63 ($generated@@33 $generated@@121 $generated@@120)))
 :pattern ( ($generated@@33 $generated@@121 ($generated@@38 $generated@@121 $generated@@120)))
)))
(assert (forall (($generated@@122 T@U) ) (!  (=> (= ($generated@@26 $generated@@122) 0) (= $generated@@122 $generated@@36))
 :pattern ( ($generated@@26 $generated@@122))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@U) ) (! (= ($generated@@23 $generated@@24 $generated@@123 ($generated@@25 $generated@@124)) (forall (($generated@@125 Int) ) (!  (=> (and (<= 0 $generated@@125) (< $generated@@125 ($generated@@26 $generated@@123))) ($generated@@47 ($generated@@28 $generated@@123 $generated@@125) $generated@@124))
 :pattern ( ($generated@@28 $generated@@123 $generated@@125))
)))
 :pattern ( ($generated@@23 $generated@@24 $generated@@123 ($generated@@25 $generated@@124)))
)))
(assert (forall (($generated@@126 T@U) ) (! ($generated@@23 $generated@@4 $generated@@126 $generated)
 :pattern ( ($generated@@23 $generated@@4 $generated@@126 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@132 true))
(let (($generated@@133  (=> (and (> ($generated@@26 $generated@@127) 0) (= (ControlFlow 0 3) (- 0 2))) (and (<= 0 ($generated@@29 0)) (< ($generated@@29 0) ($generated@@26 $generated@@127))))))
(let (($generated@@134 true))
(let (($generated@@135  (=> (= $generated@@128 ($generated@@61 $generated@@129 $generated@@130 $generated@@2 false)) (and (and (=> (= (ControlFlow 0 5) 1) $generated@@134) (=> (= (ControlFlow 0 5) 3) $generated@@133)) (=> (= (ControlFlow 0 5) 4) $generated@@132)))))
(let (($generated@@136  (=> (and (and (and ($generated@@44 $generated@@130) ($generated@@131 $generated@@130)) ($generated@@23 $generated@@24 $generated@@127 ($generated@@25 $generated))) (and (= 0 $generated@@20) (= (ControlFlow 0 6) 5))) $generated@@135)))
$generated@@136))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
