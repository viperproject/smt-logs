(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.MyBv () T@U)
(declare-fun tytagFamily$MyBv () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun bv4Type () T@T)
(declare-fun Tclass._module.MyBv () T@U)
(declare-fun U_2_bv4 (T@U) (_ BitVec 4))
(declare-fun bv4_2_U ((_ BitVec 4)) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc Tagclass._module.MyBv tytagFamily$MyBv)
)
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :qid |DafnyPreludebpl.108:29|
 :skolemid |1156|
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :qid |DafnyPreludebpl.102:29|
 :skolemid |1154|
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :qid |DafnyPreludebpl.168:18|
 :skolemid |1165|
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((x@@5 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@5)) x@@5)
 :qid |DafnyPreludebpl.167:18|
 :skolemid |1164|
 :pattern ( ($Box T@@1 x@@5))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :qid |mapAx0:MapType0Select|
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
)))) (= (Ctor refType) 3)) (= (Ctor FieldType) 4)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
))) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (! (= (Ctor (MapType1Type arg0@@2 arg1)) 6)
 :qid |ctor:MapType1Type|
))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :qid |DafnyPreludebpl.156:1|
 :skolemid |2064|
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert  (and (and (= (Ctor bv4Type) 7) (forall ((arg0@@5 (_ BitVec 4)) ) (! (= (U_2_bv4 (bv4_2_U arg0@@5)) arg0@@5)
 :qid |typeInv:U_2_bv4|
 :pattern ( (bv4_2_U arg0@@5))
))) (forall ((x@@6 T@U) ) (! (= (bv4_2_U (U_2_bv4 x@@6)) x@@6)
 :qid |cast:U_2_bv4|
 :pattern ( (U_2_bv4 x@@6))
))))
(assert (forall ((|x#0| T@U) ) (! (= ($Is bv4Type |x#0| Tclass._module.MyBv)  (and (bvule #b0010 (U_2_bv4 |x#0|)) (bvult (U_2_bv4 |x#0|) #b1010)))
 :qid |unknown.0:0|
 :skolemid |1991|
 :pattern ( ($Is bv4Type |x#0| Tclass._module.MyBv))
)))
(assert (= (Tag Tclass._module.MyBv) Tagclass._module.MyBv))
(assert (= (TagFamily Tclass._module.MyBv) tytagFamily$MyBv))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :qid |DafnyPreludebpl.109:15|
 :skolemid |1157|
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@8)) (Lit BoxType ($Box T@@2 x@@8)))
 :qid |DafnyPreludebpl.103:18|
 :skolemid |1155|
 :pattern ( ($Box T@@2 (Lit T@@2 x@@8)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun |u#0@0| () Int)
(declare-fun |m#0@0| () (_ BitVec 4))
(declare-fun |u#0@1| () Int)
(declare-fun |w#0@1| () (_ BitVec 32))
(declare-fun U_2_bv32 (T@U) (_ BitVec 32))
(declare-fun bv32Type () T@T)
(declare-fun bv32_2_U ((_ BitVec 32)) T@U)
(declare-fun |B#0@1| () (_ BitVec 100))
(declare-fun U_2_bv100 (T@U) (_ BitVec 100))
(declare-fun bv100Type () T@T)
(declare-fun bv100_2_U ((_ BitVec 100)) T@U)
(declare-fun |m#0@1| () (_ BitVec 4))
(declare-fun |u#0@2| () Int)
(declare-fun |$rhs#0@0| () Int)
(declare-fun |$rhs#1@0| () (_ BitVec 32))
(declare-fun |$rhs#2@0| () (_ BitVec 100))
(declare-fun |$rhs#3@0| () (_ BitVec 4))
(declare-fun |$rhs#4@0| () Int)
(declare-fun |$rhs#5@0| () (_ BitVec 32))
(declare-fun |$rhs#6@0| () (_ BitVec 100))
(declare-fun |$rhs#7@0| () (_ BitVec 4))
(declare-fun |$rhs#8@0| () Int)
(declare-fun |$rhs#9@0| () (_ BitVec 32))
(declare-fun |$rhs#10@0| () (_ BitVec 100))
(declare-fun |newtype$check#0@0| () (_ BitVec 4))
(declare-fun |$rhs#11@0| () (_ BitVec 4))
(declare-fun |B#0@2| () (_ BitVec 100))
(declare-fun |newtype$check#1@0| () Int)
(declare-fun |B#0@3| () (_ BitVec 100))
(declare-fun |newtype$check#2@0| () Int)
(declare-fun |B#0@4| () (_ BitVec 100))
(declare-fun |m#0@2| () (_ BitVec 4))
(declare-fun |newtype$check#3@0| () Int)
(declare-fun |m#0@3| () (_ BitVec 4))
(declare-fun |newtype$check#4@0| () Int)
(declare-fun |m#0@4| () (_ BitVec 4))
(declare-fun |B#0@5| () (_ BitVec 100))
(declare-fun |B#0@6| () (_ BitVec 100))
(declare-fun |B#0@7| () (_ BitVec 100))
(declare-fun |m#0@5| () (_ BitVec 4))
(declare-fun |m#0@6| () (_ BitVec 4))
(declare-fun |m#0@7| () (_ BitVec 4))
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |u#0| () Int)
(declare-fun |m#0| () (_ BitVec 4))
(declare-fun $FunctionContextHeight () Int)
(assert  (and (and (and (and (and (= (Ctor bv32Type) 8) (forall ((arg0@@6 (_ BitVec 32)) ) (! (= (U_2_bv32 (bv32_2_U arg0@@6)) arg0@@6)
 :qid |typeInv:U_2_bv32|
 :pattern ( (bv32_2_U arg0@@6))
))) (forall ((x@@9 T@U) ) (! (= (bv32_2_U (U_2_bv32 x@@9)) x@@9)
 :qid |cast:U_2_bv32|
 :pattern ( (U_2_bv32 x@@9))
))) (= (Ctor bv100Type) 9)) (forall ((arg0@@7 (_ BitVec 100)) ) (! (= (U_2_bv100 (bv100_2_U arg0@@7)) arg0@@7)
 :qid |typeInv:U_2_bv100|
 :pattern ( (bv100_2_U arg0@@7))
))) (forall ((x@@10 T@U) ) (! (= (bv100_2_U (U_2_bv100 x@@10)) x@@10)
 :qid |cast:U_2_bv100|
 :pattern ( (U_2_bv100 x@@10))
))))
(set-info :boogie-vc-id Impl$$_module.__default.MoreBvTests)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 32) (let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (= 0 |u#0@0|)) (=> (and (and (and (bvule #b0010 |m#0@0|) (bvult |m#0@0| #b1010)) (= |u#0@1| (LitInt 0))) (and (= |w#0@1| (U_2_bv32 (Lit bv32Type (bv32_2_U #x00000000)))) (= |B#0@1| (U_2_bv100 (Lit bv100Type (bv100_2_U #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))))) (and (=> (= (ControlFlow 0 2) (- 0 31)) ($Is bv4Type (Lit bv4Type (bv4_2_U #b1001)) Tclass._module.MyBv)) (=> ($Is bv4Type (Lit bv4Type (bv4_2_U #b1001)) Tclass._module.MyBv) (=> (= |m#0@1| (U_2_bv4 (Lit bv4Type (bv4_2_U #b1001)))) (=> (and (and (= |u#0@2| 0) (= |$rhs#0@0| 0)) (and (= |$rhs#1@0| (bvor |w#0@1| #x00000000)) (= |$rhs#2@0| (bvor |B#0@1| #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))) (and (=> (= (ControlFlow 0 2) (- 0 30)) ($Is bv4Type (bv4_2_U (bvor |m#0@1| #b0000)) Tclass._module.MyBv)) (=> ($Is bv4Type (bv4_2_U (bvor |m#0@1| #b0000)) Tclass._module.MyBv) (=> (and (and (= |$rhs#3@0| (bvor |m#0@1| #b0000)) (= |$rhs#4@0| 0)) (and (= |$rhs#5@0| (bvxor |$rhs#1@0| #x00000000)) (= |$rhs#6@0| (bvxor |$rhs#2@0| #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)))) (and (=> (= (ControlFlow 0 2) (- 0 29)) ($Is bv4Type (bv4_2_U (bvxor |$rhs#3@0| #b0000)) Tclass._module.MyBv)) (=> ($Is bv4Type (bv4_2_U (bvxor |$rhs#3@0| #b0000)) Tclass._module.MyBv) (=> (= |$rhs#7@0| (bvxor |$rhs#3@0| #b0000)) (=> (and (and (= |$rhs#8@0| 0) (= |$rhs#9@0| (bvnot |$rhs#5@0|))) (and (= |$rhs#10@0| (bvnot |$rhs#6@0|)) (= |newtype$check#0@0| (bvnot |$rhs#7@0|)))) (and (=> (= (ControlFlow 0 2) (- 0 28)) (and (bvule #b0010 |newtype$check#0@0|) (bvult |newtype$check#0@0| #b1010))) (=> (and (bvule #b0010 |newtype$check#0@0|) (bvult |newtype$check#0@0| #b1010)) (=> (= |$rhs#11@0| (bvnot |$rhs#7@0|)) (=> (and (= |B#0@2| (U_2_bv100 (Lit bv100Type (bv100_2_U #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000)))) (= |newtype$check#1@0| (LitInt 2))) (and (=> (= (ControlFlow 0 2) (- 0 27)) (and (<= 0 |newtype$check#1@0|) (< |newtype$check#1@0| 128))) (=> (and (<= 0 |newtype$check#1@0|) (< |newtype$check#1@0| 128)) (and (=> (= (ControlFlow 0 2) (- 0 26)) (bvule #b0000010 #b1100100)) (=> (bvule #b0000010 #b1100100) (=> (and (= |B#0@3| (bvshl |B#0@2| (concat #b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 #b0000010))) (= |newtype$check#2@0| (LitInt 4))) (and (=> (= (ControlFlow 0 2) (- 0 25)) (and (<= 0 |newtype$check#2@0|) (< |newtype$check#2@0| 128))) (=> (and (<= 0 |newtype$check#2@0|) (< |newtype$check#2@0| 128)) (and (=> (= (ControlFlow 0 2) (- 0 24)) (bvule #b0000100 #b1100100)) (=> (bvule #b0000100 #b1100100) (=> (= |B#0@4| (bvlshr |B#0@3| (concat #b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 #b0000100))) (and (=> (= (ControlFlow 0 2) (- 0 23)) ($Is bv4Type (Lit bv4Type (bv4_2_U #b0010)) Tclass._module.MyBv)) (=> ($Is bv4Type (Lit bv4Type (bv4_2_U #b0010)) Tclass._module.MyBv) (=> (and (= |m#0@2| (U_2_bv4 (Lit bv4Type (bv4_2_U #b0010)))) (= |newtype$check#3@0| (LitInt 2))) (and (=> (= (ControlFlow 0 2) (- 0 22)) (and (<= 0 |newtype$check#3@0|) (< |newtype$check#3@0| 8))) (=> (and (<= 0 |newtype$check#3@0|) (< |newtype$check#3@0| 8)) (and (=> (= (ControlFlow 0 2) (- 0 21)) (bvule #b010 #b100)) (=> (bvule #b010 #b100) (and (=> (= (ControlFlow 0 2) (- 0 20)) ($Is bv4Type (bv4_2_U (bvshl |m#0@2| (concat #b0 #b010))) Tclass._module.MyBv)) (=> ($Is bv4Type (bv4_2_U (bvshl |m#0@2| (concat #b0 #b010))) Tclass._module.MyBv) (=> (and (= |m#0@3| (bvshl |m#0@2| (concat #b0 #b010))) (= |newtype$check#4@0| (LitInt 1))) (and (=> (= (ControlFlow 0 2) (- 0 19)) (and (<= 0 |newtype$check#4@0|) (< |newtype$check#4@0| 8))) (=> (and (<= 0 |newtype$check#4@0|) (< |newtype$check#4@0| 8)) (and (=> (= (ControlFlow 0 2) (- 0 18)) (bvule #b001 #b100)) (=> (bvule #b001 #b100) (and (=> (= (ControlFlow 0 2) (- 0 17)) ($Is bv4Type (bv4_2_U (bvlshr |m#0@3| (concat #b0 #b001))) Tclass._module.MyBv)) (=> ($Is bv4Type (bv4_2_U (bvlshr |m#0@3| (concat #b0 #b001))) Tclass._module.MyBv) (=> (and (= |m#0@4| (bvlshr |m#0@3| (concat #b0 #b001))) (= |B#0@5| (U_2_bv100 (Lit bv100Type (bv100_2_U (bvor #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000 #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100)))))) (and (=> (= (ControlFlow 0 2) (- 0 16)) (<= 0 (LitInt 99))) (=> (<= 0 (LitInt 99)) (and (=> (= (ControlFlow 0 2) (- 0 15)) (<= (LitInt 99) 100)) (=> (<= (LitInt 99) 100) (=> (= |B#0@6| (ext_rotate_left |B#0@5| #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100011)) (and (=> (= (ControlFlow 0 2) (- 0 14)) (<= 0 (LitInt 98))) (=> (<= 0 (LitInt 98)) (and (=> (= (ControlFlow 0 2) (- 0 13)) (<= (LitInt 98) 100)) (=> (<= (LitInt 98) 100) (=> (= |B#0@7| (ext_rotate_right |B#0@6| #b0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001100010)) (and (=> (= (ControlFlow 0 2) (- 0 12)) ($Is bv4Type (Lit bv4Type (bv4_2_U #b0010)) Tclass._module.MyBv)) (=> ($Is bv4Type (Lit bv4Type (bv4_2_U #b0010)) Tclass._module.MyBv) (=> (= |m#0@5| (U_2_bv4 (Lit bv4Type (bv4_2_U #b0010)))) (and (=> (= (ControlFlow 0 2) (- 0 11)) (<= 0 (LitInt 2))) (=> (<= 0 (LitInt 2)) (and (=> (= (ControlFlow 0 2) (- 0 10)) (<= (LitInt 2) 4)) (=> (<= (LitInt 2) 4) (and (=> (= (ControlFlow 0 2) (- 0 9)) ($Is bv4Type (bv4_2_U (ext_rotate_left |m#0@5| #b0010)) Tclass._module.MyBv)) (=> ($Is bv4Type (bv4_2_U (ext_rotate_left |m#0@5| #b0010)) Tclass._module.MyBv) (=> (= |m#0@6| (ext_rotate_left |m#0@5| #b0010)) (and (=> (= (ControlFlow 0 2) (- 0 8)) (<= 0 (LitInt 1))) (=> (<= 0 (LitInt 1)) (and (=> (= (ControlFlow 0 2) (- 0 7)) (<= (LitInt 1) 4)) (=> (<= (LitInt 1) 4) (and (=> (= (ControlFlow 0 2) (- 0 6)) ($Is bv4Type (bv4_2_U (ext_rotate_right |m#0@6| #b0001)) Tclass._module.MyBv)) (=> ($Is bv4Type (bv4_2_U (ext_rotate_right |m#0@6| #b0001)) Tclass._module.MyBv) (=> (= |m#0@7| (ext_rotate_right |m#0@6| #b0001)) (and (=> (= (ControlFlow 0 2) (- 0 5)) (<= 0 (LitInt 0))) (=> (<= 0 (LitInt 0)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (<= (LitInt 0) 0)) (=> (<= (LitInt 0) 0) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= 0 (LitInt 0))) (=> (<= 0 (LitInt 0)) (=> (= (ControlFlow 0 2) (- 0 1)) (<= (LitInt 0) 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (= 0 |u#0|) true)) (=> (and (and (and (bvule #b0010 |m#0|) (bvult |m#0| #b1010)) true) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 32) 2))) anon0_correct))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
