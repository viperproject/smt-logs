(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 (Int Int Int) T@U)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@29 (T@U) Int)
(declare-fun $generated@@33 (T@U) Int)
(declare-fun $generated@@37 (T@U) Int)
(declare-fun $generated@@41 (T@T T@U T@U) Bool)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 () T@U)
(declare-fun $generated@@47 (Int) Int)
(declare-fun $generated@@49 (T@T T@U) T@U)
(declare-fun $generated@@52 (T@U) Bool)
(declare-fun $generated@@54 (T@U) Bool)
(declare-fun $generated@@56 (T@U) Bool)
(declare-fun $generated@@58 (T@T T@U) T@U)
(declare-fun $generated@@59 (T@T T@U) T@U)
(declare-fun $generated@@66 (Int) T@U)
(declare-fun $generated@@69 (Int) T@U)
(declare-fun $generated@@76 (T@U) Int)
(declare-fun $generated@@79 (T@U) Int)
(declare-fun $generated@@85 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@86 () T@T)
(declare-fun $generated@@87 () T@T)
(declare-fun $generated@@88 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@89 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@90 () T@T)
(declare-fun $generated@@91 (T@T T@T) T@T)
(declare-fun $generated@@92 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@93 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@94 (T@T) T@T)
(declare-fun $generated@@95 (T@T) T@T)
(declare-fun $generated@@144 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@145 (T@U) Bool)
(declare-fun $generated@@159 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert (= ($generated@@23 $generated) $generated@@0))
(assert (forall (($generated@@26 Int) ($generated@@27 Int) ($generated@@28 Int) ) (! (= ($generated@@25 ($generated@@24 $generated@@26 $generated@@27 $generated@@28)) $generated@@3)
 :pattern ( ($generated@@24 $generated@@26 $generated@@27 $generated@@28))
)))
(assert (forall (($generated@@30 Int) ($generated@@31 Int) ($generated@@32 Int) ) (! (= ($generated@@29 ($generated@@24 $generated@@30 $generated@@31 $generated@@32)) $generated@@30)
 :pattern ( ($generated@@24 $generated@@30 $generated@@31 $generated@@32))
)))
(assert (forall (($generated@@34 Int) ($generated@@35 Int) ($generated@@36 Int) ) (! (= ($generated@@33 ($generated@@24 $generated@@34 $generated@@35 $generated@@36)) $generated@@35)
 :pattern ( ($generated@@24 $generated@@34 $generated@@35 $generated@@36))
)))
(assert (forall (($generated@@38 Int) ($generated@@39 Int) ($generated@@40 Int) ) (! (= ($generated@@37 ($generated@@24 $generated@@38 $generated@@39 $generated@@40)) $generated@@40)
 :pattern ( ($generated@@24 $generated@@38 $generated@@39 $generated@@40))
)))
(assert (= ($generated@@7 $generated@@42) 3))
(assert (forall (($generated@@44 Int) ($generated@@45 Int) ($generated@@46 Int) ) (! (= ($generated@@41 $generated@@42 ($generated@@24 $generated@@44 $generated@@45 $generated@@46) $generated@@43)  (and (and ($generated@@41 $generated@@9 ($generated@@13 $generated@@44) $generated) ($generated@@41 $generated@@9 ($generated@@13 $generated@@45) $generated)) ($generated@@41 $generated@@9 ($generated@@13 $generated@@46) $generated)))
 :pattern ( ($generated@@41 $generated@@42 ($generated@@24 $generated@@44 $generated@@45 $generated@@46) $generated@@43))
)))
(assert (forall (($generated@@48 Int) ) (! (= ($generated@@47 $generated@@48) $generated@@48)
 :pattern ( ($generated@@47 $generated@@48))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@49 $generated@@51 $generated@@50) $generated@@50)
 :pattern ( ($generated@@49 $generated@@51 $generated@@50))
)))
(assert (forall (($generated@@53 T@U) ) (! (= ($generated@@52 $generated@@53) (= ($generated@@25 $generated@@53) $generated@@3))
 :pattern ( ($generated@@52 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ) (! (= ($generated@@54 $generated@@55) (= ($generated@@25 $generated@@55) $generated@@4))
 :pattern ( ($generated@@54 $generated@@55))
)))
(assert (forall (($generated@@57 T@U) ) (! (= ($generated@@56 $generated@@57) (= ($generated@@25 $generated@@57) $generated@@5))
 :pattern ( ($generated@@56 $generated@@57))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@59 $generated@@61 ($generated@@58 $generated@@61 $generated@@60)) $generated@@60)
 :pattern ( ($generated@@58 $generated@@61 $generated@@60))
)))
(assert (forall (($generated@@62 T@U) ) (!  (=> ($generated@@52 $generated@@62) (exists (($generated@@63 Int) ($generated@@64 Int) ($generated@@65 Int) ) (= $generated@@62 ($generated@@24 $generated@@63 $generated@@64 $generated@@65))))
 :pattern ( ($generated@@52 $generated@@62))
)))
(assert (forall (($generated@@67 T@U) ) (!  (=> ($generated@@54 $generated@@67) (exists (($generated@@68 Int) ) (= $generated@@67 ($generated@@66 $generated@@68))))
 :pattern ( ($generated@@54 $generated@@67))
)))
(assert (forall (($generated@@70 T@U) ) (!  (=> ($generated@@56 $generated@@70) (exists (($generated@@71 Int) ) (= $generated@@70 ($generated@@69 $generated@@71))))
 :pattern ( ($generated@@56 $generated@@70))
)))
(assert (forall (($generated@@72 Int) ($generated@@73 Int) ($generated@@74 Int) ) (! (= ($generated@@24 ($generated@@47 $generated@@72) ($generated@@47 $generated@@73) ($generated@@47 $generated@@74)) ($generated@@49 $generated@@42 ($generated@@24 $generated@@72 $generated@@73 $generated@@74)))
 :pattern ( ($generated@@24 ($generated@@47 $generated@@72) ($generated@@47 $generated@@73) ($generated@@47 $generated@@74)))
)))
(assert (forall (($generated@@75 Int) ) (! (= ($generated@@25 ($generated@@66 $generated@@75)) $generated@@4)
 :pattern ( ($generated@@66 $generated@@75))
)))
(assert (forall (($generated@@77 Int) ) (! (= ($generated@@76 ($generated@@66 $generated@@77)) $generated@@77)
 :pattern ( ($generated@@66 $generated@@77))
)))
(assert (forall (($generated@@78 Int) ) (! (= ($generated@@25 ($generated@@69 $generated@@78)) $generated@@5)
 :pattern ( ($generated@@69 $generated@@78))
)))
(assert (forall (($generated@@80 Int) ) (! (= ($generated@@79 ($generated@@69 $generated@@80)) $generated@@80)
 :pattern ( ($generated@@69 $generated@@80))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@58 $generated@@82 ($generated@@59 $generated@@82 $generated@@81)) $generated@@81)
 :pattern ( ($generated@@59 $generated@@82 $generated@@81))
)))
(assert (forall (($generated@@83 Int) ) (! (= ($generated@@41 $generated@@42 ($generated@@66 $generated@@83) $generated@@43) ($generated@@41 $generated@@9 ($generated@@13 $generated@@83) $generated))
 :pattern ( ($generated@@41 $generated@@42 ($generated@@66 $generated@@83) $generated@@43))
)))
(assert (forall (($generated@@84 Int) ) (! (= ($generated@@41 $generated@@42 ($generated@@69 $generated@@84) $generated@@43) ($generated@@41 $generated@@9 ($generated@@13 $generated@@84) $generated))
 :pattern ( ($generated@@41 $generated@@42 ($generated@@69 $generated@@84) $generated@@43))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (! (= ($generated@@85 $generated@@96 $generated@@97 $generated@@98 ($generated@@92 $generated@@96 $generated@@97 $generated@@98 $generated@@100 $generated@@101 $generated@@102 $generated@@99) $generated@@101 $generated@@102) $generated@@99)
 :weight 0
)) (and (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ) (!  (or (= $generated@@108 $generated@@110) (= ($generated@@85 $generated@@103 $generated@@104 $generated@@105 ($generated@@92 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@108 $generated@@109 $generated@@106) $generated@@110 $generated@@111) ($generated@@85 $generated@@103 $generated@@104 $generated@@105 $generated@@107 $generated@@110 $generated@@111)))
 :weight 0
)) (forall (($generated@@112 T@T) ($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ) (!  (or (= $generated@@118 $generated@@120) (= ($generated@@85 $generated@@112 $generated@@113 $generated@@114 ($generated@@92 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@118 $generated@@115) $generated@@119 $generated@@120) ($generated@@85 $generated@@112 $generated@@113 $generated@@114 $generated@@116 $generated@@119 $generated@@120)))
 :weight 0
)))) (= ($generated@@7 $generated@@86) 4)) (= ($generated@@7 $generated@@87) 5)) (forall (($generated@@121 T@T) ($generated@@122 T@T) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (= ($generated@@89 $generated@@121 $generated@@122 ($generated@@93 $generated@@121 $generated@@122 $generated@@124 $generated@@125 $generated@@123) $generated@@125) $generated@@123)
 :weight 0
))) (forall (($generated@@126 T@T) ($generated@@127 T@T) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ) (!  (or (= $generated@@130 $generated@@131) (= ($generated@@89 $generated@@126 $generated@@127 ($generated@@93 $generated@@126 $generated@@127 $generated@@129 $generated@@130 $generated@@128) $generated@@131) ($generated@@89 $generated@@126 $generated@@127 $generated@@129 $generated@@131)))
 :weight 0
))) (= ($generated@@7 $generated@@90) 6)) (forall (($generated@@132 T@T) ($generated@@133 T@T) ) (= ($generated@@7 ($generated@@91 $generated@@132 $generated@@133)) 7))) (forall (($generated@@134 T@T) ($generated@@135 T@T) ) (! (= ($generated@@94 ($generated@@91 $generated@@134 $generated@@135)) $generated@@134)
 :pattern ( ($generated@@91 $generated@@134 $generated@@135))
))) (forall (($generated@@136 T@T) ($generated@@137 T@T) ) (! (= ($generated@@95 ($generated@@91 $generated@@136 $generated@@137)) $generated@@137)
 :pattern ( ($generated@@91 $generated@@136 $generated@@137))
))))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 Bool) ($generated@@142 T@U) ($generated@@143 T@U) ) (! (= ($generated@@12 ($generated@@85 $generated@@86 $generated@@87 $generated@@8 ($generated@@88 $generated@@138 $generated@@139 $generated@@140 $generated@@141) $generated@@142 $generated@@143))  (=> (and (or (not (= $generated@@142 $generated@@138)) (not true)) ($generated@@12 ($generated@@58 $generated@@8 ($generated@@89 $generated@@87 $generated@@90 ($generated@@89 $generated@@86 ($generated@@91 $generated@@87 $generated@@90) $generated@@139 $generated@@142) $generated@@140)))) $generated@@141))
 :pattern ( ($generated@@85 $generated@@86 $generated@@87 $generated@@8 ($generated@@88 $generated@@138 $generated@@139 $generated@@140 $generated@@141) $generated@@142 $generated@@143))
)))
(assert (forall (($generated@@146 T@U) ($generated@@147 T@U) ) (!  (=> (and ($generated@@145 $generated@@147) (and ($generated@@52 $generated@@146) ($generated@@144 $generated@@42 $generated@@146 $generated@@43 $generated@@147))) ($generated@@144 $generated@@9 ($generated@@13 ($generated@@29 $generated@@146)) $generated $generated@@147))
 :pattern ( ($generated@@144 $generated@@9 ($generated@@13 ($generated@@29 $generated@@146)) $generated $generated@@147))
)))
(assert (forall (($generated@@148 T@U) ($generated@@149 T@U) ) (!  (=> (and ($generated@@145 $generated@@149) (and ($generated@@52 $generated@@148) ($generated@@144 $generated@@42 $generated@@148 $generated@@43 $generated@@149))) ($generated@@144 $generated@@9 ($generated@@13 ($generated@@33 $generated@@148)) $generated $generated@@149))
 :pattern ( ($generated@@144 $generated@@9 ($generated@@13 ($generated@@33 $generated@@148)) $generated $generated@@149))
)))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ) (!  (=> (and ($generated@@145 $generated@@151) (and ($generated@@52 $generated@@150) ($generated@@144 $generated@@42 $generated@@150 $generated@@43 $generated@@151))) ($generated@@144 $generated@@9 ($generated@@13 ($generated@@37 $generated@@150)) $generated $generated@@151))
 :pattern ( ($generated@@144 $generated@@9 ($generated@@13 ($generated@@37 $generated@@150)) $generated $generated@@151))
)))
(assert (forall (($generated@@152 T@U) ($generated@@153 T@U) ) (!  (=> (and ($generated@@145 $generated@@153) (and ($generated@@54 $generated@@152) ($generated@@144 $generated@@42 $generated@@152 $generated@@43 $generated@@153))) ($generated@@144 $generated@@9 ($generated@@13 ($generated@@76 $generated@@152)) $generated $generated@@153))
 :pattern ( ($generated@@144 $generated@@9 ($generated@@13 ($generated@@76 $generated@@152)) $generated $generated@@153))
)))
(assert (forall (($generated@@154 T@U) ($generated@@155 T@U) ) (!  (=> (and ($generated@@145 $generated@@155) (and ($generated@@56 $generated@@154) ($generated@@144 $generated@@42 $generated@@154 $generated@@43 $generated@@155))) ($generated@@144 $generated@@9 ($generated@@13 ($generated@@79 $generated@@154)) $generated $generated@@155))
 :pattern ( ($generated@@144 $generated@@9 ($generated@@13 ($generated@@79 $generated@@154)) $generated $generated@@155))
)))
(assert (forall (($generated@@156 T@U) ) (!  (=> ($generated@@41 $generated@@42 $generated@@156 $generated@@43) (or (or ($generated@@52 $generated@@156) ($generated@@54 $generated@@156)) ($generated@@56 $generated@@156)))
 :pattern ( ($generated@@56 $generated@@156) ($generated@@41 $generated@@42 $generated@@156 $generated@@43))
 :pattern ( ($generated@@54 $generated@@156) ($generated@@41 $generated@@42 $generated@@156 $generated@@43))
 :pattern ( ($generated@@52 $generated@@156) ($generated@@41 $generated@@42 $generated@@156 $generated@@43))
)))
(assert (forall (($generated@@157 T@U) ($generated@@158 T@U) ) (!  (=> (and ($generated@@145 $generated@@158) ($generated@@41 $generated@@42 $generated@@157 $generated@@43)) ($generated@@144 $generated@@42 $generated@@157 $generated@@43 $generated@@158))
 :pattern ( ($generated@@144 $generated@@42 $generated@@157 $generated@@43 $generated@@158))
)))
(assert (= ($generated@@23 $generated@@43) $generated@@2))
(assert (= ($generated@@159 $generated@@43) $generated@@6))
(assert (forall (($generated@@160 Int) ) (! (= ($generated@@59 $generated@@9 ($generated@@13 ($generated@@47 $generated@@160))) ($generated@@49 $generated@@90 ($generated@@59 $generated@@9 ($generated@@13 $generated@@160))))
 :pattern ( ($generated@@59 $generated@@9 ($generated@@13 ($generated@@47 $generated@@160))))
)))
(assert (forall (($generated@@161 Int) ) (! (= ($generated@@66 ($generated@@47 $generated@@161)) ($generated@@49 $generated@@42 ($generated@@66 $generated@@161)))
 :pattern ( ($generated@@66 ($generated@@47 $generated@@161)))
)))
(assert (forall (($generated@@162 Int) ) (! (= ($generated@@69 ($generated@@47 $generated@@162)) ($generated@@49 $generated@@42 ($generated@@69 $generated@@162)))
 :pattern ( ($generated@@69 ($generated@@47 $generated@@162)))
)))
(assert (forall (($generated@@163 T@U) ($generated@@164 T@T) ) (! (= ($generated@@59 $generated@@164 ($generated@@49 $generated@@164 $generated@@163)) ($generated@@49 $generated@@90 ($generated@@59 $generated@@164 $generated@@163)))
 :pattern ( ($generated@@59 $generated@@164 ($generated@@49 $generated@@164 $generated@@163)))
)))
(assert (forall (($generated@@165 T@U) ($generated@@166 T@U) ) (! ($generated@@144 $generated@@9 $generated@@166 $generated $generated@@165)
 :pattern ( ($generated@@144 $generated@@9 $generated@@166 $generated $generated@@165))
)))
(assert (forall (($generated@@167 T@U) ) (! ($generated@@41 $generated@@9 $generated@@167 $generated)
 :pattern ( ($generated@@41 $generated@@9 $generated@@167 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@168 () Int)
(declare-fun $generated@@169 () Int)
(declare-fun $generated@@170 () T@U)
(declare-fun $generated@@171 () T@U)
(declare-fun $generated@@172 () T@U)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 () Int)
(declare-fun $generated@@175 () Int)
(declare-fun $generated@@176 (T@U) Bool)
(declare-fun $generated@@177 () T@U)
(declare-fun $generated@@178 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@179 true))
(let (($generated@@180 true))
(let (($generated@@181  (=> (= $generated@@168 ($generated@@47 0)) (and (=> (= (ControlFlow 0 5) (- 0 6)) ($generated@@56 ($generated@@49 $generated@@42 ($generated@@69 ($generated@@47 3))))) (=> ($generated@@56 ($generated@@49 $generated@@42 ($generated@@69 ($generated@@47 3)))) (=> (= $generated@@169 ($generated@@47 ($generated@@79 ($generated@@49 $generated@@42 ($generated@@69 ($generated@@47 3)))))) (and (=> (= (ControlFlow 0 5) 3) $generated@@180) (=> (= (ControlFlow 0 5) 4) $generated@@179))))))))
(let (($generated@@182 true))
(let (($generated@@183  (=> (and (= ($generated@@47 ($generated@@76 ($generated@@49 $generated@@42 ($generated@@66 ($generated@@47 3))))) ($generated@@47 3)) (= $generated@@168 ($generated@@47 0))) (and (=> (= (ControlFlow 0 7) 2) $generated@@182) (=> (= (ControlFlow 0 7) 5) $generated@@181)))))
(let (($generated@@184 true))
(let (($generated@@185  (=> (and (and (= $generated@@170 ($generated@@88 $generated@@171 $generated@@172 $generated@@1 false)) (= $generated@@173 ($generated@@49 $generated@@42 ($generated@@24 ($generated@@47 0) ($generated@@47 0) ($generated@@47 0))))) (and (= $generated@@174 ($generated@@47 0)) (= $generated@@175 ($generated@@47 0)))) (and (=> (= (ControlFlow 0 8) (- 0 9)) ($generated@@54 ($generated@@49 $generated@@42 ($generated@@66 ($generated@@47 3))))) (=> ($generated@@54 ($generated@@49 $generated@@42 ($generated@@66 ($generated@@47 3)))) (and (=> (= (ControlFlow 0 8) 1) $generated@@184) (=> (= (ControlFlow 0 8) 7) $generated@@183)))))))
(let (($generated@@186  (=> (and ($generated@@145 $generated@@172) ($generated@@176 $generated@@172)) (=> (and (and (and ($generated@@41 $generated@@42 $generated@@177 $generated@@43) ($generated@@144 $generated@@42 $generated@@177 $generated@@43 $generated@@172)) true) (and (= 1 $generated@@178) (= (ControlFlow 0 10) 8))) $generated@@185))))
$generated@@186)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
