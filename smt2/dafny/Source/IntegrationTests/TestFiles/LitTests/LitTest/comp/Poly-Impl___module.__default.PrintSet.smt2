(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TReal () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun Tagclass._module.Shape? () T@U)
(declare-fun Tagclass._module.Shape () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun tytagFamily$Shape () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.Shape () T@U)
(declare-fun Tclass._module.Shape? () T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun null () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.Shape.Center (T@U T@U) T@U)
(declare-fun |_module.Shape.Center#canCall| (T@U T@U) Bool)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun implements$_module.Shape (T@U) Bool)
(declare-fun dtype (T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TReal TagReal TagSet TagSeq alloc |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 Tagclass._module.Shape? Tagclass._module.Shape |tytagFamily$_tuple#2| tytagFamily$Shape)
)
(assert (= (Tag TReal) TagReal))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (b T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| a@@1 y@@0) (|Set#IsMember| (|Set#Union| a@@1 b) y@@0))
 :pattern ( (|Set#Union| a@@1 b) (|Set#IsMember| a@@1 y@@0))
)))
(assert (forall ((a@@2 T@U) (b@@0 T@U) (y@@1 T@U) ) (!  (=> (|Set#IsMember| b@@0 y@@1) (|Set#IsMember| (|Set#Union| a@@2 b@@0) y@@1))
 :pattern ( (|Set#Union| a@@2 b@@0) (|Set#IsMember| b@@0 y@@1))
)))
(assert (forall ((a@@3 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@3 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o))
)))
(assert (forall ((a@@4 T@U) (b@@1 T@U) (y@@2 T@U) ) (!  (=> (|Set#IsMember| b@@1 y@@2) (not (|Set#IsMember| (|Set#Difference| a@@4 b@@1) y@@2)))
 :pattern ( (|Set#Difference| a@@4 b@@1) (|Set#IsMember| b@@1 y@@2))
)))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d))
 :pattern ( (_System.Tuple2.___hMake2_q d) ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (forall ((a@@5 T@U) (b@@2 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Intersection| a@@5 b@@2) o@@1)  (and (|Set#IsMember| a@@5 o@@1) (|Set#IsMember| b@@2 o@@1)))
 :pattern ( (|Set#IsMember| (|Set#Intersection| a@@5 b@@2) o@@1))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (forall ((a@@6 T@U) (b@@3 T@U) ) (! (= (|Set#Union| (|Set#Union| a@@6 b@@3) b@@3) (|Set#Union| a@@6 b@@3))
 :pattern ( (|Set#Union| (|Set#Union| a@@6 b@@3) b@@3))
)))
(assert (forall ((a@@7 T@U) (b@@4 T@U) ) (! (= (|Set#Intersection| (|Set#Intersection| a@@7 b@@4) b@@4) (|Set#Intersection| a@@7 b@@4))
 :pattern ( (|Set#Intersection| (|Set#Intersection| a@@7 b@@4) b@@4))
)))
(assert (forall ((a@@8 T@U) (b@@5 T@U) (o@@2 T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@8 b@@5) o@@2)  (and (|Set#IsMember| a@@8 o@@2) (not (|Set#IsMember| b@@5 o@@2))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@8 b@@5) o@@2))
)))
(assert (= (Ctor refType) 4))
(assert (forall ((|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._module.Shape $h) ($IsAlloc refType |c#0| Tclass._module.Shape? $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Shape $h))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.Shape? $h))
)))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert (forall ((s T@U) ) (!  (and (= (= (|Set#Card| s) 0) (= s |Set#Empty|)) (=> (or (not (= (|Set#Card| s) 0)) (not true)) (exists ((x@@5 T@U) ) (! (|Set#IsMember| s x@@5)
 :pattern ( (|Set#IsMember| s x@@5))
))))
 :pattern ( (|Set#Card| s))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType $o Tclass._module.Shape? $h@@0)  (or (= $o null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o) alloc)))))
 :pattern ( ($IsAlloc refType $o Tclass._module.Shape? $h@@0))
)))
(assert (forall ((a@@9 T@U) (b@@6 T@U) ) (! (= (+ (|Set#Card| (|Set#Union| a@@9 b@@6)) (|Set#Card| (|Set#Intersection| a@@9 b@@6))) (+ (|Set#Card| a@@9) (|Set#Card| b@@6)))
 :pattern ( (|Set#Card| (|Set#Union| a@@9 b@@6)))
 :pattern ( (|Set#Card| (|Set#Intersection| a@@9 b@@6)))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o@@3 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o@@3) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@3) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@3) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@6 Int) ) (! (= (LitInt x@@6) x@@6)
 :pattern ( (LitInt x@@6))
)))
(assert (forall ((x@@7 T@U) (T T@T) ) (! (= (Lit T x@@7) x@@7)
 :pattern ( (Lit T x@@7))
)))
(assert (= (Ctor SeqType) 8))
(assert (forall ((s@@0 T@U) (bx T@U) (t T@U) ) (!  (=> (and ($Is SeqType s@@0 (TSeq t)) ($IsBox bx t)) ($Is SeqType (|Seq#Build| s@@0 bx) (TSeq t)))
 :pattern ( ($Is SeqType (|Seq#Build| s@@0 bx) (TSeq t)))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h@@1 T@U) ) (!  (=> ($IsGoodHeap $h@@1) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@1)  (and ($IsAllocBox |a#2#0#0@@0| |_System._tuple#2$T0@@1| $h@@1) ($IsAllocBox |a#2#1#0@@0| |_System._tuple#2$T1@@1| $h@@1))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@1))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@0))
)))
(assert (forall ((x@@8 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@8)) x@@8)
 :pattern ( ($Unbox T@@0 x@@8))
)))
(assert (forall ((a@@10 T@U) (b@@7 T@U) ) (! (= (|Set#Disjoint| a@@10 b@@7) (forall ((o@@4 T@U) ) (!  (or (not (|Set#IsMember| a@@10 o@@4)) (not (|Set#IsMember| b@@7 o@@4)))
 :pattern ( (|Set#IsMember| a@@10 o@@4))
 :pattern ( (|Set#IsMember| b@@7 o@@4))
)))
 :pattern ( (|Set#Disjoint| a@@10 b@@7))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@1) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@1))
)))
(assert (= (Ctor SetType) 9))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx@@0 T@U) ) (!  (=> (|Set#IsMember| v bx@@0) ($IsBox bx@@0 t0@@0))
 :pattern ( (|Set#IsMember| v bx@@0))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert (forall ((s@@1 T@U) (v@@0 T@U) ) (! (= (|Seq#Length| (|Seq#Build| s@@1 v@@0)) (+ 1 (|Seq#Length| s@@1)))
 :pattern ( (|Seq#Build| s@@1 v@@0))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@1) t@@0 h@@0) ($IsAlloc T@@1 v@@1 t@@0 h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@1) t@@0 h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@1 T@U) (t@@1 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@1 t@@1 h@@1) ($IsAllocBox bx@@1 t@@1 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@1 t@@1 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@2 T@U) (t@@2 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@2 t@@2 h@@2) ($IsAlloc T@@2 v@@2 t@@2 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@2 t@@2 h@@2))
)))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1)))
 :pattern ( (|Seq#Length| (|Seq#Append| s0 s1)))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._module.Shape?) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) Tclass._module.Shape?)))
 :pattern ( ($IsBox bx@@2 Tclass._module.Shape?))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._module.Shape) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) Tclass._module.Shape)))
 :pattern ( ($IsBox bx@@3 Tclass._module.Shape))
)))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass._module.Shape)  (and ($Is refType |c#0@@0| Tclass._module.Shape?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.Shape))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.Shape?))
)))
(assert (forall ((s@@2 T@U) (i Int) (v@@3 T@U) ) (!  (and (=> (= i (|Seq#Length| s@@2)) (= (|Seq#Index| (|Seq#Build| s@@2 v@@3) i) v@@3)) (=> (or (not (= i (|Seq#Length| s@@2))) (not true)) (= (|Seq#Index| (|Seq#Build| s@@2 v@@3) i) (|Seq#Index| s@@2 i))))
 :pattern ( (|Seq#Index| (|Seq#Build| s@@2 v@@3) i))
)))
(assert (forall ((a@@11 T@U) (b@@8 T@U) (o@@5 T@U) ) (! (= (|Set#IsMember| (|Set#Union| a@@11 b@@8) o@@5)  (or (|Set#IsMember| a@@11 o@@5) (|Set#IsMember| b@@8 o@@5)))
 :pattern ( (|Set#IsMember| (|Set#Union| a@@11 b@@8) o@@5))
)))
(assert (forall ((a@@12 T@U) (b@@9 T@U) ) (!  (=> (|Set#Disjoint| a@@12 b@@9) (and (= (|Set#Difference| (|Set#Union| a@@12 b@@9) a@@12) b@@9) (= (|Set#Difference| (|Set#Union| a@@12 b@@9) b@@9) a@@12)))
 :pattern ( (|Set#Union| a@@12 b@@9))
)))
(assert (forall ((a@@13 T@U) (b@@10 T@U) ) (!  (=> (|Set#Equal| a@@13 b@@10) (= a@@13 b@@10))
 :pattern ( (|Set#Equal| a@@13 b@@10))
)))
(assert (forall ((a@@14 T@U) (b@@11 T@U) (c T@U) ) (!  (=> (or (not (= a@@14 c)) (not true)) (=> (and ($HeapSucc a@@14 b@@11) ($HeapSucc b@@11 c)) ($HeapSucc a@@14 c)))
 :pattern ( ($HeapSucc a@@14 b@@11) ($HeapSucc b@@11 c))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 TReal) (and (= ($Box realType ($Unbox realType bx@@4)) bx@@4) ($Is realType ($Unbox realType bx@@4) TReal)))
 :pattern ( ($IsBox bx@@4 TReal))
)))
(assert (forall ((a@@15 T@U) (b@@12 T@U) ) (!  (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@15 b@@12)) (|Set#Card| (|Set#Difference| b@@12 a@@15))) (|Set#Card| (|Set#Intersection| a@@15 b@@12))) (|Set#Card| (|Set#Union| a@@15 b@@12))) (= (|Set#Card| (|Set#Difference| a@@15 b@@12)) (- (|Set#Card| a@@15) (|Set#Card| (|Set#Intersection| a@@15 b@@12)))))
 :pattern ( (|Set#Card| (|Set#Difference| a@@15 b@@12)))
)))
(assert (forall ((v@@4 T@U) (t@@3 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@4) t@@3) ($Is T@@3 v@@4 t@@3))
 :pattern ( ($IsBox ($Box T@@3 v@@4) t@@3))
)))
(assert (forall ((s@@3 T@U) ) (! (<= 0 (|Set#Card| s@@3))
 :pattern ( (|Set#Card| s@@3))
)))
(assert (forall ((s@@4 T@U) ) (! (<= 0 (|Seq#Length| s@@4))
 :pattern ( (|Seq#Length| s@@4))
)))
(assert (forall ((v@@5 T@U) (t0@@1 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@5 (TSet t0@@1) h@@3) (forall ((bx@@5 T@U) ) (!  (=> (|Set#IsMember| v@@5 bx@@5) ($IsAllocBox bx@@5 t0@@1 h@@3))
 :pattern ( (|Set#IsMember| v@@5 bx@@5))
)))
 :pattern ( ($IsAlloc SetType v@@5 (TSet t0@@1) h@@3))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) |a#6#1#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall ((v@@6 T@U) (t0@@2 T@U) (h@@4 T@U) ) (! (= ($IsAlloc SeqType v@@6 (TSeq t0@@2) h@@4) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@6))) ($IsAllocBox (|Seq#Index| v@@6 i@@0) t0@@2 h@@4))
 :pattern ( (|Seq#Index| v@@6 i@@0))
)))
 :pattern ( ($IsAlloc SeqType v@@6 (TSeq t0@@2) h@@4))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Inv0_TSet (TSet t@@4)) t@@4)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((t@@5 T@U) ) (! (= (Tag (TSet t@@5)) TagSet)
 :pattern ( (TSet t@@5))
)))
(assert (forall ((t@@6 T@U) ) (! (= (Inv0_TSeq (TSeq t@@6)) t@@6)
 :pattern ( (TSeq t@@6))
)))
(assert (forall ((t@@7 T@U) ) (! (= (Tag (TSeq t@@7)) TagSeq)
 :pattern ( (TSeq t@@7))
)))
(assert (forall ((x@@9 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@9)) x@@9)
 :pattern ( ($Box T@@4 x@@9))
)))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (! (< (BoxRank |a#5#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap T@U) (this T@U) ) (!  (=> (or (|_module.Shape.Center#canCall| $Heap this) (and (< 1 $FunctionContextHeight) (and ($IsGoodHeap $Heap) (and (or (not (= this null)) (not true)) (and ($Is refType this Tclass._module.Shape) ($IsAlloc refType this Tclass._module.Shape $Heap)))))) ($Is DatatypeTypeType (_module.Shape.Center $Heap this) (Tclass._System.Tuple2 TReal TReal)))
 :pattern ( (_module.Shape.Center $Heap this))
))))
(assert (forall ((a@@16 T@U) (b@@13 T@U) ) (! (= (|Set#Union| a@@16 (|Set#Union| a@@16 b@@13)) (|Set#Union| a@@16 b@@13))
 :pattern ( (|Set#Union| a@@16 (|Set#Union| a@@16 b@@13)))
)))
(assert (forall ((a@@17 T@U) (b@@14 T@U) ) (! (= (|Set#Intersection| a@@17 (|Set#Intersection| a@@17 b@@14)) (|Set#Intersection| a@@17 b@@14))
 :pattern ( (|Set#Intersection| a@@17 (|Set#Intersection| a@@17 b@@14)))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@6)) bx@@6) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@6) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@6 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert  (and (forall ((t0@@3 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@3 t1@@0 t2 (MapType1Store t0@@3 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@0 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@0 $f))  (=> (and (or (not (= $o@@0 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@0) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@0 $f))
)))
(assert (forall ((s@@5 T@U) (val@@4 T@U) ) (!  (and (= (|Seq#Build_inv0| (|Seq#Build| s@@5 val@@4)) s@@5) (= (|Seq#Build_inv1| (|Seq#Build| s@@5 val@@4)) val@@4))
 :pattern ( (|Seq#Build| s@@5 val@@4))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall (($h0 T@U) ($h1 T@U) (this@@0 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (and (or (not (= this@@0 null)) (not true)) ($Is refType this@@0 Tclass._module.Shape))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1))) (=> (forall (($o@@1 T@U) ($f@@0 T@U) )  (=> (and (or (not (= $o@@1 null)) (not true)) (= $o@@1 this@@0)) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0 $o@@1) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1 $o@@1) $f@@0)))) (= (_module.Shape.Center $h0 this@@0) (_module.Shape.Center $h1 this@@0))))
 :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (_module.Shape.Center $h1 this@@0))
)))
(assert (forall ((d@@2 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@2)) (DtRank d@@2))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@2)))
)))
(assert (forall ((bx@@7 T@U) (t@@8 T@U) ) (!  (=> ($IsBox bx@@7 (TSet t@@8)) (and (= ($Box SetType ($Unbox SetType bx@@7)) bx@@7) ($Is SetType ($Unbox SetType bx@@7) (TSet t@@8))))
 :pattern ( ($IsBox bx@@7 (TSet t@@8)))
)))
(assert (forall ((bx@@8 T@U) (t@@9 T@U) ) (!  (=> ($IsBox bx@@8 (TSeq t@@9)) (and (= ($Box SeqType ($Unbox SeqType bx@@8)) bx@@8) ($Is SeqType ($Unbox SeqType bx@@8) (TSeq t@@9))))
 :pattern ( ($IsBox bx@@8 (TSeq t@@9)))
)))
(assert (forall ((a@@18 T@U) (x@@10 T@U) ) (!  (=> (|Set#IsMember| a@@18 x@@10) (= (|Set#Card| (|Set#UnionOne| a@@18 x@@10)) (|Set#Card| a@@18)))
 :pattern ( (|Set#Card| (|Set#UnionOne| a@@18 x@@10)))
)))
(assert (= (Tag Tclass._module.Shape?) Tagclass._module.Shape?))
(assert (= (TagFamily Tclass._module.Shape?) tytagFamily$Shape))
(assert (= (Tag Tclass._module.Shape) Tagclass._module.Shape))
(assert (= (TagFamily Tclass._module.Shape) tytagFamily$Shape))
(assert (forall (($o@@2 T@U) ) (! (= ($Is refType $o@@2 Tclass._module.Shape?)  (or (= $o@@2 null) (implements$_module.Shape (dtype $o@@2))))
 :pattern ( ($Is refType $o@@2 Tclass._module.Shape?))
)))
(assert (forall ((a@@19 T@U) (b@@15 T@U) ) (! (= (|Set#Equal| a@@19 b@@15) (forall ((o@@6 T@U) ) (! (= (|Set#IsMember| a@@19 o@@6) (|Set#IsMember| b@@15 o@@6))
 :pattern ( (|Set#IsMember| a@@19 o@@6))
 :pattern ( (|Set#IsMember| b@@15 o@@6))
)))
 :pattern ( (|Set#Equal| a@@19 b@@15))
)))
(assert (forall ((d@@3 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@2)
 :pattern ( ($IsAlloc DatatypeTypeType d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@2))
)))) ($IsAllocBox (_System.Tuple2._0 d@@3) |_System._tuple#2$T0@@6| $h@@2))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@3) |_System._tuple#2$T0@@6| $h@@2))
)))
(assert (forall ((d@@4 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_System.Tuple2.___hMake2_q d@@4) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@4 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@3)
 :pattern ( ($IsAlloc DatatypeTypeType d@@4 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@3))
)))) ($IsAllocBox (_System.Tuple2._1 d@@4) |_System._tuple#2$T1@@7| $h@@3))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@4) |_System._tuple#2$T1@@7| $h@@3))
)))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (n Int) ) (!  (and (=> (< n (|Seq#Length| s0@@0)) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n) (|Seq#Index| s0@@0 n))) (=> (<= (|Seq#Length| s0@@0) n) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n) (|Seq#Index| s1@@0 (- n (|Seq#Length| s0@@0))))))
 :pattern ( (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((x@@11 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@11))) (Lit BoxType ($Box intType (int_2_U x@@11))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@11))))
)))
(assert (forall ((x@@12 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@12)) (Lit BoxType ($Box T@@5 x@@12)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@12)))
)))
(assert (forall ((s@@6 T@U) ) (!  (=> (= (|Seq#Length| s@@6) 0) (= s@@6 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@6))
)))
(assert (forall ((h@@5 T@U) (v@@7 T@U) ) (! ($IsAlloc realType v@@7 TReal h@@5)
 :pattern ( ($IsAlloc realType v@@7 TReal h@@5))
)))
(assert (forall ((v@@8 T@U) (t0@@4 T@U) ) (! (= ($Is SeqType v@@8 (TSeq t0@@4)) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@8))) ($IsBox (|Seq#Index| v@@8 i@@1) t0@@4))
 :pattern ( (|Seq#Index| v@@8 i@@1))
)))
 :pattern ( ($Is SeqType v@@8 (TSeq t0@@4)))
)))
(assert (forall ((a@@20 T@U) (x@@13 T@U) ) (!  (=> (not (|Set#IsMember| a@@20 x@@13)) (= (|Set#Card| (|Set#UnionOne| a@@20 x@@13)) (+ (|Set#Card| a@@20) 1)))
 :pattern ( (|Set#Card| (|Set#UnionOne| a@@20 x@@13)))
)))
(assert (forall ((s@@7 T@U) (i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| s@@7))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@7 i@@2))) (|Seq#Rank| s@@7)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@7 i@@2))))
)))
(assert (forall ((v@@9 T@U) ) (! ($Is realType v@@9 TReal)
 :pattern ( ($Is realType v@@9 TReal))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |s#0@0| () T@U)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun $Heap@2 () T@U)
(declare-fun |shape#0_0@1| () T@U)
(declare-fun |ordered#0@2| () T@U)
(declare-fun |ordered#0@1| () T@U)
(declare-fun |s#0@1| () T@U)
(declare-fun |$decr$loop#00@1| () Int)
(declare-fun |shape#0_1@1| () T@U)
(declare-fun |shape'#0_0@1| () T@U)
(declare-fun |call2formal@shape#0| () T@U)
(declare-fun $Heap@@0 () T@U)
(declare-fun |call2formal@shape#0@0| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |defass#shape#0_0@0| () Bool)
(declare-fun |shape#0_0@0| () T@U)
(declare-fun |defass#_v0#0_0@0| () Bool)
(declare-fun |_v0#0_0@0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |$decr_init$loop#00@0| () Int)
(declare-fun |ordered#0@0| () T@U)
(declare-fun |shapes#0| () T@U)
(declare-fun |s#0| () T@U)
(declare-fun |ordered#0| () T@U)
(declare-fun |defass#_v0#0_0| () Bool)
(declare-fun |_v0#0_0| () T@U)
(declare-fun |defass#shape#0_0| () Bool)
(declare-fun |shape#0_0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 30) (let ((anon5_correct true))
(let ((anon19_Else_correct  (=> (and (< (LitInt 0) (|Set#Card| |s#0@0|)) (= (ControlFlow 0 25) 23)) anon5_correct)))
(let ((anon19_Then_correct  (=> (and (<= (|Set#Card| |s#0@0|) (LitInt 0)) (= (ControlFlow 0 24) 23)) anon5_correct)))
(let ((anon18_Then_correct  (=> (not |$w$loop#0@0|) (and (=> (= (ControlFlow 0 26) 24) anon19_Then_correct) (=> (= (ControlFlow 0 26) 25) anon19_Else_correct)))))
(let ((anon15_correct  (and (=> (= (ControlFlow 0 4) (- 0 8)) (or (and ($Is refType null Tclass._module.Shape) (and (|Set#IsMember| |s#0@0| ($Box refType null)) (forall ((|shape'#0_3| T@U) ) (!  (=> ($Is refType |shape'#0_3| Tclass._module.Shape) (=> (|Set#IsMember| |s#0@0| ($Box refType |shape'#0_3|)) (<= (U_2_real ($Unbox realType (_System.Tuple2._0 (_module.Shape.Center $Heap@2 null)))) (U_2_real ($Unbox realType (_System.Tuple2._0 (_module.Shape.Center $Heap@2 |shape'#0_3|)))))))
 :pattern ( (_module.Shape.Center $Heap@2 |shape'#0_3|))
 :pattern ( (|Set#IsMember| |s#0@0| ($Box refType |shape'#0_3|)))
)))) (exists ((|$as#shape0_0#0_0| T@U) )  (and ($Is refType |$as#shape0_0#0_0| Tclass._module.Shape) (and (|Set#IsMember| |s#0@0| ($Box refType |$as#shape0_0#0_0|)) (forall ((|shape'#0_2| T@U) ) (!  (=> ($Is refType |shape'#0_2| Tclass._module.Shape) (=> (|Set#IsMember| |s#0@0| ($Box refType |shape'#0_2|)) (<= (U_2_real ($Unbox realType (_System.Tuple2._0 (_module.Shape.Center $Heap@2 |$as#shape0_0#0_0|)))) (U_2_real ($Unbox realType (_System.Tuple2._0 (_module.Shape.Center $Heap@2 |shape'#0_2|)))))))
 :pattern ( (_module.Shape.Center $Heap@2 |shape'#0_2|))
 :pattern ( (|Set#IsMember| |s#0@0| ($Box refType |shape'#0_2|)))
))))))) (=> (or (and ($Is refType null Tclass._module.Shape) (and (|Set#IsMember| |s#0@0| ($Box refType null)) (forall ((|shape'#0_3@@0| T@U) ) (!  (=> ($Is refType |shape'#0_3@@0| Tclass._module.Shape) (=> (|Set#IsMember| |s#0@0| ($Box refType |shape'#0_3@@0|)) (<= (U_2_real ($Unbox realType (_System.Tuple2._0 (_module.Shape.Center $Heap@2 null)))) (U_2_real ($Unbox realType (_System.Tuple2._0 (_module.Shape.Center $Heap@2 |shape'#0_3@@0|)))))))
 :pattern ( (_module.Shape.Center $Heap@2 |shape'#0_3@@0|))
 :pattern ( (|Set#IsMember| |s#0@0| ($Box refType |shape'#0_3@@0|)))
)))) (exists ((|$as#shape0_0#0_0@@0| T@U) )  (and ($Is refType |$as#shape0_0#0_0@@0| Tclass._module.Shape) (and (|Set#IsMember| |s#0@0| ($Box refType |$as#shape0_0#0_0@@0|)) (forall ((|shape'#0_2@@0| T@U) ) (!  (=> ($Is refType |shape'#0_2@@0| Tclass._module.Shape) (=> (|Set#IsMember| |s#0@0| ($Box refType |shape'#0_2@@0|)) (<= (U_2_real ($Unbox realType (_System.Tuple2._0 (_module.Shape.Center $Heap@2 |$as#shape0_0#0_0@@0|)))) (U_2_real ($Unbox realType (_System.Tuple2._0 (_module.Shape.Center $Heap@2 |shape'#0_2@@0|)))))))
 :pattern ( (_module.Shape.Center $Heap@2 |shape'#0_2@@0|))
 :pattern ( (|Set#IsMember| |s#0@0| ($Box refType |shape'#0_2@@0|)))
)))))) (=> (=> true (and ($Is refType |shape#0_0@1| Tclass._module.Shape) ($IsAlloc refType |shape#0_0@1| Tclass._module.Shape $Heap@2))) (=> (and (|Set#IsMember| |s#0@0| ($Box refType |shape#0_0@1|)) (forall ((|shape'#0_4| T@U) ) (!  (=> ($Is refType |shape'#0_4| Tclass._module.Shape) (=> (|Set#IsMember| |s#0@0| ($Box refType |shape'#0_4|)) (<= (U_2_real ($Unbox realType (_System.Tuple2._0 (_module.Shape.Center $Heap@2 |shape#0_0@1|)))) (U_2_real ($Unbox realType (_System.Tuple2._0 (_module.Shape.Center $Heap@2 |shape'#0_4|)))))))
 :pattern ( (_module.Shape.Center $Heap@2 |shape'#0_4|))
 :pattern ( (|Set#IsMember| |s#0@0| ($Box refType |shape'#0_4|)))
))) (and (=> (= (ControlFlow 0 4) (- 0 7)) true) (=> (= |ordered#0@2| (|Seq#Append| |ordered#0@1| (|Seq#Build| |Seq#Empty| ($Box refType |shape#0_0@1|)))) (and (=> (= (ControlFlow 0 4) (- 0 6)) true) (=> (= |s#0@1| (|Set#Difference| |s#0@0| (|Set#UnionOne| |Set#Empty| ($Box refType |shape#0_0@1|)))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (or (<= 0 |$decr$loop#00@1|) (= (ite (<= (|Set#Card| |s#0@1|) (LitInt 0)) (- 0 (|Set#Card| |s#0@1|)) (- (|Set#Card| |s#0@1|) 0)) |$decr$loop#00@1|))) (=> (or (<= 0 |$decr$loop#00@1|) (= (ite (<= (|Set#Card| |s#0@1|) (LitInt 0)) (- 0 (|Set#Card| |s#0@1|)) (- (|Set#Card| |s#0@1|) 0)) |$decr$loop#00@1|)) (=> (= (ControlFlow 0 4) (- 0 3)) (< (ite (<= (|Set#Card| |s#0@1|) (LitInt 0)) (- 0 (|Set#Card| |s#0@1|)) (- (|Set#Card| |s#0@1|) 0)) |$decr$loop#00@1|))))))))))))))
(let ((anon14_correct  (=> (and (=> (|Set#IsMember| |s#0@0| ($Box refType |shape#0_1@1|)) (forall ((|shape'#0_1| T@U) ) (!  (=> ($Is refType |shape'#0_1| Tclass._module.Shape) (=> (|Set#IsMember| |s#0@0| ($Box refType |shape'#0_1|)) (and (and (|_module.Shape.Center#canCall| $Heap@2 |shape#0_1@1|) (_System.Tuple2.___hMake2_q (_module.Shape.Center $Heap@2 |shape#0_1@1|))) (and (|_module.Shape.Center#canCall| $Heap@2 |shape'#0_1|) (_System.Tuple2.___hMake2_q (_module.Shape.Center $Heap@2 |shape'#0_1|))))))
 :pattern ( (_module.Shape.Center $Heap@2 |shape'#0_1|))
 :pattern ( (|Set#IsMember| |s#0@0| ($Box refType |shape'#0_1|)))
))) (= (ControlFlow 0 10) 4)) anon15_correct)))
(let ((anon24_Else_correct  (=> (and (not (|Set#IsMember| |s#0@0| ($Box refType |shape'#0_0@1|))) (= (ControlFlow 0 16) 10)) anon14_correct)))
(let ((anon24_Then_correct  (=> (|Set#IsMember| |s#0@0| ($Box refType |shape'#0_0@1|)) (and (=> (= (ControlFlow 0 13) (- 0 15)) (or (not (= |shape#0_1@1| null)) (not true))) (=> (and (and ($IsAllocBox ($Box refType |shape#0_1@1|) Tclass._module.Shape? $Heap@2) (|_module.Shape.Center#canCall| $Heap@2 |shape#0_1@1|)) (and (_System.Tuple2.___hMake2_q (_module.Shape.Center $Heap@2 |shape#0_1@1|)) (_System.Tuple2.___hMake2_q (_module.Shape.Center $Heap@2 |shape#0_1@1|)))) (and (=> (= (ControlFlow 0 13) (- 0 14)) (or (not (= |shape'#0_0@1| null)) (not true))) (=> ($IsAllocBox ($Box refType |shape'#0_0@1|) Tclass._module.Shape? $Heap@2) (=> (and (and (|_module.Shape.Center#canCall| $Heap@2 |shape'#0_0@1|) (_System.Tuple2.___hMake2_q (_module.Shape.Center $Heap@2 |shape'#0_0@1|))) (and (_System.Tuple2.___hMake2_q (_module.Shape.Center $Heap@2 |shape'#0_0@1|)) (= (ControlFlow 0 13) 10))) anon14_correct))))))))
(let ((anon23_Then_correct  (=> (and ($Is refType |shape'#0_0@1| Tclass._module.Shape) ($IsAlloc refType |shape'#0_0@1| Tclass._module.Shape $Heap@2)) (and (=> (= (ControlFlow 0 17) 13) anon24_Then_correct) (=> (= (ControlFlow 0 17) 16) anon24_Else_correct)))))
(let ((anon23_Else_correct  (=> (and (not (and ($Is refType |shape'#0_0@1| Tclass._module.Shape) ($IsAlloc refType |shape'#0_0@1| Tclass._module.Shape $Heap@2))) (= (ControlFlow 0 12) 10)) anon14_correct)))
(let ((anon22_Then_correct  (=> (|Set#IsMember| |s#0@0| ($Box refType |shape#0_1@1|)) (and (=> (= (ControlFlow 0 18) 17) anon23_Then_correct) (=> (= (ControlFlow 0 18) 12) anon23_Else_correct)))))
(let ((anon22_Else_correct  (=> (and (not (|Set#IsMember| |s#0@0| ($Box refType |shape#0_1@1|))) (= (ControlFlow 0 11) 10)) anon14_correct)))
(let ((anon21_Then_correct  (=> (and ($Is refType |shape#0_1@1| Tclass._module.Shape) ($IsAlloc refType |shape#0_1@1| Tclass._module.Shape $Heap@2)) (and (=> (= (ControlFlow 0 19) 18) anon22_Then_correct) (=> (= (ControlFlow 0 19) 11) anon22_Else_correct)))))
(let ((anon21_Else_correct  (=> (and (not (and ($Is refType |shape#0_1@1| Tclass._module.Shape) ($IsAlloc refType |shape#0_1@1| Tclass._module.Shape $Heap@2))) (= (ControlFlow 0 9) 4)) anon15_correct)))
(let ((anon20_Else_correct  (=> (and (and (or (not (= (|Set#Card| |s#0@0|) 0)) (not true)) (= |$decr$loop#00@1| (ite (<= (|Set#Card| |s#0@0|) (LitInt 0)) (- 0 (|Set#Card| |s#0@0|)) (- (|Set#Card| |s#0@0|) 0)))) (and ($Is refType |call2formal@shape#0| Tclass._module.Shape) ($IsAlloc refType |call2formal@shape#0| Tclass._module.Shape $Heap@@0))) (and (=> (= (ControlFlow 0 20) (- 0 21)) (not (|Set#Equal| |s#0@0| |Set#Empty|))) (=> (not (|Set#Equal| |s#0@0| |Set#Empty|)) (=> (and (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (and ($Is refType |call2formal@shape#0@0| Tclass._module.Shape) ($IsAlloc refType |call2formal@shape#0@0| Tclass._module.Shape $Heap@2))) (and (and (=> (|Set#IsMember| |s#0@0| ($Box refType |call2formal@shape#0@0|)) (forall ((|shape'#1| T@U) ) (!  (=> ($Is refType |shape'#1| Tclass._module.Shape) (=> (|Set#IsMember| |s#0@0| ($Box refType |shape'#1|)) (and (and (|_module.Shape.Center#canCall| $Heap@2 |call2formal@shape#0@0|) (_System.Tuple2.___hMake2_q (_module.Shape.Center $Heap@2 |call2formal@shape#0@0|))) (and (|_module.Shape.Center#canCall| $Heap@2 |shape'#1|) (_System.Tuple2.___hMake2_q (_module.Shape.Center $Heap@2 |shape'#1|))))))
 :pattern ( (_module.Shape.Center $Heap@2 |shape'#1|))
 :pattern ( (|Set#IsMember| |s#0@0| ($Box refType |shape'#1|)))
))) (|Set#IsMember| |s#0@0| ($Box refType |call2formal@shape#0@0|))) (and (forall ((|shape'#1@@0| T@U) ) (!  (=> ($Is refType |shape'#1@@0| Tclass._module.Shape) (=> (|Set#IsMember| |s#0@0| ($Box refType |shape'#1@@0|)) (<= (U_2_real ($Unbox realType (_System.Tuple2._0 (_module.Shape.Center $Heap@2 |call2formal@shape#0@0|)))) (U_2_real ($Unbox realType (_System.Tuple2._0 (_module.Shape.Center $Heap@2 |shape'#1@@0|)))))))
 :pattern ( (_module.Shape.Center $Heap@2 |shape'#1@@0|))
 :pattern ( (|Set#IsMember| |s#0@0| ($Box refType |shape'#1@@0|)))
)) (= $Heap@0 $Heap@2)))) (and (=> (= (ControlFlow 0 20) 19) anon21_Then_correct) (=> (= (ControlFlow 0 20) 9) anon21_Else_correct))))))))
(let ((anon20_Then_correct true))
(let ((anon18_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 22) 2) anon20_Then_correct) (=> (= (ControlFlow 0 22) 20) anon20_Else_correct)))))
(let ((anon17_LoopBody_correct  (and (=> (= (ControlFlow 0 27) 26) anon18_Then_correct) (=> (= (ControlFlow 0 27) 22) anon18_Else_correct))))
(let ((anon17_LoopDone_correct true))
(let ((anon17_LoopHead_correct  (=> (=> |defass#shape#0_0@0| (and ($Is refType |shape#0_0@0| Tclass._module.Shape) ($IsAlloc refType |shape#0_0@0| Tclass._module.Shape $Heap@0))) (=> (and (and ($Is SeqType |ordered#0@1| (TSeq Tclass._module.Shape)) ($IsAlloc SeqType |ordered#0@1| (TSeq Tclass._module.Shape) $Heap@0)) (and ($Is SetType |s#0@0| (TSet Tclass._module.Shape)) ($IsAlloc SetType |s#0@0| (TSet Tclass._module.Shape) $Heap@0))) (=> (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (=> |defass#_v0#0_0@0| (and ($Is refType |_v0#0_0@0| Tclass._module.Shape) ($IsAlloc refType |_v0#0_0@0| Tclass._module.Shape $Heap@0))) (not false))) (and (and (forall (($o@@3 T@U) ) (!  (=> (and (or (not (= $o@@3 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 $o@@3) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@3) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 $o@@3)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@3))
)) ($HeapSucc $Heap@@0 $Heap@0)) (and (forall (($o@@4 T@U) ($f@@1 T@U) ) (!  (=> (and (or (not (= $o@@4 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 $o@@4) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@4) $f@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@0 $o@@4) $f@@1)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@4 $f@@1))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@4) $f@@1))
)) (<= (ite (<= (|Set#Card| |s#0@0|) (LitInt 0)) (- 0 (|Set#Card| |s#0@0|)) (- (|Set#Card| |s#0@0|) 0)) |$decr_init$loop#00@0|)))) (and (=> (= (ControlFlow 0 28) 1) anon17_LoopDone_correct) (=> (= (ControlFlow 0 28) 27) anon17_LoopBody_correct)))))))
(let ((anon0_correct  (=> (and (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@0 alloc false)) (= |ordered#0@0| (Lit SeqType |Seq#Empty|))) (and (= |$decr_init$loop#00@0| (ite (<= (|Set#Card| |shapes#0|) (LitInt 0)) (- 0 (|Set#Card| |shapes#0|)) (- (|Set#Card| |shapes#0|) 0))) (= (ControlFlow 0 29) 28))) anon17_LoopHead_correct)))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap@@0) ($IsHeapAnchor $Heap@@0)) (and ($Is SetType |shapes#0| (TSet Tclass._module.Shape)) ($IsAlloc SetType |shapes#0| (TSet Tclass._module.Shape) $Heap@@0))) (and (and ($Is SetType |s#0| (TSet Tclass._module.Shape)) ($IsAlloc SetType |s#0| (TSet Tclass._module.Shape) $Heap@@0)) true)) (=> (and (and (and (and ($Is SeqType |ordered#0| (TSeq Tclass._module.Shape)) ($IsAlloc SeqType |ordered#0| (TSeq Tclass._module.Shape) $Heap@@0)) true) (and (=> |defass#_v0#0_0| (and ($Is refType |_v0#0_0| Tclass._module.Shape) ($IsAlloc refType |_v0#0_0| Tclass._module.Shape $Heap@@0))) true)) (and (and (=> |defass#shape#0_0| (and ($Is refType |shape#0_0| Tclass._module.Shape) ($IsAlloc refType |shape#0_0| Tclass._module.Shape $Heap@@0))) true) (and (= 4 $FunctionContextHeight) (= (ControlFlow 0 30) 29)))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
