(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 (T@U T@U) Bool)
(declare-fun $generated@@22 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 (T@T T@T) T@T)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@28 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@29 (T@T) T@T)
(declare-fun $generated@@30 (T@T) T@T)
(declare-fun $generated@@51 (T@T T@U) T@U)
(declare-fun $generated@@54 (T@T T@U) T@U)
(declare-fun $generated@@57 (T@U T@U T@U) Bool)
(declare-fun $generated@@58 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@72 (T@U) T@U)
(declare-fun $generated@@73 (T@U) T@U)
(declare-fun $generated@@78 (T@U T@U) Bool)
(declare-fun $generated@@79 (T@T T@U T@U) Bool)
(declare-fun $generated@@84 (T@U) T@U)
(declare-fun $generated@@88 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@89 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@90 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@122 () T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@0))
(assert  (and (and (and (and (and (and (and (forall (($generated@@31 T@T) ($generated@@32 T@T) ($generated@@33 T@U) ($generated@@34 T@U) ($generated@@35 T@U) ) (! (= ($generated@@22 $generated@@31 $generated@@32 ($generated@@28 $generated@@31 $generated@@32 $generated@@34 $generated@@35 $generated@@33) $generated@@35) $generated@@33)
 :weight 0
)) (forall (($generated@@36 T@T) ($generated@@37 T@T) ($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@U) ) (!  (or (= $generated@@40 $generated@@41) (= ($generated@@22 $generated@@36 $generated@@37 ($generated@@28 $generated@@36 $generated@@37 $generated@@39 $generated@@40 $generated@@38) $generated@@41) ($generated@@22 $generated@@36 $generated@@37 $generated@@39 $generated@@41)))
 :weight 0
))) (= ($generated@@4 $generated@@23) 3)) (= ($generated@@4 $generated@@24) 4)) (= ($generated@@4 $generated@@25) 5)) (forall (($generated@@42 T@T) ($generated@@43 T@T) ) (= ($generated@@4 ($generated@@26 $generated@@42 $generated@@43)) 6))) (forall (($generated@@44 T@T) ($generated@@45 T@T) ) (! (= ($generated@@29 ($generated@@26 $generated@@44 $generated@@45)) $generated@@44)
 :pattern ( ($generated@@26 $generated@@44 $generated@@45))
))) (forall (($generated@@46 T@T) ($generated@@47 T@T) ) (! (= ($generated@@30 ($generated@@26 $generated@@46 $generated@@47)) $generated@@47)
 :pattern ( ($generated@@26 $generated@@46 $generated@@47))
))))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@U) ) (!  (=> ($generated@@21 $generated@@48 $generated@@49) (forall (($generated@@50 T@U) ) (!  (=> ($generated@@9 ($generated@@27 $generated@@5 ($generated@@22 $generated@@23 $generated@@24 ($generated@@22 $generated@@25 ($generated@@26 $generated@@23 $generated@@24) $generated@@48 $generated@@50) $generated@@1))) ($generated@@9 ($generated@@27 $generated@@5 ($generated@@22 $generated@@23 $generated@@24 ($generated@@22 $generated@@25 ($generated@@26 $generated@@23 $generated@@24) $generated@@49 $generated@@50) $generated@@1))))
 :pattern ( ($generated@@22 $generated@@23 $generated@@24 ($generated@@22 $generated@@25 ($generated@@26 $generated@@23 $generated@@24) $generated@@49 $generated@@50) $generated@@1))
)))
 :pattern ( ($generated@@21 $generated@@48 $generated@@49))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@T) ) (! (= ($generated@@51 $generated@@53 $generated@@52) $generated@@52)
 :pattern ( ($generated@@51 $generated@@53 $generated@@52))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@54 $generated@@56 ($generated@@27 $generated@@56 $generated@@55)) $generated@@55)
 :pattern ( ($generated@@27 $generated@@56 $generated@@55))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@T) ) (! (= ($generated@@57 ($generated@@54 $generated@@62 $generated@@59) $generated@@60 $generated@@61) ($generated@@58 $generated@@62 $generated@@59 $generated@@60 $generated@@61))
 :pattern ( ($generated@@57 ($generated@@54 $generated@@62 $generated@@59) $generated@@60 $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (!  (=> ($generated@@21 $generated@@63 $generated@@64) (=> ($generated@@57 $generated@@65 $generated@@66 $generated@@63) ($generated@@57 $generated@@65 $generated@@66 $generated@@64)))
 :pattern ( ($generated@@21 $generated@@63 $generated@@64) ($generated@@57 $generated@@65 $generated@@66 $generated@@63))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@T) ) (!  (=> ($generated@@21 $generated@@67 $generated@@68) (=> ($generated@@58 $generated@@71 $generated@@69 $generated@@70 $generated@@67) ($generated@@58 $generated@@71 $generated@@69 $generated@@70 $generated@@68)))
 :pattern ( ($generated@@21 $generated@@67 $generated@@68) ($generated@@58 $generated@@71 $generated@@69 $generated@@70 $generated@@67))
)))
(assert (forall (($generated@@74 T@U) ) (!  (and (= ($generated@@20 ($generated@@72 $generated@@74)) $generated@@2) (= ($generated@@73 ($generated@@72 $generated@@74)) $generated@@3))
 :pattern ( ($generated@@72 $generated@@74))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (!  (=> (or (not (= $generated@@75 $generated@@77)) (not true)) (=> (and ($generated@@21 $generated@@75 $generated@@76) ($generated@@21 $generated@@76 $generated@@77)) ($generated@@21 $generated@@75 $generated@@77)))
 :pattern ( ($generated@@21 $generated@@75 $generated@@76) ($generated@@21 $generated@@76 $generated@@77))
)))
(assert (forall (($generated@@80 T@U) ) (!  (=> ($generated@@78 $generated@@80 $generated) (and (= ($generated@@54 $generated@@5 ($generated@@27 $generated@@5 $generated@@80)) $generated@@80) ($generated@@79 $generated@@5 ($generated@@27 $generated@@5 $generated@@80) $generated)))
 :pattern ( ($generated@@78 $generated@@80 $generated))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@T) ) (! (= ($generated@@78 ($generated@@54 $generated@@83 $generated@@81) $generated@@82) ($generated@@79 $generated@@83 $generated@@81 $generated@@82))
 :pattern ( ($generated@@78 ($generated@@54 $generated@@83 $generated@@81) $generated@@82))
)))
(assert (forall (($generated@@85 T@U) ) (! (= ($generated@@84 ($generated@@72 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@72 $generated@@85))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@T) ) (! (= ($generated@@27 $generated@@87 ($generated@@54 $generated@@87 $generated@@86)) $generated@@86)
 :pattern ( ($generated@@54 $generated@@87 $generated@@86))
)))
(assert  (and (forall (($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@T) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@88 $generated@@91 $generated@@92 $generated@@93 ($generated@@90 $generated@@91 $generated@@92 $generated@@93 $generated@@95 $generated@@96 $generated@@97 $generated@@94) $generated@@96 $generated@@97) $generated@@94)
 :weight 0
)) (and (forall (($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@103 $generated@@105) (= ($generated@@88 $generated@@98 $generated@@99 $generated@@100 ($generated@@90 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@103 $generated@@104 $generated@@101) $generated@@105 $generated@@106) ($generated@@88 $generated@@98 $generated@@99 $generated@@100 $generated@@102 $generated@@105 $generated@@106)))
 :weight 0
)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ) (!  (or (= $generated@@113 $generated@@115) (= ($generated@@88 $generated@@107 $generated@@108 $generated@@109 ($generated@@90 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@113 $generated@@110) $generated@@114 $generated@@115) ($generated@@88 $generated@@107 $generated@@108 $generated@@109 $generated@@111 $generated@@114 $generated@@115)))
 :weight 0
)))))
(assert (forall (($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 Bool) ($generated@@120 T@U) ($generated@@121 T@U) ) (! (= ($generated@@9 ($generated@@88 $generated@@25 $generated@@23 $generated@@5 ($generated@@89 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))  (=> (and (or (not (= $generated@@120 $generated@@116)) (not true)) ($generated@@9 ($generated@@27 $generated@@5 ($generated@@22 $generated@@23 $generated@@24 ($generated@@22 $generated@@25 ($generated@@26 $generated@@23 $generated@@24) $generated@@117 $generated@@120) $generated@@118)))) $generated@@119))
 :pattern ( ($generated@@88 $generated@@25 $generated@@23 $generated@@5 ($generated@@89 $generated@@116 $generated@@117 $generated@@118 $generated@@119) $generated@@120 $generated@@121))
)))
(assert (= ($generated@@4 $generated@@122) 7))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@U) ) (!  (=> ($generated@@78 $generated@@124 ($generated@@72 $generated@@123)) (and (= ($generated@@54 $generated@@122 ($generated@@27 $generated@@122 $generated@@124)) $generated@@124) ($generated@@79 $generated@@122 ($generated@@27 $generated@@122 $generated@@124) ($generated@@72 $generated@@123))))
 :pattern ( ($generated@@78 $generated@@124 ($generated@@72 $generated@@123)))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@T) ) (! (= ($generated@@54 $generated@@126 ($generated@@51 $generated@@126 $generated@@125)) ($generated@@51 $generated@@24 ($generated@@54 $generated@@126 $generated@@125)))
 :pattern ( ($generated@@54 $generated@@126 ($generated@@51 $generated@@126 $generated@@125)))
)))
(assert (forall (($generated@@127 T@U) ($generated@@128 T@U) ) (! ($generated@@58 $generated@@5 $generated@@128 $generated $generated@@127)
 :pattern ( ($generated@@58 $generated@@5 $generated@@128 $generated $generated@@127))
)))
(assert (forall (($generated@@129 T@U) ) (! ($generated@@79 $generated@@5 $generated@@129 $generated)
 :pattern ( ($generated@@79 $generated@@5 $generated@@129 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 () T@U)
(declare-fun $generated@@133 () T@U)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () Bool)
(declare-fun $generated@@136 (T@U) Bool)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 () T@U)
(declare-fun $generated@@139 (T@U) Bool)
(declare-fun $generated@@140 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@141 true))
(let (($generated@@142  (=> (and (not (and ($generated@@78 $generated@@130 $generated@@131) ($generated@@57 $generated@@130 $generated@@131 $generated@@132))) (= (ControlFlow 0 6) 4)) $generated@@141)))
(let (($generated@@143  (=> (and ($generated@@78 $generated@@130 $generated@@131) ($generated@@57 $generated@@130 $generated@@131 $generated@@132)) (=> (and (and (= $generated@@133 ($generated@@89 $generated@@134 $generated@@132 $generated@@1 false)) (= $generated@@135 ($generated@@9 ($generated@@51 $generated@@5 ($generated@@8 false))))) (and ($generated@@79 $generated@@5 ($generated@@8 $generated@@135) $generated) (= (ControlFlow 0 5) 4))) $generated@@141))))
(let (($generated@@144  (=> (and ($generated@@136 $generated@@132) (or (= $generated@@137 $generated@@132) ($generated@@21 $generated@@137 $generated@@132))) (and (=> (= (ControlFlow 0 7) 5) $generated@@143) (=> (= (ControlFlow 0 7) 6) $generated@@142)))))
(let (($generated@@145  (=> (= (ControlFlow 0 3) (- 0 2)) ($generated@@9 ($generated@@51 $generated@@5 ($generated@@8 true))))))
(let (($generated@@146 true))
(let (($generated@@147  (=> (= $generated@@138 ($generated@@89 $generated@@134 $generated@@137 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 8) 1) $generated@@146) (=> (= (ControlFlow 0 8) 7) $generated@@144)) (=> (= (ControlFlow 0 8) 3) $generated@@145)))))
(let (($generated@@148  (=> (and (and ($generated@@136 $generated@@137) ($generated@@139 $generated@@137)) (and (= 1 $generated@@140) (= (ControlFlow 0 9) 8))) $generated@@147)))
$generated@@148)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
