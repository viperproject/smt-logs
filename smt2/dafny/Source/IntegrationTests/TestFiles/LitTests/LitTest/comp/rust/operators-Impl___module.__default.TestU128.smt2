(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun _module.__default.TWO__TO__THE__128 () Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun Mul (Int Int) Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :qid |typeInv:U_2_bool|
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :qid |cast:U_2_bool|
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :qid |typeInv:U_2_int|
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :qid |cast:U_2_int|
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :qid |typeInv:U_2_real|
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :qid |cast:U_2_real|
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc)
)
(assert (= (Tag TInt) TagInt))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :qid |DafnyPreludebpl.108:29|
 :skolemid |17|
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :qid |DafnyPreludebpl.102:29|
 :skolemid |15|
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :qid |DafnyPreludebpl.168:18|
 :skolemid |26|
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert  (=> (< 0 $FunctionContextHeight) ($Is intType (int_2_U _module.__default.TWO__TO__THE__128) TInt)))
(assert (forall ((x@@5 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@5)) x@@5)
 :qid |DafnyPreludebpl.167:18|
 :skolemid |25|
 :pattern ( ($Box T@@1 x@@5))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :qid |mapAx0:MapType0Select|
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :qid |mapAx1:MapType0Select:0|
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :qid |mapAx1:MapType0Select:1|
 :weight 0
)))) (= (Ctor refType) 3)) (= (Ctor FieldType) 4)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :qid |mapAx0:MapType1Select|
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :qid |mapAx1:MapType1Select:0|
 :weight 0
))) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (! (= (Ctor (MapType1Type arg0@@2 arg1)) 6)
 :qid |ctor:MapType1Type|
))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :qid |typeInv:MapType1TypeInv0|
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :qid |typeInv:MapType1TypeInv1|
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :qid |DafnyPreludebpl.156:1|
 :skolemid |595|
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (= _module.__default.TWO__TO__THE__128 (LitInt 340282366920938463463374607431768211456)))
(assert (forall ((x@@6 Int) (y Int) ) (! (= (Mul x@@6 y) (* x@@6 y))
 :qid |DafnyPreludebpl.1647:14|
 :skolemid |338|
 :pattern ( (Mul x@@6 y))
)))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :qid |DafnyPreludebpl.109:15|
 :skolemid |18|
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@8)) (Lit BoxType ($Box T@@2 x@@8)))
 :qid |DafnyPreludebpl.103:18|
 :skolemid |16|
 :pattern ( ($Box T@@2 (Lit T@@2 x@@8)))
)))
(assert (forall ((v T@U) ) (! ($Is intType v TInt)
 :qid |DafnyPreludebpl.228:14|
 :skolemid |40|
 :pattern ( ($Is intType v TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |x128#0@0| () Int)
(declare-fun |s128#0@0| () Int)
(declare-fun |o128#0@0| () Int)
(declare-fun |newtype$check#35@0| () (_ BitVec 128))
(declare-fun |t128#0@0| () Int)
(declare-fun |m128#0@0| () Int)
(declare-fun |newtype$check#31@0| () (_ BitVec 128))
(declare-fun |y128#0@0| () Int)
(declare-fun |w128#0@0| () Int)
(declare-fun |newtype$check#27@0| () Int)
(declare-fun |newtype$check#28@0| () Int)
(declare-fun |z128#0@0| () Int)
(declare-fun |newtype$check#17@0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun |newtype$check#0@0| () Int)
(declare-fun |newtype$check#1@0| () Int)
(declare-fun |newtype$check#2@0| () Int)
(declare-fun |newtype$check#3@0| () Int)
(declare-fun |newtype$check#4@0| () Int)
(declare-fun |newtype$check#5@0| () Int)
(declare-fun |newtype$check#6@0| () Int)
(declare-fun |newtype$check#7@0| () Int)
(declare-fun |newtype$check#8@0| () Int)
(declare-fun |newtype$check#9@0| () Int)
(declare-fun |newtype$check#10@0| () Int)
(declare-fun |newtype$check#11@0| () Int)
(declare-fun |newtype$check#12@0| () Int)
(declare-fun |newtype$check#13@0| () Int)
(declare-fun |newtype$check#14@0| () Int)
(declare-fun |newtype$check#15@0| () Int)
(declare-fun |newtype$check#16@0| () Int)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |o128#0| () Int)
(declare-fun |s128#0| () Int)
(declare-fun |w128#0| () Int)
(declare-fun |x128#0| () Int)
(declare-fun |y128#0| () Int)
(declare-fun |z128#0| () Int)
(declare-fun |m128#0| () Int)
(declare-fun |t128#0| () Int)
(set-info :boogie-vc-id Impl$$_module.__default.TestU128)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 57) (let ((anon24_Else_correct true))
(let ((anon24_Then_correct true))
(let ((anon23_Else_correct  (=> (= (bvlshr ((_ int2bv 128) |x128#0@0|) (concat #x000000000000000000000000000000 ((_ extract 7 0) ((_ int2bv 128) |s128#0@0|)))) ((_ int2bv 128) |s128#0@0|)) (and (=> (= (ControlFlow 0 10) (- 0 15)) (and (<= 0 |x128#0@0|) (< |x128#0@0| 340282366920938463463374607431768211456))) (=> (and (<= 0 |x128#0@0|) (< |x128#0@0| 340282366920938463463374607431768211456)) (and (=> (= (ControlFlow 0 10) (- 0 14)) (and (<= 0 |o128#0@0|) (< |o128#0@0| 340282366920938463463374607431768211456))) (=> (and (<= 0 |o128#0@0|) (< |o128#0@0| 340282366920938463463374607431768211456)) (=> (= |newtype$check#35@0| ((_ int2bv 128) |o128#0@0|)) (and (=> (= (ControlFlow 0 10) (- 0 13)) (bvult |newtype$check#35@0| #x00000000000000000000000000000100)) (=> (bvult |newtype$check#35@0| #x00000000000000000000000000000100) (and (=> (= (ControlFlow 0 10) (- 0 12)) (bvule ((_ extract 7 0) ((_ int2bv 128) |o128#0@0|)) #x80)) (and (=> (= (ControlFlow 0 10) (- 0 11)) (and (<= 0 |t128#0@0|) (< |t128#0@0| 340282366920938463463374607431768211456))) (=> (and (<= 0 |t128#0@0|) (< |t128#0@0| 340282366920938463463374607431768211456)) (and (=> (= (ControlFlow 0 10) 8) anon24_Then_correct) (=> (= (ControlFlow 0 10) 9) anon24_Else_correct)))))))))))))))
(let ((anon23_Then_correct true))
(let ((anon22_Else_correct  (=> (= (Mul |x128#0@0| (LitInt 3)) |m128#0@0|) (and (=> (= (ControlFlow 0 16) (- 0 21)) (and (<= 0 |x128#0@0|) (< |x128#0@0| 340282366920938463463374607431768211456))) (=> (and (<= 0 |x128#0@0|) (< |x128#0@0| 340282366920938463463374607431768211456)) (and (=> (= (ControlFlow 0 16) (- 0 20)) (and (<= 0 |s128#0@0|) (< |s128#0@0| 340282366920938463463374607431768211456))) (=> (and (<= 0 |s128#0@0|) (< |s128#0@0| 340282366920938463463374607431768211456)) (=> (= |newtype$check#31@0| ((_ int2bv 128) |s128#0@0|)) (and (=> (= (ControlFlow 0 16) (- 0 19)) (bvult |newtype$check#31@0| #x00000000000000000000000000000100)) (=> (bvult |newtype$check#31@0| #x00000000000000000000000000000100) (and (=> (= (ControlFlow 0 16) (- 0 18)) (bvule ((_ extract 7 0) ((_ int2bv 128) |s128#0@0|)) #x80)) (and (=> (= (ControlFlow 0 16) (- 0 17)) (and (<= 0 |s128#0@0|) (< |s128#0@0| 340282366920938463463374607431768211456))) (=> (and (<= 0 |s128#0@0|) (< |s128#0@0| 340282366920938463463374607431768211456)) (and (=> (= (ControlFlow 0 16) 7) anon23_Then_correct) (=> (= (ControlFlow 0 16) 10) anon23_Else_correct)))))))))))))))
(let ((anon22_Then_correct true))
(let ((anon21_Else_correct  (=> (and (= (bvxor ((_ int2bv 128) |x128#0@0|) ((_ int2bv 128) |y128#0@0|)) ((_ int2bv 128) |w128#0@0|)) (= |newtype$check#27@0| (LitInt 3))) (and (=> (= (ControlFlow 0 22) (- 0 24)) (and (<= (LitInt 0) |newtype$check#27@0|) (< |newtype$check#27@0| _module.__default.TWO__TO__THE__128))) (=> (and (<= (LitInt 0) |newtype$check#27@0|) (< |newtype$check#27@0| _module.__default.TWO__TO__THE__128)) (=> (= |newtype$check#28@0| (Mul |x128#0@0| (LitInt 3))) (and (=> (= (ControlFlow 0 22) (- 0 23)) (and (<= (LitInt 0) |newtype$check#28@0|) (< |newtype$check#28@0| _module.__default.TWO__TO__THE__128))) (=> (and (<= (LitInt 0) |newtype$check#28@0|) (< |newtype$check#28@0| _module.__default.TWO__TO__THE__128)) (and (=> (= (ControlFlow 0 22) 6) anon22_Then_correct) (=> (= (ControlFlow 0 22) 16) anon22_Else_correct))))))))))
(let ((anon21_Then_correct true))
(let ((anon20_Else_correct  (=> (= (bvor ((_ int2bv 128) |x128#0@0|) ((_ int2bv 128) |y128#0@0|)) ((_ int2bv 128) |y128#0@0|)) (and (=> (= (ControlFlow 0 25) (- 0 28)) (and (<= 0 |x128#0@0|) (< |x128#0@0| 340282366920938463463374607431768211456))) (=> (and (<= 0 |x128#0@0|) (< |x128#0@0| 340282366920938463463374607431768211456)) (and (=> (= (ControlFlow 0 25) (- 0 27)) (and (<= 0 |y128#0@0|) (< |y128#0@0| 340282366920938463463374607431768211456))) (=> (and (<= 0 |y128#0@0|) (< |y128#0@0| 340282366920938463463374607431768211456)) (and (=> (= (ControlFlow 0 25) (- 0 26)) (and (<= 0 |w128#0@0|) (< |w128#0@0| 340282366920938463463374607431768211456))) (=> (and (<= 0 |w128#0@0|) (< |w128#0@0| 340282366920938463463374607431768211456)) (and (=> (= (ControlFlow 0 25) 5) anon21_Then_correct) (=> (= (ControlFlow 0 25) 22) anon21_Else_correct)))))))))))
(let ((anon20_Then_correct true))
(let ((anon19_Else_correct  (=> (= (bvand ((_ int2bv 128) |x128#0@0|) ((_ int2bv 128) |y128#0@0|)) ((_ int2bv 128) |x128#0@0|)) (and (=> (= (ControlFlow 0 29) (- 0 32)) (and (<= 0 |x128#0@0|) (< |x128#0@0| 340282366920938463463374607431768211456))) (=> (and (<= 0 |x128#0@0|) (< |x128#0@0| 340282366920938463463374607431768211456)) (and (=> (= (ControlFlow 0 29) (- 0 31)) (and (<= 0 |y128#0@0|) (< |y128#0@0| 340282366920938463463374607431768211456))) (=> (and (<= 0 |y128#0@0|) (< |y128#0@0| 340282366920938463463374607431768211456)) (and (=> (= (ControlFlow 0 29) (- 0 30)) (and (<= 0 |y128#0@0|) (< |y128#0@0| 340282366920938463463374607431768211456))) (=> (and (<= 0 |y128#0@0|) (< |y128#0@0| 340282366920938463463374607431768211456)) (and (=> (= (ControlFlow 0 29) 4) anon20_Then_correct) (=> (= (ControlFlow 0 29) 25) anon20_Else_correct)))))))))))
(let ((anon19_Then_correct true))
(let ((anon18_Else_correct  (=> (= (- |y128#0@0| |x128#0@0|) |w128#0@0|) (and (=> (= (ControlFlow 0 33) (- 0 36)) (and (<= 0 |x128#0@0|) (< |x128#0@0| 340282366920938463463374607431768211456))) (=> (and (<= 0 |x128#0@0|) (< |x128#0@0| 340282366920938463463374607431768211456)) (and (=> (= (ControlFlow 0 33) (- 0 35)) (and (<= 0 |y128#0@0|) (< |y128#0@0| 340282366920938463463374607431768211456))) (=> (and (<= 0 |y128#0@0|) (< |y128#0@0| 340282366920938463463374607431768211456)) (and (=> (= (ControlFlow 0 33) (- 0 34)) (and (<= 0 |x128#0@0|) (< |x128#0@0| 340282366920938463463374607431768211456))) (=> (and (<= 0 |x128#0@0|) (< |x128#0@0| 340282366920938463463374607431768211456)) (and (=> (= (ControlFlow 0 33) 3) anon19_Then_correct) (=> (= (ControlFlow 0 33) 29) anon19_Else_correct)))))))))))
(let ((anon18_Then_correct true))
(let ((anon17_Else_correct  (=> (and (= (+ |x128#0@0| |y128#0@0|) |z128#0@0|) (= |newtype$check#17@0| (- |y128#0@0| |x128#0@0|))) (and (=> (= (ControlFlow 0 37) (- 0 38)) (and (<= (LitInt 0) |newtype$check#17@0|) (< |newtype$check#17@0| _module.__default.TWO__TO__THE__128))) (=> (and (<= (LitInt 0) |newtype$check#17@0|) (< |newtype$check#17@0| _module.__default.TWO__TO__THE__128)) (and (=> (= (ControlFlow 0 37) 2) anon18_Then_correct) (=> (= (ControlFlow 0 37) 33) anon18_Else_correct)))))))
(let ((anon17_Then_correct true))
(let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (= |newtype$check#0@0| (LitInt 1))) (and (=> (= (ControlFlow 0 39) (- 0 56)) (and (<= (LitInt 0) |newtype$check#0@0|) (< |newtype$check#0@0| _module.__default.TWO__TO__THE__128))) (=> (and (<= (LitInt 0) |newtype$check#0@0|) (< |newtype$check#0@0| _module.__default.TWO__TO__THE__128)) (=> (= |newtype$check#1@0| (LitInt 1)) (and (=> (= (ControlFlow 0 39) (- 0 55)) (and (<= (LitInt 0) |newtype$check#1@0|) (< |newtype$check#1@0| _module.__default.TWO__TO__THE__128))) (=> (and (<= (LitInt 0) |newtype$check#1@0|) (< |newtype$check#1@0| _module.__default.TWO__TO__THE__128)) (=> (and (= |o128#0@0| (LitInt 1)) (= |newtype$check#2@0| (LitInt 2))) (and (=> (= (ControlFlow 0 39) (- 0 54)) (and (<= (LitInt 0) |newtype$check#2@0|) (< |newtype$check#2@0| _module.__default.TWO__TO__THE__128))) (=> (and (<= (LitInt 0) |newtype$check#2@0|) (< |newtype$check#2@0| _module.__default.TWO__TO__THE__128)) (=> (= |newtype$check#3@0| (LitInt 2)) (and (=> (= (ControlFlow 0 39) (- 0 53)) (and (<= (LitInt 0) |newtype$check#3@0|) (< |newtype$check#3@0| _module.__default.TWO__TO__THE__128))) (=> (and (<= (LitInt 0) |newtype$check#3@0|) (< |newtype$check#3@0| _module.__default.TWO__TO__THE__128)) (=> (and (= |s128#0@0| (LitInt 2)) (= |newtype$check#4@0| (LitInt 5))) (and (=> (= (ControlFlow 0 39) (- 0 52)) (and (<= (LitInt 0) |newtype$check#4@0|) (< |newtype$check#4@0| _module.__default.TWO__TO__THE__128))) (=> (and (<= (LitInt 0) |newtype$check#4@0|) (< |newtype$check#4@0| _module.__default.TWO__TO__THE__128)) (=> (= |newtype$check#5@0| (LitInt 5)) (and (=> (= (ControlFlow 0 39) (- 0 51)) (and (<= (LitInt 0) |newtype$check#5@0|) (< |newtype$check#5@0| _module.__default.TWO__TO__THE__128))) (=> (and (<= (LitInt 0) |newtype$check#5@0|) (< |newtype$check#5@0| _module.__default.TWO__TO__THE__128)) (=> (and (= |w128#0@0| (LitInt 5)) (= |newtype$check#6@0| (LitInt 8))) (and (=> (= (ControlFlow 0 39) (- 0 50)) (and (<= (LitInt 0) |newtype$check#6@0|) (< |newtype$check#6@0| _module.__default.TWO__TO__THE__128))) (=> (and (<= (LitInt 0) |newtype$check#6@0|) (< |newtype$check#6@0| _module.__default.TWO__TO__THE__128)) (=> (= |newtype$check#7@0| (LitInt 8)) (and (=> (= (ControlFlow 0 39) (- 0 49)) (and (<= (LitInt 0) |newtype$check#7@0|) (< |newtype$check#7@0| _module.__default.TWO__TO__THE__128))) (=> (and (<= (LitInt 0) |newtype$check#7@0|) (< |newtype$check#7@0| _module.__default.TWO__TO__THE__128)) (=> (and (= |x128#0@0| (LitInt 8)) (= |newtype$check#8@0| (LitInt 13))) (and (=> (= (ControlFlow 0 39) (- 0 48)) (and (<= (LitInt 0) |newtype$check#8@0|) (< |newtype$check#8@0| _module.__default.TWO__TO__THE__128))) (=> (and (<= (LitInt 0) |newtype$check#8@0|) (< |newtype$check#8@0| _module.__default.TWO__TO__THE__128)) (=> (= |newtype$check#9@0| (LitInt 13)) (and (=> (= (ControlFlow 0 39) (- 0 47)) (and (<= (LitInt 0) |newtype$check#9@0|) (< |newtype$check#9@0| _module.__default.TWO__TO__THE__128))) (=> (and (<= (LitInt 0) |newtype$check#9@0|) (< |newtype$check#9@0| _module.__default.TWO__TO__THE__128)) (=> (and (= |y128#0@0| (LitInt 13)) (= |newtype$check#10@0| (LitInt 21))) (and (=> (= (ControlFlow 0 39) (- 0 46)) (and (<= (LitInt 0) |newtype$check#10@0|) (< |newtype$check#10@0| _module.__default.TWO__TO__THE__128))) (=> (and (<= (LitInt 0) |newtype$check#10@0|) (< |newtype$check#10@0| _module.__default.TWO__TO__THE__128)) (=> (= |newtype$check#11@0| (LitInt 21)) (and (=> (= (ControlFlow 0 39) (- 0 45)) (and (<= (LitInt 0) |newtype$check#11@0|) (< |newtype$check#11@0| _module.__default.TWO__TO__THE__128))) (=> (and (<= (LitInt 0) |newtype$check#11@0|) (< |newtype$check#11@0| _module.__default.TWO__TO__THE__128)) (=> (and (= |z128#0@0| (LitInt 21)) (= |newtype$check#12@0| (LitInt 24))) (and (=> (= (ControlFlow 0 39) (- 0 44)) (and (<= (LitInt 0) |newtype$check#12@0|) (< |newtype$check#12@0| _module.__default.TWO__TO__THE__128))) (=> (and (<= (LitInt 0) |newtype$check#12@0|) (< |newtype$check#12@0| _module.__default.TWO__TO__THE__128)) (=> (= |newtype$check#13@0| (LitInt 24)) (and (=> (= (ControlFlow 0 39) (- 0 43)) (and (<= (LitInt 0) |newtype$check#13@0|) (< |newtype$check#13@0| _module.__default.TWO__TO__THE__128))) (=> (and (<= (LitInt 0) |newtype$check#13@0|) (< |newtype$check#13@0| _module.__default.TWO__TO__THE__128)) (=> (and (= |m128#0@0| (LitInt 24)) (= |newtype$check#14@0| (LitInt 16))) (and (=> (= (ControlFlow 0 39) (- 0 42)) (and (<= (LitInt 0) |newtype$check#14@0|) (< |newtype$check#14@0| _module.__default.TWO__TO__THE__128))) (=> (and (<= (LitInt 0) |newtype$check#14@0|) (< |newtype$check#14@0| _module.__default.TWO__TO__THE__128)) (=> (= |newtype$check#15@0| (LitInt 16)) (and (=> (= (ControlFlow 0 39) (- 0 41)) (and (<= (LitInt 0) |newtype$check#15@0|) (< |newtype$check#15@0| _module.__default.TWO__TO__THE__128))) (=> (and (<= (LitInt 0) |newtype$check#15@0|) (< |newtype$check#15@0| _module.__default.TWO__TO__THE__128)) (=> (and (= |t128#0@0| (LitInt 16)) (= |newtype$check#16@0| (+ |x128#0@0| |y128#0@0|))) (and (=> (= (ControlFlow 0 39) (- 0 40)) (and (<= (LitInt 0) |newtype$check#16@0|) (< |newtype$check#16@0| _module.__default.TWO__TO__THE__128))) (=> (and (<= (LitInt 0) |newtype$check#16@0|) (< |newtype$check#16@0| _module.__default.TWO__TO__THE__128)) (and (=> (= (ControlFlow 0 39) 1) anon17_Then_correct) (=> (= (ControlFlow 0 39) 37) anon17_Else_correct)))))))))))))))))))))))))))))))))))))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (<= (LitInt 0) |o128#0|) (< |o128#0| _module.__default.TWO__TO__THE__128)) true) (=> (and (and (and (and (and (<= (LitInt 0) |s128#0|) (< |s128#0| _module.__default.TWO__TO__THE__128)) true) (and (and (<= (LitInt 0) |w128#0|) (< |w128#0| _module.__default.TWO__TO__THE__128)) true)) (and (and (and (<= (LitInt 0) |x128#0|) (< |x128#0| _module.__default.TWO__TO__THE__128)) true) (and (and (<= (LitInt 0) |y128#0|) (< |y128#0| _module.__default.TWO__TO__THE__128)) true))) (and (and (and (and (<= (LitInt 0) |z128#0|) (< |z128#0| _module.__default.TWO__TO__THE__128)) true) (and (and (<= (LitInt 0) |m128#0|) (< |m128#0| _module.__default.TWO__TO__THE__128)) true)) (and (and (and (<= (LitInt 0) |t128#0|) (< |t128#0| _module.__default.TWO__TO__THE__128)) true) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 57) 39))))) anon0_correct)))))
PreconditionGeneratedEntry_correct)))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
