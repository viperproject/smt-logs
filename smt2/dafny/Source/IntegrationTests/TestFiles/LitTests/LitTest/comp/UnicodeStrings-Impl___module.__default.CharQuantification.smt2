(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.Identity (T@U T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun |_module.__default.Identity#canCall| (T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun |lambda#23| (Int Int T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#FromBoogieMap| (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |lambda#22| (T@U Bool T@U T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#5| (T@U T@U T@U Bool) T@U)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $IsGoodHeap (T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TChar TInt TagChar TagInt TagSet alloc)
)
(assert (= (Ctor BoxType) 3))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.Identity$T T@U) (|x#0| T@U) ) (!  (=> (or (|_module.__default.Identity#canCall| _module._default.Identity$T (Lit BoxType |x#0|)) (and (< 0 $FunctionContextHeight) ($IsBox |x#0| _module._default.Identity$T))) (= (_module.__default.Identity _module._default.Identity$T (Lit BoxType |x#0|)) (Lit BoxType |x#0|)))
 :weight 3
 :pattern ( (_module.__default.Identity _module._default.Identity$T (Lit BoxType |x#0|)))
))))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (forall ((a T@U) (b T@U) (y T@U) ) (!  (=> (|Set#IsMember| a y) (|Set#IsMember| (|Set#Union| a b) y))
 :pattern ( (|Set#Union| a b) (|Set#IsMember| a y))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| b@@0 y@@0) (|Set#IsMember| (|Set#Union| a@@0 b@@0) y@@0))
 :pattern ( (|Set#Union| a@@0 b@@0) (|Set#IsMember| b@@0 y@@0))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) (y@@1 T@U) ) (!  (=> (|Set#IsMember| b@@1 y@@1) (not (|Set#IsMember| (|Set#Difference| a@@1 b@@1) y@@1)))
 :pattern ( (|Set#Difference| a@@1 b@@1) (|Set#IsMember| b@@1 y@@1))
)))
(assert (forall ((a@@2 T@U) (b@@2 T@U) ) (! (= (|Set#Union| (|Set#Union| a@@2 b@@2) b@@2) (|Set#Union| a@@2 b@@2))
 :pattern ( (|Set#Union| (|Set#Union| a@@2 b@@2) b@@2))
)))
(assert (forall ((a@@3 T@U) (b@@3 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@3 b@@3) o)  (and (|Set#IsMember| a@@3 o) (not (|Set#IsMember| b@@3 o))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@3 b@@3) o))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.Identity$T@@0 T@U) (|x#0@@0| T@U) ) (!  (=> (or (|_module.__default.Identity#canCall| _module._default.Identity$T@@0 |x#0@@0|) (and (< 0 $FunctionContextHeight) ($IsBox |x#0@@0| _module._default.Identity$T@@0))) ($IsBox (_module.__default.Identity _module._default.Identity$T@@0 |x#0@@0|) _module._default.Identity$T@@0))
 :pattern ( (_module.__default.Identity _module._default.Identity$T@@0 |x#0@@0|))
))))
(assert  (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor charType) 4)))
(assert (forall ((|l#0| Int) (|l#1| Int) (|l#2| T@U) (|l#3| T@U) (|$y#1| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#23| |l#0| |l#1| |l#2| |l#3|) |$y#1|)) (exists ((|cp#0| Int) ) (!  (and (and (<= |l#0| |cp#0|) (< |cp#0| |l#1|)) (= |$y#1| (_module.__default.Identity |l#2| ($Box charType (|char#FromInt| |cp#0|)))))
 :pattern ( ($Unbox intType (_module.__default.Identity |l#3| ($Box intType (int_2_U |cp#0|)))))
)))
 :pattern ( (MapType0Select BoxType boolType (|lambda#23| |l#0| |l#1| |l#2| |l#3|) |$y#1|))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((a@@4 T@U) (b@@4 T@U) ) (! (= (|Set#Disjoint| a@@4 b@@4) (forall ((o@@0 T@U) ) (!  (or (not (|Set#IsMember| a@@4 o@@0)) (not (|Set#IsMember| b@@4 o@@0)))
 :pattern ( (|Set#IsMember| a@@4 o@@0))
 :pattern ( (|Set#IsMember| b@@4 o@@0))
)))
 :pattern ( (|Set#Disjoint| a@@4 b@@4))
)))
(assert (forall ((m@@1 T@U) (bx T@U) ) (! (= (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx) (U_2_bool (MapType0Select BoxType boolType m@@1 bx)))
 :pattern ( (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx))
)))
(assert (= (Ctor SetType) 5))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx@@0 T@U) ) (!  (=> (|Set#IsMember| v bx@@0) ($IsBox bx@@0 t0@@0))
 :pattern ( (|Set#IsMember| v bx@@0))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert (forall ((a@@5 T@U) (b@@5 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Union| a@@5 b@@5) o@@1)  (or (|Set#IsMember| a@@5 o@@1) (|Set#IsMember| b@@5 o@@1)))
 :pattern ( (|Set#IsMember| (|Set#Union| a@@5 b@@5) o@@1))
)))
(assert (forall ((a@@6 T@U) (b@@6 T@U) ) (!  (=> (|Set#Disjoint| a@@6 b@@6) (and (= (|Set#Difference| (|Set#Union| a@@6 b@@6) a@@6) b@@6) (= (|Set#Difference| (|Set#Union| a@@6 b@@6) b@@6) a@@6)))
 :pattern ( (|Set#Union| a@@6 b@@6))
)))
(assert (forall ((a@@7 T@U) (b@@7 T@U) ) (!  (=> (|Set#Equal| a@@7 b@@7) (= a@@7 b@@7))
 :pattern ( (|Set#Equal| a@@7 b@@7))
)))
(assert (forall ((|l#0@@0| T@U) (|l#1@@0| Bool) (|l#2@@0| T@U) (|l#3@@0| T@U) (|$y#0| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#22| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) |$y#0|)) (exists ((|c#0| T@U) ) (!  (and (and ($Is charType |c#0| |l#0@@0|) |l#1@@0|) (= |$y#0| (_module.__default.Identity |l#2@@0| ($Box charType |c#0|))))
 :pattern ( ($Unbox charType (_module.__default.Identity |l#3@@0| ($Box charType |c#0|))))
)))
 :pattern ( (MapType0Select BoxType boolType (|lambda#22| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) |$y#0|))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TInt) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) TInt)))
 :pattern ( ($IsBox bx@@1 TInt))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 TChar) (and (= ($Box charType ($Unbox charType bx@@2)) bx@@2) ($Is charType ($Unbox charType bx@@2) TChar)))
 :pattern ( ($IsBox bx@@2 TChar))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((v@@2 T@U) (t0@@1 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0) (forall ((bx@@3 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@3) ($IsAllocBox bx@@3 t0@@1 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@3))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert (forall ((a@@8 T@U) (b@@8 T@U) ) (! (= (|Set#Union| a@@8 (|Set#Union| a@@8 b@@8)) (|Set#Union| a@@8 b@@8))
 :pattern ( (|Set#Union| a@@8 (|Set#Union| a@@8 b@@8)))
)))
(assert (forall ((n Int) ) (!  (=> (or (and (<= 0 n) (< n 55296)) (and (<= 57344 n) (< n 1114112))) (= (|char#ToInt| (|char#FromInt| n)) n))
 :pattern ( (|char#FromInt| n))
)))
(assert  (and (and (and (and (and (and (forall ((t0@@2 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 t2 (MapType1Store t0@@2 t1@@0 t2 m@@2 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@3 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@3 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@4 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@4 y0@@1 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 6)) (= (Ctor FieldType) 7)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 8))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0@@1| T@U) (|l#1@@1| T@U) (|l#2@@1| T@U) (|l#3@@1| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#5| |l#0@@1| |l#1@@1| |l#2@@1| |l#3@@1|) $o $f))  (=> (and (or (not (= $o |l#0@@1|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@1| $o) |l#2@@1|)))) |l#3@@1|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#5| |l#0@@1| |l#1@@1| |l#2@@1| |l#3@@1|) $o $f))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.Identity$T@@1 T@U) (|x#0@@1| T@U) ) (!  (=> (or (|_module.__default.Identity#canCall| _module._default.Identity$T@@1 |x#0@@1|) (and (< 0 $FunctionContextHeight) ($IsBox |x#0@@1| _module._default.Identity$T@@1))) (= (_module.__default.Identity _module._default.Identity$T@@1 |x#0@@1|) |x#0@@1|))
 :pattern ( (_module.__default.Identity _module._default.Identity$T@@1 |x#0@@1|))
))))
(assert (forall ((bx@@4 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@4 (TSet t@@3)) (and (= ($Box SetType ($Unbox SetType bx@@4)) bx@@4) ($Is SetType ($Unbox SetType bx@@4) (TSet t@@3))))
 :pattern ( ($IsBox bx@@4 (TSet t@@3)))
)))
(assert (forall ((ch T@U) ) (!  (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (or (and (<= 0 (|char#ToInt| ch)) (< (|char#ToInt| ch) 55296)) (and (<= 57344 (|char#ToInt| ch)) (< (|char#ToInt| ch) 1114112))))
 :pattern ( (|char#ToInt| ch))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap T@U) (_module._default.Identity$T@@2 T@U) (|x#0@@2| T@U) ) (!  (=> (and (or (|_module.__default.Identity#canCall| _module._default.Identity$T@@2 |x#0@@2|) (and (< 0 $FunctionContextHeight) (and ($IsBox |x#0@@2| _module._default.Identity$T@@2) ($IsAllocBox |x#0@@2| _module._default.Identity$T@@2 $Heap)))) ($IsGoodHeap $Heap)) ($IsAllocBox (_module.__default.Identity _module._default.Identity$T@@2 |x#0@@2|) _module._default.Identity$T@@2 $Heap))
 :pattern ( ($IsAllocBox (_module.__default.Identity _module._default.Identity$T@@2 |x#0@@2|) _module._default.Identity$T@@2 $Heap))
))))
(assert (forall ((a@@9 T@U) (b@@9 T@U) ) (! (= (|Set#Equal| a@@9 b@@9) (forall ((o@@2 T@U) ) (! (= (|Set#IsMember| a@@9 o@@2) (|Set#IsMember| b@@9 o@@2))
 :pattern ( (|Set#IsMember| a@@9 o@@2))
 :pattern ( (|Set#IsMember| b@@9 o@@2))
)))
 :pattern ( (|Set#Equal| a@@9 b@@9))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert (forall ((h@@1 T@U) (v@@3 T@U) ) (! ($IsAlloc intType v@@3 TInt h@@1)
 :pattern ( ($IsAlloc intType v@@3 TInt h@@1))
)))
(assert (forall ((h@@2 T@U) (v@@4 T@U) ) (! ($IsAlloc charType v@@4 TChar h@@2)
 :pattern ( ($IsAlloc charType v@@4 TChar h@@2))
)))
(assert (forall ((v@@5 T@U) ) (! ($Is intType v@@5 TInt)
 :pattern ( ($Is intType v@@5 TInt))
)))
(assert (forall ((v@@6 T@U) ) (! ($Is charType v@@6 TChar)
 :pattern ( ($Is charType v@@6 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |c#6@0| () T@U)
(declare-fun |allChars#0@0| () T@U)
(declare-fun |allCodePoints#0@0| () T@U)
(declare-fun |c#4@0| () T@U)
(declare-fun $Heap@@0 () T@U)
(declare-fun |c#2@0| () T@U)
(declare-fun |##x#6@0| () Int)
(declare-fun |##x#5@0| () Int)
(declare-fun |##x#4@0| () Int)
(declare-fun |##x#3@0| () Int)
(declare-fun |cp#3@0| () Int)
(declare-fun |##x#2@0| () T@U)
(declare-fun |cp#2@0| () Int)
(declare-fun |##x#1@0| () T@U)
(declare-fun |c#1@0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |allChars#0| () T@U)
(declare-fun |allCodePoints#0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 48) (let ((anon46_Else_correct true))
(let ((anon46_Then_correct true))
(let ((anon27_correct  (and (=> (= (ControlFlow 0 5) 3) anon46_Then_correct) (=> (= (ControlFlow 0 5) 4) anon46_Else_correct))))
(let ((anon45_Else_correct  (=> (and (< (|char#ToInt| |c#6@0|) (LitInt 57344)) (= (ControlFlow 0 9) 5)) anon27_correct)))
(let ((anon45_Then_correct  (=> (and (<= (LitInt 57344) (|char#ToInt| |c#6@0|)) (= (ControlFlow 0 8) 5)) anon27_correct)))
(let ((anon44_Then_correct  (=> (not (and (<= (LitInt 0) (|char#ToInt| |c#6@0|)) (< (|char#ToInt| |c#6@0|) 55296))) (and (=> (= (ControlFlow 0 10) 8) anon45_Then_correct) (=> (= (ControlFlow 0 10) 9) anon45_Else_correct)))))
(let ((anon44_Else_correct  (=> (and (and (<= (LitInt 0) (|char#ToInt| |c#6@0|)) (< (|char#ToInt| |c#6@0|) 55296)) (= (ControlFlow 0 7) 5)) anon27_correct)))
(let ((anon43_Else_correct  (=> (< (|char#ToInt| |c#6@0|) (LitInt 0)) (and (=> (= (ControlFlow 0 12) 10) anon44_Then_correct) (=> (= (ControlFlow 0 12) 7) anon44_Else_correct)))))
(let ((anon43_Then_correct  (=> (<= (LitInt 0) (|char#ToInt| |c#6@0|)) (and (=> (= (ControlFlow 0 11) 10) anon44_Then_correct) (=> (= (ControlFlow 0 11) 7) anon44_Else_correct)))))
(let ((anon42_Then_correct  (=> ($Is charType |c#6@0| TChar) (and (=> (= (ControlFlow 0 13) 11) anon43_Then_correct) (=> (= (ControlFlow 0 13) 12) anon43_Else_correct)))))
(let ((anon42_Else_correct  (=> (and (not ($Is charType |c#6@0| TChar)) (= (ControlFlow 0 6) 5)) anon27_correct)))
(let ((anon21_correct  (=> (forall ((|c#5| T@U) ) (!  (=> ($Is charType |c#5| TChar) (|_module.__default.Identity#canCall| TChar ($Box charType |c#5|)))
 :pattern ( ($Unbox charType (_module.__default.Identity TChar ($Box charType |c#5|))))
)) (and (=> (= (ControlFlow 0 14) (- 0 16)) (forall ((|c#5@@0| T@U) ) (!  (=> ($Is charType |c#5@@0| TChar) (|Set#IsMember| |allChars#0@0| (_module.__default.Identity TChar ($Box charType |c#5@@0|))))
 :pattern ( ($Unbox charType (_module.__default.Identity TChar ($Box charType |c#5@@0|))))
))) (=> (forall ((|c#5@@1| T@U) ) (!  (=> ($Is charType |c#5@@1| TChar) (|Set#IsMember| |allChars#0@0| (_module.__default.Identity TChar ($Box charType |c#5@@1|))))
 :pattern ( ($Unbox charType (_module.__default.Identity TChar ($Box charType |c#5@@1|))))
)) (and (=> (= (ControlFlow 0 14) (- 0 15)) (|Set#Equal| |allChars#0@0| |allCodePoints#0@0|)) (=> (|Set#Equal| |allChars#0@0| |allCodePoints#0@0|) (and (=> (= (ControlFlow 0 14) 13) anon42_Then_correct) (=> (= (ControlFlow 0 14) 6) anon42_Else_correct)))))))))
(let ((anon41_Else_correct  (=> (and (not ($Is charType |c#4@0| TChar)) (= (ControlFlow 0 18) 14)) anon21_correct)))
(let ((anon41_Then_correct  (=> (and (and ($Is charType |c#4@0| TChar) ($IsAlloc charType |c#4@0| TChar $Heap@@0)) (and (|_module.__default.Identity#canCall| TChar ($Box charType |c#4@0|)) (= (ControlFlow 0 17) 14))) anon21_correct)))
(let ((anon19_correct  (=> (forall ((|c#3| T@U) ) (!  (=> ($Is charType |c#3| TChar) (and (and (and (|_module.__default.Identity#canCall| TInt ($Box intType (int_2_U (|char#ToInt| |c#3|)))) (=> (<= (LitInt 0) (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#3|))))))) (|_module.__default.Identity#canCall| TInt ($Box intType (int_2_U (|char#ToInt| |c#3|)))))) (=> (not (and (<= (LitInt 0) (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#3|))))))) (< (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#3|)))))) 55296))) (|_module.__default.Identity#canCall| TInt ($Box intType (int_2_U (|char#ToInt| |c#3|)))))) (=> (or (and (<= (LitInt 0) (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#3|))))))) (< (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#3|)))))) 55296)) (<= (LitInt 57344) (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#3|)))))))) (and (and (|_module.__default.Identity#canCall| TInt ($Box intType (int_2_U (|char#ToInt| |c#3|)))) (=> (<= (LitInt 0) (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#3|))))))) (|_module.__default.Identity#canCall| TInt ($Box intType (int_2_U (|char#ToInt| |c#3|)))))) (=> (not (and (<= (LitInt 0) (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#3|))))))) (< (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#3|)))))) 55296))) (|_module.__default.Identity#canCall| TInt ($Box intType (int_2_U (|char#ToInt| |c#3|)))))))))
 :pattern ( ($Unbox charType (_module.__default.Identity TChar ($Box charType |c#3|))))
)) (and (=> (= (ControlFlow 0 19) (- 0 20)) (forall ((|c#3@@0| T@U) ) (!  (=> ($Is charType |c#3@@0| TChar) (and (or (and (<= (LitInt 0) (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#3@@0|))))))) (< (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#3@@0|)))))) 55296)) (<= (LitInt 57344) (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#3@@0|)))))))) (or (and (<= (LitInt 0) (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#3@@0|))))))) (< (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#3@@0|)))))) 55296)) (< (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#3@@0|)))))) 1114112))))
 :pattern ( ($Unbox charType (_module.__default.Identity TChar ($Box charType |c#3@@0|))))
))) (=> (forall ((|c#3@@1| T@U) ) (!  (=> ($Is charType |c#3@@1| TChar) (and (or (and (<= (LitInt 0) (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#3@@1|))))))) (< (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#3@@1|)))))) 55296)) (<= (LitInt 57344) (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#3@@1|)))))))) (or (and (<= (LitInt 0) (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#3@@1|))))))) (< (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#3@@1|)))))) 55296)) (< (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#3@@1|)))))) 1114112))))
 :pattern ( ($Unbox charType (_module.__default.Identity TChar ($Box charType |c#3@@1|))))
)) (and (=> (= (ControlFlow 0 19) 17) anon41_Then_correct) (=> (= (ControlFlow 0 19) 18) anon41_Else_correct)))))))
(let ((anon40_Else_correct  (=> (and (< (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#2@0|)))))) (LitInt 57344)) (= (ControlFlow 0 24) 19)) anon19_correct)))
(let ((anon40_Then_correct  (=> (<= (LitInt 57344) (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#2@0|))))))) (=> (and (and (= |##x#6@0| (|char#ToInt| |c#2@0|)) ($IsAlloc intType (int_2_U |##x#6@0|) TInt $Heap@@0)) (and (|_module.__default.Identity#canCall| TInt ($Box intType (int_2_U (|char#ToInt| |c#2@0|)))) (= (ControlFlow 0 23) 19))) anon19_correct))))
(let ((anon39_Then_correct  (=> (and (and (not (and (<= (LitInt 0) (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#2@0|))))))) (< (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#2@0|)))))) 55296))) (= |##x#5@0| (|char#ToInt| |c#2@0|))) (and ($IsAlloc intType (int_2_U |##x#5@0|) TInt $Heap@@0) (|_module.__default.Identity#canCall| TInt ($Box intType (int_2_U (|char#ToInt| |c#2@0|)))))) (and (=> (= (ControlFlow 0 25) 23) anon40_Then_correct) (=> (= (ControlFlow 0 25) 24) anon40_Else_correct)))))
(let ((anon39_Else_correct  (=> (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#2@0|))))))) (< (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#2@0|)))))) 55296)) (= (ControlFlow 0 22) 19)) anon19_correct)))
(let ((anon38_Else_correct  (=> (< (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#2@0|)))))) (LitInt 0)) (and (=> (= (ControlFlow 0 27) 25) anon39_Then_correct) (=> (= (ControlFlow 0 27) 22) anon39_Else_correct)))))
(let ((anon38_Then_correct  (=> (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (_module.__default.Identity TInt ($Box intType (int_2_U (|char#ToInt| |c#2@0|))))))) (= |##x#4@0| (|char#ToInt| |c#2@0|))) (and ($IsAlloc intType (int_2_U |##x#4@0|) TInt $Heap@@0) (|_module.__default.Identity#canCall| TInt ($Box intType (int_2_U (|char#ToInt| |c#2@0|)))))) (and (=> (= (ControlFlow 0 26) 25) anon39_Then_correct) (=> (= (ControlFlow 0 26) 22) anon39_Else_correct)))))
(let ((anon37_Then_correct  (=> (and (and ($Is charType |c#2@0| TChar) (= |##x#3@0| (|char#ToInt| |c#2@0|))) (and ($IsAlloc intType (int_2_U |##x#3@0|) TInt $Heap@@0) (|_module.__default.Identity#canCall| TInt ($Box intType (int_2_U (|char#ToInt| |c#2@0|)))))) (and (=> (= (ControlFlow 0 28) 26) anon38_Then_correct) (=> (= (ControlFlow 0 28) 27) anon38_Else_correct)))))
(let ((anon37_Else_correct  (=> (and (not ($Is charType |c#2@0| TChar)) (= (ControlFlow 0 21) 19)) anon19_correct)))
(let ((anon13_correct  (=> (and (and (forall ((|cp#0@@0| T@U) ) (!  (=> (and (<= (LitInt 0) (U_2_int |cp#0@@0|)) (< (U_2_int |cp#0@@0|) 55296)) (|_module.__default.Identity#canCall| TChar ($Box charType (|char#FromInt| (U_2_int |cp#0@@0|)))))
 :pattern ( ($Unbox intType (_module.__default.Identity TInt ($Box intType |cp#0@@0|))))
)) (forall ((|cp#1| T@U) ) (!  (=> (and (<= (LitInt 57344) (U_2_int |cp#1|)) (< (U_2_int |cp#1|) 1114112)) (|_module.__default.Identity#canCall| TChar ($Box charType (|char#FromInt| (U_2_int |cp#1|)))))
 :pattern ( ($Unbox intType (_module.__default.Identity TInt ($Box intType |cp#1|))))
))) (= |allCodePoints#0@0| (|Set#Union| (|Set#FromBoogieMap| (|lambda#23| (LitInt 0) 55296 TChar TInt)) (|Set#FromBoogieMap| (|lambda#23| (LitInt 57344) 1114112 TChar TInt))))) (and (=> (= (ControlFlow 0 29) 28) anon37_Then_correct) (=> (= (ControlFlow 0 29) 21) anon37_Else_correct)))))
(let ((anon36_Else_correct  (=> (and (not (and (<= (LitInt 57344) |cp#3@0|) (< |cp#3@0| 1114112))) (= (ControlFlow 0 32) 29)) anon13_correct)))
(let ((anon36_Then_correct  (=> (and (<= (LitInt 57344) |cp#3@0|) (< |cp#3@0| 1114112)) (and (=> (= (ControlFlow 0 30) (- 0 31)) (or (and (<= 0 |cp#3@0|) (< |cp#3@0| 55296)) (and (<= 57344 |cp#3@0|) (< |cp#3@0| 1114112)))) (=> (or (and (<= 0 |cp#3@0|) (< |cp#3@0| 55296)) (and (<= 57344 |cp#3@0|) (< |cp#3@0| 1114112))) (=> (and (and (= |##x#2@0| (|char#FromInt| |cp#3@0|)) ($IsAlloc charType |##x#2@0| TChar $Heap@@0)) (and (|_module.__default.Identity#canCall| TChar ($Box charType (|char#FromInt| |cp#3@0|))) (= (ControlFlow 0 30) 29))) anon13_correct))))))
(let ((anon35_Else_correct  (=> (< |cp#3@0| (LitInt 57344)) (and (=> (= (ControlFlow 0 34) 30) anon36_Then_correct) (=> (= (ControlFlow 0 34) 32) anon36_Else_correct)))))
(let ((anon35_Then_correct  (=> (<= (LitInt 57344) |cp#3@0|) (and (=> (= (ControlFlow 0 33) 30) anon36_Then_correct) (=> (= (ControlFlow 0 33) 32) anon36_Else_correct)))))
(let ((anon34_Then_correct  (and (=> (= (ControlFlow 0 35) 33) anon35_Then_correct) (=> (= (ControlFlow 0 35) 34) anon35_Else_correct))))
(let ((anon34_Else_correct true))
(let ((anon33_Else_correct  (=> (not (and (<= (LitInt 0) |cp#2@0|) (< |cp#2@0| 55296))) (and (=> (= (ControlFlow 0 38) 35) anon34_Then_correct) (=> (= (ControlFlow 0 38) 2) anon34_Else_correct)))))
(let ((anon33_Then_correct  (=> (and (<= (LitInt 0) |cp#2@0|) (< |cp#2@0| 55296)) (and (=> (= (ControlFlow 0 36) (- 0 37)) (or (and (<= 0 |cp#2@0|) (< |cp#2@0| 55296)) (and (<= 57344 |cp#2@0|) (< |cp#2@0| 1114112)))) (=> (or (and (<= 0 |cp#2@0|) (< |cp#2@0| 55296)) (and (<= 57344 |cp#2@0|) (< |cp#2@0| 1114112))) (=> (= |##x#1@0| (|char#FromInt| |cp#2@0|)) (=> (and ($IsAlloc charType |##x#1@0| TChar $Heap@@0) (|_module.__default.Identity#canCall| TChar ($Box charType (|char#FromInt| |cp#2@0|)))) (and (=> (= (ControlFlow 0 36) 35) anon34_Then_correct) (=> (= (ControlFlow 0 36) 2) anon34_Else_correct)))))))))
(let ((anon32_Else_correct  (=> (< |cp#2@0| (LitInt 0)) (and (=> (= (ControlFlow 0 40) 36) anon33_Then_correct) (=> (= (ControlFlow 0 40) 38) anon33_Else_correct)))))
(let ((anon32_Then_correct  (=> (<= (LitInt 0) |cp#2@0|) (and (=> (= (ControlFlow 0 39) 36) anon33_Then_correct) (=> (= (ControlFlow 0 39) 38) anon33_Else_correct)))))
(let ((anon31_Then_correct  (and (=> (= (ControlFlow 0 41) 39) anon32_Then_correct) (=> (= (ControlFlow 0 41) 40) anon32_Else_correct))))
(let ((anon31_Else_correct true))
(let ((anon3_correct  (=> (and (forall ((|c#0@@0| T@U) ) (!  (=> ($Is charType |c#0@@0| TChar) (=> (U_2_bool (Lit boolType (bool_2_U true))) (|_module.__default.Identity#canCall| TChar ($Box charType |c#0@@0|))))
 :pattern ( ($Unbox charType (_module.__default.Identity TChar ($Box charType |c#0@@0|))))
)) (= |allChars#0@0| (|Set#FromBoogieMap| (|lambda#22| TChar (U_2_bool (Lit boolType (bool_2_U true))) TChar TChar)))) (and (=> (= (ControlFlow 0 42) 41) anon31_Then_correct) (=> (= (ControlFlow 0 42) 1) anon31_Else_correct)))))
(let ((anon30_Else_correct  (=> (and (not (U_2_bool (Lit boolType (bool_2_U true)))) (= (ControlFlow 0 45) 42)) anon3_correct)))
(let ((anon30_Then_correct  (=> (and (and (U_2_bool (Lit boolType (bool_2_U true))) ($IsAlloc charType |c#1@0| TChar $Heap@@0)) (and (|_module.__default.Identity#canCall| TChar ($Box charType |c#1@0|)) (= (ControlFlow 0 44) 42))) anon3_correct)))
(let ((anon29_Then_correct  (=> ($Is charType |c#1@0| TChar) (and (=> (= (ControlFlow 0 46) 44) anon30_Then_correct) (=> (= (ControlFlow 0 46) 45) anon30_Else_correct)))))
(let ((anon29_Else_correct  (=> (and (not ($Is charType |c#1@0| TChar)) (= (ControlFlow 0 43) 42)) anon3_correct)))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#5| null $Heap@@0 alloc false)) (and (=> (= (ControlFlow 0 47) 46) anon29_Then_correct) (=> (= (ControlFlow 0 47) 43) anon29_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@0) ($IsHeapAnchor $Heap@@0)) (=> (and (and ($Is SetType |allChars#0| (TSet TChar)) ($IsAlloc SetType |allChars#0| (TSet TChar) $Heap@@0)) true) (=> (and (and (and ($Is SetType |allCodePoints#0| (TSet TChar)) ($IsAlloc SetType |allCodePoints#0| (TSet TChar) $Heap@@0)) true) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 48) 47))) anon0_correct)))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
