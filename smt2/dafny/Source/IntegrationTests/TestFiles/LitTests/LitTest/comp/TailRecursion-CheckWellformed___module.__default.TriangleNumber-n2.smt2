(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 (T@U T@U) Bool)
(declare-fun $generated@@25 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@29 (Int) Int)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@U) T@U)
(declare-fun $generated@@38 (T@T T@U T@U) Bool)
(declare-fun $generated@@40 () Int)
(declare-fun $generated@@41 (T@U Int) T@U)
(declare-fun $generated@@42 (T@U) T@U)
(declare-fun $generated@@43 (Int) Bool)
(declare-fun $generated@@44 (Int) T@U)
(declare-fun $generated@@45 (T@U T@U) T@U)
(declare-fun $generated@@48 (T@U) Bool)
(declare-fun $generated@@49 (T@U) Int)
(declare-fun $generated@@66 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@67 () T@T)
(declare-fun $generated@@68 () T@T)
(declare-fun $generated@@69 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@70 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@71 () T@T)
(declare-fun $generated@@72 (T@T T@T) T@T)
(declare-fun $generated@@73 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@74 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@75 (T@T) T@T)
(declare-fun $generated@@76 (T@T) T@T)
(declare-fun $generated@@129 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@0))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@U) ($generated@@24 T@U) ) (!  (=> (and ($generated@@21 $generated@@22 $generated@@23) ($generated@@21 $generated@@23 $generated@@24)) ($generated@@21 $generated@@22 $generated@@24))
 :pattern ( ($generated@@21 $generated@@22 $generated@@23) ($generated@@21 $generated@@23 $generated@@24))
 :pattern ( ($generated@@21 $generated@@22 $generated@@23) ($generated@@21 $generated@@22 $generated@@24))
)))
(assert (forall (($generated@@27 T@U) ($generated@@28 T@U) ) (! ($generated@@25 $generated@@6 $generated@@27 $generated@@26 $generated@@28)
 :pattern ( ($generated@@25 $generated@@6 $generated@@27 $generated@@26 $generated@@28))
)))
(assert (forall (($generated@@30 Int) ) (! (= ($generated@@29 $generated@@30) $generated@@30)
 :pattern ( ($generated@@29 $generated@@30))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@T) ) (! (= ($generated@@31 $generated@@33 $generated@@32) $generated@@32)
 :pattern ( ($generated@@31 $generated@@33 $generated@@32))
)))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@35 $generated@@37 ($generated@@34 $generated@@37 $generated@@36)) $generated@@36)
 :pattern ( ($generated@@34 $generated@@37 $generated@@36))
)))
(assert (forall (($generated@@39 T@U) ) (! (= ($generated@@38 $generated@@6 $generated@@39 $generated@@26) (<= ($generated@@29 0) ($generated@@11 $generated@@39)))
 :pattern ( ($generated@@38 $generated@@6 $generated@@39 $generated@@26))
)))
(assert  (=> (<= 0 $generated@@40) (forall (($generated@@46 T@U) ($generated@@47 Int) ) (!  (=> (or ($generated@@43 $generated@@47) (and (< 0 $generated@@40) (<= ($generated@@29 0) $generated@@47))) (and (=> (or (not (= $generated@@47 ($generated@@29 0))) (not true)) ($generated@@43 (- $generated@@47 1))) (= ($generated@@41 ($generated@@42 $generated@@46) $generated@@47) (ite (= $generated@@47 ($generated@@29 0)) ($generated@@44 0) ($generated@@45 ($generated@@41 $generated@@46 (- $generated@@47 1)) ($generated@@44 $generated@@47))))))
 :pattern ( ($generated@@41 ($generated@@42 $generated@@46) $generated@@47))
))))
(assert (forall (($generated@@50 Int) ) (!  (=> (<= 0 $generated@@50) (and ($generated@@48 ($generated@@44 $generated@@50)) (= ($generated@@49 ($generated@@44 $generated@@50)) $generated@@50)))
 :pattern ( ($generated@@44 $generated@@50))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@U) ) (!  (and (or (= $generated@@51 ($generated@@45 $generated@@51 $generated@@52)) ($generated@@21 $generated@@51 ($generated@@45 $generated@@51 $generated@@52))) (or (= $generated@@52 ($generated@@45 $generated@@51 $generated@@52)) ($generated@@21 $generated@@52 ($generated@@45 $generated@@51 $generated@@52))))
 :pattern ( ($generated@@45 $generated@@51 $generated@@52))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ) (!  (or (or ($generated@@21 $generated@@53 $generated@@54) (= $generated@@53 $generated@@54)) ($generated@@21 $generated@@54 $generated@@53))
 :pattern ( ($generated@@21 $generated@@53 $generated@@54) ($generated@@21 $generated@@54 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@U) ) (!  (and (=> (= $generated@@55 ($generated@@44 0)) (= ($generated@@45 $generated@@55 $generated@@56) $generated@@56)) (=> (= $generated@@56 ($generated@@44 0)) (= ($generated@@45 $generated@@55 $generated@@56) $generated@@55)))
 :pattern ( ($generated@@45 $generated@@55 $generated@@56))
)))
(assert  (=> (<= 0 $generated@@40) (forall (($generated@@57 T@U) ($generated@@58 Int) ) (!  (=> (or ($generated@@43 ($generated@@29 $generated@@58)) (and (< 0 $generated@@40) (<= ($generated@@29 0) $generated@@58))) (and (=> (or (not (= ($generated@@29 $generated@@58) ($generated@@29 0))) (not true)) ($generated@@43 ($generated@@29 (- $generated@@58 1)))) (= ($generated@@41 ($generated@@42 $generated@@57) ($generated@@29 $generated@@58)) (ite (= ($generated@@29 $generated@@58) ($generated@@29 0)) ($generated@@44 0) ($generated@@45 ($generated@@41 ($generated@@42 $generated@@57) ($generated@@29 (- $generated@@58 1))) ($generated@@44 ($generated@@29 $generated@@58)))))))
 :weight 3
 :pattern ( ($generated@@41 ($generated@@42 $generated@@57) ($generated@@29 $generated@@58)))
))))
(assert (forall (($generated@@59 T@U) ) (! (<= 0 ($generated@@49 $generated@@59))
 :pattern ( ($generated@@49 $generated@@59))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 T@T) ) (! (= ($generated@@34 $generated@@61 ($generated@@35 $generated@@61 $generated@@60)) $generated@@60)
 :pattern ( ($generated@@35 $generated@@61 $generated@@60))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ) (!  (and (and (and (=> ($generated@@21 $generated@@62 $generated@@63) (or (not (= $generated@@62 $generated@@63)) (not true))) (=> (and ($generated@@48 $generated@@62) (not ($generated@@48 $generated@@63))) ($generated@@21 $generated@@62 $generated@@63))) (=> (and ($generated@@48 $generated@@62) ($generated@@48 $generated@@63)) (= ($generated@@21 $generated@@62 $generated@@63) (< ($generated@@49 $generated@@62) ($generated@@49 $generated@@63))))) (=> (and ($generated@@21 $generated@@62 $generated@@63) ($generated@@48 $generated@@63)) ($generated@@48 $generated@@62)))
 :pattern ( ($generated@@21 $generated@@62 $generated@@63))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 Int) ) (! (= ($generated@@41 ($generated@@42 $generated@@64) $generated@@65) ($generated@@41 $generated@@64 $generated@@65))
 :pattern ( ($generated@@41 ($generated@@42 $generated@@64) $generated@@65))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (! (= ($generated@@66 $generated@@77 $generated@@78 $generated@@79 ($generated@@73 $generated@@77 $generated@@78 $generated@@79 $generated@@81 $generated@@82 $generated@@83 $generated@@80) $generated@@82 $generated@@83) $generated@@80)
 :weight 0
)) (and (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (or (= $generated@@89 $generated@@91) (= ($generated@@66 $generated@@84 $generated@@85 $generated@@86 ($generated@@73 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@90 $generated@@87) $generated@@91 $generated@@92) ($generated@@66 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@91 $generated@@92)))
 :weight 0
)) (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (!  (or (= $generated@@99 $generated@@101) (= ($generated@@66 $generated@@93 $generated@@94 $generated@@95 ($generated@@73 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@99 $generated@@96) $generated@@100 $generated@@101) ($generated@@66 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@100 $generated@@101)))
 :weight 0
)))) (= ($generated@@4 $generated@@67) 3)) (= ($generated@@4 $generated@@68) 4)) (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (! (= ($generated@@70 $generated@@102 $generated@@103 ($generated@@74 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@104) $generated@@106) $generated@@104)
 :weight 0
))) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or (= $generated@@111 $generated@@112) (= ($generated@@70 $generated@@107 $generated@@108 ($generated@@74 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@109) $generated@@112) ($generated@@70 $generated@@107 $generated@@108 $generated@@110 $generated@@112)))
 :weight 0
))) (= ($generated@@4 $generated@@71) 5)) (forall (($generated@@113 T@T) ($generated@@114 T@T) ) (= ($generated@@4 ($generated@@72 $generated@@113 $generated@@114)) 6))) (forall (($generated@@115 T@T) ($generated@@116 T@T) ) (! (= ($generated@@75 ($generated@@72 $generated@@115 $generated@@116)) $generated@@115)
 :pattern ( ($generated@@72 $generated@@115 $generated@@116))
))) (forall (($generated@@117 T@T) ($generated@@118 T@T) ) (! (= ($generated@@76 ($generated@@72 $generated@@117 $generated@@118)) $generated@@118)
 :pattern ( ($generated@@72 $generated@@117 $generated@@118))
))))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 Bool) ($generated@@123 T@U) ($generated@@124 T@U) ) (! (= ($generated@@9 ($generated@@66 $generated@@67 $generated@@68 $generated@@5 ($generated@@69 $generated@@119 $generated@@120 $generated@@121 $generated@@122) $generated@@123 $generated@@124))  (=> (and (or (not (= $generated@@123 $generated@@119)) (not true)) ($generated@@9 ($generated@@34 $generated@@5 ($generated@@70 $generated@@68 $generated@@71 ($generated@@70 $generated@@67 ($generated@@72 $generated@@68 $generated@@71) $generated@@120 $generated@@123) $generated@@121)))) $generated@@122))
 :pattern ( ($generated@@66 $generated@@67 $generated@@68 $generated@@5 ($generated@@69 $generated@@119 $generated@@120 $generated@@121 $generated@@122) $generated@@123 $generated@@124))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 Int) ($generated@@127 Int) ) (!  (=> (and (<= 0 $generated@@126) (<= 0 $generated@@127)) (= ($generated@@45 ($generated@@45 $generated@@125 ($generated@@44 $generated@@126)) ($generated@@44 $generated@@127)) ($generated@@45 $generated@@125 ($generated@@44 (+ $generated@@126 $generated@@127)))))
 :pattern ( ($generated@@45 ($generated@@45 $generated@@125 ($generated@@44 $generated@@126)) ($generated@@44 $generated@@127)))
)))
(assert (forall (($generated@@128 T@U) ) (!  (=> ($generated@@48 $generated@@128) (= $generated@@128 ($generated@@44 ($generated@@49 $generated@@128))))
 :pattern ( ($generated@@49 $generated@@128))
 :pattern ( ($generated@@48 $generated@@128))
)))
(assert (= ($generated@@20 $generated@@26) $generated@@2))
(assert (= ($generated@@129 $generated@@26) $generated@@3))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ) (!  (and (=> ($generated@@48 ($generated@@45 $generated@@130 $generated@@131)) (and ($generated@@48 $generated@@130) ($generated@@48 $generated@@131))) (=> ($generated@@48 $generated@@131) (and (= ($generated@@48 ($generated@@45 $generated@@130 $generated@@131)) ($generated@@48 $generated@@130)) (= ($generated@@49 ($generated@@45 $generated@@130 $generated@@131)) (+ ($generated@@49 $generated@@130) ($generated@@49 $generated@@131))))))
 :pattern ( ($generated@@45 $generated@@130 $generated@@131))
)))
(assert (forall (($generated@@132 Int) ) (! (= ($generated@@35 $generated@@6 ($generated@@10 ($generated@@29 $generated@@132))) ($generated@@31 $generated@@71 ($generated@@35 $generated@@6 ($generated@@10 $generated@@132))))
 :pattern ( ($generated@@35 $generated@@6 ($generated@@10 ($generated@@29 $generated@@132))))
)))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@T) ) (! (= ($generated@@35 $generated@@134 ($generated@@31 $generated@@134 $generated@@133)) ($generated@@31 $generated@@71 ($generated@@35 $generated@@134 $generated@@133)))
 :pattern ( ($generated@@35 $generated@@134 ($generated@@31 $generated@@134 $generated@@133)))
)))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@U) ) (! ($generated@@25 $generated@@71 $generated@@136 $generated $generated@@135)
 :pattern ( ($generated@@25 $generated@@71 $generated@@136 $generated $generated@@135))
)))
(assert (forall (($generated@@137 T@U) ) (! ($generated@@38 $generated@@71 $generated@@137 $generated)
 :pattern ( ($generated@@38 $generated@@71 $generated@@137 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@138 () Int)
(declare-fun $generated@@139 () Int)
(declare-fun $generated@@140 () T@U)
(declare-fun $generated@@141 () T@U)
(declare-fun $generated@@142 () T@U)
(declare-fun $generated@@143 (T@U) Bool)
(declare-fun $generated@@144 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@145  (=> (or (not (= $generated@@138 ($generated@@29 0))) (not true)) (and (=> (= (ControlFlow 0 4) (- 0 7)) ($generated@@38 $generated@@6 ($generated@@10 (- $generated@@138 1)) $generated@@26)) (=> ($generated@@38 $generated@@6 ($generated@@10 (- $generated@@138 1)) $generated@@26) (=> (and (= $generated@@139 (- $generated@@138 1)) ($generated@@25 $generated@@6 ($generated@@10 $generated@@139) $generated@@26 $generated@@140)) (and (=> (= (ControlFlow 0 4) (- 0 6)) (or (<= 0 $generated@@138) (= $generated@@139 $generated@@138))) (=> (or (<= 0 $generated@@138) (= $generated@@139 $generated@@138)) (and (=> (= (ControlFlow 0 4) (- 0 5)) (< $generated@@139 $generated@@138)) (=> (< $generated@@139 $generated@@138) (=> (and ($generated@@43 (- $generated@@138 1)) (= (ControlFlow 0 4) (- 0 3))) (<= 0 $generated@@138))))))))))))
(let (($generated@@146 true))
(let (($generated@@147 true))
(let (($generated@@148  (=> (= $generated@@141 ($generated@@69 $generated@@142 $generated@@140 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 8) 1) $generated@@147) (=> (= (ControlFlow 0 8) 2) $generated@@146)) (=> (= (ControlFlow 0 8) 4) $generated@@145)))))
(let (($generated@@149  (=> (and (and (and ($generated@@143 $generated@@140) ($generated@@144 $generated@@140)) (<= ($generated@@29 0) $generated@@138)) (and (= 0 $generated@@40) (= (ControlFlow 0 9) 8))) $generated@@148)))
$generated@@149))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
