(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun SeqType () T@T)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSeq alloc)
)
(assert (= (Tag TInt) TagInt))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 3)) (= (Ctor BoxType) 4)) (= (Ctor refType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (= (Ctor SeqType) 7))
(assert (forall ((s T@U) (bx T@U) (t T@U) ) (!  (=> (and ($Is SeqType s (TSeq t)) ($IsBox bx t)) ($Is SeqType (|Seq#Build| s bx) (TSeq t)))
 :pattern ( ($Is SeqType (|Seq#Build| s bx) (TSeq t)))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((s@@0 T@U) (v T@U) ) (! (= (|Seq#Length| (|Seq#Build| s@@0 v)) (+ 1 (|Seq#Length| s@@0)))
 :pattern ( (|Seq#Build| s@@0 v))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t@@0 h@@0) ($IsAlloc T@@1 v@@0 t@@0 h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t@@0 h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@0 T@U) (t@@1 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@0 t@@1 h@@1) ($IsAllocBox bx@@0 t@@1 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@0 t@@1 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@1 T@U) (t@@2 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@2 h@@2) ($IsAlloc T@@2 v@@1 t@@2 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@1 t@@2 h@@2))
)))
(assert (forall ((s@@1 T@U) (i Int) (v@@2 T@U) ) (!  (and (=> (= i (|Seq#Length| s@@1)) (= (|Seq#Index| (|Seq#Build| s@@1 v@@2) i) v@@2)) (=> (or (not (= i (|Seq#Length| s@@1))) (not true)) (= (|Seq#Index| (|Seq#Build| s@@1 v@@2) i) (|Seq#Index| s@@1 i))))
 :pattern ( (|Seq#Index| (|Seq#Build| s@@1 v@@2) i))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TInt) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) TInt)))
 :pattern ( ($IsBox bx@@1 TInt))
)))
(assert (forall ((v@@3 T@U) (t@@3 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@3) t@@3) ($Is T@@3 v@@3 t@@3))
 :pattern ( ($IsBox ($Box T@@3 v@@3) t@@3))
)))
(assert (forall ((s@@2 T@U) ) (! (<= 0 (|Seq#Length| s@@2))
 :pattern ( (|Seq#Length| s@@2))
)))
(assert (forall ((v@@4 T@U) (t0@@0 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SeqType v@@4 (TSeq t0@@0) h@@3) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@4))) ($IsAllocBox (|Seq#Index| v@@4 i@@0) t0@@0 h@@3))
 :pattern ( (|Seq#Index| v@@4 i@@0))
)))
 :pattern ( ($IsAlloc SeqType v@@4 (TSeq t0@@0) h@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Inv0_TSeq (TSeq t@@4)) t@@4)
 :pattern ( (TSeq t@@4))
)))
(assert (forall ((t@@5 T@U) ) (! (= (Tag (TSeq t@@5)) TagSeq)
 :pattern ( (TSeq t@@5))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert  (and (forall ((t0@@1 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@1 t1@@0 t2 (MapType1Store t0@@1 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((s@@3 T@U) (val@@4 T@U) ) (!  (and (= (|Seq#Build_inv0| (|Seq#Build| s@@3 val@@4)) s@@3) (= (|Seq#Build_inv1| (|Seq#Build| s@@3 val@@4)) val@@4))
 :pattern ( (|Seq#Build| s@@3 val@@4))
)))
(assert (forall ((bx@@2 T@U) (t@@6 T@U) ) (!  (=> ($IsBox bx@@2 (TSeq t@@6)) (and (= ($Box SeqType ($Unbox SeqType bx@@2)) bx@@2) ($Is SeqType ($Unbox SeqType bx@@2) (TSeq t@@6))))
 :pattern ( ($IsBox bx@@2 (TSeq t@@6)))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@7)) (Lit BoxType ($Box T@@5 x@@7)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@7)))
)))
(assert (forall ((s@@4 T@U) ) (!  (=> (= (|Seq#Length| s@@4) 0) (= s@@4 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@4))
)))
(assert (forall ((h@@4 T@U) (v@@5 T@U) ) (! ($IsAlloc intType v@@5 TInt h@@4)
 :pattern ( ($IsAlloc intType v@@5 TInt h@@4))
)))
(assert (forall ((v@@6 T@U) (t0@@2 T@U) ) (! (= ($Is SeqType v@@6 (TSeq t0@@2)) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@6))) ($IsBox (|Seq#Index| v@@6 i@@1) t0@@2))
 :pattern ( (|Seq#Index| v@@6 i@@1))
)))
 :pattern ( ($Is SeqType v@@6 (TSeq t0@@2)))
)))
(assert (forall ((v@@7 T@U) ) (! ($Is intType v@@7 TInt)
 :pattern ( ($Is intType v@@7 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun |s#0@0| () T@U)
(declare-fun |from##0@0| () Int)
(declare-fun |to##0@0| () Int)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |call4formal@lo#0@0| () Int)
(declare-fun |call5formal@hi#0@0| () Int)
(declare-fun |from##1@0| () Int)
(declare-fun |to##1@0| () Int)
(declare-fun $Heap@1 () T@U)
(declare-fun |call4formal@lo#0@0@@0| () Int)
(declare-fun |call5formal@hi#0@0@@0| () Int)
(declare-fun |from##2@0| () Int)
(declare-fun |to##2@0| () Int)
(declare-fun $Heap@2 () T@U)
(declare-fun |call4formal@lo#0@0@@1| () Int)
(declare-fun |call5formal@hi#0@0@@1| () Int)
(declare-fun |from##3@0| () Int)
(declare-fun |to##3@0| () Int)
(declare-fun $Heap@3 () T@U)
(declare-fun |call4formal@lo#0@0@@2| () Int)
(declare-fun |call5formal@hi#0@0@@2| () Int)
(declare-fun |from##4@0| () Int)
(declare-fun |to##4@0| () Int)
(declare-fun $Heap@4 () T@U)
(declare-fun |call4formal@lo#0@0@@3| () Int)
(declare-fun |call5formal@hi#0@0@@3| () Int)
(declare-fun |from##5@0| () Int)
(declare-fun |to##5@0| () Int)
(declare-fun $Heap@5 () T@U)
(declare-fun |call4formal@lo#0@0@@4| () Int)
(declare-fun |call5formal@hi#0@0@@4| () Int)
(declare-fun |from##6@0| () Int)
(declare-fun |to##6@0| () Int)
(declare-fun $Heap@6 () T@U)
(declare-fun |call4formal@lo#0@0@@5| () Int)
(declare-fun |call5formal@hi#0@0@@5| () Int)
(declare-fun |from##7@0| () Int)
(declare-fun |to##7@0| () Int)
(declare-fun |s#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 18) (let ((anon0_correct  (=> (and (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (= |s#0@0| (Lit SeqType (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box intType (int_2_U (LitInt 2)))) ($Box intType (int_2_U (LitInt 29)))) ($Box intType (int_2_U (LitInt 34)))) ($Box intType (int_2_U (LitInt 35)))) ($Box intType (int_2_U (LitInt 36)))) ($Box intType (int_2_U (LitInt 59)))) ($Box intType (int_2_U (LitInt 104)))) ($Box intType (int_2_U (LitInt 106)))) ($Box intType (int_2_U (LitInt 107)))) ($Box intType (int_2_U (LitInt 107)))) ($Box intType (int_2_U (LitInt 108)))) ($Box intType (int_2_U (LitInt 2700))))))) (and (= |from##0@0| (LitInt 0)) (= |to##0@0| (LitInt 3000)))) (and (=> (= (ControlFlow 0 2) (- 0 17)) (forall ((|i#1| Int) (|j#1| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1|) (< |i#1| |j#1|)) (< |j#1| (|Seq#Length| |s#0@0|))) (<= (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#1|))) (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |j#1|)))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@0| |j#1|)) ($Unbox intType (|Seq#Index| |s#0@0| |i#1|)))
))) (=> (forall ((|i#1@@0| Int) (|j#1@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@0|) (< |i#1@@0| |j#1@@0|)) (< |j#1@@0| (|Seq#Length| |s#0@0|))) (<= (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@0|))) (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@0|)))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@0|)) ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@0|)))
)) (and (=> (= (ControlFlow 0 2) (- 0 16)) (<= |from##0@0| |to##0@0|)) (=> (<= |from##0@0| |to##0@0|) (=> (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (=> (and (and (and (<= (LitInt 0) |call4formal@lo#0@0|) (<= |call4formal@lo#0@0| |call5formal@hi#0@0|)) (and (<= |call5formal@hi#0@0| (|Seq#Length| |s#0@0|)) (forall ((|i#3| Int) ) (!  (=> (and (<= (LitInt 0) |i#3|) (< |i#3| (|Seq#Length| |s#0@0|))) (=  (and (<= |from##0@0| (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#3|)))) (< (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#3|))) |to##0@0|))  (and (<= |call4formal@lo#0@0| |i#3|) (< |i#3| |call5formal@hi#0@0|))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@0| |i#3|)))
)))) (and (and (forall (($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0))
)) ($HeapSucc $Heap $Heap@0)) (and (= |from##1@0| (LitInt 35)) (= |to##1@0| (LitInt 107))))) (and (=> (= (ControlFlow 0 2) (- 0 15)) (forall ((|i#1@@1| Int) (|j#1@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@1|) (< |i#1@@1| |j#1@@1|)) (< |j#1@@1| (|Seq#Length| |s#0@0|))) (<= (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@1|))) (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@1|)))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@1|)) ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@1|)))
))) (=> (forall ((|i#1@@2| Int) (|j#1@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@2|) (< |i#1@@2| |j#1@@2|)) (< |j#1@@2| (|Seq#Length| |s#0@0|))) (<= (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@2|))) (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@2|)))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@2|)) ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@2|)))
)) (and (=> (= (ControlFlow 0 2) (- 0 14)) (<= |from##1@0| |to##1@0|)) (=> (<= |from##1@0| |to##1@0|) (=> (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (=> (and (and (and (<= (LitInt 0) |call4formal@lo#0@0@@0|) (<= |call4formal@lo#0@0@@0| |call5formal@hi#0@0@@0|)) (and (<= |call5formal@hi#0@0@@0| (|Seq#Length| |s#0@0|)) (forall ((|i#3@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@0|) (< |i#3@@0| (|Seq#Length| |s#0@0|))) (=  (and (<= |from##1@0| (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#3@@0|)))) (< (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#3@@0|))) |to##1@0|))  (and (<= |call4formal@lo#0@0@@0| |i#3@@0|) (< |i#3@@0| |call5formal@hi#0@0@@0|))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@0| |i#3@@0|)))
)))) (and (and (forall (($o@@1 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@1) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@1) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@1)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@1))
)) ($HeapSucc $Heap@0 $Heap@1)) (and (= |from##2@0| (LitInt 0)) (= |to##2@0| (LitInt 3000))))) (and (=> (= (ControlFlow 0 2) (- 0 13)) (forall ((|i#1@@3| Int) (|j#1@@3| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@3|) (< |i#1@@3| |j#1@@3|)) (< |j#1@@3| (|Seq#Length| |s#0@0|))) (<= (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@3|))) (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@3|)))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@3|)) ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@3|)))
))) (=> (forall ((|i#1@@4| Int) (|j#1@@4| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@4|) (< |i#1@@4| |j#1@@4|)) (< |j#1@@4| (|Seq#Length| |s#0@0|))) (<= (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@4|))) (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@4|)))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@4|)) ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@4|)))
)) (and (=> (= (ControlFlow 0 2) (- 0 12)) (<= |from##2@0| |to##2@0|)) (=> (<= |from##2@0| |to##2@0|) (=> (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (=> (and (and (and (<= (LitInt 0) |call4formal@lo#0@0@@1|) (<= |call4formal@lo#0@0@@1| |call5formal@hi#0@0@@1|)) (and (<= |call5formal@hi#0@0@@1| (|Seq#Length| |s#0@0|)) (forall ((|i#3@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@1|) (< |i#3@@1| (|Seq#Length| |s#0@0|))) (=  (and (<= |from##2@0| (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#3@@1|)))) (< (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#3@@1|))) |to##2@0|))  (and (<= |call4formal@lo#0@0@@1| |i#3@@1|) (< |i#3@@1| |call5formal@hi#0@0@@1|))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@0| |i#3@@1|)))
)))) (and (and (forall (($o@@2 T@U) ) (!  (=> (and (or (not (= $o@@2 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@2) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@2) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@2)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@2))
)) ($HeapSucc $Heap@1 $Heap@2)) (and (= |from##3@0| (LitInt 35)) (= |to##3@0| (LitInt 107))))) (and (=> (= (ControlFlow 0 2) (- 0 11)) (forall ((|i#1@@5| Int) (|j#1@@5| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@5|) (< |i#1@@5| |j#1@@5|)) (< |j#1@@5| (|Seq#Length| |s#0@0|))) (<= (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@5|))) (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@5|)))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@5|)) ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@5|)))
))) (=> (forall ((|i#1@@6| Int) (|j#1@@6| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@6|) (< |i#1@@6| |j#1@@6|)) (< |j#1@@6| (|Seq#Length| |s#0@0|))) (<= (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@6|))) (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@6|)))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@6|)) ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@6|)))
)) (and (=> (= (ControlFlow 0 2) (- 0 10)) (<= |from##3@0| |to##3@0|)) (=> (<= |from##3@0| |to##3@0|) (=> (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (=> (and (and (and (<= (LitInt 0) |call4formal@lo#0@0@@2|) (<= |call4formal@lo#0@0@@2| |call5formal@hi#0@0@@2|)) (and (<= |call5formal@hi#0@0@@2| (|Seq#Length| |s#0@0|)) (forall ((|i#3@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@2|) (< |i#3@@2| (|Seq#Length| |s#0@0|))) (=  (and (<= |from##3@0| (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#3@@2|)))) (< (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#3@@2|))) |to##3@0|))  (and (<= |call4formal@lo#0@0@@2| |i#3@@2|) (< |i#3@@2| |call5formal@hi#0@0@@2|))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@0| |i#3@@2|)))
)))) (and (and (forall (($o@@3 T@U) ) (!  (=> (and (or (not (= $o@@3 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@3) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@3) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@3)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@3))
)) ($HeapSucc $Heap@2 $Heap@3)) (and (= |from##4@0| (LitInt 0)) (= |to##4@0| (LitInt 3000))))) (and (=> (= (ControlFlow 0 2) (- 0 9)) (forall ((|i#1@@7| Int) (|j#1@@7| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@7|) (< |i#1@@7| |j#1@@7|)) (< |j#1@@7| (|Seq#Length| |s#0@0|))) (<= (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@7|))) (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@7|)))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@7|)) ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@7|)))
))) (=> (forall ((|i#1@@8| Int) (|j#1@@8| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@8|) (< |i#1@@8| |j#1@@8|)) (< |j#1@@8| (|Seq#Length| |s#0@0|))) (<= (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@8|))) (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@8|)))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@8|)) ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@8|)))
)) (and (=> (= (ControlFlow 0 2) (- 0 8)) (<= |from##4@0| |to##4@0|)) (=> (<= |from##4@0| |to##4@0|) (=> (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (=> (and (and (and (<= (LitInt 0) |call4formal@lo#0@0@@3|) (<= |call4formal@lo#0@0@@3| |call5formal@hi#0@0@@3|)) (and (<= |call5formal@hi#0@0@@3| (|Seq#Length| |s#0@0|)) (forall ((|i#3@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@3|) (< |i#3@@3| (|Seq#Length| |s#0@0|))) (=  (and (<= |from##4@0| (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#3@@3|)))) (< (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#3@@3|))) |to##4@0|))  (and (<= |call4formal@lo#0@0@@3| |i#3@@3|) (< |i#3@@3| |call5formal@hi#0@0@@3|))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@0| |i#3@@3|)))
)))) (and (and (forall (($o@@4 T@U) ) (!  (=> (and (or (not (= $o@@4 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@4) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@4) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@4)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@4))
)) ($HeapSucc $Heap@3 $Heap@4)) (and (= |from##5@0| (LitInt 35)) (= |to##5@0| (LitInt 107))))) (and (=> (= (ControlFlow 0 2) (- 0 7)) (forall ((|i#1@@9| Int) (|j#1@@9| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@9|) (< |i#1@@9| |j#1@@9|)) (< |j#1@@9| (|Seq#Length| |s#0@0|))) (<= (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@9|))) (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@9|)))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@9|)) ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@9|)))
))) (=> (forall ((|i#1@@10| Int) (|j#1@@10| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@10|) (< |i#1@@10| |j#1@@10|)) (< |j#1@@10| (|Seq#Length| |s#0@0|))) (<= (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@10|))) (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@10|)))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@10|)) ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@10|)))
)) (and (=> (= (ControlFlow 0 2) (- 0 6)) (<= |from##5@0| |to##5@0|)) (=> (<= |from##5@0| |to##5@0|) (=> (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (=> (and (and (and (<= (LitInt 0) |call4formal@lo#0@0@@4|) (<= |call4formal@lo#0@0@@4| |call5formal@hi#0@0@@4|)) (and (<= |call5formal@hi#0@0@@4| (|Seq#Length| |s#0@0|)) (forall ((|i#3@@4| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@4|) (< |i#3@@4| (|Seq#Length| |s#0@0|))) (=  (and (<= |from##5@0| (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#3@@4|)))) (< (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#3@@4|))) |to##5@0|))  (and (<= |call4formal@lo#0@0@@4| |i#3@@4|) (< |i#3@@4| |call5formal@hi#0@0@@4|))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@0| |i#3@@4|)))
)))) (and (and (forall (($o@@5 T@U) ) (!  (=> (and (or (not (= $o@@5 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@5) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@5) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@5)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@5))
)) ($HeapSucc $Heap@4 $Heap@5)) (and (= |from##6@0| (LitInt 0)) (= |to##6@0| (LitInt 3000))))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (forall ((|i#1@@11| Int) (|j#1@@11| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@11|) (< |i#1@@11| |j#1@@11|)) (< |j#1@@11| (|Seq#Length| |s#0@0|))) (<= (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@11|))) (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@11|)))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@11|)) ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@11|)))
))) (=> (forall ((|i#1@@12| Int) (|j#1@@12| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@12|) (< |i#1@@12| |j#1@@12|)) (< |j#1@@12| (|Seq#Length| |s#0@0|))) (<= (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@12|))) (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@12|)))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@12|)) ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@12|)))
)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (<= |from##6@0| |to##6@0|)) (=> (<= |from##6@0| |to##6@0|) (=> (and ($IsGoodHeap $Heap@6) ($IsHeapAnchor $Heap@6)) (=> (and (and (and (<= (LitInt 0) |call4formal@lo#0@0@@5|) (<= |call4formal@lo#0@0@@5| |call5formal@hi#0@0@@5|)) (and (<= |call5formal@hi#0@0@@5| (|Seq#Length| |s#0@0|)) (forall ((|i#3@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@5|) (< |i#3@@5| (|Seq#Length| |s#0@0|))) (=  (and (<= |from##6@0| (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#3@@5|)))) (< (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#3@@5|))) |to##6@0|))  (and (<= |call4formal@lo#0@0@@5| |i#3@@5|) (< |i#3@@5| |call5formal@hi#0@0@@5|))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@0| |i#3@@5|)))
)))) (and (and (forall (($o@@6 T@U) ) (!  (=> (and (or (not (= $o@@6 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@6) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@6) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@6)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@6))
)) ($HeapSucc $Heap@5 $Heap@6)) (and (= |from##7@0| (LitInt 35)) (= |to##7@0| (LitInt 107))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (forall ((|i#1@@13| Int) (|j#1@@13| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@13|) (< |i#1@@13| |j#1@@13|)) (< |j#1@@13| (|Seq#Length| |s#0@0|))) (<= (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@13|))) (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@13|)))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@13|)) ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@13|)))
))) (=> (forall ((|i#1@@14| Int) (|j#1@@14| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@14|) (< |i#1@@14| |j#1@@14|)) (< |j#1@@14| (|Seq#Length| |s#0@0|))) (<= (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@14|))) (U_2_int ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@14|)))))
 :pattern ( ($Unbox intType (|Seq#Index| |s#0@0| |j#1@@14|)) ($Unbox intType (|Seq#Index| |s#0@0| |i#1@@14|)))
)) (=> (= (ControlFlow 0 2) (- 0 1)) (<= |from##7@0| |to##7@0|)))))))))))))))))))))))))))))))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (and ($Is SeqType |s#0| (TSeq TInt)) ($IsAlloc SeqType |s#0| (TSeq TInt) $Heap)) true) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 18) 2))) anon0_correct))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
