(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun LitInt (Int) Int)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun LitReal (Real) Real)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun Div (Int Int) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 Real) ) (! (= (LitReal x@@3) x@@3)
 :pattern ( (LitReal x@@3))
)))
(assert (forall ((x@@4 T@U) (T T@T) ) (! (= (Lit T x@@4) x@@4)
 :pattern ( (Lit T x@@4))
)))
(assert (forall ((x@@5 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@5)) x@@5)
 :pattern ( ($Unbox T@@0 x@@5))
)))
(assert (forall ((x@@6 Int) (y Int) ) (! (= (Div x@@6 y) (div x@@6 y))
 :pattern ( (Div x@@6 y))
)))
(assert (forall ((x@@7 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@7)) x@@7)
 :pattern ( ($Box T@@1 x@@7))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 3)) (= (Ctor FieldType) 4)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((x@@8 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@8))) (Lit BoxType ($Box intType (int_2_U x@@8))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@8))))
)))
(assert (forall ((x@@9 Real) ) (! (= ($Box realType (real_2_U (LitReal x@@9))) (Lit BoxType ($Box realType (real_2_U x@@9))))
 :pattern ( ($Box realType (real_2_U (LitReal x@@9))))
)))
(assert (forall ((x@@10 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@10)) (Lit BoxType ($Box T@@2 x@@10)))
 :pattern ( ($Box T@@2 (Lit T@@2 x@@10)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun alloc () T@U)
(declare-fun |r0#0@0| () Real)
(declare-fun |newtype$check#0@0| () Real)
(declare-fun |newtype$check#1@0| () Real)
(declare-fun |newtype$check#2@0| () Real)
(declare-fun |r1#0@0| () Real)
(declare-fun |newtype$check#3@0| () Real)
(declare-fun |newtype$check#4@0| () Real)
(declare-fun |newtype$check#5@0| () Real)
(declare-fun |r2#0@0| () Real)
(declare-fun |i0#0@0| () Int)
(declare-fun |newtype$check#6@0| () Int)
(declare-fun |newtype$check#7@0| () Int)
(declare-fun |newtype$check#8@0| () Int)
(declare-fun |i1#0@0| () Int)
(declare-fun |newtype$check#9@0| () Int)
(declare-fun |newtype$check#10@0| () Int)
(declare-fun |newtype$check#11@0| () Int)
(declare-fun |i2#0@0| () Int)
(declare-fun |newtype$check#12@0| () Int)
(declare-fun |newtype$check#13@0| () Int)
(declare-fun |newtype$check#14@0| () Int)
(declare-fun |b0#0@0| () Int)
(declare-fun |newtype$check#15@0| () Int)
(declare-fun |newtype$check#16@0| () Int)
(declare-fun |newtype$check#17@0| () Int)
(declare-fun |b1#0@0| () Int)
(declare-fun |newtype$check#18@0| () Int)
(declare-fun |newtype$check#19@0| () Int)
(declare-fun |newtype$check#20@0| () Int)
(declare-fun |b2#0@0| () Int)
(declare-fun |newtype$check#21@0| () Int)
(declare-fun |newtype$check#22@0| () Int)
(declare-fun |newtype$check#23@0| () Int)
(declare-fun |b3#0@0| () Int)
(declare-fun U_2_bv8 (T@U) (_ BitVec 8))
(declare-fun bv8Type () T@T)
(declare-fun bv8_2_U ((_ BitVec 8)) T@U)
(declare-fun |v0#0@0| () (_ BitVec 8))
(declare-fun |v1#0@0| () (_ BitVec 8))
(declare-fun |v2#0@0| () (_ BitVec 8))
(declare-fun |v3#0@0| () (_ BitVec 8))
(declare-fun |newtype$check#24@0| () Int)
(declare-fun |newtype$check#25@0| () Int)
(declare-fun |newtype$check#26@0| () Int)
(declare-fun |j0#0@0| () Int)
(declare-fun |newtype$check#27@0| () Int)
(declare-fun |newtype$check#28@0| () Int)
(declare-fun |newtype$check#29@0| () Int)
(declare-fun |j1#0@0| () Int)
(declare-fun |newtype$check#30@0| () Int)
(declare-fun |newtype$check#31@0| () Int)
(declare-fun |newtype$check#32@0| () Int)
(declare-fun |j2#0@0| () Int)
(declare-fun |newtype$check#33@0| () Int)
(declare-fun |newtype$check#34@0| () Int)
(declare-fun |newtype$check#35@0| () Int)
(declare-fun |j3#0@0| () Int)
(declare-fun U_2_bv32 (T@U) (_ BitVec 32))
(declare-fun bv32Type () T@T)
(declare-fun bv32_2_U ((_ BitVec 32)) T@U)
(declare-fun |w0#0@0| () (_ BitVec 32))
(declare-fun |w1#0@0| () (_ BitVec 32))
(declare-fun |w2#0@0| () (_ BitVec 32))
(declare-fun |w3#0@0| () (_ BitVec 32))
(declare-fun U_2_bv68 (T@U) (_ BitVec 68))
(declare-fun bv68Type () T@T)
(declare-fun bv68_2_U ((_ BitVec 68)) T@U)
(declare-fun |h0#0@0| () (_ BitVec 68))
(declare-fun |h1#0@0| () (_ BitVec 68))
(declare-fun |h2#0@0| () (_ BitVec 68))
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |r2#0| () Real)
(declare-fun |i2#0| () Int)
(declare-fun |b0#0| () Int)
(declare-fun |b1#0| () Int)
(declare-fun |b2#0| () Int)
(declare-fun |b3#0| () Int)
(declare-fun |j0#0| () Int)
(declare-fun |j1#0| () Int)
(declare-fun |j2#0| () Int)
(declare-fun |j3#0| () Int)
(declare-fun $FunctionContextHeight () Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor bv8Type) 7) (forall ((arg0@@5 (_ BitVec 8)) ) (! (= (U_2_bv8 (bv8_2_U arg0@@5)) arg0@@5)
 :pattern ( (bv8_2_U arg0@@5))
))) (forall ((x@@11 T@U) ) (! (= (bv8_2_U (U_2_bv8 x@@11)) x@@11)
 :pattern ( (U_2_bv8 x@@11))
))) (= (Ctor bv32Type) 8)) (forall ((arg0@@6 (_ BitVec 32)) ) (! (= (U_2_bv32 (bv32_2_U arg0@@6)) arg0@@6)
 :pattern ( (bv32_2_U arg0@@6))
))) (forall ((x@@12 T@U) ) (! (= (bv32_2_U (U_2_bv32 x@@12)) x@@12)
 :pattern ( (U_2_bv32 x@@12))
))) (= (Ctor bv68Type) 9)) (forall ((arg0@@7 (_ BitVec 68)) ) (! (= (U_2_bv68 (bv68_2_U arg0@@7)) arg0@@7)
 :pattern ( (bv68_2_U arg0@@7))
))) (forall ((x@@13 T@U) ) (! (= (bv68_2_U (U_2_bv68 x@@13)) x@@13)
 :pattern ( (U_2_bv68 x@@13))
))))
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 58) (let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 2) (- 0 57)) (or (not (= (LitReal 10.0) 0.0)) (not true))) (=> (or (not (= (LitReal 10.0) 0.0)) (not true)) (=> (= |r0#0@0| (LitReal (/ 621.0 10.0))) (=> (and (= |newtype$check#0@0| (LitReal 622.0)) (= |newtype$check#1@0| (LitReal 10.0))) (and (=> (= (ControlFlow 0 2) (- 0 56)) (or (not (= (LitReal 10.0) 0.0)) (not true))) (=> (or (not (= (LitReal 10.0) 0.0)) (not true)) (=> (= |newtype$check#2@0| (LitReal (/ 622.0 10.0))) (=> (and (= |r1#0@0| (LitReal (/ 622.0 10.0))) (= |newtype$check#3@0| (LitReal 623.0))) (and (=> (= (ControlFlow 0 2) (- 0 55)) (<= (LitReal 0.0) |newtype$check#3@0|)) (=> (<= (LitReal 0.0) |newtype$check#3@0|) (=> (= |newtype$check#4@0| (LitReal 10.0)) (and (=> (= (ControlFlow 0 2) (- 0 54)) (<= (LitReal 0.0) |newtype$check#4@0|)) (=> (<= (LitReal 0.0) |newtype$check#4@0|) (and (=> (= (ControlFlow 0 2) (- 0 53)) (or (not (= (LitReal 10.0) 0.0)) (not true))) (=> (or (not (= (LitReal 10.0) 0.0)) (not true)) (=> (= |newtype$check#5@0| (LitReal (/ 623.0 10.0))) (and (=> (= (ControlFlow 0 2) (- 0 52)) (<= (LitReal 0.0) |newtype$check#5@0|)) (=> (<= (LitReal 0.0) |newtype$check#5@0|) (=> (= |r2#0@0| (LitReal (/ 623.0 10.0))) (and (=> (= (ControlFlow 0 2) (- 0 51)) (or (not (= (LitInt (- 0 2)) 0)) (not true))) (=> (or (not (= (LitInt (- 0 2)) 0)) (not true)) (=> (= |i0#0@0| (LitInt (Div 7 (LitInt (- 0 2))))) (=> (and (= |newtype$check#6@0| (LitInt 7)) (= |newtype$check#7@0| (LitInt (- 0 2)))) (and (=> (= (ControlFlow 0 2) (- 0 50)) (or (not (= (LitInt (- 0 2)) 0)) (not true))) (=> (or (not (= (LitInt (- 0 2)) 0)) (not true)) (=> (= |newtype$check#8@0| (LitInt (Div 7 (LitInt (- 0 2))))) (=> (and (= |i1#0@0| (LitInt (Div 7 (LitInt (- 0 2))))) (= |newtype$check#9@0| (LitInt 7))) (and (=> (= (ControlFlow 0 2) (- 0 49)) (<= (LitInt (- 0 200)) |newtype$check#9@0|)) (=> (<= (LitInt (- 0 200)) |newtype$check#9@0|) (=> (= |newtype$check#10@0| (LitInt (- 0 2))) (and (=> (= (ControlFlow 0 2) (- 0 48)) (<= (LitInt (- 0 200)) |newtype$check#10@0|)) (=> (<= (LitInt (- 0 200)) |newtype$check#10@0|) (and (=> (= (ControlFlow 0 2) (- 0 47)) (or (not (= (LitInt (- 0 2)) 0)) (not true))) (=> (or (not (= (LitInt (- 0 2)) 0)) (not true)) (=> (= |newtype$check#11@0| (LitInt (Div 7 (LitInt (- 0 2))))) (and (=> (= (ControlFlow 0 2) (- 0 46)) (<= (LitInt (- 0 200)) |newtype$check#11@0|)) (=> (<= (LitInt (- 0 200)) |newtype$check#11@0|) (=> (and (= |i2#0@0| (LitInt (Div 7 (LitInt (- 0 2))))) (= |newtype$check#12@0| (LitInt 248))) (and (=> (= (ControlFlow 0 2) (- 0 45)) (and (<= (LitInt 0) |newtype$check#12@0|) (< |newtype$check#12@0| 256))) (=> (and (<= (LitInt 0) |newtype$check#12@0|) (< |newtype$check#12@0| 256)) (=> (= |newtype$check#13@0| (LitInt 3)) (and (=> (= (ControlFlow 0 2) (- 0 44)) (and (<= (LitInt 0) |newtype$check#13@0|) (< |newtype$check#13@0| 256))) (=> (and (<= (LitInt 0) |newtype$check#13@0|) (< |newtype$check#13@0| 256)) (and (=> (= (ControlFlow 0 2) (- 0 43)) (or (not (= (LitInt 3) 0)) (not true))) (=> (or (not (= (LitInt 3) 0)) (not true)) (=> (= |newtype$check#14@0| (LitInt (Div 248 (LitInt 3)))) (and (=> (= (ControlFlow 0 2) (- 0 42)) (and (<= (LitInt 0) |newtype$check#14@0|) (< |newtype$check#14@0| 256))) (=> (and (<= (LitInt 0) |newtype$check#14@0|) (< |newtype$check#14@0| 256)) (=> (and (= |b0#0@0| (LitInt (Div 248 (LitInt 3)))) (= |newtype$check#15@0| (LitInt 100))) (and (=> (= (ControlFlow 0 2) (- 0 41)) (and (<= (LitInt 0) |newtype$check#15@0|) (< |newtype$check#15@0| 256))) (=> (and (<= (LitInt 0) |newtype$check#15@0|) (< |newtype$check#15@0| 256)) (=> (= |newtype$check#16@0| (LitInt 253)) (and (=> (= (ControlFlow 0 2) (- 0 40)) (and (<= (LitInt 0) |newtype$check#16@0|) (< |newtype$check#16@0| 256))) (=> (and (<= (LitInt 0) |newtype$check#16@0|) (< |newtype$check#16@0| 256)) (and (=> (= (ControlFlow 0 2) (- 0 39)) (or (not (= (LitInt 253) 0)) (not true))) (=> (or (not (= (LitInt 253) 0)) (not true)) (=> (= |newtype$check#17@0| (LitInt (Div 100 (LitInt 253)))) (and (=> (= (ControlFlow 0 2) (- 0 38)) (and (<= (LitInt 0) |newtype$check#17@0|) (< |newtype$check#17@0| 256))) (=> (and (<= (LitInt 0) |newtype$check#17@0|) (< |newtype$check#17@0| 256)) (=> (and (= |b1#0@0| (LitInt (Div 100 (LitInt 253)))) (= |newtype$check#18@0| (LitInt (- 0 8)))) (and (=> (= (ControlFlow 0 2) (- 0 37)) (and (<= (LitInt (- 0 128)) |newtype$check#18@0|) (< |newtype$check#18@0| 128))) (=> (and (<= (LitInt (- 0 128)) |newtype$check#18@0|) (< |newtype$check#18@0| 128)) (=> (= |newtype$check#19@0| (LitInt 3)) (and (=> (= (ControlFlow 0 2) (- 0 36)) (and (<= (LitInt (- 0 128)) |newtype$check#19@0|) (< |newtype$check#19@0| 128))) (=> (and (<= (LitInt (- 0 128)) |newtype$check#19@0|) (< |newtype$check#19@0| 128)) (and (=> (= (ControlFlow 0 2) (- 0 35)) (or (not (= (LitInt 3) 0)) (not true))) (=> (or (not (= (LitInt 3) 0)) (not true)) (=> (= |newtype$check#20@0| (LitInt (Div (- 0 8) (LitInt 3)))) (and (=> (= (ControlFlow 0 2) (- 0 34)) (and (<= (LitInt (- 0 128)) |newtype$check#20@0|) (< |newtype$check#20@0| 128))) (=> (and (<= (LitInt (- 0 128)) |newtype$check#20@0|) (< |newtype$check#20@0| 128)) (=> (and (= |b2#0@0| (LitInt (Div (- 0 8) (LitInt 3)))) (= |newtype$check#21@0| (LitInt 100))) (and (=> (= (ControlFlow 0 2) (- 0 33)) (and (<= (LitInt (- 0 128)) |newtype$check#21@0|) (< |newtype$check#21@0| 128))) (=> (and (<= (LitInt (- 0 128)) |newtype$check#21@0|) (< |newtype$check#21@0| 128)) (=> (= |newtype$check#22@0| (LitInt (- 0 3))) (and (=> (= (ControlFlow 0 2) (- 0 32)) (and (<= (LitInt (- 0 128)) |newtype$check#22@0|) (< |newtype$check#22@0| 128))) (=> (and (<= (LitInt (- 0 128)) |newtype$check#22@0|) (< |newtype$check#22@0| 128)) (and (=> (= (ControlFlow 0 2) (- 0 31)) (or (not (= (LitInt (- 0 3)) 0)) (not true))) (=> (or (not (= (LitInt (- 0 3)) 0)) (not true)) (=> (= |newtype$check#23@0| (LitInt (Div 100 (LitInt (- 0 3))))) (and (=> (= (ControlFlow 0 2) (- 0 30)) (and (<= (LitInt (- 0 128)) |newtype$check#23@0|) (< |newtype$check#23@0| 128))) (=> (and (<= (LitInt (- 0 128)) |newtype$check#23@0|) (< |newtype$check#23@0| 128)) (=> (= |b3#0@0| (LitInt (Div 100 (LitInt (- 0 3))))) (and (=> (= (ControlFlow 0 2) (- 0 29)) (or (not (= (U_2_bv8 (Lit bv8Type (bv8_2_U #x03))) #x00)) (not true))) (=> (or (not (= (U_2_bv8 (Lit bv8Type (bv8_2_U #x03))) #x00)) (not true)) (=> (= |v0#0@0| (U_2_bv8 (Lit bv8Type (bv8_2_U (bvudiv #xf8 #x03))))) (and (=> (= (ControlFlow 0 2) (- 0 28)) (or (not (= (U_2_bv8 (Lit bv8Type (bv8_2_U #xfd))) #x00)) (not true))) (=> (or (not (= (U_2_bv8 (Lit bv8Type (bv8_2_U #xfd))) #x00)) (not true)) (=> (= |v1#0@0| (U_2_bv8 (Lit bv8Type (bv8_2_U (bvudiv #x64 #xfd))))) (and (=> (= (ControlFlow 0 2) (- 0 27)) (or (not (= (U_2_bv8 (Lit bv8Type (bv8_2_U #x03))) #x00)) (not true))) (=> (or (not (= (U_2_bv8 (Lit bv8Type (bv8_2_U #x03))) #x00)) (not true)) (=> (= |v2#0@0| (U_2_bv8 (Lit bv8Type (bv8_2_U (bvudiv (bvsub #x00 #x08) #x03))))) (and (=> (= (ControlFlow 0 2) (- 0 26)) (or (not (= (U_2_bv8 (Lit bv8Type (bv8_2_U (bvsub #x00 #x03)))) #x00)) (not true))) (=> (or (not (= (U_2_bv8 (Lit bv8Type (bv8_2_U (bvsub #x00 #x03)))) #x00)) (not true)) (=> (and (= |v3#0@0| (U_2_bv8 (Lit bv8Type (bv8_2_U (bvudiv #x64 (bvsub #x00 #x03)))))) (= |newtype$check#24@0| (LitInt 2147483641))) (and (=> (= (ControlFlow 0 2) (- 0 25)) (and (<= (LitInt 0) |newtype$check#24@0|) (< |newtype$check#24@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#24@0|) (< |newtype$check#24@0| 4294967296)) (=> (= |newtype$check#25@0| (LitInt 3)) (and (=> (= (ControlFlow 0 2) (- 0 24)) (and (<= (LitInt 0) |newtype$check#25@0|) (< |newtype$check#25@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#25@0|) (< |newtype$check#25@0| 4294967296)) (and (=> (= (ControlFlow 0 2) (- 0 23)) (or (not (= (LitInt 3) 0)) (not true))) (=> (or (not (= (LitInt 3) 0)) (not true)) (=> (= |newtype$check#26@0| (LitInt (Div 2147483641 (LitInt 3)))) (and (=> (= (ControlFlow 0 2) (- 0 22)) (and (<= (LitInt 0) |newtype$check#26@0|) (< |newtype$check#26@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#26@0|) (< |newtype$check#26@0| 4294967296)) (=> (and (= |j0#0@0| (LitInt (Div 2147483641 (LitInt 3)))) (= |newtype$check#27@0| (LitInt 100))) (and (=> (= (ControlFlow 0 2) (- 0 21)) (and (<= (LitInt 0) |newtype$check#27@0|) (< |newtype$check#27@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#27@0|) (< |newtype$check#27@0| 4294967296)) (=> (= |newtype$check#28@0| (LitInt 2147483645)) (and (=> (= (ControlFlow 0 2) (- 0 20)) (and (<= (LitInt 0) |newtype$check#28@0|) (< |newtype$check#28@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#28@0|) (< |newtype$check#28@0| 4294967296)) (and (=> (= (ControlFlow 0 2) (- 0 19)) (or (not (= (LitInt 2147483645) 0)) (not true))) (=> (or (not (= (LitInt 2147483645) 0)) (not true)) (=> (= |newtype$check#29@0| (LitInt (Div 100 (LitInt 2147483645)))) (and (=> (= (ControlFlow 0 2) (- 0 18)) (and (<= (LitInt 0) |newtype$check#29@0|) (< |newtype$check#29@0| 4294967296))) (=> (and (<= (LitInt 0) |newtype$check#29@0|) (< |newtype$check#29@0| 4294967296)) (=> (and (= |j1#0@0| (LitInt (Div 100 (LitInt 2147483645)))) (= |newtype$check#30@0| (LitInt (- 0 7)))) (and (=> (= (ControlFlow 0 2) (- 0 17)) (and (<= (LitInt (- 0 2147483648)) |newtype$check#30@0|) (< |newtype$check#30@0| 2147483648))) (=> (and (<= (LitInt (- 0 2147483648)) |newtype$check#30@0|) (< |newtype$check#30@0| 2147483648)) (=> (= |newtype$check#31@0| (LitInt 3)) (and (=> (= (ControlFlow 0 2) (- 0 16)) (and (<= (LitInt (- 0 2147483648)) |newtype$check#31@0|) (< |newtype$check#31@0| 2147483648))) (=> (and (<= (LitInt (- 0 2147483648)) |newtype$check#31@0|) (< |newtype$check#31@0| 2147483648)) (and (=> (= (ControlFlow 0 2) (- 0 15)) (or (not (= (LitInt 3) 0)) (not true))) (=> (or (not (= (LitInt 3) 0)) (not true)) (=> (= |newtype$check#32@0| (LitInt (Div (- 0 7) (LitInt 3)))) (and (=> (= (ControlFlow 0 2) (- 0 14)) (and (<= (LitInt (- 0 2147483648)) |newtype$check#32@0|) (< |newtype$check#32@0| 2147483648))) (=> (and (<= (LitInt (- 0 2147483648)) |newtype$check#32@0|) (< |newtype$check#32@0| 2147483648)) (=> (and (= |j2#0@0| (LitInt (Div (- 0 7) (LitInt 3)))) (= |newtype$check#33@0| (LitInt 100))) (and (=> (= (ControlFlow 0 2) (- 0 13)) (and (<= (LitInt (- 0 2147483648)) |newtype$check#33@0|) (< |newtype$check#33@0| 2147483648))) (=> (and (<= (LitInt (- 0 2147483648)) |newtype$check#33@0|) (< |newtype$check#33@0| 2147483648)) (=> (= |newtype$check#34@0| (LitInt (- 0 3))) (and (=> (= (ControlFlow 0 2) (- 0 12)) (and (<= (LitInt (- 0 2147483648)) |newtype$check#34@0|) (< |newtype$check#34@0| 2147483648))) (=> (and (<= (LitInt (- 0 2147483648)) |newtype$check#34@0|) (< |newtype$check#34@0| 2147483648)) (and (=> (= (ControlFlow 0 2) (- 0 11)) (or (not (= (LitInt (- 0 3)) 0)) (not true))) (=> (or (not (= (LitInt (- 0 3)) 0)) (not true)) (=> (= |newtype$check#35@0| (LitInt (Div 100 (LitInt (- 0 3))))) (and (=> (= (ControlFlow 0 2) (- 0 10)) (and (<= (LitInt (- 0 2147483648)) |newtype$check#35@0|) (< |newtype$check#35@0| 2147483648))) (=> (and (<= (LitInt (- 0 2147483648)) |newtype$check#35@0|) (< |newtype$check#35@0| 2147483648)) (=> (= |j3#0@0| (LitInt (Div 100 (LitInt (- 0 3))))) (and (=> (= (ControlFlow 0 2) (- 0 9)) (or (not (= (U_2_bv32 (Lit bv32Type (bv32_2_U #x00000003))) #x00000000)) (not true))) (=> (or (not (= (U_2_bv32 (Lit bv32Type (bv32_2_U #x00000003))) #x00000000)) (not true)) (=> (= |w0#0@0| (U_2_bv32 (Lit bv32Type (bv32_2_U (bvudiv #xfffffff8 #x00000003))))) (and (=> (= (ControlFlow 0 2) (- 0 8)) (or (not (= (U_2_bv32 (Lit bv32Type (bv32_2_U #xfffffffd))) #x00000000)) (not true))) (=> (or (not (= (U_2_bv32 (Lit bv32Type (bv32_2_U #xfffffffd))) #x00000000)) (not true)) (=> (= |w1#0@0| (U_2_bv32 (Lit bv32Type (bv32_2_U (bvudiv #x00000064 #xfffffffd))))) (and (=> (= (ControlFlow 0 2) (- 0 7)) (or (not (= (U_2_bv32 (Lit bv32Type (bv32_2_U #x00000003))) #x00000000)) (not true))) (=> (or (not (= (U_2_bv32 (Lit bv32Type (bv32_2_U #x00000003))) #x00000000)) (not true)) (=> (= |w2#0@0| (U_2_bv32 (Lit bv32Type (bv32_2_U (bvudiv (bvsub #x00000000 #x00000008) #x00000003))))) (and (=> (= (ControlFlow 0 2) (- 0 6)) (or (not (= (U_2_bv32 (Lit bv32Type (bv32_2_U (bvsub #x00000000 #x00000003)))) #x00000000)) (not true))) (=> (or (not (= (U_2_bv32 (Lit bv32Type (bv32_2_U (bvsub #x00000000 #x00000003)))) #x00000000)) (not true)) (=> (= |w3#0@0| (U_2_bv32 (Lit bv32Type (bv32_2_U (bvudiv #x00000064 (bvsub #x00000000 #x00000003)))))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (or (not (= (U_2_bv68 (Lit bv68Type (bv68_2_U #b00000000000000000000000000000000000000000000000000000000000000000011))) #b00000000000000000000000000000000000000000000000000000000000000000000)) (not true))) (=> (or (not (= (U_2_bv68 (Lit bv68Type (bv68_2_U #b00000000000000000000000000000000000000000000000000000000000000000011))) #b00000000000000000000000000000000000000000000000000000000000000000000)) (not true)) (=> (= |h0#0@0| (U_2_bv68 (Lit bv68Type (bv68_2_U (bvudiv #b11111111111111111111111111111111111111111111111111111111111111111000 #b00000000000000000000000000000000000000000000000000000000000000000011))))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (not (= (U_2_bv68 (Lit bv68Type (bv68_2_U #b11111111111111111111111111111111111111111111111111111111111111111101))) #b00000000000000000000000000000000000000000000000000000000000000000000)) (not true))) (=> (or (not (= (U_2_bv68 (Lit bv68Type (bv68_2_U #b11111111111111111111111111111111111111111111111111111111111111111101))) #b00000000000000000000000000000000000000000000000000000000000000000000)) (not true)) (=> (= |h1#0@0| (U_2_bv68 (Lit bv68Type (bv68_2_U (bvudiv #b00000000000000000000000000000000000000000000000000000000000001100100 #b11111111111111111111111111111111111111111111111111111111111111111101))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (not (= (U_2_bv68 (Lit bv68Type (bv68_2_U #b00000000000000000000000000000000000000000000000000000000000000000011))) #b00000000000000000000000000000000000000000000000000000000000000000000)) (not true))) (=> (or (not (= (U_2_bv68 (Lit bv68Type (bv68_2_U #b00000000000000000000000000000000000000000000000000000000000000000011))) #b00000000000000000000000000000000000000000000000000000000000000000000)) (not true)) (=> (and (= |h2#0@0| (U_2_bv68 (Lit bv68Type (bv68_2_U (bvudiv (bvsub #b00000000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000000000000000000000000000000000001000) #b00000000000000000000000000000000000000000000000000000000000000000011))))) (= (ControlFlow 0 2) (- 0 1))) (or (not (= (U_2_bv68 (Lit bv68Type (bv68_2_U (bvsub #b00000000000000000000000000000000000000000000000000000000000000000000 #b00000000000000000000000000000000000000000000000000000000000000000011)))) #b00000000000000000000000000000000000000000000000000000000000000000000)) (not true))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (U_2_bool (Lit boolType (bool_2_U true))) true) (and (<= (LitReal 0.0) |r2#0|) true)) (=> (and (and (and (U_2_bool (Lit boolType (bool_2_U true))) true) (and (<= (LitInt (- 0 200)) |i2#0|) true)) (and (and (<= (LitInt 0) |b0#0|) (< |b0#0| 256)) true)) (=> (and (and (and (and (and (<= (LitInt 0) |b1#0|) (< |b1#0| 256)) true) (and (and (<= (LitInt (- 0 128)) |b2#0|) (< |b2#0| 128)) true)) (and (and (and (<= (LitInt (- 0 128)) |b3#0|) (< |b3#0| 128)) true) (and (and (<= (LitInt 0) |j0#0|) (< |j0#0| 4294967296)) true))) (and (and (and (and (<= (LitInt 0) |j1#0|) (< |j1#0| 4294967296)) true) (and (and (<= (LitInt (- 0 2147483648)) |j2#0|) (< |j2#0| 2147483648)) true)) (and (and (and (<= (LitInt (- 0 2147483648)) |j3#0|) (< |j3#0| 2147483648)) true) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 58) 2))))) anon0_correct))))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
