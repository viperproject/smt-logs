(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 () Int)
(declare-fun $generated@@24 (T@U T@U) Int)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 (T@T T@U) T@U)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 (T@U) Bool)
(declare-fun $generated@@29 (T@T T@U T@U) Bool)
(declare-fun $generated@@30 () T@U)
(declare-fun $generated@@31 (T@U) Bool)
(declare-fun $generated@@32 (T@U) T@U)
(declare-fun $generated@@33 (Int) Int)
(declare-fun $generated@@34 (T@U) Int)
(declare-fun $generated@@41 (T@U) T@U)
(declare-fun $generated@@42 () T@U)
(declare-fun $generated@@47 (T@U) Bool)
(declare-fun $generated@@49 (T@T T@U) T@U)
(declare-fun $generated@@50 (T@T T@U) T@U)
(declare-fun $generated@@53 (Int T@U) T@U)
(declare-fun $generated@@67 (T@U) Int)
(declare-fun $generated@@72 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@73 () T@T)
(declare-fun $generated@@74 () T@T)
(declare-fun $generated@@75 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@76 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@77 () T@T)
(declare-fun $generated@@78 (T@T T@T) T@T)
(declare-fun $generated@@79 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@80 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@81 (T@T) T@T)
(declare-fun $generated@@82 (T@T) T@T)
(declare-fun $generated@@131 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@132 (T@U) Bool)
(declare-fun $generated@@137 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (= ($generated@@22 $generated) $generated@@0))
(assert (= ($generated@@6 $generated@@27) 3))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@35 T@U) ($generated@@36 T@U) ) (!  (=> (or ($generated@@28 ($generated@@26 $generated@@27 $generated@@36)) (and (< 1 $generated@@23) ($generated@@29 $generated@@27 $generated@@36 $generated@@30))) (and (=> (not ($generated@@11 ($generated@@26 $generated@@7 ($generated@@10 ($generated@@31 ($generated@@26 $generated@@27 $generated@@36)))))) (let (($generated@@37 ($generated@@26 $generated@@27 ($generated@@32 ($generated@@26 $generated@@27 $generated@@36)))))
($generated@@28 $generated@@37))) (= ($generated@@24 ($generated@@25 $generated@@35) ($generated@@26 $generated@@27 $generated@@36)) (let (($generated@@38 (ite ($generated@@31 ($generated@@26 $generated@@27 $generated@@36)) 0 (let (($generated@@39 ($generated@@26 $generated@@27 ($generated@@32 ($generated@@26 $generated@@27 $generated@@36)))))
(let (($generated@@40 ($generated@@33 ($generated@@34 ($generated@@26 $generated@@27 $generated@@36)))))
($generated@@33 (+ $generated@@40 ($generated@@24 ($generated@@25 $generated@@35) $generated@@39))))))))
$generated@@38))))
 :weight 3
 :pattern ( ($generated@@24 ($generated@@25 $generated@@35) ($generated@@26 $generated@@27 $generated@@36)))
))))
(assert (= ($generated@@41 $generated@@42) $generated@@3))
(assert ($generated@@29 $generated@@27 $generated@@42 $generated@@30))
(assert (forall (($generated@@43 Int) ) (! (= ($generated@@33 $generated@@43) $generated@@43)
 :pattern ( ($generated@@33 $generated@@43))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@T) ) (! (= ($generated@@26 $generated@@45 $generated@@44) $generated@@44)
 :pattern ( ($generated@@26 $generated@@45 $generated@@44))
)))
(assert (forall (($generated@@46 T@U) ) (! (= ($generated@@31 $generated@@46) (= ($generated@@41 $generated@@46) $generated@@3))
 :pattern ( ($generated@@31 $generated@@46))
)))
(assert (forall (($generated@@48 T@U) ) (! (= ($generated@@47 $generated@@48) (= ($generated@@41 $generated@@48) $generated@@4))
 :pattern ( ($generated@@47 $generated@@48))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@50 $generated@@52 ($generated@@49 $generated@@52 $generated@@51)) $generated@@51)
 :pattern ( ($generated@@49 $generated@@52 $generated@@51))
)))
(assert (forall (($generated@@54 T@U) ) (!  (=> ($generated@@47 $generated@@54) (exists (($generated@@55 Int) ($generated@@56 T@U) ) (= $generated@@54 ($generated@@53 $generated@@55 $generated@@56))))
 :pattern ( ($generated@@47 $generated@@54))
)))
(assert (forall (($generated@@57 T@U) ) (!  (=> ($generated@@31 $generated@@57) (= $generated@@57 $generated@@42))
 :pattern ( ($generated@@31 $generated@@57))
)))
(assert (forall (($generated@@58 T@U) ) (!  (=> ($generated@@29 $generated@@27 $generated@@58 $generated@@30) (or ($generated@@31 $generated@@58) ($generated@@47 $generated@@58)))
 :pattern ( ($generated@@47 $generated@@58) ($generated@@29 $generated@@27 $generated@@58 $generated@@30))
 :pattern ( ($generated@@31 $generated@@58) ($generated@@29 $generated@@27 $generated@@58 $generated@@30))
)))
(assert (forall (($generated@@59 Int) ($generated@@60 T@U) ) (! (= ($generated@@41 ($generated@@53 $generated@@59 $generated@@60)) $generated@@4)
 :pattern ( ($generated@@53 $generated@@59 $generated@@60))
)))
(assert (forall (($generated@@61 Int) ($generated@@62 T@U) ) (! (= ($generated@@34 ($generated@@53 $generated@@61 $generated@@62)) $generated@@61)
 :pattern ( ($generated@@53 $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@63 Int) ($generated@@64 T@U) ) (! (= ($generated@@32 ($generated@@53 $generated@@63 $generated@@64)) $generated@@64)
 :pattern ( ($generated@@53 $generated@@63 $generated@@64))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@T) ) (! (= ($generated@@49 $generated@@66 ($generated@@50 $generated@@66 $generated@@65)) $generated@@65)
 :pattern ( ($generated@@50 $generated@@66 $generated@@65))
)))
(assert (forall (($generated@@68 Int) ($generated@@69 T@U) ) (! (< ($generated@@67 $generated@@69) ($generated@@67 ($generated@@53 $generated@@68 $generated@@69)))
 :pattern ( ($generated@@53 $generated@@68 $generated@@69))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@24 ($generated@@25 $generated@@70) $generated@@71) ($generated@@24 $generated@@70 $generated@@71))
 :pattern ( ($generated@@24 ($generated@@25 $generated@@70) $generated@@71))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@83 T@T) ($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ) (! (= ($generated@@72 $generated@@83 $generated@@84 $generated@@85 ($generated@@79 $generated@@83 $generated@@84 $generated@@85 $generated@@87 $generated@@88 $generated@@89 $generated@@86) $generated@@88 $generated@@89) $generated@@86)
 :weight 0
)) (and (forall (($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@T) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ) (!  (or (= $generated@@95 $generated@@97) (= ($generated@@72 $generated@@90 $generated@@91 $generated@@92 ($generated@@79 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@95 $generated@@96 $generated@@93) $generated@@97 $generated@@98) ($generated@@72 $generated@@90 $generated@@91 $generated@@92 $generated@@94 $generated@@97 $generated@@98)))
 :weight 0
)) (forall (($generated@@99 T@T) ($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (!  (or (= $generated@@105 $generated@@107) (= ($generated@@72 $generated@@99 $generated@@100 $generated@@101 ($generated@@79 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@104 $generated@@105 $generated@@102) $generated@@106 $generated@@107) ($generated@@72 $generated@@99 $generated@@100 $generated@@101 $generated@@103 $generated@@106 $generated@@107)))
 :weight 0
)))) (= ($generated@@6 $generated@@73) 4)) (= ($generated@@6 $generated@@74) 5)) (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (! (= ($generated@@76 $generated@@108 $generated@@109 ($generated@@80 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@110) $generated@@112) $generated@@110)
 :weight 0
))) (forall (($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (!  (or (= $generated@@117 $generated@@118) (= ($generated@@76 $generated@@113 $generated@@114 ($generated@@80 $generated@@113 $generated@@114 $generated@@116 $generated@@117 $generated@@115) $generated@@118) ($generated@@76 $generated@@113 $generated@@114 $generated@@116 $generated@@118)))
 :weight 0
))) (= ($generated@@6 $generated@@77) 6)) (forall (($generated@@119 T@T) ($generated@@120 T@T) ) (= ($generated@@6 ($generated@@78 $generated@@119 $generated@@120)) 7))) (forall (($generated@@121 T@T) ($generated@@122 T@T) ) (! (= ($generated@@81 ($generated@@78 $generated@@121 $generated@@122)) $generated@@121)
 :pattern ( ($generated@@78 $generated@@121 $generated@@122))
))) (forall (($generated@@123 T@T) ($generated@@124 T@T) ) (! (= ($generated@@82 ($generated@@78 $generated@@123 $generated@@124)) $generated@@124)
 :pattern ( ($generated@@78 $generated@@123 $generated@@124))
))))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 Bool) ($generated@@129 T@U) ($generated@@130 T@U) ) (! (= ($generated@@11 ($generated@@72 $generated@@73 $generated@@74 $generated@@7 ($generated@@75 $generated@@125 $generated@@126 $generated@@127 $generated@@128) $generated@@129 $generated@@130))  (=> (and (or (not (= $generated@@129 $generated@@125)) (not true)) ($generated@@11 ($generated@@49 $generated@@7 ($generated@@76 $generated@@74 $generated@@77 ($generated@@76 $generated@@73 ($generated@@78 $generated@@74 $generated@@77) $generated@@126 $generated@@129) $generated@@127)))) $generated@@128))
 :pattern ( ($generated@@72 $generated@@73 $generated@@74 $generated@@7 ($generated@@75 $generated@@125 $generated@@126 $generated@@127 $generated@@128) $generated@@129 $generated@@130))
)))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ) (!  (=> (and ($generated@@132 $generated@@134) (and ($generated@@47 $generated@@133) ($generated@@131 $generated@@27 $generated@@133 $generated@@30 $generated@@134))) ($generated@@131 $generated@@8 ($generated@@12 ($generated@@34 $generated@@133)) $generated $generated@@134))
 :pattern ( ($generated@@131 $generated@@8 ($generated@@12 ($generated@@34 $generated@@133)) $generated $generated@@134))
)))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@U) ) (!  (=> (and ($generated@@132 $generated@@136) ($generated@@29 $generated@@27 $generated@@135 $generated@@30)) ($generated@@131 $generated@@27 $generated@@135 $generated@@30 $generated@@136))
 :pattern ( ($generated@@131 $generated@@27 $generated@@135 $generated@@30 $generated@@136))
)))
(assert (= ($generated@@22 $generated@@30) $generated@@2))
(assert (= ($generated@@137 $generated@@30) $generated@@5))
(assert (= $generated@@42 ($generated@@26 $generated@@27 $generated@@42)))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ) (!  (=> (and ($generated@@132 $generated@@139) (and ($generated@@47 $generated@@138) ($generated@@131 $generated@@27 $generated@@138 $generated@@30 $generated@@139))) ($generated@@131 $generated@@27 ($generated@@32 $generated@@138) $generated@@30 $generated@@139))
 :pattern ( ($generated@@131 $generated@@27 ($generated@@32 $generated@@138) $generated@@30 $generated@@139))
)))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@140 T@U) ($generated@@141 T@U) ) (!  (=> (or ($generated@@28 $generated@@141) (and (< 1 $generated@@23) ($generated@@29 $generated@@27 $generated@@141 $generated@@30))) (and (=> (not ($generated@@31 $generated@@141)) (let (($generated@@142 ($generated@@32 $generated@@141)))
($generated@@28 $generated@@142))) (= ($generated@@24 ($generated@@25 $generated@@140) $generated@@141) (let (($generated@@143 (ite ($generated@@31 $generated@@141) 0 (let (($generated@@144 ($generated@@32 $generated@@141)))
(let (($generated@@145 ($generated@@34 $generated@@141)))
(+ $generated@@145 ($generated@@24 $generated@@140 $generated@@144)))))))
$generated@@143))))
 :pattern ( ($generated@@24 ($generated@@25 $generated@@140) $generated@@141))
))))
(assert (forall (($generated@@146 Int) ($generated@@147 T@U) ) (! (= ($generated@@53 ($generated@@33 $generated@@146) ($generated@@26 $generated@@27 $generated@@147)) ($generated@@26 $generated@@27 ($generated@@53 $generated@@146 $generated@@147)))
 :pattern ( ($generated@@53 ($generated@@33 $generated@@146) ($generated@@26 $generated@@27 $generated@@147)))
)))
(assert (forall (($generated@@148 Int) ) (! (= ($generated@@50 $generated@@8 ($generated@@12 ($generated@@33 $generated@@148))) ($generated@@26 $generated@@77 ($generated@@50 $generated@@8 ($generated@@12 $generated@@148))))
 :pattern ( ($generated@@50 $generated@@8 ($generated@@12 ($generated@@33 $generated@@148))))
)))
(assert (forall (($generated@@149 T@U) ($generated@@150 T@T) ) (! (= ($generated@@50 $generated@@150 ($generated@@26 $generated@@150 $generated@@149)) ($generated@@26 $generated@@77 ($generated@@50 $generated@@150 $generated@@149)))
 :pattern ( ($generated@@50 $generated@@150 ($generated@@26 $generated@@150 $generated@@149)))
)))
(assert (forall (($generated@@151 Int) ($generated@@152 T@U) ) (! (= ($generated@@29 $generated@@27 ($generated@@53 $generated@@151 $generated@@152) $generated@@30)  (and ($generated@@29 $generated@@8 ($generated@@12 $generated@@151) $generated) ($generated@@29 $generated@@27 $generated@@152 $generated@@30)))
 :pattern ( ($generated@@29 $generated@@27 ($generated@@53 $generated@@151 $generated@@152) $generated@@30))
)))
(assert (forall (($generated@@153 T@U) ($generated@@154 T@U) ) (! ($generated@@131 $generated@@8 $generated@@154 $generated $generated@@153)
 :pattern ( ($generated@@131 $generated@@8 $generated@@154 $generated $generated@@153))
)))
(assert (forall (($generated@@155 T@U) ) (! ($generated@@29 $generated@@8 $generated@@155 $generated)
 :pattern ( ($generated@@29 $generated@@8 $generated@@155 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@156 () T@U)
(declare-fun $generated@@157 () Int)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () Int)
(declare-fun $generated@@162 () Int)
(declare-fun $generated@@163 () T@U)
(declare-fun $generated@@164 () Int)
(declare-fun $generated@@165 () T@U)
(declare-fun $generated@@166 () T@U)
(declare-fun $generated@@167 () T@U)
(declare-fun $generated@@168 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 9) (let (($generated@@169 true))
(let (($generated@@170  (=> (= $generated@@156 ($generated@@53 $generated@@157 $generated@@158)) (=> (and (and (and ($generated@@29 $generated@@27 $generated@@158 $generated@@30) (= $generated@@159 $generated@@158)) (and ($generated@@29 $generated@@27 $generated@@159 $generated@@30) (= $generated@@160 $generated@@159))) (and (and (= $generated@@161 $generated@@157) ($generated@@29 $generated@@8 ($generated@@12 $generated@@161) $generated)) (and (= $generated@@162 $generated@@161) ($generated@@131 $generated@@27 $generated@@160 $generated@@30 $generated@@163)))) (and (=> (= (ControlFlow 0 5) (- 0 6)) (< ($generated@@67 $generated@@160) ($generated@@67 $generated@@156))) (=> (< ($generated@@67 $generated@@160) ($generated@@67 $generated@@156)) (=> ($generated@@28 $generated@@160) (=> (and (and (= $generated@@164 (+ $generated@@162 ($generated@@24 ($generated@@25 $generated@@165) $generated@@160))) ($generated@@28 $generated@@160)) (and ($generated@@29 $generated@@8 ($generated@@12 $generated@@164) $generated) (= (ControlFlow 0 5) 3))) $generated@@169))))))))
(let (($generated@@171  (=> (and (and (= $generated@@156 $generated@@42) (= $generated@@164 ($generated@@33 0))) (and ($generated@@29 $generated@@8 ($generated@@12 $generated@@164) $generated) (= (ControlFlow 0 4) 3))) $generated@@169)))
(let (($generated@@172 true))
(let (($generated@@173  (=> (or (not (= $generated@@156 $generated@@42)) (not true)) (and (=> (= (ControlFlow 0 7) 5) $generated@@170) (=> (= (ControlFlow 0 7) 2) $generated@@172)))))
(let (($generated@@174 true))
(let (($generated@@175  (=> (= $generated@@166 ($generated@@75 $generated@@167 $generated@@163 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 8) 1) $generated@@174) (=> (= (ControlFlow 0 8) 4) $generated@@171)) (=> (= (ControlFlow 0 8) 7) $generated@@173)))))
(let (($generated@@176  (=> (and (and (and ($generated@@132 $generated@@163) ($generated@@168 $generated@@163)) ($generated@@29 $generated@@27 $generated@@156 $generated@@30)) (and (= 1 $generated@@23) (= (ControlFlow 0 9) 8))) $generated@@175)))
$generated@@176)))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
