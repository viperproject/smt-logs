(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (Int) Int)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@U T@U T@U) Bool)
(declare-fun $generated@@32 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@37 (Int Int) Int)
(declare-fun $generated@@40 (T@U T@U) Bool)
(declare-fun $generated@@41 () T@T)
(declare-fun $generated@@42 (T@T T@U T@U) Bool)
(declare-fun $generated@@48 () T@T)
(declare-fun $generated@@49 (T@U) T@U)
(declare-fun $generated@@50 (T@U Int) T@U)
(declare-fun $generated@@55 (T@U) T@U)
(declare-fun $generated@@60 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@61 () T@T)
(declare-fun $generated@@62 () T@T)
(declare-fun $generated@@63 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@64 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@65 () T@T)
(declare-fun $generated@@66 (T@T T@T) T@T)
(declare-fun $generated@@67 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@68 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@69 (T@T) T@T)
(declare-fun $generated@@70 (T@T) T@T)
(declare-fun $generated@@119 (Int Int) Int)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@20 $generated@@21) 0))
(assert (forall (($generated@@23 Int) ) (! (= ($generated@@22 $generated@@23) $generated@@23)
 :pattern ( ($generated@@22 $generated@@23))
)))
(assert (forall (($generated@@25 T@U) ($generated@@26 T@T) ) (! (= ($generated@@24 $generated@@26 $generated@@25) $generated@@25)
 :pattern ( ($generated@@24 $generated@@26 $generated@@25))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@T) ) (! (= ($generated@@28 $generated@@30 ($generated@@27 $generated@@30 $generated@@29)) $generated@@29)
 :pattern ( ($generated@@27 $generated@@30 $generated@@29))
)))
(assert (forall (($generated@@33 T@U) ($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@T) ) (! (= ($generated@@31 ($generated@@28 $generated@@36 $generated@@33) $generated@@34 $generated@@35) ($generated@@32 $generated@@36 $generated@@33 $generated@@34 $generated@@35))
 :pattern ( ($generated@@31 ($generated@@28 $generated@@36 $generated@@33) $generated@@34 $generated@@35))
)))
(assert (forall (($generated@@38 Int) ($generated@@39 Int) ) (! (= ($generated@@37 $generated@@38 $generated@@39) (div $generated@@38 $generated@@39))
 :pattern ( ($generated@@37 $generated@@38 $generated@@39))
)))
(assert (= ($generated@@3 $generated@@41) 3))
(assert (forall (($generated@@43 T@U) ) (!  (=> ($generated@@40 $generated@@43 $generated) (and (= ($generated@@28 $generated@@41 ($generated@@27 $generated@@41 $generated@@43)) $generated@@43) ($generated@@42 $generated@@41 ($generated@@27 $generated@@41 $generated@@43) $generated)))
 :pattern ( ($generated@@40 $generated@@43 $generated))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@T) ) (! (= ($generated@@40 ($generated@@28 $generated@@46 $generated@@44) $generated@@45) ($generated@@42 $generated@@46 $generated@@44 $generated@@45))
 :pattern ( ($generated@@40 ($generated@@28 $generated@@46 $generated@@44) $generated@@45))
)))
(assert (forall (($generated@@47 T@U) ) (! (<= 0 ($generated@@20 $generated@@47))
 :pattern ( ($generated@@20 $generated@@47))
)))
(assert (= ($generated@@3 $generated@@48) 4))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ) (! (= ($generated@@32 $generated@@48 $generated@@51 ($generated@@49 $generated@@52) $generated@@53) (forall (($generated@@54 Int) ) (!  (=> (and (<= 0 $generated@@54) (< $generated@@54 ($generated@@20 $generated@@51))) ($generated@@31 ($generated@@50 $generated@@51 $generated@@54) $generated@@52 $generated@@53))
 :pattern ( ($generated@@50 $generated@@51 $generated@@54))
)))
 :pattern ( ($generated@@32 $generated@@48 $generated@@51 ($generated@@49 $generated@@52) $generated@@53))
)))
(assert (forall (($generated@@56 T@U) ) (! (= ($generated@@55 ($generated@@49 $generated@@56)) $generated@@56)
 :pattern ( ($generated@@49 $generated@@56))
)))
(assert (forall (($generated@@57 T@U) ) (! (= ($generated@@19 ($generated@@49 $generated@@57)) $generated@@1)
 :pattern ( ($generated@@49 $generated@@57))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@27 $generated@@59 ($generated@@28 $generated@@59 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@28 $generated@@59 $generated@@58))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@T) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@60 $generated@@71 $generated@@72 $generated@@73 ($generated@@67 $generated@@71 $generated@@72 $generated@@73 $generated@@75 $generated@@76 $generated@@77 $generated@@74) $generated@@76 $generated@@77) $generated@@74)
 :weight 0
)) (and (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or (= $generated@@83 $generated@@85) (= ($generated@@60 $generated@@78 $generated@@79 $generated@@80 ($generated@@67 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@84 $generated@@81) $generated@@85 $generated@@86) ($generated@@60 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@85 $generated@@86)))
 :weight 0
)) (forall (($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ) (!  (or (= $generated@@93 $generated@@95) (= ($generated@@60 $generated@@87 $generated@@88 $generated@@89 ($generated@@67 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@92 $generated@@93 $generated@@90) $generated@@94 $generated@@95) ($generated@@60 $generated@@87 $generated@@88 $generated@@89 $generated@@91 $generated@@94 $generated@@95)))
 :weight 0
)))) (= ($generated@@3 $generated@@61) 5)) (= ($generated@@3 $generated@@62) 6)) (forall (($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ) (! (= ($generated@@64 $generated@@96 $generated@@97 ($generated@@68 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@98) $generated@@100) $generated@@98)
 :weight 0
))) (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (!  (or (= $generated@@105 $generated@@106) (= ($generated@@64 $generated@@101 $generated@@102 ($generated@@68 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@103) $generated@@106) ($generated@@64 $generated@@101 $generated@@102 $generated@@104 $generated@@106)))
 :weight 0
))) (= ($generated@@3 $generated@@65) 7)) (forall (($generated@@107 T@T) ($generated@@108 T@T) ) (= ($generated@@3 ($generated@@66 $generated@@107 $generated@@108)) 8))) (forall (($generated@@109 T@T) ($generated@@110 T@T) ) (! (= ($generated@@69 ($generated@@66 $generated@@109 $generated@@110)) $generated@@109)
 :pattern ( ($generated@@66 $generated@@109 $generated@@110))
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ) (! (= ($generated@@70 ($generated@@66 $generated@@111 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@66 $generated@@111 $generated@@112))
))))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 Bool) ($generated@@117 T@U) ($generated@@118 T@U) ) (! (= ($generated@@8 ($generated@@60 $generated@@61 $generated@@62 $generated@@4 ($generated@@63 $generated@@113 $generated@@114 $generated@@115 $generated@@116) $generated@@117 $generated@@118))  (=> (and (or (not (= $generated@@117 $generated@@113)) (not true)) ($generated@@8 ($generated@@27 $generated@@4 ($generated@@64 $generated@@62 $generated@@65 ($generated@@64 $generated@@61 ($generated@@66 $generated@@62 $generated@@65) $generated@@114 $generated@@117) $generated@@115)))) $generated@@116))
 :pattern ( ($generated@@60 $generated@@61 $generated@@62 $generated@@4 ($generated@@63 $generated@@113 $generated@@114 $generated@@115 $generated@@116) $generated@@117 $generated@@118))
)))
(assert (forall (($generated@@120 Int) ($generated@@121 Int) ) (! (= ($generated@@119 $generated@@120 $generated@@121) (mod $generated@@120 $generated@@121))
 :pattern ( ($generated@@119 $generated@@120 $generated@@121))
)))
(assert (forall (($generated@@122 T@U) ($generated@@123 T@U) ) (!  (=> ($generated@@40 $generated@@122 ($generated@@49 $generated@@123)) (and (= ($generated@@28 $generated@@48 ($generated@@27 $generated@@48 $generated@@122)) $generated@@122) ($generated@@42 $generated@@48 ($generated@@27 $generated@@48 $generated@@122) ($generated@@49 $generated@@123))))
 :pattern ( ($generated@@40 $generated@@122 ($generated@@49 $generated@@123)))
)))
(assert (forall (($generated@@124 Int) ) (! (= ($generated@@28 $generated@@5 ($generated@@9 ($generated@@22 $generated@@124))) ($generated@@24 $generated@@65 ($generated@@28 $generated@@5 ($generated@@9 $generated@@124))))
 :pattern ( ($generated@@28 $generated@@5 ($generated@@9 ($generated@@22 $generated@@124))))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@T) ) (! (= ($generated@@28 $generated@@126 ($generated@@24 $generated@@126 $generated@@125)) ($generated@@24 $generated@@65 ($generated@@28 $generated@@126 $generated@@125)))
 :pattern ( ($generated@@28 $generated@@126 ($generated@@24 $generated@@126 $generated@@125)))
)))
(assert (forall (($generated@@127 T@U) ) (!  (=> (= ($generated@@20 $generated@@127) 0) (= $generated@@127 $generated@@21))
 :pattern ( ($generated@@20 $generated@@127))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (! ($generated@@32 $generated@@41 $generated@@129 $generated $generated@@128)
 :pattern ( ($generated@@32 $generated@@41 $generated@@129 $generated $generated@@128))
)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ) (! (= ($generated@@42 $generated@@48 $generated@@130 ($generated@@49 $generated@@131)) (forall (($generated@@132 Int) ) (!  (=> (and (<= 0 $generated@@132) (< $generated@@132 ($generated@@20 $generated@@130))) ($generated@@40 ($generated@@50 $generated@@130 $generated@@132) $generated@@131))
 :pattern ( ($generated@@50 $generated@@130 $generated@@132))
)))
 :pattern ( ($generated@@42 $generated@@48 $generated@@130 ($generated@@49 $generated@@131)))
)))
(assert (forall (($generated@@133 T@U) ) (! ($generated@@42 $generated@@41 $generated@@133 $generated)
 :pattern ( ($generated@@42 $generated@@41 $generated@@133 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@134 () T@U)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () Int)
(declare-fun $generated@@138 () Int)
(declare-fun $generated@@139 () Int)
(declare-fun $generated@@140 () Int)
(declare-fun $generated@@141 (T@U) Bool)
(declare-fun $generated@@142 (T@U) Bool)
(declare-fun $generated@@143 () T@U)
(declare-fun $generated@@144 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@145  (=> (= $generated@@134 ($generated@@63 $generated@@135 $generated@@136 $generated@@2 false)) (and (=> (= (ControlFlow 0 2) (- 0 5)) (or (not (= $generated@@137 0)) (not true))) (=> (= $generated@@138 ($generated@@37 $generated@@139 $generated@@137)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (and (<= ($generated@@22 (- 0 9223372036854775808)) $generated@@138) (< $generated@@138 9223372036854775808))) (=> (and (<= ($generated@@22 (- 0 9223372036854775808)) $generated@@138) (< $generated@@138 9223372036854775808)) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (not (= $generated@@137 0)) (not true))) (=> (and (= $generated@@140 ($generated@@119 $generated@@139 $generated@@137)) (= (ControlFlow 0 2) (- 0 1))) (and (<= ($generated@@22 (- 0 9223372036854775808)) $generated@@140) (< $generated@@140 9223372036854775808)))))))))))
(let (($generated@@146  (=> (and (and ($generated@@141 $generated@@136) ($generated@@142 $generated@@136)) (and (<= ($generated@@22 (- 0 9223372036854775808)) $generated@@139) (< $generated@@139 9223372036854775808))) (=> (and (and (and (<= ($generated@@22 (- 0 9223372036854775808)) $generated@@137) (< $generated@@137 9223372036854775808)) (and ($generated@@42 $generated@@48 $generated@@143 ($generated@@49 $generated)) ($generated@@32 $generated@@48 $generated@@143 ($generated@@49 $generated) $generated@@136))) (and (and (= 1 $generated@@144) (or (not (= $generated@@137 0)) (not true))) (and (<= ($generated@@22 (- 0 9223372036854775807)) $generated@@139) (= (ControlFlow 0 6) 2)))) $generated@@145))))
$generated@@146)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
