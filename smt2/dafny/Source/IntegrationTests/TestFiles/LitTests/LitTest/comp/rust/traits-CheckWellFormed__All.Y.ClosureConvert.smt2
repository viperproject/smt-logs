(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass.TraitDefinitions.SubTrait () T@U)
(declare-fun Tagclass.All.Y () T@U)
(declare-fun Tagclass.TraitDefinitions.SuperTrait () T@U)
(declare-fun Tagclass.All.Y? () T@U)
(declare-fun Tagclass.TraitDefinitions.NoMemberTrait () T@U)
(declare-fun Tagclass.TraitDefinitions.NoMemberTrait2 () T@U)
(declare-fun Tagclass.TraitDefinitions.NoMemberTrait? () T@U)
(declare-fun Tagclass.TraitDefinitions.NoMemberTrait2? () T@U)
(declare-fun Tagclass.TraitDefinitions.SuperTrait? () T@U)
(declare-fun Tagclass.TraitDefinitions.SubTrait? () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun tytagFamily$SubTrait () T@U)
(declare-fun tytagFamily$Y () T@U)
(declare-fun tytagFamily$SuperTrait () T@U)
(declare-fun tytagFamily$NoMemberTrait () T@U)
(declare-fun tytagFamily$NoMemberTrait2 () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun implements$TraitDefinitions.SubTrait (T@U T@U T@U) Bool)
(declare-fun Tclass.All.Y? (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass.All.Y (T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun HandleTypeType () T@T)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Tclass.TraitDefinitions.SuperTrait? () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Tclass.TraitDefinitions.NoMemberTrait? () T@U)
(declare-fun Tclass.TraitDefinitions.NoMemberTrait2? () T@U)
(declare-fun Tclass.TraitDefinitions.NoMemberTrait () T@U)
(declare-fun Tclass.TraitDefinitions.NoMemberTrait2 () T@U)
(declare-fun Tclass.TraitDefinitions.SuperTrait () T@U)
(declare-fun Tclass.TraitDefinitions.SubTrait? (T@U T@U) T@U)
(declare-fun null () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun $OneHeap () T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Tclass.TraitDefinitions.SubTrait (T@U T@U) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Tclass.TraitDefinitions.SubTrait_0 (T@U) T@U)
(declare-fun Tclass.TraitDefinitions.SubTrait_1 (T@U) T@U)
(declare-fun Tclass.TraitDefinitions.SubTrait?_0 (T@U) T@U)
(declare-fun Tclass.TraitDefinitions.SubTrait?_1 (T@U) T@U)
(declare-fun Tclass.All.Y_0 (T@U) T@U)
(declare-fun Tclass.All.Y?_0 (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun implements$TraitDefinitions.NoMemberTrait (T@U) Bool)
(declare-fun implements$TraitDefinitions.NoMemberTrait2 (T@U) Bool)
(declare-fun implements$TraitDefinitions.SuperTrait (T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc Tagclass._System.___hFunc1 Tagclass.TraitDefinitions.SubTrait Tagclass.All.Y Tagclass.TraitDefinitions.SuperTrait Tagclass.All.Y? Tagclass.TraitDefinitions.NoMemberTrait Tagclass.TraitDefinitions.NoMemberTrait2 Tagclass.TraitDefinitions.NoMemberTrait? Tagclass.TraitDefinitions.NoMemberTrait2? Tagclass.TraitDefinitions.SuperTrait? Tagclass.TraitDefinitions.SubTrait? |tytagFamily$_#Func1| tytagFamily$SubTrait tytagFamily$Y tytagFamily$SuperTrait tytagFamily$NoMemberTrait tytagFamily$NoMemberTrait2)
)
(assert (forall ((All.Y$I T@U) ) (implements$TraitDefinitions.SubTrait (Tclass.All.Y? All.Y$I) TInt All.Y$I)))
(assert (= (Tag TInt) TagInt))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@1 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o))
)))
(assert (= (Ctor refType) 3))
(assert (forall ((All.Y$I@@0 T@U) (|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass.All.Y All.Y$I@@0) $h) ($IsAlloc refType |c#0| (Tclass.All.Y? All.Y$I@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass.All.Y All.Y$I@@0) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass.All.Y? All.Y$I@@0) $h))
)))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (= (Ctor HandleTypeType) 4))
(assert (forall ((f T@U) (t0 T@U) (t1 T@U) (u0 T@U) (u1 T@U) ) (!  (=> (and (and ($Is HandleTypeType f (Tclass._System.___hFunc1 t0 t1)) (forall ((bx T@U) ) (!  (=> ($IsBox bx u0) ($IsBox bx t0))
 :pattern ( ($IsBox bx u0))
 :pattern ( ($IsBox bx t0))
))) (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 t1) ($IsBox bx@@0 u1))
 :pattern ( ($IsBox bx@@0 t1))
 :pattern ( ($IsBox bx@@0 u1))
))) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0 u1)))
 :pattern ( ($Is HandleTypeType f (Tclass._System.___hFunc1 t0 t1)) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0 u1)))
)))
(assert (forall ((bx@@1 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsAllocBox bx@@1 Tclass.TraitDefinitions.SuperTrait? $h@@0) ($IsGoodHeap $h@@0)) ($IsAllocBox bx@@1 Tclass.TraitDefinitions.NoMemberTrait? $h@@0))
 :pattern ( ($IsAllocBox bx@@1 Tclass.TraitDefinitions.SuperTrait? $h@@0))
)))
(assert (forall ((bx@@2 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsAllocBox bx@@2 Tclass.TraitDefinitions.SuperTrait? $h@@1) ($IsGoodHeap $h@@1)) ($IsAllocBox bx@@2 Tclass.TraitDefinitions.NoMemberTrait2? $h@@1))
 :pattern ( ($IsAllocBox bx@@2 Tclass.TraitDefinitions.SuperTrait? $h@@1))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass.TraitDefinitions.NoMemberTrait $h@@2) ($IsAlloc refType |c#0@@0| Tclass.TraitDefinitions.NoMemberTrait? $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass.TraitDefinitions.NoMemberTrait $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass.TraitDefinitions.NoMemberTrait? $h@@2))
)))
(assert (forall ((|c#0@@1| T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType |c#0@@1| Tclass.TraitDefinitions.NoMemberTrait2 $h@@3) ($IsAlloc refType |c#0@@1| Tclass.TraitDefinitions.NoMemberTrait2? $h@@3))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass.TraitDefinitions.NoMemberTrait2 $h@@3))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass.TraitDefinitions.NoMemberTrait2? $h@@3))
)))
(assert (forall ((|c#0@@2| T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType |c#0@@2| Tclass.TraitDefinitions.SuperTrait $h@@4) ($IsAlloc refType |c#0@@2| Tclass.TraitDefinitions.SuperTrait? $h@@4))
 :pattern ( ($IsAlloc refType |c#0@@2| Tclass.TraitDefinitions.SuperTrait $h@@4))
 :pattern ( ($IsAlloc refType |c#0@@2| Tclass.TraitDefinitions.SuperTrait? $h@@4))
)))
(assert (forall ((All.Y$I@@1 T@U) ($o T@U) ) (!  (=> ($Is refType $o (Tclass.All.Y? All.Y$I@@1)) ($Is refType $o (Tclass.TraitDefinitions.SubTrait? TInt All.Y$I@@1)))
 :pattern ( ($Is refType $o (Tclass.All.Y? All.Y$I@@1)))
)))
(assert (forall ((All.Y$I@@2 T@U) (bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 (Tclass.All.Y? All.Y$I@@2)) ($IsBox bx@@3 (Tclass.TraitDefinitions.SubTrait? TInt All.Y$I@@2)))
 :pattern ( ($IsBox bx@@3 (Tclass.All.Y? All.Y$I@@2)))
)))
(assert  (and (and (and (and (and (and (forall ((t0@@0 T@T) (t1@@0 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0@@0 t1@@0 (MapType0Store t0@@0 t1@@0 m x0 val) x0) val)
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0@@0 u1@@0 (MapType0Store u0@@0 u1@@0 m@@0 x0@@0 val@@0) y0) (MapType0Select u0@@0 u1@@0 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((All.Y$I@@3 T@U) ($o@@0 T@U) ($h@@5 T@U) ) (! (= ($IsAlloc refType $o@@0 (Tclass.All.Y? All.Y$I@@3) $h@@5)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 (Tclass.All.Y? All.Y$I@@3) $h@@5))
)))
(assert (forall (($o@@1 T@U) ($h@@6 T@U) ) (! (= ($IsAlloc refType $o@@1 Tclass.TraitDefinitions.NoMemberTrait? $h@@6)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 Tclass.TraitDefinitions.NoMemberTrait? $h@@6))
)))
(assert (forall (($o@@2 T@U) ($h@@7 T@U) ) (! (= ($IsAlloc refType $o@@2 Tclass.TraitDefinitions.NoMemberTrait2? $h@@7)  (or (= $o@@2 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@2) alloc)))))
 :pattern ( ($IsAlloc refType $o@@2 Tclass.TraitDefinitions.NoMemberTrait2? $h@@7))
)))
(assert (forall (($o@@3 T@U) ($h@@8 T@U) ) (! (= ($IsAlloc refType $o@@3 Tclass.TraitDefinitions.SuperTrait? $h@@8)  (or (= $o@@3 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@3) alloc)))))
 :pattern ( ($IsAlloc refType $o@@3 Tclass.TraitDefinitions.SuperTrait? $h@@8))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o@@1 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o@@1) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@1) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@1) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@5 T@U) (T T@T) ) (! (= (Lit T x@@5) x@@5)
 :pattern ( (Lit T x@@5))
)))
(assert (forall ((t0@@1 T@U) (t1@@1 T@U) (heap T@U) (f@@0 T@U) (bx0 T@U) ) (!  (=> (and ($IsGoodHeap heap) (and ($IsBox bx0 t0@@1) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 t0@@1 t1@@1)))) (= (|Set#Equal| (Reads1 t0@@1 t1@@1 $OneHeap f@@0 bx0) |Set#Empty|) (|Set#Equal| (Reads1 t0@@1 t1@@1 heap f@@0 bx0) |Set#Empty|)))
 :pattern ( (Reads1 t0@@1 t1@@1 $OneHeap f@@0 bx0) ($IsGoodHeap heap))
 :pattern ( (Reads1 t0@@1 t1@@1 heap f@@0 bx0))
)))
(assert (forall ((x@@6 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@6)) x@@6)
 :pattern ( ($Unbox T@@0 x@@6))
)))
(assert (forall ((t0@@2 T@U) (t1@@2 T@U) (h0 T@U) (h1 T@U) (f@@1 T@U) (bx0@@0 T@U) ) (!  (=> (and (and (and ($HeapSucc h0 h1) (and ($IsGoodHeap h0) ($IsGoodHeap h1))) (and ($IsBox bx0@@0 t0@@2) ($Is HandleTypeType f@@1 (Tclass._System.___hFunc1 t0@@2 t1@@2)))) (forall ((o@@2 T@U) (fld T@U) )  (=> (and (or (not (= o@@2 null)) (not true)) (|Set#IsMember| (Reads1 t0@@2 t1@@2 h0 f@@1 bx0@@0) ($Box refType o@@2))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0 o@@2) fld) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1 o@@2) fld))))) (= (Requires1 t0@@2 t1@@2 h0 f@@1 bx0@@0) (Requires1 t0@@2 t1@@2 h1 f@@1 bx0@@0)))
 :pattern ( ($HeapSucc h0 h1) (Requires1 t0@@2 t1@@2 h1 f@@1 bx0@@0))
)))
(assert (forall ((t0@@3 T@U) (t1@@3 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@2 T@U) (bx0@@1 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) (and ($IsBox bx0@@1 t0@@3) ($Is HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@3 t1@@3)))) (forall ((o@@3 T@U) (fld@@0 T@U) )  (=> (and (or (not (= o@@3 null)) (not true)) (|Set#IsMember| (Reads1 t0@@3 t1@@3 h1@@0 f@@2 bx0@@1) ($Box refType o@@3))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@0 o@@3) fld@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@0 o@@3) fld@@0))))) (= (Requires1 t0@@3 t1@@3 h0@@0 f@@2 bx0@@1) (Requires1 t0@@3 t1@@3 h1@@0 f@@2 bx0@@1)))
 :pattern ( ($HeapSucc h0@@0 h1@@0) (Requires1 t0@@3 t1@@3 h1@@0 f@@2 bx0@@1))
)))
(assert (forall ((TraitDefinitions.SubTrait$T T@U) (TraitDefinitions.SubTrait$I T@U) (|c#0@@3| T@U) ) (! (= ($Is refType |c#0@@3| (Tclass.TraitDefinitions.SubTrait TraitDefinitions.SubTrait$T TraitDefinitions.SubTrait$I))  (and ($Is refType |c#0@@3| (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T TraitDefinitions.SubTrait$I)) (or (not (= |c#0@@3| null)) (not true))))
 :pattern ( ($Is refType |c#0@@3| (Tclass.TraitDefinitions.SubTrait TraitDefinitions.SubTrait$T TraitDefinitions.SubTrait$I)))
 :pattern ( ($Is refType |c#0@@3| (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T TraitDefinitions.SubTrait$I)))
)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((All.Y$I@@4 T@U) (|c#0@@4| T@U) ) (! (= ($Is refType |c#0@@4| (Tclass.All.Y All.Y$I@@4))  (and ($Is refType |c#0@@4| (Tclass.All.Y? All.Y$I@@4)) (or (not (= |c#0@@4| null)) (not true))))
 :pattern ( ($Is refType |c#0@@4| (Tclass.All.Y All.Y$I@@4)))
 :pattern ( ($Is refType |c#0@@4| (Tclass.All.Y? All.Y$I@@4)))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@4 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@4 t@@0 h@@1) ($IsAllocBox bx@@4 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@4 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert (forall ((t0@@4 T@U) (t1@@4 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@3 T@U) (bx0@@2 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) (and ($IsBox bx0@@2 t0@@4) ($Is HandleTypeType f@@3 (Tclass._System.___hFunc1 t0@@4 t1@@4)))) (forall ((o@@4 T@U) (fld@@1 T@U) )  (=> (and (or (not (= o@@4 null)) (not true)) (|Set#IsMember| (Reads1 t0@@4 t1@@4 h0@@1 f@@3 bx0@@2) ($Box refType o@@4))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@1 o@@4) fld@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@1 o@@4) fld@@1))))) (= (Reads1 t0@@4 t1@@4 h0@@1 f@@3 bx0@@2) (Reads1 t0@@4 t1@@4 h1@@1 f@@3 bx0@@2)))
 :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads1 t0@@4 t1@@4 h1@@1 f@@3 bx0@@2))
)))
(assert (forall ((t0@@5 T@U) (t1@@5 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@4 T@U) (bx0@@3 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) (and ($IsBox bx0@@3 t0@@5) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc1 t0@@5 t1@@5)))) (forall ((o@@5 T@U) (fld@@2 T@U) )  (=> (and (or (not (= o@@5 null)) (not true)) (|Set#IsMember| (Reads1 t0@@5 t1@@5 h1@@2 f@@4 bx0@@3) ($Box refType o@@5))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@2 o@@5) fld@@2) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@2 o@@5) fld@@2))))) (= (Reads1 t0@@5 t1@@5 h0@@2 f@@4 bx0@@3) (Reads1 t0@@5 t1@@5 h1@@2 f@@4 bx0@@3)))
 :pattern ( ($HeapSucc h0@@2 h1@@2) (Reads1 t0@@5 t1@@5 h1@@2 f@@4 bx0@@3))
)))
(assert (forall ((t0@@6 T@U) (t1@@6 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@5 T@U) (bx0@@4 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) (and ($IsBox bx0@@4 t0@@6) ($Is HandleTypeType f@@5 (Tclass._System.___hFunc1 t0@@6 t1@@6)))) (forall ((o@@6 T@U) (fld@@3 T@U) )  (=> (and (or (not (= o@@6 null)) (not true)) (|Set#IsMember| (Reads1 t0@@6 t1@@6 h0@@3 f@@5 bx0@@4) ($Box refType o@@6))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@3 o@@6) fld@@3) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@3 o@@6) fld@@3))))) (= (Apply1 t0@@6 t1@@6 h0@@3 f@@5 bx0@@4) (Apply1 t0@@6 t1@@6 h1@@3 f@@5 bx0@@4)))
 :pattern ( ($HeapSucc h0@@3 h1@@3) (Apply1 t0@@6 t1@@6 h1@@3 f@@5 bx0@@4))
)))
(assert (forall ((t0@@7 T@U) (t1@@7 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@6 T@U) (bx0@@5 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) (and ($IsBox bx0@@5 t0@@7) ($Is HandleTypeType f@@6 (Tclass._System.___hFunc1 t0@@7 t1@@7)))) (forall ((o@@7 T@U) (fld@@4 T@U) )  (=> (and (or (not (= o@@7 null)) (not true)) (|Set#IsMember| (Reads1 t0@@7 t1@@7 h1@@4 f@@6 bx0@@5) ($Box refType o@@7))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@4 o@@7) fld@@4) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@4 o@@7) fld@@4))))) (= (Apply1 t0@@7 t1@@7 h0@@4 f@@6 bx0@@5) (Apply1 t0@@7 t1@@7 h1@@4 f@@6 bx0@@5)))
 :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply1 t0@@7 t1@@7 h1@@4 f@@6 bx0@@5))
)))
(assert (forall ((All.Y$I@@5 T@U) ) (!  (and (= (Tag (Tclass.All.Y All.Y$I@@5)) Tagclass.All.Y) (= (TagFamily (Tclass.All.Y All.Y$I@@5)) tytagFamily$Y))
 :pattern ( (Tclass.All.Y All.Y$I@@5))
)))
(assert (forall ((All.Y$I@@6 T@U) ) (!  (and (= (Tag (Tclass.All.Y? All.Y$I@@6)) Tagclass.All.Y?) (= (TagFamily (Tclass.All.Y? All.Y$I@@6)) tytagFamily$Y))
 :pattern ( (Tclass.All.Y? All.Y$I@@6))
)))
(assert (forall ((TraitDefinitions.SubTrait$T@@0 T@U) (TraitDefinitions.SubTrait$I@@0 T@U) (|c#0@@5| T@U) ($h@@9 T@U) ) (! (= ($IsAlloc refType |c#0@@5| (Tclass.TraitDefinitions.SubTrait TraitDefinitions.SubTrait$T@@0 TraitDefinitions.SubTrait$I@@0) $h@@9) ($IsAlloc refType |c#0@@5| (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T@@0 TraitDefinitions.SubTrait$I@@0) $h@@9))
 :pattern ( ($IsAlloc refType |c#0@@5| (Tclass.TraitDefinitions.SubTrait TraitDefinitions.SubTrait$T@@0 TraitDefinitions.SubTrait$I@@0) $h@@9))
 :pattern ( ($IsAlloc refType |c#0@@5| (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T@@0 TraitDefinitions.SubTrait$I@@0) $h@@9))
)))
(assert (forall ((TraitDefinitions.SubTrait$T@@1 T@U) (TraitDefinitions.SubTrait$I@@1 T@U) (bx@@5 T@U) ($h@@10 T@U) ) (!  (=> (and ($IsAllocBox bx@@5 (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T@@1 TraitDefinitions.SubTrait$I@@1) $h@@10) ($IsGoodHeap $h@@10)) ($IsAllocBox bx@@5 Tclass.TraitDefinitions.SuperTrait? $h@@10))
 :pattern ( ($IsAllocBox bx@@5 (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T@@1 TraitDefinitions.SubTrait$I@@1) $h@@10))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 Tclass.TraitDefinitions.SuperTrait) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) Tclass.TraitDefinitions.SuperTrait)))
 :pattern ( ($IsBox bx@@6 Tclass.TraitDefinitions.SuperTrait))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 Tclass.TraitDefinitions.NoMemberTrait) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) Tclass.TraitDefinitions.NoMemberTrait)))
 :pattern ( ($IsBox bx@@7 Tclass.TraitDefinitions.NoMemberTrait))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 Tclass.TraitDefinitions.NoMemberTrait2) (and (= ($Box refType ($Unbox refType bx@@8)) bx@@8) ($Is refType ($Unbox refType bx@@8) Tclass.TraitDefinitions.NoMemberTrait2)))
 :pattern ( ($IsBox bx@@8 Tclass.TraitDefinitions.NoMemberTrait2))
)))
(assert (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 Tclass.TraitDefinitions.NoMemberTrait?) (and (= ($Box refType ($Unbox refType bx@@9)) bx@@9) ($Is refType ($Unbox refType bx@@9) Tclass.TraitDefinitions.NoMemberTrait?)))
 :pattern ( ($IsBox bx@@9 Tclass.TraitDefinitions.NoMemberTrait?))
)))
(assert (forall ((bx@@10 T@U) ) (!  (=> ($IsBox bx@@10 Tclass.TraitDefinitions.NoMemberTrait2?) (and (= ($Box refType ($Unbox refType bx@@10)) bx@@10) ($Is refType ($Unbox refType bx@@10) Tclass.TraitDefinitions.NoMemberTrait2?)))
 :pattern ( ($IsBox bx@@10 Tclass.TraitDefinitions.NoMemberTrait2?))
)))
(assert (forall ((bx@@11 T@U) ) (!  (=> ($IsBox bx@@11 Tclass.TraitDefinitions.SuperTrait?) (and (= ($Box refType ($Unbox refType bx@@11)) bx@@11) ($Is refType ($Unbox refType bx@@11) Tclass.TraitDefinitions.SuperTrait?)))
 :pattern ( ($IsBox bx@@11 Tclass.TraitDefinitions.SuperTrait?))
)))
(assert (forall ((All.Y$I@@7 T@U) ($o@@4 T@U) ) (! (= ($Is refType $o@@4 (Tclass.All.Y? All.Y$I@@7))  (or (= $o@@4 null) (= (dtype $o@@4) (Tclass.All.Y? All.Y$I@@7))))
 :pattern ( ($Is refType $o@@4 (Tclass.All.Y? All.Y$I@@7)))
)))
(assert (forall ((All.Y$I@@8 T@U) (bx@@12 T@U) ($h@@11 T@U) ) (!  (=> (and ($IsAllocBox bx@@12 (Tclass.All.Y? All.Y$I@@8) $h@@11) ($IsGoodHeap $h@@11)) ($IsAllocBox bx@@12 (Tclass.TraitDefinitions.SubTrait? TInt All.Y$I@@8) $h@@11))
 :pattern ( ($IsAllocBox bx@@12 (Tclass.All.Y? All.Y$I@@8) $h@@11))
)))
(assert (forall ((All.Y$I@@9 T@U) ($o@@5 T@U) ($heap T@U) ) (!  (=> ($IsAlloc refType $o@@5 (Tclass.All.Y? All.Y$I@@9) $heap) ($IsAlloc refType $o@@5 (Tclass.TraitDefinitions.SubTrait? TInt All.Y$I@@9) $heap))
 :pattern ( ($IsAlloc refType $o@@5 (Tclass.All.Y? All.Y$I@@9) $heap))
)))
(assert (forall ((|c#0@@6| T@U) ) (! (= ($Is refType |c#0@@6| Tclass.TraitDefinitions.NoMemberTrait)  (and ($Is refType |c#0@@6| Tclass.TraitDefinitions.NoMemberTrait?) (or (not (= |c#0@@6| null)) (not true))))
 :pattern ( ($Is refType |c#0@@6| Tclass.TraitDefinitions.NoMemberTrait))
 :pattern ( ($Is refType |c#0@@6| Tclass.TraitDefinitions.NoMemberTrait?))
)))
(assert (forall ((|c#0@@7| T@U) ) (! (= ($Is refType |c#0@@7| Tclass.TraitDefinitions.NoMemberTrait2)  (and ($Is refType |c#0@@7| Tclass.TraitDefinitions.NoMemberTrait2?) (or (not (= |c#0@@7| null)) (not true))))
 :pattern ( ($Is refType |c#0@@7| Tclass.TraitDefinitions.NoMemberTrait2))
 :pattern ( ($Is refType |c#0@@7| Tclass.TraitDefinitions.NoMemberTrait2?))
)))
(assert (forall ((|c#0@@8| T@U) ) (! (= ($Is refType |c#0@@8| Tclass.TraitDefinitions.SuperTrait)  (and ($Is refType |c#0@@8| Tclass.TraitDefinitions.SuperTrait?) (or (not (= |c#0@@8| null)) (not true))))
 :pattern ( ($Is refType |c#0@@8| Tclass.TraitDefinitions.SuperTrait))
 :pattern ( ($Is refType |c#0@@8| Tclass.TraitDefinitions.SuperTrait?))
)))
(assert (forall ((f@@7 T@U) (t0@@8 T@U) (t1@@8 T@U) (h@@3 T@U) ) (!  (=> (and ($IsGoodHeap h@@3) ($IsAlloc HandleTypeType f@@7 (Tclass._System.___hFunc1 t0@@8 t1@@8) h@@3)) (forall ((bx0@@6 T@U) ) (!  (=> (and ($IsAllocBox bx0@@6 t0@@8 h@@3) (Requires1 t0@@8 t1@@8 h@@3 f@@7 bx0@@6)) ($IsAllocBox (Apply1 t0@@8 t1@@8 h@@3 f@@7 bx0@@6) t1@@8 h@@3))
 :pattern ( (Apply1 t0@@8 t1@@8 h@@3 f@@7 bx0@@6))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@7 (Tclass._System.___hFunc1 t0@@8 t1@@8) h@@3))
)))
(assert (forall (($o@@6 T@U) ($heap@@0 T@U) ) (!  (=> ($IsAlloc refType $o@@6 Tclass.TraitDefinitions.SuperTrait? $heap@@0) ($IsAlloc refType $o@@6 Tclass.TraitDefinitions.NoMemberTrait? $heap@@0))
 :pattern ( ($IsAlloc refType $o@@6 Tclass.TraitDefinitions.SuperTrait? $heap@@0))
)))
(assert (forall (($o@@7 T@U) ($heap@@1 T@U) ) (!  (=> ($IsAlloc refType $o@@7 Tclass.TraitDefinitions.SuperTrait? $heap@@1) ($IsAlloc refType $o@@7 Tclass.TraitDefinitions.NoMemberTrait2? $heap@@1))
 :pattern ( ($IsAlloc refType $o@@7 Tclass.TraitDefinitions.SuperTrait? $heap@@1))
)))
(assert (forall ((TraitDefinitions.SubTrait$T@@2 T@U) (TraitDefinitions.SubTrait$I@@2 T@U) ($o@@8 T@U) ($h@@12 T@U) ) (! (= ($IsAlloc refType $o@@8 (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T@@2 TraitDefinitions.SubTrait$I@@2) $h@@12)  (or (= $o@@8 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@8) alloc)))))
 :pattern ( ($IsAlloc refType $o@@8 (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T@@2 TraitDefinitions.SubTrait$I@@2) $h@@12))
)))
(assert (forall ((a@@2 T@U) (b T@U) ) (!  (=> (|Set#Equal| a@@2 b) (= a@@2 b))
 :pattern ( (|Set#Equal| a@@2 b))
)))
(assert (forall ((a@@3 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (or (not (= a@@3 c)) (not true)) (=> (and ($HeapSucc a@@3 b@@0) ($HeapSucc b@@0 c)) ($HeapSucc a@@3 c)))
 :pattern ( ($HeapSucc a@@3 b@@0) ($HeapSucc b@@0 c))
)))
(assert (forall ((f@@8 T@U) (t0@@9 T@U) (t1@@9 T@U) ) (! (= ($Is HandleTypeType f@@8 (Tclass._System.___hFunc1 t0@@9 t1@@9)) (forall ((h@@4 T@U) (bx0@@7 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@4) ($IsBox bx0@@7 t0@@9)) (Requires1 t0@@9 t1@@9 h@@4 f@@8 bx0@@7)) ($IsBox (Apply1 t0@@9 t1@@9 h@@4 f@@8 bx0@@7) t1@@9))
 :pattern ( (Apply1 t0@@9 t1@@9 h@@4 f@@8 bx0@@7))
)))
 :pattern ( ($Is HandleTypeType f@@8 (Tclass._System.___hFunc1 t0@@9 t1@@9)))
)))
(assert (forall ((bx@@13 T@U) ) (!  (=> ($IsBox bx@@13 TInt) (and (= ($Box intType ($Unbox intType bx@@13)) bx@@13) ($Is intType ($Unbox intType bx@@13) TInt)))
 :pattern ( ($IsBox bx@@13 TInt))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@2) ($Is T@@3 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@2))
)))
(assert (forall ((|#$T0| T@U) (|#$R| T@U) ) (! (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0| |#$R|)) |#$T0|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0| |#$R|))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) ) (! (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) |#$R@@0|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|))
)))
(assert (forall ((TraitDefinitions.SubTrait$T@@3 T@U) (TraitDefinitions.SubTrait$I@@3 T@U) ) (! (= (Tclass.TraitDefinitions.SubTrait_0 (Tclass.TraitDefinitions.SubTrait TraitDefinitions.SubTrait$T@@3 TraitDefinitions.SubTrait$I@@3)) TraitDefinitions.SubTrait$T@@3)
 :pattern ( (Tclass.TraitDefinitions.SubTrait TraitDefinitions.SubTrait$T@@3 TraitDefinitions.SubTrait$I@@3))
)))
(assert (forall ((TraitDefinitions.SubTrait$T@@4 T@U) (TraitDefinitions.SubTrait$I@@4 T@U) ) (! (= (Tclass.TraitDefinitions.SubTrait_1 (Tclass.TraitDefinitions.SubTrait TraitDefinitions.SubTrait$T@@4 TraitDefinitions.SubTrait$I@@4)) TraitDefinitions.SubTrait$I@@4)
 :pattern ( (Tclass.TraitDefinitions.SubTrait TraitDefinitions.SubTrait$T@@4 TraitDefinitions.SubTrait$I@@4))
)))
(assert (forall ((TraitDefinitions.SubTrait$T@@5 T@U) (TraitDefinitions.SubTrait$I@@5 T@U) ) (! (= (Tclass.TraitDefinitions.SubTrait?_0 (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T@@5 TraitDefinitions.SubTrait$I@@5)) TraitDefinitions.SubTrait$T@@5)
 :pattern ( (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T@@5 TraitDefinitions.SubTrait$I@@5))
)))
(assert (forall ((TraitDefinitions.SubTrait$T@@6 T@U) (TraitDefinitions.SubTrait$I@@6 T@U) ) (! (= (Tclass.TraitDefinitions.SubTrait?_1 (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T@@6 TraitDefinitions.SubTrait$I@@6)) TraitDefinitions.SubTrait$I@@6)
 :pattern ( (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T@@6 TraitDefinitions.SubTrait$I@@6))
)))
(assert (forall ((TraitDefinitions.SubTrait$T@@7 T@U) (TraitDefinitions.SubTrait$I@@7 T@U) ($o@@9 T@U) ) (! (= ($Is refType $o@@9 (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T@@7 TraitDefinitions.SubTrait$I@@7))  (or (= $o@@9 null) (implements$TraitDefinitions.SubTrait (dtype $o@@9) TraitDefinitions.SubTrait$T@@7 TraitDefinitions.SubTrait$I@@7)))
 :pattern ( ($Is refType $o@@9 (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T@@7 TraitDefinitions.SubTrait$I@@7)))
)))
(assert (forall ((All.Y$I@@10 T@U) ) (! (= (Tclass.All.Y_0 (Tclass.All.Y All.Y$I@@10)) All.Y$I@@10)
 :pattern ( (Tclass.All.Y All.Y$I@@10))
)))
(assert (forall ((All.Y$I@@11 T@U) ) (! (= (Tclass.All.Y?_0 (Tclass.All.Y? All.Y$I@@11)) All.Y$I@@11)
 :pattern ( (Tclass.All.Y? All.Y$I@@11))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@7)) x@@7)
 :pattern ( ($Box T@@4 x@@7))
)))
(assert (forall ((f@@9 T@U) (t0@@10 T@U) (t1@@10 T@U) (h@@5 T@U) ) (!  (=> ($IsGoodHeap h@@5) (= ($IsAlloc HandleTypeType f@@9 (Tclass._System.___hFunc1 t0@@10 t1@@10) h@@5) (forall ((bx0@@8 T@U) ) (!  (=> (and (and ($IsBox bx0@@8 t0@@10) ($IsAllocBox bx0@@8 t0@@10 h@@5)) (Requires1 t0@@10 t1@@10 h@@5 f@@9 bx0@@8)) (forall ((r T@U) ) (!  (=> (and (or (not (= r null)) (not true)) (|Set#IsMember| (Reads1 t0@@10 t1@@10 h@@5 f@@9 bx0@@8) ($Box refType r))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@5 r) alloc))))
 :pattern ( (|Set#IsMember| (Reads1 t0@@10 t1@@10 h@@5 f@@9 bx0@@8) ($Box refType r)))
)))
 :pattern ( (Apply1 t0@@10 t1@@10 h@@5 f@@9 bx0@@8))
 :pattern ( (Reads1 t0@@10 t1@@10 h@@5 f@@9 bx0@@8))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@9 (Tclass._System.___hFunc1 t0@@10 t1@@10) h@@5))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) (bx@@14 T@U) ) (!  (=> ($IsBox bx@@14 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@14)) bx@@14) ($Is HandleTypeType ($Unbox HandleTypeType bx@@14) (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|))))
 :pattern ( ($IsBox bx@@14 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)))
)))
(assert (forall ((TraitDefinitions.SubTrait$T@@8 T@U) (TraitDefinitions.SubTrait$I@@8 T@U) (bx@@15 T@U) ) (!  (=> ($IsBox bx@@15 (Tclass.TraitDefinitions.SubTrait TraitDefinitions.SubTrait$T@@8 TraitDefinitions.SubTrait$I@@8)) (and (= ($Box refType ($Unbox refType bx@@15)) bx@@15) ($Is refType ($Unbox refType bx@@15) (Tclass.TraitDefinitions.SubTrait TraitDefinitions.SubTrait$T@@8 TraitDefinitions.SubTrait$I@@8))))
 :pattern ( ($IsBox bx@@15 (Tclass.TraitDefinitions.SubTrait TraitDefinitions.SubTrait$T@@8 TraitDefinitions.SubTrait$I@@8)))
)))
(assert (forall ((TraitDefinitions.SubTrait$T@@9 T@U) (TraitDefinitions.SubTrait$I@@9 T@U) (bx@@16 T@U) ) (!  (=> ($IsBox bx@@16 (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T@@9 TraitDefinitions.SubTrait$I@@9)) (and (= ($Box refType ($Unbox refType bx@@16)) bx@@16) ($Is refType ($Unbox refType bx@@16) (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T@@9 TraitDefinitions.SubTrait$I@@9))))
 :pattern ( ($IsBox bx@@16 (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T@@9 TraitDefinitions.SubTrait$I@@9)))
)))
(assert (forall ((TraitDefinitions.SubTrait$T@@10 T@U) (TraitDefinitions.SubTrait$I@@10 T@U) ($o@@10 T@U) ) (!  (=> ($Is refType $o@@10 (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T@@10 TraitDefinitions.SubTrait$I@@10)) ($Is refType $o@@10 Tclass.TraitDefinitions.SuperTrait?))
 :pattern ( ($Is refType $o@@10 (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T@@10 TraitDefinitions.SubTrait$I@@10)))
)))
(assert (forall ((TraitDefinitions.SubTrait$T@@11 T@U) (TraitDefinitions.SubTrait$I@@11 T@U) (bx@@17 T@U) ) (!  (=> ($IsBox bx@@17 (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T@@11 TraitDefinitions.SubTrait$I@@11)) ($IsBox bx@@17 Tclass.TraitDefinitions.SuperTrait?))
 :pattern ( ($IsBox bx@@17 (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T@@11 TraitDefinitions.SubTrait$I@@11)))
)))
(assert  (and (forall ((t0@@11 T@T) (t1@@11 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@11 t1@@11 t2 (MapType1Store t0@@11 t1@@11 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@1 T@T) (u1@@1 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@1 u1@@1 u2 (MapType1Store u0@@1 u1@@1 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@1 u1@@1 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@2 T@T) (u1@@2 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@2 u1@@2 u2@@0 (MapType1Store u0@@2 u1@@2 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@2 u1@@2 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@11 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@11 $f))  (=> (and (or (not (= $o@@11 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@11) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@11 $f))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)) |tytagFamily$_#Func1|))
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))
)))
(assert (forall ((TraitDefinitions.SubTrait$T@@12 T@U) (TraitDefinitions.SubTrait$I@@12 T@U) ) (!  (and (= (Tag (Tclass.TraitDefinitions.SubTrait TraitDefinitions.SubTrait$T@@12 TraitDefinitions.SubTrait$I@@12)) Tagclass.TraitDefinitions.SubTrait) (= (TagFamily (Tclass.TraitDefinitions.SubTrait TraitDefinitions.SubTrait$T@@12 TraitDefinitions.SubTrait$I@@12)) tytagFamily$SubTrait))
 :pattern ( (Tclass.TraitDefinitions.SubTrait TraitDefinitions.SubTrait$T@@12 TraitDefinitions.SubTrait$I@@12))
)))
(assert (forall ((TraitDefinitions.SubTrait$T@@13 T@U) (TraitDefinitions.SubTrait$I@@13 T@U) ) (!  (and (= (Tag (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T@@13 TraitDefinitions.SubTrait$I@@13)) Tagclass.TraitDefinitions.SubTrait?) (= (TagFamily (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T@@13 TraitDefinitions.SubTrait$I@@13)) tytagFamily$SubTrait))
 :pattern ( (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T@@13 TraitDefinitions.SubTrait$I@@13))
)))
(assert (forall ((t0@@12 T@U) (t1@@12 T@U) (heap@@0 T@U) (f@@10 T@U) (bx0@@9 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@0) (and ($IsBox bx0@@9 t0@@12) ($Is HandleTypeType f@@10 (Tclass._System.___hFunc1 t0@@12 t1@@12)))) (|Set#Equal| (Reads1 t0@@12 t1@@12 $OneHeap f@@10 bx0@@9) |Set#Empty|)) (= (Requires1 t0@@12 t1@@12 $OneHeap f@@10 bx0@@9) (Requires1 t0@@12 t1@@12 heap@@0 f@@10 bx0@@9)))
 :pattern ( (Requires1 t0@@12 t1@@12 $OneHeap f@@10 bx0@@9) ($IsGoodHeap heap@@0))
 :pattern ( (Requires1 t0@@12 t1@@12 heap@@0 f@@10 bx0@@9))
)))
(assert (forall ((All.Y$I@@12 T@U) (bx@@18 T@U) ) (!  (=> ($IsBox bx@@18 (Tclass.All.Y All.Y$I@@12)) (and (= ($Box refType ($Unbox refType bx@@18)) bx@@18) ($Is refType ($Unbox refType bx@@18) (Tclass.All.Y All.Y$I@@12))))
 :pattern ( ($IsBox bx@@18 (Tclass.All.Y All.Y$I@@12)))
)))
(assert (forall ((All.Y$I@@13 T@U) (bx@@19 T@U) ) (!  (=> ($IsBox bx@@19 (Tclass.All.Y? All.Y$I@@13)) (and (= ($Box refType ($Unbox refType bx@@19)) bx@@19) ($Is refType ($Unbox refType bx@@19) (Tclass.All.Y? All.Y$I@@13))))
 :pattern ( ($IsBox bx@@19 (Tclass.All.Y? All.Y$I@@13)))
)))
(assert (forall (($o@@12 T@U) ) (!  (=> ($Is refType $o@@12 Tclass.TraitDefinitions.SuperTrait?) ($Is refType $o@@12 Tclass.TraitDefinitions.NoMemberTrait?))
 :pattern ( ($Is refType $o@@12 Tclass.TraitDefinitions.SuperTrait?))
)))
(assert (forall ((bx@@20 T@U) ) (!  (=> ($IsBox bx@@20 Tclass.TraitDefinitions.SuperTrait?) ($IsBox bx@@20 Tclass.TraitDefinitions.NoMemberTrait?))
 :pattern ( ($IsBox bx@@20 Tclass.TraitDefinitions.SuperTrait?))
)))
(assert (forall (($o@@13 T@U) ) (!  (=> ($Is refType $o@@13 Tclass.TraitDefinitions.SuperTrait?) ($Is refType $o@@13 Tclass.TraitDefinitions.NoMemberTrait2?))
 :pattern ( ($Is refType $o@@13 Tclass.TraitDefinitions.SuperTrait?))
)))
(assert (forall ((bx@@21 T@U) ) (!  (=> ($IsBox bx@@21 Tclass.TraitDefinitions.SuperTrait?) ($IsBox bx@@21 Tclass.TraitDefinitions.NoMemberTrait2?))
 :pattern ( ($IsBox bx@@21 Tclass.TraitDefinitions.SuperTrait?))
)))
(assert (= (Tag Tclass.TraitDefinitions.SuperTrait) Tagclass.TraitDefinitions.SuperTrait))
(assert (= (TagFamily Tclass.TraitDefinitions.SuperTrait) tytagFamily$SuperTrait))
(assert (= (Tag Tclass.TraitDefinitions.NoMemberTrait) Tagclass.TraitDefinitions.NoMemberTrait))
(assert (= (TagFamily Tclass.TraitDefinitions.NoMemberTrait) tytagFamily$NoMemberTrait))
(assert (= (Tag Tclass.TraitDefinitions.NoMemberTrait2) Tagclass.TraitDefinitions.NoMemberTrait2))
(assert (= (TagFamily Tclass.TraitDefinitions.NoMemberTrait2) tytagFamily$NoMemberTrait2))
(assert (= (Tag Tclass.TraitDefinitions.NoMemberTrait?) Tagclass.TraitDefinitions.NoMemberTrait?))
(assert (= (TagFamily Tclass.TraitDefinitions.NoMemberTrait?) tytagFamily$NoMemberTrait))
(assert (= (Tag Tclass.TraitDefinitions.NoMemberTrait2?) Tagclass.TraitDefinitions.NoMemberTrait2?))
(assert (= (TagFamily Tclass.TraitDefinitions.NoMemberTrait2?) tytagFamily$NoMemberTrait2))
(assert (= (Tag Tclass.TraitDefinitions.SuperTrait?) Tagclass.TraitDefinitions.SuperTrait?))
(assert (= (TagFamily Tclass.TraitDefinitions.SuperTrait?) tytagFamily$SuperTrait))
(assert (forall (($o@@14 T@U) ) (! (= ($Is refType $o@@14 Tclass.TraitDefinitions.NoMemberTrait?)  (or (= $o@@14 null) (implements$TraitDefinitions.NoMemberTrait (dtype $o@@14))))
 :pattern ( ($Is refType $o@@14 Tclass.TraitDefinitions.NoMemberTrait?))
)))
(assert (forall (($o@@15 T@U) ) (! (= ($Is refType $o@@15 Tclass.TraitDefinitions.NoMemberTrait2?)  (or (= $o@@15 null) (implements$TraitDefinitions.NoMemberTrait2 (dtype $o@@15))))
 :pattern ( ($Is refType $o@@15 Tclass.TraitDefinitions.NoMemberTrait2?))
)))
(assert (forall (($o@@16 T@U) ) (! (= ($Is refType $o@@16 Tclass.TraitDefinitions.SuperTrait?)  (or (= $o@@16 null) (implements$TraitDefinitions.SuperTrait (dtype $o@@16))))
 :pattern ( ($Is refType $o@@16 Tclass.TraitDefinitions.SuperTrait?))
)))
(assert (forall ((a@@4 T@U) (b@@1 T@U) ) (! (= (|Set#Equal| a@@4 b@@1) (forall ((o@@8 T@U) ) (! (= (|Set#IsMember| a@@4 o@@8) (|Set#IsMember| b@@1 o@@8))
 :pattern ( (|Set#IsMember| a@@4 o@@8))
 :pattern ( (|Set#IsMember| b@@1 o@@8))
)))
 :pattern ( (|Set#Equal| a@@4 b@@1))
)))
(assert (forall ((TraitDefinitions.SubTrait$T@@14 T@U) (TraitDefinitions.SubTrait$I@@14 T@U) ($o@@17 T@U) ($heap@@2 T@U) ) (!  (=> ($IsAlloc refType $o@@17 (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T@@14 TraitDefinitions.SubTrait$I@@14) $heap@@2) ($IsAlloc refType $o@@17 Tclass.TraitDefinitions.SuperTrait? $heap@@2))
 :pattern ( ($IsAlloc refType $o@@17 (Tclass.TraitDefinitions.SubTrait? TraitDefinitions.SubTrait$T@@14 TraitDefinitions.SubTrait$I@@14) $heap@@2))
)))
(assert (forall ((x@@8 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@8)) (Lit BoxType ($Box T@@5 x@@8)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@8)))
)))
(assert (forall ((h@@6 T@U) (v@@2 T@U) ) (! ($IsAlloc intType v@@2 TInt h@@6)
 :pattern ( ($IsAlloc intType v@@2 TInt h@@6))
)))
(assert (forall ((v@@3 T@U) ) (! ($Is intType v@@3 TInt)
 :pattern ( ($Is intType v@@3 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |f#0@0| () T@U)
(declare-fun |i#0@0| () Int)
(declare-fun this () T@U)
(declare-fun All.Y$I@@14 () T@U)
(declare-fun |f#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (forall (($o@@18 T@U) ) (!  (=> (and (or (not (= $o@@18 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@18) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@18) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@18)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@18))
)) ($HeapSucc $Heap $Heap@0))) (=> (and (and (and ($Is HandleTypeType |f#0@0| (Tclass._System.___hFunc1 TInt TInt)) ($IsAlloc HandleTypeType |f#0@0| (Tclass._System.___hFunc1 TInt TInt) $Heap@0)) (and ($IsAllocBox ($Box HandleTypeType |f#0@0|) (Tclass._System.___hFunc1 TInt TInt) $Heap@0) ($IsAlloc intType (int_2_U |i#0@0|) TInt $Heap@0))) (and (and (= (Requires1 TInt TInt $Heap@0 |f#0@0| ($Box intType (int_2_U |i#0@0|))) (U_2_bool (Lit boolType (bool_2_U true)))) ($IsAllocBox ($Box HandleTypeType |f#0@0|) (Tclass._System.___hFunc1 TInt TInt) $Heap@0)) (and ($IsAlloc intType (int_2_U |i#0@0|) TInt $Heap@0) (= (ControlFlow 0 2) (- 0 1))))) (Requires1 TInt TInt $Heap@0 |f#0@0| ($Box intType (int_2_U |i#0@0|))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (or (not (= this null)) (not true)) (and ($Is refType this (Tclass.All.Y All.Y$I@@14)) ($IsAlloc refType this (Tclass.All.Y All.Y$I@@14) $Heap)))) (and (and ($Is HandleTypeType |f#0| (Tclass._System.___hFunc1 TInt TInt)) ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hFunc1 TInt TInt) $Heap)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 3) 2)))) anon0_correct)))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
