(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (T@U) T@U)
(declare-fun $generated@@23 () T@U)
(declare-fun $generated@@24 (T@T T@U T@U) Bool)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 () T@U)
(declare-fun $generated@@27 (T@U T@U) Bool)
(declare-fun $generated@@28 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@29 () T@T)
(declare-fun $generated@@30 () T@T)
(declare-fun $generated@@31 () T@T)
(declare-fun $generated@@32 (T@T T@T) T@T)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@34 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@35 (T@T) T@T)
(declare-fun $generated@@36 (T@T) T@T)
(declare-fun $generated@@57 (T@T T@U) T@U)
(declare-fun $generated@@60 () T@T)
(declare-fun $generated@@61 (T@U T@U) T@U)
(declare-fun $generated@@62 (T@U) T@U)
(declare-fun $generated@@63 (T@U T@U) Bool)
(declare-fun $generated@@67 (T@T T@U) T@U)
(declare-fun $generated@@73 (T@U Int) T@U)
(declare-fun $generated@@84 (T@U) T@U)
(declare-fun $generated@@86 (T@U) T@U)
(declare-fun $generated@@90 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@91 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@92 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@124 (T@U) T@U)
(declare-fun $generated@@125 (T@U) T@U)
(declare-fun $generated@@130 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated@@21) 0))
(assert (= ($generated@@22 $generated@@23) $generated@@2))
(assert (= ($generated@@4 $generated@@25) 3))
(assert ($generated@@24 $generated@@25 $generated@@23 $generated@@26))
(assert  (and (and (and (and (and (and (and (forall (($generated@@37 T@T) ($generated@@38 T@T) ($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@U) ) (! (= ($generated@@28 $generated@@37 $generated@@38 ($generated@@34 $generated@@37 $generated@@38 $generated@@40 $generated@@41 $generated@@39) $generated@@41) $generated@@39)
 :weight 0
)) (forall (($generated@@42 T@T) ($generated@@43 T@T) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ($generated@@47 T@U) ) (!  (or (= $generated@@46 $generated@@47) (= ($generated@@28 $generated@@42 $generated@@43 ($generated@@34 $generated@@42 $generated@@43 $generated@@45 $generated@@46 $generated@@44) $generated@@47) ($generated@@28 $generated@@42 $generated@@43 $generated@@45 $generated@@47)))
 :weight 0
))) (= ($generated@@4 $generated@@29) 4)) (= ($generated@@4 $generated@@30) 5)) (= ($generated@@4 $generated@@31) 6)) (forall (($generated@@48 T@T) ($generated@@49 T@T) ) (= ($generated@@4 ($generated@@32 $generated@@48 $generated@@49)) 7))) (forall (($generated@@50 T@T) ($generated@@51 T@T) ) (! (= ($generated@@35 ($generated@@32 $generated@@50 $generated@@51)) $generated@@50)
 :pattern ( ($generated@@32 $generated@@50 $generated@@51))
))) (forall (($generated@@52 T@T) ($generated@@53 T@T) ) (! (= ($generated@@36 ($generated@@32 $generated@@52 $generated@@53)) $generated@@53)
 :pattern ( ($generated@@32 $generated@@52 $generated@@53))
))))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@U) ) (!  (=> ($generated@@27 $generated@@54 $generated@@55) (forall (($generated@@56 T@U) ) (!  (=> ($generated@@9 ($generated@@33 $generated@@5 ($generated@@28 $generated@@29 $generated@@30 ($generated@@28 $generated@@31 ($generated@@32 $generated@@29 $generated@@30) $generated@@54 $generated@@56) $generated@@0))) ($generated@@9 ($generated@@33 $generated@@5 ($generated@@28 $generated@@29 $generated@@30 ($generated@@28 $generated@@31 ($generated@@32 $generated@@29 $generated@@30) $generated@@55 $generated@@56) $generated@@0))))
 :pattern ( ($generated@@28 $generated@@29 $generated@@30 ($generated@@28 $generated@@31 ($generated@@32 $generated@@29 $generated@@30) $generated@@55 $generated@@56) $generated@@0))
)))
 :pattern ( ($generated@@27 $generated@@54 $generated@@55))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@57 $generated@@59 $generated@@58) $generated@@58)
 :pattern ( ($generated@@57 $generated@@59 $generated@@58))
)))
(assert (= ($generated@@4 $generated@@60) 8))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (!  (=> (and ($generated@@24 $generated@@60 $generated@@64 ($generated@@62 $generated@@66)) ($generated@@63 $generated@@65 $generated@@66)) ($generated@@24 $generated@@60 ($generated@@61 $generated@@64 $generated@@65) ($generated@@62 $generated@@66)))
 :pattern ( ($generated@@24 $generated@@60 ($generated@@61 $generated@@64 $generated@@65) ($generated@@62 $generated@@66)))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@67 $generated@@69 ($generated@@33 $generated@@69 $generated@@68)) $generated@@68)
 :pattern ( ($generated@@33 $generated@@69 $generated@@68))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (! (= ($generated@@20 ($generated@@61 $generated@@70 $generated@@71)) (+ 1 ($generated@@20 $generated@@70)))
 :pattern ( ($generated@@61 $generated@@70 $generated@@71))
)))
(assert (forall (($generated@@72 T@U) ) (!  (=> ($generated@@63 $generated@@72 $generated@@26) (and (= ($generated@@67 $generated@@25 ($generated@@33 $generated@@25 $generated@@72)) $generated@@72) ($generated@@24 $generated@@25 ($generated@@33 $generated@@25 $generated@@72) $generated@@26)))
 :pattern ( ($generated@@63 $generated@@72 $generated@@26))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 Int) ($generated@@76 T@U) ) (!  (and (=> (= $generated@@75 ($generated@@20 $generated@@74)) (= ($generated@@73 ($generated@@61 $generated@@74 $generated@@76) $generated@@75) $generated@@76)) (=> (or (not (= $generated@@75 ($generated@@20 $generated@@74))) (not true)) (= ($generated@@73 ($generated@@61 $generated@@74 $generated@@76) $generated@@75) ($generated@@73 $generated@@74 $generated@@75))))
 :pattern ( ($generated@@73 ($generated@@61 $generated@@74 $generated@@76) $generated@@75))
)))
(assert (forall (($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (!  (=> (or (not (= $generated@@77 $generated@@79)) (not true)) (=> (and ($generated@@27 $generated@@77 $generated@@78) ($generated@@27 $generated@@78 $generated@@79)) ($generated@@27 $generated@@77 $generated@@79)))
 :pattern ( ($generated@@27 $generated@@77 $generated@@78) ($generated@@27 $generated@@78 $generated@@79))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@T) ) (! (= ($generated@@63 ($generated@@67 $generated@@82 $generated@@80) $generated@@81) ($generated@@24 $generated@@82 $generated@@80 $generated@@81))
 :pattern ( ($generated@@63 ($generated@@67 $generated@@82 $generated@@80) $generated@@81))
)))
(assert (forall (($generated@@83 T@U) ) (! (<= 0 ($generated@@20 $generated@@83))
 :pattern ( ($generated@@20 $generated@@83))
)))
(assert (forall (($generated@@85 T@U) ) (! (= ($generated@@84 ($generated@@62 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@62 $generated@@85))
)))
(assert (forall (($generated@@87 T@U) ) (! (= ($generated@@86 ($generated@@62 $generated@@87)) $generated)
 :pattern ( ($generated@@62 $generated@@87))
)))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@T) ) (! (= ($generated@@33 $generated@@89 ($generated@@67 $generated@@89 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@67 $generated@@89 $generated@@88))
)))
(assert  (and (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= ($generated@@90 $generated@@93 $generated@@94 $generated@@95 ($generated@@92 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@99 $generated@@96) $generated@@98 $generated@@99) $generated@@96)
 :weight 0
)) (and (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (!  (or (= $generated@@105 $generated@@107) (= ($generated@@90 $generated@@100 $generated@@101 $generated@@102 ($generated@@92 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@106 $generated@@103) $generated@@107 $generated@@108) ($generated@@90 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@107 $generated@@108)))
 :weight 0
)) (forall (($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (!  (or (= $generated@@115 $generated@@117) (= ($generated@@90 $generated@@109 $generated@@110 $generated@@111 ($generated@@92 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@114 $generated@@115 $generated@@112) $generated@@116 $generated@@117) ($generated@@90 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@116 $generated@@117)))
 :weight 0
)))))
(assert (forall (($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 Bool) ($generated@@122 T@U) ($generated@@123 T@U) ) (! (= ($generated@@9 ($generated@@90 $generated@@31 $generated@@29 $generated@@5 ($generated@@91 $generated@@118 $generated@@119 $generated@@120 $generated@@121) $generated@@122 $generated@@123))  (=> (and (or (not (= $generated@@122 $generated@@118)) (not true)) ($generated@@9 ($generated@@33 $generated@@5 ($generated@@28 $generated@@29 $generated@@30 ($generated@@28 $generated@@31 ($generated@@32 $generated@@29 $generated@@30) $generated@@119 $generated@@122) $generated@@120)))) $generated@@121))
 :pattern ( ($generated@@90 $generated@@31 $generated@@29 $generated@@5 ($generated@@91 $generated@@118 $generated@@119 $generated@@120 $generated@@121) $generated@@122 $generated@@123))
)))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@U) ) (!  (and (= ($generated@@124 ($generated@@61 $generated@@126 $generated@@127)) $generated@@126) (= ($generated@@125 ($generated@@61 $generated@@126 $generated@@127)) $generated@@127))
 :pattern ( ($generated@@61 $generated@@126 $generated@@127))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (!  (=> ($generated@@63 $generated@@128 ($generated@@62 $generated@@129)) (and (= ($generated@@67 $generated@@60 ($generated@@33 $generated@@60 $generated@@128)) $generated@@128) ($generated@@24 $generated@@60 ($generated@@33 $generated@@60 $generated@@128) ($generated@@62 $generated@@129))))
 :pattern ( ($generated@@63 $generated@@128 ($generated@@62 $generated@@129)))
)))
(assert (= ($generated@@86 $generated@@26) $generated@@1))
(assert (= ($generated@@130 $generated@@26) $generated@@3))
(assert (= $generated@@23 ($generated@@57 $generated@@25 $generated@@23)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@T) ) (! (= ($generated@@67 $generated@@132 ($generated@@57 $generated@@132 $generated@@131)) ($generated@@57 $generated@@30 ($generated@@67 $generated@@132 $generated@@131)))
 :pattern ( ($generated@@67 $generated@@132 ($generated@@57 $generated@@132 $generated@@131)))
)))
(assert (forall (($generated@@133 T@U) ) (!  (=> (= ($generated@@20 $generated@@133) 0) (= $generated@@133 $generated@@21))
 :pattern ( ($generated@@20 $generated@@133))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (! (= ($generated@@24 $generated@@60 $generated@@134 ($generated@@62 $generated@@135)) (forall (($generated@@136 Int) ) (!  (=> (and (<= 0 $generated@@136) (< $generated@@136 ($generated@@20 $generated@@134))) ($generated@@63 ($generated@@73 $generated@@134 $generated@@136) $generated@@135))
 :pattern ( ($generated@@73 $generated@@134 $generated@@136))
)))
 :pattern ( ($generated@@24 $generated@@60 $generated@@134 ($generated@@62 $generated@@135)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 2) true)
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
