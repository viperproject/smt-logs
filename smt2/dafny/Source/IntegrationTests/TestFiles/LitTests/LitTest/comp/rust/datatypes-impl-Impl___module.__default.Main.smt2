(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 (T@U T@U) Bool)
(declare-fun $generated@@22 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 (T@T T@T) T@T)
(declare-fun $generated@@27 (T@T T@U) T@U)
(declare-fun $generated@@28 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@29 (T@T) T@T)
(declare-fun $generated@@30 (T@T) T@T)
(declare-fun $generated@@51 (Int) Int)
(declare-fun $generated@@53 (T@T T@U) T@U)
(declare-fun $generated@@56 (T@T T@U) T@U)
(declare-fun $generated@@59 (T@T T@U T@U) Bool)
(declare-fun $generated@@60 () T@U)
(declare-fun $generated@@67 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@68 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@69 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@101 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated) $generated@@0))
(assert  (and (and (and (and (and (and (and (forall (($generated@@31 T@T) ($generated@@32 T@T) ($generated@@33 T@U) ($generated@@34 T@U) ($generated@@35 T@U) ) (! (= ($generated@@22 $generated@@31 $generated@@32 ($generated@@28 $generated@@31 $generated@@32 $generated@@34 $generated@@35 $generated@@33) $generated@@35) $generated@@33)
 :weight 0
)) (forall (($generated@@36 T@T) ($generated@@37 T@T) ($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@U) ) (!  (or (= $generated@@40 $generated@@41) (= ($generated@@22 $generated@@36 $generated@@37 ($generated@@28 $generated@@36 $generated@@37 $generated@@39 $generated@@40 $generated@@38) $generated@@41) ($generated@@22 $generated@@36 $generated@@37 $generated@@39 $generated@@41)))
 :weight 0
))) (= ($generated@@4 $generated@@23) 3)) (= ($generated@@4 $generated@@24) 4)) (= ($generated@@4 $generated@@25) 5)) (forall (($generated@@42 T@T) ($generated@@43 T@T) ) (= ($generated@@4 ($generated@@26 $generated@@42 $generated@@43)) 6))) (forall (($generated@@44 T@T) ($generated@@45 T@T) ) (! (= ($generated@@29 ($generated@@26 $generated@@44 $generated@@45)) $generated@@44)
 :pattern ( ($generated@@26 $generated@@44 $generated@@45))
))) (forall (($generated@@46 T@T) ($generated@@47 T@T) ) (! (= ($generated@@30 ($generated@@26 $generated@@46 $generated@@47)) $generated@@47)
 :pattern ( ($generated@@26 $generated@@46 $generated@@47))
))))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@U) ) (!  (=> ($generated@@21 $generated@@48 $generated@@49) (forall (($generated@@50 T@U) ) (!  (=> ($generated@@9 ($generated@@27 $generated@@5 ($generated@@22 $generated@@23 $generated@@24 ($generated@@22 $generated@@25 ($generated@@26 $generated@@23 $generated@@24) $generated@@48 $generated@@50) $generated@@1))) ($generated@@9 ($generated@@27 $generated@@5 ($generated@@22 $generated@@23 $generated@@24 ($generated@@22 $generated@@25 ($generated@@26 $generated@@23 $generated@@24) $generated@@49 $generated@@50) $generated@@1))))
 :pattern ( ($generated@@22 $generated@@23 $generated@@24 ($generated@@22 $generated@@25 ($generated@@26 $generated@@23 $generated@@24) $generated@@49 $generated@@50) $generated@@1))
)))
 :pattern ( ($generated@@21 $generated@@48 $generated@@49))
)))
(assert (forall (($generated@@52 Int) ) (! (= ($generated@@51 $generated@@52) $generated@@52)
 :pattern ( ($generated@@51 $generated@@52))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@53 $generated@@55 $generated@@54) $generated@@54)
 :pattern ( ($generated@@53 $generated@@55 $generated@@54))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@T) ) (! (= ($generated@@56 $generated@@58 ($generated@@27 $generated@@58 $generated@@57)) $generated@@57)
 :pattern ( ($generated@@27 $generated@@58 $generated@@57))
)))
(assert (forall (($generated@@61 T@U) ) (! (= ($generated@@59 $generated@@6 $generated@@61 $generated@@60) (<= ($generated@@51 0) ($generated@@11 $generated@@61)))
 :pattern ( ($generated@@59 $generated@@6 $generated@@61 $generated@@60))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ) (!  (=> (or (not (= $generated@@62 $generated@@64)) (not true)) (=> (and ($generated@@21 $generated@@62 $generated@@63) ($generated@@21 $generated@@63 $generated@@64)) ($generated@@21 $generated@@62 $generated@@64)))
 :pattern ( ($generated@@21 $generated@@62 $generated@@63) ($generated@@21 $generated@@63 $generated@@64))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@T) ) (! (= ($generated@@27 $generated@@66 ($generated@@56 $generated@@66 $generated@@65)) $generated@@65)
 :pattern ( ($generated@@56 $generated@@66 $generated@@65))
)))
(assert  (and (forall (($generated@@70 T@T) ($generated@@71 T@T) ($generated@@72 T@T) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ($generated@@76 T@U) ) (! (= ($generated@@67 $generated@@70 $generated@@71 $generated@@72 ($generated@@69 $generated@@70 $generated@@71 $generated@@72 $generated@@74 $generated@@75 $generated@@76 $generated@@73) $generated@@75 $generated@@76) $generated@@73)
 :weight 0
)) (and (forall (($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ) (!  (or (= $generated@@82 $generated@@84) (= ($generated@@67 $generated@@77 $generated@@78 $generated@@79 ($generated@@69 $generated@@77 $generated@@78 $generated@@79 $generated@@81 $generated@@82 $generated@@83 $generated@@80) $generated@@84 $generated@@85) ($generated@@67 $generated@@77 $generated@@78 $generated@@79 $generated@@81 $generated@@84 $generated@@85)))
 :weight 0
)) (forall (($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@T) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (or (= $generated@@92 $generated@@94) (= ($generated@@67 $generated@@86 $generated@@87 $generated@@88 ($generated@@69 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@91 $generated@@92 $generated@@89) $generated@@93 $generated@@94) ($generated@@67 $generated@@86 $generated@@87 $generated@@88 $generated@@90 $generated@@93 $generated@@94)))
 :weight 0
)))))
(assert (forall (($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 Bool) ($generated@@99 T@U) ($generated@@100 T@U) ) (! (= ($generated@@9 ($generated@@67 $generated@@25 $generated@@23 $generated@@5 ($generated@@68 $generated@@95 $generated@@96 $generated@@97 $generated@@98) $generated@@99 $generated@@100))  (=> (and (or (not (= $generated@@99 $generated@@95)) (not true)) ($generated@@9 ($generated@@27 $generated@@5 ($generated@@22 $generated@@23 $generated@@24 ($generated@@22 $generated@@25 ($generated@@26 $generated@@23 $generated@@24) $generated@@96 $generated@@99) $generated@@97)))) $generated@@98))
 :pattern ( ($generated@@67 $generated@@25 $generated@@23 $generated@@5 ($generated@@68 $generated@@95 $generated@@96 $generated@@97 $generated@@98) $generated@@99 $generated@@100))
)))
(assert (= ($generated@@20 $generated@@60) $generated@@2))
(assert (= ($generated@@101 $generated@@60) $generated@@3))
(assert (forall (($generated@@102 Int) ) (! (= ($generated@@56 $generated@@6 ($generated@@10 ($generated@@51 $generated@@102))) ($generated@@53 $generated@@24 ($generated@@56 $generated@@6 ($generated@@10 $generated@@102))))
 :pattern ( ($generated@@56 $generated@@6 ($generated@@10 ($generated@@51 $generated@@102))))
)))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@T) ) (! (= ($generated@@56 $generated@@104 ($generated@@53 $generated@@104 $generated@@103)) ($generated@@53 $generated@@24 ($generated@@56 $generated@@104 $generated@@103)))
 :pattern ( ($generated@@56 $generated@@104 ($generated@@53 $generated@@104 $generated@@103)))
)))
(assert (forall (($generated@@105 T@U) ) (! ($generated@@59 $generated@@6 $generated@@105 $generated)
 :pattern ( ($generated@@59 $generated@@6 $generated@@105 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@106 (T@U) Bool)
(declare-fun $generated@@107 () T@U)
(declare-fun $generated@@108 () T@U)
(declare-fun $generated@@109 () T@U)
(declare-fun $generated@@110 () T@U)
(declare-fun $generated@@111 (T@U) Bool)
(declare-fun $generated@@112 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 7) (let (($generated@@113 true))
(let (($generated@@114 true))
(let (($generated@@115  (=> (and ($generated@@106 $generated@@107) (or (= $generated@@108 $generated@@107) ($generated@@21 $generated@@108 $generated@@107))) (and (=> (= (ControlFlow 0 4) 2) $generated@@114) (=> (= (ControlFlow 0 4) 3) $generated@@113)))))
(let (($generated@@116 true))
(let (($generated@@117  (=> (= $generated@@109 ($generated@@68 $generated@@110 $generated@@108 $generated@@1 false)) (and (=> (= (ControlFlow 0 5) (- 0 6)) ($generated@@59 $generated@@6 ($generated@@10 ($generated@@51 3)) $generated@@60)) (=> ($generated@@59 $generated@@6 ($generated@@10 ($generated@@51 3)) $generated@@60) (and (=> (= (ControlFlow 0 5) 4) $generated@@115) (=> (= (ControlFlow 0 5) 1) $generated@@116)))))))
(let (($generated@@118  (=> (and (and ($generated@@106 $generated@@108) ($generated@@111 $generated@@108)) (and (= 1 $generated@@112) (= (ControlFlow 0 7) 5))) $generated@@117)))
$generated@@118)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
