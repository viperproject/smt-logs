(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun TagMap () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun Tagclass._module.Number () T@U)
(declare-fun Tagclass._module.Integer () T@U)
(declare-fun Tagclass._module.Number? () T@U)
(declare-fun Tagclass._module.Integer? () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun tytagFamily$Number () T@U)
(declare-fun tytagFamily$Integer () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun implements$_module.Number (T@U) Bool)
(declare-fun Tclass._module.Integer? () T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun refType () T@T)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Tclass._module.Number? () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Tclass._System.object? () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._module.Number () T@U)
(declare-fun Tclass._module.Integer () T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun |lambda#14| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun MapType () T@T)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |Set#FromBoogieMap| (T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |lambda#15| (T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |Map#Empty| () T@U)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet TagMap alloc Tagclass._System.object? Tagclass._System.object |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 Tagclass._module.Number Tagclass._module.Integer Tagclass._module.Number? Tagclass._module.Integer? tytagFamily$object |tytagFamily$_tuple#2| tytagFamily$Number tytagFamily$Integer)
)
(assert (forall ((a T@U) (b T@U) (t T@U) ) (! (= (|Map#Domain| (|Map#Glue| a b t)) a)
 :pattern ( (|Map#Domain| (|Map#Glue| a b t)))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (t@@0 T@U) ) (! (= (|Map#Elements| (|Map#Glue| a@@0 b@@0 t@@0)) b@@0)
 :pattern ( (|Map#Elements| (|Map#Glue| a@@0 b@@0 t@@0)))
)))
(assert (implements$_module.Number Tclass._module.Integer?))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d))
 :pattern ( (_System.Tuple2.___hMake2_q d) ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (Ctor refType) 4))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.Integer?)  (or (= $o null) (= (dtype $o) Tclass._module.Integer?)))
 :pattern ( ($Is refType $o Tclass._module.Integer?))
)))
(assert (forall ((bx T@U) ($h T@U) ) (!  (=> (and ($IsAllocBox bx Tclass._module.Number? $h) ($IsGoodHeap $h)) ($IsAllocBox bx Tclass._System.object? $h))
 :pattern ( ($IsAllocBox bx Tclass._module.Number? $h))
)))
(assert (forall ((bx@@0 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsAllocBox bx@@0 Tclass._module.Integer? $h@@0) ($IsGoodHeap $h@@0)) ($IsAllocBox bx@@0 Tclass._module.Number? $h@@0))
 :pattern ( ($IsAllocBox bx@@0 Tclass._module.Integer? $h@@0))
)))
(assert (forall ((|c#0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._System.object $h@@1) ($IsAlloc refType |c#0| Tclass._System.object? $h@@1))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object $h@@1))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object? $h@@1))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._module.Number $h@@2) ($IsAlloc refType |c#0@@0| Tclass._module.Number? $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.Number $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.Number? $h@@2))
)))
(assert (forall ((|c#0@@1| T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType |c#0@@1| Tclass._module.Integer $h@@3) ($IsAlloc refType |c#0@@1| Tclass._module.Integer? $h@@3))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass._module.Integer $h@@3))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass._module.Integer? $h@@3))
)))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert  (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor BoxType) 5)))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) (|l#4| T@U) (|$w#0| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#14| |l#0| |l#1| |l#2| |l#3| |l#4|) |$w#0|))  (and ($IsBox |$w#0| |l#0|) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) )  (and (and (and (and (|Set#IsMember| |l#1| ($Box refType |a#1#0#0|)) (|Set#IsMember| |l#2| ($Box refType |a#1#1#0|))) (= ($Unbox refType (MapType0Select BoxType BoxType |l#3| ($Box refType |a#1#0#0|))) |a#1#1#0|)) (= ($Unbox refType (MapType0Select BoxType BoxType |l#4| ($Box refType |a#1#1#0|))) |a#1#0#0|)) (= ($Unbox refType |$w#0|) |a#1#0#0|)))))
 :pattern ( (MapType0Select BoxType boolType (|lambda#14| |l#0| |l#1| |l#2| |l#3| |l#4|) |$w#0|))
)))
(assert  (and (and (and (= (Ctor FieldType) 6) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@0 T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType $o@@0 Tclass._System.object? $h@@4)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 Tclass._System.object? $h@@4))
)))
(assert (forall (($o@@1 T@U) ($h@@5 T@U) ) (! (= ($IsAlloc refType $o@@1 Tclass._module.Number? $h@@5)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 Tclass._module.Number? $h@@5))
)))
(assert (forall (($o@@2 T@U) ($h@@6 T@U) ) (! (= ($IsAlloc refType $o@@2 Tclass._module.Integer? $h@@6)  (or (= $o@@2 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@2) alloc)))))
 :pattern ( ($IsAlloc refType $o@@2 Tclass._module.Integer? $h@@6))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (= (Ctor MapType) 8))
(assert (forall ((a@@1 T@U) (b@@1 T@U) (t0@@0 T@U) (t1@@0 T@U) ) (!  (=> (forall ((bx@@1 T@U) )  (=> (|Set#IsMember| a@@1 bx@@1) (and ($IsBox bx@@1 t0@@0) ($IsBox (MapType0Select BoxType BoxType b@@1 bx@@1) t1@@0)))) ($Is MapType (|Map#Glue| a@@1 b@@1 (TMap t0@@0 t1@@0)) (TMap t0@@0 t1@@0)))
 :pattern ( (|Map#Glue| a@@1 b@@1 (TMap t0@@0 t1@@0)))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h@@7 T@U) ) (!  (=> ($IsGoodHeap $h@@7) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@7)  (and ($IsAllocBox |a#2#0#0@@0| |_System._tuple#2$T0@@1| $h@@7) ($IsAllocBox |a#2#1#0@@0| |_System._tuple#2$T1@@1| $h@@7))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@7))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@0))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((m@@1 T@U) (bx@@2 T@U) ) (! (= (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx@@2) (U_2_bool (MapType0Select BoxType boolType m@@1 bx@@2)))
 :pattern ( (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx@@2))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@1) (exists ((|a#1#0#0@@0| T@U) (|a#1#1#0@@0| T@U) ) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0@@0| |a#1#1#0@@0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@1))
)))
(assert (= (Ctor SetType) 9))
(assert (forall ((v T@U) (t0@@1 T@U) ) (! (= ($Is SetType v (TSet t0@@1)) (forall ((bx@@3 T@U) ) (!  (=> (|Set#IsMember| v bx@@3) ($IsBox bx@@3 t0@@1))
 :pattern ( (|Set#IsMember| v bx@@3))
)))
 :pattern ( ($Is SetType v (TSet t0@@1)))
)))
(assert (forall ((s T@U) (v@@0 T@U) ) (! (= (|Seq#Length| (|Seq#Build| s v@@0)) (+ 1 (|Seq#Length| s)))
 :pattern ( (|Seq#Build| s v@@0))
)))
(assert (forall ((v@@1 T@U) (t@@1 T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@1) t@@1 h@@0) ($IsAlloc T@@1 v@@1 t@@1 h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@1) t@@1 h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@4 T@U) (t@@2 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@4 t@@2 h@@1) ($IsAllocBox bx@@4 t@@2 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@4 t@@2 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@2 T@U) (t@@3 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@2 t@@3 h@@2) ($IsAlloc T@@2 v@@2 t@@3 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@2 t@@3 h@@2))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@5)) bx@@5) ($Is refType ($Unbox refType bx@@5) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@5 Tclass._System.object?))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) Tclass._System.object)))
 :pattern ( ($IsBox bx@@6 Tclass._System.object))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 Tclass._module.Number) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) Tclass._module.Number)))
 :pattern ( ($IsBox bx@@7 Tclass._module.Number))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 Tclass._module.Integer) (and (= ($Box refType ($Unbox refType bx@@8)) bx@@8) ($Is refType ($Unbox refType bx@@8) Tclass._module.Integer)))
 :pattern ( ($IsBox bx@@8 Tclass._module.Integer))
)))
(assert (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 Tclass._module.Number?) (and (= ($Box refType ($Unbox refType bx@@9)) bx@@9) ($Is refType ($Unbox refType bx@@9) Tclass._module.Number?)))
 :pattern ( ($IsBox bx@@9 Tclass._module.Number?))
)))
(assert (forall ((bx@@10 T@U) ) (!  (=> ($IsBox bx@@10 Tclass._module.Integer?) (and (= ($Box refType ($Unbox refType bx@@10)) bx@@10) ($Is refType ($Unbox refType bx@@10) Tclass._module.Integer?)))
 :pattern ( ($IsBox bx@@10 Tclass._module.Integer?))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass._System.object)  (and ($Is refType |c#0@@2| Tclass._System.object?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@2| Tclass._System.object?))
)))
(assert (forall ((|c#0@@3| T@U) ) (! (= ($Is refType |c#0@@3| Tclass._module.Number)  (and ($Is refType |c#0@@3| Tclass._module.Number?) (or (not (= |c#0@@3| null)) (not true))))
 :pattern ( ($Is refType |c#0@@3| Tclass._module.Number))
 :pattern ( ($Is refType |c#0@@3| Tclass._module.Number?))
)))
(assert (forall ((|c#0@@4| T@U) ) (! (= ($Is refType |c#0@@4| Tclass._module.Integer)  (and ($Is refType |c#0@@4| Tclass._module.Integer?) (or (not (= |c#0@@4| null)) (not true))))
 :pattern ( ($Is refType |c#0@@4| Tclass._module.Integer))
 :pattern ( ($Is refType |c#0@@4| Tclass._module.Integer?))
)))
(assert (forall (($o@@3 T@U) ($heap T@U) ) (!  (=> ($IsAlloc refType $o@@3 Tclass._module.Number? $heap) ($IsAlloc refType $o@@3 Tclass._System.object? $heap))
 :pattern ( ($IsAlloc refType $o@@3 Tclass._module.Number? $heap))
)))
(assert (forall (($o@@4 T@U) ($heap@@0 T@U) ) (!  (=> ($IsAlloc refType $o@@4 Tclass._module.Integer? $heap@@0) ($IsAlloc refType $o@@4 Tclass._module.Number? $heap@@0))
 :pattern ( ($IsAlloc refType $o@@4 Tclass._module.Integer? $heap@@0))
)))
(assert (forall ((|l#0@@0| T@U) (|$w#0@@0| T@U) ) (! (= (MapType0Select BoxType BoxType (|lambda#15| |l#0@@0|) |$w#0@@0|) |l#0@@0|)
 :pattern ( (MapType0Select BoxType BoxType (|lambda#15| |l#0@@0|) |$w#0@@0|))
)))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (c T@U) ) (!  (=> (or (not (= a@@2 c)) (not true)) (=> (and ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c)) ($HeapSucc a@@2 c)))
 :pattern ( ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c))
)))
(assert (forall ((v@@3 T@U) (t@@4 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@3) t@@4) ($Is T@@3 v@@3 t@@4))
 :pattern ( ($IsBox ($Box T@@3 v@@3) t@@4))
)))
(assert (forall ((s@@0 T@U) ) (! (<= 0 (|Seq#Length| s@@0))
 :pattern ( (|Seq#Length| s@@0))
)))
(assert (forall ((v@@4 T@U) (t0@@2 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@4 (TSet t0@@2) h@@3) (forall ((bx@@11 T@U) ) (!  (=> (|Set#IsMember| v@@4 bx@@11) ($IsAllocBox bx@@11 t0@@2 h@@3))
 :pattern ( (|Set#IsMember| v@@4 bx@@11))
)))
 :pattern ( ($IsAlloc SetType v@@4 (TSet t0@@2) h@@3))
)))
(assert (forall ((t@@5 T@U) (u T@U) ) (! (= (Inv0_TMap (TMap t@@5 u)) t@@5)
 :pattern ( (TMap t@@5 u))
)))
(assert (forall ((t@@6 T@U) (u@@0 T@U) ) (! (= (Inv1_TMap (TMap t@@6 u@@0)) u@@0)
 :pattern ( (TMap t@@6 u@@0))
)))
(assert (forall ((t@@7 T@U) (u@@1 T@U) ) (! (= (Tag (TMap t@@7 u@@1)) TagMap)
 :pattern ( (TMap t@@7 u@@1))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) |a#6#1#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall (($o@@5 T@U) ) (! ($Is refType $o@@5 Tclass._System.object?)
 :pattern ( ($Is refType $o@@5 Tclass._System.object?))
)))
(assert (forall ((t@@8 T@U) ) (! (= (Inv0_TSet (TSet t@@8)) t@@8)
 :pattern ( (TSet t@@8))
)))
(assert (forall ((t@@9 T@U) ) (! (= (Tag (TSet t@@9)) TagSet)
 :pattern ( (TSet t@@9))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (forall ((v@@5 T@U) (t0@@3 T@U) (t1@@1 T@U) (h@@4 T@U) ) (! (= ($IsAlloc MapType v@@5 (TMap t0@@3 t1@@1) h@@4) (forall ((bx@@12 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@5) bx@@12) (and ($IsAllocBox (MapType0Select BoxType BoxType (|Map#Elements| v@@5) bx@@12) t1@@1 h@@4) ($IsAllocBox bx@@12 t0@@3 h@@4)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@5) bx@@12))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@5) bx@@12))
)))
 :pattern ( ($IsAlloc MapType v@@5 (TMap t0@@3 t1@@1) h@@4))
)))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (! (< (BoxRank |a#5#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((u@@2 T@U) ) (!  (not (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@2))
 :pattern ( (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@2))
)))
(assert (forall ((n Int) ) (!  (=> (or (and (<= 0 n) (< n 55296)) (and (<= 57344 n) (< n 1114112))) (= (|char#ToInt| (|char#FromInt| n)) n))
 :pattern ( (|char#FromInt| n))
)))
(assert (forall ((bx@@13 T@U) (s@@1 T@U) (t@@10 T@U) ) (!  (=> ($IsBox bx@@13 (TMap s@@1 t@@10)) (and (= ($Box MapType ($Unbox MapType bx@@13)) bx@@13) ($Is MapType ($Unbox MapType bx@@13) (TMap s@@1 t@@10))))
 :pattern ( ($IsBox bx@@13 (TMap s@@1 t@@10)))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@14 T@U) ) (!  (=> ($IsBox bx@@14 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@14)) bx@@14) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@14) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@14 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert  (and (forall ((t0@@4 T@T) (t1@@2 T@T) (t2 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@4 t1@@2 t2 (MapType1Store t0@@4 t1@@2 t2 m@@2 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@3 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@3 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@4 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@4 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0@@1| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3@@0| Bool) ($o@@6 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@1| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@6 $f))  (=> (and (or (not (= $o@@6 |l#0@@1|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@0| $o@@6) |l#2@@0|)))) |l#3@@0|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@1| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@6 $f))
)))
(assert (forall ((s@@2 T@U) (val@@4 T@U) ) (!  (and (= (|Seq#Build_inv0| (|Seq#Build| s@@2 val@@4)) s@@2) (= (|Seq#Build_inv1| (|Seq#Build| s@@2 val@@4)) val@@4))
 :pattern ( (|Seq#Build| s@@2 val@@4))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall ((m@@5 T@U) ) (!  (or (= m@@5 |Map#Empty|) (exists ((k@@2 T@U) ) (|Set#IsMember| (|Map#Domain| m@@5) k@@2)))
 :pattern ( (|Map#Domain| m@@5))
)))
(assert (forall ((m@@6 T@U) ) (!  (or (= m@@6 |Map#Empty|) (exists ((v@@6 T@U) ) (|Set#IsMember| (|Map#Values| m@@6) v@@6)))
 :pattern ( (|Map#Values| m@@6))
)))
(assert (forall ((m@@7 T@U) (item T@U) ) (! (= (|Set#IsMember| (|Map#Items| m@@7) item)  (and (|Set#IsMember| (|Map#Domain| m@@7) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (= (MapType0Select BoxType BoxType (|Map#Elements| m@@7) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))
 :pattern ( (|Set#IsMember| (|Map#Items| m@@7) item))
)))
(assert (forall ((m@@8 T@U) (v@@7 T@U) ) (! (= (|Set#IsMember| (|Map#Values| m@@8) v@@7) (exists ((u@@3 T@U) ) (!  (and (|Set#IsMember| (|Map#Domain| m@@8) u@@3) (= v@@7 (MapType0Select BoxType BoxType (|Map#Elements| m@@8) u@@3)))
 :pattern ( (|Set#IsMember| (|Map#Domain| m@@8) u@@3))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| m@@8) u@@3))
)))
 :pattern ( (|Set#IsMember| (|Map#Values| m@@8) v@@7))
)))
(assert (forall ((m@@9 T@U) (u@@4 T@U) (|u'| T@U) (v@@8 T@U) ) (!  (and (=> (= |u'| u@@4) (and (|Set#IsMember| (|Map#Domain| (|Map#Build| m@@9 u@@4 v@@8)) |u'|) (= (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Build| m@@9 u@@4 v@@8)) |u'|) v@@8))) (=> (or (not (= |u'| u@@4)) (not true)) (and (= (|Set#IsMember| (|Map#Domain| (|Map#Build| m@@9 u@@4 v@@8)) |u'|) (|Set#IsMember| (|Map#Domain| m@@9) |u'|)) (= (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Build| m@@9 u@@4 v@@8)) |u'|) (MapType0Select BoxType BoxType (|Map#Elements| m@@9) |u'|)))))
 :pattern ( (|Set#IsMember| (|Map#Domain| (|Map#Build| m@@9 u@@4 v@@8)) |u'|))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Build| m@@9 u@@4 v@@8)) |u'|))
)))
(assert (forall ((d@@2 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@2)) (DtRank d@@2))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@2)))
)))
(assert (forall ((bx@@15 T@U) (t@@11 T@U) ) (!  (=> ($IsBox bx@@15 (TSet t@@11)) (and (= ($Box SetType ($Unbox SetType bx@@15)) bx@@15) ($Is SetType ($Unbox SetType bx@@15) (TSet t@@11))))
 :pattern ( ($IsBox bx@@15 (TSet t@@11)))
)))
(assert (forall (($o@@7 T@U) ) (!  (=> ($Is refType $o@@7 Tclass._module.Number?) ($Is refType $o@@7 Tclass._System.object?))
 :pattern ( ($Is refType $o@@7 Tclass._module.Number?))
)))
(assert (forall ((bx@@16 T@U) ) (!  (=> ($IsBox bx@@16 Tclass._module.Number?) ($IsBox bx@@16 Tclass._System.object?))
 :pattern ( ($IsBox bx@@16 Tclass._module.Number?))
)))
(assert (forall (($o@@8 T@U) ) (!  (=> ($Is refType $o@@8 Tclass._module.Integer?) ($Is refType $o@@8 Tclass._module.Number?))
 :pattern ( ($Is refType $o@@8 Tclass._module.Integer?))
)))
(assert (forall ((bx@@17 T@U) ) (!  (=> ($IsBox bx@@17 Tclass._module.Integer?) ($IsBox bx@@17 Tclass._module.Number?))
 :pattern ( ($IsBox bx@@17 Tclass._module.Integer?))
)))
(assert (forall ((ch T@U) ) (!  (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (or (and (<= 0 (|char#ToInt| ch)) (< (|char#ToInt| ch) 55296)) (and (<= 57344 (|char#ToInt| ch)) (< (|char#ToInt| ch) 1114112))))
 :pattern ( (|char#ToInt| ch))
)))
(assert (forall ((v@@9 T@U) (t0@@5 T@U) (t1@@3 T@U) ) (! (= ($Is MapType v@@9 (TMap t0@@5 t1@@3)) (forall ((bx@@18 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@9) bx@@18) (and ($IsBox (MapType0Select BoxType BoxType (|Map#Elements| v@@9) bx@@18) t1@@3) ($IsBox bx@@18 t0@@5)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@9) bx@@18))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@9) bx@@18))
)))
 :pattern ( ($Is MapType v@@9 (TMap t0@@5 t1@@3)))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (= (Tag Tclass._module.Number) Tagclass._module.Number))
(assert (= (TagFamily Tclass._module.Number) tytagFamily$Number))
(assert (= (Tag Tclass._module.Integer) Tagclass._module.Integer))
(assert (= (TagFamily Tclass._module.Integer) tytagFamily$Integer))
(assert (= (Tag Tclass._module.Number?) Tagclass._module.Number?))
(assert (= (TagFamily Tclass._module.Number?) tytagFamily$Number))
(assert (= (Tag Tclass._module.Integer?) Tagclass._module.Integer?))
(assert (= (TagFamily Tclass._module.Integer?) tytagFamily$Integer))
(assert (forall (($o@@9 T@U) ) (! (= ($Is refType $o@@9 Tclass._module.Number?)  (or (= $o@@9 null) (implements$_module.Number (dtype $o@@9))))
 :pattern ( ($Is refType $o@@9 Tclass._module.Number?))
)))
(assert (forall ((d@@3 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@8 T@U) ) (!  (=> (and ($IsGoodHeap $h@@8) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@8)
 :pattern ( ($IsAlloc DatatypeTypeType d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@8))
)))) ($IsAllocBox (_System.Tuple2._0 d@@3) |_System._tuple#2$T0@@6| $h@@8))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@3) |_System._tuple#2$T0@@6| $h@@8))
)))
(assert (forall ((d@@4 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@9 T@U) ) (!  (=> (and ($IsGoodHeap $h@@9) (and (_System.Tuple2.___hMake2_q d@@4) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@4 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@9)
 :pattern ( ($IsAlloc DatatypeTypeType d@@4 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@9))
)))) ($IsAllocBox (_System.Tuple2._1 d@@4) |_System._tuple#2$T1@@7| $h@@9))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@4) |_System._tuple#2$T1@@7| $h@@9))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@7)) (Lit BoxType ($Box T@@5 x@@7)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@7)))
)))
(assert (forall ((s@@3 T@U) ) (!  (=> (= (|Seq#Length| s@@3) 0) (= s@@3 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@3))
)))
(assert (forall ((m@@10 T@U) ) (!  (or (= m@@10 |Map#Empty|) (exists ((k@@3 T@U) (v@@10 T@U) ) (|Set#IsMember| (|Map#Items| m@@10) ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| k@@3 v@@10)))))
 :pattern ( (|Map#Items| m@@10))
)))
(assert (forall ((v@@11 T@U) (t0@@6 T@U) (t1@@4 T@U) ) (!  (=> ($Is MapType v@@11 (TMap t0@@6 t1@@4)) (and (and ($Is SetType (|Map#Domain| v@@11) (TSet t0@@6)) ($Is SetType (|Map#Values| v@@11) (TSet t1@@4))) ($Is SetType (|Map#Items| v@@11) (TSet (Tclass._System.Tuple2 t0@@6 t1@@4)))))
 :pattern ( ($Is MapType v@@11 (TMap t0@@6 t1@@4)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |b#0@0| () T@U)
(declare-fun |map$project$0#0#n#0| (T@U) T@U)
(declare-fun |map$project$0#0#p#0| (T@U) T@U)
(declare-fun |comprehension#0@0| () T@U)
(declare-fun call2formal@this@0 () T@U)
(declare-fun |prefix##5@0| () T@U)
(declare-fun SeqType () T@T)
(declare-fun charType () T@T)
(declare-fun $Heap@9 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $Heap@8 () T@U)
(declare-fun |prefix##6@0| () T@U)
(declare-fun |S##0@0| () T@U)
(declare-fun $Heap@10 () T@U)
(declare-fun |prefix##7@0| () T@U)
(declare-fun |S##1@0| () T@U)
(declare-fun $Heap@11 () T@U)
(declare-fun |m00#0@0| () T@U)
(declare-fun call2formal@this@0@@0 () T@U)
(declare-fun call2formal@this@0@@1 () T@U)
(declare-fun |m01#0@0| () T@U)
(declare-fun |m10#0@0| () T@U)
(declare-fun |m11#0@0| () T@U)
(declare-fun |n00#0@0| () T@U)
(declare-fun call2formal@this@0@@2 () T@U)
(declare-fun |n01#0@0| () T@U)
(declare-fun |n10#0@0| () T@U)
(declare-fun |n11#0@0| () T@U)
(declare-fun |n#0@0| () T@U)
(declare-fun |p#0@0| () T@U)
(declare-fun |n#prime#0@0| () T@U)
(declare-fun |p#prime#0@0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap () T@U)
(declare-fun |value##0@0| () Int)
(declare-fun call2formal@this () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |value##1@0| () Int)
(declare-fun call2formal@this@@0 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |value##2@0| () Int)
(declare-fun call2formal@this@@1 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |value##3@0| () Int)
(declare-fun call2formal@this@@2 () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun |a#0@0| () T@U)
(declare-fun |c#0@0| () T@U)
(declare-fun |prefix##0@0| () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun |prefix##1@0| () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun |prefix##2@0| () T@U)
(declare-fun $Heap@6 () T@U)
(declare-fun |prefix##3@0| () T@U)
(declare-fun |M##3@0| () T@U)
(declare-fun $Heap@7 () T@U)
(declare-fun |prefix##4@0| () T@U)
(declare-fun |M##4@0| () T@U)
(declare-fun |defass#twelve#0| () Bool)
(declare-fun |twelve#0| () T@U)
(declare-fun |defass#seventeen#0| () Bool)
(declare-fun |seventeen#0| () T@U)
(declare-fun |defass#fortyTwo#0| () Bool)
(declare-fun |fortyTwo#0| () T@U)
(declare-fun |defass#eightyTwo#0| () Bool)
(declare-fun |eightyTwo#0| () T@U)
(declare-fun |a#0| () T@U)
(declare-fun |b#0| () T@U)
(declare-fun |c#0@@5| () T@U)
(declare-fun |comprehension#0| () T@U)
(declare-fun |m00#0| () T@U)
(declare-fun |m01#0| () T@U)
(declare-fun |m10#0| () T@U)
(declare-fun |m11#0| () T@U)
(declare-fun |n00#0| () T@U)
(declare-fun |n01#0| () T@U)
(declare-fun |n10#0| () T@U)
(declare-fun |n11#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(assert  (and (= (Ctor SeqType) 10) (= (Ctor charType) 11)))
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 59) (let ((anon13_correct  (=> (forall ((|a#2#0#0@@1| T@U) (|a#2#1#0@@1| T@U) ) (!  (=> (and (and (and (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |a#2#0#0@@1|)) (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |a#2#1#0@@1|))) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType |a#2#0#0@@1|))) |a#2#1#0@@1|)) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType |a#2#1#0@@1|))) |a#2#0#0@@1|)) (and (and (and (and (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType (|map$project$0#0#n#0| |a#2#0#0@@1|))) (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType (|map$project$0#0#p#0| |a#2#0#0@@1|)))) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType (|map$project$0#0#n#0| |a#2#0#0@@1|)))) (|map$project$0#0#p#0| |a#2#0#0@@1|))) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType (|map$project$0#0#p#0| |a#2#0#0@@1|)))) (|map$project$0#0#n#0| |a#2#0#0@@1|))) (= |a#2#0#0@@1| (|map$project$0#0#n#0| |a#2#0#0@@1|))))
 :pattern ( ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType |a#2#1#0@@1|))) ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType |a#2#0#0@@1|))))
 :pattern ( ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType |a#2#1#0@@1|))) (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |a#2#0#0@@1|)))
 :pattern ( ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType |a#2#0#0@@1|))) (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |a#2#1#0@@1|)))
 :pattern ( (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |a#2#1#0@@1|)) (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |a#2#0#0@@1|)))
)) (=> (and (= |comprehension#0@0| (|Map#Glue| (|Set#FromBoogieMap| (|lambda#14| Tclass._module.Integer (|Map#Domain| |b#0@0|) (|Map#Domain| |b#0@0|) (|Map#Elements| |b#0@0|) (|Map#Elements| |b#0@0|))) (|lambda#15| ($Box refType call2formal@this@0)) (TMap Tclass._module.Integer Tclass._module.Integer))) (= |prefix##5@0| (Lit SeqType (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box charType (|char#FromInt| 32))) ($Box charType (|char#FromInt| 32))) ($Box charType (|char#FromInt| 99))) ($Box charType (|char#FromInt| 111))) ($Box charType (|char#FromInt| 109))) ($Box charType (|char#FromInt| 112))) ($Box charType (|char#FromInt| 114))) ($Box charType (|char#FromInt| 101))) ($Box charType (|char#FromInt| 104))) ($Box charType (|char#FromInt| 101))) ($Box charType (|char#FromInt| 110))) ($Box charType (|char#FromInt| 115))) ($Box charType (|char#FromInt| 105))) ($Box charType (|char#FromInt| 111))) ($Box charType (|char#FromInt| 110))) ($Box charType (|char#FromInt| 58))) ($Box charType (|char#FromInt| 32)))))) (=> (and (and (and (and ($IsGoodHeap $Heap@9) ($IsHeapAnchor $Heap@9)) (and (forall (($o@@10 T@U) ) (!  (=> (and (or (not (= $o@@10 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 $o@@10) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 $o@@10) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 $o@@10)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 $o@@10))
)) ($HeapSucc $Heap@8 $Heap@9))) (and (and (= |prefix##6@0| (Lit SeqType (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box charType (|char#FromInt| 32))) ($Box charType (|char#FromInt| 32))) ($Box charType (|char#FromInt| 75))) ($Box charType (|char#FromInt| 101))) ($Box charType (|char#FromInt| 121))) ($Box charType (|char#FromInt| 115))) ($Box charType (|char#FromInt| 58))) ($Box charType (|char#FromInt| 32))))) (= |S##0@0| (|Map#Domain| |b#0@0|))) (and ($IsGoodHeap $Heap@10) ($IsHeapAnchor $Heap@10)))) (and (and (and (forall (($o@@11 T@U) ) (!  (=> (and (or (not (= $o@@11 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 $o@@11) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@10 $o@@11) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 $o@@11)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@10 $o@@11))
)) ($HeapSucc $Heap@9 $Heap@10)) (and (= |prefix##7@0| (Lit SeqType (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box charType (|char#FromInt| 32))) ($Box charType (|char#FromInt| 32))) ($Box charType (|char#FromInt| 86))) ($Box charType (|char#FromInt| 97))) ($Box charType (|char#FromInt| 108))) ($Box charType (|char#FromInt| 117))) ($Box charType (|char#FromInt| 101))) ($Box charType (|char#FromInt| 115))) ($Box charType (|char#FromInt| 58))) ($Box charType (|char#FromInt| 32))))) (= |S##1@0| (|Map#Values| |b#0@0|)))) (and (and ($IsGoodHeap $Heap@11) ($IsHeapAnchor $Heap@11)) (and (forall (($o@@12 T@U) ) (!  (=> (and (or (not (= $o@@12 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@10 $o@@12) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 $o@@12) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@10 $o@@12)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 $o@@12))
)) ($HeapSucc $Heap@10 $Heap@11))))) (and (=> (= (ControlFlow 0 2) (- 0 25)) true) (and (=> (= (ControlFlow 0 2) (- 0 24)) true) (and (=> (= (ControlFlow 0 2) (- 0 23)) true) (and (=> (= (ControlFlow 0 2) (- 0 22)) true) (and (=> (= (ControlFlow 0 2) (- 0 21)) true) (and (=> (= (ControlFlow 0 2) (- 0 20)) true) (=> (= |m00#0@0| (|Map#Build| |Map#Empty| ($Box refType call2formal@this@0@@0) ($Box refType call2formal@this@0@@1))) (and (=> (= (ControlFlow 0 2) (- 0 19)) true) (and (=> (= (ControlFlow 0 2) (- 0 18)) true) (=> (= |m01#0@0| (|Map#Build| |Map#Empty| ($Box refType call2formal@this@0@@0) ($Box refType call2formal@this@0@@1))) (and (=> (= (ControlFlow 0 2) (- 0 17)) true) (and (=> (= (ControlFlow 0 2) (- 0 16)) true) (=> (= |m10#0@0| (|Map#Build| |Map#Empty| ($Box refType call2formal@this@0@@0) ($Box refType call2formal@this@0@@1))) (and (=> (= (ControlFlow 0 2) (- 0 15)) true) (and (=> (= (ControlFlow 0 2) (- 0 14)) true) (=> (= |m11#0@0| (|Map#Build| |Map#Empty| ($Box refType call2formal@this@0@@0) ($Box refType call2formal@this@0@@1))) (and (=> (= (ControlFlow 0 2) (- 0 13)) true) (and (=> (= (ControlFlow 0 2) (- 0 12)) true) (and (=> (= (ControlFlow 0 2) (- 0 11)) true) (=> (= |n00#0@0| (|Map#Build| (|Map#Build| |Map#Empty| ($Box refType call2formal@this@0@@0) ($Box refType call2formal@this@0@@1)) ($Box refType null) ($Box refType call2formal@this@0@@2))) (and (=> (= (ControlFlow 0 2) (- 0 10)) true) (and (=> (= (ControlFlow 0 2) (- 0 9)) true) (and (=> (= (ControlFlow 0 2) (- 0 8)) true) (=> (= |n01#0@0| (|Map#Build| (|Map#Build| |Map#Empty| ($Box refType call2formal@this@0@@0) ($Box refType call2formal@this@0@@1)) ($Box refType null) ($Box refType call2formal@this@0@@2))) (and (=> (= (ControlFlow 0 2) (- 0 7)) true) (and (=> (= (ControlFlow 0 2) (- 0 6)) true) (=> (= |n10#0@0| (|Map#Build| |Map#Empty| ($Box refType call2formal@this@0@@0) ($Box refType call2formal@this@0@@1))) (and (=> (= (ControlFlow 0 2) (- 0 5)) true) (and (=> (= (ControlFlow 0 2) (- 0 4)) true) (and (=> (= (ControlFlow 0 2) (- 0 3)) true) (=> (and (= |n11#0@0| (|Map#Build| (|Map#Build| |Map#Empty| ($Box refType call2formal@this@0@@0) ($Box refType call2formal@this@0@@1)) ($Box refType null) ($Box refType call2formal@this@0@@2))) (= (ControlFlow 0 2) (- 0 1))) true))))))))))))))))))))))))))))))))))))
(let ((anon20_Else_correct  (=> (and (not (and (and (and (and (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |n#0@0|)) (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |p#0@0|))) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType |n#0@0|))) |p#0@0|)) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType |p#0@0|))) |n#0@0|)) (and (and (and (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |n#prime#0@0|)) (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |p#prime#0@0|))) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType |n#prime#0@0|))) |p#prime#0@0|)) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType |p#prime#0@0|))) |n#prime#0@0|)))) (= (ControlFlow 0 29) 2)) anon13_correct)))
(let ((anon20_Then_correct  (=> (and (and (and (and (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |n#0@0|)) (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |p#0@0|))) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType |n#0@0|))) |p#0@0|)) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType |p#0@0|))) |n#0@0|)) (and (and (and (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |n#prime#0@0|)) (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |p#prime#0@0|))) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType |n#prime#0@0|))) |p#prime#0@0|)) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType |p#prime#0@0|))) |n#prime#0@0|))) (and (=> (= (ControlFlow 0 27) (- 0 28)) (or (or (not (= |n#0@0| |n#prime#0@0|)) (not true)) (= call2formal@this@0 call2formal@this@0))) (=> (or (or (not (= |n#0@0| |n#prime#0@0|)) (not true)) (= call2formal@this@0 call2formal@this@0)) (=> (= (ControlFlow 0 27) 2) anon13_correct))))))
(let ((anon19_Else_correct  (=> (not (and (and (and (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |n#0@0|)) (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |p#0@0|))) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType |n#0@0|))) |p#0@0|)) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType |p#0@0|))) |n#0@0|))) (and (=> (= (ControlFlow 0 32) 27) anon20_Then_correct) (=> (= (ControlFlow 0 32) 29) anon20_Else_correct)))))
(let ((anon19_Then_correct  (=> (and (and (and (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |n#0@0|)) (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |p#0@0|))) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType |n#0@0|))) |p#0@0|)) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType |p#0@0|))) |n#0@0|)) (and (=> (= (ControlFlow 0 30) (- 0 31)) true) (and (=> (= (ControlFlow 0 30) 27) anon20_Then_correct) (=> (= (ControlFlow 0 30) 29) anon20_Else_correct))))))
(let ((anon18_Else_correct  (=> (not (and (and (and (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |n#0@0|)) (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |p#0@0|))) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType |n#0@0|))) |p#0@0|)) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType |p#0@0|))) |n#0@0|))) (and (=> (= (ControlFlow 0 34) 30) anon19_Then_correct) (=> (= (ControlFlow 0 34) 32) anon19_Else_correct)))))
(let ((anon18_Then_correct  (=> (and (and (and (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |n#0@0|)) (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |p#0@0|))) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType |n#0@0|))) |p#0@0|)) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType |p#0@0|))) |n#0@0|)) (and (=> (= (ControlFlow 0 33) 30) anon19_Then_correct) (=> (= (ControlFlow 0 33) 32) anon19_Else_correct)))))
(let ((anon17_Else_correct  (=> (not (and (and (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |n#0@0|)) (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |p#0@0|))) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType |n#0@0|))) |p#0@0|))) (and (=> (= (ControlFlow 0 37) 33) anon18_Then_correct) (=> (= (ControlFlow 0 37) 34) anon18_Else_correct)))))
(let ((anon17_Then_correct  (=> (and (and (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |n#0@0|)) (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |p#0@0|))) (= ($Unbox refType (MapType0Select BoxType BoxType (|Map#Elements| |b#0@0|) ($Box refType |n#0@0|))) |p#0@0|)) (and (=> (= (ControlFlow 0 35) (- 0 36)) (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |p#0@0|))) (=> (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |p#0@0|)) (and (=> (= (ControlFlow 0 35) 33) anon18_Then_correct) (=> (= (ControlFlow 0 35) 34) anon18_Else_correct)))))))
(let ((anon16_Else_correct  (=> (not (and (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |n#0@0|)) (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |p#0@0|)))) (and (=> (= (ControlFlow 0 40) 35) anon17_Then_correct) (=> (= (ControlFlow 0 40) 37) anon17_Else_correct)))))
(let ((anon16_Then_correct  (=> (and (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |n#0@0|)) (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |p#0@0|))) (and (=> (= (ControlFlow 0 38) (- 0 39)) (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |n#0@0|))) (=> (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |n#0@0|)) (and (=> (= (ControlFlow 0 38) 35) anon17_Then_correct) (=> (= (ControlFlow 0 38) 37) anon17_Else_correct)))))))
(let ((anon15_Else_correct  (=> (not (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |n#0@0|))) (and (=> (= (ControlFlow 0 42) 38) anon16_Then_correct) (=> (= (ControlFlow 0 42) 40) anon16_Else_correct)))))
(let ((anon15_Then_correct  (=> (|Set#IsMember| (|Map#Domain| |b#0@0|) ($Box refType |n#0@0|)) (and (=> (= (ControlFlow 0 41) 38) anon16_Then_correct) (=> (= (ControlFlow 0 41) 40) anon16_Else_correct)))))
(let ((anon14_Then_correct  (=> (and (and (and ($Is refType |n#0@0| Tclass._module.Integer) ($IsAlloc refType |n#0@0| Tclass._module.Integer $Heap@8)) (and ($Is refType |p#0@0| Tclass._module.Number?) ($IsAlloc refType |p#0@0| Tclass._module.Number? $Heap@8))) (and (and ($Is refType |n#prime#0@0| Tclass._module.Integer) ($IsAlloc refType |n#prime#0@0| Tclass._module.Integer $Heap@8)) (and ($Is refType |p#prime#0@0| Tclass._module.Number?) ($IsAlloc refType |p#prime#0@0| Tclass._module.Number? $Heap@8)))) (and (=> (= (ControlFlow 0 43) 41) anon15_Then_correct) (=> (= (ControlFlow 0 43) 42) anon15_Else_correct)))))
(let ((anon14_Else_correct  (=> (and (not (and (and ($Is refType |n#0@0| Tclass._module.Integer) ($IsAlloc refType |n#0@0| Tclass._module.Integer $Heap@8)) (and ($Is refType |p#0@0| Tclass._module.Number?) ($IsAlloc refType |p#0@0| Tclass._module.Number? $Heap@8)))) (= (ControlFlow 0 26) 2)) anon13_correct)))
(let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (= |value##0@0| (LitInt 12))) (=> (and (and (and (or (not (= call2formal@this null)) (not true)) (and ($Is refType call2formal@this Tclass._module.Integer) ($IsAlloc refType call2formal@this Tclass._module.Integer $Heap))) (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0))) (and (and (or (not (= call2formal@this@0 null)) (not true)) (and ($Is refType call2formal@this@0 Tclass._module.Integer) ($IsAlloc refType call2formal@this@0 Tclass._module.Integer $Heap@0))) (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap call2formal@this@0) alloc)))) (forall (($o@@13 T@U) ) (!  (=> (and (or (not (= $o@@13 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@13) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@13) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@13)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@13))
))))) (=> (and (and (and (and (and ($HeapSucc $Heap $Heap@0) (= |value##1@0| (LitInt 17))) (and (or (not (= call2formal@this@@0 null)) (not true)) (and ($Is refType call2formal@this@@0 Tclass._module.Integer) ($IsAlloc refType call2formal@this@@0 Tclass._module.Integer $Heap)))) (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (and (or (not (= call2formal@this@0@@0 null)) (not true)) (and ($Is refType call2formal@this@0@@0 Tclass._module.Integer) ($IsAlloc refType call2formal@this@0@@0 Tclass._module.Integer $Heap@1))))) (and (and (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 call2formal@this@0@@0) alloc)))) (forall (($o@@14 T@U) ) (!  (=> (and (or (not (= $o@@14 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@14) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@14) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@14)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@14))
))) (and ($HeapSucc $Heap@0 $Heap@1) (= |value##2@0| (LitInt 42)))) (and (and (or (not (= call2formal@this@@1 null)) (not true)) (and ($Is refType call2formal@this@@1 Tclass._module.Integer) ($IsAlloc refType call2formal@this@@1 Tclass._module.Integer $Heap))) (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2))))) (and (and (and (and (or (not (= call2formal@this@0@@1 null)) (not true)) (and ($Is refType call2formal@this@0@@1 Tclass._module.Integer) ($IsAlloc refType call2formal@this@0@@1 Tclass._module.Integer $Heap@2))) (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 call2formal@this@0@@1) alloc)))) (forall (($o@@15 T@U) ) (!  (=> (and (or (not (= $o@@15 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@15) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@15) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@15)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@15))
)))) (and (and ($HeapSucc $Heap@1 $Heap@2) (= |value##3@0| (LitInt 82))) (and (or (not (= call2formal@this@@2 null)) (not true)) (and ($Is refType call2formal@this@@2 Tclass._module.Integer) ($IsAlloc refType call2formal@this@@2 Tclass._module.Integer $Heap))))) (and (and (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (and (or (not (= call2formal@this@0@@2 null)) (not true)) (and ($Is refType call2formal@this@0@@2 Tclass._module.Integer) ($IsAlloc refType call2formal@this@0@@2 Tclass._module.Integer $Heap@3)))) (and (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 call2formal@this@0@@2) alloc)))) (forall (($o@@16 T@U) ) (!  (=> (and (or (not (= $o@@16 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@16) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@16) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@16)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@16))
))) (and ($HeapSucc $Heap@2 $Heap@3) (= |a#0@0| (Lit MapType |Map#Empty|))))))) (and (=> (= (ControlFlow 0 44) (- 0 58)) true) (and (=> (= (ControlFlow 0 44) (- 0 57)) true) (and (=> (= (ControlFlow 0 44) (- 0 56)) true) (and (=> (= (ControlFlow 0 44) (- 0 55)) true) (and (=> (= (ControlFlow 0 44) (- 0 54)) true) (and (=> (= (ControlFlow 0 44) (- 0 53)) true) (=> (= |b#0@0| (|Map#Build| (|Map#Build| (|Map#Build| |Map#Empty| ($Box refType call2formal@this@0@@0) ($Box refType call2formal@this@0@@2)) ($Box refType call2formal@this@0@@2) ($Box refType call2formal@this@0@@0)) ($Box refType call2formal@this@0) ($Box refType call2formal@this@0@@0))) (and (=> (= (ControlFlow 0 44) (- 0 52)) true) (and (=> (= (ControlFlow 0 44) (- 0 51)) true) (and (=> (= (ControlFlow 0 44) (- 0 50)) true) (and (=> (= (ControlFlow 0 44) (- 0 49)) true) (=> (and (= |c#0@0| (|Map#Build| (|Map#Build| |Map#Empty| ($Box refType call2formal@this@0) ($Box refType call2formal@this@0@@0)) ($Box refType call2formal@this@0@@0) ($Box refType call2formal@this@0@@0))) (= |prefix##0@0| (Lit SeqType (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box charType (|char#FromInt| 77))) ($Box charType (|char#FromInt| 97))) ($Box charType (|char#FromInt| 112))) ($Box charType (|char#FromInt| 115))) ($Box charType (|char#FromInt| 58))) ($Box charType (|char#FromInt| 32)))))) (=> (and (and (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (forall (($o@@17 T@U) ) (!  (=> (and (or (not (= $o@@17 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@17) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@17) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@17)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@17))
))) (and ($HeapSucc $Heap@3 $Heap@4) (= |prefix##1@0| (Lit SeqType (|Seq#Build| |Seq#Empty| ($Box charType (|char#FromInt| 32))))))) (=> (and (and (and (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (forall (($o@@18 T@U) ) (!  (=> (and (or (not (= $o@@18 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@18) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@18) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@18)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@18))
))) (and ($HeapSucc $Heap@4 $Heap@5) (= |prefix##2@0| (Lit SeqType (|Seq#Build| |Seq#Empty| ($Box charType (|char#FromInt| 32))))))) (and (and (and ($IsGoodHeap $Heap@6) ($IsHeapAnchor $Heap@6)) (forall (($o@@19 T@U) ) (!  (=> (and (or (not (= $o@@19 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@19) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@19) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@19)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@19))
))) (and ($HeapSucc $Heap@5 $Heap@6) (= |prefix##3@0| (Lit SeqType (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box charType (|char#FromInt| 32))) ($Box charType (|char#FromInt| 32))) ($Box charType (|char#FromInt| 117))) ($Box charType (|char#FromInt| 112))) ($Box charType (|char#FromInt| 100))) ($Box charType (|char#FromInt| 97))) ($Box charType (|char#FromInt| 116))) ($Box charType (|char#FromInt| 101))) ($Box charType (|char#FromInt| 58))) ($Box charType (|char#FromInt| 32)))))))) (and (=> (= (ControlFlow 0 44) (- 0 48)) true) (and (=> (= (ControlFlow 0 44) (- 0 47)) true) (=> (= |M##3@0| (|Map#Build| |b#0@0| ($Box refType call2formal@this@0@@1) ($Box refType call2formal@this@0@@0))) (=> (and (and (and ($IsGoodHeap $Heap@7) ($IsHeapAnchor $Heap@7)) (forall (($o@@20 T@U) ) (!  (=> (and (or (not (= $o@@20 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@20) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@20) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@20)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@20))
))) (and ($HeapSucc $Heap@6 $Heap@7) (= |prefix##4@0| (Lit SeqType (|Seq#Build| |Seq#Empty| ($Box charType (|char#FromInt| 32))))))) (and (=> (= (ControlFlow 0 44) (- 0 46)) true) (and (=> (= (ControlFlow 0 44) (- 0 45)) true) (=> (= |M##4@0| (|Map#Build| |c#0@0| ($Box refType call2formal@this@0) ($Box refType call2formal@this@0@@1))) (=> (and (and ($IsGoodHeap $Heap@8) ($IsHeapAnchor $Heap@8)) (and (forall (($o@@21 T@U) ) (!  (=> (and (or (not (= $o@@21 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@21) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 $o@@21) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@21)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 $o@@21))
)) ($HeapSucc $Heap@7 $Heap@8))) (and (=> (= (ControlFlow 0 44) 43) anon14_Then_correct) (=> (= (ControlFlow 0 44) 26) anon14_Else_correct)))))))))))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (=> |defass#twelve#0| (and ($Is refType |twelve#0| Tclass._module.Integer) ($IsAlloc refType |twelve#0| Tclass._module.Integer $Heap))) true) (and (=> |defass#seventeen#0| (and ($Is refType |seventeen#0| Tclass._module.Integer) ($IsAlloc refType |seventeen#0| Tclass._module.Integer $Heap))) true)) (=> (and (and (and (=> |defass#fortyTwo#0| (and ($Is refType |fortyTwo#0| Tclass._module.Integer) ($IsAlloc refType |fortyTwo#0| Tclass._module.Integer $Heap))) true) (and (=> |defass#eightyTwo#0| (and ($Is refType |eightyTwo#0| Tclass._module.Integer) ($IsAlloc refType |eightyTwo#0| Tclass._module.Integer $Heap))) true)) (and (and ($Is MapType |a#0| (TMap Tclass._module.Number Tclass._module.Number)) ($IsAlloc MapType |a#0| (TMap Tclass._module.Number Tclass._module.Number) $Heap)) true)) (=> (and (and (and (and ($Is MapType |b#0| (TMap Tclass._module.Number Tclass._module.Number)) ($IsAlloc MapType |b#0| (TMap Tclass._module.Number Tclass._module.Number) $Heap)) true) (and (and ($Is MapType |c#0@@5| (TMap Tclass._module.Integer Tclass._module.Integer)) ($IsAlloc MapType |c#0@@5| (TMap Tclass._module.Integer Tclass._module.Integer) $Heap)) true)) (and (and (and ($Is MapType |comprehension#0| (TMap Tclass._module.Integer Tclass._module.Integer)) ($IsAlloc MapType |comprehension#0| (TMap Tclass._module.Integer Tclass._module.Integer) $Heap)) true) (and (and ($Is MapType |m00#0| (TMap Tclass._module.Number Tclass._module.Number)) ($IsAlloc MapType |m00#0| (TMap Tclass._module.Number Tclass._module.Number) $Heap)) true))) (=> (and (and (and (and (and ($Is MapType |m01#0| (TMap Tclass._module.Number Tclass._module.Integer)) ($IsAlloc MapType |m01#0| (TMap Tclass._module.Number Tclass._module.Integer) $Heap)) true) (and (and ($Is MapType |m10#0| (TMap Tclass._module.Integer Tclass._module.Number)) ($IsAlloc MapType |m10#0| (TMap Tclass._module.Integer Tclass._module.Number) $Heap)) true)) (and (and (and ($Is MapType |m11#0| (TMap Tclass._module.Integer Tclass._module.Integer)) ($IsAlloc MapType |m11#0| (TMap Tclass._module.Integer Tclass._module.Integer) $Heap)) true) (and (and ($Is MapType |n00#0| (TMap Tclass._module.Number? Tclass._module.Number)) ($IsAlloc MapType |n00#0| (TMap Tclass._module.Number? Tclass._module.Number) $Heap)) true))) (and (and (and (and ($Is MapType |n01#0| (TMap Tclass._module.Number? Tclass._module.Integer)) ($IsAlloc MapType |n01#0| (TMap Tclass._module.Number? Tclass._module.Integer) $Heap)) true) (and (and ($Is MapType |n10#0| (TMap Tclass._module.Integer? Tclass._module.Number)) ($IsAlloc MapType |n10#0| (TMap Tclass._module.Integer? Tclass._module.Number) $Heap)) true)) (and (and (and ($Is MapType |n11#0| (TMap Tclass._module.Integer? Tclass._module.Integer)) ($IsAlloc MapType |n11#0| (TMap Tclass._module.Integer? Tclass._module.Integer) $Heap)) true) (and (= 4 $FunctionContextHeight) (= (ControlFlow 0 59) 44))))) anon0_correct)))))))
PreconditionGeneratedEntry_correct))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
