(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.___hFunc3 () T@U)
(declare-fun Tagclass._System.___hPartialFunc3 () T@U)
(declare-fun Tagclass._System.___hTotalFunc3 () T@U)
(declare-fun Tagclass.FunctionsAsValues.Trait? () T@U)
(declare-fun Tagclass.FunctionsAsValues.Trait () T@U)
(declare-fun |tytagFamily$_#Func3| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3| () T@U)
(declare-fun tytagFamily$Trait () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tclass._System.___hFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_3 (T@U) T@U)
(declare-fun |FunctionsAsValues.Trait.Select#requires| (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass.FunctionsAsValues.Trait (T@U T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun Tclass.FunctionsAsValues.Trait? (T@U T@U T@U) T@U)
(declare-fun Tclass.FunctionsAsValues.Trait?_0 (T@U) T@U)
(declare-fun Tclass.FunctionsAsValues.Trait?_1 (T@U) T@U)
(declare-fun Tclass.FunctionsAsValues.Trait?_2 (T@U) T@U)
(declare-fun Tclass.FunctionsAsValues.Trait_0 (T@U) T@U)
(declare-fun Tclass.FunctionsAsValues.Trait_1 (T@U) T@U)
(declare-fun Tclass.FunctionsAsValues.Trait_2 (T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun HandleTypeType () T@T)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Apply3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Reads3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Requires3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun FunctionsAsValues.Trait.ApplySelect (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |FunctionsAsValues.Trait.ApplySelect#canCall| (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |FunctionsAsValues.Trait.Select#Handle| (T@U T@U T@U T@U) T@U)
(declare-fun $OneHeap () T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun FunctionsAsValues.Trait.Select (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |FunctionsAsValues.Trait.Select#canCall| (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun implements$FunctionsAsValues.Trait (T@U T@U T@U T@U) Bool)
(declare-fun dtype (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc Tagclass._System.___hFunc3 Tagclass._System.___hPartialFunc3 Tagclass._System.___hTotalFunc3 Tagclass.FunctionsAsValues.Trait? Tagclass.FunctionsAsValues.Trait |tytagFamily$_#Func3| |tytagFamily$_#PartialFunc3| |tytagFamily$_#TotalFunc3| tytagFamily$Trait)
)
(assert (forall ((|#$T0| T@U) (|#$T1| T@U) (|#$T2| T@U) (|#$R| T@U) ) (! (= (Tclass._System.___hFunc3_0 (Tclass._System.___hFunc3 |#$T0| |#$T1| |#$T2| |#$R|)) |#$T0|)
 :pattern ( (Tclass._System.___hFunc3 |#$T0| |#$T1| |#$T2| |#$R|))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$T1@@0| T@U) (|#$T2@@0| T@U) (|#$R@@0| T@U) ) (! (= (Tclass._System.___hFunc3_1 (Tclass._System.___hFunc3 |#$T0@@0| |#$T1@@0| |#$T2@@0| |#$R@@0|)) |#$T1@@0|)
 :pattern ( (Tclass._System.___hFunc3 |#$T0@@0| |#$T1@@0| |#$T2@@0| |#$R@@0|))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$T1@@1| T@U) (|#$T2@@1| T@U) (|#$R@@1| T@U) ) (! (= (Tclass._System.___hFunc3_2 (Tclass._System.___hFunc3 |#$T0@@1| |#$T1@@1| |#$T2@@1| |#$R@@1|)) |#$T2@@1|)
 :pattern ( (Tclass._System.___hFunc3 |#$T0@@1| |#$T1@@1| |#$T2@@1| |#$R@@1|))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$T1@@2| T@U) (|#$T2@@2| T@U) (|#$R@@2| T@U) ) (! (= (Tclass._System.___hFunc3_3 (Tclass._System.___hFunc3 |#$T0@@2| |#$T1@@2| |#$T2@@2| |#$R@@2|)) |#$R@@2|)
 :pattern ( (Tclass._System.___hFunc3 |#$T0@@2| |#$T1@@2| |#$T2@@2| |#$R@@2|))
)))
(assert (forall ((|#$T0@@3| T@U) (|#$T1@@3| T@U) (|#$T2@@3| T@U) (|#$R@@3| T@U) ) (! (= (Tclass._System.___hPartialFunc3_0 (Tclass._System.___hPartialFunc3 |#$T0@@3| |#$T1@@3| |#$T2@@3| |#$R@@3|)) |#$T0@@3|)
 :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@3| |#$T1@@3| |#$T2@@3| |#$R@@3|))
)))
(assert (forall ((|#$T0@@4| T@U) (|#$T1@@4| T@U) (|#$T2@@4| T@U) (|#$R@@4| T@U) ) (! (= (Tclass._System.___hPartialFunc3_1 (Tclass._System.___hPartialFunc3 |#$T0@@4| |#$T1@@4| |#$T2@@4| |#$R@@4|)) |#$T1@@4|)
 :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@4| |#$T1@@4| |#$T2@@4| |#$R@@4|))
)))
(assert (forall ((|#$T0@@5| T@U) (|#$T1@@5| T@U) (|#$T2@@5| T@U) (|#$R@@5| T@U) ) (! (= (Tclass._System.___hPartialFunc3_2 (Tclass._System.___hPartialFunc3 |#$T0@@5| |#$T1@@5| |#$T2@@5| |#$R@@5|)) |#$T2@@5|)
 :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@5| |#$T1@@5| |#$T2@@5| |#$R@@5|))
)))
(assert (forall ((|#$T0@@6| T@U) (|#$T1@@6| T@U) (|#$T2@@6| T@U) (|#$R@@6| T@U) ) (! (= (Tclass._System.___hPartialFunc3_3 (Tclass._System.___hPartialFunc3 |#$T0@@6| |#$T1@@6| |#$T2@@6| |#$R@@6|)) |#$R@@6|)
 :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@6| |#$T1@@6| |#$T2@@6| |#$R@@6|))
)))
(assert (forall ((|#$T0@@7| T@U) (|#$T1@@7| T@U) (|#$T2@@7| T@U) (|#$R@@7| T@U) ) (! (= (Tclass._System.___hTotalFunc3_0 (Tclass._System.___hTotalFunc3 |#$T0@@7| |#$T1@@7| |#$T2@@7| |#$R@@7|)) |#$T0@@7|)
 :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@7| |#$T1@@7| |#$T2@@7| |#$R@@7|))
)))
(assert (forall ((|#$T0@@8| T@U) (|#$T1@@8| T@U) (|#$T2@@8| T@U) (|#$R@@8| T@U) ) (! (= (Tclass._System.___hTotalFunc3_1 (Tclass._System.___hTotalFunc3 |#$T0@@8| |#$T1@@8| |#$T2@@8| |#$R@@8|)) |#$T1@@8|)
 :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@8| |#$T1@@8| |#$T2@@8| |#$R@@8|))
)))
(assert (forall ((|#$T0@@9| T@U) (|#$T1@@9| T@U) (|#$T2@@9| T@U) (|#$R@@9| T@U) ) (! (= (Tclass._System.___hTotalFunc3_2 (Tclass._System.___hTotalFunc3 |#$T0@@9| |#$T1@@9| |#$T2@@9| |#$R@@9|)) |#$T2@@9|)
 :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@9| |#$T1@@9| |#$T2@@9| |#$R@@9|))
)))
(assert (forall ((|#$T0@@10| T@U) (|#$T1@@10| T@U) (|#$T2@@10| T@U) (|#$R@@10| T@U) ) (! (= (Tclass._System.___hTotalFunc3_3 (Tclass._System.___hTotalFunc3 |#$T0@@10| |#$T1@@10| |#$T2@@10| |#$R@@10|)) |#$R@@10|)
 :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@10| |#$T1@@10| |#$T2@@10| |#$R@@10|))
)))
(assert (= (Ctor refType) 3))
(assert (forall ((FunctionsAsValues.Trait$G T@U) (FunctionsAsValues.Trait$H T@U) (FunctionsAsValues.Trait$J T@U) (this T@U) (|g#0| T@U) (|h#0| T@U) (|j#0| T@U) ) (!  (=> (and (and (and (and (or (not (= this null)) (not true)) ($Is refType this (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G FunctionsAsValues.Trait$H FunctionsAsValues.Trait$J))) ($IsBox |g#0| FunctionsAsValues.Trait$G)) ($IsBox |h#0| FunctionsAsValues.Trait$H)) ($IsBox |j#0| FunctionsAsValues.Trait$J)) (= (|FunctionsAsValues.Trait.Select#requires| FunctionsAsValues.Trait$G FunctionsAsValues.Trait$H FunctionsAsValues.Trait$J this |g#0| |h#0| |j#0|) true))
 :pattern ( (|FunctionsAsValues.Trait.Select#requires| FunctionsAsValues.Trait$G FunctionsAsValues.Trait$H FunctionsAsValues.Trait$J this |g#0| |h#0| |j#0|))
)))
(assert (forall ((FunctionsAsValues.Trait$G@@0 T@U) (FunctionsAsValues.Trait$H@@0 T@U) (FunctionsAsValues.Trait$J@@0 T@U) ) (! (= (Tclass.FunctionsAsValues.Trait?_0 (Tclass.FunctionsAsValues.Trait? FunctionsAsValues.Trait$G@@0 FunctionsAsValues.Trait$H@@0 FunctionsAsValues.Trait$J@@0)) FunctionsAsValues.Trait$G@@0)
 :pattern ( (Tclass.FunctionsAsValues.Trait? FunctionsAsValues.Trait$G@@0 FunctionsAsValues.Trait$H@@0 FunctionsAsValues.Trait$J@@0))
)))
(assert (forall ((FunctionsAsValues.Trait$G@@1 T@U) (FunctionsAsValues.Trait$H@@1 T@U) (FunctionsAsValues.Trait$J@@1 T@U) ) (! (= (Tclass.FunctionsAsValues.Trait?_1 (Tclass.FunctionsAsValues.Trait? FunctionsAsValues.Trait$G@@1 FunctionsAsValues.Trait$H@@1 FunctionsAsValues.Trait$J@@1)) FunctionsAsValues.Trait$H@@1)
 :pattern ( (Tclass.FunctionsAsValues.Trait? FunctionsAsValues.Trait$G@@1 FunctionsAsValues.Trait$H@@1 FunctionsAsValues.Trait$J@@1))
)))
(assert (forall ((FunctionsAsValues.Trait$G@@2 T@U) (FunctionsAsValues.Trait$H@@2 T@U) (FunctionsAsValues.Trait$J@@2 T@U) ) (! (= (Tclass.FunctionsAsValues.Trait?_2 (Tclass.FunctionsAsValues.Trait? FunctionsAsValues.Trait$G@@2 FunctionsAsValues.Trait$H@@2 FunctionsAsValues.Trait$J@@2)) FunctionsAsValues.Trait$J@@2)
 :pattern ( (Tclass.FunctionsAsValues.Trait? FunctionsAsValues.Trait$G@@2 FunctionsAsValues.Trait$H@@2 FunctionsAsValues.Trait$J@@2))
)))
(assert (forall ((FunctionsAsValues.Trait$G@@3 T@U) (FunctionsAsValues.Trait$H@@3 T@U) (FunctionsAsValues.Trait$J@@3 T@U) ) (! (= (Tclass.FunctionsAsValues.Trait_0 (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@3 FunctionsAsValues.Trait$H@@3 FunctionsAsValues.Trait$J@@3)) FunctionsAsValues.Trait$G@@3)
 :pattern ( (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@3 FunctionsAsValues.Trait$H@@3 FunctionsAsValues.Trait$J@@3))
)))
(assert (forall ((FunctionsAsValues.Trait$G@@4 T@U) (FunctionsAsValues.Trait$H@@4 T@U) (FunctionsAsValues.Trait$J@@4 T@U) ) (! (= (Tclass.FunctionsAsValues.Trait_1 (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@4 FunctionsAsValues.Trait$H@@4 FunctionsAsValues.Trait$J@@4)) FunctionsAsValues.Trait$H@@4)
 :pattern ( (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@4 FunctionsAsValues.Trait$H@@4 FunctionsAsValues.Trait$J@@4))
)))
(assert (forall ((FunctionsAsValues.Trait$G@@5 T@U) (FunctionsAsValues.Trait$H@@5 T@U) (FunctionsAsValues.Trait$J@@5 T@U) ) (! (= (Tclass.FunctionsAsValues.Trait_2 (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@5 FunctionsAsValues.Trait$H@@5 FunctionsAsValues.Trait$J@@5)) FunctionsAsValues.Trait$J@@5)
 :pattern ( (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@5 FunctionsAsValues.Trait$H@@5 FunctionsAsValues.Trait$J@@5))
)))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert  (and (and (and (and (and (and (and (= (Ctor HandleTypeType) 4) (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
))) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((f T@U) (t0@@0 T@U) (t1@@0 T@U) (t2 T@U) (t3 T@U) (h T@U) ) (!  (=> ($IsGoodHeap h) (= ($IsAlloc HandleTypeType f (Tclass._System.___hFunc3 t0@@0 t1@@0 t2 t3) h) (forall ((bx0 T@U) (bx1 T@U) (bx2 T@U) ) (!  (=> (and (and (and (and ($IsBox bx0 t0@@0) ($IsAllocBox bx0 t0@@0 h)) (and ($IsBox bx1 t1@@0) ($IsAllocBox bx1 t1@@0 h))) (and ($IsBox bx2 t2) ($IsAllocBox bx2 t2 h))) (Requires3 t0@@0 t1@@0 t2 t3 h f bx0 bx1 bx2)) (forall ((r T@U) ) (!  (=> (and (or (not (= r null)) (not true)) (|Set#IsMember| (Reads3 t0@@0 t1@@0 t2 t3 h f bx0 bx1 bx2) ($Box refType r))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h r) alloc))))
 :pattern ( (|Set#IsMember| (Reads3 t0@@0 t1@@0 t2 t3 h f bx0 bx1 bx2) ($Box refType r)))
)))
 :pattern ( (Apply3 t0@@0 t1@@0 t2 t3 h f bx0 bx1 bx2))
 :pattern ( (Reads3 t0@@0 t1@@0 t2 t3 h f bx0 bx1 bx2))
))))
 :pattern ( ($IsAlloc HandleTypeType f (Tclass._System.___hFunc3 t0@@0 t1@@0 t2 t3) h))
)))
(assert (forall ((FunctionsAsValues.Trait$G@@6 T@U) (FunctionsAsValues.Trait$H@@6 T@U) (FunctionsAsValues.Trait$J@@6 T@U) ) (!  (and (= (Tag (Tclass.FunctionsAsValues.Trait? FunctionsAsValues.Trait$G@@6 FunctionsAsValues.Trait$H@@6 FunctionsAsValues.Trait$J@@6)) Tagclass.FunctionsAsValues.Trait?) (= (TagFamily (Tclass.FunctionsAsValues.Trait? FunctionsAsValues.Trait$G@@6 FunctionsAsValues.Trait$H@@6 FunctionsAsValues.Trait$J@@6)) tytagFamily$Trait))
 :pattern ( (Tclass.FunctionsAsValues.Trait? FunctionsAsValues.Trait$G@@6 FunctionsAsValues.Trait$H@@6 FunctionsAsValues.Trait$J@@6))
)))
(assert (forall ((FunctionsAsValues.Trait$G@@7 T@U) (FunctionsAsValues.Trait$H@@7 T@U) (FunctionsAsValues.Trait$J@@7 T@U) ) (!  (and (= (Tag (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@7 FunctionsAsValues.Trait$H@@7 FunctionsAsValues.Trait$J@@7)) Tagclass.FunctionsAsValues.Trait) (= (TagFamily (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@7 FunctionsAsValues.Trait$H@@7 FunctionsAsValues.Trait$J@@7)) tytagFamily$Trait))
 :pattern ( (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@7 FunctionsAsValues.Trait$H@@7 FunctionsAsValues.Trait$J@@7))
)))
(assert (forall ((FunctionsAsValues.Trait$G@@8 T@U) (FunctionsAsValues.Trait$H@@8 T@U) (FunctionsAsValues.Trait$J@@8 T@U) (bx T@U) ) (!  (=> ($IsBox bx (Tclass.FunctionsAsValues.Trait? FunctionsAsValues.Trait$G@@8 FunctionsAsValues.Trait$H@@8 FunctionsAsValues.Trait$J@@8)) (and (= ($Box refType ($Unbox refType bx)) bx) ($Is refType ($Unbox refType bx) (Tclass.FunctionsAsValues.Trait? FunctionsAsValues.Trait$G@@8 FunctionsAsValues.Trait$H@@8 FunctionsAsValues.Trait$J@@8))))
 :pattern ( ($IsBox bx (Tclass.FunctionsAsValues.Trait? FunctionsAsValues.Trait$G@@8 FunctionsAsValues.Trait$H@@8 FunctionsAsValues.Trait$J@@8)))
)))
(assert (forall ((FunctionsAsValues.Trait$G@@9 T@U) (FunctionsAsValues.Trait$H@@9 T@U) (FunctionsAsValues.Trait$J@@9 T@U) (bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@9 FunctionsAsValues.Trait$H@@9 FunctionsAsValues.Trait$J@@9)) (and (= ($Box refType ($Unbox refType bx@@0)) bx@@0) ($Is refType ($Unbox refType bx@@0) (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@9 FunctionsAsValues.Trait$H@@9 FunctionsAsValues.Trait$J@@9))))
 :pattern ( ($IsBox bx@@0 (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@9 FunctionsAsValues.Trait$H@@9 FunctionsAsValues.Trait$J@@9)))
)))
(assert (forall ((FunctionsAsValues.Trait$G@@10 T@U) (FunctionsAsValues.Trait$H@@10 T@U) (FunctionsAsValues.Trait$J@@10 T@U) (|c#0| T@U) ) (! (= ($Is refType |c#0| (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@10 FunctionsAsValues.Trait$H@@10 FunctionsAsValues.Trait$J@@10))  (and ($Is refType |c#0| (Tclass.FunctionsAsValues.Trait? FunctionsAsValues.Trait$G@@10 FunctionsAsValues.Trait$H@@10 FunctionsAsValues.Trait$J@@10)) (or (not (= |c#0| null)) (not true))))
 :pattern ( ($Is refType |c#0| (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@10 FunctionsAsValues.Trait$H@@10 FunctionsAsValues.Trait$J@@10)))
 :pattern ( ($Is refType |c#0| (Tclass.FunctionsAsValues.Trait? FunctionsAsValues.Trait$G@@10 FunctionsAsValues.Trait$H@@10 FunctionsAsValues.Trait$J@@10)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((FunctionsAsValues.Trait$G@@11 T@U) (FunctionsAsValues.Trait$H@@11 T@U) (FunctionsAsValues.Trait$J@@11 T@U) ($Heap T@U) (this@@0 T@U) (|g#0@@0| T@U) (|h#0@@0| T@U) (|j#0@@0| T@U) ) (!  (=> (or (|FunctionsAsValues.Trait.ApplySelect#canCall| FunctionsAsValues.Trait$G@@11 FunctionsAsValues.Trait$H@@11 FunctionsAsValues.Trait$J@@11 (Lit refType this@@0) (Lit BoxType |g#0@@0|) (Lit BoxType |h#0@@0|) (Lit BoxType |j#0@@0|)) (and (< 1 $FunctionContextHeight) (and (and (and (and ($IsGoodHeap $Heap) (and (or (not (= this@@0 null)) (not true)) (and ($Is refType this@@0 (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@11 FunctionsAsValues.Trait$H@@11 FunctionsAsValues.Trait$J@@11)) ($IsAlloc refType this@@0 (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@11 FunctionsAsValues.Trait$H@@11 FunctionsAsValues.Trait$J@@11) $Heap)))) ($IsBox |g#0@@0| FunctionsAsValues.Trait$G@@11)) ($IsBox |h#0@@0| FunctionsAsValues.Trait$H@@11)) ($IsBox |j#0@@0| FunctionsAsValues.Trait$J@@11)))) (= (FunctionsAsValues.Trait.ApplySelect FunctionsAsValues.Trait$G@@11 FunctionsAsValues.Trait$H@@11 FunctionsAsValues.Trait$J@@11 (Lit refType this@@0) (Lit BoxType |g#0@@0|) (Lit BoxType |h#0@@0|) (Lit BoxType |j#0@@0|)) (let ((|f#1| (|FunctionsAsValues.Trait.Select#Handle| FunctionsAsValues.Trait$G@@11 FunctionsAsValues.Trait$H@@11 FunctionsAsValues.Trait$J@@11 (Lit refType this@@0))))
(Apply3 FunctionsAsValues.Trait$G@@11 FunctionsAsValues.Trait$H@@11 FunctionsAsValues.Trait$J@@11 FunctionsAsValues.Trait$G@@11 $Heap |f#1| (Lit BoxType |g#0@@0|) (Lit BoxType |h#0@@0|) (Lit BoxType |j#0@@0|)))))
 :weight 3
 :pattern ( (FunctionsAsValues.Trait.ApplySelect FunctionsAsValues.Trait$G@@11 FunctionsAsValues.Trait$H@@11 FunctionsAsValues.Trait$J@@11 (Lit refType this@@0) (Lit BoxType |g#0@@0|) (Lit BoxType |h#0@@0|) (Lit BoxType |j#0@@0|)) ($IsGoodHeap $Heap))
))))
(assert (forall ((t0@@1 T@U) (t1@@1 T@U) (t2@@0 T@U) (t3@@0 T@U) (heap T@U) (f@@0 T@U) (bx0@@0 T@U) (bx1@@0 T@U) (bx2@@0 T@U) ) (!  (=> (and ($IsGoodHeap heap) (and (and (and ($IsBox bx0@@0 t0@@1) ($IsBox bx1@@0 t1@@1)) ($IsBox bx2@@0 t2@@0)) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc3 t0@@1 t1@@1 t2@@0 t3@@0)))) (= (|Set#Equal| (Reads3 t0@@1 t1@@1 t2@@0 t3@@0 $OneHeap f@@0 bx0@@0 bx1@@0 bx2@@0) |Set#Empty|) (|Set#Equal| (Reads3 t0@@1 t1@@1 t2@@0 t3@@0 heap f@@0 bx0@@0 bx1@@0 bx2@@0) |Set#Empty|)))
 :pattern ( (Reads3 t0@@1 t1@@1 t2@@0 t3@@0 $OneHeap f@@0 bx0@@0 bx1@@0 bx2@@0) ($IsGoodHeap heap))
 :pattern ( (Reads3 t0@@1 t1@@1 t2@@0 t3@@0 heap f@@0 bx0@@0 bx1@@0 bx2@@0))
)))
(assert (forall ((f@@1 T@U) (t0@@2 T@U) (t1@@2 T@U) (t2@@1 T@U) (t3@@1 T@U) (u0@@0 T@U) (u1@@0 T@U) (u2 T@U) (u3 T@U) ) (!  (=> (and (and (and (and ($Is HandleTypeType f@@1 (Tclass._System.___hFunc3 t0@@2 t1@@2 t2@@1 t3@@1)) (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 u0@@0) ($IsBox bx@@1 t0@@2))
 :pattern ( ($IsBox bx@@1 u0@@0))
 :pattern ( ($IsBox bx@@1 t0@@2))
))) (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 u1@@0) ($IsBox bx@@2 t1@@2))
 :pattern ( ($IsBox bx@@2 u1@@0))
 :pattern ( ($IsBox bx@@2 t1@@2))
))) (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 u2) ($IsBox bx@@3 t2@@1))
 :pattern ( ($IsBox bx@@3 u2))
 :pattern ( ($IsBox bx@@3 t2@@1))
))) (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 t3@@1) ($IsBox bx@@4 u3))
 :pattern ( ($IsBox bx@@4 t3@@1))
 :pattern ( ($IsBox bx@@4 u3))
))) ($Is HandleTypeType f@@1 (Tclass._System.___hFunc3 u0@@0 u1@@0 u2 u3)))
 :pattern ( ($Is HandleTypeType f@@1 (Tclass._System.___hFunc3 t0@@2 t1@@2 t2@@1 t3@@1)) ($Is HandleTypeType f@@1 (Tclass._System.___hFunc3 u0@@0 u1@@0 u2 u3)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((FunctionsAsValues.Trait$G@@12 T@U) (FunctionsAsValues.Trait$H@@12 T@U) (FunctionsAsValues.Trait$J@@12 T@U) ($Heap@@0 T@U) (this@@1 T@U) (|g#0@@1| T@U) (|h#0@@1| T@U) (|j#0@@1| T@U) ) (!  (=> (or (|FunctionsAsValues.Trait.ApplySelect#canCall| FunctionsAsValues.Trait$G@@12 FunctionsAsValues.Trait$H@@12 FunctionsAsValues.Trait$J@@12 this@@1 |g#0@@1| |h#0@@1| |j#0@@1|) (and (< 1 $FunctionContextHeight) (and (and (and (and ($IsGoodHeap $Heap@@0) (and (or (not (= this@@1 null)) (not true)) (and ($Is refType this@@1 (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@12 FunctionsAsValues.Trait$H@@12 FunctionsAsValues.Trait$J@@12)) ($IsAlloc refType this@@1 (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@12 FunctionsAsValues.Trait$H@@12 FunctionsAsValues.Trait$J@@12) $Heap@@0)))) ($IsBox |g#0@@1| FunctionsAsValues.Trait$G@@12)) ($IsBox |h#0@@1| FunctionsAsValues.Trait$H@@12)) ($IsBox |j#0@@1| FunctionsAsValues.Trait$J@@12)))) (= (FunctionsAsValues.Trait.ApplySelect FunctionsAsValues.Trait$G@@12 FunctionsAsValues.Trait$H@@12 FunctionsAsValues.Trait$J@@12 this@@1 |g#0@@1| |h#0@@1| |j#0@@1|) (let ((|f#0| (|FunctionsAsValues.Trait.Select#Handle| FunctionsAsValues.Trait$G@@12 FunctionsAsValues.Trait$H@@12 FunctionsAsValues.Trait$J@@12 this@@1)))
(Apply3 FunctionsAsValues.Trait$G@@12 FunctionsAsValues.Trait$H@@12 FunctionsAsValues.Trait$J@@12 FunctionsAsValues.Trait$G@@12 $Heap@@0 |f#0| |g#0@@1| |h#0@@1| |j#0@@1|))))
 :pattern ( (FunctionsAsValues.Trait.ApplySelect FunctionsAsValues.Trait$G@@12 FunctionsAsValues.Trait$H@@12 FunctionsAsValues.Trait$J@@12 this@@1 |g#0@@1| |h#0@@1| |j#0@@1|) ($IsGoodHeap $Heap@@0))
))))
(assert (forall ((|#$T0@@11| T@U) (|#$T1@@11| T@U) (|#$T2@@11| T@U) (|#$R@@11| T@U) (|f#0@@0| T@U) ) (! (= ($Is HandleTypeType |f#0@@0| (Tclass._System.___hTotalFunc3 |#$T0@@11| |#$T1@@11| |#$T2@@11| |#$R@@11|))  (and ($Is HandleTypeType |f#0@@0| (Tclass._System.___hPartialFunc3 |#$T0@@11| |#$T1@@11| |#$T2@@11| |#$R@@11|)) (forall ((|x0#0| T@U) (|x1#0| T@U) (|x2#0| T@U) )  (=> (and (and ($IsBox |x0#0| |#$T0@@11|) ($IsBox |x1#0| |#$T1@@11|)) ($IsBox |x2#0| |#$T2@@11|)) (Requires3 |#$T0@@11| |#$T1@@11| |#$T2@@11| |#$R@@11| $OneHeap |f#0@@0| |x0#0| |x1#0| |x2#0|)))))
 :pattern ( ($Is HandleTypeType |f#0@@0| (Tclass._System.___hTotalFunc3 |#$T0@@11| |#$T1@@11| |#$T2@@11| |#$R@@11|)))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= (Lit T x@@2) x@@2)
 :pattern ( (Lit T x@@2))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((FunctionsAsValues.Trait$G@@13 T@U) (FunctionsAsValues.Trait$H@@13 T@U) (FunctionsAsValues.Trait$J@@13 T@U) (this@@2 T@U) (|g#0@@2| T@U) (|h#0@@2| T@U) (|j#0@@2| T@U) ) (!  (=> (or (|FunctionsAsValues.Trait.Select#canCall| FunctionsAsValues.Trait$G@@13 FunctionsAsValues.Trait$H@@13 FunctionsAsValues.Trait$J@@13 this@@2 |g#0@@2| |h#0@@2| |j#0@@2|) (and (< 0 $FunctionContextHeight) (and (and (and (and (or (not (= this@@2 null)) (not true)) ($Is refType this@@2 (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@13 FunctionsAsValues.Trait$H@@13 FunctionsAsValues.Trait$J@@13))) ($IsBox |g#0@@2| FunctionsAsValues.Trait$G@@13)) ($IsBox |h#0@@2| FunctionsAsValues.Trait$H@@13)) ($IsBox |j#0@@2| FunctionsAsValues.Trait$J@@13)))) ($IsBox (FunctionsAsValues.Trait.Select FunctionsAsValues.Trait$G@@13 FunctionsAsValues.Trait$H@@13 FunctionsAsValues.Trait$J@@13 this@@2 |g#0@@2| |h#0@@2| |j#0@@2|) FunctionsAsValues.Trait$G@@13))
 :pattern ( (FunctionsAsValues.Trait.Select FunctionsAsValues.Trait$G@@13 FunctionsAsValues.Trait$H@@13 FunctionsAsValues.Trait$J@@13 this@@2 |g#0@@2| |h#0@@2| |j#0@@2|))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((FunctionsAsValues.Trait$G@@14 T@U) (FunctionsAsValues.Trait$H@@14 T@U) (FunctionsAsValues.Trait$J@@14 T@U) (this@@3 T@U) (|g#0@@3| T@U) (|h#0@@3| T@U) (|j#0@@3| T@U) ) (!  (=> (or (|FunctionsAsValues.Trait.ApplySelect#canCall| FunctionsAsValues.Trait$G@@14 FunctionsAsValues.Trait$H@@14 FunctionsAsValues.Trait$J@@14 this@@3 |g#0@@3| |h#0@@3| |j#0@@3|) (and (< 1 $FunctionContextHeight) (and (and (and (and (or (not (= this@@3 null)) (not true)) ($Is refType this@@3 (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@14 FunctionsAsValues.Trait$H@@14 FunctionsAsValues.Trait$J@@14))) ($IsBox |g#0@@3| FunctionsAsValues.Trait$G@@14)) ($IsBox |h#0@@3| FunctionsAsValues.Trait$H@@14)) ($IsBox |j#0@@3| FunctionsAsValues.Trait$J@@14)))) ($IsBox (FunctionsAsValues.Trait.ApplySelect FunctionsAsValues.Trait$G@@14 FunctionsAsValues.Trait$H@@14 FunctionsAsValues.Trait$J@@14 this@@3 |g#0@@3| |h#0@@3| |j#0@@3|) FunctionsAsValues.Trait$G@@14))
 :pattern ( (FunctionsAsValues.Trait.ApplySelect FunctionsAsValues.Trait$G@@14 FunctionsAsValues.Trait$H@@14 FunctionsAsValues.Trait$J@@14 this@@3 |g#0@@3| |h#0@@3| |j#0@@3|))
))))
(assert (forall ((|#$T0@@12| T@U) (|#$T1@@12| T@U) (|#$T2@@12| T@U) (|#$R@@12| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc3 |#$T0@@12| |#$T1@@12| |#$T2@@12| |#$R@@12|)) Tagclass._System.___hFunc3) (= (TagFamily (Tclass._System.___hFunc3 |#$T0@@12| |#$T1@@12| |#$T2@@12| |#$R@@12|)) |tytagFamily$_#Func3|))
 :pattern ( (Tclass._System.___hFunc3 |#$T0@@12| |#$T1@@12| |#$T2@@12| |#$R@@12|))
)))
(assert (forall ((|#$T0@@13| T@U) (|#$T1@@13| T@U) (|#$T2@@13| T@U) (|#$R@@13| T@U) ) (!  (and (= (Tag (Tclass._System.___hPartialFunc3 |#$T0@@13| |#$T1@@13| |#$T2@@13| |#$R@@13|)) Tagclass._System.___hPartialFunc3) (= (TagFamily (Tclass._System.___hPartialFunc3 |#$T0@@13| |#$T1@@13| |#$T2@@13| |#$R@@13|)) |tytagFamily$_#PartialFunc3|))
 :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@13| |#$T1@@13| |#$T2@@13| |#$R@@13|))
)))
(assert (forall ((|#$T0@@14| T@U) (|#$T1@@14| T@U) (|#$T2@@14| T@U) (|#$R@@14| T@U) ) (!  (and (= (Tag (Tclass._System.___hTotalFunc3 |#$T0@@14| |#$T1@@14| |#$T2@@14| |#$R@@14|)) Tagclass._System.___hTotalFunc3) (= (TagFamily (Tclass._System.___hTotalFunc3 |#$T0@@14| |#$T1@@14| |#$T2@@14| |#$R@@14|)) |tytagFamily$_#TotalFunc3|))
 :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@14| |#$T1@@14| |#$T2@@14| |#$R@@14|))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@1 T@U) (FunctionsAsValues.Trait$G@@15 T@U) (FunctionsAsValues.Trait$H@@15 T@U) (FunctionsAsValues.Trait$J@@15 T@U) (this@@4 T@U) (|g#0@@4| T@U) (|h#0@@4| T@U) (|j#0@@4| T@U) ) (!  (=> (and (or (|FunctionsAsValues.Trait.Select#canCall| FunctionsAsValues.Trait$G@@15 FunctionsAsValues.Trait$H@@15 FunctionsAsValues.Trait$J@@15 this@@4 |g#0@@4| |h#0@@4| |j#0@@4|) (and (< 0 $FunctionContextHeight) (and (and (and (and (or (not (= this@@4 null)) (not true)) ($IsAlloc refType this@@4 (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@15 FunctionsAsValues.Trait$H@@15 FunctionsAsValues.Trait$J@@15) $Heap@@1)) (and ($IsBox |g#0@@4| FunctionsAsValues.Trait$G@@15) ($IsAllocBox |g#0@@4| FunctionsAsValues.Trait$G@@15 $Heap@@1))) (and ($IsBox |h#0@@4| FunctionsAsValues.Trait$H@@15) ($IsAllocBox |h#0@@4| FunctionsAsValues.Trait$H@@15 $Heap@@1))) (and ($IsBox |j#0@@4| FunctionsAsValues.Trait$J@@15) ($IsAllocBox |j#0@@4| FunctionsAsValues.Trait$J@@15 $Heap@@1))))) ($IsGoodHeap $Heap@@1)) ($IsAllocBox (FunctionsAsValues.Trait.Select FunctionsAsValues.Trait$G@@15 FunctionsAsValues.Trait$H@@15 FunctionsAsValues.Trait$J@@15 this@@4 |g#0@@4| |h#0@@4| |j#0@@4|) FunctionsAsValues.Trait$G@@15 $Heap@@1))
 :pattern ( ($IsAllocBox (FunctionsAsValues.Trait.Select FunctionsAsValues.Trait$G@@15 FunctionsAsValues.Trait$H@@15 FunctionsAsValues.Trait$J@@15 this@@4 |g#0@@4| |h#0@@4| |j#0@@4|) FunctionsAsValues.Trait$G@@15 $Heap@@1))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@2 T@U) (FunctionsAsValues.Trait$G@@16 T@U) (FunctionsAsValues.Trait$H@@16 T@U) (FunctionsAsValues.Trait$J@@16 T@U) (this@@5 T@U) (|g#0@@5| T@U) (|h#0@@5| T@U) (|j#0@@5| T@U) ) (!  (=> (and (or (|FunctionsAsValues.Trait.ApplySelect#canCall| FunctionsAsValues.Trait$G@@16 FunctionsAsValues.Trait$H@@16 FunctionsAsValues.Trait$J@@16 this@@5 |g#0@@5| |h#0@@5| |j#0@@5|) (and (< 1 $FunctionContextHeight) (and (and (and (and (or (not (= this@@5 null)) (not true)) ($IsAlloc refType this@@5 (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@16 FunctionsAsValues.Trait$H@@16 FunctionsAsValues.Trait$J@@16) $Heap@@2)) (and ($IsBox |g#0@@5| FunctionsAsValues.Trait$G@@16) ($IsAllocBox |g#0@@5| FunctionsAsValues.Trait$G@@16 $Heap@@2))) (and ($IsBox |h#0@@5| FunctionsAsValues.Trait$H@@16) ($IsAllocBox |h#0@@5| FunctionsAsValues.Trait$H@@16 $Heap@@2))) (and ($IsBox |j#0@@5| FunctionsAsValues.Trait$J@@16) ($IsAllocBox |j#0@@5| FunctionsAsValues.Trait$J@@16 $Heap@@2))))) ($IsGoodHeap $Heap@@2)) ($IsAllocBox (FunctionsAsValues.Trait.ApplySelect FunctionsAsValues.Trait$G@@16 FunctionsAsValues.Trait$H@@16 FunctionsAsValues.Trait$J@@16 this@@5 |g#0@@5| |h#0@@5| |j#0@@5|) FunctionsAsValues.Trait$G@@16 $Heap@@2))
 :pattern ( ($IsAllocBox (FunctionsAsValues.Trait.ApplySelect FunctionsAsValues.Trait$G@@16 FunctionsAsValues.Trait$H@@16 FunctionsAsValues.Trait$J@@16 this@@5 |g#0@@5| |h#0@@5| |j#0@@5|) FunctionsAsValues.Trait$G@@16 $Heap@@2))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((FunctionsAsValues.Trait$G@@17 T@U) (FunctionsAsValues.Trait$H@@17 T@U) (FunctionsAsValues.Trait$J@@17 T@U) (this@@6 T@U) (|g#0@@6| T@U) (|h#0@@6| T@U) (|j#0@@6| T@U) ) (!  (=> (or (|FunctionsAsValues.Trait.Select#canCall| FunctionsAsValues.Trait$G@@17 FunctionsAsValues.Trait$H@@17 FunctionsAsValues.Trait$J@@17 (Lit refType this@@6) (Lit BoxType |g#0@@6|) (Lit BoxType |h#0@@6|) (Lit BoxType |j#0@@6|)) (and (< 0 $FunctionContextHeight) (and (and (and (and (or (not (= this@@6 null)) (not true)) ($Is refType this@@6 (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@17 FunctionsAsValues.Trait$H@@17 FunctionsAsValues.Trait$J@@17))) ($IsBox |g#0@@6| FunctionsAsValues.Trait$G@@17)) ($IsBox |h#0@@6| FunctionsAsValues.Trait$H@@17)) ($IsBox |j#0@@6| FunctionsAsValues.Trait$J@@17)))) (= (FunctionsAsValues.Trait.Select FunctionsAsValues.Trait$G@@17 FunctionsAsValues.Trait$H@@17 FunctionsAsValues.Trait$J@@17 (Lit refType this@@6) (Lit BoxType |g#0@@6|) (Lit BoxType |h#0@@6|) (Lit BoxType |j#0@@6|)) (Lit BoxType |g#0@@6|)))
 :weight 3
 :pattern ( (FunctionsAsValues.Trait.Select FunctionsAsValues.Trait$G@@17 FunctionsAsValues.Trait$H@@17 FunctionsAsValues.Trait$J@@17 (Lit refType this@@6) (Lit BoxType |g#0@@6|) (Lit BoxType |h#0@@6|) (Lit BoxType |j#0@@6|)))
))))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@3)) x@@3)
 :pattern ( ($Unbox T@@0 x@@3))
)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((|#$T0@@15| T@U) (|#$T1@@15| T@U) (|#$T2@@15| T@U) (|#$R@@15| T@U) (bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 (Tclass._System.___hFunc3 |#$T0@@15| |#$T1@@15| |#$T2@@15| |#$R@@15|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@5)) bx@@5) ($Is HandleTypeType ($Unbox HandleTypeType bx@@5) (Tclass._System.___hFunc3 |#$T0@@15| |#$T1@@15| |#$T2@@15| |#$R@@15|))))
 :pattern ( ($IsBox bx@@5 (Tclass._System.___hFunc3 |#$T0@@15| |#$T1@@15| |#$T2@@15| |#$R@@15|)))
)))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@16| T@U) (|#$T2@@16| T@U) (|#$R@@16| T@U) (bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 (Tclass._System.___hPartialFunc3 |#$T0@@16| |#$T1@@16| |#$T2@@16| |#$R@@16|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@6)) bx@@6) ($Is HandleTypeType ($Unbox HandleTypeType bx@@6) (Tclass._System.___hPartialFunc3 |#$T0@@16| |#$T1@@16| |#$T2@@16| |#$R@@16|))))
 :pattern ( ($IsBox bx@@6 (Tclass._System.___hPartialFunc3 |#$T0@@16| |#$T1@@16| |#$T2@@16| |#$R@@16|)))
)))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@17| T@U) (|#$T2@@17| T@U) (|#$R@@17| T@U) (bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 (Tclass._System.___hTotalFunc3 |#$T0@@17| |#$T1@@17| |#$T2@@17| |#$R@@17|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@7)) bx@@7) ($Is HandleTypeType ($Unbox HandleTypeType bx@@7) (Tclass._System.___hTotalFunc3 |#$T0@@17| |#$T1@@17| |#$T2@@17| |#$R@@17|))))
 :pattern ( ($IsBox bx@@7 (Tclass._System.___hTotalFunc3 |#$T0@@17| |#$T1@@17| |#$T2@@17| |#$R@@17|)))
)))
(assert (forall ((FunctionsAsValues.Trait$G@@18 T@U) (FunctionsAsValues.Trait$H@@18 T@U) (FunctionsAsValues.Trait$J@@18 T@U) ($o T@U) ($h T@U) ) (! (= ($IsAlloc refType $o (Tclass.FunctionsAsValues.Trait? FunctionsAsValues.Trait$G@@18 FunctionsAsValues.Trait$H@@18 FunctionsAsValues.Trait$J@@18) $h)  (or (= $o null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o) alloc)))))
 :pattern ( ($IsAlloc refType $o (Tclass.FunctionsAsValues.Trait? FunctionsAsValues.Trait$G@@18 FunctionsAsValues.Trait$H@@18 FunctionsAsValues.Trait$J@@18) $h))
)))
(assert (forall ((f@@2 T@U) (t0@@3 T@U) (t1@@3 T@U) (t2@@2 T@U) (t3@@2 T@U) ) (! (= ($Is HandleTypeType f@@2 (Tclass._System.___hFunc3 t0@@3 t1@@3 t2@@2 t3@@2)) (forall ((h@@1 T@U) (bx0@@1 T@U) (bx1@@1 T@U) (bx2@@1 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@1) (and (and ($IsBox bx0@@1 t0@@3) ($IsBox bx1@@1 t1@@3)) ($IsBox bx2@@1 t2@@2))) (Requires3 t0@@3 t1@@3 t2@@2 t3@@2 h@@1 f@@2 bx0@@1 bx1@@1 bx2@@1)) ($IsBox (Apply3 t0@@3 t1@@3 t2@@2 t3@@2 h@@1 f@@2 bx0@@1 bx1@@1 bx2@@1) t3@@2))
 :pattern ( (Apply3 t0@@3 t1@@3 t2@@2 t3@@2 h@@1 f@@2 bx0@@1 bx1@@1 bx2@@1))
)))
 :pattern ( ($Is HandleTypeType f@@2 (Tclass._System.___hFunc3 t0@@3 t1@@3 t2@@2 t3@@2)))
)))
(assert (forall ((t0@@4 T@U) (t1@@4 T@U) (t2@@3 T@U) (t3@@3 T@U) (heap@@0 T@U) (f@@3 T@U) (bx0@@2 T@U) (bx1@@2 T@U) (bx2@@2 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@0) (and (and (and ($IsBox bx0@@2 t0@@4) ($IsBox bx1@@2 t1@@4)) ($IsBox bx2@@2 t2@@3)) ($Is HandleTypeType f@@3 (Tclass._System.___hFunc3 t0@@4 t1@@4 t2@@3 t3@@3)))) (|Set#Equal| (Reads3 t0@@4 t1@@4 t2@@3 t3@@3 $OneHeap f@@3 bx0@@2 bx1@@2 bx2@@2) |Set#Empty|)) (= (Requires3 t0@@4 t1@@4 t2@@3 t3@@3 $OneHeap f@@3 bx0@@2 bx1@@2 bx2@@2) (Requires3 t0@@4 t1@@4 t2@@3 t3@@3 heap@@0 f@@3 bx0@@2 bx1@@2 bx2@@2)))
 :pattern ( (Requires3 t0@@4 t1@@4 t2@@3 t3@@3 $OneHeap f@@3 bx0@@2 bx1@@2 bx2@@2) ($IsGoodHeap heap@@0))
 :pattern ( (Requires3 t0@@4 t1@@4 t2@@3 t3@@3 heap@@0 f@@3 bx0@@2 bx1@@2 bx2@@2))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Set#Equal| a b) (= a b))
 :pattern ( (|Set#Equal| a b))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert (forall ((FunctionsAsValues.Trait$G@@19 T@U) (FunctionsAsValues.Trait$H@@19 T@U) (FunctionsAsValues.Trait$J@@19 T@U) ($self T@U) ($heap T@U) (|$fh$0x#0| T@U) (|$fh$0x#1| T@U) (|$fh$0x#2| T@U) ) (! (= (Requires3 FunctionsAsValues.Trait$G@@19 FunctionsAsValues.Trait$H@@19 FunctionsAsValues.Trait$J@@19 FunctionsAsValues.Trait$G@@19 $heap (|FunctionsAsValues.Trait.Select#Handle| FunctionsAsValues.Trait$G@@19 FunctionsAsValues.Trait$H@@19 FunctionsAsValues.Trait$J@@19 $self) |$fh$0x#0| |$fh$0x#1| |$fh$0x#2|) (|FunctionsAsValues.Trait.Select#requires| FunctionsAsValues.Trait$G@@19 FunctionsAsValues.Trait$H@@19 FunctionsAsValues.Trait$J@@19 $self |$fh$0x#0| |$fh$0x#1| |$fh$0x#2|))
 :pattern ( (Requires3 FunctionsAsValues.Trait$G@@19 FunctionsAsValues.Trait$H@@19 FunctionsAsValues.Trait$J@@19 FunctionsAsValues.Trait$G@@19 $heap (|FunctionsAsValues.Trait.Select#Handle| FunctionsAsValues.Trait$G@@19 FunctionsAsValues.Trait$H@@19 FunctionsAsValues.Trait$J@@19 $self) |$fh$0x#0| |$fh$0x#1| |$fh$0x#2|))
)))
(assert (forall ((x@@4 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@4)) x@@4)
 :pattern ( ($Box T@@3 x@@4))
)))
(assert (forall ((FunctionsAsValues.Trait$G@@20 T@U) (FunctionsAsValues.Trait$H@@20 T@U) (FunctionsAsValues.Trait$J@@20 T@U) ($self@@0 T@U) ($heap@@0 T@U) (|$fh$0x#0@@0| T@U) (|$fh$0x#1@@0| T@U) (|$fh$0x#2@@0| T@U) ) (! (= (Apply3 FunctionsAsValues.Trait$G@@20 FunctionsAsValues.Trait$H@@20 FunctionsAsValues.Trait$J@@20 FunctionsAsValues.Trait$G@@20 $heap@@0 (|FunctionsAsValues.Trait.Select#Handle| FunctionsAsValues.Trait$G@@20 FunctionsAsValues.Trait$H@@20 FunctionsAsValues.Trait$J@@20 $self@@0) |$fh$0x#0@@0| |$fh$0x#1@@0| |$fh$0x#2@@0|) (FunctionsAsValues.Trait.Select FunctionsAsValues.Trait$G@@20 FunctionsAsValues.Trait$H@@20 FunctionsAsValues.Trait$J@@20 $self@@0 |$fh$0x#0@@0| |$fh$0x#1@@0| |$fh$0x#2@@0|))
 :pattern ( (Apply3 FunctionsAsValues.Trait$G@@20 FunctionsAsValues.Trait$H@@20 FunctionsAsValues.Trait$J@@20 FunctionsAsValues.Trait$G@@20 $heap@@0 (|FunctionsAsValues.Trait.Select#Handle| FunctionsAsValues.Trait$G@@20 FunctionsAsValues.Trait$H@@20 FunctionsAsValues.Trait$J@@20 $self@@0) |$fh$0x#0@@0| |$fh$0x#1@@0| |$fh$0x#2@@0|))
)))
(assert (forall ((f@@4 T@U) (t0@@5 T@U) (t1@@5 T@U) (t2@@4 T@U) (t3@@4 T@U) (h@@2 T@U) ) (!  (=> (and ($IsGoodHeap h@@2) ($IsAlloc HandleTypeType f@@4 (Tclass._System.___hFunc3 t0@@5 t1@@5 t2@@4 t3@@4) h@@2)) (forall ((bx0@@3 T@U) (bx1@@3 T@U) (bx2@@3 T@U) ) (!  (=> (and (and (and ($IsAllocBox bx0@@3 t0@@5 h@@2) ($IsAllocBox bx1@@3 t1@@5 h@@2)) ($IsAllocBox bx2@@3 t2@@4 h@@2)) (Requires3 t0@@5 t1@@5 t2@@4 t3@@4 h@@2 f@@4 bx0@@3 bx1@@3 bx2@@3)) ($IsAllocBox (Apply3 t0@@5 t1@@5 t2@@4 t3@@4 h@@2 f@@4 bx0@@3 bx1@@3 bx2@@3) t3@@4 h@@2))
 :pattern ( (Apply3 t0@@5 t1@@5 t2@@4 t3@@4 h@@2 f@@4 bx0@@3 bx1@@3 bx2@@3))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@4 (Tclass._System.___hFunc3 t0@@5 t1@@5 t2@@4 t3@@4) h@@2))
)))
(assert  (and (forall ((t0@@6 T@T) (t1@@6 T@T) (t2@@5 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@6 t1@@6 t2@@5 (MapType1Store t0@@6 t1@@6 t2@@5 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@1 u1@@1 u2@@0 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@2 T@T) (u1@@2 T@T) (u2@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@2 u1@@2 u2@@1 (MapType1Store u0@@2 u1@@2 u2@@1 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@2 u1@@2 u2@@1 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@0 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@0 $f))  (=> (and (or (not (= $o@@0 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@0) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@0 $f))
)))
(assert (forall ((FunctionsAsValues.Trait$G@@21 T@U) (FunctionsAsValues.Trait$H@@21 T@U) (FunctionsAsValues.Trait$J@@21 T@U) (|c#0@@0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0@@0| (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@21 FunctionsAsValues.Trait$H@@21 FunctionsAsValues.Trait$J@@21) $h@@0) ($IsAlloc refType |c#0@@0| (Tclass.FunctionsAsValues.Trait? FunctionsAsValues.Trait$G@@21 FunctionsAsValues.Trait$H@@21 FunctionsAsValues.Trait$J@@21) $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@21 FunctionsAsValues.Trait$H@@21 FunctionsAsValues.Trait$J@@21) $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| (Tclass.FunctionsAsValues.Trait? FunctionsAsValues.Trait$G@@21 FunctionsAsValues.Trait$H@@21 FunctionsAsValues.Trait$J@@21) $h@@0))
)))
(assert (forall ((FunctionsAsValues.Trait$G@@22 T@U) (FunctionsAsValues.Trait$H@@22 T@U) (FunctionsAsValues.Trait$J@@22 T@U) ($self@@1 T@U) ($heap@@1 T@U) (|$fh$0x#0@@1| T@U) (|$fh$0x#1@@1| T@U) (|$fh$0x#2@@1| T@U) ) (! (= (FunctionsAsValues.Trait.Select FunctionsAsValues.Trait$G@@22 FunctionsAsValues.Trait$H@@22 FunctionsAsValues.Trait$J@@22 $self@@1 |$fh$0x#0@@1| |$fh$0x#1@@1| |$fh$0x#2@@1|) (Apply3 FunctionsAsValues.Trait$G@@22 FunctionsAsValues.Trait$H@@22 FunctionsAsValues.Trait$J@@22 FunctionsAsValues.Trait$G@@22 $heap@@1 (|FunctionsAsValues.Trait.Select#Handle| FunctionsAsValues.Trait$G@@22 FunctionsAsValues.Trait$H@@22 FunctionsAsValues.Trait$J@@22 $self@@1) |$fh$0x#0@@1| |$fh$0x#1@@1| |$fh$0x#2@@1|))
 :pattern ( (FunctionsAsValues.Trait.Select FunctionsAsValues.Trait$G@@22 FunctionsAsValues.Trait$H@@22 FunctionsAsValues.Trait$J@@22 $self@@1 |$fh$0x#0@@1| |$fh$0x#1@@1| |$fh$0x#2@@1|) ($IsGoodHeap $heap@@1))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((FunctionsAsValues.Trait$G@@23 T@U) (FunctionsAsValues.Trait$H@@23 T@U) (FunctionsAsValues.Trait$J@@23 T@U) (this@@7 T@U) (|g#0@@7| T@U) (|h#0@@7| T@U) (|j#0@@7| T@U) ) (!  (=> (or (|FunctionsAsValues.Trait.Select#canCall| FunctionsAsValues.Trait$G@@23 FunctionsAsValues.Trait$H@@23 FunctionsAsValues.Trait$J@@23 this@@7 |g#0@@7| |h#0@@7| |j#0@@7|) (and (< 0 $FunctionContextHeight) (and (and (and (and (or (not (= this@@7 null)) (not true)) ($Is refType this@@7 (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@23 FunctionsAsValues.Trait$H@@23 FunctionsAsValues.Trait$J@@23))) ($IsBox |g#0@@7| FunctionsAsValues.Trait$G@@23)) ($IsBox |h#0@@7| FunctionsAsValues.Trait$H@@23)) ($IsBox |j#0@@7| FunctionsAsValues.Trait$J@@23)))) (= (FunctionsAsValues.Trait.Select FunctionsAsValues.Trait$G@@23 FunctionsAsValues.Trait$H@@23 FunctionsAsValues.Trait$J@@23 this@@7 |g#0@@7| |h#0@@7| |j#0@@7|) |g#0@@7|))
 :pattern ( (FunctionsAsValues.Trait.Select FunctionsAsValues.Trait$G@@23 FunctionsAsValues.Trait$H@@23 FunctionsAsValues.Trait$J@@23 this@@7 |g#0@@7| |h#0@@7| |j#0@@7|))
))))
(assert (forall ((FunctionsAsValues.Trait$G@@24 T@U) (FunctionsAsValues.Trait$H@@24 T@U) (FunctionsAsValues.Trait$J@@24 T@U) ($o@@1 T@U) ) (! (= ($Is refType $o@@1 (Tclass.FunctionsAsValues.Trait? FunctionsAsValues.Trait$G@@24 FunctionsAsValues.Trait$H@@24 FunctionsAsValues.Trait$J@@24))  (or (= $o@@1 null) (implements$FunctionsAsValues.Trait (dtype $o@@1) FunctionsAsValues.Trait$G@@24 FunctionsAsValues.Trait$H@@24 FunctionsAsValues.Trait$J@@24)))
 :pattern ( ($Is refType $o@@1 (Tclass.FunctionsAsValues.Trait? FunctionsAsValues.Trait$G@@24 FunctionsAsValues.Trait$H@@24 FunctionsAsValues.Trait$J@@24)))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (! (= (|Set#Equal| a@@0 b@@0) (forall ((o@@0 T@U) ) (! (= (|Set#IsMember| a@@0 o@@0) (|Set#IsMember| b@@0 o@@0))
 :pattern ( (|Set#IsMember| a@@0 o@@0))
 :pattern ( (|Set#IsMember| b@@0 o@@0))
)))
 :pattern ( (|Set#Equal| a@@0 b@@0))
)))
(assert (forall (($bx T@U) (FunctionsAsValues.Trait$G@@25 T@U) (FunctionsAsValues.Trait$H@@25 T@U) (FunctionsAsValues.Trait$J@@25 T@U) ($self@@2 T@U) ($heap@@2 T@U) (|$fh$0x#0@@2| T@U) (|$fh$0x#1@@2| T@U) (|$fh$0x#2@@2| T@U) ) (! (= (|Set#IsMember| (Reads3 FunctionsAsValues.Trait$G@@25 FunctionsAsValues.Trait$H@@25 FunctionsAsValues.Trait$J@@25 FunctionsAsValues.Trait$G@@25 $heap@@2 (|FunctionsAsValues.Trait.Select#Handle| FunctionsAsValues.Trait$G@@25 FunctionsAsValues.Trait$H@@25 FunctionsAsValues.Trait$J@@25 $self@@2) |$fh$0x#0@@2| |$fh$0x#1@@2| |$fh$0x#2@@2|) $bx) false)
 :pattern ( (|Set#IsMember| (Reads3 FunctionsAsValues.Trait$G@@25 FunctionsAsValues.Trait$H@@25 FunctionsAsValues.Trait$J@@25 FunctionsAsValues.Trait$G@@25 $heap@@2 (|FunctionsAsValues.Trait.Select#Handle| FunctionsAsValues.Trait$G@@25 FunctionsAsValues.Trait$H@@25 FunctionsAsValues.Trait$J@@25 $self@@2) |$fh$0x#0@@2| |$fh$0x#1@@2| |$fh$0x#2@@2|) $bx))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@5)) (Lit BoxType ($Box T@@4 x@@5)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@5)))
)))
(assert (forall ((|#$T0@@18| T@U) (|#$T1@@18| T@U) (|#$T2@@18| T@U) (|#$R@@18| T@U) (|f#0@@1| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@1| (Tclass._System.___hPartialFunc3 |#$T0@@18| |#$T1@@18| |#$T2@@18| |#$R@@18|) $h@@1) ($IsAlloc HandleTypeType |f#0@@1| (Tclass._System.___hFunc3 |#$T0@@18| |#$T1@@18| |#$T2@@18| |#$R@@18|) $h@@1))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@1| (Tclass._System.___hPartialFunc3 |#$T0@@18| |#$T1@@18| |#$T2@@18| |#$R@@18|) $h@@1))
)))
(assert (forall ((|#$T0@@19| T@U) (|#$T1@@19| T@U) (|#$T2@@19| T@U) (|#$R@@19| T@U) (|f#0@@2| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@2| (Tclass._System.___hTotalFunc3 |#$T0@@19| |#$T1@@19| |#$T2@@19| |#$R@@19|) $h@@2) ($IsAlloc HandleTypeType |f#0@@2| (Tclass._System.___hPartialFunc3 |#$T0@@19| |#$T1@@19| |#$T2@@19| |#$R@@19|) $h@@2))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@2| (Tclass._System.___hTotalFunc3 |#$T0@@19| |#$T1@@19| |#$T2@@19| |#$R@@19|) $h@@2))
)))
(assert (forall ((|#$T0@@20| T@U) (|#$T1@@20| T@U) (|#$T2@@20| T@U) (|#$R@@20| T@U) (|f#0@@3| T@U) ) (! (= ($Is HandleTypeType |f#0@@3| (Tclass._System.___hPartialFunc3 |#$T0@@20| |#$T1@@20| |#$T2@@20| |#$R@@20|))  (and ($Is HandleTypeType |f#0@@3| (Tclass._System.___hFunc3 |#$T0@@20| |#$T1@@20| |#$T2@@20| |#$R@@20|)) (forall ((|x0#0@@0| T@U) (|x1#0@@0| T@U) (|x2#0@@0| T@U) )  (=> (and (and ($IsBox |x0#0@@0| |#$T0@@20|) ($IsBox |x1#0@@0| |#$T1@@20|)) ($IsBox |x2#0@@0| |#$T2@@20|)) (|Set#Equal| (Reads3 |#$T0@@20| |#$T1@@20| |#$T2@@20| |#$R@@20| $OneHeap |f#0@@3| |x0#0@@0| |x1#0@@0| |x2#0@@0|) |Set#Empty|)))))
 :pattern ( ($Is HandleTypeType |f#0@@3| (Tclass._System.___hPartialFunc3 |#$T0@@20| |#$T1@@20| |#$T2@@20| |#$R@@20|)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun $Heap@@3 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun this@@8 () T@U)
(declare-fun FunctionsAsValues.Trait$G@@26 () T@U)
(declare-fun FunctionsAsValues.Trait$H@@26 () T@U)
(declare-fun FunctionsAsValues.Trait$J@@26 () T@U)
(declare-fun |g#0@@8| () T@U)
(declare-fun |h#0@@8| () T@U)
(declare-fun |j#0@@8| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let ((anon5_Else_correct  (=> (= (ControlFlow 0 3) (- 0 2)) (or (not (= 0 $FunctionContextHeight)) (not true)))))
(let ((anon5_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap@@3 alloc false)) (and (=> (= (ControlFlow 0 4) 1) anon5_Then_correct) (=> (= (ControlFlow 0 4) 3) anon5_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@3) ($IsHeapAnchor $Heap@@3)) (=> (and (and (and (or (not (= this@@8 null)) (not true)) (and ($Is refType this@@8 (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@26 FunctionsAsValues.Trait$H@@26 FunctionsAsValues.Trait$J@@26)) ($IsAlloc refType this@@8 (Tclass.FunctionsAsValues.Trait FunctionsAsValues.Trait$G@@26 FunctionsAsValues.Trait$H@@26 FunctionsAsValues.Trait$J@@26) $Heap@@3))) ($IsBox |g#0@@8| FunctionsAsValues.Trait$G@@26)) (and (and ($IsBox |h#0@@8| FunctionsAsValues.Trait$H@@26) ($IsBox |j#0@@8| FunctionsAsValues.Trait$J@@26)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 5) 4)))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
