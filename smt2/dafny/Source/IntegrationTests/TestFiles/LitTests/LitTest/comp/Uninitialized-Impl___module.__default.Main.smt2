(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass.Stacks.Stack () T@U)
(declare-fun Tagclass.Stacks.Stack? () T@U)
(declare-fun Tagclass._module.Empty () T@U)
(declare-fun class.Stacks.Stack? () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$Stack () T@U)
(declare-fun tytagFamily$Empty () T@U)
(declare-fun field$Repr () T@U)
(declare-fun field$Elements () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun Stacks.Stack.Count (T@U T@U T@U) Int)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |Stacks.Stack.Count#canCall| (T@U T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass.Stacks.Stack (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Stacks.Stack.Valid (T@U T@U T@U) Bool)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun Stacks.Stack.Elements () T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun Tclass._module.Empty () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun Stacks.Stack.Repr () T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun Tclass.Stacks.Stack? (T@U) T@U)
(declare-fun |Seq#Empty| () T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun TSet (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun |Stacks.Stack.Valid#canCall| (T@U T@U T@U) Bool)
(declare-fun DeclType (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun Tclass.Stacks.Stack_0 (T@U) T@U)
(declare-fun Tclass.Stacks.Stack?_0 (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSet TagSeq alloc allocName Tagclass._System.object? Tagclass._System.object Tagclass.Stacks.Stack Tagclass.Stacks.Stack? Tagclass._module.Empty class.Stacks.Stack? tytagFamily$object tytagFamily$Stack tytagFamily$Empty field$Repr field$Elements)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert  (and (and (and (and (and (and (and (and (= (Ctor refType) 3) (= (Ctor SeqType) 4)) (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
))) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((Stacks.Stack$T T@U) ($Heap T@U) (this T@U) ) (!  (=> (or (|Stacks.Stack.Count#canCall| Stacks.Stack$T $Heap this) (and (and ($IsGoodHeap $Heap) (and (or (not (= this null)) (not true)) (and ($Is refType this (Tclass.Stacks.Stack Stacks.Stack$T)) ($IsAlloc refType this (Tclass.Stacks.Stack Stacks.Stack$T) $Heap)))) (Stacks.Stack.Valid Stacks.Stack$T $Heap this))) (= (Stacks.Stack.Count Stacks.Stack$T $Heap this) (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) Stacks.Stack.Elements)))))
 :pattern ( (Stacks.Stack.Count Stacks.Stack$T $Heap this) ($IsGoodHeap $Heap))
)))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._module.Empty $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._module.Empty $h))
)))
(assert (= (Ctor SetType) 8))
(assert (forall ((Stacks.Stack$T@@0 T@U) ($h0 T@U) ($h1 T@U) (this@@0 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (and (or (not (= this@@0 null)) (not true)) ($Is refType this@@0 (Tclass.Stacks.Stack Stacks.Stack$T@@0)))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1))) (=> (forall (($o T@U) ($f T@U) )  (=> (and (or (not (= $o null)) (not true)) (or (= $o this@@0) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0 this@@0) Stacks.Stack.Repr)) ($Box refType $o)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0 $o) $f) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1 $o) $f)))) (= (Stacks.Stack.Valid Stacks.Stack$T@@0 $h0 this@@0) (Stacks.Stack.Valid Stacks.Stack$T@@0 $h1 this@@0))))
 :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (Stacks.Stack.Valid Stacks.Stack$T@@0 $h1 this@@0))
)))
(assert (forall ((Stacks.Stack$T@@1 T@U) (|c#0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass.Stacks.Stack Stacks.Stack$T@@1) $h@@0) ($IsAlloc refType |c#0| (Tclass.Stacks.Stack? Stacks.Stack$T@@1) $h@@0))
 :pattern ( ($IsAlloc refType |c#0| (Tclass.Stacks.Stack Stacks.Stack$T@@1) $h@@0))
 :pattern ( ($IsAlloc refType |c#0| (Tclass.Stacks.Stack? Stacks.Stack$T@@1) $h@@0))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (forall ((s T@U) (v T@U) (n Int) ) (!  (=> (and (<= 0 n) (<= n (|Seq#Length| s))) (= (|Seq#Drop| (|Seq#Build| s v) n) (|Seq#Build| (|Seq#Drop| s n) v)))
 :pattern ( (|Seq#Drop| (|Seq#Build| s v) n))
)))
(assert (forall ((s@@0 T@U) (t T@U) (n@@0 Int) ) (!  (=> (= n@@0 (|Seq#Length| s@@0)) (and (= (|Seq#Take| (|Seq#Append| s@@0 t) n@@0) s@@0) (= (|Seq#Drop| (|Seq#Append| s@@0 t) n@@0) t)))
 :pattern ( (|Seq#Take| (|Seq#Append| s@@0 t) n@@0))
 :pattern ( (|Seq#Drop| (|Seq#Append| s@@0 t) n@@0))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._System.object $h@@1) ($IsAlloc refType |c#0@@0| Tclass._System.object? $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._System.object $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._System.object? $h@@1))
)))
(assert (= (FDim Stacks.Stack.Repr) 0))
(assert (= (FieldOfDecl class.Stacks.Stack? field$Repr) Stacks.Stack.Repr))
(assert ($IsGhostField Stacks.Stack.Repr))
(assert (= (FDim Stacks.Stack.Elements) 0))
(assert (= (FieldOfDecl class.Stacks.Stack? field$Elements) Stacks.Stack.Elements))
(assert ($IsGhostField Stacks.Stack.Elements))
(assert (forall ((Stacks.Stack$T@@2 T@U) ($o@@0 T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o@@0 (Tclass.Stacks.Stack? Stacks.Stack$T@@2) $h@@2)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 (Tclass.Stacks.Stack? Stacks.Stack$T@@2) $h@@2))
)))
(assert (forall (($o@@1 T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType $o@@1 Tclass._System.object? $h@@3)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 Tclass._System.object? $h@@3))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((s@@1 T@U) (n@@1 Int) ) (!  (=> (= n@@1 0) (= (|Seq#Drop| s@@1 n@@1) s@@1))
 :pattern ( (|Seq#Drop| s@@1 n@@1))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((s@@2 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> (and ($Is SeqType s@@2 (TSeq t@@0)) ($IsBox bx t@@0)) ($Is SeqType (|Seq#Build| s@@2 bx) (TSeq t@@0)))
 :pattern ( ($Is SeqType (|Seq#Build| s@@2 bx) (TSeq t@@0)))
)))
(assert (forall ((s@@3 T@U) (n@@2 Int) (j Int) ) (!  (=> (and (and (<= 0 j) (< j n@@2)) (< j (|Seq#Length| s@@3))) (= (|Seq#Index| (|Seq#Take| s@@3 n@@2) j) (|Seq#Index| s@@3 j)))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Take| s@@3 n@@2) j))
 :pattern ( (|Seq#Index| s@@3 j) (|Seq#Take| s@@3 n@@2))
)))
(assert (forall ((s@@4 T@U) (n@@3 Int) ) (!  (=> (and (<= 0 n@@3) (<= n@@3 (|Seq#Length| s@@4))) (= (|Seq#Length| (|Seq#Drop| s@@4 n@@3)) (- (|Seq#Length| s@@4) n@@3)))
 :pattern ( (|Seq#Length| (|Seq#Drop| s@@4 n@@3)))
)))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (= (|Seq#Equal| s0 s1)  (and (= (|Seq#Length| s0) (|Seq#Length| s1)) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 (|Seq#Length| s0))) (= (|Seq#Index| s0 j@@0) (|Seq#Index| s1 j@@0)))
 :pattern ( (|Seq#Index| s0 j@@0))
 :pattern ( (|Seq#Index| s1 j@@0))
))))
 :pattern ( (|Seq#Equal| s0 s1))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((Stacks.Stack$T@@3 T@U) ($h0@@0 T@U) ($h1@@0 T@U) (this@@1 T@U) ) (!  (=> (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (and (or (not (= this@@1 null)) (not true)) ($Is refType this@@1 (Tclass.Stacks.Stack Stacks.Stack$T@@3)))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0))) (=> (forall (($o@@2 T@U) ($f@@0 T@U) )  (=> (and (or (not (= $o@@2 null)) (not true)) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@0 this@@1) Stacks.Stack.Repr)) ($Box refType $o@@2))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h0@@0 $o@@2) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h1@@0 $o@@2) $f@@0)))) (= (Stacks.Stack.Count Stacks.Stack$T@@3 $h0@@0 this@@1) (Stacks.Stack.Count Stacks.Stack$T@@3 $h1@@0 this@@1))))
 :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (Stacks.Stack.Count Stacks.Stack$T@@3 $h1@@0 this@@1))
)))
(assert (forall ((v@@0 T@U) (t0@@0 T@U) ) (! (= ($Is SetType v@@0 (TSet t0@@0)) (forall ((bx@@0 T@U) ) (!  (=> (|Set#IsMember| v@@0 bx@@0) ($IsBox bx@@0 t0@@0))
 :pattern ( (|Set#IsMember| v@@0 bx@@0))
)))
 :pattern ( ($Is SetType v@@0 (TSet t0@@0)))
)))
(assert ($IsGhostField alloc))
(assert (forall ((s@@5 T@U) (v@@1 T@U) ) (! (= (|Seq#Length| (|Seq#Build| s@@5 v@@1)) (+ 1 (|Seq#Length| s@@5)))
 :pattern ( (|Seq#Build| s@@5 v@@1))
)))
(assert (forall ((Stacks.Stack$T@@4 T@U) (|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| (Tclass.Stacks.Stack Stacks.Stack$T@@4))  (and ($Is refType |c#0@@1| (Tclass.Stacks.Stack? Stacks.Stack$T@@4)) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| (Tclass.Stacks.Stack Stacks.Stack$T@@4)))
 :pattern ( ($Is refType |c#0@@1| (Tclass.Stacks.Stack? Stacks.Stack$T@@4)))
)))
(assert (forall ((v@@2 T@U) (t@@1 T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@2) t@@1 h@@0) ($IsAlloc T@@1 v@@2 t@@1 h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@2) t@@1 h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@1 T@U) (t@@2 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@1 t@@2 h@@1) ($IsAllocBox bx@@1 t@@2 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@1 t@@2 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@3 T@U) (t@@3 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@3 t@@3 h@@2) ($IsAlloc T@@2 v@@3 t@@3 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@3 t@@3 h@@2))
)))
(assert (forall ((s@@6 T@U) (n@@4 Int) (j@@1 Int) ) (!  (=> (and (and (<= 0 n@@4) (<= 0 j@@1)) (< j@@1 (- (|Seq#Length| s@@6) n@@4))) (= (|Seq#Index| (|Seq#Drop| s@@6 n@@4) j@@1) (|Seq#Index| s@@6 (+ j@@1 n@@4))))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Drop| s@@6 n@@4) j@@1))
)))
(assert (forall ((Stacks.Stack$T@@5 T@U) ) (!  (and (= (Tag (Tclass.Stacks.Stack Stacks.Stack$T@@5)) Tagclass.Stacks.Stack) (= (TagFamily (Tclass.Stacks.Stack Stacks.Stack$T@@5)) tytagFamily$Stack))
 :pattern ( (Tclass.Stacks.Stack Stacks.Stack$T@@5))
)))
(assert (forall ((Stacks.Stack$T@@6 T@U) ) (!  (and (= (Tag (Tclass.Stacks.Stack? Stacks.Stack$T@@6)) Tagclass.Stacks.Stack?) (= (TagFamily (Tclass.Stacks.Stack? Stacks.Stack$T@@6)) tytagFamily$Stack))
 :pattern ( (Tclass.Stacks.Stack? Stacks.Stack$T@@6))
)))
(assert (forall ((Stacks.Stack$T@@7 T@U) ($h@@4 T@U) ($o@@3 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@4) (and (or (not (= $o@@3 null)) (not true)) (= (dtype $o@@3) (Tclass.Stacks.Stack? Stacks.Stack$T@@7)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@3) alloc)))) ($IsAlloc SeqType ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@3) Stacks.Stack.Elements)) (TSeq Stacks.Stack$T@@7) $h@@4))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@3) Stacks.Stack.Elements)) (Tclass.Stacks.Stack? Stacks.Stack$T@@7))
)))
(assert (forall ((Stacks.Stack$T@@8 T@U) ($Heap@@0 T@U) (this@@2 T@U) ) (!  (=> (or (|Stacks.Stack.Count#canCall| Stacks.Stack$T@@8 $Heap@@0 this@@2) (and (and ($IsGoodHeap $Heap@@0) (and (or (not (= this@@2 null)) (not true)) (and ($Is refType this@@2 (Tclass.Stacks.Stack Stacks.Stack$T@@8)) ($IsAlloc refType this@@2 (Tclass.Stacks.Stack Stacks.Stack$T@@8) $Heap@@0)))) (Stacks.Stack.Valid Stacks.Stack$T@@8 $Heap@@0 this@@2))) (<= (LitInt 0) (Stacks.Stack.Count Stacks.Stack$T@@8 $Heap@@0 this@@2)))
 :pattern ( (Stacks.Stack.Count Stacks.Stack$T@@8 $Heap@@0 this@@2))
)))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) ) (! (= (|Seq#Length| (|Seq#Append| s0@@0 s1@@0)) (+ (|Seq#Length| s0@@0) (|Seq#Length| s1@@0)))
 :pattern ( (|Seq#Length| (|Seq#Append| s0@@0 s1@@0)))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@2 Tclass._System.object?))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) Tclass._System.object)))
 :pattern ( ($IsBox bx@@3 Tclass._System.object))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 Tclass._module.Empty) (and (= ($Box intType ($Unbox intType bx@@4)) bx@@4) ($Is intType ($Unbox intType bx@@4) Tclass._module.Empty)))
 :pattern ( ($IsBox bx@@4 Tclass._module.Empty))
)))
(assert (forall ((Stacks.Stack$T@@9 T@U) ($o@@4 T@U) ) (! (= ($Is refType $o@@4 (Tclass.Stacks.Stack? Stacks.Stack$T@@9))  (or (= $o@@4 null) (= (dtype $o@@4) (Tclass.Stacks.Stack? Stacks.Stack$T@@9))))
 :pattern ( ($Is refType $o@@4 (Tclass.Stacks.Stack? Stacks.Stack$T@@9)))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass._System.object)  (and ($Is refType |c#0@@2| Tclass._System.object?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@2| Tclass._System.object?))
)))
(assert (forall ((s@@7 T@U) (i Int) (v@@4 T@U) ) (!  (and (=> (= i (|Seq#Length| s@@7)) (= (|Seq#Index| (|Seq#Build| s@@7 v@@4) i) v@@4)) (=> (or (not (= i (|Seq#Length| s@@7))) (not true)) (= (|Seq#Index| (|Seq#Build| s@@7 v@@4) i) (|Seq#Index| s@@7 i))))
 :pattern ( (|Seq#Index| (|Seq#Build| s@@7 v@@4) i))
)))
(assert (forall ((Stacks.Stack$T@@10 T@U) ($h@@5 T@U) ($o@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) (and (or (not (= $o@@5 null)) (not true)) (= (dtype $o@@5) (Tclass.Stacks.Stack? Stacks.Stack$T@@10)))) ($Is SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@5) Stacks.Stack.Repr)) (TSet Tclass._System.object)))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@5) Stacks.Stack.Repr)) (Tclass.Stacks.Stack? Stacks.Stack$T@@10))
)))
(assert (forall ((Stacks.Stack$T@@11 T@U) ($h@@6 T@U) ($o@@6 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@6) (and (or (not (= $o@@6 null)) (not true)) (= (dtype $o@@6) (Tclass.Stacks.Stack? Stacks.Stack$T@@11)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@6) alloc)))) ($IsAlloc SetType ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@6) Stacks.Stack.Repr)) (TSet Tclass._System.object) $h@@6))
 :pattern ( ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@6) Stacks.Stack.Repr)) (Tclass.Stacks.Stack? Stacks.Stack$T@@11))
)))
(assert (forall ((Stacks.Stack$T@@12 T@U) ($Heap@@1 T@U) (this@@3 T@U) ) (!  (=> (or (|Stacks.Stack.Valid#canCall| Stacks.Stack$T@@12 $Heap@@1 this@@3) (and ($IsGoodHeap $Heap@@1) (and (or (not (= this@@3 null)) (not true)) (and ($Is refType this@@3 (Tclass.Stacks.Stack Stacks.Stack$T@@12)) ($IsAlloc refType this@@3 (Tclass.Stacks.Stack Stacks.Stack$T@@12) $Heap@@1))))) (=> (Stacks.Stack.Valid Stacks.Stack$T@@12 $Heap@@1 this@@3) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 this@@3) Stacks.Stack.Repr)) ($Box refType this@@3))))
 :pattern ( (Stacks.Stack.Valid Stacks.Stack$T@@12 $Heap@@1 this@@3))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Seq#Equal| a b) (= a b))
 :pattern ( (|Seq#Equal| a b))
)))
(assert (forall ((s@@8 T@U) (n@@5 Int) ) (!  (=> (and (<= 0 n@@5) (<= n@@5 (|Seq#Length| s@@8))) (= (|Seq#Length| (|Seq#Take| s@@8 n@@5)) n@@5))
 :pattern ( (|Seq#Length| (|Seq#Take| s@@8 n@@5)))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (or (not (= a@@0 c)) (not true)) (=> (and ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c)) ($HeapSucc a@@0 c)))
 :pattern ( ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 TInt) (and (= ($Box intType ($Unbox intType bx@@5)) bx@@5) ($Is intType ($Unbox intType bx@@5) TInt)))
 :pattern ( ($IsBox bx@@5 TInt))
)))
(assert (forall ((v@@5 T@U) (t@@4 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@5) t@@4) ($Is T@@3 v@@5 t@@4))
 :pattern ( ($IsBox ($Box T@@3 v@@5) t@@4))
)))
(assert (forall ((s@@9 T@U) ) (! (<= 0 (|Seq#Length| s@@9))
 :pattern ( (|Seq#Length| s@@9))
)))
(assert (forall ((v@@6 T@U) (t0@@1 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@6 (TSet t0@@1) h@@3) (forall ((bx@@6 T@U) ) (!  (=> (|Set#IsMember| v@@6 bx@@6) ($IsAllocBox bx@@6 t0@@1 h@@3))
 :pattern ( (|Set#IsMember| v@@6 bx@@6))
)))
 :pattern ( ($IsAlloc SetType v@@6 (TSet t0@@1) h@@3))
)))
(assert (forall (($o@@7 T@U) ) (! ($Is refType $o@@7 Tclass._System.object?)
 :pattern ( ($Is refType $o@@7 Tclass._System.object?))
)))
(assert (forall ((v@@7 T@U) (t0@@2 T@U) (h@@4 T@U) ) (! (= ($IsAlloc SeqType v@@7 (TSeq t0@@2) h@@4) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@7))) ($IsAllocBox (|Seq#Index| v@@7 i@@0) t0@@2 h@@4))
 :pattern ( (|Seq#Index| v@@7 i@@0))
)))
 :pattern ( ($IsAlloc SeqType v@@7 (TSeq t0@@2) h@@4))
)))
(assert (forall ((t@@5 T@U) ) (! (= (Inv0_TSet (TSet t@@5)) t@@5)
 :pattern ( (TSet t@@5))
)))
(assert (forall ((t@@6 T@U) ) (! (= (Tag (TSet t@@6)) TagSet)
 :pattern ( (TSet t@@6))
)))
(assert (forall ((t@@7 T@U) ) (! (= (Inv0_TSeq (TSeq t@@7)) t@@7)
 :pattern ( (TSeq t@@7))
)))
(assert (forall ((t@@8 T@U) ) (! (= (Tag (TSeq t@@8)) TagSeq)
 :pattern ( (TSeq t@@8))
)))
(assert (forall ((Stacks.Stack$T@@13 T@U) ) (! (= (Tclass.Stacks.Stack_0 (Tclass.Stacks.Stack Stacks.Stack$T@@13)) Stacks.Stack$T@@13)
 :pattern ( (Tclass.Stacks.Stack Stacks.Stack$T@@13))
)))
(assert (forall ((Stacks.Stack$T@@14 T@U) ) (! (= (Tclass.Stacks.Stack?_0 (Tclass.Stacks.Stack? Stacks.Stack$T@@14)) Stacks.Stack$T@@14)
 :pattern ( (Tclass.Stacks.Stack? Stacks.Stack$T@@14))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._module.Empty) (U_2_bool (Lit boolType (bool_2_U false))))
 :pattern ( ($Is intType |x#0@@0| Tclass._module.Empty))
)))
(assert  (and (forall ((t0@@3 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@3 t1@@0 t2 (MapType1Store t0@@3 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@8 T@U) ($f@@1 T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@8 $f@@1))  (=> (and (or (not (= $o@@8 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@8) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@8 $f@@1))
)))
(assert (forall ((s@@10 T@U) (val@@4 T@U) ) (!  (and (= (|Seq#Build_inv0| (|Seq#Build| s@@10 val@@4)) s@@10) (= (|Seq#Build_inv1| (|Seq#Build| s@@10 val@@4)) val@@4))
 :pattern ( (|Seq#Build| s@@10 val@@4))
)))
(assert (forall ((Stacks.Stack$T@@15 T@U) ($h@@7 T@U) ($o@@9 T@U) ) (!  (=> (and ($IsGoodHeap $h@@7) (and (or (not (= $o@@9 null)) (not true)) (= (dtype $o@@9) (Tclass.Stacks.Stack? Stacks.Stack$T@@15)))) ($Is SeqType ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@9) Stacks.Stack.Elements)) (TSeq Stacks.Stack$T@@15)))
 :pattern ( ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@9) Stacks.Stack.Elements)) (Tclass.Stacks.Stack? Stacks.Stack$T@@15))
)))
(assert (forall ((bx@@7 T@U) (t@@9 T@U) ) (!  (=> ($IsBox bx@@7 (TSet t@@9)) (and (= ($Box SetType ($Unbox SetType bx@@7)) bx@@7) ($Is SetType ($Unbox SetType bx@@7) (TSet t@@9))))
 :pattern ( ($IsBox bx@@7 (TSet t@@9)))
)))
(assert (forall ((bx@@8 T@U) (t@@10 T@U) ) (!  (=> ($IsBox bx@@8 (TSeq t@@10)) (and (= ($Box SeqType ($Unbox SeqType bx@@8)) bx@@8) ($Is SeqType ($Unbox SeqType bx@@8) (TSeq t@@10))))
 :pattern ( ($IsBox bx@@8 (TSeq t@@10)))
)))
(assert (forall ((Stacks.Stack$T@@16 T@U) (bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 (Tclass.Stacks.Stack Stacks.Stack$T@@16)) (and (= ($Box refType ($Unbox refType bx@@9)) bx@@9) ($Is refType ($Unbox refType bx@@9) (Tclass.Stacks.Stack Stacks.Stack$T@@16))))
 :pattern ( ($IsBox bx@@9 (Tclass.Stacks.Stack Stacks.Stack$T@@16)))
)))
(assert (forall ((Stacks.Stack$T@@17 T@U) (bx@@10 T@U) ) (!  (=> ($IsBox bx@@10 (Tclass.Stacks.Stack? Stacks.Stack$T@@17)) (and (= ($Box refType ($Unbox refType bx@@10)) bx@@10) ($Is refType ($Unbox refType bx@@10) (Tclass.Stacks.Stack? Stacks.Stack$T@@17))))
 :pattern ( ($IsBox bx@@10 (Tclass.Stacks.Stack? Stacks.Stack$T@@17)))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (= (Tag Tclass._module.Empty) Tagclass._module.Empty))
(assert (= (TagFamily Tclass._module.Empty) tytagFamily$Empty))
(assert (forall ((s@@11 T@U) (n@@6 Int) (k@@2 Int) ) (!  (=> (and (and (<= 0 n@@6) (<= n@@6 k@@2)) (< k@@2 (|Seq#Length| s@@11))) (= (|Seq#Index| (|Seq#Drop| s@@11 n@@6) (- k@@2 n@@6)) (|Seq#Index| s@@11 k@@2)))
 :weight 25
 :pattern ( (|Seq#Index| s@@11 k@@2) (|Seq#Drop| s@@11 n@@6))
)))
(assert (forall ((s@@12 T@U) (m@@4 Int) (n@@7 Int) ) (!  (=> (and (and (<= 0 m@@4) (<= 0 n@@7)) (<= (+ m@@4 n@@7) (|Seq#Length| s@@12))) (= (|Seq#Drop| (|Seq#Drop| s@@12 m@@4) n@@7) (|Seq#Drop| s@@12 (+ m@@4 n@@7))))
 :pattern ( (|Seq#Drop| (|Seq#Drop| s@@12 m@@4) n@@7))
)))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (n@@8 Int) ) (!  (and (=> (< n@@8 (|Seq#Length| s0@@1)) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@8) (|Seq#Index| s0@@1 n@@8))) (=> (<= (|Seq#Length| s0@@1) n@@8) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@8) (|Seq#Index| s1@@1 (- n@@8 (|Seq#Length| s0@@1))))))
 :pattern ( (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@8))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@7)) (Lit BoxType ($Box T@@5 x@@7)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@7)))
)))
(assert (forall ((s@@13 T@U) ) (!  (=> (= (|Seq#Length| s@@13) 0) (= s@@13 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@13))
)))
(assert (forall ((s@@14 T@U) (n@@9 Int) ) (!  (=> (= n@@9 0) (= (|Seq#Take| s@@14 n@@9) |Seq#Empty|))
 :pattern ( (|Seq#Take| s@@14 n@@9))
)))
(assert (forall ((h@@5 T@U) (v@@8 T@U) ) (! ($IsAlloc intType v@@8 TInt h@@5)
 :pattern ( ($IsAlloc intType v@@8 TInt h@@5))
)))
(assert (forall ((v@@9 T@U) (t0@@4 T@U) ) (! (= ($Is SeqType v@@9 (TSeq t0@@4)) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@9))) ($IsBox (|Seq#Index| v@@9 i@@1) t0@@4))
 :pattern ( (|Seq#Index| v@@9 i@@1))
)))
 :pattern ( ($Is SeqType v@@9 (TSeq t0@@4)))
)))
(assert (forall ((v@@10 T@U) ) (! ($Is intType v@@10 TInt)
 :pattern ( ($Is intType v@@10 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $Heap@4 () T@U)
(declare-fun call2formal@this@0 () T@U)
(declare-fun |$rhs##0@0| () Int)
(declare-fun |count#0@0| () Int)
(declare-fun call2formal@this () T@U)
(declare-fun call0formal@Stacks.Stack$T () T@U)
(declare-fun $Heap@@2 () T@U)
(declare-fun call0formal@Stacks.Stack$T@0 () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun call2formal@this@0@@0 () T@U)
(declare-fun |count#0@1| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun call2formal@this@@0 () T@U)
(declare-fun call0formal@Stacks.Stack$T@@0 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |t##0@0| () Int)
(declare-fun |call2formal@t#0@0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |t##1@0| () Int)
(declare-fun |call2formal@t#0@0@@0| () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |t##2@0| () Int)
(declare-fun |call2formal@t#0@0@@1| () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun |call3formal@t#0| () T@U)
(declare-fun call0formal@Stacks.Stack$T@@1 () T@U)
(declare-fun |call3formal@t#0@0| () T@U)
(declare-fun |defass#s#0| () Bool)
(declare-fun |s#0| () T@U)
(declare-fun |count#0| () Int)
(declare-fun |defass#s'#0| () Bool)
(declare-fun |s'#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 34) (let ((anon2_correct  (and (=> (= (ControlFlow 0 2) (- 0 11)) (|Seq#Equal| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 call2formal@this@0) Stacks.Stack.Elements)) (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box intType (int_2_U (LitInt 10)))) ($Box intType (int_2_U (LitInt 12)))))) (and (=> (= (ControlFlow 0 2) (- 0 10)) (= |$rhs##0@0| (LitInt 11))) (=> (and (|Seq#Equal| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 call2formal@this@0) Stacks.Stack.Elements)) (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box intType (int_2_U (LitInt 10)))) ($Box intType (int_2_U (LitInt 12))))) (= |$rhs##0@0| (LitInt 11))) (and (=> (= (ControlFlow 0 2) (- 0 9)) true) (and (=> (= (ControlFlow 0 2) (- 0 8)) (or (not (= call2formal@this@0 null)) (not true))) (=> (or (not (= call2formal@this@0 null)) (not true)) (=> ($IsAllocBox ($Box refType call2formal@this@0) (Tclass.Stacks.Stack? TInt) $Heap@4) (and (=> (= (ControlFlow 0 2) (- 0 7)) (Stacks.Stack.Valid TInt $Heap@4 call2formal@this@0)) (=> (and (and (Stacks.Stack.Valid TInt $Heap@4 call2formal@this@0) (|Stacks.Stack.Count#canCall| TInt $Heap@4 call2formal@this@0)) (and (|Stacks.Stack.Count#canCall| TInt $Heap@4 call2formal@this@0) (= |count#0@0| (Stacks.Stack.Count TInt $Heap@4 call2formal@this@0)))) (and (=> (= (ControlFlow 0 2) (- 0 6)) (= |count#0@0| (LitInt 2))) (=> (= |count#0@0| (LitInt 2)) (=> (and (and (and (and (or (not (= call2formal@this null)) (not true)) (and ($Is refType call2formal@this (Tclass.Stacks.Stack call0formal@Stacks.Stack$T)) ($IsAlloc refType call2formal@this (Tclass.Stacks.Stack call0formal@Stacks.Stack$T) $Heap@@2))) (= call0formal@Stacks.Stack$T@0 Tclass._module.Empty)) (and (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (and (or (not (= call2formal@this@0@@0 null)) (not true)) (and ($Is refType call2formal@this@0@@0 (Tclass.Stacks.Stack call0formal@Stacks.Stack$T@0)) ($IsAlloc refType call2formal@this@0@@0 (Tclass.Stacks.Stack call0formal@Stacks.Stack$T@0) $Heap@5))))) (and (and (and (|Stacks.Stack.Valid#canCall| call0formal@Stacks.Stack$T@0 $Heap@5 call2formal@this@0@@0) (Stacks.Stack.Valid call0formal@Stacks.Stack$T@0 $Heap@5 call2formal@this@0@@0)) (and (forall (($o@@10 T@U) ) (!  (=> (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 call2formal@this@0@@0) Stacks.Stack.Repr)) ($Box refType $o@@10)) (or (not (= $o@@10 null)) (not true)))
 :pattern (  (or (not (= $o@@10 null)) (not true)))
)) (forall (($o@@11 T@U) ) (!  (=> (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 call2formal@this@0@@0) Stacks.Stack.Repr)) ($Box refType $o@@11)) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@11) alloc)))))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 call2formal@this@0@@0) Stacks.Stack.Repr)) ($Box refType $o@@11)))
)))) (and (and (|Seq#Equal| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 call2formal@this@0@@0) Stacks.Stack.Elements)) |Seq#Empty|) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 call2formal@this@0@@0) alloc))))) (and (forall (($o@@12 T@U) ) (!  (=> (and (or (not (= $o@@12 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@12) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@12) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@12)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@12))
)) ($HeapSucc $Heap@4 $Heap@5))))) (and (=> (= (ControlFlow 0 2) (- 0 5)) true) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (not (= call2formal@this@0@@0 null)) (not true))) (=> (or (not (= call2formal@this@0@@0 null)) (not true)) (=> ($IsAllocBox ($Box refType call2formal@this@0@@0) (Tclass.Stacks.Stack? Tclass._module.Empty) $Heap@5) (and (=> (= (ControlFlow 0 2) (- 0 3)) (Stacks.Stack.Valid Tclass._module.Empty $Heap@5 call2formal@this@0@@0)) (=> (Stacks.Stack.Valid Tclass._module.Empty $Heap@5 call2formal@this@0@@0) (=> (and (and (|Stacks.Stack.Count#canCall| Tclass._module.Empty $Heap@5 call2formal@this@0@@0) (|Stacks.Stack.Count#canCall| Tclass._module.Empty $Heap@5 call2formal@this@0@@0)) (and (= |count#0@1| (Stacks.Stack.Count Tclass._module.Empty $Heap@5 call2formal@this@0@@0)) (= (ControlFlow 0 2) (- 0 1)))) (= |count#0@1| (LitInt 0)))))))))))))))))))))))
(let ((anon3_Else_correct  (=> (and (not (|Seq#Equal| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 call2formal@this@0) Stacks.Stack.Elements)) (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box intType (int_2_U (LitInt 10)))) ($Box intType (int_2_U (LitInt 12)))))) (= (ControlFlow 0 13) 2)) anon2_correct)))
(let ((anon3_Then_correct  (=> (and (|Seq#Equal| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 call2formal@this@0) Stacks.Stack.Elements)) (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box intType (int_2_U (LitInt 10)))) ($Box intType (int_2_U (LitInt 12))))) (= (ControlFlow 0 12) 2)) anon2_correct)))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@2 alloc false)) (=> (and (or (not (= call2formal@this@@0 null)) (not true)) (and ($Is refType call2formal@this@@0 (Tclass.Stacks.Stack call0formal@Stacks.Stack$T@@0)) ($IsAlloc refType call2formal@this@@0 (Tclass.Stacks.Stack call0formal@Stacks.Stack$T@@0) $Heap@@2))) (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (or (not (= call2formal@this@0 null)) (not true)) (and ($Is refType call2formal@this@0 (Tclass.Stacks.Stack TInt)) ($IsAlloc refType call2formal@this@0 (Tclass.Stacks.Stack TInt) $Heap@0)))) (=> (and (and (and (|Stacks.Stack.Valid#canCall| TInt $Heap@0 call2formal@this@0) (Stacks.Stack.Valid TInt $Heap@0 call2formal@this@0)) (and (forall (($o@@13 T@U) ) (!  (=> (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@13)) (or (not (= $o@@13 null)) (not true)))
 :pattern (  (or (not (= $o@@13 null)) (not true)))
)) (forall (($o@@14 T@U) ) (!  (=> (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@14)) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@2 $o@@14) alloc)))))
 :pattern ( (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@14)))
)))) (and (and (|Seq#Equal| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 call2formal@this@0) Stacks.Stack.Elements)) |Seq#Empty|) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@2 call2formal@this@0) alloc))))) (and (forall (($o@@15 T@U) ) (!  (=> (and (or (not (= $o@@15 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@2 $o@@15) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@15) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@2 $o@@15)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@15))
)) ($HeapSucc $Heap@@2 $Heap@0)))) (and (=> (= (ControlFlow 0 14) (- 0 33)) true) (and (=> (= (ControlFlow 0 14) (- 0 32)) (or (not (= call2formal@this@0 null)) (not true))) (=> (or (not (= call2formal@this@0 null)) (not true)) (=> (= |t##0@0| (LitInt 10)) (and (=> (= (ControlFlow 0 14) (- 0 31)) (forall (($o@@16 T@U) ($f@@2 T@U) )  (=> (and (and (or (not (= $o@@16 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@16) alloc)))) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@16))) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@16 $f@@2))))) (=> (forall (($o@@17 T@U) ($f@@3 T@U) )  (=> (and (and (or (not (= $o@@17 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@17) alloc)))) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@17))) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@17 $f@@3)))) (=> (= |call2formal@t#0@0| ($Box intType (int_2_U |t##0@0|))) (and (=> (= (ControlFlow 0 14) (- 0 30)) (Stacks.Stack.Valid TInt $Heap@0 call2formal@this@0)) (=> (Stacks.Stack.Valid TInt $Heap@0 call2formal@this@0) (=> (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (and (|Stacks.Stack.Valid#canCall| TInt $Heap@1 call2formal@this@0) (Stacks.Stack.Valid TInt $Heap@1 call2formal@this@0))) (=> (and (and (and (forall (($o@@18 T@U) ) (!  (=> (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@18)) (not (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@18)))) (or (not (= $o@@18 null)) (not true)))
 :pattern (  (or (not (= $o@@18 null)) (not true)))
)) (forall (($o@@19 T@U) ) (!  (=> (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@19)) (not (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@19)))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@19) alloc)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@19) alloc)))
))) (|Seq#Equal| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 call2formal@this@0) Stacks.Stack.Elements)) (|Seq#Append| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 call2formal@this@0) Stacks.Stack.Elements)) (|Seq#Build| |Seq#Empty| |call2formal@t#0@0|)))) (and (forall (($o@@20 T@U) ) (!  (=> (and (or (not (= $o@@20 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@20) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@20) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@20)) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@20))))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@20))
)) ($HeapSucc $Heap@0 $Heap@1))) (and (=> (= (ControlFlow 0 14) (- 0 29)) true) (and (=> (= (ControlFlow 0 14) (- 0 28)) (or (not (= call2formal@this@0 null)) (not true))) (=> (or (not (= call2formal@this@0 null)) (not true)) (=> (= |t##1@0| (LitInt 12)) (and (=> (= (ControlFlow 0 14) (- 0 27)) (forall (($o@@21 T@U) ($f@@4 T@U) )  (=> (and (and (or (not (= $o@@21 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@21) alloc)))) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@21))) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@21 $f@@4))))) (=> (forall (($o@@22 T@U) ($f@@5 T@U) )  (=> (and (and (or (not (= $o@@22 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@22) alloc)))) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@22))) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@22 $f@@5)))) (=> (= |call2formal@t#0@0@@0| ($Box intType (int_2_U |t##1@0|))) (and (=> (= (ControlFlow 0 14) (- 0 26)) (Stacks.Stack.Valid TInt $Heap@1 call2formal@this@0)) (=> (Stacks.Stack.Valid TInt $Heap@1 call2formal@this@0) (=> (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (and (|Stacks.Stack.Valid#canCall| TInt $Heap@2 call2formal@this@0) (Stacks.Stack.Valid TInt $Heap@2 call2formal@this@0))) (=> (and (and (and (forall (($o@@23 T@U) ) (!  (=> (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@23)) (not (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@23)))) (or (not (= $o@@23 null)) (not true)))
 :pattern (  (or (not (= $o@@23 null)) (not true)))
)) (forall (($o@@24 T@U) ) (!  (=> (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@24)) (not (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@24)))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@24) alloc)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@24) alloc)))
))) (|Seq#Equal| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 call2formal@this@0) Stacks.Stack.Elements)) (|Seq#Append| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 call2formal@this@0) Stacks.Stack.Elements)) (|Seq#Build| |Seq#Empty| |call2formal@t#0@0@@0|)))) (and (forall (($o@@25 T@U) ) (!  (=> (and (or (not (= $o@@25 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@25) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@25) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@25)) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@25))))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@25))
)) ($HeapSucc $Heap@1 $Heap@2))) (and (=> (= (ControlFlow 0 14) (- 0 25)) true) (and (=> (= (ControlFlow 0 14) (- 0 24)) (or (not (= call2formal@this@0 null)) (not true))) (=> (or (not (= call2formal@this@0 null)) (not true)) (=> (= |t##2@0| (LitInt 11)) (and (=> (= (ControlFlow 0 14) (- 0 23)) (forall (($o@@26 T@U) ($f@@6 T@U) )  (=> (and (and (or (not (= $o@@26 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@26) alloc)))) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@26))) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@26 $f@@6))))) (=> (forall (($o@@27 T@U) ($f@@7 T@U) )  (=> (and (and (or (not (= $o@@27 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@27) alloc)))) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@27))) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@27 $f@@7)))) (=> (= |call2formal@t#0@0@@1| ($Box intType (int_2_U |t##2@0|))) (and (=> (= (ControlFlow 0 14) (- 0 22)) (Stacks.Stack.Valid TInt $Heap@2 call2formal@this@0)) (=> (Stacks.Stack.Valid TInt $Heap@2 call2formal@this@0) (=> (and (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (and (|Stacks.Stack.Valid#canCall| TInt $Heap@3 call2formal@this@0) (Stacks.Stack.Valid TInt $Heap@3 call2formal@this@0))) (=> (and (and (and (forall (($o@@28 T@U) ) (!  (=> (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@28)) (not (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@28)))) (or (not (= $o@@28 null)) (not true)))
 :pattern (  (or (not (= $o@@28 null)) (not true)))
)) (forall (($o@@29 T@U) ) (!  (=> (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@29)) (not (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@29)))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@29) alloc)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@29) alloc)))
))) (|Seq#Equal| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 call2formal@this@0) Stacks.Stack.Elements)) (|Seq#Append| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 call2formal@this@0) Stacks.Stack.Elements)) (|Seq#Build| |Seq#Empty| |call2formal@t#0@0@@1|)))) (and (forall (($o@@30 T@U) ) (!  (=> (and (or (not (= $o@@30 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@30) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@30) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@30)) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@30))))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@30))
)) ($HeapSucc $Heap@2 $Heap@3))) (and (=> (= (ControlFlow 0 14) (- 0 21)) true) (and (=> (= (ControlFlow 0 14) (- 0 20)) (or (not (= call2formal@this@0 null)) (not true))) (=> (or (not (= call2formal@this@0 null)) (not true)) (and (=> (= (ControlFlow 0 14) (- 0 19)) (forall (($o@@31 T@U) ($f@@8 T@U) )  (=> (and (and (or (not (= $o@@31 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@31) alloc)))) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@31))) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@31 $f@@8))))) (=> (forall (($o@@32 T@U) ($f@@9 T@U) )  (=> (and (and (or (not (= $o@@32 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@32) alloc)))) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@32))) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@32 $f@@9)))) (=> (and ($IsBox |call3formal@t#0| call0formal@Stacks.Stack$T@@1) ($IsAllocBox |call3formal@t#0| call0formal@Stacks.Stack$T@@1 $Heap@@2)) (and (=> (= (ControlFlow 0 14) (- 0 18)) (Stacks.Stack.Valid TInt $Heap@3 call2formal@this@0)) (=> (Stacks.Stack.Valid TInt $Heap@3 call2formal@this@0) (and (=> (= (ControlFlow 0 14) (- 0 17)) (not (|Seq#Equal| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 call2formal@this@0) Stacks.Stack.Elements)) |Seq#Empty|))) (=> (not (|Seq#Equal| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 call2formal@this@0) Stacks.Stack.Elements)) |Seq#Empty|)) (=> (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (=> (and (and ($IsBox |call3formal@t#0@0| TInt) ($IsAllocBox |call3formal@t#0@0| TInt $Heap@4)) (and (|Stacks.Stack.Valid#canCall| TInt $Heap@4 call2formal@this@0) (Stacks.Stack.Valid TInt $Heap@4 call2formal@this@0))) (=> (and (and (and (forall (($o@@33 T@U) ) (!  (=> (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@33)) (not (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@33)))) (or (not (= $o@@33 null)) (not true)))
 :pattern (  (or (not (= $o@@33 null)) (not true)))
)) (forall (($o@@34 T@U) ) (!  (=> (and (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@34)) (not (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@34)))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@34) alloc)))))
 :pattern ( ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@34) alloc)))
))) (let ((|last#0| (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 call2formal@this@0) Stacks.Stack.Elements))) 1)))
(= |call3formal@t#0@0| (|Seq#Index| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 call2formal@this@0) Stacks.Stack.Elements)) |last#0|)))) (and (and (let ((|last#0@@0| (- (|Seq#Length| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 call2formal@this@0) Stacks.Stack.Elements))) 1)))
(|Seq#Equal| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 call2formal@this@0) Stacks.Stack.Elements)) (|Seq#Take| ($Unbox SeqType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 call2formal@this@0) Stacks.Stack.Elements)) |last#0@@0|))) (forall (($o@@35 T@U) ) (!  (=> (and (or (not (= $o@@35 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@35) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@35) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@35)) (|Set#IsMember| ($Unbox SetType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 call2formal@this@0) Stacks.Stack.Repr)) ($Box refType $o@@35))))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@35))
))) (and ($HeapSucc $Heap@3 $Heap@4) (= |$rhs##0@0| (U_2_int ($Unbox intType |call3formal@t#0@0|)))))) (and (=> (= (ControlFlow 0 14) (- 0 16)) true) (and (=> (= (ControlFlow 0 14) (- 0 15)) (or (not (= call2formal@this@0 null)) (not true))) (and (=> (= (ControlFlow 0 14) 12) anon3_Then_correct) (=> (= (ControlFlow 0 14) 13) anon3_Else_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@2) ($IsHeapAnchor $Heap@@2)) (=> (and (and (and (=> |defass#s#0| (and ($Is refType |s#0| (Tclass.Stacks.Stack TInt)) ($IsAlloc refType |s#0| (Tclass.Stacks.Stack TInt) $Heap@@2))) true) (and (<= (LitInt 0) |count#0|) true)) (and (and (=> |defass#s'#0| (and ($Is refType |s'#0| (Tclass.Stacks.Stack Tclass._module.Empty)) ($IsAlloc refType |s'#0| (Tclass.Stacks.Stack Tclass._module.Empty) $Heap@@2))) true) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 34) 14)))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
