(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (Int) Int)
(declare-fun $generated@@20 (T@T T@U) T@U)
(declare-fun $generated@@23 () Int)
(declare-fun $generated@@24 (Int Int) Int)
(declare-fun $generated@@25 (Int Int) Bool)
(declare-fun $generated@@26 ((_ BitVec 32)) Int)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@41 () T@T)
(declare-fun $generated@@42 () T@T)
(declare-fun $generated@@43 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@44 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@46 (T@T T@T) T@T)
(declare-fun $generated@@47 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@48 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@49 (T@T) T@T)
(declare-fun $generated@@50 (T@T) T@T)
(declare-fun $generated@@99 (T@U) T@U)
(declare-fun $generated@@100 () T@U)
(declare-fun $generated@@101 (T@U) T@U)
(declare-fun $generated@@102 (T@T T@U T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (forall (($generated@@19 Int) ) (! (= ($generated@@18 $generated@@19) $generated@@19)
 :pattern ( ($generated@@18 $generated@@19))
)))
(assert (forall (($generated@@21 T@U) ($generated@@22 T@T) ) (! (= ($generated@@20 $generated@@22 $generated@@21) $generated@@21)
 :pattern ( ($generated@@20 $generated@@22 $generated@@21))
)))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@27 Int) ($generated@@28 Int) ) (!  (=> (or ($generated@@25 ($generated@@18 $generated@@27) ($generated@@18 $generated@@28)) (and (< 1 $generated@@23) (and (and (and (<= ($generated@@18 0) $generated@@27) (< $generated@@27 4294967296)) (and (<= ($generated@@18 0) $generated@@28) (< $generated@@28 4294967296))) ($generated@@7 ($generated@@20 $generated@@3 ($generated@@6  (or (not (= $generated@@28 0)) (not true)))))))) (= ($generated@@24 ($generated@@18 $generated@@27) ($generated@@18 $generated@@28)) ($generated@@26 (bvudiv ((_ int2bv 32) ($generated@@18 $generated@@27)) ((_ int2bv 32) ($generated@@18 $generated@@28))))))
 :weight 3
 :pattern ( ($generated@@24 ($generated@@18 $generated@@27) ($generated@@18 $generated@@28)))
))))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@T) ) (! (= ($generated@@30 $generated@@32 ($generated@@29 $generated@@32 $generated@@31)) $generated@@31)
 :pattern ( ($generated@@29 $generated@@32 $generated@@31))
)))
(assert (forall (($generated@@33 (_ BitVec 32)) ) (!  (and (and (<= 0 ($generated@@26 $generated@@33)) (< ($generated@@26 $generated@@33) 4294967296)) (= ($generated@@26 $generated@@33) (bv2int $generated@@33)))
 :pattern ( ($generated@@26 $generated@@33))
)))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@34 Int) ($generated@@35 Int) ) (!  (=> (or ($generated@@25 $generated@@34 $generated@@35) (and (< 1 $generated@@23) (and (and (and (<= ($generated@@18 0) $generated@@34) (< $generated@@34 4294967296)) (and (<= ($generated@@18 0) $generated@@35) (< $generated@@35 4294967296))) (or (not (= $generated@@35 0)) (not true))))) (= ($generated@@24 $generated@@34 $generated@@35) ($generated@@26 (bvudiv ((_ int2bv 32) $generated@@34) ((_ int2bv 32) $generated@@35)))))
 :pattern ( ($generated@@24 $generated@@34 $generated@@35))
))))
(assert (forall (($generated@@36 T@U) ($generated@@37 T@T) ) (! (= ($generated@@29 $generated@@37 ($generated@@30 $generated@@37 $generated@@36)) $generated@@36)
 :pattern ( ($generated@@30 $generated@@37 $generated@@36))
)))
(assert  (=> (<= 1 $generated@@23) (forall (($generated@@38 Int) ($generated@@39 Int) ) (!  (=> (or ($generated@@25 $generated@@38 $generated@@39) (and (< 1 $generated@@23) (and (and (and (<= ($generated@@18 0) $generated@@38) (< $generated@@38 4294967296)) (and (<= ($generated@@18 0) $generated@@39) (< $generated@@39 4294967296))) (or (not (= $generated@@39 0)) (not true))))) (and (<= ($generated@@18 0) ($generated@@24 $generated@@38 $generated@@39)) (< ($generated@@24 $generated@@38 $generated@@39) 4294967296)))
 :pattern ( ($generated@@24 $generated@@38 $generated@@39))
))))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@51 T@T) ($generated@@52 T@T) ($generated@@53 T@T) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (! (= ($generated@@40 $generated@@51 $generated@@52 $generated@@53 ($generated@@47 $generated@@51 $generated@@52 $generated@@53 $generated@@55 $generated@@56 $generated@@57 $generated@@54) $generated@@56 $generated@@57) $generated@@54)
 :weight 0
)) (and (forall (($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@T) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ) (!  (or (= $generated@@63 $generated@@65) (= ($generated@@40 $generated@@58 $generated@@59 $generated@@60 ($generated@@47 $generated@@58 $generated@@59 $generated@@60 $generated@@62 $generated@@63 $generated@@64 $generated@@61) $generated@@65 $generated@@66) ($generated@@40 $generated@@58 $generated@@59 $generated@@60 $generated@@62 $generated@@65 $generated@@66)))
 :weight 0
)) (forall (($generated@@67 T@T) ($generated@@68 T@T) ($generated@@69 T@T) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@U) ) (!  (or (= $generated@@73 $generated@@75) (= ($generated@@40 $generated@@67 $generated@@68 $generated@@69 ($generated@@47 $generated@@67 $generated@@68 $generated@@69 $generated@@71 $generated@@72 $generated@@73 $generated@@70) $generated@@74 $generated@@75) ($generated@@40 $generated@@67 $generated@@68 $generated@@69 $generated@@71 $generated@@74 $generated@@75)))
 :weight 0
)))) (= ($generated@@2 $generated@@41) 3)) (= ($generated@@2 $generated@@42) 4)) (forall (($generated@@76 T@T) ($generated@@77 T@T) ($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (! (= ($generated@@44 $generated@@76 $generated@@77 ($generated@@48 $generated@@76 $generated@@77 $generated@@79 $generated@@80 $generated@@78) $generated@@80) $generated@@78)
 :weight 0
))) (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ) (!  (or (= $generated@@85 $generated@@86) (= ($generated@@44 $generated@@81 $generated@@82 ($generated@@48 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@83) $generated@@86) ($generated@@44 $generated@@81 $generated@@82 $generated@@84 $generated@@86)))
 :weight 0
))) (= ($generated@@2 $generated@@45) 5)) (forall (($generated@@87 T@T) ($generated@@88 T@T) ) (= ($generated@@2 ($generated@@46 $generated@@87 $generated@@88)) 6))) (forall (($generated@@89 T@T) ($generated@@90 T@T) ) (! (= ($generated@@49 ($generated@@46 $generated@@89 $generated@@90)) $generated@@89)
 :pattern ( ($generated@@46 $generated@@89 $generated@@90))
))) (forall (($generated@@91 T@T) ($generated@@92 T@T) ) (! (= ($generated@@50 ($generated@@46 $generated@@91 $generated@@92)) $generated@@92)
 :pattern ( ($generated@@46 $generated@@91 $generated@@92))
))))
(assert (forall (($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 Bool) ($generated@@97 T@U) ($generated@@98 T@U) ) (! (= ($generated@@7 ($generated@@40 $generated@@41 $generated@@42 $generated@@3 ($generated@@43 $generated@@93 $generated@@94 $generated@@95 $generated@@96) $generated@@97 $generated@@98))  (=> (and (or (not (= $generated@@97 $generated@@93)) (not true)) ($generated@@7 ($generated@@29 $generated@@3 ($generated@@44 $generated@@42 $generated@@45 ($generated@@44 $generated@@41 ($generated@@46 $generated@@42 $generated@@45) $generated@@94 $generated@@97) $generated@@95)))) $generated@@96))
 :pattern ( ($generated@@40 $generated@@41 $generated@@42 $generated@@3 ($generated@@43 $generated@@93 $generated@@94 $generated@@95 $generated@@96) $generated@@97 $generated@@98))
)))
(assert (= ($generated@@99 $generated@@100) $generated@@0))
(assert (= ($generated@@101 $generated@@100) $generated@@1))
(assert (forall (($generated@@103 T@U) ) (! (= ($generated@@102 $generated@@4 $generated@@103 $generated@@100)  (and (<= ($generated@@18 0) ($generated@@9 $generated@@103)) (< ($generated@@9 $generated@@103) 4294967296)))
 :pattern ( ($generated@@102 $generated@@4 $generated@@103 $generated@@100))
)))
(assert (forall (($generated@@104 Int) ) (! (= ($generated@@30 $generated@@4 ($generated@@8 ($generated@@18 $generated@@104))) ($generated@@20 $generated@@45 ($generated@@30 $generated@@4 ($generated@@8 $generated@@104))))
 :pattern ( ($generated@@30 $generated@@4 ($generated@@8 ($generated@@18 $generated@@104))))
)))
(assert (forall (($generated@@105 T@U) ($generated@@106 T@T) ) (! (= ($generated@@30 $generated@@106 ($generated@@20 $generated@@106 $generated@@105)) ($generated@@20 $generated@@45 ($generated@@30 $generated@@106 $generated@@105)))
 :pattern ( ($generated@@30 $generated@@106 ($generated@@20 $generated@@106 $generated@@105)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@107 () Int)
(declare-fun $generated@@108 () Int)
(declare-fun $generated@@109 () (_ BitVec 32))
(declare-fun $generated@@110 () Int)
(declare-fun $generated@@111 () T@U)
(declare-fun $generated@@112 () T@U)
(declare-fun $generated@@113 () T@U)
(declare-fun $generated@@114 () Int)
(declare-fun $generated@@115 (T@U) Bool)
(declare-fun $generated@@116 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let (($generated@@117  (and (=> (= (ControlFlow 0 3) (- 0 7)) (and (<= 0 $generated@@107) (< $generated@@107 4294967296))) (=> (and (<= 0 $generated@@107) (< $generated@@107 4294967296)) (and (=> (= (ControlFlow 0 3) (- 0 6)) (and (<= 0 $generated@@108) (< $generated@@108 4294967296))) (=> (and (<= 0 $generated@@108) (< $generated@@108 4294967296)) (and (=> (= (ControlFlow 0 3) (- 0 5)) (or (not (= ((_ int2bv 32) $generated@@108) #x00000000)) (not true))) (=> (or (not (= ((_ int2bv 32) $generated@@108) #x00000000)) (not true)) (=> (= $generated@@109 (bvudiv ((_ int2bv 32) $generated@@107) ((_ int2bv 32) $generated@@108))) (and (=> (= (ControlFlow 0 3) (- 0 4)) (and (<= ($generated@@18 0) ($generated@@26 $generated@@109)) (< ($generated@@26 $generated@@109) 4294967296))) (=> (and (<= ($generated@@18 0) ($generated@@26 $generated@@109)) (< ($generated@@26 $generated@@109) 4294967296)) (=> (and (= $generated@@110 ($generated@@26 (bvudiv ((_ int2bv 32) $generated@@107) ((_ int2bv 32) $generated@@108)))) (= (ControlFlow 0 3) (- 0 2))) (and (<= ($generated@@18 0) $generated@@110) (< $generated@@110 4294967296))))))))))))))
(let (($generated@@118 true))
(let (($generated@@119  (=> (and (= $generated@@111 ($generated@@43 $generated@@112 $generated@@113 $generated false)) (= $generated@@114 ($generated@@18 0))) (and (=> (= (ControlFlow 0 8) (- 0 9)) (and (<= ($generated@@18 0) $generated@@114) (< $generated@@114 4294967296))) (=> (and (<= ($generated@@18 0) $generated@@114) (< $generated@@114 4294967296)) (=> (or (not (= $generated@@108 0)) (not true)) (and (=> (= (ControlFlow 0 8) 1) $generated@@118) (=> (= (ControlFlow 0 8) 3) $generated@@117))))))))
(let (($generated@@120  (=> (and (and (and ($generated@@115 $generated@@113) ($generated@@116 $generated@@113)) (and (<= ($generated@@18 0) $generated@@107) (< $generated@@107 4294967296))) (and (and (<= ($generated@@18 0) $generated@@108) (< $generated@@108 4294967296)) (and (= 1 $generated@@23) (= (ControlFlow 0 10) 8)))) $generated@@119)))
$generated@@120)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
