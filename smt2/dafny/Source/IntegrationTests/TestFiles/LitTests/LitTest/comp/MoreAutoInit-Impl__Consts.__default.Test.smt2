(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun Tagclass.Consts.Datatype () T@U)
(declare-fun Tagclass.Consts.Class () T@U)
(declare-fun Tagclass.Consts.Trait () T@U)
(declare-fun |##Consts.Datatype.Dt0| () T@U)
(declare-fun |##Consts.Datatype.Dt1| () T@U)
(declare-fun Tagclass.Consts.Trait? () T@U)
(declare-fun Tagclass.Consts.Class? () T@U)
(declare-fun tytagFamily$Datatype () T@U)
(declare-fun tytagFamily$Class () T@U)
(declare-fun tytagFamily$Trait () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun implements$Consts.Trait (T@U T@U) Bool)
(declare-fun Tclass.Consts.Class? (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass.Consts.Trait (T@U) T@U)
(declare-fun Tclass.Consts.Trait? (T@U) T@U)
(declare-fun Tclass.Consts.Class (T@U) T@U)
(declare-fun null () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun Consts.Datatype.Dt0_q (T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun Consts.Datatype.Dt1_q (T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |#Consts.Datatype.Dt0| (T@U) T@U)
(declare-fun |#Consts.Datatype.Dt1| (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Tclass.Consts.Datatype (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass.Consts.Datatype_0 (T@U) T@U)
(declare-fun Tclass.Consts.Class_0 (T@U) T@U)
(declare-fun Tclass.Consts.Trait_0 (T@U) T@U)
(declare-fun Consts.Datatype.a (T@U) T@U)
(declare-fun Tclass.Consts.Trait?_0 (T@U) T@U)
(declare-fun Tclass.Consts.Class?_0 (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc Tagclass.Consts.Datatype Tagclass.Consts.Class Tagclass.Consts.Trait |##Consts.Datatype.Dt0| |##Consts.Datatype.Dt1| Tagclass.Consts.Trait? Tagclass.Consts.Class? tytagFamily$Datatype tytagFamily$Class tytagFamily$Trait)
)
(assert (forall ((Consts.Class$Ac T@U) ) (implements$Consts.Trait (Tclass.Consts.Class? Consts.Class$Ac) Consts.Class$Ac)))
(assert (= (Ctor refType) 3))
(assert (forall ((Consts.Trait$At T@U) (|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass.Consts.Trait Consts.Trait$At) $h) ($IsAlloc refType |c#0| (Tclass.Consts.Trait? Consts.Trait$At) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass.Consts.Trait Consts.Trait$At) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass.Consts.Trait? Consts.Trait$At) $h))
)))
(assert (forall ((Consts.Class$Ac@@0 T@U) (|c#0@@0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0@@0| (Tclass.Consts.Class Consts.Class$Ac@@0) $h@@0) ($IsAlloc refType |c#0@@0| (Tclass.Consts.Class? Consts.Class$Ac@@0) $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| (Tclass.Consts.Class Consts.Class$Ac@@0) $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| (Tclass.Consts.Class? Consts.Class$Ac@@0) $h@@0))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((Consts.Trait$At@@0 T@U) ($o T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType $o (Tclass.Consts.Trait? Consts.Trait$At@@0) $h@@1)  (or (= $o null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o) alloc)))))
 :pattern ( ($IsAlloc refType $o (Tclass.Consts.Trait? Consts.Trait$At@@0) $h@@1))
)))
(assert (forall ((Consts.Class$Ac@@1 T@U) ($o@@0 T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o@@0 (Tclass.Consts.Class? Consts.Class$Ac@@1) $h@@2)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 (Tclass.Consts.Class? Consts.Class$Ac@@1) $h@@2))
)))
(assert (forall ((Consts.Class$Ac@@2 T@U) ($o@@1 T@U) ) (!  (=> ($Is refType $o@@1 (Tclass.Consts.Class? Consts.Class$Ac@@2)) ($Is refType $o@@1 (Tclass.Consts.Trait? Consts.Class$Ac@@2)))
 :pattern ( ($Is refType $o@@1 (Tclass.Consts.Class? Consts.Class$Ac@@2)))
)))
(assert (forall ((Consts.Class$Ac@@3 T@U) (bx T@U) ) (!  (=> ($IsBox bx (Tclass.Consts.Class? Consts.Class$Ac@@3)) ($IsBox bx (Tclass.Consts.Trait? Consts.Class$Ac@@3)))
 :pattern ( ($IsBox bx (Tclass.Consts.Class? Consts.Class$Ac@@3)))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((d T@U) ) (! (= (Consts.Datatype.Dt0_q d) (= (DatatypeCtorId d) |##Consts.Datatype.Dt0|))
 :pattern ( (Consts.Datatype.Dt0_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (Consts.Datatype.Dt1_q d@@0) (= (DatatypeCtorId d@@0) |##Consts.Datatype.Dt1|))
 :pattern ( (Consts.Datatype.Dt1_q d@@0))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= ($Box T ($Unbox T x@@2)) x@@2)
 :pattern ( ($Unbox T x@@2))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (Consts.Datatype.Dt0_q d@@1) (exists ((|a#1#0#0| T@U) ) (= d@@1 (|#Consts.Datatype.Dt0| |a#1#0#0|))))
 :pattern ( (Consts.Datatype.Dt0_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (Consts.Datatype.Dt1_q d@@2) (exists ((|a#7#0#0| T@U) ) (= d@@2 (|#Consts.Datatype.Dt1| |a#7#0#0|))))
 :pattern ( (Consts.Datatype.Dt1_q d@@2))
)))
(assert (forall ((Consts.Trait$At@@1 T@U) (|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| (Tclass.Consts.Trait Consts.Trait$At@@1))  (and ($Is refType |c#0@@1| (Tclass.Consts.Trait? Consts.Trait$At@@1)) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| (Tclass.Consts.Trait Consts.Trait$At@@1)))
 :pattern ( ($Is refType |c#0@@1| (Tclass.Consts.Trait? Consts.Trait$At@@1)))
)))
(assert (forall ((Consts.Class$Ac@@4 T@U) (|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| (Tclass.Consts.Class Consts.Class$Ac@@4))  (and ($Is refType |c#0@@2| (Tclass.Consts.Class? Consts.Class$Ac@@4)) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| (Tclass.Consts.Class Consts.Class$Ac@@4)))
 :pattern ( ($Is refType |c#0@@2| (Tclass.Consts.Class? Consts.Class$Ac@@4)))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@0 T@T) ) (! (= ($IsAllocBox ($Box T@@0 v) t h@@0) ($IsAlloc T@@0 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@0 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@0 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@0 t@@0 h@@1) ($IsAllocBox bx@@0 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@0 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@1 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@1 v@@0 t@@1 h@@2) ($IsAlloc T@@1 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@1 v@@0 t@@1 h@@2))
)))
(assert (forall ((Consts.Datatype$Ad T@U) ) (!  (and (= (Tag (Tclass.Consts.Datatype Consts.Datatype$Ad)) Tagclass.Consts.Datatype) (= (TagFamily (Tclass.Consts.Datatype Consts.Datatype$Ad)) tytagFamily$Datatype))
 :pattern ( (Tclass.Consts.Datatype Consts.Datatype$Ad))
)))
(assert (forall ((Consts.Class$Ac@@5 T@U) ) (!  (and (= (Tag (Tclass.Consts.Class Consts.Class$Ac@@5)) Tagclass.Consts.Class) (= (TagFamily (Tclass.Consts.Class Consts.Class$Ac@@5)) tytagFamily$Class))
 :pattern ( (Tclass.Consts.Class Consts.Class$Ac@@5))
)))
(assert (forall ((Consts.Trait$At@@2 T@U) ) (!  (and (= (Tag (Tclass.Consts.Trait Consts.Trait$At@@2)) Tagclass.Consts.Trait) (= (TagFamily (Tclass.Consts.Trait Consts.Trait$At@@2)) tytagFamily$Trait))
 :pattern ( (Tclass.Consts.Trait Consts.Trait$At@@2))
)))
(assert (forall ((Consts.Trait$At@@3 T@U) ) (!  (and (= (Tag (Tclass.Consts.Trait? Consts.Trait$At@@3)) Tagclass.Consts.Trait?) (= (TagFamily (Tclass.Consts.Trait? Consts.Trait$At@@3)) tytagFamily$Trait))
 :pattern ( (Tclass.Consts.Trait? Consts.Trait$At@@3))
)))
(assert (forall ((Consts.Class$Ac@@6 T@U) ) (!  (and (= (Tag (Tclass.Consts.Class? Consts.Class$Ac@@6)) Tagclass.Consts.Class?) (= (TagFamily (Tclass.Consts.Class? Consts.Class$Ac@@6)) tytagFamily$Class))
 :pattern ( (Tclass.Consts.Class? Consts.Class$Ac@@6))
)))
(assert (forall ((Consts.Class$Ac@@7 T@U) ($o@@2 T@U) ) (! (= ($Is refType $o@@2 (Tclass.Consts.Class? Consts.Class$Ac@@7))  (or (= $o@@2 null) (= (dtype $o@@2) (Tclass.Consts.Class? Consts.Class$Ac@@7))))
 :pattern ( ($Is refType $o@@2 (Tclass.Consts.Class? Consts.Class$Ac@@7)))
)))
(assert (forall ((Consts.Class$Ac@@8 T@U) (bx@@1 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsAllocBox bx@@1 (Tclass.Consts.Class? Consts.Class$Ac@@8) $h@@3) ($IsGoodHeap $h@@3)) ($IsAllocBox bx@@1 (Tclass.Consts.Trait? Consts.Class$Ac@@8) $h@@3))
 :pattern ( ($IsAllocBox bx@@1 (Tclass.Consts.Class? Consts.Class$Ac@@8) $h@@3))
)))
(assert (forall ((Consts.Class$Ac@@9 T@U) ($o@@3 T@U) ($heap T@U) ) (!  (=> ($IsAlloc refType $o@@3 (Tclass.Consts.Class? Consts.Class$Ac@@9) $heap) ($IsAlloc refType $o@@3 (Tclass.Consts.Trait? Consts.Class$Ac@@9) $heap))
 :pattern ( ($IsAlloc refType $o@@3 (Tclass.Consts.Class? Consts.Class$Ac@@9) $heap))
)))
(assert (= (Ctor DatatypeTypeType) 7))
(assert (forall ((Consts.Datatype$Ad@@0 T@U) (|a#2#0#0| T@U) ($h@@4 T@U) ) (!  (=> ($IsGoodHeap $h@@4) (= ($IsAlloc DatatypeTypeType (|#Consts.Datatype.Dt0| |a#2#0#0|) (Tclass.Consts.Datatype Consts.Datatype$Ad@@0) $h@@4) ($IsAllocBox |a#2#0#0| Consts.Datatype$Ad@@0 $h@@4)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#Consts.Datatype.Dt0| |a#2#0#0|) (Tclass.Consts.Datatype Consts.Datatype$Ad@@0) $h@@4))
)))
(assert (forall ((Consts.Datatype$Ad@@1 T@U) (|a#8#0#0| T@U) ($h@@5 T@U) ) (!  (=> ($IsGoodHeap $h@@5) (= ($IsAlloc DatatypeTypeType (|#Consts.Datatype.Dt1| |a#8#0#0|) (Tclass.Consts.Datatype Consts.Datatype$Ad@@1) $h@@5) ($IsAllocBox |a#8#0#0| Consts.Datatype$Ad@@1 $h@@5)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#Consts.Datatype.Dt1| |a#8#0#0|) (Tclass.Consts.Datatype Consts.Datatype$Ad@@1) $h@@5))
)))
(assert (forall ((Consts.Datatype$Ad@@2 T@U) (d@@3 T@U) ) (!  (=> ($Is DatatypeTypeType d@@3 (Tclass.Consts.Datatype Consts.Datatype$Ad@@2)) (or (Consts.Datatype.Dt0_q d@@3) (Consts.Datatype.Dt1_q d@@3)))
 :pattern ( (Consts.Datatype.Dt1_q d@@3) ($Is DatatypeTypeType d@@3 (Tclass.Consts.Datatype Consts.Datatype$Ad@@2)))
 :pattern ( (Consts.Datatype.Dt0_q d@@3) ($Is DatatypeTypeType d@@3 (Tclass.Consts.Datatype Consts.Datatype$Ad@@2)))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@2) ($Is T@@2 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@2))
)))
(assert (forall ((Consts.Datatype$Ad@@3 T@U) ) (! (= (Tclass.Consts.Datatype_0 (Tclass.Consts.Datatype Consts.Datatype$Ad@@3)) Consts.Datatype$Ad@@3)
 :pattern ( (Tclass.Consts.Datatype Consts.Datatype$Ad@@3))
)))
(assert (forall ((Consts.Class$Ac@@10 T@U) ) (! (= (Tclass.Consts.Class_0 (Tclass.Consts.Class Consts.Class$Ac@@10)) Consts.Class$Ac@@10)
 :pattern ( (Tclass.Consts.Class Consts.Class$Ac@@10))
)))
(assert (forall ((Consts.Trait$At@@4 T@U) ) (! (= (Tclass.Consts.Trait_0 (Tclass.Consts.Trait Consts.Trait$At@@4)) Consts.Trait$At@@4)
 :pattern ( (Tclass.Consts.Trait Consts.Trait$At@@4))
)))
(assert (forall ((|a#0#0#0| T@U) ) (! (= (DatatypeCtorId (|#Consts.Datatype.Dt0| |a#0#0#0|)) |##Consts.Datatype.Dt0|)
 :pattern ( (|#Consts.Datatype.Dt0| |a#0#0#0|))
)))
(assert (forall ((|a#4#0#0| T@U) ) (! (= (Consts.Datatype.a (|#Consts.Datatype.Dt0| |a#4#0#0|)) |a#4#0#0|)
 :pattern ( (|#Consts.Datatype.Dt0| |a#4#0#0|))
)))
(assert (forall ((|a#6#0#0| T@U) ) (! (= (DatatypeCtorId (|#Consts.Datatype.Dt1| |a#6#0#0|)) |##Consts.Datatype.Dt1|)
 :pattern ( (|#Consts.Datatype.Dt1| |a#6#0#0|))
)))
(assert (forall ((|a#10#0#0| T@U) ) (! (= (Consts.Datatype.a (|#Consts.Datatype.Dt1| |a#10#0#0|)) |a#10#0#0|)
 :pattern ( (|#Consts.Datatype.Dt1| |a#10#0#0|))
)))
(assert (forall ((Consts.Trait$At@@5 T@U) ) (! (= (Tclass.Consts.Trait?_0 (Tclass.Consts.Trait? Consts.Trait$At@@5)) Consts.Trait$At@@5)
 :pattern ( (Tclass.Consts.Trait? Consts.Trait$At@@5))
)))
(assert (forall ((Consts.Class$Ac@@11 T@U) ) (! (= (Tclass.Consts.Class?_0 (Tclass.Consts.Class? Consts.Class$Ac@@11)) Consts.Class$Ac@@11)
 :pattern ( (Tclass.Consts.Class? Consts.Class$Ac@@11))
)))
(assert (forall ((x@@3 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@3)) x@@3)
 :pattern ( ($Box T@@3 x@@3))
)))
(assert (forall ((Consts.Datatype$Ad@@4 T@U) (|a#2#0#0@@0| T@U) ) (! (= ($Is DatatypeTypeType (|#Consts.Datatype.Dt0| |a#2#0#0@@0|) (Tclass.Consts.Datatype Consts.Datatype$Ad@@4)) ($IsBox |a#2#0#0@@0| Consts.Datatype$Ad@@4))
 :pattern ( ($Is DatatypeTypeType (|#Consts.Datatype.Dt0| |a#2#0#0@@0|) (Tclass.Consts.Datatype Consts.Datatype$Ad@@4)))
)))
(assert (forall ((Consts.Datatype$Ad@@5 T@U) (|a#8#0#0@@0| T@U) ) (! (= ($Is DatatypeTypeType (|#Consts.Datatype.Dt1| |a#8#0#0@@0|) (Tclass.Consts.Datatype Consts.Datatype$Ad@@5)) ($IsBox |a#8#0#0@@0| Consts.Datatype$Ad@@5))
 :pattern ( ($Is DatatypeTypeType (|#Consts.Datatype.Dt1| |a#8#0#0@@0|) (Tclass.Consts.Datatype Consts.Datatype$Ad@@5)))
)))
(assert (forall ((Consts.Trait$At@@6 T@U) ($o@@4 T@U) ) (! (= ($Is refType $o@@4 (Tclass.Consts.Trait? Consts.Trait$At@@6))  (or (= $o@@4 null) (implements$Consts.Trait (dtype $o@@4) Consts.Trait$At@@6)))
 :pattern ( ($Is refType $o@@4 (Tclass.Consts.Trait? Consts.Trait$At@@6)))
)))
(assert (forall ((|a#5#0#0| T@U) ) (! (< (BoxRank |a#5#0#0|) (DtRank (|#Consts.Datatype.Dt0| |a#5#0#0|)))
 :pattern ( (|#Consts.Datatype.Dt0| |a#5#0#0|))
)))
(assert (forall ((|a#11#0#0| T@U) ) (! (< (BoxRank |a#11#0#0|) (DtRank (|#Consts.Datatype.Dt1| |a#11#0#0|)))
 :pattern ( (|#Consts.Datatype.Dt1| |a#11#0#0|))
)))
(assert (forall ((d@@4 T@U) (Consts.Datatype$Ad@@6 T@U) ($h@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (Consts.Datatype.Dt0_q d@@4) ($IsAlloc DatatypeTypeType d@@4 (Tclass.Consts.Datatype Consts.Datatype$Ad@@6) $h@@6))) ($IsAllocBox (Consts.Datatype.a d@@4) Consts.Datatype$Ad@@6 $h@@6))
 :pattern ( ($IsAllocBox (Consts.Datatype.a d@@4) Consts.Datatype$Ad@@6 $h@@6))
)))
(assert (forall ((d@@5 T@U) (Consts.Datatype$Ad@@7 T@U) ($h@@7 T@U) ) (!  (=> (and ($IsGoodHeap $h@@7) (and (Consts.Datatype.Dt1_q d@@5) ($IsAlloc DatatypeTypeType d@@5 (Tclass.Consts.Datatype Consts.Datatype$Ad@@7) $h@@7))) ($IsAllocBox (Consts.Datatype.a d@@5) Consts.Datatype$Ad@@7 $h@@7))
 :pattern ( ($IsAllocBox (Consts.Datatype.a d@@5) Consts.Datatype$Ad@@7 $h@@7))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@5 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@5 $f))  (=> (and (or (not (= $o@@5 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@5) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@5 $f))
)))
(assert (forall ((d@@6 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@6)) (DtRank d@@6))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@6)))
)))
(assert (forall ((Consts.Datatype$Ad@@8 T@U) (bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 (Tclass.Consts.Datatype Consts.Datatype$Ad@@8)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@2)) bx@@2) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@2) (Tclass.Consts.Datatype Consts.Datatype$Ad@@8))))
 :pattern ( ($IsBox bx@@2 (Tclass.Consts.Datatype Consts.Datatype$Ad@@8)))
)))
(assert (forall ((Consts.Class$Ac@@12 T@U) (bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 (Tclass.Consts.Class Consts.Class$Ac@@12)) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) (Tclass.Consts.Class Consts.Class$Ac@@12))))
 :pattern ( ($IsBox bx@@3 (Tclass.Consts.Class Consts.Class$Ac@@12)))
)))
(assert (forall ((Consts.Trait$At@@7 T@U) (bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 (Tclass.Consts.Trait Consts.Trait$At@@7)) (and (= ($Box refType ($Unbox refType bx@@4)) bx@@4) ($Is refType ($Unbox refType bx@@4) (Tclass.Consts.Trait Consts.Trait$At@@7))))
 :pattern ( ($IsBox bx@@4 (Tclass.Consts.Trait Consts.Trait$At@@7)))
)))
(assert (forall ((Consts.Trait$At@@8 T@U) (bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 (Tclass.Consts.Trait? Consts.Trait$At@@8)) (and (= ($Box refType ($Unbox refType bx@@5)) bx@@5) ($Is refType ($Unbox refType bx@@5) (Tclass.Consts.Trait? Consts.Trait$At@@8))))
 :pattern ( ($IsBox bx@@5 (Tclass.Consts.Trait? Consts.Trait$At@@8)))
)))
(assert (forall ((Consts.Class$Ac@@13 T@U) (bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 (Tclass.Consts.Class? Consts.Class$Ac@@13)) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) (Tclass.Consts.Class? Consts.Class$Ac@@13))))
 :pattern ( ($IsBox bx@@6 (Tclass.Consts.Class? Consts.Class$Ac@@13)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap () T@U)
(declare-fun |d#0@0| () T@U)
(declare-fun |x#0| () T@U)
(declare-fun call3formal@this () T@U)
(declare-fun call0formal@Consts.Class$Ac () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun call3formal@this@0 () T@U)
(declare-fun Consts._default.Test$X () T@U)
(declare-fun |d#0| () T@U)
(declare-fun |defass#c#0| () Bool)
(declare-fun |c#0@@3| () T@U)
(declare-fun |defass#t#0| () Bool)
(declare-fun |t#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 35) (let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (= |d#0@0| (|#Consts.Datatype.Dt1| |x#0|))) (=> (and (and (or (not (= call3formal@this null)) (not true)) (and ($Is refType call3formal@this (Tclass.Consts.Class call0formal@Consts.Class$Ac)) ($IsAlloc refType call3formal@this (Tclass.Consts.Class call0formal@Consts.Class$Ac) $Heap))) (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0))) (=> (and (and (and (or (not (= call3formal@this@0 null)) (not true)) (and ($Is refType call3formal@this@0 (Tclass.Consts.Class Consts._default.Test$X)) ($IsAlloc refType call3formal@this@0 (Tclass.Consts.Class Consts._default.Test$X) $Heap@0))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap call3formal@this@0) alloc))))) (and (forall (($o@@6 T@U) ) (!  (=> (and (or (not (= $o@@6 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@6) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@6) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@6)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@6))
)) ($HeapSucc $Heap $Heap@0))) (and (=> (= (ControlFlow 0 2) (- 0 34)) true) (and (=> (= (ControlFlow 0 2) (- 0 33)) true) (and (=> (= (ControlFlow 0 2) (- 0 32)) (or (not (= call3formal@this@0 null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 31)) true) (and (=> (= (ControlFlow 0 2) (- 0 30)) (or (not (= call3formal@this@0 null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 29)) true) (and (=> (= (ControlFlow 0 2) (- 0 28)) (or (not (= call3formal@this@0 null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 27)) true) (and (=> (= (ControlFlow 0 2) (- 0 26)) (or (not (= call3formal@this@0 null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 25)) true) (and (=> (= (ControlFlow 0 2) (- 0 24)) (or (not (= call3formal@this@0 null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 23)) true) (and (=> (= (ControlFlow 0 2) (- 0 22)) (or (not (= call3formal@this@0 null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 21)) true) (and (=> (= (ControlFlow 0 2) (- 0 20)) (or (not (= call3formal@this@0 null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 19)) true) (and (=> (= (ControlFlow 0 2) (- 0 18)) (or (not (= call3formal@this@0 null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 17)) true) (and (=> (= (ControlFlow 0 2) (- 0 16)) (or (not (= call3formal@this@0 null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 15)) true) (and (=> (= (ControlFlow 0 2) (- 0 14)) (or (not (= call3formal@this@0 null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 13)) true) (and (=> (= (ControlFlow 0 2) (- 0 12)) (or (not (= call3formal@this@0 null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 11)) true) (and (=> (= (ControlFlow 0 2) (- 0 10)) (or (not (= call3formal@this@0 null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 9)) true) (and (=> (= (ControlFlow 0 2) (- 0 8)) (or (not (= call3formal@this@0 null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 7)) true) (and (=> (= (ControlFlow 0 2) (- 0 6)) (or (not (= call3formal@this@0 null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 5)) true) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (not (= call3formal@this@0 null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 3)) true) (=> (= (ControlFlow 0 2) (- 0 1)) (or (not (= call3formal@this@0 null)) (not true))))))))))))))))))))))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and ($IsBox |x#0| Consts._default.Test$X) ($IsAllocBox |x#0| Consts._default.Test$X $Heap))) (=> (and (and (and (and ($Is DatatypeTypeType |d#0| (Tclass.Consts.Datatype Consts._default.Test$X)) ($IsAlloc DatatypeTypeType |d#0| (Tclass.Consts.Datatype Consts._default.Test$X) $Heap)) true) (and (=> |defass#c#0| (and ($Is refType |c#0@@3| (Tclass.Consts.Class Consts._default.Test$X)) ($IsAlloc refType |c#0@@3| (Tclass.Consts.Class Consts._default.Test$X) $Heap))) true)) (and (and (=> |defass#t#0| (and ($Is refType |t#0| (Tclass.Consts.Trait Consts._default.Test$X)) ($IsAlloc refType |t#0| (Tclass.Consts.Trait Consts._default.Test$X) $Heap))) true) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 35) 2)))) anon0_correct))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
