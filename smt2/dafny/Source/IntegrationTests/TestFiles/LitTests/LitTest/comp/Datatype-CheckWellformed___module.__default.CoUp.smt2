(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 (T@U) Bool)
(declare-fun $generated@@25 (T@T T@U T@U) Bool)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@29 (Int) Int)
(declare-fun $generated@@31 (T@T T@U) T@U)
(declare-fun $generated@@34 (T@U) T@U)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@40 (Int T@U) T@U)
(declare-fun $generated@@44 (T@U Int Bool) T@U)
(declare-fun $generated@@45 (T@U) T@U)
(declare-fun $generated@@49 () Int)
(declare-fun $generated@@50 (Int Bool) Bool)
(declare-fun $generated@@59 (T@U) Int)
(declare-fun $generated@@62 (T@U) T@U)
(declare-fun $generated@@67 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@68 () T@T)
(declare-fun $generated@@69 () T@T)
(declare-fun $generated@@70 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@71 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@72 () T@T)
(declare-fun $generated@@73 (T@T T@T) T@T)
(declare-fun $generated@@74 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@75 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@76 (T@T) T@T)
(declare-fun $generated@@77 (T@T) T@T)
(declare-fun $generated@@126 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@127 (T@U) Bool)
(declare-fun $generated@@132 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert (= ($generated@@23 $generated) $generated@@1))
(assert (= ($generated@@23 $generated@@0) $generated@@2))
(assert (= ($generated@@7 $generated@@26) 3))
(assert (forall (($generated@@28 T@U) ) (!  (=> ($generated@@25 $generated@@26 $generated@@28 $generated@@27) ($generated@@24 $generated@@28))
 :pattern ( ($generated@@24 $generated@@28) ($generated@@25 $generated@@26 $generated@@28 $generated@@27))
)))
(assert (forall (($generated@@30 Int) ) (! (= ($generated@@29 $generated@@30) $generated@@30)
 :pattern ( ($generated@@29 $generated@@30))
)))
(assert (forall (($generated@@32 T@U) ($generated@@33 T@T) ) (! (= ($generated@@31 $generated@@33 $generated@@32) $generated@@32)
 :pattern ( ($generated@@31 $generated@@33 $generated@@32))
)))
(assert (forall (($generated@@35 T@U) ) (! (= ($generated@@24 $generated@@35) (= ($generated@@34 $generated@@35) $generated@@5))
 :pattern ( ($generated@@24 $generated@@35))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@T) ) (! (= ($generated@@37 $generated@@39 ($generated@@36 $generated@@39 $generated@@38)) $generated@@38)
 :pattern ( ($generated@@36 $generated@@39 $generated@@38))
)))
(assert (forall (($generated@@41 T@U) ) (!  (=> ($generated@@24 $generated@@41) (exists (($generated@@42 Int) ($generated@@43 T@U) ) (= $generated@@41 ($generated@@40 $generated@@42 $generated@@43))))
 :pattern ( ($generated@@24 $generated@@41))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 Int) ($generated@@48 Bool) ) (! (= ($generated@@44 ($generated@@45 $generated@@46) $generated@@47 $generated@@48) ($generated@@44 $generated@@46 $generated@@47 $generated@@48))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@46) $generated@@47 $generated@@48))
)))
(assert  (=> (<= 1 $generated@@49) (forall (($generated@@51 T@U) ($generated@@52 Int) ($generated@@53 Bool) ) (!  (=> (or ($generated@@50 $generated@@52 $generated@@53) (< 1 $generated@@49)) (and (and (=> $generated@@53 ($generated@@50 $generated@@52 ($generated@@12 ($generated@@31 $generated@@8 ($generated@@11 false))))) (=> (not $generated@@53) ($generated@@50 (+ $generated@@52 1) ($generated@@12 ($generated@@31 $generated@@8 ($generated@@11 true)))))) (= ($generated@@44 ($generated@@45 $generated@@51) $generated@@52 $generated@@53) (ite $generated@@53 ($generated@@44 $generated@@51 $generated@@52 ($generated@@12 ($generated@@31 $generated@@8 ($generated@@11 false)))) ($generated@@40 $generated@@52 ($generated@@44 $generated@@51 (+ $generated@@52 1) ($generated@@12 ($generated@@31 $generated@@8 ($generated@@11 true)))))))))
 :pattern ( ($generated@@44 ($generated@@45 $generated@@51) $generated@@52 $generated@@53))
))))
(assert  (=> (<= 1 $generated@@49) (forall (($generated@@54 T@U) ($generated@@55 Int) ($generated@@56 Bool) ) (!  (=> (or ($generated@@50 $generated@@55 $generated@@56) (< 1 $generated@@49)) ($generated@@25 $generated@@26 ($generated@@44 $generated@@54 $generated@@55 $generated@@56) $generated@@27))
 :pattern ( ($generated@@44 $generated@@54 $generated@@55 $generated@@56))
))))
(assert (forall (($generated@@57 Int) ($generated@@58 T@U) ) (! (= ($generated@@34 ($generated@@40 $generated@@57 $generated@@58)) $generated@@5)
 :pattern ( ($generated@@40 $generated@@57 $generated@@58))
)))
(assert (forall (($generated@@60 Int) ($generated@@61 T@U) ) (! (= ($generated@@59 ($generated@@40 $generated@@60 $generated@@61)) $generated@@60)
 :pattern ( ($generated@@40 $generated@@60 $generated@@61))
)))
(assert (forall (($generated@@63 Int) ($generated@@64 T@U) ) (! (= ($generated@@62 ($generated@@40 $generated@@63 $generated@@64)) $generated@@64)
 :pattern ( ($generated@@40 $generated@@63 $generated@@64))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@T) ) (! (= ($generated@@36 $generated@@66 ($generated@@37 $generated@@66 $generated@@65)) $generated@@65)
 :pattern ( ($generated@@37 $generated@@66 $generated@@65))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@67 $generated@@78 $generated@@79 $generated@@80 ($generated@@74 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@84 $generated@@81) $generated@@83 $generated@@84) $generated@@81)
 :weight 0
)) (and (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or (= $generated@@90 $generated@@92) (= ($generated@@67 $generated@@85 $generated@@86 $generated@@87 ($generated@@74 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@91 $generated@@88) $generated@@92 $generated@@93) ($generated@@67 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@92 $generated@@93)))
 :weight 0
)) (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@100 $generated@@102) (= ($generated@@67 $generated@@94 $generated@@95 $generated@@96 ($generated@@74 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@101 $generated@@102) ($generated@@67 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@101 $generated@@102)))
 :weight 0
)))) (= ($generated@@7 $generated@@68) 4)) (= ($generated@@7 $generated@@69) 5)) (forall (($generated@@103 T@T) ($generated@@104 T@T) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (! (= ($generated@@71 $generated@@103 $generated@@104 ($generated@@75 $generated@@103 $generated@@104 $generated@@106 $generated@@107 $generated@@105) $generated@@107) $generated@@105)
 :weight 0
))) (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ) (!  (or (= $generated@@112 $generated@@113) (= ($generated@@71 $generated@@108 $generated@@109 ($generated@@75 $generated@@108 $generated@@109 $generated@@111 $generated@@112 $generated@@110) $generated@@113) ($generated@@71 $generated@@108 $generated@@109 $generated@@111 $generated@@113)))
 :weight 0
))) (= ($generated@@7 $generated@@72) 6)) (forall (($generated@@114 T@T) ($generated@@115 T@T) ) (= ($generated@@7 ($generated@@73 $generated@@114 $generated@@115)) 7))) (forall (($generated@@116 T@T) ($generated@@117 T@T) ) (! (= ($generated@@76 ($generated@@73 $generated@@116 $generated@@117)) $generated@@116)
 :pattern ( ($generated@@73 $generated@@116 $generated@@117))
))) (forall (($generated@@118 T@T) ($generated@@119 T@T) ) (! (= ($generated@@77 ($generated@@73 $generated@@118 $generated@@119)) $generated@@119)
 :pattern ( ($generated@@73 $generated@@118 $generated@@119))
))))
(assert (forall (($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 Bool) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (= ($generated@@12 ($generated@@67 $generated@@68 $generated@@69 $generated@@8 ($generated@@70 $generated@@120 $generated@@121 $generated@@122 $generated@@123) $generated@@124 $generated@@125))  (=> (and (or (not (= $generated@@124 $generated@@120)) (not true)) ($generated@@12 ($generated@@36 $generated@@8 ($generated@@71 $generated@@69 $generated@@72 ($generated@@71 $generated@@68 ($generated@@73 $generated@@69 $generated@@72) $generated@@121 $generated@@124) $generated@@122)))) $generated@@123))
 :pattern ( ($generated@@67 $generated@@68 $generated@@69 $generated@@8 ($generated@@70 $generated@@120 $generated@@121 $generated@@122 $generated@@123) $generated@@124 $generated@@125))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (!  (=> (and ($generated@@127 $generated@@129) (and ($generated@@24 $generated@@128) ($generated@@126 $generated@@26 $generated@@128 $generated@@27 $generated@@129))) ($generated@@126 $generated@@9 ($generated@@13 ($generated@@59 $generated@@128)) $generated@@0 $generated@@129))
 :pattern ( ($generated@@126 $generated@@9 ($generated@@13 ($generated@@59 $generated@@128)) $generated@@0 $generated@@129))
)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ) (!  (=> (and ($generated@@127 $generated@@131) ($generated@@25 $generated@@26 $generated@@130 $generated@@27)) ($generated@@126 $generated@@26 $generated@@130 $generated@@27 $generated@@131))
 :pattern ( ($generated@@126 $generated@@26 $generated@@130 $generated@@27 $generated@@131))
)))
(assert (= ($generated@@23 $generated@@27) $generated@@4))
(assert (= ($generated@@132 $generated@@27) $generated@@6))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ) (!  (=> (and ($generated@@127 $generated@@134) (and ($generated@@24 $generated@@133) ($generated@@126 $generated@@26 $generated@@133 $generated@@27 $generated@@134))) ($generated@@126 $generated@@26 ($generated@@62 $generated@@133) $generated@@27 $generated@@134))
 :pattern ( ($generated@@126 $generated@@26 ($generated@@62 $generated@@133) $generated@@27 $generated@@134))
)))
(assert (forall (($generated@@135 Int) ) (! (= ($generated@@37 $generated@@9 ($generated@@13 ($generated@@29 $generated@@135))) ($generated@@31 $generated@@72 ($generated@@37 $generated@@9 ($generated@@13 $generated@@135))))
 :pattern ( ($generated@@37 $generated@@9 ($generated@@13 ($generated@@29 $generated@@135))))
)))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@T) ) (! (= ($generated@@37 $generated@@137 ($generated@@31 $generated@@137 $generated@@136)) ($generated@@31 $generated@@72 ($generated@@37 $generated@@137 $generated@@136)))
 :pattern ( ($generated@@37 $generated@@137 ($generated@@31 $generated@@137 $generated@@136)))
)))
(assert (forall (($generated@@138 Int) ($generated@@139 T@U) ) (! (= ($generated@@25 $generated@@26 ($generated@@40 $generated@@138 $generated@@139) $generated@@27)  (and ($generated@@25 $generated@@9 ($generated@@13 $generated@@138) $generated@@0) ($generated@@25 $generated@@26 $generated@@139 $generated@@27)))
 :pattern ( ($generated@@25 $generated@@26 ($generated@@40 $generated@@138 $generated@@139) $generated@@27))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ) (! ($generated@@126 $generated@@9 $generated@@141 $generated@@0 $generated@@140)
 :pattern ( ($generated@@126 $generated@@9 $generated@@141 $generated@@0 $generated@@140))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@U) ) (! ($generated@@126 $generated@@8 $generated@@143 $generated $generated@@142)
 :pattern ( ($generated@@126 $generated@@8 $generated@@143 $generated $generated@@142))
)))
(assert (forall (($generated@@144 T@U) ) (! ($generated@@25 $generated@@9 $generated@@144 $generated@@0)
 :pattern ( ($generated@@25 $generated@@9 $generated@@144 $generated@@0))
)))
(assert (forall (($generated@@145 T@U) ) (! ($generated@@25 $generated@@8 $generated@@145 $generated)
 :pattern ( ($generated@@25 $generated@@8 $generated@@145 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@146 () Bool)
(declare-fun $generated@@147 () Int)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () Bool)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@153 true))
(let (($generated@@154  (=> (and (and $generated@@146 ($generated@@126 $generated@@9 ($generated@@13 $generated@@147) $generated@@0 $generated@@148)) (and (= $generated@@149 ($generated@@12 ($generated@@31 $generated@@8 ($generated@@11 false)))) ($generated@@126 $generated@@8 ($generated@@11 $generated@@149) $generated $generated@@148))) (and (=> (= (ControlFlow 0 3) (- 0 5)) (or (<= 0 ($generated@@29 1)) (= ($generated@@29 1) ($generated@@29 1)))) (=> (or (<= 0 ($generated@@29 1)) (= ($generated@@29 1) ($generated@@29 1))) (and (=> (= (ControlFlow 0 3) (- 0 4)) (or (or (<= 0 $generated@@147) (< ($generated@@29 1) ($generated@@29 1))) (= $generated@@147 $generated@@147))) (=> (or (or (<= 0 $generated@@147) (< ($generated@@29 1) ($generated@@29 1))) (= $generated@@147 $generated@@147)) (=> (= (ControlFlow 0 3) (- 0 2)) (or (< ($generated@@29 1) ($generated@@29 1)) (and (= ($generated@@29 1) ($generated@@29 1)) (or (< $generated@@147 $generated@@147) (and (= $generated@@147 $generated@@147) (and (not $generated@@149) $generated@@146)))))))))))))
(let (($generated@@155 true))
(let (($generated@@156  (=> (= $generated@@150 ($generated@@70 $generated@@151 $generated@@148 $generated@@3 false)) (and (and (=> (= (ControlFlow 0 7) 1) $generated@@155) (=> (= (ControlFlow 0 7) 3) $generated@@154)) (=> (= (ControlFlow 0 7) 6) $generated@@153)))))
(let (($generated@@157  (=> (and (and ($generated@@127 $generated@@148) ($generated@@152 $generated@@148)) (and (= 1 $generated@@49) (= (ControlFlow 0 8) 7))) $generated@@156)))
$generated@@157))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
