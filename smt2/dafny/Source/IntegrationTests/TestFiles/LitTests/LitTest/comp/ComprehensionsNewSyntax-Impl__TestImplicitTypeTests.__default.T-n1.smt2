(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass.TestImplicitTypeTests.A_k () T@U)
(declare-fun Tagclass.TestImplicitTypeTests.B_k () T@U)
(declare-fun Tagclass.TestImplicitTypeTests.C () T@U)
(declare-fun Tagclass.TestImplicitTypeTests.A_k? () T@U)
(declare-fun Tagclass.TestImplicitTypeTests.B_k? () T@U)
(declare-fun Tagclass.TestImplicitTypeTests.C? () T@U)
(declare-fun Tagclass.TestImplicitTypeTests.A () T@U)
(declare-fun Tagclass.TestImplicitTypeTests.B () T@U)
(declare-fun Tagclass.TestImplicitTypeTests.A? () T@U)
(declare-fun Tagclass.TestImplicitTypeTests.B? () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun |tytagFamily$A'| () T@U)
(declare-fun |tytagFamily$B'| () T@U)
(declare-fun tytagFamily$C () T@U)
(declare-fun tytagFamily$A () T@U)
(declare-fun tytagFamily$B () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun |lambda#1| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun implements$TestImplicitTypeTests.B (T@U) Bool)
(declare-fun Tclass.TestImplicitTypeTests.C? () T@U)
(declare-fun implements$TestImplicitTypeTests.A (T@U) Bool)
(declare-fun Tclass.TestImplicitTypeTests.A_k? () T@U)
(declare-fun Tclass.TestImplicitTypeTests.B_k? () T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Tclass.TestImplicitTypeTests.B? () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Tclass.TestImplicitTypeTests.A? () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun Tclass.TestImplicitTypeTests.A () T@U)
(declare-fun Tclass.TestImplicitTypeTests.B () T@U)
(declare-fun Tclass.TestImplicitTypeTests.C () T@U)
(declare-fun Tclass.TestImplicitTypeTests.A_k () T@U)
(declare-fun Tclass.TestImplicitTypeTests.B_k () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#FromBoogieMap| (T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet alloc Tagclass._System.object? Tagclass._System.object Tagclass.TestImplicitTypeTests.A_k Tagclass.TestImplicitTypeTests.B_k Tagclass.TestImplicitTypeTests.C Tagclass.TestImplicitTypeTests.A_k? Tagclass.TestImplicitTypeTests.B_k? Tagclass.TestImplicitTypeTests.C? Tagclass.TestImplicitTypeTests.A Tagclass.TestImplicitTypeTests.B Tagclass.TestImplicitTypeTests.A? Tagclass.TestImplicitTypeTests.B? tytagFamily$object |tytagFamily$A'| |tytagFamily$B'| tytagFamily$C tytagFamily$A tytagFamily$B)
)
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (b T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| a@@1 y@@0) (|Set#IsMember| (|Set#Union| a@@1 b) y@@0))
 :pattern ( (|Set#Union| a@@1 b) (|Set#IsMember| a@@1 y@@0))
)))
(assert (forall ((a@@2 T@U) (b@@0 T@U) (y@@1 T@U) ) (!  (=> (|Set#IsMember| b@@0 y@@1) (|Set#IsMember| (|Set#Union| a@@2 b@@0) y@@1))
 :pattern ( (|Set#Union| a@@2 b@@0) (|Set#IsMember| b@@0 y@@1))
)))
(assert (forall ((a@@3 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@3 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o))
)))
(assert  (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor BoxType) 3)))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|$y#0| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#1| |l#0| |l#1|) |$y#0|))  (and ($IsBox |$y#0| |l#0|) (|Set#IsMember| |l#1| |$y#0|)))
 :pattern ( (MapType0Select BoxType boolType (|lambda#1| |l#0| |l#1|) |$y#0|))
)))
(assert (forall ((a@@4 T@U) (b@@1 T@U) (y@@2 T@U) ) (!  (=> (|Set#IsMember| b@@1 y@@2) (not (|Set#IsMember| (|Set#Difference| a@@4 b@@1) y@@2)))
 :pattern ( (|Set#Difference| a@@4 b@@1) (|Set#IsMember| b@@1 y@@2))
)))
(assert (implements$TestImplicitTypeTests.B Tclass.TestImplicitTypeTests.C?))
(assert (implements$TestImplicitTypeTests.A Tclass.TestImplicitTypeTests.A_k?))
(assert (implements$TestImplicitTypeTests.B Tclass.TestImplicitTypeTests.B_k?))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (= (Ctor refType) 4))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass.TestImplicitTypeTests.C?)  (or (= $o null) (= (dtype $o) Tclass.TestImplicitTypeTests.C?)))
 :pattern ( ($Is refType $o Tclass.TestImplicitTypeTests.C?))
)))
(assert (forall (($o@@0 T@U) ) (! (= ($Is refType $o@@0 Tclass.TestImplicitTypeTests.A_k?)  (or (= $o@@0 null) (= (dtype $o@@0) Tclass.TestImplicitTypeTests.A_k?)))
 :pattern ( ($Is refType $o@@0 Tclass.TestImplicitTypeTests.A_k?))
)))
(assert (forall (($o@@1 T@U) ) (! (= ($Is refType $o@@1 Tclass.TestImplicitTypeTests.B_k?)  (or (= $o@@1 null) (= (dtype $o@@1) Tclass.TestImplicitTypeTests.B_k?)))
 :pattern ( ($Is refType $o@@1 Tclass.TestImplicitTypeTests.B_k?))
)))
(assert (forall ((a@@5 T@U) (b@@2 T@U) ) (! (= (|Set#Union| (|Set#Union| a@@5 b@@2) b@@2) (|Set#Union| a@@5 b@@2))
 :pattern ( (|Set#Union| (|Set#Union| a@@5 b@@2) b@@2))
)))
(assert (forall ((a@@6 T@U) (b@@3 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@6 b@@3) o@@1)  (and (|Set#IsMember| a@@6 o@@1) (not (|Set#IsMember| b@@3 o@@1))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@6 b@@3) o@@1))
)))
(assert (forall ((bx T@U) ($h T@U) ) (!  (=> (and ($IsAllocBox bx Tclass.TestImplicitTypeTests.B? $h) ($IsGoodHeap $h)) ($IsAllocBox bx Tclass.TestImplicitTypeTests.A? $h))
 :pattern ( ($IsAllocBox bx Tclass.TestImplicitTypeTests.B? $h))
)))
(assert (forall ((bx@@0 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsAllocBox bx@@0 Tclass.TestImplicitTypeTests.C? $h@@0) ($IsGoodHeap $h@@0)) ($IsAllocBox bx@@0 Tclass.TestImplicitTypeTests.B? $h@@0))
 :pattern ( ($IsAllocBox bx@@0 Tclass.TestImplicitTypeTests.C? $h@@0))
)))
(assert (forall ((bx@@1 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsAllocBox bx@@1 Tclass.TestImplicitTypeTests.A_k? $h@@1) ($IsGoodHeap $h@@1)) ($IsAllocBox bx@@1 Tclass.TestImplicitTypeTests.A? $h@@1))
 :pattern ( ($IsAllocBox bx@@1 Tclass.TestImplicitTypeTests.A_k? $h@@1))
)))
(assert (forall ((bx@@2 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsAllocBox bx@@2 Tclass.TestImplicitTypeTests.B_k? $h@@2) ($IsGoodHeap $h@@2)) ($IsAllocBox bx@@2 Tclass.TestImplicitTypeTests.B? $h@@2))
 :pattern ( ($IsAllocBox bx@@2 Tclass.TestImplicitTypeTests.B_k? $h@@2))
)))
(assert (forall ((|c#0| T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._System.object $h@@3) ($IsAlloc refType |c#0| Tclass._System.object? $h@@3))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object $h@@3))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object? $h@@3))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass.TestImplicitTypeTests.A $h@@4) ($IsAlloc refType |c#0@@0| Tclass.TestImplicitTypeTests.A? $h@@4))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass.TestImplicitTypeTests.A $h@@4))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass.TestImplicitTypeTests.A? $h@@4))
)))
(assert (forall ((|c#0@@1| T@U) ($h@@5 T@U) ) (! (= ($IsAlloc refType |c#0@@1| Tclass.TestImplicitTypeTests.B $h@@5) ($IsAlloc refType |c#0@@1| Tclass.TestImplicitTypeTests.B? $h@@5))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass.TestImplicitTypeTests.B $h@@5))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass.TestImplicitTypeTests.B? $h@@5))
)))
(assert (forall ((|c#0@@2| T@U) ($h@@6 T@U) ) (! (= ($IsAlloc refType |c#0@@2| Tclass.TestImplicitTypeTests.C $h@@6) ($IsAlloc refType |c#0@@2| Tclass.TestImplicitTypeTests.C? $h@@6))
 :pattern ( ($IsAlloc refType |c#0@@2| Tclass.TestImplicitTypeTests.C $h@@6))
 :pattern ( ($IsAlloc refType |c#0@@2| Tclass.TestImplicitTypeTests.C? $h@@6))
)))
(assert (forall ((|c#0@@3| T@U) ($h@@7 T@U) ) (! (= ($IsAlloc refType |c#0@@3| Tclass.TestImplicitTypeTests.A_k $h@@7) ($IsAlloc refType |c#0@@3| Tclass.TestImplicitTypeTests.A_k? $h@@7))
 :pattern ( ($IsAlloc refType |c#0@@3| Tclass.TestImplicitTypeTests.A_k $h@@7))
 :pattern ( ($IsAlloc refType |c#0@@3| Tclass.TestImplicitTypeTests.A_k? $h@@7))
)))
(assert (forall ((|c#0@@4| T@U) ($h@@8 T@U) ) (! (= ($IsAlloc refType |c#0@@4| Tclass.TestImplicitTypeTests.B_k $h@@8) ($IsAlloc refType |c#0@@4| Tclass.TestImplicitTypeTests.B_k? $h@@8))
 :pattern ( ($IsAlloc refType |c#0@@4| Tclass.TestImplicitTypeTests.B_k $h@@8))
 :pattern ( ($IsAlloc refType |c#0@@4| Tclass.TestImplicitTypeTests.B_k? $h@@8))
)))
(assert  (and (and (and (= (Ctor FieldType) 5) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@2 T@U) ($h@@9 T@U) ) (! (= ($IsAlloc refType $o@@2 Tclass._System.object? $h@@9)  (or (= $o@@2 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@2) alloc)))))
 :pattern ( ($IsAlloc refType $o@@2 Tclass._System.object? $h@@9))
)))
(assert (forall (($o@@3 T@U) ($h@@10 T@U) ) (! (= ($IsAlloc refType $o@@3 Tclass.TestImplicitTypeTests.A? $h@@10)  (or (= $o@@3 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@3) alloc)))))
 :pattern ( ($IsAlloc refType $o@@3 Tclass.TestImplicitTypeTests.A? $h@@10))
)))
(assert (forall (($o@@4 T@U) ($h@@11 T@U) ) (! (= ($IsAlloc refType $o@@4 Tclass.TestImplicitTypeTests.B? $h@@11)  (or (= $o@@4 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@4) alloc)))))
 :pattern ( ($IsAlloc refType $o@@4 Tclass.TestImplicitTypeTests.B? $h@@11))
)))
(assert (forall (($o@@5 T@U) ($h@@12 T@U) ) (! (= ($IsAlloc refType $o@@5 Tclass.TestImplicitTypeTests.C? $h@@12)  (or (= $o@@5 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@5) alloc)))))
 :pattern ( ($IsAlloc refType $o@@5 Tclass.TestImplicitTypeTests.C? $h@@12))
)))
(assert (forall (($o@@6 T@U) ($h@@13 T@U) ) (! (= ($IsAlloc refType $o@@6 Tclass.TestImplicitTypeTests.A_k? $h@@13)  (or (= $o@@6 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@13 $o@@6) alloc)))))
 :pattern ( ($IsAlloc refType $o@@6 Tclass.TestImplicitTypeTests.A_k? $h@@13))
)))
(assert (forall (($o@@7 T@U) ($h@@14 T@U) ) (! (= ($IsAlloc refType $o@@7 Tclass.TestImplicitTypeTests.B_k? $h@@14)  (or (= $o@@7 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@14 $o@@7) alloc)))))
 :pattern ( ($IsAlloc refType $o@@7 Tclass.TestImplicitTypeTests.B_k? $h@@14))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o@@2 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o@@2) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@2) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@2) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@5 T@U) (T T@T) ) (! (= ($Box T ($Unbox T x@@5)) x@@5)
 :pattern ( ($Unbox T x@@5))
)))
(assert (forall ((a@@7 T@U) (b@@4 T@U) ) (! (= (|Set#Disjoint| a@@7 b@@4) (forall ((o@@3 T@U) ) (!  (or (not (|Set#IsMember| a@@7 o@@3)) (not (|Set#IsMember| b@@4 o@@3)))
 :pattern ( (|Set#IsMember| a@@7 o@@3))
 :pattern ( (|Set#IsMember| b@@4 o@@3))
)))
 :pattern ( (|Set#Disjoint| a@@7 b@@4))
)))
(assert (forall ((m@@1 T@U) (bx@@3 T@U) ) (! (= (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx@@3) (U_2_bool (MapType0Select BoxType boolType m@@1 bx@@3)))
 :pattern ( (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx@@3))
)))
(assert (= (Ctor SetType) 7))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx@@4 T@U) ) (!  (=> (|Set#IsMember| v bx@@4) ($IsBox bx@@4 t0@@0))
 :pattern ( (|Set#IsMember| v bx@@4))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h@@0 T@U) (T@@0 T@T) ) (! (= ($IsAllocBox ($Box T@@0 v@@0) t h@@0) ($IsAlloc T@@0 v@@0 t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@0 v@@0) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@5 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@5 t@@0 h@@1) ($IsAllocBox bx@@5 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@5 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@1 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@1 v@@1 t@@1 h@@2) ($IsAlloc T@@1 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@1 v@@1 t@@1 h@@2))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@6 Tclass._System.object?))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) Tclass._System.object)))
 :pattern ( ($IsBox bx@@7 Tclass._System.object))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 Tclass.TestImplicitTypeTests.A_k) (and (= ($Box refType ($Unbox refType bx@@8)) bx@@8) ($Is refType ($Unbox refType bx@@8) Tclass.TestImplicitTypeTests.A_k)))
 :pattern ( ($IsBox bx@@8 Tclass.TestImplicitTypeTests.A_k))
)))
(assert (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 Tclass.TestImplicitTypeTests.B_k) (and (= ($Box refType ($Unbox refType bx@@9)) bx@@9) ($Is refType ($Unbox refType bx@@9) Tclass.TestImplicitTypeTests.B_k)))
 :pattern ( ($IsBox bx@@9 Tclass.TestImplicitTypeTests.B_k))
)))
(assert (forall ((bx@@10 T@U) ) (!  (=> ($IsBox bx@@10 Tclass.TestImplicitTypeTests.C) (and (= ($Box refType ($Unbox refType bx@@10)) bx@@10) ($Is refType ($Unbox refType bx@@10) Tclass.TestImplicitTypeTests.C)))
 :pattern ( ($IsBox bx@@10 Tclass.TestImplicitTypeTests.C))
)))
(assert (forall ((bx@@11 T@U) ) (!  (=> ($IsBox bx@@11 Tclass.TestImplicitTypeTests.A_k?) (and (= ($Box refType ($Unbox refType bx@@11)) bx@@11) ($Is refType ($Unbox refType bx@@11) Tclass.TestImplicitTypeTests.A_k?)))
 :pattern ( ($IsBox bx@@11 Tclass.TestImplicitTypeTests.A_k?))
)))
(assert (forall ((bx@@12 T@U) ) (!  (=> ($IsBox bx@@12 Tclass.TestImplicitTypeTests.B_k?) (and (= ($Box refType ($Unbox refType bx@@12)) bx@@12) ($Is refType ($Unbox refType bx@@12) Tclass.TestImplicitTypeTests.B_k?)))
 :pattern ( ($IsBox bx@@12 Tclass.TestImplicitTypeTests.B_k?))
)))
(assert (forall ((bx@@13 T@U) ) (!  (=> ($IsBox bx@@13 Tclass.TestImplicitTypeTests.C?) (and (= ($Box refType ($Unbox refType bx@@13)) bx@@13) ($Is refType ($Unbox refType bx@@13) Tclass.TestImplicitTypeTests.C?)))
 :pattern ( ($IsBox bx@@13 Tclass.TestImplicitTypeTests.C?))
)))
(assert (forall ((bx@@14 T@U) ) (!  (=> ($IsBox bx@@14 Tclass.TestImplicitTypeTests.A) (and (= ($Box refType ($Unbox refType bx@@14)) bx@@14) ($Is refType ($Unbox refType bx@@14) Tclass.TestImplicitTypeTests.A)))
 :pattern ( ($IsBox bx@@14 Tclass.TestImplicitTypeTests.A))
)))
(assert (forall ((bx@@15 T@U) ) (!  (=> ($IsBox bx@@15 Tclass.TestImplicitTypeTests.B) (and (= ($Box refType ($Unbox refType bx@@15)) bx@@15) ($Is refType ($Unbox refType bx@@15) Tclass.TestImplicitTypeTests.B)))
 :pattern ( ($IsBox bx@@15 Tclass.TestImplicitTypeTests.B))
)))
(assert (forall ((bx@@16 T@U) ) (!  (=> ($IsBox bx@@16 Tclass.TestImplicitTypeTests.A?) (and (= ($Box refType ($Unbox refType bx@@16)) bx@@16) ($Is refType ($Unbox refType bx@@16) Tclass.TestImplicitTypeTests.A?)))
 :pattern ( ($IsBox bx@@16 Tclass.TestImplicitTypeTests.A?))
)))
(assert (forall ((bx@@17 T@U) ) (!  (=> ($IsBox bx@@17 Tclass.TestImplicitTypeTests.B?) (and (= ($Box refType ($Unbox refType bx@@17)) bx@@17) ($Is refType ($Unbox refType bx@@17) Tclass.TestImplicitTypeTests.B?)))
 :pattern ( ($IsBox bx@@17 Tclass.TestImplicitTypeTests.B?))
)))
(assert (forall ((|c#0@@5| T@U) ) (! (= ($Is refType |c#0@@5| Tclass._System.object)  (and ($Is refType |c#0@@5| Tclass._System.object?) (or (not (= |c#0@@5| null)) (not true))))
 :pattern ( ($Is refType |c#0@@5| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@5| Tclass._System.object?))
)))
(assert (forall ((|c#0@@6| T@U) ) (! (= ($Is refType |c#0@@6| Tclass.TestImplicitTypeTests.A)  (and ($Is refType |c#0@@6| Tclass.TestImplicitTypeTests.A?) (or (not (= |c#0@@6| null)) (not true))))
 :pattern ( ($Is refType |c#0@@6| Tclass.TestImplicitTypeTests.A))
 :pattern ( ($Is refType |c#0@@6| Tclass.TestImplicitTypeTests.A?))
)))
(assert (forall ((|c#0@@7| T@U) ) (! (= ($Is refType |c#0@@7| Tclass.TestImplicitTypeTests.B)  (and ($Is refType |c#0@@7| Tclass.TestImplicitTypeTests.B?) (or (not (= |c#0@@7| null)) (not true))))
 :pattern ( ($Is refType |c#0@@7| Tclass.TestImplicitTypeTests.B))
 :pattern ( ($Is refType |c#0@@7| Tclass.TestImplicitTypeTests.B?))
)))
(assert (forall ((|c#0@@8| T@U) ) (! (= ($Is refType |c#0@@8| Tclass.TestImplicitTypeTests.C)  (and ($Is refType |c#0@@8| Tclass.TestImplicitTypeTests.C?) (or (not (= |c#0@@8| null)) (not true))))
 :pattern ( ($Is refType |c#0@@8| Tclass.TestImplicitTypeTests.C))
 :pattern ( ($Is refType |c#0@@8| Tclass.TestImplicitTypeTests.C?))
)))
(assert (forall ((|c#0@@9| T@U) ) (! (= ($Is refType |c#0@@9| Tclass.TestImplicitTypeTests.A_k)  (and ($Is refType |c#0@@9| Tclass.TestImplicitTypeTests.A_k?) (or (not (= |c#0@@9| null)) (not true))))
 :pattern ( ($Is refType |c#0@@9| Tclass.TestImplicitTypeTests.A_k))
 :pattern ( ($Is refType |c#0@@9| Tclass.TestImplicitTypeTests.A_k?))
)))
(assert (forall ((|c#0@@10| T@U) ) (! (= ($Is refType |c#0@@10| Tclass.TestImplicitTypeTests.B_k)  (and ($Is refType |c#0@@10| Tclass.TestImplicitTypeTests.B_k?) (or (not (= |c#0@@10| null)) (not true))))
 :pattern ( ($Is refType |c#0@@10| Tclass.TestImplicitTypeTests.B_k))
 :pattern ( ($Is refType |c#0@@10| Tclass.TestImplicitTypeTests.B_k?))
)))
(assert (forall ((a@@8 T@U) (b@@5 T@U) (o@@4 T@U) ) (! (= (|Set#IsMember| (|Set#Union| a@@8 b@@5) o@@4)  (or (|Set#IsMember| a@@8 o@@4) (|Set#IsMember| b@@5 o@@4)))
 :pattern ( (|Set#IsMember| (|Set#Union| a@@8 b@@5) o@@4))
)))
(assert (forall ((a@@9 T@U) (b@@6 T@U) ) (!  (=> (|Set#Disjoint| a@@9 b@@6) (and (= (|Set#Difference| (|Set#Union| a@@9 b@@6) a@@9) b@@6) (= (|Set#Difference| (|Set#Union| a@@9 b@@6) b@@6) a@@9)))
 :pattern ( (|Set#Union| a@@9 b@@6))
)))
(assert (forall (($o@@8 T@U) ($heap T@U) ) (!  (=> ($IsAlloc refType $o@@8 Tclass.TestImplicitTypeTests.B? $heap) ($IsAlloc refType $o@@8 Tclass.TestImplicitTypeTests.A? $heap))
 :pattern ( ($IsAlloc refType $o@@8 Tclass.TestImplicitTypeTests.B? $heap))
)))
(assert (forall (($o@@9 T@U) ($heap@@0 T@U) ) (!  (=> ($IsAlloc refType $o@@9 Tclass.TestImplicitTypeTests.C? $heap@@0) ($IsAlloc refType $o@@9 Tclass.TestImplicitTypeTests.B? $heap@@0))
 :pattern ( ($IsAlloc refType $o@@9 Tclass.TestImplicitTypeTests.C? $heap@@0))
)))
(assert (forall (($o@@10 T@U) ($heap@@1 T@U) ) (!  (=> ($IsAlloc refType $o@@10 Tclass.TestImplicitTypeTests.A_k? $heap@@1) ($IsAlloc refType $o@@10 Tclass.TestImplicitTypeTests.A? $heap@@1))
 :pattern ( ($IsAlloc refType $o@@10 Tclass.TestImplicitTypeTests.A_k? $heap@@1))
)))
(assert (forall (($o@@11 T@U) ($heap@@2 T@U) ) (!  (=> ($IsAlloc refType $o@@11 Tclass.TestImplicitTypeTests.B_k? $heap@@2) ($IsAlloc refType $o@@11 Tclass.TestImplicitTypeTests.B? $heap@@2))
 :pattern ( ($IsAlloc refType $o@@11 Tclass.TestImplicitTypeTests.B_k? $heap@@2))
)))
(assert (forall ((a@@10 T@U) (b@@7 T@U) (c T@U) ) (!  (=> (or (not (= a@@10 c)) (not true)) (=> (and ($HeapSucc a@@10 b@@7) ($HeapSucc b@@7 c)) ($HeapSucc a@@10 c)))
 :pattern ( ($HeapSucc a@@10 b@@7) ($HeapSucc b@@7 c))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@2) t@@2) ($Is T@@2 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@2 v@@2) t@@2))
)))
(assert (forall ((v@@3 T@U) (t0@@1 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3) (forall ((bx@@18 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@18) ($IsAllocBox bx@@18 t0@@1 h@@3))
 :pattern ( (|Set#IsMember| v@@3 bx@@18))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3))
)))
(assert (forall (($o@@12 T@U) ) (! ($Is refType $o@@12 Tclass._System.object?)
 :pattern ( ($Is refType $o@@12 Tclass._System.object?))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((x@@6 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@6)) x@@6)
 :pattern ( ($Box T@@3 x@@6))
)))
(assert (forall ((a@@11 T@U) (b@@8 T@U) ) (! (= (|Set#Union| a@@11 (|Set#Union| a@@11 b@@8)) (|Set#Union| a@@11 b@@8))
 :pattern ( (|Set#Union| a@@11 (|Set#Union| a@@11 b@@8)))
)))
(assert  (and (forall ((t0@@2 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 t2 (MapType1Store t0@@2 t1@@0 t2 m@@2 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@3 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@3 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@4 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@4 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0@@0| T@U) (|l#1@@0| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@13 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@0| |l#1@@0| |l#2| |l#3|) $o@@13 $f))  (=> (and (or (not (= $o@@13 |l#0@@0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@0| $o@@13) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@0| |l#1@@0| |l#2| |l#3|) $o@@13 $f))
)))
(assert (forall ((bx@@19 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@19 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@19)) bx@@19) ($Is SetType ($Unbox SetType bx@@19) (TSet t@@5))))
 :pattern ( ($IsBox bx@@19 (TSet t@@5)))
)))
(assert (forall (($o@@14 T@U) ) (!  (=> ($Is refType $o@@14 Tclass.TestImplicitTypeTests.B?) ($Is refType $o@@14 Tclass.TestImplicitTypeTests.A?))
 :pattern ( ($Is refType $o@@14 Tclass.TestImplicitTypeTests.B?))
)))
(assert (forall ((bx@@20 T@U) ) (!  (=> ($IsBox bx@@20 Tclass.TestImplicitTypeTests.B?) ($IsBox bx@@20 Tclass.TestImplicitTypeTests.A?))
 :pattern ( ($IsBox bx@@20 Tclass.TestImplicitTypeTests.B?))
)))
(assert (forall (($o@@15 T@U) ) (!  (=> ($Is refType $o@@15 Tclass.TestImplicitTypeTests.C?) ($Is refType $o@@15 Tclass.TestImplicitTypeTests.B?))
 :pattern ( ($Is refType $o@@15 Tclass.TestImplicitTypeTests.C?))
)))
(assert (forall ((bx@@21 T@U) ) (!  (=> ($IsBox bx@@21 Tclass.TestImplicitTypeTests.C?) ($IsBox bx@@21 Tclass.TestImplicitTypeTests.B?))
 :pattern ( ($IsBox bx@@21 Tclass.TestImplicitTypeTests.C?))
)))
(assert (forall (($o@@16 T@U) ) (!  (=> ($Is refType $o@@16 Tclass.TestImplicitTypeTests.A_k?) ($Is refType $o@@16 Tclass.TestImplicitTypeTests.A?))
 :pattern ( ($Is refType $o@@16 Tclass.TestImplicitTypeTests.A_k?))
)))
(assert (forall ((bx@@22 T@U) ) (!  (=> ($IsBox bx@@22 Tclass.TestImplicitTypeTests.A_k?) ($IsBox bx@@22 Tclass.TestImplicitTypeTests.A?))
 :pattern ( ($IsBox bx@@22 Tclass.TestImplicitTypeTests.A_k?))
)))
(assert (forall (($o@@17 T@U) ) (!  (=> ($Is refType $o@@17 Tclass.TestImplicitTypeTests.B_k?) ($Is refType $o@@17 Tclass.TestImplicitTypeTests.B?))
 :pattern ( ($Is refType $o@@17 Tclass.TestImplicitTypeTests.B_k?))
)))
(assert (forall ((bx@@23 T@U) ) (!  (=> ($IsBox bx@@23 Tclass.TestImplicitTypeTests.B_k?) ($IsBox bx@@23 Tclass.TestImplicitTypeTests.B?))
 :pattern ( ($IsBox bx@@23 Tclass.TestImplicitTypeTests.B_k?))
)))
(assert (forall ((h@@4 T@U) (r T@U) (f T@U) (x@@7 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@4 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) f x@@7))) ($HeapSucc h@@4 (MapType0Store refType (MapType0Type FieldType BoxType) h@@4 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) f x@@7))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@4 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) f x@@7)))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (= (Tag Tclass.TestImplicitTypeTests.A_k) Tagclass.TestImplicitTypeTests.A_k))
(assert (= (TagFamily Tclass.TestImplicitTypeTests.A_k) |tytagFamily$A'|))
(assert (= (Tag Tclass.TestImplicitTypeTests.B_k) Tagclass.TestImplicitTypeTests.B_k))
(assert (= (TagFamily Tclass.TestImplicitTypeTests.B_k) |tytagFamily$B'|))
(assert (= (Tag Tclass.TestImplicitTypeTests.C) Tagclass.TestImplicitTypeTests.C))
(assert (= (TagFamily Tclass.TestImplicitTypeTests.C) tytagFamily$C))
(assert (= (Tag Tclass.TestImplicitTypeTests.A_k?) Tagclass.TestImplicitTypeTests.A_k?))
(assert (= (TagFamily Tclass.TestImplicitTypeTests.A_k?) |tytagFamily$A'|))
(assert (= (Tag Tclass.TestImplicitTypeTests.B_k?) Tagclass.TestImplicitTypeTests.B_k?))
(assert (= (TagFamily Tclass.TestImplicitTypeTests.B_k?) |tytagFamily$B'|))
(assert (= (Tag Tclass.TestImplicitTypeTests.C?) Tagclass.TestImplicitTypeTests.C?))
(assert (= (TagFamily Tclass.TestImplicitTypeTests.C?) tytagFamily$C))
(assert (= (Tag Tclass.TestImplicitTypeTests.A) Tagclass.TestImplicitTypeTests.A))
(assert (= (TagFamily Tclass.TestImplicitTypeTests.A) tytagFamily$A))
(assert (= (Tag Tclass.TestImplicitTypeTests.B) Tagclass.TestImplicitTypeTests.B))
(assert (= (TagFamily Tclass.TestImplicitTypeTests.B) tytagFamily$B))
(assert (= (Tag Tclass.TestImplicitTypeTests.A?) Tagclass.TestImplicitTypeTests.A?))
(assert (= (TagFamily Tclass.TestImplicitTypeTests.A?) tytagFamily$A))
(assert (= (Tag Tclass.TestImplicitTypeTests.B?) Tagclass.TestImplicitTypeTests.B?))
(assert (= (TagFamily Tclass.TestImplicitTypeTests.B?) tytagFamily$B))
(assert (forall (($o@@18 T@U) ) (! (= ($Is refType $o@@18 Tclass.TestImplicitTypeTests.A?)  (or (= $o@@18 null) (implements$TestImplicitTypeTests.A (dtype $o@@18))))
 :pattern ( ($Is refType $o@@18 Tclass.TestImplicitTypeTests.A?))
)))
(assert (forall (($o@@19 T@U) ) (! (= ($Is refType $o@@19 Tclass.TestImplicitTypeTests.B?)  (or (= $o@@19 null) (implements$TestImplicitTypeTests.B (dtype $o@@19))))
 :pattern ( ($Is refType $o@@19 Tclass.TestImplicitTypeTests.B?))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |$rhs#4@0| () T@U)
(declare-fun |x#60@0| () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun |x#58@0| () T@U)
(declare-fun |x#56@0| () T@U)
(declare-fun |x#54@0| () T@U)
(declare-fun |x#52@0| () T@U)
(declare-fun |x#50@0| () T@U)
(declare-fun |x#48@0| () T@U)
(declare-fun |x#46@0| () T@U)
(declare-fun |x#44@0| () T@U)
(declare-fun |x#42@0| () T@U)
(declare-fun |x#40@0| () T@U)
(declare-fun |x#38@0| () T@U)
(declare-fun |r#0@0| () T@U)
(declare-fun |x#36@0| () T@U)
(declare-fun |x#34@0| () T@U)
(declare-fun |x#32@0| () T@U)
(declare-fun |x#30@0| () T@U)
(declare-fun |x#28@0| () T@U)
(declare-fun |x#26@0| () T@U)
(declare-fun |x#24@0| () T@U)
(declare-fun |x#22@0| () T@U)
(declare-fun |$rhs#5@0| () T@U)
(declare-fun |s#0@0| () T@U)
(declare-fun |$rhs#6@0| () T@U)
(declare-fun |t#0@0| () T@U)
(declare-fun |$rhs#7@0| () T@U)
(declare-fun |u#0@0| () T@U)
(declare-fun |x#20@0| () T@U)
(declare-fun |x#18@0| () T@U)
(declare-fun |x#16@0| () T@U)
(declare-fun |x#14@0| () T@U)
(declare-fun |x#12@0| () T@U)
(declare-fun |x#10@0| () T@U)
(declare-fun |x#8@0| () T@U)
(declare-fun |x#6@0| () T@U)
(declare-fun |x#4@0| () T@U)
(declare-fun |x#2@0| () T@U)
(declare-fun |x#0@0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap () T@U)
(declare-fun $nw@0 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $nw@1 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun $nw@2 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun $nw@3 () T@U)
(declare-fun |defass#o#0| () Bool)
(declare-fun |o#0| () T@U)
(declare-fun |defass#a#0| () Bool)
(declare-fun |a#0| () T@U)
(declare-fun |defass#b#0| () Bool)
(declare-fun |b#0| () T@U)
(declare-fun |defass#c#0| () Bool)
(declare-fun |c#0@@11| () T@U)
(declare-fun |r#0| () T@U)
(declare-fun |s#0| () T@U)
(declare-fun |t#0| () T@U)
(declare-fun |u#0| () T@U)
(declare-fun |r'#0| () T@U)
(declare-fun |s'#0| () T@U)
(declare-fun |t'#0| () T@U)
(declare-fun |u'#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 225) (let ((anon234_Else_correct true))
(let ((anon238_Else_correct true))
(let ((anon242_Else_correct true))
(let ((anon246_Else_correct true))
(let ((anon153_correct true))
(let ((anon247_Else_correct  (=> (and (not (and (|Set#IsMember| |$rhs#4@0| ($Box refType |x#60@0|)) (and true (or (not (= |x#60@0| null)) (not true))))) (= (ControlFlow 0 4) 1)) anon153_correct)))
(let ((anon247_Then_correct  (=> (and (and (|Set#IsMember| |$rhs#4@0| ($Box refType |x#60@0|)) (and true (or (not (= |x#60@0| null)) (not true)))) (= (ControlFlow 0 3) 1)) anon153_correct)))
(let ((anon246_Then_correct  (and (=> (= (ControlFlow 0 6) 3) anon247_Then_correct) (=> (= (ControlFlow 0 6) 4) anon247_Else_correct))))
(let ((anon245_Then_correct  (=> (|Set#IsMember| |$rhs#4@0| ($Box refType |x#60@0|)) (and (=> (= (ControlFlow 0 8) 6) anon246_Then_correct) (=> (= (ControlFlow 0 8) 7) anon246_Else_correct)))))
(let ((anon245_Else_correct  (=> (not (|Set#IsMember| |$rhs#4@0| ($Box refType |x#60@0|))) (and (=> (= (ControlFlow 0 5) 3) anon247_Then_correct) (=> (= (ControlFlow 0 5) 4) anon247_Else_correct)))))
(let ((anon244_Then_correct  (=> (and ($Is refType |x#60@0| Tclass.TestImplicitTypeTests.C?) ($IsAlloc refType |x#60@0| Tclass.TestImplicitTypeTests.C? $Heap@3)) (and (=> (= (ControlFlow 0 9) 8) anon245_Then_correct) (=> (= (ControlFlow 0 9) 5) anon245_Else_correct)))))
(let ((anon244_Else_correct  (=> (and (not (and ($Is refType |x#60@0| Tclass.TestImplicitTypeTests.C?) ($IsAlloc refType |x#60@0| Tclass.TestImplicitTypeTests.C? $Heap@3))) (= (ControlFlow 0 2) 1)) anon153_correct)))
(let ((anon147_correct  (and (=> (= (ControlFlow 0 10) 9) anon244_Then_correct) (=> (= (ControlFlow 0 10) 2) anon244_Else_correct))))
(let ((anon243_Else_correct  (=> (and (not (and (|Set#IsMember| |$rhs#4@0| ($Box refType |x#58@0|)) (and true (or (not (= |x#58@0| null)) (not true))))) (= (ControlFlow 0 13) 10)) anon147_correct)))
(let ((anon243_Then_correct  (=> (and (and (|Set#IsMember| |$rhs#4@0| ($Box refType |x#58@0|)) (and true (or (not (= |x#58@0| null)) (not true)))) (= (ControlFlow 0 12) 10)) anon147_correct)))
(let ((anon242_Then_correct  (and (=> (= (ControlFlow 0 15) 12) anon243_Then_correct) (=> (= (ControlFlow 0 15) 13) anon243_Else_correct))))
(let ((anon241_Then_correct  (=> (|Set#IsMember| |$rhs#4@0| ($Box refType |x#58@0|)) (and (=> (= (ControlFlow 0 17) 15) anon242_Then_correct) (=> (= (ControlFlow 0 17) 16) anon242_Else_correct)))))
(let ((anon241_Else_correct  (=> (not (|Set#IsMember| |$rhs#4@0| ($Box refType |x#58@0|))) (and (=> (= (ControlFlow 0 14) 12) anon243_Then_correct) (=> (= (ControlFlow 0 14) 13) anon243_Else_correct)))))
(let ((anon240_Then_correct  (=> (and ($Is refType |x#58@0| Tclass.TestImplicitTypeTests.B?) ($IsAlloc refType |x#58@0| Tclass.TestImplicitTypeTests.B? $Heap@3)) (and (=> (= (ControlFlow 0 18) 17) anon241_Then_correct) (=> (= (ControlFlow 0 18) 14) anon241_Else_correct)))))
(let ((anon240_Else_correct  (=> (and (not (and ($Is refType |x#58@0| Tclass.TestImplicitTypeTests.B?) ($IsAlloc refType |x#58@0| Tclass.TestImplicitTypeTests.B? $Heap@3))) (= (ControlFlow 0 11) 10)) anon147_correct)))
(let ((anon141_correct  (and (=> (= (ControlFlow 0 19) 18) anon240_Then_correct) (=> (= (ControlFlow 0 19) 11) anon240_Else_correct))))
(let ((anon239_Else_correct  (=> (and (not (and (|Set#IsMember| |$rhs#4@0| ($Box refType |x#56@0|)) (and true (or (not (= |x#56@0| null)) (not true))))) (= (ControlFlow 0 22) 19)) anon141_correct)))
(let ((anon239_Then_correct  (=> (and (and (|Set#IsMember| |$rhs#4@0| ($Box refType |x#56@0|)) (and true (or (not (= |x#56@0| null)) (not true)))) (= (ControlFlow 0 21) 19)) anon141_correct)))
(let ((anon238_Then_correct  (and (=> (= (ControlFlow 0 24) 21) anon239_Then_correct) (=> (= (ControlFlow 0 24) 22) anon239_Else_correct))))
(let ((anon237_Then_correct  (=> (|Set#IsMember| |$rhs#4@0| ($Box refType |x#56@0|)) (and (=> (= (ControlFlow 0 26) 24) anon238_Then_correct) (=> (= (ControlFlow 0 26) 25) anon238_Else_correct)))))
(let ((anon237_Else_correct  (=> (not (|Set#IsMember| |$rhs#4@0| ($Box refType |x#56@0|))) (and (=> (= (ControlFlow 0 23) 21) anon239_Then_correct) (=> (= (ControlFlow 0 23) 22) anon239_Else_correct)))))
(let ((anon236_Then_correct  (=> (and ($Is refType |x#56@0| Tclass.TestImplicitTypeTests.A?) ($IsAlloc refType |x#56@0| Tclass.TestImplicitTypeTests.A? $Heap@3)) (and (=> (= (ControlFlow 0 27) 26) anon237_Then_correct) (=> (= (ControlFlow 0 27) 23) anon237_Else_correct)))))
(let ((anon236_Else_correct  (=> (and (not (and ($Is refType |x#56@0| Tclass.TestImplicitTypeTests.A?) ($IsAlloc refType |x#56@0| Tclass.TestImplicitTypeTests.A? $Heap@3))) (= (ControlFlow 0 20) 19)) anon141_correct)))
(let ((anon135_correct  (and (=> (= (ControlFlow 0 28) 27) anon236_Then_correct) (=> (= (ControlFlow 0 28) 20) anon236_Else_correct))))
(let ((anon235_Else_correct  (=> (and (not (and (|Set#IsMember| |$rhs#4@0| ($Box refType |x#54@0|)) (and true (or (not (= |x#54@0| null)) (not true))))) (= (ControlFlow 0 31) 28)) anon135_correct)))
(let ((anon235_Then_correct  (=> (and (and (|Set#IsMember| |$rhs#4@0| ($Box refType |x#54@0|)) (and true (or (not (= |x#54@0| null)) (not true)))) (= (ControlFlow 0 30) 28)) anon135_correct)))
(let ((anon234_Then_correct  (and (=> (= (ControlFlow 0 33) 30) anon235_Then_correct) (=> (= (ControlFlow 0 33) 31) anon235_Else_correct))))
(let ((anon233_Then_correct  (=> (|Set#IsMember| |$rhs#4@0| ($Box refType |x#54@0|)) (and (=> (= (ControlFlow 0 35) 33) anon234_Then_correct) (=> (= (ControlFlow 0 35) 34) anon234_Else_correct)))))
(let ((anon233_Else_correct  (=> (not (|Set#IsMember| |$rhs#4@0| ($Box refType |x#54@0|))) (and (=> (= (ControlFlow 0 32) 30) anon235_Then_correct) (=> (= (ControlFlow 0 32) 31) anon235_Else_correct)))))
(let ((anon232_Then_correct  (=> (and ($Is refType |x#54@0| Tclass._System.object?) ($IsAlloc refType |x#54@0| Tclass._System.object? $Heap@3)) (and (=> (= (ControlFlow 0 36) 35) anon233_Then_correct) (=> (= (ControlFlow 0 36) 32) anon233_Else_correct)))))
(let ((anon232_Else_correct  (=> (and (not (and ($Is refType |x#54@0| Tclass._System.object?) ($IsAlloc refType |x#54@0| Tclass._System.object? $Heap@3))) (= (ControlFlow 0 29) 28)) anon135_correct)))
(let ((anon129_correct  (and (=> (= (ControlFlow 0 37) 36) anon232_Then_correct) (=> (= (ControlFlow 0 37) 29) anon232_Else_correct))))
(let ((anon231_Else_correct  (=> (and (not (and (|Set#IsMember| |$rhs#4@0| ($Box refType |x#52@0|)) true)) (= (ControlFlow 0 40) 37)) anon129_correct)))
(let ((anon231_Then_correct  (=> (and (and (|Set#IsMember| |$rhs#4@0| ($Box refType |x#52@0|)) true) (= (ControlFlow 0 39) 37)) anon129_correct)))
(let ((anon230_Else_correct  (=> (not (|Set#IsMember| |$rhs#4@0| ($Box refType |x#52@0|))) (and (=> (= (ControlFlow 0 42) 39) anon231_Then_correct) (=> (= (ControlFlow 0 42) 40) anon231_Else_correct)))))
(let ((anon230_Then_correct  (=> (|Set#IsMember| |$rhs#4@0| ($Box refType |x#52@0|)) (and (=> (= (ControlFlow 0 41) 39) anon231_Then_correct) (=> (= (ControlFlow 0 41) 40) anon231_Else_correct)))))
(let ((anon229_Then_correct  (=> (and ($Is refType |x#52@0| Tclass.TestImplicitTypeTests.C?) ($IsAlloc refType |x#52@0| Tclass.TestImplicitTypeTests.C? $Heap@3)) (and (=> (= (ControlFlow 0 43) 41) anon230_Then_correct) (=> (= (ControlFlow 0 43) 42) anon230_Else_correct)))))
(let ((anon229_Else_correct  (=> (and (not (and ($Is refType |x#52@0| Tclass.TestImplicitTypeTests.C?) ($IsAlloc refType |x#52@0| Tclass.TestImplicitTypeTests.C? $Heap@3))) (= (ControlFlow 0 38) 37)) anon129_correct)))
(let ((anon124_correct  (and (=> (= (ControlFlow 0 44) 43) anon229_Then_correct) (=> (= (ControlFlow 0 44) 38) anon229_Else_correct))))
(let ((anon228_Else_correct  (=> (and (not (and (|Set#IsMember| |$rhs#4@0| ($Box refType |x#50@0|)) true)) (= (ControlFlow 0 47) 44)) anon124_correct)))
(let ((anon228_Then_correct  (=> (and (and (|Set#IsMember| |$rhs#4@0| ($Box refType |x#50@0|)) true) (= (ControlFlow 0 46) 44)) anon124_correct)))
(let ((anon227_Else_correct  (=> (not (|Set#IsMember| |$rhs#4@0| ($Box refType |x#50@0|))) (and (=> (= (ControlFlow 0 49) 46) anon228_Then_correct) (=> (= (ControlFlow 0 49) 47) anon228_Else_correct)))))
(let ((anon227_Then_correct  (=> (|Set#IsMember| |$rhs#4@0| ($Box refType |x#50@0|)) (and (=> (= (ControlFlow 0 48) 46) anon228_Then_correct) (=> (= (ControlFlow 0 48) 47) anon228_Else_correct)))))
(let ((anon226_Then_correct  (=> (and ($Is refType |x#50@0| Tclass.TestImplicitTypeTests.B?) ($IsAlloc refType |x#50@0| Tclass.TestImplicitTypeTests.B? $Heap@3)) (and (=> (= (ControlFlow 0 50) 48) anon227_Then_correct) (=> (= (ControlFlow 0 50) 49) anon227_Else_correct)))))
(let ((anon226_Else_correct  (=> (and (not (and ($Is refType |x#50@0| Tclass.TestImplicitTypeTests.B?) ($IsAlloc refType |x#50@0| Tclass.TestImplicitTypeTests.B? $Heap@3))) (= (ControlFlow 0 45) 44)) anon124_correct)))
(let ((anon119_correct  (and (=> (= (ControlFlow 0 51) 50) anon226_Then_correct) (=> (= (ControlFlow 0 51) 45) anon226_Else_correct))))
(let ((anon225_Else_correct  (=> (and (not (and (|Set#IsMember| |$rhs#4@0| ($Box refType |x#48@0|)) true)) (= (ControlFlow 0 54) 51)) anon119_correct)))
(let ((anon225_Then_correct  (=> (and (and (|Set#IsMember| |$rhs#4@0| ($Box refType |x#48@0|)) true) (= (ControlFlow 0 53) 51)) anon119_correct)))
(let ((anon224_Else_correct  (=> (not (|Set#IsMember| |$rhs#4@0| ($Box refType |x#48@0|))) (and (=> (= (ControlFlow 0 56) 53) anon225_Then_correct) (=> (= (ControlFlow 0 56) 54) anon225_Else_correct)))))
(let ((anon224_Then_correct  (=> (|Set#IsMember| |$rhs#4@0| ($Box refType |x#48@0|)) (and (=> (= (ControlFlow 0 55) 53) anon225_Then_correct) (=> (= (ControlFlow 0 55) 54) anon225_Else_correct)))))
(let ((anon223_Then_correct  (=> (and ($Is refType |x#48@0| Tclass.TestImplicitTypeTests.A?) ($IsAlloc refType |x#48@0| Tclass.TestImplicitTypeTests.A? $Heap@3)) (and (=> (= (ControlFlow 0 57) 55) anon224_Then_correct) (=> (= (ControlFlow 0 57) 56) anon224_Else_correct)))))
(let ((anon223_Else_correct  (=> (and (not (and ($Is refType |x#48@0| Tclass.TestImplicitTypeTests.A?) ($IsAlloc refType |x#48@0| Tclass.TestImplicitTypeTests.A? $Heap@3))) (= (ControlFlow 0 52) 51)) anon119_correct)))
(let ((anon114_correct  (and (=> (= (ControlFlow 0 58) 57) anon223_Then_correct) (=> (= (ControlFlow 0 58) 52) anon223_Else_correct))))
(let ((anon222_Else_correct  (=> (and (not (and (|Set#IsMember| |$rhs#4@0| ($Box refType |x#46@0|)) true)) (= (ControlFlow 0 61) 58)) anon114_correct)))
(let ((anon222_Then_correct  (=> (and (and (|Set#IsMember| |$rhs#4@0| ($Box refType |x#46@0|)) true) (= (ControlFlow 0 60) 58)) anon114_correct)))
(let ((anon221_Else_correct  (=> (not (|Set#IsMember| |$rhs#4@0| ($Box refType |x#46@0|))) (and (=> (= (ControlFlow 0 63) 60) anon222_Then_correct) (=> (= (ControlFlow 0 63) 61) anon222_Else_correct)))))
(let ((anon221_Then_correct  (=> (|Set#IsMember| |$rhs#4@0| ($Box refType |x#46@0|)) (and (=> (= (ControlFlow 0 62) 60) anon222_Then_correct) (=> (= (ControlFlow 0 62) 61) anon222_Else_correct)))))
(let ((anon220_Then_correct  (=> (and ($Is refType |x#46@0| Tclass._System.object?) ($IsAlloc refType |x#46@0| Tclass._System.object? $Heap@3)) (and (=> (= (ControlFlow 0 64) 62) anon221_Then_correct) (=> (= (ControlFlow 0 64) 63) anon221_Else_correct)))))
(let ((anon220_Else_correct  (=> (and (not (and ($Is refType |x#46@0| Tclass._System.object?) ($IsAlloc refType |x#46@0| Tclass._System.object? $Heap@3))) (= (ControlFlow 0 59) 58)) anon114_correct)))
(let ((anon109_correct  (and (=> (= (ControlFlow 0 65) 64) anon220_Then_correct) (=> (= (ControlFlow 0 65) 59) anon220_Else_correct))))
(let ((anon219_Else_correct  (=> (and (not (and (|Set#IsMember| |$rhs#4@0| ($Box refType |x#44@0|)) true)) (= (ControlFlow 0 68) 65)) anon109_correct)))
(let ((anon219_Then_correct  (=> (and (and (|Set#IsMember| |$rhs#4@0| ($Box refType |x#44@0|)) true) (= (ControlFlow 0 67) 65)) anon109_correct)))
(let ((anon218_Else_correct  (=> (not (|Set#IsMember| |$rhs#4@0| ($Box refType |x#44@0|))) (and (=> (= (ControlFlow 0 70) 67) anon219_Then_correct) (=> (= (ControlFlow 0 70) 68) anon219_Else_correct)))))
(let ((anon218_Then_correct  (=> (|Set#IsMember| |$rhs#4@0| ($Box refType |x#44@0|)) (and (=> (= (ControlFlow 0 69) 67) anon219_Then_correct) (=> (= (ControlFlow 0 69) 68) anon219_Else_correct)))))
(let ((anon217_Then_correct  (=> (and ($Is refType |x#44@0| Tclass.TestImplicitTypeTests.C) ($IsAlloc refType |x#44@0| Tclass.TestImplicitTypeTests.C $Heap@3)) (and (=> (= (ControlFlow 0 71) 69) anon218_Then_correct) (=> (= (ControlFlow 0 71) 70) anon218_Else_correct)))))
(let ((anon217_Else_correct  (=> (and (not (and ($Is refType |x#44@0| Tclass.TestImplicitTypeTests.C) ($IsAlloc refType |x#44@0| Tclass.TestImplicitTypeTests.C $Heap@3))) (= (ControlFlow 0 66) 65)) anon109_correct)))
(let ((anon104_correct  (and (=> (= (ControlFlow 0 72) 71) anon217_Then_correct) (=> (= (ControlFlow 0 72) 66) anon217_Else_correct))))
(let ((anon216_Else_correct  (=> (and (not (and (|Set#IsMember| |$rhs#4@0| ($Box refType |x#42@0|)) true)) (= (ControlFlow 0 75) 72)) anon104_correct)))
(let ((anon216_Then_correct  (=> (and (and (|Set#IsMember| |$rhs#4@0| ($Box refType |x#42@0|)) true) (= (ControlFlow 0 74) 72)) anon104_correct)))
(let ((anon215_Else_correct  (=> (not (|Set#IsMember| |$rhs#4@0| ($Box refType |x#42@0|))) (and (=> (= (ControlFlow 0 77) 74) anon216_Then_correct) (=> (= (ControlFlow 0 77) 75) anon216_Else_correct)))))
(let ((anon215_Then_correct  (=> (|Set#IsMember| |$rhs#4@0| ($Box refType |x#42@0|)) (and (=> (= (ControlFlow 0 76) 74) anon216_Then_correct) (=> (= (ControlFlow 0 76) 75) anon216_Else_correct)))))
(let ((anon214_Then_correct  (=> (and ($Is refType |x#42@0| Tclass.TestImplicitTypeTests.B) ($IsAlloc refType |x#42@0| Tclass.TestImplicitTypeTests.B $Heap@3)) (and (=> (= (ControlFlow 0 78) 76) anon215_Then_correct) (=> (= (ControlFlow 0 78) 77) anon215_Else_correct)))))
(let ((anon214_Else_correct  (=> (and (not (and ($Is refType |x#42@0| Tclass.TestImplicitTypeTests.B) ($IsAlloc refType |x#42@0| Tclass.TestImplicitTypeTests.B $Heap@3))) (= (ControlFlow 0 73) 72)) anon104_correct)))
(let ((anon99_correct  (and (=> (= (ControlFlow 0 79) 78) anon214_Then_correct) (=> (= (ControlFlow 0 79) 73) anon214_Else_correct))))
(let ((anon213_Else_correct  (=> (and (not (and (|Set#IsMember| |$rhs#4@0| ($Box refType |x#40@0|)) true)) (= (ControlFlow 0 82) 79)) anon99_correct)))
(let ((anon213_Then_correct  (=> (and (and (|Set#IsMember| |$rhs#4@0| ($Box refType |x#40@0|)) true) (= (ControlFlow 0 81) 79)) anon99_correct)))
(let ((anon212_Else_correct  (=> (not (|Set#IsMember| |$rhs#4@0| ($Box refType |x#40@0|))) (and (=> (= (ControlFlow 0 84) 81) anon213_Then_correct) (=> (= (ControlFlow 0 84) 82) anon213_Else_correct)))))
(let ((anon212_Then_correct  (=> (|Set#IsMember| |$rhs#4@0| ($Box refType |x#40@0|)) (and (=> (= (ControlFlow 0 83) 81) anon213_Then_correct) (=> (= (ControlFlow 0 83) 82) anon213_Else_correct)))))
(let ((anon211_Then_correct  (=> (and ($Is refType |x#40@0| Tclass.TestImplicitTypeTests.A) ($IsAlloc refType |x#40@0| Tclass.TestImplicitTypeTests.A $Heap@3)) (and (=> (= (ControlFlow 0 85) 83) anon212_Then_correct) (=> (= (ControlFlow 0 85) 84) anon212_Else_correct)))))
(let ((anon211_Else_correct  (=> (and (not (and ($Is refType |x#40@0| Tclass.TestImplicitTypeTests.A) ($IsAlloc refType |x#40@0| Tclass.TestImplicitTypeTests.A $Heap@3))) (= (ControlFlow 0 80) 79)) anon99_correct)))
(let ((anon94_correct  (and (=> (= (ControlFlow 0 86) 85) anon211_Then_correct) (=> (= (ControlFlow 0 86) 80) anon211_Else_correct))))
(let ((anon210_Else_correct  (=> (and (not (and (|Set#IsMember| |$rhs#4@0| ($Box refType |x#38@0|)) true)) (= (ControlFlow 0 89) 86)) anon94_correct)))
(let ((anon210_Then_correct  (=> (and (and (|Set#IsMember| |$rhs#4@0| ($Box refType |x#38@0|)) true) (= (ControlFlow 0 88) 86)) anon94_correct)))
(let ((anon209_Else_correct  (=> (not (|Set#IsMember| |$rhs#4@0| ($Box refType |x#38@0|))) (and (=> (= (ControlFlow 0 91) 88) anon210_Then_correct) (=> (= (ControlFlow 0 91) 89) anon210_Else_correct)))))
(let ((anon209_Then_correct  (=> (|Set#IsMember| |$rhs#4@0| ($Box refType |x#38@0|)) (and (=> (= (ControlFlow 0 90) 88) anon210_Then_correct) (=> (= (ControlFlow 0 90) 89) anon210_Else_correct)))))
(let ((anon208_Then_correct  (=> (and ($Is refType |x#38@0| Tclass._System.object) ($IsAlloc refType |x#38@0| Tclass._System.object $Heap@3)) (and (=> (= (ControlFlow 0 92) 90) anon209_Then_correct) (=> (= (ControlFlow 0 92) 91) anon209_Else_correct)))))
(let ((anon208_Else_correct  (=> (and (not (and ($Is refType |x#38@0| Tclass._System.object) ($IsAlloc refType |x#38@0| Tclass._System.object $Heap@3))) (= (ControlFlow 0 87) 86)) anon94_correct)))
(let ((anon89_correct  (and (=> (= (ControlFlow 0 93) 92) anon208_Then_correct) (=> (= (ControlFlow 0 93) 87) anon208_Else_correct))))
(let ((anon207_Else_correct  (=> (and (not (and (|Set#IsMember| |r#0@0| ($Box refType |x#36@0|)) true)) (= (ControlFlow 0 96) 93)) anon89_correct)))
(let ((anon207_Then_correct  (=> (and (and (|Set#IsMember| |r#0@0| ($Box refType |x#36@0|)) true) (= (ControlFlow 0 95) 93)) anon89_correct)))
(let ((anon206_Else_correct  (=> (not (|Set#IsMember| |r#0@0| ($Box refType |x#36@0|))) (and (=> (= (ControlFlow 0 98) 95) anon207_Then_correct) (=> (= (ControlFlow 0 98) 96) anon207_Else_correct)))))
(let ((anon206_Then_correct  (=> (|Set#IsMember| |r#0@0| ($Box refType |x#36@0|)) (and (=> (= (ControlFlow 0 97) 95) anon207_Then_correct) (=> (= (ControlFlow 0 97) 96) anon207_Else_correct)))))
(let ((anon205_Then_correct  (=> (and ($Is refType |x#36@0| Tclass.TestImplicitTypeTests.C?) ($IsAlloc refType |x#36@0| Tclass.TestImplicitTypeTests.C? $Heap@3)) (and (=> (= (ControlFlow 0 99) 97) anon206_Then_correct) (=> (= (ControlFlow 0 99) 98) anon206_Else_correct)))))
(let ((anon205_Else_correct  (=> (and (not (and ($Is refType |x#36@0| Tclass.TestImplicitTypeTests.C?) ($IsAlloc refType |x#36@0| Tclass.TestImplicitTypeTests.C? $Heap@3))) (= (ControlFlow 0 94) 93)) anon89_correct)))
(let ((anon84_correct  (and (=> (= (ControlFlow 0 100) 99) anon205_Then_correct) (=> (= (ControlFlow 0 100) 94) anon205_Else_correct))))
(let ((anon204_Else_correct  (=> (and (not (and (|Set#IsMember| |r#0@0| ($Box refType |x#34@0|)) true)) (= (ControlFlow 0 103) 100)) anon84_correct)))
(let ((anon204_Then_correct  (=> (and (and (|Set#IsMember| |r#0@0| ($Box refType |x#34@0|)) true) (= (ControlFlow 0 102) 100)) anon84_correct)))
(let ((anon203_Else_correct  (=> (not (|Set#IsMember| |r#0@0| ($Box refType |x#34@0|))) (and (=> (= (ControlFlow 0 105) 102) anon204_Then_correct) (=> (= (ControlFlow 0 105) 103) anon204_Else_correct)))))
(let ((anon203_Then_correct  (=> (|Set#IsMember| |r#0@0| ($Box refType |x#34@0|)) (and (=> (= (ControlFlow 0 104) 102) anon204_Then_correct) (=> (= (ControlFlow 0 104) 103) anon204_Else_correct)))))
(let ((anon202_Then_correct  (=> (and ($Is refType |x#34@0| Tclass.TestImplicitTypeTests.B?) ($IsAlloc refType |x#34@0| Tclass.TestImplicitTypeTests.B? $Heap@3)) (and (=> (= (ControlFlow 0 106) 104) anon203_Then_correct) (=> (= (ControlFlow 0 106) 105) anon203_Else_correct)))))
(let ((anon202_Else_correct  (=> (and (not (and ($Is refType |x#34@0| Tclass.TestImplicitTypeTests.B?) ($IsAlloc refType |x#34@0| Tclass.TestImplicitTypeTests.B? $Heap@3))) (= (ControlFlow 0 101) 100)) anon84_correct)))
(let ((anon79_correct  (and (=> (= (ControlFlow 0 107) 106) anon202_Then_correct) (=> (= (ControlFlow 0 107) 101) anon202_Else_correct))))
(let ((anon201_Else_correct  (=> (and (not (and (|Set#IsMember| |r#0@0| ($Box refType |x#32@0|)) true)) (= (ControlFlow 0 110) 107)) anon79_correct)))
(let ((anon201_Then_correct  (=> (and (and (|Set#IsMember| |r#0@0| ($Box refType |x#32@0|)) true) (= (ControlFlow 0 109) 107)) anon79_correct)))
(let ((anon200_Else_correct  (=> (not (|Set#IsMember| |r#0@0| ($Box refType |x#32@0|))) (and (=> (= (ControlFlow 0 112) 109) anon201_Then_correct) (=> (= (ControlFlow 0 112) 110) anon201_Else_correct)))))
(let ((anon200_Then_correct  (=> (|Set#IsMember| |r#0@0| ($Box refType |x#32@0|)) (and (=> (= (ControlFlow 0 111) 109) anon201_Then_correct) (=> (= (ControlFlow 0 111) 110) anon201_Else_correct)))))
(let ((anon199_Then_correct  (=> (and ($Is refType |x#32@0| Tclass.TestImplicitTypeTests.A?) ($IsAlloc refType |x#32@0| Tclass.TestImplicitTypeTests.A? $Heap@3)) (and (=> (= (ControlFlow 0 113) 111) anon200_Then_correct) (=> (= (ControlFlow 0 113) 112) anon200_Else_correct)))))
(let ((anon199_Else_correct  (=> (and (not (and ($Is refType |x#32@0| Tclass.TestImplicitTypeTests.A?) ($IsAlloc refType |x#32@0| Tclass.TestImplicitTypeTests.A? $Heap@3))) (= (ControlFlow 0 108) 107)) anon79_correct)))
(let ((anon74_correct  (and (=> (= (ControlFlow 0 114) 113) anon199_Then_correct) (=> (= (ControlFlow 0 114) 108) anon199_Else_correct))))
(let ((anon198_Else_correct  (=> (and (not (and (|Set#IsMember| |r#0@0| ($Box refType |x#30@0|)) true)) (= (ControlFlow 0 117) 114)) anon74_correct)))
(let ((anon198_Then_correct  (=> (and (and (|Set#IsMember| |r#0@0| ($Box refType |x#30@0|)) true) (= (ControlFlow 0 116) 114)) anon74_correct)))
(let ((anon197_Else_correct  (=> (not (|Set#IsMember| |r#0@0| ($Box refType |x#30@0|))) (and (=> (= (ControlFlow 0 119) 116) anon198_Then_correct) (=> (= (ControlFlow 0 119) 117) anon198_Else_correct)))))
(let ((anon197_Then_correct  (=> (|Set#IsMember| |r#0@0| ($Box refType |x#30@0|)) (and (=> (= (ControlFlow 0 118) 116) anon198_Then_correct) (=> (= (ControlFlow 0 118) 117) anon198_Else_correct)))))
(let ((anon196_Then_correct  (=> (and ($Is refType |x#30@0| Tclass._System.object?) ($IsAlloc refType |x#30@0| Tclass._System.object? $Heap@3)) (and (=> (= (ControlFlow 0 120) 118) anon197_Then_correct) (=> (= (ControlFlow 0 120) 119) anon197_Else_correct)))))
(let ((anon196_Else_correct  (=> (and (not (and ($Is refType |x#30@0| Tclass._System.object?) ($IsAlloc refType |x#30@0| Tclass._System.object? $Heap@3))) (= (ControlFlow 0 115) 114)) anon74_correct)))
(let ((anon69_correct  (and (=> (= (ControlFlow 0 121) 120) anon196_Then_correct) (=> (= (ControlFlow 0 121) 115) anon196_Else_correct))))
(let ((anon195_Else_correct  (=> (and (not (and (|Set#IsMember| |r#0@0| ($Box refType |x#28@0|)) true)) (= (ControlFlow 0 124) 121)) anon69_correct)))
(let ((anon195_Then_correct  (=> (and (and (|Set#IsMember| |r#0@0| ($Box refType |x#28@0|)) true) (= (ControlFlow 0 123) 121)) anon69_correct)))
(let ((anon194_Else_correct  (=> (not (|Set#IsMember| |r#0@0| ($Box refType |x#28@0|))) (and (=> (= (ControlFlow 0 126) 123) anon195_Then_correct) (=> (= (ControlFlow 0 126) 124) anon195_Else_correct)))))
(let ((anon194_Then_correct  (=> (|Set#IsMember| |r#0@0| ($Box refType |x#28@0|)) (and (=> (= (ControlFlow 0 125) 123) anon195_Then_correct) (=> (= (ControlFlow 0 125) 124) anon195_Else_correct)))))
(let ((anon193_Then_correct  (=> (and ($Is refType |x#28@0| Tclass.TestImplicitTypeTests.C) ($IsAlloc refType |x#28@0| Tclass.TestImplicitTypeTests.C $Heap@3)) (and (=> (= (ControlFlow 0 127) 125) anon194_Then_correct) (=> (= (ControlFlow 0 127) 126) anon194_Else_correct)))))
(let ((anon193_Else_correct  (=> (and (not (and ($Is refType |x#28@0| Tclass.TestImplicitTypeTests.C) ($IsAlloc refType |x#28@0| Tclass.TestImplicitTypeTests.C $Heap@3))) (= (ControlFlow 0 122) 121)) anon69_correct)))
(let ((anon64_correct  (and (=> (= (ControlFlow 0 128) 127) anon193_Then_correct) (=> (= (ControlFlow 0 128) 122) anon193_Else_correct))))
(let ((anon192_Else_correct  (=> (and (not (and (|Set#IsMember| |r#0@0| ($Box refType |x#26@0|)) true)) (= (ControlFlow 0 131) 128)) anon64_correct)))
(let ((anon192_Then_correct  (=> (and (and (|Set#IsMember| |r#0@0| ($Box refType |x#26@0|)) true) (= (ControlFlow 0 130) 128)) anon64_correct)))
(let ((anon191_Else_correct  (=> (not (|Set#IsMember| |r#0@0| ($Box refType |x#26@0|))) (and (=> (= (ControlFlow 0 133) 130) anon192_Then_correct) (=> (= (ControlFlow 0 133) 131) anon192_Else_correct)))))
(let ((anon191_Then_correct  (=> (|Set#IsMember| |r#0@0| ($Box refType |x#26@0|)) (and (=> (= (ControlFlow 0 132) 130) anon192_Then_correct) (=> (= (ControlFlow 0 132) 131) anon192_Else_correct)))))
(let ((anon190_Then_correct  (=> (and ($Is refType |x#26@0| Tclass.TestImplicitTypeTests.B) ($IsAlloc refType |x#26@0| Tclass.TestImplicitTypeTests.B $Heap@3)) (and (=> (= (ControlFlow 0 134) 132) anon191_Then_correct) (=> (= (ControlFlow 0 134) 133) anon191_Else_correct)))))
(let ((anon190_Else_correct  (=> (and (not (and ($Is refType |x#26@0| Tclass.TestImplicitTypeTests.B) ($IsAlloc refType |x#26@0| Tclass.TestImplicitTypeTests.B $Heap@3))) (= (ControlFlow 0 129) 128)) anon64_correct)))
(let ((anon59_correct  (and (=> (= (ControlFlow 0 135) 134) anon190_Then_correct) (=> (= (ControlFlow 0 135) 129) anon190_Else_correct))))
(let ((anon189_Else_correct  (=> (and (not (and (|Set#IsMember| |r#0@0| ($Box refType |x#24@0|)) true)) (= (ControlFlow 0 138) 135)) anon59_correct)))
(let ((anon189_Then_correct  (=> (and (and (|Set#IsMember| |r#0@0| ($Box refType |x#24@0|)) true) (= (ControlFlow 0 137) 135)) anon59_correct)))
(let ((anon188_Else_correct  (=> (not (|Set#IsMember| |r#0@0| ($Box refType |x#24@0|))) (and (=> (= (ControlFlow 0 140) 137) anon189_Then_correct) (=> (= (ControlFlow 0 140) 138) anon189_Else_correct)))))
(let ((anon188_Then_correct  (=> (|Set#IsMember| |r#0@0| ($Box refType |x#24@0|)) (and (=> (= (ControlFlow 0 139) 137) anon189_Then_correct) (=> (= (ControlFlow 0 139) 138) anon189_Else_correct)))))
(let ((anon187_Then_correct  (=> (and ($Is refType |x#24@0| Tclass.TestImplicitTypeTests.A) ($IsAlloc refType |x#24@0| Tclass.TestImplicitTypeTests.A $Heap@3)) (and (=> (= (ControlFlow 0 141) 139) anon188_Then_correct) (=> (= (ControlFlow 0 141) 140) anon188_Else_correct)))))
(let ((anon187_Else_correct  (=> (and (not (and ($Is refType |x#24@0| Tclass.TestImplicitTypeTests.A) ($IsAlloc refType |x#24@0| Tclass.TestImplicitTypeTests.A $Heap@3))) (= (ControlFlow 0 136) 135)) anon59_correct)))
(let ((anon54_correct  (and (=> (= (ControlFlow 0 142) 141) anon187_Then_correct) (=> (= (ControlFlow 0 142) 136) anon187_Else_correct))))
(let ((anon186_Else_correct  (=> (and (not (and (|Set#IsMember| |r#0@0| ($Box refType |x#22@0|)) true)) (= (ControlFlow 0 145) 142)) anon54_correct)))
(let ((anon186_Then_correct  (=> (and (and (|Set#IsMember| |r#0@0| ($Box refType |x#22@0|)) true) (= (ControlFlow 0 144) 142)) anon54_correct)))
(let ((anon185_Else_correct  (=> (not (|Set#IsMember| |r#0@0| ($Box refType |x#22@0|))) (and (=> (= (ControlFlow 0 147) 144) anon186_Then_correct) (=> (= (ControlFlow 0 147) 145) anon186_Else_correct)))))
(let ((anon185_Then_correct  (=> (|Set#IsMember| |r#0@0| ($Box refType |x#22@0|)) (and (=> (= (ControlFlow 0 146) 144) anon186_Then_correct) (=> (= (ControlFlow 0 146) 145) anon186_Else_correct)))))
(let ((anon184_Then_correct  (=> (and ($Is refType |x#22@0| Tclass._System.object) ($IsAlloc refType |x#22@0| Tclass._System.object $Heap@3)) (and (=> (= (ControlFlow 0 148) 146) anon185_Then_correct) (=> (= (ControlFlow 0 148) 147) anon185_Else_correct)))))
(let ((anon184_Else_correct  (=> (and (not (and ($Is refType |x#22@0| Tclass._System.object) ($IsAlloc refType |x#22@0| Tclass._System.object $Heap@3))) (= (ControlFlow 0 143) 142)) anon54_correct)))
(let ((anon49_correct  (=> (and (and (= |$rhs#4@0| (|Set#Union| |r#0@0| (|Set#UnionOne| |Set#Empty| ($Box refType null)))) (= |$rhs#5@0| (|Set#Union| |s#0@0| (|Set#UnionOne| |Set#Empty| ($Box refType null))))) (and (= |$rhs#6@0| (|Set#Union| |t#0@0| (|Set#UnionOne| |Set#Empty| ($Box refType null)))) (= |$rhs#7@0| (|Set#Union| |u#0@0| (|Set#UnionOne| |Set#Empty| ($Box refType null)))))) (and (=> (= (ControlFlow 0 149) 148) anon184_Then_correct) (=> (= (ControlFlow 0 149) 143) anon184_Else_correct)))))
(let ((anon183_Else_correct  (=> (and (not (and (|Set#IsMember| |r#0@0| ($Box refType |x#20@0|)) true)) (= (ControlFlow 0 152) 149)) anon49_correct)))
(let ((anon183_Then_correct  (=> (and (and (|Set#IsMember| |r#0@0| ($Box refType |x#20@0|)) true) (= (ControlFlow 0 151) 149)) anon49_correct)))
(let ((anon182_Else_correct  (=> (not (|Set#IsMember| |r#0@0| ($Box refType |x#20@0|))) (and (=> (= (ControlFlow 0 154) 151) anon183_Then_correct) (=> (= (ControlFlow 0 154) 152) anon183_Else_correct)))))
(let ((anon182_Then_correct  (=> (|Set#IsMember| |r#0@0| ($Box refType |x#20@0|)) (and (=> (= (ControlFlow 0 153) 151) anon183_Then_correct) (=> (= (ControlFlow 0 153) 152) anon183_Else_correct)))))
(let ((anon181_Then_correct  (=> (and ($Is refType |x#20@0| Tclass.TestImplicitTypeTests.C) ($IsAlloc refType |x#20@0| Tclass.TestImplicitTypeTests.C $Heap@3)) (and (=> (= (ControlFlow 0 155) 153) anon182_Then_correct) (=> (= (ControlFlow 0 155) 154) anon182_Else_correct)))))
(let ((anon181_Else_correct  (=> (and (not (and ($Is refType |x#20@0| Tclass.TestImplicitTypeTests.C) ($IsAlloc refType |x#20@0| Tclass.TestImplicitTypeTests.C $Heap@3))) (= (ControlFlow 0 150) 149)) anon49_correct)))
(let ((anon44_correct  (and (=> (= (ControlFlow 0 156) 155) anon181_Then_correct) (=> (= (ControlFlow 0 156) 150) anon181_Else_correct))))
(let ((anon180_Else_correct  (=> (and (not (and (|Set#IsMember| |r#0@0| ($Box refType |x#18@0|)) true)) (= (ControlFlow 0 159) 156)) anon44_correct)))
(let ((anon180_Then_correct  (=> (and (and (|Set#IsMember| |r#0@0| ($Box refType |x#18@0|)) true) (= (ControlFlow 0 158) 156)) anon44_correct)))
(let ((anon179_Else_correct  (=> (not (|Set#IsMember| |r#0@0| ($Box refType |x#18@0|))) (and (=> (= (ControlFlow 0 161) 158) anon180_Then_correct) (=> (= (ControlFlow 0 161) 159) anon180_Else_correct)))))
(let ((anon179_Then_correct  (=> (|Set#IsMember| |r#0@0| ($Box refType |x#18@0|)) (and (=> (= (ControlFlow 0 160) 158) anon180_Then_correct) (=> (= (ControlFlow 0 160) 159) anon180_Else_correct)))))
(let ((anon178_Then_correct  (=> (and ($Is refType |x#18@0| Tclass.TestImplicitTypeTests.B) ($IsAlloc refType |x#18@0| Tclass.TestImplicitTypeTests.B $Heap@3)) (and (=> (= (ControlFlow 0 162) 160) anon179_Then_correct) (=> (= (ControlFlow 0 162) 161) anon179_Else_correct)))))
(let ((anon178_Else_correct  (=> (and (not (and ($Is refType |x#18@0| Tclass.TestImplicitTypeTests.B) ($IsAlloc refType |x#18@0| Tclass.TestImplicitTypeTests.B $Heap@3))) (= (ControlFlow 0 157) 156)) anon44_correct)))
(let ((anon39_correct  (and (=> (= (ControlFlow 0 163) 162) anon178_Then_correct) (=> (= (ControlFlow 0 163) 157) anon178_Else_correct))))
(let ((anon177_Else_correct  (=> (and (not (and (|Set#IsMember| |r#0@0| ($Box refType |x#16@0|)) true)) (= (ControlFlow 0 166) 163)) anon39_correct)))
(let ((anon177_Then_correct  (=> (and (and (|Set#IsMember| |r#0@0| ($Box refType |x#16@0|)) true) (= (ControlFlow 0 165) 163)) anon39_correct)))
(let ((anon176_Else_correct  (=> (not (|Set#IsMember| |r#0@0| ($Box refType |x#16@0|))) (and (=> (= (ControlFlow 0 168) 165) anon177_Then_correct) (=> (= (ControlFlow 0 168) 166) anon177_Else_correct)))))
(let ((anon176_Then_correct  (=> (|Set#IsMember| |r#0@0| ($Box refType |x#16@0|)) (and (=> (= (ControlFlow 0 167) 165) anon177_Then_correct) (=> (= (ControlFlow 0 167) 166) anon177_Else_correct)))))
(let ((anon175_Then_correct  (=> (and ($Is refType |x#16@0| Tclass.TestImplicitTypeTests.A) ($IsAlloc refType |x#16@0| Tclass.TestImplicitTypeTests.A $Heap@3)) (and (=> (= (ControlFlow 0 169) 167) anon176_Then_correct) (=> (= (ControlFlow 0 169) 168) anon176_Else_correct)))))
(let ((anon175_Else_correct  (=> (and (not (and ($Is refType |x#16@0| Tclass.TestImplicitTypeTests.A) ($IsAlloc refType |x#16@0| Tclass.TestImplicitTypeTests.A $Heap@3))) (= (ControlFlow 0 164) 163)) anon39_correct)))
(let ((anon34_correct  (and (=> (= (ControlFlow 0 170) 169) anon175_Then_correct) (=> (= (ControlFlow 0 170) 164) anon175_Else_correct))))
(let ((anon174_Else_correct  (=> (and (not (and (|Set#IsMember| |r#0@0| ($Box refType |x#14@0|)) true)) (= (ControlFlow 0 173) 170)) anon34_correct)))
(let ((anon174_Then_correct  (=> (and (and (|Set#IsMember| |r#0@0| ($Box refType |x#14@0|)) true) (= (ControlFlow 0 172) 170)) anon34_correct)))
(let ((anon173_Else_correct  (=> (not (|Set#IsMember| |r#0@0| ($Box refType |x#14@0|))) (and (=> (= (ControlFlow 0 175) 172) anon174_Then_correct) (=> (= (ControlFlow 0 175) 173) anon174_Else_correct)))))
(let ((anon173_Then_correct  (=> (|Set#IsMember| |r#0@0| ($Box refType |x#14@0|)) (and (=> (= (ControlFlow 0 174) 172) anon174_Then_correct) (=> (= (ControlFlow 0 174) 173) anon174_Else_correct)))))
(let ((anon172_Then_correct  (=> (and ($Is refType |x#14@0| Tclass._System.object) ($IsAlloc refType |x#14@0| Tclass._System.object $Heap@3)) (and (=> (= (ControlFlow 0 176) 174) anon173_Then_correct) (=> (= (ControlFlow 0 176) 175) anon173_Else_correct)))))
(let ((anon172_Else_correct  (=> (and (not (and ($Is refType |x#14@0| Tclass._System.object) ($IsAlloc refType |x#14@0| Tclass._System.object $Heap@3))) (= (ControlFlow 0 171) 170)) anon34_correct)))
(let ((anon29_correct  (and (=> (= (ControlFlow 0 177) 176) anon172_Then_correct) (=> (= (ControlFlow 0 177) 171) anon172_Else_correct))))
(let ((anon171_Else_correct  (=> (and (not (and (|Set#IsMember| |r#0@0| ($Box refType |x#12@0|)) true)) (= (ControlFlow 0 180) 177)) anon29_correct)))
(let ((anon171_Then_correct  (=> (and (and (|Set#IsMember| |r#0@0| ($Box refType |x#12@0|)) true) (= (ControlFlow 0 179) 177)) anon29_correct)))
(let ((anon170_Else_correct  (=> (not (|Set#IsMember| |r#0@0| ($Box refType |x#12@0|))) (and (=> (= (ControlFlow 0 182) 179) anon171_Then_correct) (=> (= (ControlFlow 0 182) 180) anon171_Else_correct)))))
(let ((anon170_Then_correct  (=> (|Set#IsMember| |r#0@0| ($Box refType |x#12@0|)) (and (=> (= (ControlFlow 0 181) 179) anon171_Then_correct) (=> (= (ControlFlow 0 181) 180) anon171_Else_correct)))))
(let ((anon169_Then_correct  (=> (and ($Is refType |x#12@0| Tclass.TestImplicitTypeTests.C) ($IsAlloc refType |x#12@0| Tclass.TestImplicitTypeTests.C $Heap@3)) (and (=> (= (ControlFlow 0 183) 181) anon170_Then_correct) (=> (= (ControlFlow 0 183) 182) anon170_Else_correct)))))
(let ((anon169_Else_correct  (=> (and (not (and ($Is refType |x#12@0| Tclass.TestImplicitTypeTests.C) ($IsAlloc refType |x#12@0| Tclass.TestImplicitTypeTests.C $Heap@3))) (= (ControlFlow 0 178) 177)) anon29_correct)))
(let ((anon24_correct  (and (=> (= (ControlFlow 0 184) 183) anon169_Then_correct) (=> (= (ControlFlow 0 184) 178) anon169_Else_correct))))
(let ((anon168_Else_correct  (=> (and (not (and (|Set#IsMember| |r#0@0| ($Box refType |x#10@0|)) true)) (= (ControlFlow 0 187) 184)) anon24_correct)))
(let ((anon168_Then_correct  (=> (and (and (|Set#IsMember| |r#0@0| ($Box refType |x#10@0|)) true) (= (ControlFlow 0 186) 184)) anon24_correct)))
(let ((anon167_Else_correct  (=> (not (|Set#IsMember| |r#0@0| ($Box refType |x#10@0|))) (and (=> (= (ControlFlow 0 189) 186) anon168_Then_correct) (=> (= (ControlFlow 0 189) 187) anon168_Else_correct)))))
(let ((anon167_Then_correct  (=> (|Set#IsMember| |r#0@0| ($Box refType |x#10@0|)) (and (=> (= (ControlFlow 0 188) 186) anon168_Then_correct) (=> (= (ControlFlow 0 188) 187) anon168_Else_correct)))))
(let ((anon166_Then_correct  (=> (and ($Is refType |x#10@0| Tclass.TestImplicitTypeTests.B) ($IsAlloc refType |x#10@0| Tclass.TestImplicitTypeTests.B $Heap@3)) (and (=> (= (ControlFlow 0 190) 188) anon167_Then_correct) (=> (= (ControlFlow 0 190) 189) anon167_Else_correct)))))
(let ((anon166_Else_correct  (=> (and (not (and ($Is refType |x#10@0| Tclass.TestImplicitTypeTests.B) ($IsAlloc refType |x#10@0| Tclass.TestImplicitTypeTests.B $Heap@3))) (= (ControlFlow 0 185) 184)) anon24_correct)))
(let ((anon19_correct  (and (=> (= (ControlFlow 0 191) 190) anon166_Then_correct) (=> (= (ControlFlow 0 191) 185) anon166_Else_correct))))
(let ((anon165_Else_correct  (=> (and (not (and (|Set#IsMember| |r#0@0| ($Box refType |x#8@0|)) true)) (= (ControlFlow 0 194) 191)) anon19_correct)))
(let ((anon165_Then_correct  (=> (and (and (|Set#IsMember| |r#0@0| ($Box refType |x#8@0|)) true) (= (ControlFlow 0 193) 191)) anon19_correct)))
(let ((anon164_Else_correct  (=> (not (|Set#IsMember| |r#0@0| ($Box refType |x#8@0|))) (and (=> (= (ControlFlow 0 196) 193) anon165_Then_correct) (=> (= (ControlFlow 0 196) 194) anon165_Else_correct)))))
(let ((anon164_Then_correct  (=> (|Set#IsMember| |r#0@0| ($Box refType |x#8@0|)) (and (=> (= (ControlFlow 0 195) 193) anon165_Then_correct) (=> (= (ControlFlow 0 195) 194) anon165_Else_correct)))))
(let ((anon163_Then_correct  (=> (and ($Is refType |x#8@0| Tclass.TestImplicitTypeTests.A) ($IsAlloc refType |x#8@0| Tclass.TestImplicitTypeTests.A $Heap@3)) (and (=> (= (ControlFlow 0 197) 195) anon164_Then_correct) (=> (= (ControlFlow 0 197) 196) anon164_Else_correct)))))
(let ((anon163_Else_correct  (=> (and (not (and ($Is refType |x#8@0| Tclass.TestImplicitTypeTests.A) ($IsAlloc refType |x#8@0| Tclass.TestImplicitTypeTests.A $Heap@3))) (= (ControlFlow 0 192) 191)) anon19_correct)))
(let ((anon14_correct  (and (=> (= (ControlFlow 0 198) 197) anon163_Then_correct) (=> (= (ControlFlow 0 198) 192) anon163_Else_correct))))
(let ((anon162_Else_correct  (=> (and (not (and (|Set#IsMember| |r#0@0| ($Box refType |x#6@0|)) true)) (= (ControlFlow 0 201) 198)) anon14_correct)))
(let ((anon162_Then_correct  (=> (and (and (|Set#IsMember| |r#0@0| ($Box refType |x#6@0|)) true) (= (ControlFlow 0 200) 198)) anon14_correct)))
(let ((anon161_Else_correct  (=> (not (|Set#IsMember| |r#0@0| ($Box refType |x#6@0|))) (and (=> (= (ControlFlow 0 203) 200) anon162_Then_correct) (=> (= (ControlFlow 0 203) 201) anon162_Else_correct)))))
(let ((anon161_Then_correct  (=> (|Set#IsMember| |r#0@0| ($Box refType |x#6@0|)) (and (=> (= (ControlFlow 0 202) 200) anon162_Then_correct) (=> (= (ControlFlow 0 202) 201) anon162_Else_correct)))))
(let ((anon160_Then_correct  (=> (and ($Is refType |x#6@0| Tclass._System.object) ($IsAlloc refType |x#6@0| Tclass._System.object $Heap@3)) (and (=> (= (ControlFlow 0 204) 202) anon161_Then_correct) (=> (= (ControlFlow 0 204) 203) anon161_Else_correct)))))
(let ((anon160_Else_correct  (=> (and (not (and ($Is refType |x#6@0| Tclass._System.object) ($IsAlloc refType |x#6@0| Tclass._System.object $Heap@3))) (= (ControlFlow 0 199) 198)) anon14_correct)))
(let ((anon9_correct  (=> (= |u#0@0| (|Set#FromBoogieMap| (|lambda#1| Tclass.TestImplicitTypeTests.C |s#0@0|))) (and (=> (= (ControlFlow 0 205) 204) anon160_Then_correct) (=> (= (ControlFlow 0 205) 199) anon160_Else_correct)))))
(let ((anon159_Else_correct  (=> (and (not (|Set#IsMember| |s#0@0| ($Box refType |x#4@0|))) (= (ControlFlow 0 208) 205)) anon9_correct)))
(let ((anon159_Then_correct  (=> (and (|Set#IsMember| |s#0@0| ($Box refType |x#4@0|)) (= (ControlFlow 0 207) 205)) anon9_correct)))
(let ((anon158_Then_correct  (=> (and ($Is refType |x#4@0| Tclass.TestImplicitTypeTests.C) ($IsAlloc refType |x#4@0| Tclass.TestImplicitTypeTests.C $Heap@3)) (and (=> (= (ControlFlow 0 209) 207) anon159_Then_correct) (=> (= (ControlFlow 0 209) 208) anon159_Else_correct)))))
(let ((anon158_Else_correct  (=> (and (not (and ($Is refType |x#4@0| Tclass.TestImplicitTypeTests.C) ($IsAlloc refType |x#4@0| Tclass.TestImplicitTypeTests.C $Heap@3))) (= (ControlFlow 0 206) 205)) anon9_correct)))
(let ((anon6_correct  (=> (= |t#0@0| (|Set#FromBoogieMap| (|lambda#1| Tclass.TestImplicitTypeTests.B |s#0@0|))) (and (=> (= (ControlFlow 0 210) 209) anon158_Then_correct) (=> (= (ControlFlow 0 210) 206) anon158_Else_correct)))))
(let ((anon157_Else_correct  (=> (and (not (|Set#IsMember| |s#0@0| ($Box refType |x#2@0|))) (= (ControlFlow 0 213) 210)) anon6_correct)))
(let ((anon157_Then_correct  (=> (and (|Set#IsMember| |s#0@0| ($Box refType |x#2@0|)) (= (ControlFlow 0 212) 210)) anon6_correct)))
(let ((anon156_Then_correct  (=> (and ($Is refType |x#2@0| Tclass.TestImplicitTypeTests.B) ($IsAlloc refType |x#2@0| Tclass.TestImplicitTypeTests.B $Heap@3)) (and (=> (= (ControlFlow 0 214) 212) anon157_Then_correct) (=> (= (ControlFlow 0 214) 213) anon157_Else_correct)))))
(let ((anon156_Else_correct  (=> (and (not (and ($Is refType |x#2@0| Tclass.TestImplicitTypeTests.B) ($IsAlloc refType |x#2@0| Tclass.TestImplicitTypeTests.B $Heap@3))) (= (ControlFlow 0 211) 210)) anon6_correct)))
(let ((anon3_correct  (=> (= |s#0@0| (|Set#FromBoogieMap| (|lambda#1| Tclass.TestImplicitTypeTests.A |r#0@0|))) (and (=> (= (ControlFlow 0 215) 214) anon156_Then_correct) (=> (= (ControlFlow 0 215) 211) anon156_Else_correct)))))
(let ((anon155_Else_correct  (=> (and (not (|Set#IsMember| |r#0@0| ($Box refType |x#0@0|))) (= (ControlFlow 0 218) 215)) anon3_correct)))
(let ((anon155_Then_correct  (=> (and (|Set#IsMember| |r#0@0| ($Box refType |x#0@0|)) (= (ControlFlow 0 217) 215)) anon3_correct)))
(let ((anon154_Then_correct  (=> (and ($Is refType |x#0@0| Tclass.TestImplicitTypeTests.A) ($IsAlloc refType |x#0@0| Tclass.TestImplicitTypeTests.A $Heap@3)) (and (=> (= (ControlFlow 0 219) 217) anon155_Then_correct) (=> (= (ControlFlow 0 219) 218) anon155_Else_correct)))))
(let ((anon154_Else_correct  (=> (and (not (and ($Is refType |x#0@0| Tclass.TestImplicitTypeTests.A) ($IsAlloc refType |x#0@0| Tclass.TestImplicitTypeTests.A $Heap@3))) (= (ControlFlow 0 216) 215)) anon3_correct)))
(let ((anon0_correct  (=> (and (and (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (or (not (= $nw@0 null)) (not true))) (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) alloc)))) (= $Heap@0 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap $nw@0 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) alloc ($Box boolType (bool_2_U true))))))) (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (or (not (= $nw@1 null)) (not true)) ($Is refType $nw@1 Tclass.TestImplicitTypeTests.A_k?)))) (=> (and (and (and (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $nw@1) alloc)))) (= $Heap@1 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@0 $nw@1 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $nw@1) alloc ($Box boolType (bool_2_U true)))))) (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1))) (and (and (or (not (= $nw@2 null)) (not true)) ($Is refType $nw@2 Tclass.TestImplicitTypeTests.B_k?)) (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@2) alloc)))) (= $Heap@2 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@1 $nw@2 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@2) alloc ($Box boolType (bool_2_U true)))))))) (and (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (and (or (not (= $nw@3 null)) (not true)) ($Is refType $nw@3 Tclass.TestImplicitTypeTests.C?))) (and (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $nw@3) alloc)))) (= $Heap@3 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@2 $nw@3 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $nw@3) alloc ($Box boolType (bool_2_U true)))))) (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3))))) (and (=> (= (ControlFlow 0 220) (- 0 224)) true) (and (=> (= (ControlFlow 0 220) (- 0 223)) true) (and (=> (= (ControlFlow 0 220) (- 0 222)) true) (and (=> (= (ControlFlow 0 220) (- 0 221)) true) (=> (= |r#0@0| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| |Set#Empty| ($Box refType $nw@0)) ($Box refType $nw@1)) ($Box refType $nw@2)) ($Box refType $nw@3))) (and (=> (= (ControlFlow 0 220) 219) anon154_Then_correct) (=> (= (ControlFlow 0 220) 216) anon154_Else_correct)))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (=> |defass#o#0| (and ($Is refType |o#0| Tclass._System.object) ($IsAlloc refType |o#0| Tclass._System.object $Heap))) true) (and (=> |defass#a#0| (and ($Is refType |a#0| Tclass.TestImplicitTypeTests.A_k) ($IsAlloc refType |a#0| Tclass.TestImplicitTypeTests.A_k $Heap))) true)) (=> (and (and (and (=> |defass#b#0| (and ($Is refType |b#0| Tclass.TestImplicitTypeTests.B_k) ($IsAlloc refType |b#0| Tclass.TestImplicitTypeTests.B_k $Heap))) true) (and (=> |defass#c#0| (and ($Is refType |c#0@@11| Tclass.TestImplicitTypeTests.C) ($IsAlloc refType |c#0@@11| Tclass.TestImplicitTypeTests.C $Heap))) true)) (and (and ($Is SetType |r#0| (TSet Tclass._System.object)) ($IsAlloc SetType |r#0| (TSet Tclass._System.object) $Heap)) true)) (=> (and (and (and (and (and ($Is SetType |s#0| (TSet Tclass.TestImplicitTypeTests.A)) ($IsAlloc SetType |s#0| (TSet Tclass.TestImplicitTypeTests.A) $Heap)) true) (and (and ($Is SetType |t#0| (TSet Tclass.TestImplicitTypeTests.B)) ($IsAlloc SetType |t#0| (TSet Tclass.TestImplicitTypeTests.B) $Heap)) true)) (and (and (and ($Is SetType |u#0| (TSet Tclass.TestImplicitTypeTests.C)) ($IsAlloc SetType |u#0| (TSet Tclass.TestImplicitTypeTests.C) $Heap)) true) (and (and ($Is SetType |r'#0| (TSet Tclass._System.object?)) ($IsAlloc SetType |r'#0| (TSet Tclass._System.object?) $Heap)) true))) (and (and (and (and ($Is SetType |s'#0| (TSet Tclass.TestImplicitTypeTests.A?)) ($IsAlloc SetType |s'#0| (TSet Tclass.TestImplicitTypeTests.A?) $Heap)) true) (and (and ($Is SetType |t'#0| (TSet Tclass.TestImplicitTypeTests.B?)) ($IsAlloc SetType |t'#0| (TSet Tclass.TestImplicitTypeTests.B?) $Heap)) true)) (and (and (and ($Is SetType |u'#0| (TSet Tclass.TestImplicitTypeTests.C?)) ($IsAlloc SetType |u'#0| (TSet Tclass.TestImplicitTypeTests.C?) $Heap)) true) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 225) 220))))) anon0_correct))))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
