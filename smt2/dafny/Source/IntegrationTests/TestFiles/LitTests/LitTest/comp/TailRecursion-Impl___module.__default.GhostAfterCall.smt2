(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U T@U) Bool)
(declare-fun $generated@@19 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@20 () T@T)
(declare-fun $generated@@21 () T@T)
(declare-fun $generated@@22 () T@T)
(declare-fun $generated@@23 (T@T T@T) T@T)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@26 (T@T) T@T)
(declare-fun $generated@@27 (T@T) T@T)
(declare-fun $generated@@48 (Int) Int)
(declare-fun $generated@@50 (T@T T@U) T@U)
(declare-fun $generated@@53 (T@T T@U) T@U)
(declare-fun $generated@@56 (T@T T@U T@U) Bool)
(declare-fun $generated@@57 () T@U)
(declare-fun $generated@@59 (T@U) Bool)
(declare-fun $generated@@60 (T@U T@U) Bool)
(declare-fun $generated@@70 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@71 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@72 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@104 (Int Int) Int)
(declare-fun $generated@@107 (T@U) T@U)
(declare-fun $generated@@108 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert  (and (and (and (and (and (and (and (forall (($generated@@28 T@T) ($generated@@29 T@T) ($generated@@30 T@U) ($generated@@31 T@U) ($generated@@32 T@U) ) (! (= ($generated@@19 $generated@@28 $generated@@29 ($generated@@25 $generated@@28 $generated@@29 $generated@@31 $generated@@32 $generated@@30) $generated@@32) $generated@@30)
 :weight 0
)) (forall (($generated@@33 T@T) ($generated@@34 T@T) ($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ) (!  (or (= $generated@@37 $generated@@38) (= ($generated@@19 $generated@@33 $generated@@34 ($generated@@25 $generated@@33 $generated@@34 $generated@@36 $generated@@37 $generated@@35) $generated@@38) ($generated@@19 $generated@@33 $generated@@34 $generated@@36 $generated@@38)))
 :weight 0
))) (= ($generated@@2 $generated@@20) 3)) (= ($generated@@2 $generated@@21) 4)) (= ($generated@@2 $generated@@22) 5)) (forall (($generated@@39 T@T) ($generated@@40 T@T) ) (= ($generated@@2 ($generated@@23 $generated@@39 $generated@@40)) 6))) (forall (($generated@@41 T@T) ($generated@@42 T@T) ) (! (= ($generated@@26 ($generated@@23 $generated@@41 $generated@@42)) $generated@@41)
 :pattern ( ($generated@@23 $generated@@41 $generated@@42))
))) (forall (($generated@@43 T@T) ($generated@@44 T@T) ) (! (= ($generated@@27 ($generated@@23 $generated@@43 $generated@@44)) $generated@@44)
 :pattern ( ($generated@@23 $generated@@43 $generated@@44))
))))
(assert (forall (($generated@@45 T@U) ($generated@@46 T@U) ) (!  (=> ($generated@@18 $generated@@45 $generated@@46) (forall (($generated@@47 T@U) ) (!  (=> ($generated@@7 ($generated@@24 $generated@@3 ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@45 $generated@@47) $generated))) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@46 $generated@@47) $generated))))
 :pattern ( ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@46 $generated@@47) $generated))
)))
 :pattern ( ($generated@@18 $generated@@45 $generated@@46))
)))
(assert (forall (($generated@@49 Int) ) (! (= ($generated@@48 $generated@@49) $generated@@49)
 :pattern ( ($generated@@48 $generated@@49))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@50 $generated@@52 $generated@@51) $generated@@51)
 :pattern ( ($generated@@50 $generated@@52 $generated@@51))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@53 $generated@@55 ($generated@@24 $generated@@55 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@24 $generated@@55 $generated@@54))
)))
(assert (forall (($generated@@58 T@U) ) (! (= ($generated@@56 $generated@@4 $generated@@58 $generated@@57) (<= ($generated@@48 0) ($generated@@9 $generated@@58)))
 :pattern ( ($generated@@56 $generated@@4 $generated@@58 $generated@@57))
)))
(assert ($generated@@59 $generated))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ) (!  (=> ($generated@@60 $generated@@61 $generated@@62) (and ($generated@@18 $generated@@61 $generated@@62) (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (!  (=> (not ($generated@@59 $generated@@64)) (= ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@61 $generated@@63) $generated@@64) ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@62 $generated@@63) $generated@@64)))
 :pattern ( ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@62 $generated@@63) $generated@@64))
))))
 :pattern ( ($generated@@60 $generated@@61 $generated@@62))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ) (!  (=> (or (not (= $generated@@65 $generated@@67)) (not true)) (=> (and ($generated@@18 $generated@@65 $generated@@66) ($generated@@18 $generated@@66 $generated@@67)) ($generated@@18 $generated@@65 $generated@@67)))
 :pattern ( ($generated@@18 $generated@@65 $generated@@66) ($generated@@18 $generated@@66 $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@24 $generated@@69 ($generated@@53 $generated@@69 $generated@@68)) $generated@@68)
 :pattern ( ($generated@@53 $generated@@69 $generated@@68))
)))
(assert  (and (forall (($generated@@73 T@T) ($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (! (= ($generated@@70 $generated@@73 $generated@@74 $generated@@75 ($generated@@72 $generated@@73 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@79 $generated@@76) $generated@@78 $generated@@79) $generated@@76)
 :weight 0
)) (and (forall (($generated@@80 T@T) ($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ) (!  (or (= $generated@@85 $generated@@87) (= ($generated@@70 $generated@@80 $generated@@81 $generated@@82 ($generated@@72 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@85 $generated@@86 $generated@@83) $generated@@87 $generated@@88) ($generated@@70 $generated@@80 $generated@@81 $generated@@82 $generated@@84 $generated@@87 $generated@@88)))
 :weight 0
)) (forall (($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@T) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ($generated@@97 T@U) ) (!  (or (= $generated@@95 $generated@@97) (= ($generated@@70 $generated@@89 $generated@@90 $generated@@91 ($generated@@72 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@94 $generated@@95 $generated@@92) $generated@@96 $generated@@97) ($generated@@70 $generated@@89 $generated@@90 $generated@@91 $generated@@93 $generated@@96 $generated@@97)))
 :weight 0
)))))
(assert (forall (($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 Bool) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@7 ($generated@@70 $generated@@22 $generated@@20 $generated@@3 ($generated@@71 $generated@@98 $generated@@99 $generated@@100 $generated@@101) $generated@@102 $generated@@103))  (=> (and (or (not (= $generated@@102 $generated@@98)) (not true)) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@99 $generated@@102) $generated@@100)))) $generated@@101))
 :pattern ( ($generated@@70 $generated@@22 $generated@@20 $generated@@3 ($generated@@71 $generated@@98 $generated@@99 $generated@@100 $generated@@101) $generated@@102 $generated@@103))
)))
(assert (forall (($generated@@105 Int) ($generated@@106 Int) ) (! (= ($generated@@104 $generated@@105 $generated@@106) (mod $generated@@105 $generated@@106))
 :pattern ( ($generated@@104 $generated@@105 $generated@@106))
)))
(assert (= ($generated@@107 $generated@@57) $generated@@0))
(assert (= ($generated@@108 $generated@@57) $generated@@1))
(assert (forall (($generated@@109 Int) ) (! (= ($generated@@53 $generated@@4 ($generated@@8 ($generated@@48 $generated@@109))) ($generated@@50 $generated@@21 ($generated@@53 $generated@@4 ($generated@@8 $generated@@109))))
 :pattern ( ($generated@@53 $generated@@4 ($generated@@8 ($generated@@48 $generated@@109))))
)))
(assert (forall (($generated@@110 T@U) ($generated@@111 T@T) ) (! (= ($generated@@53 $generated@@111 ($generated@@50 $generated@@111 $generated@@110)) ($generated@@50 $generated@@21 ($generated@@53 $generated@@111 $generated@@110)))
 :pattern ( ($generated@@53 $generated@@111 ($generated@@50 $generated@@111 $generated@@110)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@112 () Int)
(declare-fun $generated@@113 () Int)
(declare-fun $generated@@114 () Int)
(declare-fun $generated@@115 () Int)
(declare-fun $generated@@116 () Int)
(declare-fun $generated@@117 () Int)
(declare-fun $generated@@118 () Int)
(declare-fun $generated@@119 () Int)
(declare-fun $generated@@120 () Bool)
(declare-fun $generated@@121 () Int)
(declare-fun $generated@@122 () Int)
(declare-fun $generated@@123 () Int)
(declare-fun $generated@@124 () Int)
(declare-fun $generated@@125 () T@U)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 () T@U)
(declare-fun $generated@@128 () T@U)
(declare-fun $generated@@129 () Int)
(declare-fun $generated@@130 () Int)
(declare-fun $generated@@131 () Int)
(declare-fun $generated@@132 () Int)
(declare-fun $generated@@133 () Int)
(declare-fun $generated@@134 () Int)
(declare-fun $generated@@135 () Int)
(declare-fun $generated@@136 () Int)
(declare-fun $generated@@137 () Int)
(declare-fun $generated@@138 () Int)
(declare-fun $generated@@139 (T@U) Bool)
(declare-fun $generated@@140 (T@U) Bool)
(declare-fun $generated@@141 () Int)
(declare-fun $generated@@142 () Int)
(declare-fun $generated@@143 () Int)
(declare-fun $generated@@144 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 57) (let (($generated@@145 true))
(let (($generated@@146  (=> (and (or (not (= $generated@@112 ($generated@@48 300))) (not true)) (= (ControlFlow 0 45) 43)) $generated@@145)))
(let (($generated@@147  (=> (= $generated@@112 ($generated@@48 300)) (=> (and (= $generated@@113 (+ $generated@@114 1)) (= (ControlFlow 0 44) 43)) $generated@@145))))
(let (($generated@@148  (and (=> (= (ControlFlow 0 46) 44) $generated@@147) (=> (= (ControlFlow 0 46) 45) $generated@@146))))
(let (($generated@@149  (=> (= (ControlFlow 0 48) 46) $generated@@148)))
(let (($generated@@150  (=> (and (<= 25 $generated@@115) (= (ControlFlow 0 50) 48)) $generated@@149)))
(let (($generated@@151  (=> (and (< $generated@@115 25) (= (ControlFlow 0 49) 48)) $generated@@149)))
(let (($generated@@152  (=> (or (not (= $generated@@112 ($generated@@48 300))) (not true)) (and (=> (= (ControlFlow 0 51) 49) $generated@@151) (=> (= (ControlFlow 0 51) 50) $generated@@150)))))
(let (($generated@@153  (=> (and (= $generated@@112 ($generated@@48 300)) (= (ControlFlow 0 47) 46)) $generated@@148)))
(let (($generated@@154  (and (=> (= (ControlFlow 0 52) 47) $generated@@153) (=> (= (ControlFlow 0 52) 51) $generated@@152))))
(let (($generated@@155  (=> (and (or (not (= $generated@@112 ($generated@@48 300))) (not true)) (= (ControlFlow 0 54) 52)) $generated@@154)))
(let (($generated@@156  (=> (= $generated@@112 ($generated@@48 300)) (=> (and (= $generated@@116 (+ $generated@@117 1)) (= (ControlFlow 0 53) 52)) $generated@@154))))
(let (($generated@@157  (=> (and (= $generated@@118 ($generated@@48 0)) (= $generated@@117 ($generated@@48 20))) (and (=> (= (ControlFlow 0 55) 53) $generated@@156) (=> (= (ControlFlow 0 55) 54) $generated@@155)))))
(let (($generated@@158  (=> (and ($generated@@7 ($generated@@50 $generated@@3 ($generated@@6 (< 15 14)))) (= $generated@@119 ($generated@@48 (- 14 15)))) (and (=> (= (ControlFlow 0 5) (- 0 6)) (or (<= 0 $generated@@119) (= ($generated@@48 (- 14 15)) $generated@@119))) (=> (or (<= 0 $generated@@119) (= ($generated@@48 (- 14 15)) $generated@@119)) (=> (= (ControlFlow 0 5) (- 0 4)) (< ($generated@@48 (- 14 15)) $generated@@119)))))))
(let (($generated@@159 true))
(let (($generated@@160  (=> $generated@@120 (and (=> (= (ControlFlow 0 7) 3) $generated@@159) (=> (= (ControlFlow 0 7) 5) $generated@@158)))))
(let (($generated@@161 true))
(let (($generated@@162  (and (=> (= (ControlFlow 0 8) 2) $generated@@161) (=> (= (ControlFlow 0 8) 7) $generated@@160))))
(let (($generated@@163 true))
(let (($generated@@164  (=> (and (and (and (and (and (not false) (and (<= 13 $generated@@121) (< $generated@@121 25))) (= $generated@@122 10)) (= $generated@@123 8)) (= $generated@@124 (- 0 1))) (and (and (forall (($generated@@165 T@U) ) (!  (=> (and (or (not (= $generated@@165 $generated@@126)) (not true)) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@127 $generated@@165) $generated)))) (= ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@125 $generated@@165) ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@125 $generated@@165)))
 :pattern ( ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@125 $generated@@165))
)) ($generated@@60 $generated@@125 $generated@@125)) (and (forall (($generated@@166 T@U) ($generated@@167 T@U) ) (!  (=> (and (or (not (= $generated@@166 $generated@@126)) (not true)) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@125 $generated@@166) $generated)))) (or (= ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@125 $generated@@166) $generated@@167) ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@125 $generated@@166) $generated@@167)) ($generated@@7 ($generated@@70 $generated@@22 $generated@@20 $generated@@3 $generated@@128 $generated@@166 $generated@@167))))
 :pattern ( ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@125 $generated@@166) $generated@@167))
)) (<= ($generated@@48 (- 14 15)) $generated@@124)))) (and (=> (= (ControlFlow 0 9) 1) $generated@@163) (=> (= (ControlFlow 0 9) 8) $generated@@162)))))
(let (($generated@@168  (=> (and (= $generated@@124 ($generated@@48 (- 14 15))) (= (ControlFlow 0 10) 9)) $generated@@164)))
(let (($generated@@169  (=> (and (or (not (= $generated@@118 ($generated@@48 1))) (not true)) (= (ControlFlow 0 13) 10)) $generated@@168)))
(let (($generated@@170  (=> (= $generated@@118 ($generated@@48 1)) (and (=> (= (ControlFlow 0 11) (- 0 12)) ($generated@@7 ($generated@@50 $generated@@3 ($generated@@6 true)))) (=> ($generated@@7 ($generated@@50 $generated@@3 ($generated@@6 true))) (=> (= (ControlFlow 0 11) 10) $generated@@168))))))
(let (($generated@@171  (and (=> (= (ControlFlow 0 14) 11) $generated@@170) (=> (= (ControlFlow 0 14) 13) $generated@@169))))
(let (($generated@@172  (=> (and (or (not (= $generated@@118 ($generated@@48 0))) (not true)) (= (ControlFlow 0 16) 14)) $generated@@171)))
(let (($generated@@173  (=> (and (= $generated@@118 ($generated@@48 0)) (= (ControlFlow 0 15) 14)) $generated@@171)))
(let (($generated@@174  (and (=> (= (ControlFlow 0 17) 15) $generated@@173) (=> (= (ControlFlow 0 17) 16) $generated@@172))))
(let (($generated@@175  (=> (and (or (not (= ($generated@@104 $generated@@118 ($generated@@48 5)) ($generated@@48 0))) (not true)) (= (ControlFlow 0 19) 17)) $generated@@174)))
(let (($generated@@176  (=> (and (= ($generated@@104 $generated@@118 ($generated@@48 5)) ($generated@@48 0)) (= (ControlFlow 0 18) 17)) $generated@@174)))
(let (($generated@@177  (=> (= $generated@@121 (+ $generated@@129 1)) (and (=> (= (ControlFlow 0 20) (- 0 21)) (or (not (= ($generated@@48 5) 0)) (not true))) (=> (or (not (= ($generated@@48 5) 0)) (not true)) (and (=> (= (ControlFlow 0 20) 18) $generated@@176) (=> (= (ControlFlow 0 20) 19) $generated@@175)))))))
(let (($generated@@178  (=> (and (= $generated@@129 $generated@@130) (= (ControlFlow 0 23) 20)) $generated@@177)))
(let (($generated@@179  (=> (or (not (= ($generated@@104 $generated@@118 ($generated@@48 3)) ($generated@@48 0))) (not true)) (=> (and (= $generated@@130 $generated@@131) (= (ControlFlow 0 25) 23)) $generated@@178))))
(let (($generated@@180  (=> (and (and (= ($generated@@104 $generated@@118 ($generated@@48 3)) ($generated@@48 0)) (= $generated@@132 (+ $generated@@131 1))) (and (= $generated@@130 $generated@@132) (= (ControlFlow 0 24) 23))) $generated@@178)))
(let (($generated@@181  (=> (or (not (= ($generated@@104 $generated@@118 ($generated@@48 2)) ($generated@@48 0))) (not true)) (and (=> (= (ControlFlow 0 26) (- 0 27)) (or (not (= ($generated@@48 3) 0)) (not true))) (=> (or (not (= ($generated@@48 3) 0)) (not true)) (and (=> (= (ControlFlow 0 26) 24) $generated@@180) (=> (= (ControlFlow 0 26) 25) $generated@@179)))))))
(let (($generated@@182  (=> (= ($generated@@104 $generated@@118 ($generated@@48 2)) ($generated@@48 0)) (=> (and (= $generated@@129 $generated@@131) (= (ControlFlow 0 22) 20)) $generated@@177))))
(let (($generated@@183  (and (=> (= (ControlFlow 0 28) (- 0 29)) (or (not (= ($generated@@48 2) 0)) (not true))) (=> (or (not (= ($generated@@48 2) 0)) (not true)) (and (=> (= (ControlFlow 0 28) 22) $generated@@182) (=> (= (ControlFlow 0 28) 26) $generated@@181))))))
(let (($generated@@184  (=> (and (= $generated@@131 $generated@@133) (= (ControlFlow 0 31) 28)) $generated@@183)))
(let (($generated@@185  (=> (or (not (= ($generated@@104 $generated@@134 ($generated@@48 3)) ($generated@@48 0))) (not true)) (=> (and (= $generated@@133 $generated@@134) (= (ControlFlow 0 33) 31)) $generated@@184))))
(let (($generated@@186  (=> (and (and (= ($generated@@104 $generated@@134 ($generated@@48 3)) ($generated@@48 0)) (= $generated@@135 (+ $generated@@134 1))) (and (= $generated@@133 $generated@@135) (= (ControlFlow 0 32) 31))) $generated@@184)))
(let (($generated@@187  (=> (or (not (= ($generated@@104 $generated@@134 ($generated@@48 2)) ($generated@@48 0))) (not true)) (and (=> (= (ControlFlow 0 34) (- 0 35)) (or (not (= ($generated@@48 3) 0)) (not true))) (=> (or (not (= ($generated@@48 3) 0)) (not true)) (and (=> (= (ControlFlow 0 34) 32) $generated@@186) (=> (= (ControlFlow 0 34) 33) $generated@@185)))))))
(let (($generated@@188  (=> (= ($generated@@104 $generated@@134 ($generated@@48 2)) ($generated@@48 0)) (=> (and (= $generated@@131 $generated@@134) (= (ControlFlow 0 30) 28)) $generated@@183))))
(let (($generated@@189  (=> (or (not (= $generated@@118 ($generated@@48 0))) (not true)) (and (=> (= (ControlFlow 0 36) (- 0 42)) ($generated@@56 $generated@@4 ($generated@@8 (- $generated@@118 1)) $generated@@57)) (=> ($generated@@56 $generated@@4 ($generated@@8 (- $generated@@118 1)) $generated@@57) (=> (= $generated@@136 (- $generated@@118 1)) (and (=> (= (ControlFlow 0 36) (- 0 41)) ($generated@@56 $generated@@4 ($generated@@8 (+ $generated@@112 1)) $generated@@57)) (=> ($generated@@56 $generated@@4 ($generated@@8 (+ $generated@@112 1)) $generated@@57) (=> (= $generated@@137 (+ $generated@@112 1)) (and (=> (= (ControlFlow 0 36) (- 0 40)) (or (<= 0 $generated@@118) (= $generated@@136 $generated@@118))) (=> (or (<= 0 $generated@@118) (= $generated@@136 $generated@@118)) (and (=> (= (ControlFlow 0 36) (- 0 39)) (or (or (<= 0 $generated@@112) (< $generated@@136 $generated@@118)) (= $generated@@137 $generated@@112))) (=> (or (or (<= 0 $generated@@112) (< $generated@@136 $generated@@118)) (= $generated@@137 $generated@@112)) (and (=> (= (ControlFlow 0 36) (- 0 38)) (or (< $generated@@136 $generated@@118) (and (= $generated@@136 $generated@@118) (< $generated@@137 $generated@@112)))) (=> (or (< $generated@@136 $generated@@118) (and (= $generated@@136 $generated@@118) (< $generated@@137 $generated@@112))) (=> (<= ($generated@@48 0) $generated@@138) (=> (and (and (and (and ($generated@@139 $generated@@125) ($generated@@140 $generated@@125)) (<= ($generated@@48 0) $generated@@141)) (and (forall (($generated@@190 T@U) ) (!  (=> (and (or (not (= $generated@@190 $generated@@126)) (not true)) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@19 $generated@@20 $generated@@21 ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@127 $generated@@190) $generated)))) (= ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@125 $generated@@190) ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@127 $generated@@190)))
 :pattern ( ($generated@@19 $generated@@22 ($generated@@23 $generated@@20 $generated@@21) $generated@@125 $generated@@190))
)) ($generated@@18 $generated@@127 $generated@@125))) (and (and (= $generated@@122 ($generated@@48 10)) (= $generated@@142 (+ $generated@@115 1))) (and (= $generated@@123 ($generated@@48 8)) (= $generated@@134 (+ $generated@@142 1))))) (and (=> (= (ControlFlow 0 36) (- 0 37)) (or (not (= ($generated@@48 2) 0)) (not true))) (=> (or (not (= ($generated@@48 2) 0)) (not true)) (and (=> (= (ControlFlow 0 36) 30) $generated@@188) (=> (= (ControlFlow 0 36) 34) $generated@@187)))))))))))))))))))))
(let (($generated@@191  (=> (and (= $generated@@128 ($generated@@71 $generated@@126 $generated@@127 $generated false)) (= $generated@@115 ($generated@@48 10))) (and (=> (= (ControlFlow 0 56) 55) $generated@@157) (=> (= (ControlFlow 0 56) 36) $generated@@189)))))
(let (($generated@@192  (=> (and (and (and ($generated@@139 $generated@@127) ($generated@@140 $generated@@127)) (<= ($generated@@48 0) $generated@@118)) (and (and (<= ($generated@@48 0) $generated@@112) (<= ($generated@@48 0) $generated@@143)) (and (= 0 $generated@@144) (= (ControlFlow 0 57) 56)))) $generated@@191)))
$generated@@192)))))))))))))))))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
