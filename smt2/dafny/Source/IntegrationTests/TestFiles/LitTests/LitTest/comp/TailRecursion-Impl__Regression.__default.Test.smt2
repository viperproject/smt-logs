(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun Tagclass.Regression.C () T@U)
(declare-fun Tagclass.Regression.C? () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun |tytagFamily$_#Func0| () T@U)
(declare-fun |tytagFamily$_#PartialFunc0| () T@U)
(declare-fun |tytagFamily$_#TotalFunc0| () T@U)
(declare-fun tytagFamily$C () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun HandleTypeType () T@T)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun refType () T@T)
(declare-fun null () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun Tag (T@U) T@U)
(declare-fun |Regression.C.F#Handle| (T@U T@U) T@U)
(declare-fun |Regression.C.F#requires| (T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun Tclass.Regression.C (T@U) T@U)
(declare-fun Tclass.Regression.C? (T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun Regression.C.F (T@U T@U) Int)
(declare-fun |Regression.C.F#canCall| (T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Regression.C.data (T@U T@U) Int)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun Regression.C.Rec (T@U T@U T@U Int T@U) Int)
(declare-fun $LS (T@U) T@U)
(declare-fun |Regression.C.Rec#canCall| (T@U T@U Int T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Regression.C.next (T@U T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun $OneHeap () T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun TSet (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun AtLayer (T@T T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun |lambda#1| (T@U) T@U)
(declare-fun |lambda#2| (Bool) T@U)
(declare-fun |lambda#3| (Bool) T@U)
(declare-fun |lambda#4| (T@U) T@U)
(declare-fun |lambda#5| (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Tclass.Regression.C_0 (T@U) T@U)
(declare-fun Tclass.Regression.C?_0 (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TReal TagInt TagReal TagSet alloc Tagclass._System.nat Tagclass._System.object? Tagclass._System.object Tagclass._System.___hFunc0 Tagclass._System.___hPartialFunc0 Tagclass._System.___hTotalFunc0 Tagclass.Regression.C Tagclass.Regression.C? tytagFamily$nat tytagFamily$object |tytagFamily$_#Func0| |tytagFamily$_#PartialFunc0| |tytagFamily$_#TotalFunc0| tytagFamily$C)
)
(assert  (and (and (and (and (and (and (and (and (= (Ctor HandleTypeType) 3) (= (Ctor refType) 4)) (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
))) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((f T@U) (t0@@0 T@U) (h T@U) ) (!  (=> ($IsGoodHeap h) (= ($IsAlloc HandleTypeType f (Tclass._System.___hFunc0 t0@@0) h)  (=> (Requires0 t0@@0 h f) (forall ((r T@U) ) (!  (=> (and (or (not (= r null)) (not true)) (|Set#IsMember| (Reads0 t0@@0 h f) ($Box refType r))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h r) alloc))))
 :pattern ( (|Set#IsMember| (Reads0 t0@@0 h f) ($Box refType r)))
)))))
 :pattern ( ($IsAlloc HandleTypeType f (Tclass._System.___hFunc0 t0@@0) h))
)))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (forall ((Regression.C$U T@U) ($self T@U) ($heap T@U) ) (! (= (Requires0 TInt $heap (|Regression.C.F#Handle| Regression.C$U $self)) (|Regression.C.F#requires| Regression.C$U $self))
 :pattern ( (Requires0 TInt $heap (|Regression.C.F#Handle| Regression.C$U $self)))
)))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert (forall ((|#$R| T@U) (|f#0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hPartialFunc0 |#$R|) $h@@0) ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hFunc0 |#$R|) $h@@0))
 :pattern ( ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hPartialFunc0 |#$R|) $h@@0))
)))
(assert (forall ((|#$R@@0| T@U) (|f#0@@0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hTotalFunc0 |#$R@@0|) $h@@1) ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@0|) $h@@1))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hTotalFunc0 |#$R@@0|) $h@@1))
)))
(assert (forall ((Regression.C$U@@0 T@U) (|c#0| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass.Regression.C Regression.C$U@@0) $h@@2) ($IsAlloc refType |c#0| (Tclass.Regression.C? Regression.C$U@@0) $h@@2))
 :pattern ( ($IsAlloc refType |c#0| (Tclass.Regression.C Regression.C$U@@0) $h@@2))
 :pattern ( ($IsAlloc refType |c#0| (Tclass.Regression.C? Regression.C$U@@0) $h@@2))
)))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._System.object $h@@3) ($IsAlloc refType |c#0@@0| Tclass._System.object? $h@@3))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._System.object $h@@3))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._System.object? $h@@3))
)))
(assert (forall ((Regression.C$U@@1 T@U) ($o T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType $o (Tclass.Regression.C? Regression.C$U@@1) $h@@4)  (or (= $o null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o) alloc)))))
 :pattern ( ($IsAlloc refType $o (Tclass.Regression.C? Regression.C$U@@1) $h@@4))
)))
(assert (forall ((t0@@1 T@U) (heap T@U) (h@@0 T@U) (r@@0 T@U) (rd T@U) ) (! (= (Apply0 t0@@1 heap (Handle0 h@@0 r@@0 rd)) (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType h@@0 heap))
 :pattern ( (Apply0 t0@@1 heap (Handle0 h@@0 r@@0 rd)))
)))
(assert (forall (($o@@0 T@U) ($h@@5 T@U) ) (! (= ($IsAlloc refType $o@@0 Tclass._System.object? $h@@5)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 Tclass._System.object? $h@@5))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((Regression.C$U@@2 T@U) (this T@U) ) (!  (=> (or (|Regression.C.F#canCall| Regression.C$U@@2 this) (and (< 1 $FunctionContextHeight) (and (or (not (= this null)) (not true)) ($Is refType this (Tclass.Regression.C Regression.C$U@@2))))) (= (Regression.C.F Regression.C$U@@2 this) (Regression.C.data Regression.C$U@@2 this)))
 :pattern ( (Regression.C.F Regression.C$U@@2 this))
))))
(assert (forall ((h@@1 T@U) (k T@U) ) (!  (=> ($HeapSucc h@@1 k) (forall ((o@@0 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@1 o@@0) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@0) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@0) alloc))
)))
 :pattern ( ($HeapSucc h@@1 k))
)))
(assert (forall ((Regression.C$U@@3 T@U) ($self@@0 T@U) ($heap@@0 T@U) ) (! (= (Apply0 TInt $heap@@0 (|Regression.C.F#Handle| Regression.C$U@@3 $self@@0)) ($Box intType (int_2_U (Regression.C.F Regression.C$U@@3 $self@@0))))
 :pattern ( (Apply0 TInt $heap@@0 (|Regression.C.F#Handle| Regression.C$U@@3 $self@@0)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((Regression.C$U@@4 T@U) ($ly T@U) ($Heap T@U) (this@@0 T@U) (|n#0| Int) (|f#0@@1| T@U) ) (!  (=> (or (|Regression.C.Rec#canCall| Regression.C$U@@4 this@@0 |n#0| |f#0@@1|) (and (< 2 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap) (and (or (not (= this@@0 null)) (not true)) (and ($Is refType this@@0 (Tclass.Regression.C Regression.C$U@@4)) ($IsAlloc refType this@@0 (Tclass.Regression.C Regression.C$U@@4) $Heap)))) (<= (LitInt 0) |n#0|)) ($Is HandleTypeType |f#0@@1| (Tclass._System.___hTotalFunc0 TInt))))) (and (=> (not (or (= |n#0| (LitInt 0)) (= (Regression.C.next Regression.C$U@@4 this@@0) null))) (and (=> (= (Regression.C.data Regression.C$U@@4 this@@0) (LitInt 17)) (|Regression.C.Rec#canCall| Regression.C$U@@4 (Regression.C.next Regression.C$U@@4 this@@0) (- |n#0| 1) (|Regression.C.F#Handle| Regression.C$U@@4 this@@0))) (=> (or (not (= (Regression.C.data Regression.C$U@@4 this@@0) (LitInt 17))) (not true)) (|Regression.C.Rec#canCall| Regression.C$U@@4 (Regression.C.next Regression.C$U@@4 this@@0) (- |n#0| 1) |f#0@@1|)))) (= (Regression.C.Rec Regression.C$U@@4 ($LS $ly) this@@0 |n#0| |f#0@@1|) (ite  (or (= |n#0| (LitInt 0)) (= (Regression.C.next Regression.C$U@@4 this@@0) null)) (U_2_int ($Unbox intType (Apply0 TInt $Heap |f#0@@1|))) (ite (= (Regression.C.data Regression.C$U@@4 this@@0) (LitInt 17)) (Regression.C.Rec Regression.C$U@@4 $ly (Regression.C.next Regression.C$U@@4 this@@0) (- |n#0| 1) (|Regression.C.F#Handle| Regression.C$U@@4 this@@0)) (Regression.C.Rec Regression.C$U@@4 $ly (Regression.C.next Regression.C$U@@4 this@@0) (- |n#0| 1) |f#0@@1|))))))
 :pattern ( (Regression.C.Rec Regression.C$U@@4 ($LS $ly) this@@0 |n#0| |f#0@@1|) ($IsGoodHeap $Heap))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert  (=> (< 0 $FunctionContextHeight) (forall ((Regression.C$U@@5 T@U) ($o@@1 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (= (dtype $o@@1) (Tclass.Regression.C? Regression.C$U@@5))) ($Is intType (int_2_U (Regression.C.data Regression.C$U@@5 $o@@1)) TInt))
 :pattern ( (Regression.C.data Regression.C$U@@5 $o@@1))
))))
(assert (= (Ctor SetType) 8))
(assert (forall ((t0@@2 T@U) (heap@@0 T@U) (h@@2 T@U) (r@@1 T@U) (rd@@0 T@U) (bx T@U) ) (! (= (|Set#IsMember| (Reads0 t0@@2 heap@@0 (Handle0 h@@2 r@@1 rd@@0)) bx) (|Set#IsMember| (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) SetType rd@@0 heap@@0) bx))
 :pattern ( (|Set#IsMember| (Reads0 t0@@2 heap@@0 (Handle0 h@@2 r@@1 rd@@0)) bx))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((t0@@3 T@U) (heap@@1 T@U) (f@@0 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@1) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc0 t0@@3))) (|Set#Equal| (Reads0 t0@@3 $OneHeap f@@0) |Set#Empty|)) (= (Requires0 t0@@3 $OneHeap f@@0) (Requires0 t0@@3 heap@@1 f@@0)))
 :pattern ( (Requires0 t0@@3 $OneHeap f@@0) ($IsGoodHeap heap@@1))
 :pattern ( (Requires0 t0@@3 heap@@1 f@@0))
)))
(assert (forall ((v T@U) (t0@@4 T@U) ) (! (= ($Is SetType v (TSet t0@@4)) (forall ((bx@@0 T@U) ) (!  (=> (|Set#IsMember| v bx@@0) ($IsBox bx@@0 t0@@4))
 :pattern ( (|Set#IsMember| v bx@@0))
)))
 :pattern ( ($Is SetType v (TSet t0@@4)))
)))
(assert (forall (($bx T@U) (Regression.C$U@@6 T@U) ($self@@1 T@U) ($heap@@1 T@U) ) (! (= (|Set#IsMember| (Reads0 TInt $heap@@1 (|Regression.C.F#Handle| Regression.C$U@@6 $self@@1)) $bx) false)
 :pattern ( (|Set#IsMember| (Reads0 TInt $heap@@1 (|Regression.C.F#Handle| Regression.C$U@@6 $self@@1)) $bx))
)))
(assert  (=> (< 0 $FunctionContextHeight) (forall ((Regression.C$U@@7 T@U) ($o@@2 T@U) ) (!  (=> (and (or (not (= $o@@2 null)) (not true)) (= (dtype $o@@2) (Tclass.Regression.C? Regression.C$U@@7))) ($Is refType (Regression.C.next Regression.C$U@@7 $o@@2) (Tclass.Regression.C? Regression.C$U@@7)))
 :pattern ( (Regression.C.next Regression.C$U@@7 $o@@2))
))))
(assert  (=> (< 0 $FunctionContextHeight) (forall ((Regression.C$U@@8 T@U) ($h@@6 T@U) ($o@@3 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@6) (and (or (not (= $o@@3 null)) (not true)) (= (dtype $o@@3) (Tclass.Regression.C? Regression.C$U@@8)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@3) alloc)))) ($IsAlloc intType (int_2_U (Regression.C.data Regression.C$U@@8 $o@@3)) TInt $h@@6))
 :pattern ( (Regression.C.data Regression.C$U@@8 $o@@3) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@3) alloc)))
))))
(assert (= (Ctor LayerTypeType) 9))
(assert (forall ((f@@1 T@U) (ly T@U) (A T@T) ) (! (= (AtLayer A f@@1 ly) (MapType0Select LayerTypeType A f@@1 ly))
 :pattern ( (AtLayer A f@@1 ly))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@0|)))
 :pattern ( ($Is intType |x#0@@0| Tclass._System.nat))
)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((Regression.C$U@@9 T@U) (|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| (Tclass.Regression.C Regression.C$U@@9))  (and ($Is refType |c#0@@1| (Tclass.Regression.C? Regression.C$U@@9)) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| (Tclass.Regression.C Regression.C$U@@9)))
 :pattern ( ($Is refType |c#0@@1| (Tclass.Regression.C? Regression.C$U@@9)))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h@@3 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@3) ($IsAlloc T@@1 v@@0 t h@@3))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@3))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((Regression.C$U@@10 T@U) (this@@1 T@U) ) (!  (=> (or (|Regression.C.F#canCall| Regression.C$U@@10 (Lit refType this@@1)) (and (< 1 $FunctionContextHeight) (and (or (not (= this@@1 null)) (not true)) ($Is refType this@@1 (Tclass.Regression.C Regression.C$U@@10))))) (= (Regression.C.F Regression.C$U@@10 (Lit refType this@@1)) (Regression.C.data Regression.C$U@@10 (Lit refType this@@1))))
 :weight 3
 :pattern ( (Regression.C.F Regression.C$U@@10 (Lit refType this@@1)))
))))
(assert (forall ((h@@4 T@U) (k@@0 T@U) (bx@@1 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@4 k@@0) (=> ($IsAllocBox bx@@1 t@@0 h@@4) ($IsAllocBox bx@@1 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@4 k@@0) ($IsAllocBox bx@@1 t@@0 h@@4))
)))
(assert (forall ((h@@5 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@5 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@1 h@@5) ($IsAlloc T@@2 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@5 k@@1) ($IsAlloc T@@2 v@@1 t@@1 h@@5))
)))
(assert (forall ((|#$R@@1| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc0 |#$R@@1|)) Tagclass._System.___hFunc0) (= (TagFamily (Tclass._System.___hFunc0 |#$R@@1|)) |tytagFamily$_#Func0|))
 :pattern ( (Tclass._System.___hFunc0 |#$R@@1|))
)))
(assert (forall ((|#$R@@2| T@U) ) (!  (and (= (Tag (Tclass._System.___hPartialFunc0 |#$R@@2|)) Tagclass._System.___hPartialFunc0) (= (TagFamily (Tclass._System.___hPartialFunc0 |#$R@@2|)) |tytagFamily$_#PartialFunc0|))
 :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@2|))
)))
(assert (forall ((|#$R@@3| T@U) ) (!  (and (= (Tag (Tclass._System.___hTotalFunc0 |#$R@@3|)) Tagclass._System.___hTotalFunc0) (= (TagFamily (Tclass._System.___hTotalFunc0 |#$R@@3|)) |tytagFamily$_#TotalFunc0|))
 :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@3|))
)))
(assert (forall ((Regression.C$U@@11 T@U) ) (!  (and (= (Tag (Tclass.Regression.C Regression.C$U@@11)) Tagclass.Regression.C) (= (TagFamily (Tclass.Regression.C Regression.C$U@@11)) tytagFamily$C))
 :pattern ( (Tclass.Regression.C Regression.C$U@@11))
)))
(assert (forall ((Regression.C$U@@12 T@U) ) (!  (and (= (Tag (Tclass.Regression.C? Regression.C$U@@12)) Tagclass.Regression.C?) (= (TagFamily (Tclass.Regression.C? Regression.C$U@@12)) tytagFamily$C))
 :pattern ( (Tclass.Regression.C? Regression.C$U@@12))
)))
(assert  (=> (< 0 $FunctionContextHeight) (forall ((Regression.C$U@@13 T@U) ($h@@7 T@U) ($o@@4 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@7) (and (or (not (= $o@@4 null)) (not true)) (= (dtype $o@@4) (Tclass.Regression.C? Regression.C$U@@13)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@4) alloc)))) ($IsAlloc refType (Regression.C.next Regression.C$U@@13 $o@@4) (Tclass.Regression.C? Regression.C$U@@13) $h@@7))
 :pattern ( (Regression.C.next Regression.C$U@@13 $o@@4) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@4) alloc)))
))))
(assert (forall ((s T@U) (bx@@2 T@U) ) (! (= (|Set#IsMember| (SetRef_to_SetBox s) bx@@2) (U_2_bool (MapType0Select refType boolType s ($Unbox refType bx@@2))))
 :pattern ( (|Set#IsMember| (SetRef_to_SetBox s) bx@@2))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx@@3)) bx@@3) ($Is intType ($Unbox intType bx@@3) Tclass._System.nat)))
 :pattern ( ($IsBox bx@@3 Tclass._System.nat))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@4)) bx@@4) ($Is refType ($Unbox refType bx@@4) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@4 Tclass._System.object?))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@5)) bx@@5) ($Is refType ($Unbox refType bx@@5) Tclass._System.object)))
 :pattern ( ($IsBox bx@@5 Tclass._System.object))
)))
(assert (forall ((Regression.C$U@@14 T@U) ($o@@5 T@U) ) (! (= ($Is refType $o@@5 (Tclass.Regression.C? Regression.C$U@@14))  (or (= $o@@5 null) (= (dtype $o@@5) (Tclass.Regression.C? Regression.C$U@@14))))
 :pattern ( ($Is refType $o@@5 (Tclass.Regression.C? Regression.C$U@@14)))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass._System.object)  (and ($Is refType |c#0@@2| Tclass._System.object?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@2| Tclass._System.object?))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((Regression.C$U@@15 T@U) ($ly@@0 T@U) ($Heap@@0 T@U) (this@@2 T@U) (|n#0@@0| Int) (|f#0@@2| T@U) ) (!  (=> (or (|Regression.C.Rec#canCall| Regression.C$U@@15 (Lit refType this@@2) (LitInt |n#0@@0|) (Lit HandleTypeType |f#0@@2|)) (and (< 2 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap@@0) (and (or (not (= this@@2 null)) (not true)) (and ($Is refType this@@2 (Tclass.Regression.C Regression.C$U@@15)) ($IsAlloc refType this@@2 (Tclass.Regression.C Regression.C$U@@15) $Heap@@0)))) (<= (LitInt 0) |n#0@@0|)) ($Is HandleTypeType |f#0@@2| (Tclass._System.___hTotalFunc0 TInt))))) (and (=> (not (or (= (LitInt |n#0@@0|) (LitInt 0)) (= (Regression.C.next Regression.C$U@@15 (Lit refType this@@2)) null))) (and (=> (= (Regression.C.data Regression.C$U@@15 (Lit refType this@@2)) (LitInt 17)) (|Regression.C.Rec#canCall| Regression.C$U@@15 (Regression.C.next Regression.C$U@@15 (Lit refType this@@2)) (LitInt (- |n#0@@0| 1)) (|Regression.C.F#Handle| Regression.C$U@@15 (Lit refType this@@2)))) (=> (or (not (= (Regression.C.data Regression.C$U@@15 (Lit refType this@@2)) (LitInt 17))) (not true)) (|Regression.C.Rec#canCall| Regression.C$U@@15 (Regression.C.next Regression.C$U@@15 (Lit refType this@@2)) (LitInt (- |n#0@@0| 1)) (Lit HandleTypeType |f#0@@2|))))) (= (Regression.C.Rec Regression.C$U@@15 ($LS $ly@@0) (Lit refType this@@2) (LitInt |n#0@@0|) (Lit HandleTypeType |f#0@@2|)) (ite  (or (= (LitInt |n#0@@0|) (LitInt 0)) (= (Regression.C.next Regression.C$U@@15 (Lit refType this@@2)) null)) (U_2_int ($Unbox intType (Apply0 TInt $Heap@@0 (Lit HandleTypeType |f#0@@2|)))) (ite (= (Regression.C.data Regression.C$U@@15 (Lit refType this@@2)) (LitInt 17)) (Regression.C.Rec Regression.C$U@@15 ($LS $ly@@0) (Regression.C.next Regression.C$U@@15 (Lit refType this@@2)) (LitInt (- |n#0@@0| 1)) (|Regression.C.F#Handle| Regression.C$U@@15 (Lit refType this@@2))) (Regression.C.Rec Regression.C$U@@15 ($LS $ly@@0) (Regression.C.next Regression.C$U@@15 (Lit refType this@@2)) (LitInt (- |n#0@@0| 1)) (Lit HandleTypeType |f#0@@2|)))))))
 :weight 3
 :pattern ( (Regression.C.Rec Regression.C$U@@15 ($LS $ly@@0) (Lit refType this@@2) (LitInt |n#0@@0|) (Lit HandleTypeType |f#0@@2|)) ($IsGoodHeap $Heap@@0))
))))
(assert (forall ((|l#0| T@U) (|$l#2#heap#0| T@U) ) (! (= (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType (|lambda#1| |l#0|) |$l#2#heap#0|) |l#0|)
 :pattern ( (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) BoxType (|lambda#1| |l#0|) |$l#2#heap#0|))
)))
(assert (forall ((|l#0@@0| Bool) (|$l#2#heap#0@@0| T@U) ) (! (= (U_2_bool (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) boolType (|lambda#2| |l#0@@0|) |$l#2#heap#0@@0|)) |l#0@@0|)
 :pattern ( (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) boolType (|lambda#2| |l#0@@0|) |$l#2#heap#0@@0|))
)))
(assert (forall ((|l#0@@1| Bool) (|$l#2#o#0| T@U) ) (! (= (U_2_bool (MapType0Select refType boolType (|lambda#3| |l#0@@1|) |$l#2#o#0|)) |l#0@@1|)
 :pattern ( (MapType0Select refType boolType (|lambda#3| |l#0@@1|) |$l#2#o#0|))
)))
(assert (forall ((|l#0@@2| T@U) (|$l#2#heap#0@@1| T@U) ) (! (= (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) SetType (|lambda#4| |l#0@@2|) |$l#2#heap#0@@1|) |l#0@@2|)
 :pattern ( (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) SetType (|lambda#4| |l#0@@2|) |$l#2#heap#0@@1|))
)))
(assert (forall ((|l#0@@3| T@U) (|$l#2#ly#0| T@U) ) (! (= (MapType0Select LayerTypeType HandleTypeType (|lambda#5| |l#0@@3|) |$l#2#ly#0|) |l#0@@3|)
 :pattern ( (MapType0Select LayerTypeType HandleTypeType (|lambda#5| |l#0@@3|) |$l#2#ly#0|))
)))
(assert (forall ((t0@@5 T@U) (heap@@2 T@U) (f@@2 T@U) ) (!  (=> (and ($IsGoodHeap heap@@2) ($Is HandleTypeType f@@2 (Tclass._System.___hFunc0 t0@@5))) (= (|Set#Equal| (Reads0 t0@@5 $OneHeap f@@2) |Set#Empty|) (|Set#Equal| (Reads0 t0@@5 heap@@2 f@@2) |Set#Empty|)))
 :pattern ( (Reads0 t0@@5 $OneHeap f@@2) ($IsGoodHeap heap@@2))
 :pattern ( (Reads0 t0@@5 heap@@2 f@@2))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Set#Equal| a b) (= a b))
 :pattern ( (|Set#Equal| a b))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (or (not (= a@@0 c)) (not true)) (=> (and ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c)) ($HeapSucc a@@0 c)))
 :pattern ( ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c))
)))
(assert (forall ((t0@@6 T@U) (h0 T@U) (h1 T@U) (f@@3 T@U) ) (!  (=> (and (and (and ($HeapSucc h0 h1) (and ($IsGoodHeap h0) ($IsGoodHeap h1))) ($Is HandleTypeType f@@3 (Tclass._System.___hFunc0 t0@@6))) (forall ((o@@1 T@U) (fld T@U) )  (=> (and (or (not (= o@@1 null)) (not true)) (|Set#IsMember| (Reads0 t0@@6 h0 f@@3) ($Box refType o@@1))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0 o@@1) fld) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1 o@@1) fld))))) (= (Requires0 t0@@6 h0 f@@3) (Requires0 t0@@6 h1 f@@3)))
 :pattern ( ($HeapSucc h0 h1) (Requires0 t0@@6 h1 f@@3))
)))
(assert (forall ((t0@@7 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@4 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc0 t0@@7))) (forall ((o@@2 T@U) (fld@@0 T@U) )  (=> (and (or (not (= o@@2 null)) (not true)) (|Set#IsMember| (Reads0 t0@@7 h1@@0 f@@4) ($Box refType o@@2))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@0 o@@2) fld@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@0 o@@2) fld@@0))))) (= (Requires0 t0@@7 h0@@0 f@@4) (Requires0 t0@@7 h1@@0 f@@4)))
 :pattern ( ($HeapSucc h0@@0 h1@@0) (Requires0 t0@@7 h1@@0 f@@4))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 TInt) (and (= ($Box intType ($Unbox intType bx@@6)) bx@@6) ($Is intType ($Unbox intType bx@@6) TInt)))
 :pattern ( ($IsBox bx@@6 TInt))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 TReal) (and (= ($Box realType ($Unbox realType bx@@7)) bx@@7) ($Is realType ($Unbox realType bx@@7) TReal)))
 :pattern ( ($IsBox bx@@7 TReal))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@2) ($Is T@@3 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@2))
)))
(assert (forall ((v@@3 T@U) (t0@@8 T@U) (h@@6 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@8) h@@6) (forall ((bx@@8 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@8) ($IsAllocBox bx@@8 t0@@8 h@@6))
 :pattern ( (|Set#IsMember| v@@3 bx@@8))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@8) h@@6))
)))
(assert (forall (($o@@6 T@U) ) (! ($Is refType $o@@6 Tclass._System.object?)
 :pattern ( ($Is refType $o@@6 Tclass._System.object?))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((|#$R@@4| T@U) ) (! (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@4|)) |#$R@@4|)
 :pattern ( (Tclass._System.___hFunc0 |#$R@@4|))
)))
(assert (forall ((|#$R@@5| T@U) ) (! (= (Tclass._System.___hPartialFunc0_0 (Tclass._System.___hPartialFunc0 |#$R@@5|)) |#$R@@5|)
 :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@5|))
)))
(assert (forall ((|#$R@@6| T@U) ) (! (= (Tclass._System.___hTotalFunc0_0 (Tclass._System.___hTotalFunc0 |#$R@@6|)) |#$R@@6|)
 :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@6|))
)))
(assert (forall ((Regression.C$U@@16 T@U) ) (! (= (Tclass.Regression.C_0 (Tclass.Regression.C Regression.C$U@@16)) Regression.C$U@@16)
 :pattern ( (Tclass.Regression.C Regression.C$U@@16))
)))
(assert (forall ((Regression.C$U@@17 T@U) ) (! (= (Tclass.Regression.C?_0 (Tclass.Regression.C? Regression.C$U@@17)) Regression.C$U@@17)
 :pattern ( (Tclass.Regression.C? Regression.C$U@@17))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (forall ((t0@@9 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@5 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) ($Is HandleTypeType f@@5 (Tclass._System.___hFunc0 t0@@9))) (forall ((o@@3 T@U) (fld@@1 T@U) )  (=> (and (or (not (= o@@3 null)) (not true)) (|Set#IsMember| (Reads0 t0@@9 h0@@1 f@@5) ($Box refType o@@3))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@1 o@@3) fld@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@1 o@@3) fld@@1))))) (= (Reads0 t0@@9 h0@@1 f@@5) (Reads0 t0@@9 h1@@1 f@@5)))
 :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads0 t0@@9 h1@@1 f@@5))
)))
(assert (forall ((t0@@10 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@6 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) ($Is HandleTypeType f@@6 (Tclass._System.___hFunc0 t0@@10))) (forall ((o@@4 T@U) (fld@@2 T@U) )  (=> (and (or (not (= o@@4 null)) (not true)) (|Set#IsMember| (Reads0 t0@@10 h1@@2 f@@6) ($Box refType o@@4))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@2 o@@4) fld@@2) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@2 o@@4) fld@@2))))) (= (Reads0 t0@@10 h0@@2 f@@6) (Reads0 t0@@10 h1@@2 f@@6)))
 :pattern ( ($HeapSucc h0@@2 h1@@2) (Reads0 t0@@10 h1@@2 f@@6))
)))
(assert (forall ((t0@@11 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@7 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) ($Is HandleTypeType f@@7 (Tclass._System.___hFunc0 t0@@11))) (forall ((o@@5 T@U) (fld@@3 T@U) )  (=> (and (or (not (= o@@5 null)) (not true)) (|Set#IsMember| (Reads0 t0@@11 h0@@3 f@@7) ($Box refType o@@5))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@3 o@@5) fld@@3) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@3 o@@5) fld@@3))))) (= (Apply0 t0@@11 h0@@3 f@@7) (Apply0 t0@@11 h1@@3 f@@7)))
 :pattern ( ($HeapSucc h0@@3 h1@@3) (Apply0 t0@@11 h1@@3 f@@7))
)))
(assert (forall ((t0@@12 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@8 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) ($Is HandleTypeType f@@8 (Tclass._System.___hFunc0 t0@@12))) (forall ((o@@6 T@U) (fld@@4 T@U) )  (=> (and (or (not (= o@@6 null)) (not true)) (|Set#IsMember| (Reads0 t0@@12 h1@@4 f@@8) ($Box refType o@@6))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@4 o@@6) fld@@4) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@4 o@@6) fld@@4))))) (= (Apply0 t0@@12 h0@@4 f@@8) (Apply0 t0@@12 h1@@4 f@@8)))
 :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply0 t0@@12 h1@@4 f@@8))
)))
(assert (forall ((f@@9 T@U) (ly@@0 T@U) (A@@0 T@T) ) (! (= (AtLayer A@@0 f@@9 ($LS ly@@0)) (AtLayer A@@0 f@@9 ly@@0))
 :pattern ( (AtLayer A@@0 f@@9 ($LS ly@@0)))
)))
(assert  (and (forall ((t0@@13 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@13 t1@@0 t2 (MapType1Store t0@@13 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0@@4| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@7 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@4| |l#1| |l#2| |l#3|) $o@@7 $f))  (=> (and (or (not (= $o@@7 |l#0@@4|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@7) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@4| |l#1| |l#2| |l#3|) $o@@7 $f))
)))
(assert (forall ((|#$R@@7| T@U) (|f#0@@3| T@U) ) (! (= ($Is HandleTypeType |f#0@@3| (Tclass._System.___hTotalFunc0 |#$R@@7|))  (and ($Is HandleTypeType |f#0@@3| (Tclass._System.___hPartialFunc0 |#$R@@7|)) (Requires0 |#$R@@7| $OneHeap |f#0@@3|)))
 :pattern ( ($Is HandleTypeType |f#0@@3| (Tclass._System.___hTotalFunc0 |#$R@@7|)))
)))
(assert (forall ((f@@10 T@U) (t0@@14 T@U) ) (! (= ($Is HandleTypeType f@@10 (Tclass._System.___hFunc0 t0@@14)) (forall ((h@@7 T@U) ) (!  (=> (and ($IsGoodHeap h@@7) (Requires0 t0@@14 h@@7 f@@10)) ($IsBox (Apply0 t0@@14 h@@7 f@@10) t0@@14))
 :pattern ( (Apply0 t0@@14 h@@7 f@@10))
)))
 :pattern ( ($Is HandleTypeType f@@10 (Tclass._System.___hFunc0 t0@@14)))
)))
(assert (forall ((bx@@9 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@9 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@9)) bx@@9) ($Is SetType ($Unbox SetType bx@@9) (TSet t@@5))))
 :pattern ( ($IsBox bx@@9 (TSet t@@5)))
)))
(assert (forall ((|#$R@@8| T@U) (bx@@10 T@U) ) (!  (=> ($IsBox bx@@10 (Tclass._System.___hFunc0 |#$R@@8|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@10)) bx@@10) ($Is HandleTypeType ($Unbox HandleTypeType bx@@10) (Tclass._System.___hFunc0 |#$R@@8|))))
 :pattern ( ($IsBox bx@@10 (Tclass._System.___hFunc0 |#$R@@8|)))
)))
(assert (forall ((|#$R@@9| T@U) (bx@@11 T@U) ) (!  (=> ($IsBox bx@@11 (Tclass._System.___hPartialFunc0 |#$R@@9|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@11)) bx@@11) ($Is HandleTypeType ($Unbox HandleTypeType bx@@11) (Tclass._System.___hPartialFunc0 |#$R@@9|))))
 :pattern ( ($IsBox bx@@11 (Tclass._System.___hPartialFunc0 |#$R@@9|)))
)))
(assert (forall ((|#$R@@10| T@U) (bx@@12 T@U) ) (!  (=> ($IsBox bx@@12 (Tclass._System.___hTotalFunc0 |#$R@@10|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@12)) bx@@12) ($Is HandleTypeType ($Unbox HandleTypeType bx@@12) (Tclass._System.___hTotalFunc0 |#$R@@10|))))
 :pattern ( ($IsBox bx@@12 (Tclass._System.___hTotalFunc0 |#$R@@10|)))
)))
(assert (forall ((Regression.C$U@@18 T@U) (bx@@13 T@U) ) (!  (=> ($IsBox bx@@13 (Tclass.Regression.C Regression.C$U@@18)) (and (= ($Box refType ($Unbox refType bx@@13)) bx@@13) ($Is refType ($Unbox refType bx@@13) (Tclass.Regression.C Regression.C$U@@18))))
 :pattern ( ($IsBox bx@@13 (Tclass.Regression.C Regression.C$U@@18)))
)))
(assert (forall ((Regression.C$U@@19 T@U) (bx@@14 T@U) ) (!  (=> ($IsBox bx@@14 (Tclass.Regression.C? Regression.C$U@@19)) (and (= ($Box refType ($Unbox refType bx@@14)) bx@@14) ($Is refType ($Unbox refType bx@@14) (Tclass.Regression.C? Regression.C$U@@19))))
 :pattern ( ($IsBox bx@@14 (Tclass.Regression.C? Regression.C$U@@19)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((Regression.C$U@@20 T@U) ($ly@@1 T@U) ($Heap@@1 T@U) (this@@3 T@U) (|n#0@@1| Int) (|f#0@@4| T@U) ) (!  (=> (or (|Regression.C.Rec#canCall| Regression.C$U@@20 this@@3 (LitInt |n#0@@1|) |f#0@@4|) (and (< 2 $FunctionContextHeight) (and (and (and ($IsGoodHeap $Heap@@1) (and (or (not (= this@@3 null)) (not true)) (and ($Is refType this@@3 (Tclass.Regression.C Regression.C$U@@20)) ($IsAlloc refType this@@3 (Tclass.Regression.C Regression.C$U@@20) $Heap@@1)))) (<= (LitInt 0) |n#0@@1|)) ($Is HandleTypeType |f#0@@4| (Tclass._System.___hTotalFunc0 TInt))))) (and (=> (not (or (= (LitInt |n#0@@1|) (LitInt 0)) (= (Regression.C.next Regression.C$U@@20 this@@3) null))) (and (=> (= (Regression.C.data Regression.C$U@@20 this@@3) (LitInt 17)) (|Regression.C.Rec#canCall| Regression.C$U@@20 (Regression.C.next Regression.C$U@@20 this@@3) (LitInt (- |n#0@@1| 1)) (|Regression.C.F#Handle| Regression.C$U@@20 this@@3))) (=> (or (not (= (Regression.C.data Regression.C$U@@20 this@@3) (LitInt 17))) (not true)) (|Regression.C.Rec#canCall| Regression.C$U@@20 (Regression.C.next Regression.C$U@@20 this@@3) (LitInt (- |n#0@@1| 1)) |f#0@@4|)))) (= (Regression.C.Rec Regression.C$U@@20 ($LS $ly@@1) this@@3 (LitInt |n#0@@1|) |f#0@@4|) (ite  (or (= (LitInt |n#0@@1|) (LitInt 0)) (= (Regression.C.next Regression.C$U@@20 this@@3) null)) (U_2_int ($Unbox intType (Apply0 TInt $Heap@@1 |f#0@@4|))) (ite (= (Regression.C.data Regression.C$U@@20 this@@3) (LitInt 17)) (Regression.C.Rec Regression.C$U@@20 ($LS $ly@@1) (Regression.C.next Regression.C$U@@20 this@@3) (LitInt (- |n#0@@1| 1)) (|Regression.C.F#Handle| Regression.C$U@@20 this@@3)) (Regression.C.Rec Regression.C$U@@20 ($LS $ly@@1) (Regression.C.next Regression.C$U@@20 this@@3) (LitInt (- |n#0@@1| 1)) |f#0@@4|))))))
 :weight 3
 :pattern ( (Regression.C.Rec Regression.C$U@@20 ($LS $ly@@1) this@@3 (LitInt |n#0@@1|) |f#0@@4|) ($IsGoodHeap $Heap@@1))
))))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((Regression.C$U@@21 T@U) ($self@@2 T@U) ($heap@@2 T@U) ) (! (= (Regression.C.F Regression.C$U@@21 $self@@2) (U_2_int ($Unbox intType (Apply0 TInt $heap@@2 (|Regression.C.F#Handle| Regression.C$U@@21 $self@@2)))))
 :pattern ( (Regression.C.F Regression.C$U@@21 $self@@2) ($IsGoodHeap $heap@@2))
)))
(assert (forall ((s@@0 T@U) ) (! ($Is SetType (SetRef_to_SetBox s@@0) (TSet Tclass._System.object?))
 :pattern ( (SetRef_to_SetBox s@@0))
)))
(assert (forall ((f@@11 T@U) (t0@@15 T@U) (h@@8 T@U) ) (!  (=> (and ($IsGoodHeap h@@8) ($IsAlloc HandleTypeType f@@11 (Tclass._System.___hFunc0 t0@@15) h@@8)) (=> (Requires0 t0@@15 h@@8 f@@11) ($IsAllocBox (Apply0 t0@@15 h@@8 f@@11) t0@@15 h@@8)))
 :pattern ( ($IsAlloc HandleTypeType f@@11 (Tclass._System.___hFunc0 t0@@15) h@@8))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (! (= (|Set#Equal| a@@1 b@@1) (forall ((o@@7 T@U) ) (! (= (|Set#IsMember| a@@1 o@@7) (|Set#IsMember| b@@1 o@@7))
 :pattern ( (|Set#IsMember| a@@1 o@@7))
 :pattern ( (|Set#IsMember| b@@1 o@@7))
)))
 :pattern ( (|Set#Equal| a@@1 b@@1))
)))
(assert (forall ((f@@12 T@U) (t0@@16 T@U) (u0@@2 T@U) ) (!  (=> (and ($Is HandleTypeType f@@12 (Tclass._System.___hFunc0 t0@@16)) (forall ((bx@@15 T@U) ) (!  (=> ($IsBox bx@@15 t0@@16) ($IsBox bx@@15 u0@@2))
 :pattern ( ($IsBox bx@@15 t0@@16))
 :pattern ( ($IsBox bx@@15 u0@@2))
))) ($Is HandleTypeType f@@12 (Tclass._System.___hFunc0 u0@@2)))
 :pattern ( ($Is HandleTypeType f@@12 (Tclass._System.___hFunc0 t0@@16)) ($Is HandleTypeType f@@12 (Tclass._System.___hFunc0 u0@@2)))
)))
(assert (forall ((Regression.C$U@@22 T@U) ($ly@@2 T@U) (this@@4 T@U) (|n#0@@2| Int) (|f#0@@5| T@U) ) (! (= (Regression.C.Rec Regression.C$U@@22 ($LS $ly@@2) this@@4 |n#0@@2| |f#0@@5|) (Regression.C.Rec Regression.C$U@@22 $ly@@2 this@@4 |n#0@@2| |f#0@@5|))
 :pattern ( (Regression.C.Rec Regression.C$U@@22 ($LS $ly@@2) this@@4 |n#0@@2| |f#0@@5|))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@7)) (Lit BoxType ($Box T@@5 x@@7)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@7)))
)))
(assert (forall ((Regression.C$U@@23 T@U) (this@@5 T@U) ) (!  (=> (and (or (not (= this@@5 null)) (not true)) ($Is refType this@@5 (Tclass.Regression.C Regression.C$U@@23))) (= (|Regression.C.F#requires| Regression.C$U@@23 this@@5) true))
 :pattern ( (|Regression.C.F#requires| Regression.C$U@@23 this@@5))
)))
(assert (forall ((t0@@17 T@U) (heap@@3 T@U) (h@@9 T@U) (r@@2 T@U) (rd@@1 T@U) ) (!  (=> (U_2_bool (MapType0Select (MapType0Type refType (MapType0Type FieldType BoxType)) boolType r@@2 heap@@3)) (Requires0 t0@@17 heap@@3 (Handle0 h@@9 r@@2 rd@@1)))
 :pattern ( (Requires0 t0@@17 heap@@3 (Handle0 h@@9 r@@2 rd@@1)))
)))
(assert (forall ((h@@10 T@U) (v@@4 T@U) ) (! ($IsAlloc intType v@@4 TInt h@@10)
 :pattern ( ($IsAlloc intType v@@4 TInt h@@10))
)))
(assert (forall ((h@@11 T@U) (v@@5 T@U) ) (! ($IsAlloc realType v@@5 TReal h@@11)
 :pattern ( ($IsAlloc realType v@@5 TReal h@@11))
)))
(assert (forall ((|#$R@@11| T@U) (|f#0@@6| T@U) ) (! (= ($Is HandleTypeType |f#0@@6| (Tclass._System.___hPartialFunc0 |#$R@@11|))  (and ($Is HandleTypeType |f#0@@6| (Tclass._System.___hFunc0 |#$R@@11|)) (|Set#Equal| (Reads0 |#$R@@11| $OneHeap |f#0@@6|) |Set#Empty|)))
 :pattern ( ($Is HandleTypeType |f#0@@6| (Tclass._System.___hPartialFunc0 |#$R@@11|)))
)))
(assert (forall ((v@@6 T@U) ) (! ($Is intType v@@6 TInt)
 :pattern ( ($Is intType v@@6 TInt))
)))
(assert (forall ((v@@7 T@U) ) (! ($Is realType v@@7 TReal)
 :pattern ( ($Is realType v@@7 TReal))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |$lambdaHeap#0@0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |$lambdaHeap#1@0| () T@U)
(declare-fun |$lambdaHeap#2@0| () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun |f##0@0| () T@U)
(declare-fun $LZ () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |defass#c#0@0| () Bool)
(declare-fun |c#0@0| () T@U)
(declare-fun |n##1@0| () Int)
(declare-fun |##f#0@0| () T@U)
(declare-fun |x#0@0| () Int)
(declare-fun |n##0@0| () Int)
(declare-fun |i#0@1| () Int)
(declare-fun |##n#0@0| () Int)
(declare-fun |$decr$loop#00@1| () Int)
(declare-fun call3formal@this () T@U)
(declare-fun call0formal@Regression.C$U () T@U)
(declare-fun $Heap@@2 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun call3formal@this@0 () T@U)
(declare-fun |i#0@2| () Int)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun |$decr_init$loop#00@0| () Int)
(declare-fun $Heap@0 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |i#0@0| () Int)
(declare-fun call3formal@this@@0 () T@U)
(declare-fun call0formal@Regression.C$U@@0 () T@U)
(declare-fun call3formal@this@0@@0 () T@U)
(declare-fun |defass#c#0| () Bool)
(declare-fun |c#0@@3| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 33) (let ((anon23_Else_correct true))
(let ((anon23_Then_correct true))
(let ((anon22_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#0@0|) (or (= $Heap@1 |$lambdaHeap#0@0|) ($HeapSucc $Heap@1 |$lambdaHeap#0@0|))) (and (=> (= (ControlFlow 0 24) 22) anon23_Then_correct) (=> (= (ControlFlow 0 24) 23) anon23_Else_correct)))))
(let ((anon25_Else_correct true))
(let ((anon25_Then_correct true))
(let ((anon24_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#1@0|) (or (= $Heap@1 |$lambdaHeap#1@0|) ($HeapSucc $Heap@1 |$lambdaHeap#1@0|))) (and (=> (= (ControlFlow 0 17) 15) anon25_Then_correct) (=> (= (ControlFlow 0 17) 16) anon25_Else_correct)))))
(let ((anon27_Else_correct true))
(let ((anon27_Then_correct true))
(let ((anon26_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#2@0|) (or (= $Heap@3 |$lambdaHeap#2@0|) ($HeapSucc $Heap@3 |$lambdaHeap#2@0|))) (and (=> (= (ControlFlow 0 10) 8) anon27_Then_correct) (=> (= (ControlFlow 0 10) 9) anon27_Else_correct)))))
(let ((anon26_Else_correct true))
(let ((anon24_Else_correct  (=> (= |f##0@0| (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#5| (Handle0 (|lambda#1| ($Box intType (int_2_U (LitInt (- 0 2))))) (|lambda#2| true) (|lambda#4| (SetRef_to_SetBox (|lambda#3| false))))) ($LS $LZ)))) (=> (and (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (and (forall (($o@@8 T@U) ) (!  (=> (and (or (not (= $o@@8 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@8) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@8) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@8)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@8))
)) ($HeapSucc $Heap@1 $Heap@3))) (and (=> (= (ControlFlow 0 11) (- 0 14)) |defass#c#0@0|) (=> |defass#c#0@0| (and (=> (= (ControlFlow 0 11) (- 0 13)) (or (not (= |c#0@0| null)) (not true))) (=> (or (not (= |c#0@0| null)) (not true)) (and (=> (= (ControlFlow 0 11) (- 0 12)) ($Is intType (int_2_U (LitInt 100)) Tclass._System.nat)) (=> ($Is intType (int_2_U (LitInt 100)) Tclass._System.nat) (=> (= |n##1@0| (LitInt 100)) (and (=> (= (ControlFlow 0 11) 10) anon26_Then_correct) (=> (= (ControlFlow 0 11) 7) anon26_Else_correct)))))))))))))
(let ((anon22_Else_correct  (=> (= |##f#0@0| (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#5| (Handle0 (|lambda#1| ($Box intType (int_2_U (LitInt (- 0 2))))) (|lambda#2| true) (|lambda#4| (SetRef_to_SetBox (|lambda#3| false))))) ($LS $LZ)))) (=> (and (and ($IsAlloc HandleTypeType |##f#0@0| (Tclass._System.___hTotalFunc0 TInt) $Heap@1) (|Regression.C.Rec#canCall| TReal |c#0@0| (LitInt 100) (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#5| (Handle0 (|lambda#1| ($Box intType (int_2_U (LitInt (- 0 2))))) (|lambda#2| true) (|lambda#4| (SetRef_to_SetBox (|lambda#3| false))))) ($LS $LZ))))) (and (|Regression.C.Rec#canCall| TReal |c#0@0| (LitInt 100) (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#5| (Handle0 (|lambda#1| ($Box intType (int_2_U (LitInt (- 0 2))))) (|lambda#2| true) (|lambda#4| (SetRef_to_SetBox (|lambda#3| false))))) ($LS $LZ)))) (= |x#0@0| (Regression.C.Rec TReal ($LS $LZ) |c#0@0| (LitInt 100) (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#5| (Handle0 (|lambda#1| ($Box intType (int_2_U (LitInt (- 0 2))))) (|lambda#2| true) (|lambda#4| (SetRef_to_SetBox (|lambda#3| false))))) ($LS $LZ))))))) (and (=> (= (ControlFlow 0 18) (- 0 21)) |defass#c#0@0|) (=> |defass#c#0@0| (and (=> (= (ControlFlow 0 18) (- 0 20)) (or (not (= |c#0@0| null)) (not true))) (=> (or (not (= |c#0@0| null)) (not true)) (and (=> (= (ControlFlow 0 18) (- 0 19)) ($Is intType (int_2_U (LitInt 100)) Tclass._System.nat)) (=> ($Is intType (int_2_U (LitInt 100)) Tclass._System.nat) (=> (= |n##0@0| (LitInt 100)) (and (=> (= (ControlFlow 0 18) 17) anon24_Then_correct) (=> (= (ControlFlow 0 18) 11) anon24_Else_correct)))))))))))))
(let ((anon21_Then_correct  (=> (<= 100 |i#0@1|) (and (=> (= (ControlFlow 0 25) (- 0 28)) |defass#c#0@0|) (=> |defass#c#0@0| (and (=> (= (ControlFlow 0 25) (- 0 27)) (or (not (= |c#0@0| null)) (not true))) (=> (or (not (= |c#0@0| null)) (not true)) (=> ($IsAllocBox ($Box refType |c#0@0|) (Tclass.Regression.C? TReal) $Heap@1) (and (=> (= (ControlFlow 0 25) (- 0 26)) ($Is intType (int_2_U (LitInt 100)) Tclass._System.nat)) (=> ($Is intType (int_2_U (LitInt 100)) Tclass._System.nat) (=> (and (= |##n#0@0| (LitInt 100)) ($IsAlloc intType (int_2_U |##n#0@0|) Tclass._System.nat $Heap@1)) (and (=> (= (ControlFlow 0 25) 24) anon22_Then_correct) (=> (= (ControlFlow 0 25) 18) anon22_Else_correct)))))))))))))
(let ((anon21_Else_correct  (=> (and (< |i#0@1| 100) (= |$decr$loop#00@1| (- 100 |i#0@1|))) (and (=> (= (ControlFlow 0 4) (- 0 6)) |defass#c#0@0|) (=> |defass#c#0@0| (=> (and (or (not (= call3formal@this null)) (not true)) (and ($Is refType call3formal@this (Tclass.Regression.C call0formal@Regression.C$U)) ($IsAlloc refType call3formal@this (Tclass.Regression.C call0formal@Regression.C$U) $Heap@@2))) (=> (and (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (and (or (not (= call3formal@this@0 null)) (not true)) (and ($Is refType call3formal@this@0 (Tclass.Regression.C TReal)) ($IsAlloc refType call3formal@this@0 (Tclass.Regression.C TReal) $Heap@2)))) (and (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 call3formal@this@0) alloc)))) (forall (($o@@9 T@U) ) (!  (=> (and (or (not (= $o@@9 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@9) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@9) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@9)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@9))
))) (and ($HeapSucc $Heap@1 $Heap@2) (= |i#0@2| (+ |i#0@1| 1))))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (or (<= 0 |$decr$loop#00@1|) (= (- 100 |i#0@2|) |$decr$loop#00@1|))) (=> (or (<= 0 |$decr$loop#00@1|) (= (- 100 |i#0@2|) |$decr$loop#00@1|)) (=> (= (ControlFlow 0 4) (- 0 3)) (< (- 100 |i#0@2|) |$decr$loop#00@1|)))))))))))
(let ((anon20_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 29) 25) anon21_Then_correct) (=> (= (ControlFlow 0 29) 4) anon21_Else_correct)))))
(let ((anon20_Then_correct true))
(let ((anon19_LoopBody_correct  (and (=> (= (ControlFlow 0 30) 2) anon20_Then_correct) (=> (= (ControlFlow 0 30) 29) anon20_Else_correct))))
(let ((anon19_LoopDone_correct true))
(let ((anon19_LoopHead_correct  (=> (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (=> |defass#c#0@0| (and ($Is refType |c#0@0| (Tclass.Regression.C TReal)) ($IsAlloc refType |c#0@0| (Tclass.Regression.C TReal) $Heap@1)))) (=> (and (and (and (and (and (and (not false) (and (<= 0 |i#0@1|) (< |i#0@1| 101))) |defass#c#0@0|) true) (= |$decr_init$loop#00@0| 100)) (forall (($o@@10 T@U) ) (!  (=> (and (or (not (= $o@@10 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@2 $o@@10) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@10) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@10)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@10))
))) (and (and ($HeapSucc $Heap@0 $Heap@1) (forall (($o@@11 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@11 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@11) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@11) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@11) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@11 $f@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@11) $f@@0))
))) (and (=> true |defass#c#0@0|) (<= (- 100 |i#0@1|) |$decr_init$loop#00@0|)))) (and (=> (= (ControlFlow 0 31) 1) anon19_LoopDone_correct) (=> (= (ControlFlow 0 31) 30) anon19_LoopBody_correct))))))
(let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@2 alloc false)) (= |i#0@0| (LitInt 0))) (=> (and (and (or (not (= call3formal@this@@0 null)) (not true)) (and ($Is refType call3formal@this@@0 (Tclass.Regression.C call0formal@Regression.C$U@@0)) ($IsAlloc refType call3formal@this@@0 (Tclass.Regression.C call0formal@Regression.C$U@@0) $Heap@@2))) (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0))) (=> (and (and (and (or (not (= call3formal@this@0@@0 null)) (not true)) (and ($Is refType call3formal@this@0@@0 (Tclass.Regression.C TReal)) ($IsAlloc refType call3formal@this@0@@0 (Tclass.Regression.C TReal) $Heap@0))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@2 call3formal@this@0@@0) alloc))))) (and (and (forall (($o@@12 T@U) ) (!  (=> (and (or (not (= $o@@12 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@2 $o@@12) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@12) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@2 $o@@12)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@12))
)) ($HeapSucc $Heap@@2 $Heap@0)) (and (= |$decr_init$loop#00@0| (- 100 |i#0@0|)) (= (ControlFlow 0 32) 31)))) anon19_LoopHead_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@2) ($IsHeapAnchor $Heap@@2)) (=> (and (and (=> |defass#c#0| (and ($Is refType |c#0@@3| (Tclass.Regression.C TReal)) ($IsAlloc refType |c#0@@3| (Tclass.Regression.C TReal) $Heap@@2))) true) (and (= 3 $FunctionContextHeight) (= (ControlFlow 0 33) 32))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
