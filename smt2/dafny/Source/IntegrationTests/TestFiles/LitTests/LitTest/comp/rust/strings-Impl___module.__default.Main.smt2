(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) T@U)
(declare-fun $generated@@19 (Int) Int)
(declare-fun $generated@@21 (T@T T@U) T@U)
(declare-fun $generated@@24 (T@T T@U) T@U)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@30 (Int) T@U)
(declare-fun $generated@@31 (T@U) Int)
(declare-fun $generated@@33 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@34 () T@T)
(declare-fun $generated@@35 () T@T)
(declare-fun $generated@@36 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@37 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@38 () T@T)
(declare-fun $generated@@39 (T@T T@T) T@T)
(declare-fun $generated@@40 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@41 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@42 (T@T) T@T)
(declare-fun $generated@@43 (T@T) T@T)
(declare-fun $generated@@96 (T@T T@U T@U) Bool)
(declare-fun $generated@@97 () T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated) $generated@@0))
(assert (forall (($generated@@20 Int) ) (! (= ($generated@@19 $generated@@20) $generated@@20)
 :pattern ( ($generated@@19 $generated@@20))
)))
(assert (forall (($generated@@22 T@U) ($generated@@23 T@T) ) (! (= ($generated@@21 $generated@@23 $generated@@22) $generated@@22)
 :pattern ( ($generated@@21 $generated@@23 $generated@@22))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@T) ) (! (= ($generated@@25 $generated@@27 ($generated@@24 $generated@@27 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@24 $generated@@27 $generated@@26))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@T) ) (! (= ($generated@@24 $generated@@29 ($generated@@25 $generated@@29 $generated@@28)) $generated@@28)
 :pattern ( ($generated@@25 $generated@@29 $generated@@28))
)))
(assert (forall (($generated@@32 Int) ) (!  (=> (or (and (<= 0 $generated@@32) (< $generated@@32 55296)) (and (<= 57344 $generated@@32) (< $generated@@32 1114112))) (= ($generated@@31 ($generated@@30 $generated@@32)) $generated@@32))
 :pattern ( ($generated@@30 $generated@@32))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@44 T@T) ($generated@@45 T@T) ($generated@@46 T@T) ($generated@@47 T@U) ($generated@@48 T@U) ($generated@@49 T@U) ($generated@@50 T@U) ) (! (= ($generated@@33 $generated@@44 $generated@@45 $generated@@46 ($generated@@40 $generated@@44 $generated@@45 $generated@@46 $generated@@48 $generated@@49 $generated@@50 $generated@@47) $generated@@49 $generated@@50) $generated@@47)
 :weight 0
)) (and (forall (($generated@@51 T@T) ($generated@@52 T@T) ($generated@@53 T@T) ($generated@@54 T@U) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ) (!  (or (= $generated@@56 $generated@@58) (= ($generated@@33 $generated@@51 $generated@@52 $generated@@53 ($generated@@40 $generated@@51 $generated@@52 $generated@@53 $generated@@55 $generated@@56 $generated@@57 $generated@@54) $generated@@58 $generated@@59) ($generated@@33 $generated@@51 $generated@@52 $generated@@53 $generated@@55 $generated@@58 $generated@@59)))
 :weight 0
)) (forall (($generated@@60 T@T) ($generated@@61 T@T) ($generated@@62 T@T) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (!  (or (= $generated@@66 $generated@@68) (= ($generated@@33 $generated@@60 $generated@@61 $generated@@62 ($generated@@40 $generated@@60 $generated@@61 $generated@@62 $generated@@64 $generated@@65 $generated@@66 $generated@@63) $generated@@67 $generated@@68) ($generated@@33 $generated@@60 $generated@@61 $generated@@62 $generated@@64 $generated@@67 $generated@@68)))
 :weight 0
)))) (= ($generated@@2 $generated@@34) 3)) (= ($generated@@2 $generated@@35) 4)) (forall (($generated@@69 T@T) ($generated@@70 T@T) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ) (! (= ($generated@@37 $generated@@69 $generated@@70 ($generated@@41 $generated@@69 $generated@@70 $generated@@72 $generated@@73 $generated@@71) $generated@@73) $generated@@71)
 :weight 0
))) (forall (($generated@@74 T@T) ($generated@@75 T@T) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@U) ($generated@@79 T@U) ) (!  (or (= $generated@@78 $generated@@79) (= ($generated@@37 $generated@@74 $generated@@75 ($generated@@41 $generated@@74 $generated@@75 $generated@@77 $generated@@78 $generated@@76) $generated@@79) ($generated@@37 $generated@@74 $generated@@75 $generated@@77 $generated@@79)))
 :weight 0
))) (= ($generated@@2 $generated@@38) 5)) (forall (($generated@@80 T@T) ($generated@@81 T@T) ) (= ($generated@@2 ($generated@@39 $generated@@80 $generated@@81)) 6))) (forall (($generated@@82 T@T) ($generated@@83 T@T) ) (! (= ($generated@@42 ($generated@@39 $generated@@82 $generated@@83)) $generated@@82)
 :pattern ( ($generated@@39 $generated@@82 $generated@@83))
))) (forall (($generated@@84 T@T) ($generated@@85 T@T) ) (! (= ($generated@@43 ($generated@@39 $generated@@84 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@39 $generated@@84 $generated@@85))
))))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 Bool) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (= ($generated@@7 ($generated@@33 $generated@@34 $generated@@35 $generated@@3 ($generated@@36 $generated@@86 $generated@@87 $generated@@88 $generated@@89) $generated@@90 $generated@@91))  (=> (and (or (not (= $generated@@90 $generated@@86)) (not true)) ($generated@@7 ($generated@@24 $generated@@3 ($generated@@37 $generated@@35 $generated@@38 ($generated@@37 $generated@@34 ($generated@@39 $generated@@35 $generated@@38) $generated@@87 $generated@@90) $generated@@88)))) $generated@@89))
 :pattern ( ($generated@@33 $generated@@34 $generated@@35 $generated@@3 ($generated@@36 $generated@@86 $generated@@87 $generated@@88 $generated@@89) $generated@@90 $generated@@91))
)))
(assert (forall (($generated@@92 T@U) ) (!  (and (= ($generated@@30 ($generated@@31 $generated@@92)) $generated@@92) (or (and (<= 0 ($generated@@31 $generated@@92)) (< ($generated@@31 $generated@@92) 55296)) (and (<= 57344 ($generated@@31 $generated@@92)) (< ($generated@@31 $generated@@92) 1114112))))
 :pattern ( ($generated@@31 $generated@@92))
)))
(assert (forall (($generated@@93 Int) ) (! (= ($generated@@25 $generated@@4 ($generated@@8 ($generated@@19 $generated@@93))) ($generated@@21 $generated@@38 ($generated@@25 $generated@@4 ($generated@@8 $generated@@93))))
 :pattern ( ($generated@@25 $generated@@4 ($generated@@8 ($generated@@19 $generated@@93))))
)))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@T) ) (! (= ($generated@@25 $generated@@95 ($generated@@21 $generated@@95 $generated@@94)) ($generated@@21 $generated@@38 ($generated@@25 $generated@@95 $generated@@94)))
 :pattern ( ($generated@@25 $generated@@95 ($generated@@21 $generated@@95 $generated@@94)))
)))
(assert (= ($generated@@2 $generated@@97) 7))
(assert (forall (($generated@@98 T@U) ) (! ($generated@@96 $generated@@97 $generated@@98 $generated)
 :pattern ( ($generated@@96 $generated@@97 $generated@@98 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@99 () T@U)
(declare-fun $generated@@100 () T@U)
(declare-fun $generated@@101 () T@U)
(declare-fun $generated@@102 () Int)
(declare-fun $generated@@103 () Int)
(declare-fun $generated@@104 () Int)
(declare-fun $generated@@105 () T@U)
(declare-fun $generated@@106 (T@U) Bool)
(declare-fun $generated@@107 (T@U) Bool)
(declare-fun $generated@@108 () Int)
(declare-fun $generated@@109 () Int)
(declare-fun $generated@@110 () Int)
(declare-fun $generated@@111 () T@U)
(declare-fun $generated@@112 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 11) (let (($generated@@113 true))
(let (($generated@@114 true))
(let (($generated@@115  (=> (and (= $generated@@99 ($generated@@36 $generated@@100 $generated@@101 $generated@@1 false)) (= $generated@@102 ($generated@@31 ($generated@@21 $generated@@97 ($generated@@30 72))))) (and (=> (= (ControlFlow 0 3) (- 0 10)) (and (<= ($generated@@19 0) $generated@@102) (< $generated@@102 255))) (=> (and (<= ($generated@@19 0) $generated@@102) (< $generated@@102 255)) (=> (= $generated@@103 ($generated@@31 ($generated@@21 $generated@@97 ($generated@@30 72)))) (and (=> (= (ControlFlow 0 3) (- 0 9)) (and (<= ($generated@@19 0) $generated@@103) (< $generated@@103 255))) (=> (and (<= ($generated@@19 0) $generated@@103) (< $generated@@103 255)) (=> (= $generated@@104 ($generated@@31 ($generated@@21 $generated@@97 ($generated@@30 72)))) (and (=> (= (ControlFlow 0 3) (- 0 8)) (and (<= ($generated@@19 0) $generated@@104) (< $generated@@104 128))) (=> (and (<= ($generated@@19 0) $generated@@104) (< $generated@@104 128)) (and (=> (= (ControlFlow 0 3) (- 0 7)) (and (<= ($generated@@19 0) $generated@@104) (< $generated@@104 128))) (=> (and (<= ($generated@@19 0) $generated@@104) (< $generated@@104 128)) (and (=> (= (ControlFlow 0 3) (- 0 6)) (and (<= ($generated@@19 0) $generated@@104) (< $generated@@104 255))) (=> (and (<= ($generated@@19 0) $generated@@104) (< $generated@@104 255)) (and (=> (= (ControlFlow 0 3) (- 0 5)) (and (<= ($generated@@19 0) $generated@@104) (< $generated@@104 255))) (=> (and (<= ($generated@@19 0) $generated@@104) (< $generated@@104 255)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (or (and (<= 0 $generated@@104) (< $generated@@104 55296)) (and (<= 57344 $generated@@104) (< $generated@@104 1114112)))) (=> (or (and (<= 0 $generated@@104) (< $generated@@104 55296)) (and (<= 57344 $generated@@104) (< $generated@@104 1114112))) (=> (= $generated@@105 ($generated@@30 $generated@@104)) (and (=> (= (ControlFlow 0 3) 1) $generated@@114) (=> (= (ControlFlow 0 3) 2) $generated@@113))))))))))))))))))))))
(let (($generated@@116  (=> (and ($generated@@106 $generated@@101) ($generated@@107 $generated@@101)) (=> (and (and (and (and (<= ($generated@@19 0) $generated@@108) (< $generated@@108 255)) true) (and (and (<= ($generated@@19 0) $generated@@109) (< $generated@@109 128)) true)) (and (and (and (<= ($generated@@19 0) $generated@@110) (< $generated@@110 255)) true) (and (and ($generated@@96 $generated@@97 $generated@@111 $generated) true) (and (= 1 $generated@@112) (= (ControlFlow 0 11) 3))))) $generated@@115))))
$generated@@116)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
