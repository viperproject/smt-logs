(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 (T@T) Int)
(declare-fun $generated@@2 () T@T)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 (Bool) T@U)
(declare-fun $generated@@6 (T@U) Bool)
(declare-fun $generated@@7 (Int) T@U)
(declare-fun $generated@@8 (T@U) Int)
(declare-fun $generated@@9 (Real) T@U)
(declare-fun $generated@@10 (T@U) Real)
(declare-fun $generated@@17 (T@T T@U T@U) Bool)
(declare-fun $generated@@18 () T@T)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Bool)
(declare-fun $generated@@23 (T@U T@U) Bool)
(declare-fun $generated@@24 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 (T@T T@T) T@T)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@30 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@31 (T@T) T@T)
(declare-fun $generated@@32 (T@T) T@T)
(declare-fun $generated@@53 (Int) Int)
(declare-fun $generated@@55 (T@T T@U) T@U)
(declare-fun $generated@@58 (T@T T@U) T@U)
(declare-fun $generated@@61 (T@U T@U T@U) Bool)
(declare-fun $generated@@62 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@76 (T@U) Int)
(declare-fun $generated@@77 (T@U T@U) T@U)
(declare-fun $generated@@80 (T@U T@U) Int)
(declare-fun $generated@@81 (T@U T@U) Bool)
(declare-fun $generated@@94 () T@U)
(declare-fun $generated@@96 (T@U) T@U)
(declare-fun $generated@@98 (T@U) T@U)
(declare-fun $generated@@107 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@108 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@109 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@1 $generated@@2) 0) (= ($generated@@1 $generated@@3) 1)) (= ($generated@@1 $generated@@4) 2)) (forall (($generated@@11 Bool) ) (! (= ($generated@@6 ($generated@@5 $generated@@11)) $generated@@11)
 :pattern ( ($generated@@5 $generated@@11))
))) (forall (($generated@@12 T@U) ) (! (= ($generated@@5 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 Int) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Real) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))))
(assert (distinct $generated $generated@@0)
)
(assert (= ($generated@@1 $generated@@18) 3))
(assert (forall (($generated@@21 T@U) ($generated@@22 T@U) ) (!  (=> ($generated@@17 $generated@@18 $generated@@21 ($generated@@19 $generated@@22)) ($generated@@20 $generated@@21))
 :pattern ( ($generated@@17 $generated@@18 $generated@@21 ($generated@@19 $generated@@22)))
)))
(assert  (and (and (and (and (and (and (and (forall (($generated@@33 T@T) ($generated@@34 T@T) ($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 T@U) ) (! (= ($generated@@24 $generated@@33 $generated@@34 ($generated@@30 $generated@@33 $generated@@34 $generated@@36 $generated@@37 $generated@@35) $generated@@37) $generated@@35)
 :weight 0
)) (forall (($generated@@38 T@T) ($generated@@39 T@T) ($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ) (!  (or (= $generated@@42 $generated@@43) (= ($generated@@24 $generated@@38 $generated@@39 ($generated@@30 $generated@@38 $generated@@39 $generated@@41 $generated@@42 $generated@@40) $generated@@43) ($generated@@24 $generated@@38 $generated@@39 $generated@@41 $generated@@43)))
 :weight 0
))) (= ($generated@@1 $generated@@25) 4)) (= ($generated@@1 $generated@@26) 5)) (= ($generated@@1 $generated@@27) 6)) (forall (($generated@@44 T@T) ($generated@@45 T@T) ) (= ($generated@@1 ($generated@@28 $generated@@44 $generated@@45)) 7))) (forall (($generated@@46 T@T) ($generated@@47 T@T) ) (! (= ($generated@@31 ($generated@@28 $generated@@46 $generated@@47)) $generated@@46)
 :pattern ( ($generated@@28 $generated@@46 $generated@@47))
))) (forall (($generated@@48 T@T) ($generated@@49 T@T) ) (! (= ($generated@@32 ($generated@@28 $generated@@48 $generated@@49)) $generated@@49)
 :pattern ( ($generated@@28 $generated@@48 $generated@@49))
))))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@U) ) (!  (=> ($generated@@23 $generated@@50 $generated@@51) (forall (($generated@@52 T@U) ) (!  (=> ($generated@@6 ($generated@@29 $generated@@2 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@50 $generated@@52) $generated@@0))) ($generated@@6 ($generated@@29 $generated@@2 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@51 $generated@@52) $generated@@0))))
 :pattern ( ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@51 $generated@@52) $generated@@0))
)))
 :pattern ( ($generated@@23 $generated@@50 $generated@@51))
)))
(assert (forall (($generated@@54 Int) ) (! (= ($generated@@53 $generated@@54) $generated@@54)
 :pattern ( ($generated@@53 $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@55 $generated@@57 $generated@@56) $generated@@56)
 :pattern ( ($generated@@55 $generated@@57 $generated@@56))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@58 $generated@@60 ($generated@@29 $generated@@60 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@29 $generated@@60 $generated@@59))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@T) ) (! (= ($generated@@61 ($generated@@58 $generated@@66 $generated@@63) $generated@@64 $generated@@65) ($generated@@62 $generated@@66 $generated@@63 $generated@@64 $generated@@65))
 :pattern ( ($generated@@61 ($generated@@58 $generated@@66 $generated@@63) $generated@@64 $generated@@65))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (!  (=> ($generated@@23 $generated@@67 $generated@@68) (=> ($generated@@61 $generated@@69 $generated@@70 $generated@@67) ($generated@@61 $generated@@69 $generated@@70 $generated@@68)))
 :pattern ( ($generated@@23 $generated@@67 $generated@@68) ($generated@@61 $generated@@69 $generated@@70 $generated@@67))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@U) ($generated@@75 T@T) ) (!  (=> ($generated@@23 $generated@@71 $generated@@72) (=> ($generated@@62 $generated@@75 $generated@@73 $generated@@74 $generated@@71) ($generated@@62 $generated@@75 $generated@@73 $generated@@74 $generated@@72)))
 :pattern ( ($generated@@23 $generated@@71 $generated@@72) ($generated@@62 $generated@@75 $generated@@73 $generated@@74 $generated@@71))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ) (! (= ($generated@@76 ($generated@@77 $generated@@78 $generated@@79)) (+ ($generated@@76 $generated@@78) ($generated@@76 $generated@@79)))
 :pattern ( ($generated@@76 ($generated@@77 $generated@@78 $generated@@79)))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ) (! (= ($generated@@17 $generated@@18 $generated@@82 ($generated@@19 $generated@@83)) (forall (($generated@@84 T@U) ) (!  (=> (< 0 ($generated@@80 $generated@@82 $generated@@84)) ($generated@@81 $generated@@84 $generated@@83))
 :pattern ( ($generated@@80 $generated@@82 $generated@@84))
)))
 :pattern ( ($generated@@17 $generated@@18 $generated@@82 ($generated@@19 $generated@@83)))
)))
(assert (forall (($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (!  (=> (or (not (= $generated@@85 $generated@@87)) (not true)) (=> (and ($generated@@23 $generated@@85 $generated@@86) ($generated@@23 $generated@@86 $generated@@87)) ($generated@@23 $generated@@85 $generated@@87)))
 :pattern ( ($generated@@23 $generated@@85 $generated@@86) ($generated@@23 $generated@@86 $generated@@87))
)))
(assert (forall (($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@T) ) (! (= ($generated@@81 ($generated@@58 $generated@@90 $generated@@88) $generated@@89) ($generated@@17 $generated@@90 $generated@@88 $generated@@89))
 :pattern ( ($generated@@81 ($generated@@58 $generated@@90 $generated@@88) $generated@@89))
)))
(assert (forall (($generated@@91 T@U) ) (! (= ($generated@@20 $generated@@91) (forall (($generated@@92 T@U) ) (!  (and (<= 0 ($generated@@80 $generated@@91 $generated@@92)) (<= ($generated@@80 $generated@@91 $generated@@92) ($generated@@76 $generated@@91)))
 :pattern ( ($generated@@80 $generated@@91 $generated@@92))
)))
 :pattern ( ($generated@@20 $generated@@91))
)))
(assert (forall (($generated@@93 T@U) ) (! (<= 0 ($generated@@76 $generated@@93))
 :pattern ( ($generated@@76 $generated@@93))
)))
(assert (forall (($generated@@95 T@U) ) (! (= ($generated@@80 $generated@@94 $generated@@95) 0)
 :pattern ( ($generated@@80 $generated@@94 $generated@@95))
)))
(assert (forall (($generated@@97 T@U) ) (! (= ($generated@@96 ($generated@@19 $generated@@97)) $generated@@97)
 :pattern ( ($generated@@19 $generated@@97))
)))
(assert (forall (($generated@@99 T@U) ) (! (= ($generated@@98 ($generated@@19 $generated@@99)) $generated)
 :pattern ( ($generated@@19 $generated@@99))
)))
(assert (forall (($generated@@100 T@U) ($generated@@101 T@T) ) (! (= ($generated@@29 $generated@@101 ($generated@@58 $generated@@101 $generated@@100)) $generated@@100)
 :pattern ( ($generated@@58 $generated@@101 $generated@@100))
)))
(assert (forall (($generated@@102 T@U) ) (!  (and (= (= ($generated@@76 $generated@@102) 0) (= $generated@@102 $generated@@94)) (=> (or (not (= ($generated@@76 $generated@@102) 0)) (not true)) (exists (($generated@@103 T@U) ) (! (< 0 ($generated@@80 $generated@@102 $generated@@103))
 :pattern ( ($generated@@80 $generated@@102 $generated@@103))
))))
 :pattern ( ($generated@@76 $generated@@102))
)))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (! (= ($generated@@80 ($generated@@77 $generated@@104 $generated@@105) $generated@@106) (+ ($generated@@80 $generated@@104 $generated@@106) ($generated@@80 $generated@@105 $generated@@106)))
 :pattern ( ($generated@@80 ($generated@@77 $generated@@104 $generated@@105) $generated@@106))
)))
(assert  (and (forall (($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (! (= ($generated@@107 $generated@@110 $generated@@111 $generated@@112 ($generated@@109 $generated@@110 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@116 $generated@@113) $generated@@115 $generated@@116) $generated@@113)
 :weight 0
)) (and (forall (($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (!  (or (= $generated@@122 $generated@@124) (= ($generated@@107 $generated@@117 $generated@@118 $generated@@119 ($generated@@109 $generated@@117 $generated@@118 $generated@@119 $generated@@121 $generated@@122 $generated@@123 $generated@@120) $generated@@124 $generated@@125) ($generated@@107 $generated@@117 $generated@@118 $generated@@119 $generated@@121 $generated@@124 $generated@@125)))
 :weight 0
)) (forall (($generated@@126 T@T) ($generated@@127 T@T) ($generated@@128 T@T) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (!  (or (= $generated@@132 $generated@@134) (= ($generated@@107 $generated@@126 $generated@@127 $generated@@128 ($generated@@109 $generated@@126 $generated@@127 $generated@@128 $generated@@130 $generated@@131 $generated@@132 $generated@@129) $generated@@133 $generated@@134) ($generated@@107 $generated@@126 $generated@@127 $generated@@128 $generated@@130 $generated@@133 $generated@@134)))
 :weight 0
)))))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 Bool) ($generated@@139 T@U) ($generated@@140 T@U) ) (! (= ($generated@@6 ($generated@@107 $generated@@27 $generated@@25 $generated@@2 ($generated@@108 $generated@@135 $generated@@136 $generated@@137 $generated@@138) $generated@@139 $generated@@140))  (=> (and (or (not (= $generated@@139 $generated@@135)) (not true)) ($generated@@6 ($generated@@29 $generated@@2 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@136 $generated@@139) $generated@@137)))) $generated@@138))
 :pattern ( ($generated@@107 $generated@@27 $generated@@25 $generated@@2 ($generated@@108 $generated@@135 $generated@@136 $generated@@137 $generated@@138) $generated@@139 $generated@@140))
)))
(assert (forall (($generated@@141 T@U) ($generated@@142 T@U) ) (!  (=> ($generated@@81 $generated@@141 ($generated@@19 $generated@@142)) (and (= ($generated@@58 $generated@@18 ($generated@@29 $generated@@18 $generated@@141)) $generated@@141) ($generated@@17 $generated@@18 ($generated@@29 $generated@@18 $generated@@141) ($generated@@19 $generated@@142))))
 :pattern ( ($generated@@81 $generated@@141 ($generated@@19 $generated@@142)))
)))
(assert (forall (($generated@@143 Int) ) (! (= ($generated@@58 $generated@@3 ($generated@@7 ($generated@@53 $generated@@143))) ($generated@@55 $generated@@26 ($generated@@58 $generated@@3 ($generated@@7 $generated@@143))))
 :pattern ( ($generated@@58 $generated@@3 ($generated@@7 ($generated@@53 $generated@@143))))
)))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@T) ) (! (= ($generated@@58 $generated@@145 ($generated@@55 $generated@@145 $generated@@144)) ($generated@@55 $generated@@26 ($generated@@58 $generated@@145 $generated@@144)))
 :pattern ( ($generated@@58 $generated@@145 ($generated@@55 $generated@@145 $generated@@144)))
)))
(assert (forall (($generated@@146 T@U) ($generated@@147 T@U) ($generated@@148 T@U) ) (! (= ($generated@@62 $generated@@18 $generated@@146 ($generated@@19 $generated@@147) $generated@@148) (forall (($generated@@149 T@U) ) (!  (=> (< 0 ($generated@@80 $generated@@146 $generated@@149)) ($generated@@61 $generated@@149 $generated@@147 $generated@@148))
 :pattern ( ($generated@@80 $generated@@146 $generated@@149))
)))
 :pattern ( ($generated@@62 $generated@@18 $generated@@146 ($generated@@19 $generated@@147) $generated@@148))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@150 () Int)
(declare-fun $generated@@151 () Int)
(declare-fun $generated@@152 () Int)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () T@U)
(declare-fun $generated@@155 () Int)
(declare-fun $generated@@156 () Bool)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 () T@U)
(declare-fun $generated@@161 () Int)
(declare-fun $generated@@162 () Int)
(declare-fun $generated@@163 (T@U) Bool)
(declare-fun $generated@@164 (T@U) Bool)
(declare-fun $generated@@165 () T@U)
(declare-fun $generated@@166 () T@U)
(declare-fun $generated@@167 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let (($generated@@168  (=> (and (and (< $generated@@150 $generated@@151) (= $generated@@152 (- $generated@@151 $generated@@150))) (and (= $generated@@153 ($generated@@77 $generated@@154 $generated@@154)) (= $generated@@155 (+ $generated@@150 1)))) (and (=> (= (ControlFlow 0 6) (- 0 7)) (or (<= 0 $generated@@152) (= (- $generated@@151 $generated@@155) $generated@@152))) (=> (or (<= 0 $generated@@152) (= (- $generated@@151 $generated@@155) $generated@@152)) (=> (= (ControlFlow 0 6) (- 0 5)) (< (- $generated@@151 $generated@@155) $generated@@152)))))))
(let (($generated@@169 true))
(let (($generated@@170  (=> $generated@@156 (and (=> (= (ControlFlow 0 8) 4) $generated@@169) (=> (= (ControlFlow 0 8) 6) $generated@@168)))))
(let (($generated@@171 true))
(let (($generated@@172  (and (=> (= (ControlFlow 0 9) 3) $generated@@171) (=> (= (ControlFlow 0 9) 8) $generated@@170))))
(let (($generated@@173 true))
(let (($generated@@174  (=> (and (and (and ($generated@@17 $generated@@18 $generated@@154 ($generated@@19 $generated@@157)) ($generated@@62 $generated@@18 $generated@@154 ($generated@@19 $generated@@157) $generated@@158)) (and (not false) (<= 1 $generated@@150))) (and (and (forall (($generated@@175 T@U) ) (!  (=> (and (or (not (= $generated@@175 $generated@@159)) (not true)) ($generated@@6 ($generated@@29 $generated@@2 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@158 $generated@@175) $generated@@0)))) (= ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@158 $generated@@175) ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@158 $generated@@175)))
 :pattern ( ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@158 $generated@@175))
)) ($generated@@23 $generated@@158 $generated@@158)) (and (forall (($generated@@176 T@U) ($generated@@177 T@U) ) (!  (=> (and (or (not (= $generated@@176 $generated@@159)) (not true)) ($generated@@6 ($generated@@29 $generated@@2 ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@158 $generated@@176) $generated@@0)))) (or (= ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@158 $generated@@176) $generated@@177) ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@158 $generated@@176) $generated@@177)) ($generated@@6 ($generated@@107 $generated@@27 $generated@@25 $generated@@2 $generated@@160 $generated@@176 $generated@@177))))
 :pattern ( ($generated@@24 $generated@@25 $generated@@26 ($generated@@24 $generated@@27 ($generated@@28 $generated@@25 $generated@@26) $generated@@158 $generated@@176) $generated@@177))
)) (<= (- $generated@@151 $generated@@150) $generated@@161)))) (and (=> (= (ControlFlow 0 10) 2) $generated@@173) (=> (= (ControlFlow 0 10) 9) $generated@@172)))))
(let (($generated@@178  (=> (and (and (or (not (= $generated@@151 ($generated@@53 0))) (not true)) (= $generated@@162 ($generated@@53 1))) (and (= $generated@@161 (- $generated@@151 $generated@@162)) (= (ControlFlow 0 11) 10))) $generated@@174)))
(let (($generated@@179 true))
(let (($generated@@180  (=> (= $generated@@160 ($generated@@108 $generated@@159 $generated@@158 $generated@@0 false)) (and (=> (= (ControlFlow 0 12) 1) $generated@@179) (=> (= (ControlFlow 0 12) 11) $generated@@178)))))
(let (($generated@@181  (=> (and ($generated@@163 $generated@@158) ($generated@@164 $generated@@158)) (=> (and (and (and ($generated@@17 $generated@@18 $generated@@165 ($generated@@19 $generated@@157)) ($generated@@62 $generated@@18 $generated@@165 ($generated@@19 $generated@@157) $generated@@158)) (<= ($generated@@53 0) $generated@@151)) (and (and ($generated@@17 $generated@@18 $generated@@166 ($generated@@19 $generated@@157)) ($generated@@62 $generated@@18 $generated@@166 ($generated@@19 $generated@@157) $generated@@158)) (and (= 0 $generated@@167) (= (ControlFlow 0 13) 12)))) $generated@@180))))
$generated@@181))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
