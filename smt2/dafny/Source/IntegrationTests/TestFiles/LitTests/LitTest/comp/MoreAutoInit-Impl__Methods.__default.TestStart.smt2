(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 (T@T) Int)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 (Bool) T@U)
(declare-fun $generated@@12 (T@U) Bool)
(declare-fun $generated@@13 (Int) T@U)
(declare-fun $generated@@14 (T@U) Int)
(declare-fun $generated@@15 (Real) T@U)
(declare-fun $generated@@16 (T@U) Real)
(declare-fun $generated@@23 (T@U) T@U)
(declare-fun $generated@@24 (T@U T@U) T@U)
(declare-fun $generated@@25 (T@U T@U) Bool)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@36 (T@U) Int)
(declare-fun $generated@@37 () T@U)
(declare-fun $generated@@38 (T@U) T@U)
(declare-fun $generated@@39 () T@U)
(declare-fun $generated@@40 (T@T T@U T@U) Bool)
(declare-fun $generated@@41 () T@T)
(declare-fun $generated@@42 () T@U)
(declare-fun $generated@@43 (T@U T@U) Bool)
(declare-fun $generated@@44 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@45 () T@T)
(declare-fun $generated@@46 () T@T)
(declare-fun $generated@@47 () T@T)
(declare-fun $generated@@48 (T@T T@T) T@T)
(declare-fun $generated@@49 (T@T T@U) T@U)
(declare-fun $generated@@50 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@51 (T@T) T@T)
(declare-fun $generated@@52 (T@T) T@T)
(declare-fun $generated@@73 (Int) Int)
(declare-fun $generated@@75 (T@T T@U) T@U)
(declare-fun $generated@@78 () T@T)
(declare-fun $generated@@79 (T@U T@U) T@U)
(declare-fun $generated@@80 (T@U) T@U)
(declare-fun $generated@@81 (T@U T@U) Bool)
(declare-fun $generated@@85 (T@T T@U) T@U)
(declare-fun $generated@@88 () T@T)
(declare-fun $generated@@89 (T@U) T@U)
(declare-fun $generated@@96 (T@U Int) T@U)
(declare-fun $generated@@108 (T@U) T@U)
(declare-fun $generated@@111 (T@U) T@U)
(declare-fun $generated@@116 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@117 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@118 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@150 (T@U) T@U)
(declare-fun $generated@@151 (T@U) T@U)
(declare-fun $generated@@158 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@7 $generated@@8) 0) (= ($generated@@7 $generated@@9) 1)) (= ($generated@@7 $generated@@10) 2)) (forall (($generated@@17 Bool) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Int) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Real) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6)
)
(assert (= ($generated@@23 $generated) $generated@@0))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@U) ) (! ($generated@@25 ($generated@@24 $generated@@26 $generated@@27) $generated@@27)
 :pattern ( ($generated@@24 $generated@@26 $generated@@27))
)))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@U) ($generated@@30 T@U) ) (!  (=> ($generated@@25 $generated@@28 $generated@@30) ($generated@@25 ($generated@@24 $generated@@28 $generated@@29) $generated@@30))
 :pattern ( ($generated@@24 $generated@@28 $generated@@29) ($generated@@25 $generated@@28 $generated@@30))
)))
(assert (forall (($generated@@31 T@U) ($generated@@32 T@U) ($generated@@33 T@U) ) (! (= ($generated@@25 ($generated@@24 $generated@@31 $generated@@32) $generated@@33)  (or (= $generated@@33 $generated@@32) ($generated@@25 $generated@@31 $generated@@33)))
 :pattern ( ($generated@@25 ($generated@@24 $generated@@31 $generated@@32) $generated@@33))
)))
(assert (forall (($generated@@35 T@U) ) (!  (not ($generated@@25 $generated@@34 $generated@@35))
 :pattern ( ($generated@@25 $generated@@34 $generated@@35))
)))
(assert (= ($generated@@36 $generated@@37) 0))
(assert (= ($generated@@38 $generated@@39) $generated@@5))
(assert (= ($generated@@7 $generated@@41) 3))
(assert ($generated@@40 $generated@@41 $generated@@39 $generated@@42))
(assert  (and (and (and (and (and (and (and (forall (($generated@@53 T@T) ($generated@@54 T@T) ($generated@@55 T@U) ($generated@@56 T@U) ($generated@@57 T@U) ) (! (= ($generated@@44 $generated@@53 $generated@@54 ($generated@@50 $generated@@53 $generated@@54 $generated@@56 $generated@@57 $generated@@55) $generated@@57) $generated@@55)
 :weight 0
)) (forall (($generated@@58 T@T) ($generated@@59 T@T) ($generated@@60 T@U) ($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ) (!  (or (= $generated@@62 $generated@@63) (= ($generated@@44 $generated@@58 $generated@@59 ($generated@@50 $generated@@58 $generated@@59 $generated@@61 $generated@@62 $generated@@60) $generated@@63) ($generated@@44 $generated@@58 $generated@@59 $generated@@61 $generated@@63)))
 :weight 0
))) (= ($generated@@7 $generated@@45) 4)) (= ($generated@@7 $generated@@46) 5)) (= ($generated@@7 $generated@@47) 6)) (forall (($generated@@64 T@T) ($generated@@65 T@T) ) (= ($generated@@7 ($generated@@48 $generated@@64 $generated@@65)) 7))) (forall (($generated@@66 T@T) ($generated@@67 T@T) ) (! (= ($generated@@51 ($generated@@48 $generated@@66 $generated@@67)) $generated@@66)
 :pattern ( ($generated@@48 $generated@@66 $generated@@67))
))) (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (! (= ($generated@@52 ($generated@@48 $generated@@68 $generated@@69)) $generated@@69)
 :pattern ( ($generated@@48 $generated@@68 $generated@@69))
))))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ) (!  (=> ($generated@@43 $generated@@70 $generated@@71) (forall (($generated@@72 T@U) ) (!  (=> ($generated@@12 ($generated@@49 $generated@@8 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@47 ($generated@@48 $generated@@45 $generated@@46) $generated@@70 $generated@@72) $generated@@3))) ($generated@@12 ($generated@@49 $generated@@8 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@47 ($generated@@48 $generated@@45 $generated@@46) $generated@@71 $generated@@72) $generated@@3))))
 :pattern ( ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@47 ($generated@@48 $generated@@45 $generated@@46) $generated@@71 $generated@@72) $generated@@3))
)))
 :pattern ( ($generated@@43 $generated@@70 $generated@@71))
)))
(assert (forall (($generated@@74 Int) ) (! (= ($generated@@73 $generated@@74) $generated@@74)
 :pattern ( ($generated@@73 $generated@@74))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@T) ) (! (= ($generated@@75 $generated@@77 $generated@@76) $generated@@76)
 :pattern ( ($generated@@75 $generated@@77 $generated@@76))
)))
(assert (= ($generated@@7 $generated@@78) 8))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (!  (=> (and ($generated@@40 $generated@@78 $generated@@82 ($generated@@80 $generated@@84)) ($generated@@81 $generated@@83 $generated@@84)) ($generated@@40 $generated@@78 ($generated@@79 $generated@@82 $generated@@83) ($generated@@80 $generated@@84)))
 :pattern ( ($generated@@40 $generated@@78 ($generated@@79 $generated@@82 $generated@@83) ($generated@@80 $generated@@84)))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@T) ) (! (= ($generated@@85 $generated@@87 ($generated@@49 $generated@@87 $generated@@86)) $generated@@86)
 :pattern ( ($generated@@49 $generated@@87 $generated@@86))
)))
(assert (= ($generated@@7 $generated@@88) 9))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ) (! (= ($generated@@40 $generated@@88 $generated@@90 ($generated@@89 $generated@@91)) (forall (($generated@@92 T@U) ) (!  (=> ($generated@@25 $generated@@90 $generated@@92) ($generated@@81 $generated@@92 $generated@@91))
 :pattern ( ($generated@@25 $generated@@90 $generated@@92))
)))
 :pattern ( ($generated@@40 $generated@@88 $generated@@90 ($generated@@89 $generated@@91)))
)))
(assert (forall (($generated@@93 T@U) ($generated@@94 T@U) ) (! (= ($generated@@36 ($generated@@79 $generated@@93 $generated@@94)) (+ 1 ($generated@@36 $generated@@93)))
 :pattern ( ($generated@@79 $generated@@93 $generated@@94))
)))
(assert (forall (($generated@@95 T@U) ) (!  (=> ($generated@@81 $generated@@95 $generated@@42) (and (= ($generated@@85 $generated@@41 ($generated@@49 $generated@@41 $generated@@95)) $generated@@95) ($generated@@40 $generated@@41 ($generated@@49 $generated@@41 $generated@@95) $generated@@42)))
 :pattern ( ($generated@@81 $generated@@95 $generated@@42))
)))
(assert (forall (($generated@@97 T@U) ($generated@@98 Int) ($generated@@99 T@U) ) (!  (and (=> (= $generated@@98 ($generated@@36 $generated@@97)) (= ($generated@@96 ($generated@@79 $generated@@97 $generated@@99) $generated@@98) $generated@@99)) (=> (or (not (= $generated@@98 ($generated@@36 $generated@@97))) (not true)) (= ($generated@@96 ($generated@@79 $generated@@97 $generated@@99) $generated@@98) ($generated@@96 $generated@@97 $generated@@98))))
 :pattern ( ($generated@@96 ($generated@@79 $generated@@97 $generated@@99) $generated@@98))
)))
(assert (forall (($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (=> (or (not (= $generated@@100 $generated@@102)) (not true)) (=> (and ($generated@@43 $generated@@100 $generated@@101) ($generated@@43 $generated@@101 $generated@@102)) ($generated@@43 $generated@@100 $generated@@102)))
 :pattern ( ($generated@@43 $generated@@100 $generated@@101) ($generated@@43 $generated@@101 $generated@@102))
)))
(assert (forall (($generated@@103 T@U) ) (!  (=> ($generated@@81 $generated@@103 $generated) (and (= ($generated@@85 $generated@@9 ($generated@@49 $generated@@9 $generated@@103)) $generated@@103) ($generated@@40 $generated@@9 ($generated@@49 $generated@@9 $generated@@103) $generated)))
 :pattern ( ($generated@@81 $generated@@103 $generated))
)))
(assert (forall (($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@T) ) (! (= ($generated@@81 ($generated@@85 $generated@@106 $generated@@104) $generated@@105) ($generated@@40 $generated@@106 $generated@@104 $generated@@105))
 :pattern ( ($generated@@81 ($generated@@85 $generated@@106 $generated@@104) $generated@@105))
)))
(assert (forall (($generated@@107 T@U) ) (! (<= 0 ($generated@@36 $generated@@107))
 :pattern ( ($generated@@36 $generated@@107))
)))
(assert (forall (($generated@@109 T@U) ) (! (= ($generated@@108 ($generated@@89 $generated@@109)) $generated@@109)
 :pattern ( ($generated@@89 $generated@@109))
)))
(assert (forall (($generated@@110 T@U) ) (! (= ($generated@@23 ($generated@@89 $generated@@110)) $generated@@1)
 :pattern ( ($generated@@89 $generated@@110))
)))
(assert (forall (($generated@@112 T@U) ) (! (= ($generated@@111 ($generated@@80 $generated@@112)) $generated@@112)
 :pattern ( ($generated@@80 $generated@@112))
)))
(assert (forall (($generated@@113 T@U) ) (! (= ($generated@@23 ($generated@@80 $generated@@113)) $generated@@2)
 :pattern ( ($generated@@80 $generated@@113))
)))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@T) ) (! (= ($generated@@49 $generated@@115 ($generated@@85 $generated@@115 $generated@@114)) $generated@@114)
 :pattern ( ($generated@@85 $generated@@115 $generated@@114))
)))
(assert  (and (forall (($generated@@119 T@T) ($generated@@120 T@T) ($generated@@121 T@T) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (! (= ($generated@@116 $generated@@119 $generated@@120 $generated@@121 ($generated@@118 $generated@@119 $generated@@120 $generated@@121 $generated@@123 $generated@@124 $generated@@125 $generated@@122) $generated@@124 $generated@@125) $generated@@122)
 :weight 0
)) (and (forall (($generated@@126 T@T) ($generated@@127 T@T) ($generated@@128 T@T) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (!  (or (= $generated@@131 $generated@@133) (= ($generated@@116 $generated@@126 $generated@@127 $generated@@128 ($generated@@118 $generated@@126 $generated@@127 $generated@@128 $generated@@130 $generated@@131 $generated@@132 $generated@@129) $generated@@133 $generated@@134) ($generated@@116 $generated@@126 $generated@@127 $generated@@128 $generated@@130 $generated@@133 $generated@@134)))
 :weight 0
)) (forall (($generated@@135 T@T) ($generated@@136 T@T) ($generated@@137 T@T) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ) (!  (or (= $generated@@141 $generated@@143) (= ($generated@@116 $generated@@135 $generated@@136 $generated@@137 ($generated@@118 $generated@@135 $generated@@136 $generated@@137 $generated@@139 $generated@@140 $generated@@141 $generated@@138) $generated@@142 $generated@@143) ($generated@@116 $generated@@135 $generated@@136 $generated@@137 $generated@@139 $generated@@142 $generated@@143)))
 :weight 0
)))))
(assert (forall (($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ($generated@@147 Bool) ($generated@@148 T@U) ($generated@@149 T@U) ) (! (= ($generated@@12 ($generated@@116 $generated@@47 $generated@@45 $generated@@8 ($generated@@117 $generated@@144 $generated@@145 $generated@@146 $generated@@147) $generated@@148 $generated@@149))  (=> (and (or (not (= $generated@@148 $generated@@144)) (not true)) ($generated@@12 ($generated@@49 $generated@@8 ($generated@@44 $generated@@45 $generated@@46 ($generated@@44 $generated@@47 ($generated@@48 $generated@@45 $generated@@46) $generated@@145 $generated@@148) $generated@@146)))) $generated@@147))
 :pattern ( ($generated@@116 $generated@@47 $generated@@45 $generated@@8 ($generated@@117 $generated@@144 $generated@@145 $generated@@146 $generated@@147) $generated@@148 $generated@@149))
)))
(assert (forall (($generated@@152 T@U) ($generated@@153 T@U) ) (!  (and (= ($generated@@150 ($generated@@79 $generated@@152 $generated@@153)) $generated@@152) (= ($generated@@151 ($generated@@79 $generated@@152 $generated@@153)) $generated@@153))
 :pattern ( ($generated@@79 $generated@@152 $generated@@153))
)))
(assert (forall (($generated@@154 T@U) ($generated@@155 T@U) ) (!  (=> ($generated@@81 $generated@@154 ($generated@@89 $generated@@155)) (and (= ($generated@@85 $generated@@88 ($generated@@49 $generated@@88 $generated@@154)) $generated@@154) ($generated@@40 $generated@@88 ($generated@@49 $generated@@88 $generated@@154) ($generated@@89 $generated@@155))))
 :pattern ( ($generated@@81 $generated@@154 ($generated@@89 $generated@@155)))
)))
(assert (forall (($generated@@156 T@U) ($generated@@157 T@U) ) (!  (=> ($generated@@81 $generated@@156 ($generated@@80 $generated@@157)) (and (= ($generated@@85 $generated@@78 ($generated@@49 $generated@@78 $generated@@156)) $generated@@156) ($generated@@40 $generated@@78 ($generated@@49 $generated@@78 $generated@@156) ($generated@@80 $generated@@157))))
 :pattern ( ($generated@@81 $generated@@156 ($generated@@80 $generated@@157)))
)))
(assert (= ($generated@@23 $generated@@42) $generated@@4))
(assert (= ($generated@@158 $generated@@42) $generated@@6))
(assert (= $generated@@39 ($generated@@75 $generated@@41 $generated@@39)))
(assert (forall (($generated@@159 Int) ) (! (= ($generated@@85 $generated@@9 ($generated@@13 ($generated@@73 $generated@@159))) ($generated@@75 $generated@@46 ($generated@@85 $generated@@9 ($generated@@13 $generated@@159))))
 :pattern ( ($generated@@85 $generated@@9 ($generated@@13 ($generated@@73 $generated@@159))))
)))
(assert (forall (($generated@@160 T@U) ($generated@@161 T@T) ) (! (= ($generated@@85 $generated@@161 ($generated@@75 $generated@@161 $generated@@160)) ($generated@@75 $generated@@46 ($generated@@85 $generated@@161 $generated@@160)))
 :pattern ( ($generated@@85 $generated@@161 ($generated@@75 $generated@@161 $generated@@160)))
)))
(assert (forall (($generated@@162 T@U) ) (!  (=> (= ($generated@@36 $generated@@162) 0) (= $generated@@162 $generated@@37))
 :pattern ( ($generated@@36 $generated@@162))
)))
(assert (forall (($generated@@163 T@U) ($generated@@164 T@U) ) (! (= ($generated@@40 $generated@@78 $generated@@163 ($generated@@80 $generated@@164)) (forall (($generated@@165 Int) ) (!  (=> (and (<= 0 $generated@@165) (< $generated@@165 ($generated@@36 $generated@@163))) ($generated@@81 ($generated@@96 $generated@@163 $generated@@165) $generated@@164))
 :pattern ( ($generated@@96 $generated@@163 $generated@@165))
)))
 :pattern ( ($generated@@40 $generated@@78 $generated@@163 ($generated@@80 $generated@@164)))
)))
(assert (forall (($generated@@166 T@U) ) (! ($generated@@40 $generated@@9 $generated@@166 $generated)
 :pattern ( ($generated@@40 $generated@@9 $generated@@166 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 2) true)
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
