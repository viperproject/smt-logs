(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TInt () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.array17? () T@U)
(declare-fun Tagclass._System.array17 () T@U)
(declare-fun tytagFamily$array17 () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun _System.array17.Length0 (T@U) Int)
(declare-fun Tclass._System.array17? (T@U) T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun _System.array17.Length1 (T@U) Int)
(declare-fun _System.array17.Length2 (T@U) Int)
(declare-fun _System.array17.Length3 (T@U) Int)
(declare-fun _System.array17.Length4 (T@U) Int)
(declare-fun _System.array17.Length5 (T@U) Int)
(declare-fun _System.array17.Length6 (T@U) Int)
(declare-fun _System.array17.Length7 (T@U) Int)
(declare-fun _System.array17.Length8 (T@U) Int)
(declare-fun _System.array17.Length9 (T@U) Int)
(declare-fun _System.array17.Length10 (T@U) Int)
(declare-fun _System.array17.Length11 (T@U) Int)
(declare-fun _System.array17.Length12 (T@U) Int)
(declare-fun _System.array17.Length13 (T@U) Int)
(declare-fun _System.array17.Length14 (T@U) Int)
(declare-fun _System.array17.Length15 (T@U) Int)
(declare-fun _System.array17.Length16 (T@U) Int)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._System.array17 (T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun Tclass._System.array17?_0 (T@U) T@U)
(declare-fun Tclass._System.array17_0 (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TInt TagBool TagInt alloc Tagclass._System.array17? Tagclass._System.array17 tytagFamily$array17)
)
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TInt) TagInt))
(assert (forall ((_System.array17$arg T@U) ($o T@U) ) (!  (=> (and (or (not (= $o null)) (not true)) (= (dtype $o) (Tclass._System.array17? _System.array17$arg))) ($Is intType (int_2_U (_System.array17.Length0 $o)) TInt))
 :pattern ( (_System.array17.Length0 $o) (Tclass._System.array17? _System.array17$arg))
)))
(assert (forall ((_System.array17$arg@@0 T@U) ($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (= (dtype $o@@0) (Tclass._System.array17? _System.array17$arg@@0))) ($Is intType (int_2_U (_System.array17.Length1 $o@@0)) TInt))
 :pattern ( (_System.array17.Length1 $o@@0) (Tclass._System.array17? _System.array17$arg@@0))
)))
(assert (forall ((_System.array17$arg@@1 T@U) ($o@@1 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (= (dtype $o@@1) (Tclass._System.array17? _System.array17$arg@@1))) ($Is intType (int_2_U (_System.array17.Length2 $o@@1)) TInt))
 :pattern ( (_System.array17.Length2 $o@@1) (Tclass._System.array17? _System.array17$arg@@1))
)))
(assert (forall ((_System.array17$arg@@2 T@U) ($o@@2 T@U) ) (!  (=> (and (or (not (= $o@@2 null)) (not true)) (= (dtype $o@@2) (Tclass._System.array17? _System.array17$arg@@2))) ($Is intType (int_2_U (_System.array17.Length3 $o@@2)) TInt))
 :pattern ( (_System.array17.Length3 $o@@2) (Tclass._System.array17? _System.array17$arg@@2))
)))
(assert (forall ((_System.array17$arg@@3 T@U) ($o@@3 T@U) ) (!  (=> (and (or (not (= $o@@3 null)) (not true)) (= (dtype $o@@3) (Tclass._System.array17? _System.array17$arg@@3))) ($Is intType (int_2_U (_System.array17.Length4 $o@@3)) TInt))
 :pattern ( (_System.array17.Length4 $o@@3) (Tclass._System.array17? _System.array17$arg@@3))
)))
(assert (forall ((_System.array17$arg@@4 T@U) ($o@@4 T@U) ) (!  (=> (and (or (not (= $o@@4 null)) (not true)) (= (dtype $o@@4) (Tclass._System.array17? _System.array17$arg@@4))) ($Is intType (int_2_U (_System.array17.Length5 $o@@4)) TInt))
 :pattern ( (_System.array17.Length5 $o@@4) (Tclass._System.array17? _System.array17$arg@@4))
)))
(assert (forall ((_System.array17$arg@@5 T@U) ($o@@5 T@U) ) (!  (=> (and (or (not (= $o@@5 null)) (not true)) (= (dtype $o@@5) (Tclass._System.array17? _System.array17$arg@@5))) ($Is intType (int_2_U (_System.array17.Length6 $o@@5)) TInt))
 :pattern ( (_System.array17.Length6 $o@@5) (Tclass._System.array17? _System.array17$arg@@5))
)))
(assert (forall ((_System.array17$arg@@6 T@U) ($o@@6 T@U) ) (!  (=> (and (or (not (= $o@@6 null)) (not true)) (= (dtype $o@@6) (Tclass._System.array17? _System.array17$arg@@6))) ($Is intType (int_2_U (_System.array17.Length7 $o@@6)) TInt))
 :pattern ( (_System.array17.Length7 $o@@6) (Tclass._System.array17? _System.array17$arg@@6))
)))
(assert (forall ((_System.array17$arg@@7 T@U) ($o@@7 T@U) ) (!  (=> (and (or (not (= $o@@7 null)) (not true)) (= (dtype $o@@7) (Tclass._System.array17? _System.array17$arg@@7))) ($Is intType (int_2_U (_System.array17.Length8 $o@@7)) TInt))
 :pattern ( (_System.array17.Length8 $o@@7) (Tclass._System.array17? _System.array17$arg@@7))
)))
(assert (forall ((_System.array17$arg@@8 T@U) ($o@@8 T@U) ) (!  (=> (and (or (not (= $o@@8 null)) (not true)) (= (dtype $o@@8) (Tclass._System.array17? _System.array17$arg@@8))) ($Is intType (int_2_U (_System.array17.Length9 $o@@8)) TInt))
 :pattern ( (_System.array17.Length9 $o@@8) (Tclass._System.array17? _System.array17$arg@@8))
)))
(assert (forall ((_System.array17$arg@@9 T@U) ($o@@9 T@U) ) (!  (=> (and (or (not (= $o@@9 null)) (not true)) (= (dtype $o@@9) (Tclass._System.array17? _System.array17$arg@@9))) ($Is intType (int_2_U (_System.array17.Length10 $o@@9)) TInt))
 :pattern ( (_System.array17.Length10 $o@@9) (Tclass._System.array17? _System.array17$arg@@9))
)))
(assert (forall ((_System.array17$arg@@10 T@U) ($o@@10 T@U) ) (!  (=> (and (or (not (= $o@@10 null)) (not true)) (= (dtype $o@@10) (Tclass._System.array17? _System.array17$arg@@10))) ($Is intType (int_2_U (_System.array17.Length11 $o@@10)) TInt))
 :pattern ( (_System.array17.Length11 $o@@10) (Tclass._System.array17? _System.array17$arg@@10))
)))
(assert (forall ((_System.array17$arg@@11 T@U) ($o@@11 T@U) ) (!  (=> (and (or (not (= $o@@11 null)) (not true)) (= (dtype $o@@11) (Tclass._System.array17? _System.array17$arg@@11))) ($Is intType (int_2_U (_System.array17.Length12 $o@@11)) TInt))
 :pattern ( (_System.array17.Length12 $o@@11) (Tclass._System.array17? _System.array17$arg@@11))
)))
(assert (forall ((_System.array17$arg@@12 T@U) ($o@@12 T@U) ) (!  (=> (and (or (not (= $o@@12 null)) (not true)) (= (dtype $o@@12) (Tclass._System.array17? _System.array17$arg@@12))) ($Is intType (int_2_U (_System.array17.Length13 $o@@12)) TInt))
 :pattern ( (_System.array17.Length13 $o@@12) (Tclass._System.array17? _System.array17$arg@@12))
)))
(assert (forall ((_System.array17$arg@@13 T@U) ($o@@13 T@U) ) (!  (=> (and (or (not (= $o@@13 null)) (not true)) (= (dtype $o@@13) (Tclass._System.array17? _System.array17$arg@@13))) ($Is intType (int_2_U (_System.array17.Length14 $o@@13)) TInt))
 :pattern ( (_System.array17.Length14 $o@@13) (Tclass._System.array17? _System.array17$arg@@13))
)))
(assert (forall ((_System.array17$arg@@14 T@U) ($o@@14 T@U) ) (!  (=> (and (or (not (= $o@@14 null)) (not true)) (= (dtype $o@@14) (Tclass._System.array17? _System.array17$arg@@14))) ($Is intType (int_2_U (_System.array17.Length15 $o@@14)) TInt))
 :pattern ( (_System.array17.Length15 $o@@14) (Tclass._System.array17? _System.array17$arg@@14))
)))
(assert (forall ((_System.array17$arg@@15 T@U) ($o@@15 T@U) ) (!  (=> (and (or (not (= $o@@15 null)) (not true)) (= (dtype $o@@15) (Tclass._System.array17? _System.array17$arg@@15))) ($Is intType (int_2_U (_System.array17.Length16 $o@@15)) TInt))
 :pattern ( (_System.array17.Length16 $o@@15) (Tclass._System.array17? _System.array17$arg@@15))
)))
(assert (= (Ctor refType) 3))
(assert (forall ((_System.array17$arg@@16 T@U) (|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._System.array17 _System.array17$arg@@16) $h) ($IsAlloc refType |c#0| (Tclass._System.array17? _System.array17$arg@@16) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array17 _System.array17$arg@@16) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array17? _System.array17$arg@@16) $h))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((_System.array17$arg@@17 T@U) ($o@@16 T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType $o@@16 (Tclass._System.array17? _System.array17$arg@@17) $h@@0)  (or (= $o@@16 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@0 $o@@16) alloc)))))
 :pattern ( ($IsAlloc refType $o@@16 (Tclass._System.array17? _System.array17$arg@@17) $h@@0))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((_System.array17$arg@@18 T@U) (|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| (Tclass._System.array17 _System.array17$arg@@18))  (and ($Is refType |c#0@@0| (Tclass._System.array17? _System.array17$arg@@18)) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| (Tclass._System.array17 _System.array17$arg@@18)))
 :pattern ( ($Is refType |c#0@@0| (Tclass._System.array17? _System.array17$arg@@18)))
)))
(assert (forall ((h@@0 T@U) (k@@0 T@U) (v T@U) (t T@U) (T@@1 T@T) ) (!  (=> ($HeapSucc h@@0 k@@0) (=> ($IsAlloc T@@1 v t h@@0) ($IsAlloc T@@1 v t k@@0)))
 :pattern ( ($HeapSucc h@@0 k@@0) ($IsAlloc T@@1 v t h@@0))
)))
(assert (forall ((_System.array17$arg@@19 T@U) ) (!  (and (= (Tag (Tclass._System.array17? _System.array17$arg@@19)) Tagclass._System.array17?) (= (TagFamily (Tclass._System.array17? _System.array17$arg@@19)) tytagFamily$array17))
 :pattern ( (Tclass._System.array17? _System.array17$arg@@19))
)))
(assert (forall ((_System.array17$arg@@20 T@U) ) (!  (and (= (Tag (Tclass._System.array17 _System.array17$arg@@20)) Tagclass._System.array17) (= (TagFamily (Tclass._System.array17 _System.array17$arg@@20)) tytagFamily$array17))
 :pattern ( (Tclass._System.array17 _System.array17$arg@@20))
)))
(assert (forall ((_System.array17$arg@@21 T@U) ($o@@17 T@U) ) (! (= ($Is refType $o@@17 (Tclass._System.array17? _System.array17$arg@@21))  (or (= $o@@17 null) (= (dtype $o@@17) (Tclass._System.array17? _System.array17$arg@@21))))
 :pattern ( ($Is refType $o@@17 (Tclass._System.array17? _System.array17$arg@@21)))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((o@@0 T@U) ) (! (<= 0 (_System.array17.Length0 o@@0))
 :pattern ( (_System.array17.Length0 o@@0))
)))
(assert (forall ((o@@1 T@U) ) (! (<= 0 (_System.array17.Length1 o@@1))
 :pattern ( (_System.array17.Length1 o@@1))
)))
(assert (forall ((o@@2 T@U) ) (! (<= 0 (_System.array17.Length2 o@@2))
 :pattern ( (_System.array17.Length2 o@@2))
)))
(assert (forall ((o@@3 T@U) ) (! (<= 0 (_System.array17.Length3 o@@3))
 :pattern ( (_System.array17.Length3 o@@3))
)))
(assert (forall ((o@@4 T@U) ) (! (<= 0 (_System.array17.Length4 o@@4))
 :pattern ( (_System.array17.Length4 o@@4))
)))
(assert (forall ((o@@5 T@U) ) (! (<= 0 (_System.array17.Length5 o@@5))
 :pattern ( (_System.array17.Length5 o@@5))
)))
(assert (forall ((o@@6 T@U) ) (! (<= 0 (_System.array17.Length6 o@@6))
 :pattern ( (_System.array17.Length6 o@@6))
)))
(assert (forall ((o@@7 T@U) ) (! (<= 0 (_System.array17.Length7 o@@7))
 :pattern ( (_System.array17.Length7 o@@7))
)))
(assert (forall ((o@@8 T@U) ) (! (<= 0 (_System.array17.Length8 o@@8))
 :pattern ( (_System.array17.Length8 o@@8))
)))
(assert (forall ((o@@9 T@U) ) (! (<= 0 (_System.array17.Length9 o@@9))
 :pattern ( (_System.array17.Length9 o@@9))
)))
(assert (forall ((o@@10 T@U) ) (! (<= 0 (_System.array17.Length10 o@@10))
 :pattern ( (_System.array17.Length10 o@@10))
)))
(assert (forall ((o@@11 T@U) ) (! (<= 0 (_System.array17.Length11 o@@11))
 :pattern ( (_System.array17.Length11 o@@11))
)))
(assert (forall ((o@@12 T@U) ) (! (<= 0 (_System.array17.Length12 o@@12))
 :pattern ( (_System.array17.Length12 o@@12))
)))
(assert (forall ((o@@13 T@U) ) (! (<= 0 (_System.array17.Length13 o@@13))
 :pattern ( (_System.array17.Length13 o@@13))
)))
(assert (forall ((o@@14 T@U) ) (! (<= 0 (_System.array17.Length14 o@@14))
 :pattern ( (_System.array17.Length14 o@@14))
)))
(assert (forall ((o@@15 T@U) ) (! (<= 0 (_System.array17.Length15 o@@15))
 :pattern ( (_System.array17.Length15 o@@15))
)))
(assert (forall ((o@@16 T@U) ) (! (<= 0 (_System.array17.Length16 o@@16))
 :pattern ( (_System.array17.Length16 o@@16))
)))
(assert (forall ((_System.array17$arg@@22 T@U) ) (! (= (Tclass._System.array17?_0 (Tclass._System.array17? _System.array17$arg@@22)) _System.array17$arg@@22)
 :pattern ( (Tclass._System.array17? _System.array17$arg@@22))
)))
(assert (forall ((_System.array17$arg@@23 T@U) ) (! (= (Tclass._System.array17_0 (Tclass._System.array17 _System.array17$arg@@23)) _System.array17$arg@@23)
 :pattern ( (Tclass._System.array17 _System.array17$arg@@23))
)))
(assert (forall ((x@@5 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@5)) x@@5)
 :pattern ( ($Box T@@2 x@@5))
)))
(assert (forall ((_System.array17$arg@@24 T@U) ($h@@1 T@U) ($o@@18 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@1) (and (or (not (= $o@@18 null)) (not true)) (= (dtype $o@@18) (Tclass._System.array17? _System.array17$arg@@24)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@18) alloc)))) ($IsAlloc intType (int_2_U (_System.array17.Length0 $o@@18)) TInt $h@@1))
 :pattern ( (_System.array17.Length0 $o@@18) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@18) alloc)) (Tclass._System.array17? _System.array17$arg@@24))
)))
(assert (forall ((_System.array17$arg@@25 T@U) ($h@@2 T@U) ($o@@19 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@2) (and (or (not (= $o@@19 null)) (not true)) (= (dtype $o@@19) (Tclass._System.array17? _System.array17$arg@@25)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@19) alloc)))) ($IsAlloc intType (int_2_U (_System.array17.Length1 $o@@19)) TInt $h@@2))
 :pattern ( (_System.array17.Length1 $o@@19) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o@@19) alloc)) (Tclass._System.array17? _System.array17$arg@@25))
)))
(assert (forall ((_System.array17$arg@@26 T@U) ($h@@3 T@U) ($o@@20 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@3) (and (or (not (= $o@@20 null)) (not true)) (= (dtype $o@@20) (Tclass._System.array17? _System.array17$arg@@26)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@20) alloc)))) ($IsAlloc intType (int_2_U (_System.array17.Length2 $o@@20)) TInt $h@@3))
 :pattern ( (_System.array17.Length2 $o@@20) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@20) alloc)) (Tclass._System.array17? _System.array17$arg@@26))
)))
(assert (forall ((_System.array17$arg@@27 T@U) ($h@@4 T@U) ($o@@21 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@4) (and (or (not (= $o@@21 null)) (not true)) (= (dtype $o@@21) (Tclass._System.array17? _System.array17$arg@@27)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@21) alloc)))) ($IsAlloc intType (int_2_U (_System.array17.Length3 $o@@21)) TInt $h@@4))
 :pattern ( (_System.array17.Length3 $o@@21) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@21) alloc)) (Tclass._System.array17? _System.array17$arg@@27))
)))
(assert (forall ((_System.array17$arg@@28 T@U) ($h@@5 T@U) ($o@@22 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@5) (and (or (not (= $o@@22 null)) (not true)) (= (dtype $o@@22) (Tclass._System.array17? _System.array17$arg@@28)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@22) alloc)))) ($IsAlloc intType (int_2_U (_System.array17.Length4 $o@@22)) TInt $h@@5))
 :pattern ( (_System.array17.Length4 $o@@22) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@22) alloc)) (Tclass._System.array17? _System.array17$arg@@28))
)))
(assert (forall ((_System.array17$arg@@29 T@U) ($h@@6 T@U) ($o@@23 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@6) (and (or (not (= $o@@23 null)) (not true)) (= (dtype $o@@23) (Tclass._System.array17? _System.array17$arg@@29)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@23) alloc)))) ($IsAlloc intType (int_2_U (_System.array17.Length5 $o@@23)) TInt $h@@6))
 :pattern ( (_System.array17.Length5 $o@@23) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@23) alloc)) (Tclass._System.array17? _System.array17$arg@@29))
)))
(assert (forall ((_System.array17$arg@@30 T@U) ($h@@7 T@U) ($o@@24 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@7) (and (or (not (= $o@@24 null)) (not true)) (= (dtype $o@@24) (Tclass._System.array17? _System.array17$arg@@30)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@24) alloc)))) ($IsAlloc intType (int_2_U (_System.array17.Length6 $o@@24)) TInt $h@@7))
 :pattern ( (_System.array17.Length6 $o@@24) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@24) alloc)) (Tclass._System.array17? _System.array17$arg@@30))
)))
(assert (forall ((_System.array17$arg@@31 T@U) ($h@@8 T@U) ($o@@25 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@8) (and (or (not (= $o@@25 null)) (not true)) (= (dtype $o@@25) (Tclass._System.array17? _System.array17$arg@@31)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@25) alloc)))) ($IsAlloc intType (int_2_U (_System.array17.Length7 $o@@25)) TInt $h@@8))
 :pattern ( (_System.array17.Length7 $o@@25) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@25) alloc)) (Tclass._System.array17? _System.array17$arg@@31))
)))
(assert (forall ((_System.array17$arg@@32 T@U) ($h@@9 T@U) ($o@@26 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@9) (and (or (not (= $o@@26 null)) (not true)) (= (dtype $o@@26) (Tclass._System.array17? _System.array17$arg@@32)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@26) alloc)))) ($IsAlloc intType (int_2_U (_System.array17.Length8 $o@@26)) TInt $h@@9))
 :pattern ( (_System.array17.Length8 $o@@26) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@26) alloc)) (Tclass._System.array17? _System.array17$arg@@32))
)))
(assert (forall ((_System.array17$arg@@33 T@U) ($h@@10 T@U) ($o@@27 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@10) (and (or (not (= $o@@27 null)) (not true)) (= (dtype $o@@27) (Tclass._System.array17? _System.array17$arg@@33)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@27) alloc)))) ($IsAlloc intType (int_2_U (_System.array17.Length9 $o@@27)) TInt $h@@10))
 :pattern ( (_System.array17.Length9 $o@@27) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@27) alloc)) (Tclass._System.array17? _System.array17$arg@@33))
)))
(assert (forall ((_System.array17$arg@@34 T@U) ($h@@11 T@U) ($o@@28 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@11) (and (or (not (= $o@@28 null)) (not true)) (= (dtype $o@@28) (Tclass._System.array17? _System.array17$arg@@34)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@28) alloc)))) ($IsAlloc intType (int_2_U (_System.array17.Length10 $o@@28)) TInt $h@@11))
 :pattern ( (_System.array17.Length10 $o@@28) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@28) alloc)) (Tclass._System.array17? _System.array17$arg@@34))
)))
(assert (forall ((_System.array17$arg@@35 T@U) ($h@@12 T@U) ($o@@29 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@12) (and (or (not (= $o@@29 null)) (not true)) (= (dtype $o@@29) (Tclass._System.array17? _System.array17$arg@@35)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@29) alloc)))) ($IsAlloc intType (int_2_U (_System.array17.Length11 $o@@29)) TInt $h@@12))
 :pattern ( (_System.array17.Length11 $o@@29) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@29) alloc)) (Tclass._System.array17? _System.array17$arg@@35))
)))
(assert (forall ((_System.array17$arg@@36 T@U) ($h@@13 T@U) ($o@@30 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@13) (and (or (not (= $o@@30 null)) (not true)) (= (dtype $o@@30) (Tclass._System.array17? _System.array17$arg@@36)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@13 $o@@30) alloc)))) ($IsAlloc intType (int_2_U (_System.array17.Length12 $o@@30)) TInt $h@@13))
 :pattern ( (_System.array17.Length12 $o@@30) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@13 $o@@30) alloc)) (Tclass._System.array17? _System.array17$arg@@36))
)))
(assert (forall ((_System.array17$arg@@37 T@U) ($h@@14 T@U) ($o@@31 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@14) (and (or (not (= $o@@31 null)) (not true)) (= (dtype $o@@31) (Tclass._System.array17? _System.array17$arg@@37)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@14 $o@@31) alloc)))) ($IsAlloc intType (int_2_U (_System.array17.Length13 $o@@31)) TInt $h@@14))
 :pattern ( (_System.array17.Length13 $o@@31) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@14 $o@@31) alloc)) (Tclass._System.array17? _System.array17$arg@@37))
)))
(assert (forall ((_System.array17$arg@@38 T@U) ($h@@15 T@U) ($o@@32 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@15) (and (or (not (= $o@@32 null)) (not true)) (= (dtype $o@@32) (Tclass._System.array17? _System.array17$arg@@38)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@15 $o@@32) alloc)))) ($IsAlloc intType (int_2_U (_System.array17.Length14 $o@@32)) TInt $h@@15))
 :pattern ( (_System.array17.Length14 $o@@32) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@15 $o@@32) alloc)) (Tclass._System.array17? _System.array17$arg@@38))
)))
(assert (forall ((_System.array17$arg@@39 T@U) ($h@@16 T@U) ($o@@33 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@16) (and (or (not (= $o@@33 null)) (not true)) (= (dtype $o@@33) (Tclass._System.array17? _System.array17$arg@@39)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@16 $o@@33) alloc)))) ($IsAlloc intType (int_2_U (_System.array17.Length15 $o@@33)) TInt $h@@16))
 :pattern ( (_System.array17.Length15 $o@@33) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@16 $o@@33) alloc)) (Tclass._System.array17? _System.array17$arg@@39))
)))
(assert (forall ((_System.array17$arg@@40 T@U) ($h@@17 T@U) ($o@@34 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@17) (and (or (not (= $o@@34 null)) (not true)) (= (dtype $o@@34) (Tclass._System.array17? _System.array17$arg@@40)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@17 $o@@34) alloc)))) ($IsAlloc intType (int_2_U (_System.array17.Length16 $o@@34)) TInt $h@@17))
 :pattern ( (_System.array17.Length16 $o@@34) ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@17 $o@@34) alloc)) (Tclass._System.array17? _System.array17$arg@@40))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@35 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@35 $f))  (=> (and (or (not (= $o@@35 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@35) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@35 $f))
)))
(assert (forall ((h@@1 T@U) (r T@U) (f T@U) (x@@6 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@1 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@1 r) f x@@6))) ($HeapSucc h@@1 (MapType0Store refType (MapType0Type FieldType BoxType) h@@1 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@1 r) f x@@6))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@1 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@1 r) f x@@6)))
)))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@3 T@T) ) (! (= ($Box T@@3 (Lit T@@3 x@@8)) (Lit BoxType ($Box T@@3 x@@8)))
 :pattern ( ($Box T@@3 (Lit T@@3 x@@8)))
)))
(assert (forall ((h@@2 T@U) (v@@0 T@U) ) (! ($IsAlloc intType v@@0 TInt h@@2)
 :pattern ( ($IsAlloc intType v@@0 TInt h@@2))
)))
(assert (forall ((h@@3 T@U) (v@@1 T@U) ) (! ($IsAlloc boolType v@@1 TBool h@@3)
 :pattern ( ($IsAlloc boolType v@@1 TBool h@@3))
)))
(assert (forall ((v@@2 T@U) ) (! ($Is intType v@@2 TInt)
 :pattern ( ($Is intType v@@2 TInt))
)))
(assert (forall ((v@@3 T@U) ) (! ($Is boolType v@@3 TBool)
 :pattern ( ($Is boolType v@@3 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap () T@U)
(declare-fun |newtype$check#0@0| () Int)
(declare-fun |n#0@0| () Int)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |n#0| () Int)
(declare-fun |has17#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 20) (let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (= |newtype$check#0@0| (LitInt 0))) (and (=> (= (ControlFlow 0 2) (- 0 19)) (and (<= (LitInt 0) |newtype$check#0@0|) (< |newtype$check#0@0| 256))) (=> (and (<= (LitInt 0) |newtype$check#0@0|) (< |newtype$check#0@0| 256)) (=> (= |n#0@0| (LitInt 0)) (and (=> (= (ControlFlow 0 2) (- 0 18)) (<= 0 |n#0@0|)) (=> (<= 0 |n#0@0|) (and (=> (= (ControlFlow 0 2) (- 0 17)) (<= 0 |n#0@0|)) (=> (<= 0 |n#0@0|) (and (=> (= (ControlFlow 0 2) (- 0 16)) (<= 0 |n#0@0|)) (=> (<= 0 |n#0@0|) (and (=> (= (ControlFlow 0 2) (- 0 15)) (<= 0 |n#0@0|)) (=> (<= 0 |n#0@0|) (and (=> (= (ControlFlow 0 2) (- 0 14)) (<= 0 |n#0@0|)) (=> (<= 0 |n#0@0|) (and (=> (= (ControlFlow 0 2) (- 0 13)) (<= 0 |n#0@0|)) (=> (<= 0 |n#0@0|) (and (=> (= (ControlFlow 0 2) (- 0 12)) (<= 0 |n#0@0|)) (=> (<= 0 |n#0@0|) (and (=> (= (ControlFlow 0 2) (- 0 11)) (<= 0 |n#0@0|)) (=> (<= 0 |n#0@0|) (and (=> (= (ControlFlow 0 2) (- 0 10)) (<= 0 |n#0@0|)) (=> (<= 0 |n#0@0|) (and (=> (= (ControlFlow 0 2) (- 0 9)) (<= 0 |n#0@0|)) (=> (<= 0 |n#0@0|) (and (=> (= (ControlFlow 0 2) (- 0 8)) (<= 0 |n#0@0|)) (=> (<= 0 |n#0@0|) (and (=> (= (ControlFlow 0 2) (- 0 7)) (<= 0 |n#0@0|)) (=> (<= 0 |n#0@0|) (and (=> (= (ControlFlow 0 2) (- 0 6)) (<= 0 |n#0@0|)) (=> (<= 0 |n#0@0|) (and (=> (= (ControlFlow 0 2) (- 0 5)) (<= 0 |n#0@0|)) (=> (<= 0 |n#0@0|) (and (=> (= (ControlFlow 0 2) (- 0 4)) (<= 0 |n#0@0|)) (=> (<= 0 |n#0@0|) (and (=> (= (ControlFlow 0 2) (- 0 3)) (<= 0 |n#0@0|)) (=> (<= 0 |n#0@0|) (=> (= (ControlFlow 0 2) (- 0 1)) (<= 0 |n#0@0|))))))))))))))))))))))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (<= (LitInt 0) |n#0|) (< |n#0| 256)) true) (=> (and (and (and ($Is refType |has17#0| (Tclass._System.array17 TBool)) ($IsAlloc refType |has17#0| (Tclass._System.array17 TBool) $Heap)) true) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 20) 2))) anon0_correct)))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
