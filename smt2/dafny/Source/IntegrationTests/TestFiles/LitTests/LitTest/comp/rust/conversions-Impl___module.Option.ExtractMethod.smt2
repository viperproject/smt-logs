(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 (T@T) Int)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 (Bool) T@U)
(declare-fun $generated@@9 (T@U) Bool)
(declare-fun $generated@@10 (Int) T@U)
(declare-fun $generated@@11 (T@U) Int)
(declare-fun $generated@@12 (Real) T@U)
(declare-fun $generated@@13 (T@U) Real)
(declare-fun $generated@@20 (T@U) T@U)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 (T@U) T@U)
(declare-fun $generated@@25 (T@U) Bool)
(declare-fun $generated@@28 () Int)
(declare-fun $generated@@29 (T@U T@U) Bool)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@U T@U) Bool)
(declare-fun $generated@@32 (T@T T@U T@U) Bool)
(declare-fun $generated@@33 (T@U) Bool)
(declare-fun $generated@@39 (T@U) Bool)
(declare-fun $generated@@42 (T@T T@U) T@U)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@47 (T@U) T@U)
(declare-fun $generated@@50 (T@U T@U T@U) Bool)
(declare-fun $generated@@55 (T@U) T@U)
(declare-fun $generated@@56 (T@U) T@U)
(declare-fun $generated@@63 (T@U T@U) Bool)
(declare-fun $generated@@67 (T@U) T@U)
(declare-fun $generated@@70 (T@U) T@U)
(declare-fun $generated@@76 (T@U) Int)
(declare-fun $generated@@77 (T@U) Int)
(declare-fun $generated@@82 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@83 () T@T)
(declare-fun $generated@@84 () T@T)
(declare-fun $generated@@85 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@86 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@87 () T@T)
(declare-fun $generated@@88 (T@T T@T) T@T)
(declare-fun $generated@@89 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@90 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@91 (T@T) T@T)
(declare-fun $generated@@92 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@4 $generated@@5) 0) (= ($generated@@4 $generated@@6) 1)) (= ($generated@@4 $generated@@7) 2)) (forall (($generated@@14 Bool) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Int) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Real) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3)
)
(assert (= ($generated@@20 $generated@@21) $generated@@2))
(assert (= ($generated@@4 $generated@@23) 3))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@U) ) (!  (=> ($generated@@25 $generated@@27) ($generated@@22 $generated@@23 $generated@@21 ($generated@@24 $generated@@26) $generated@@27))
 :pattern ( ($generated@@22 $generated@@23 $generated@@21 ($generated@@24 $generated@@26) $generated@@27))
)))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@34 T@U) ($generated@@35 T@U) ) (!  (=> (or ($generated@@31 $generated@@34 ($generated@@30 $generated@@23 $generated@@35)) (and (< 0 $generated@@28) ($generated@@32 $generated@@23 $generated@@35 ($generated@@24 $generated@@34)))) (= ($generated@@29 $generated@@34 ($generated@@30 $generated@@23 $generated@@35)) ($generated@@9 ($generated@@30 $generated@@5 ($generated@@8 ($generated@@33 ($generated@@30 $generated@@23 $generated@@35)))))))
 :weight 3
 :pattern ( ($generated@@29 $generated@@34 ($generated@@30 $generated@@23 $generated@@35)))
))))
(assert (forall (($generated@@36 T@U) ) (! ($generated@@32 $generated@@23 $generated@@21 ($generated@@24 $generated@@36))
 :pattern ( ($generated@@32 $generated@@23 $generated@@21 ($generated@@24 $generated@@36)))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@T) ) (! (= ($generated@@30 $generated@@38 $generated@@37) $generated@@37)
 :pattern ( ($generated@@30 $generated@@38 $generated@@37))
)))
(assert (forall (($generated@@40 T@U) ) (! (= ($generated@@39 $generated@@40) (= ($generated@@20 $generated@@40) $generated@@1))
 :pattern ( ($generated@@39 $generated@@40))
)))
(assert (forall (($generated@@41 T@U) ) (! (= ($generated@@33 $generated@@41) (= ($generated@@20 $generated@@41) $generated@@2))
 :pattern ( ($generated@@33 $generated@@41))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@T) ) (! (= ($generated@@43 $generated@@45 ($generated@@42 $generated@@45 $generated@@44)) $generated@@44)
 :pattern ( ($generated@@42 $generated@@45 $generated@@44))
)))
(assert (forall (($generated@@46 T@U) ) (!  (=> ($generated@@33 $generated@@46) (= $generated@@46 $generated@@21))
 :pattern ( ($generated@@33 $generated@@46))
)))
(assert (forall (($generated@@48 T@U) ) (!  (=> ($generated@@39 $generated@@48) (exists (($generated@@49 T@U) ) (= $generated@@48 ($generated@@47 $generated@@49))))
 :pattern ( ($generated@@39 $generated@@48))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@T) ) (! (= ($generated@@50 ($generated@@43 $generated@@54 $generated@@51) $generated@@52 $generated@@53) ($generated@@22 $generated@@54 $generated@@51 $generated@@52 $generated@@53))
 :pattern ( ($generated@@50 ($generated@@43 $generated@@54 $generated@@51) $generated@@52 $generated@@53))
)))
(assert (forall (($generated@@57 T@U) ) (!  (and (= ($generated@@55 ($generated@@24 $generated@@57)) $generated@@0) (= ($generated@@56 ($generated@@24 $generated@@57)) $generated@@3))
 :pattern ( ($generated@@24 $generated@@57))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ($generated@@60 T@U) ) (!  (=> ($generated@@25 $generated@@60) (= ($generated@@22 $generated@@23 ($generated@@47 $generated@@59) ($generated@@24 $generated@@58) $generated@@60) ($generated@@50 $generated@@59 $generated@@58 $generated@@60)))
 :pattern ( ($generated@@22 $generated@@23 ($generated@@47 $generated@@59) ($generated@@24 $generated@@58) $generated@@60))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ) (!  (=> ($generated@@32 $generated@@23 $generated@@62 ($generated@@24 $generated@@61)) (or ($generated@@39 $generated@@62) ($generated@@33 $generated@@62)))
 :pattern ( ($generated@@33 $generated@@62) ($generated@@32 $generated@@23 $generated@@62 ($generated@@24 $generated@@61)))
 :pattern ( ($generated@@39 $generated@@62) ($generated@@32 $generated@@23 $generated@@62 ($generated@@24 $generated@@61)))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@T) ) (! (= ($generated@@63 ($generated@@43 $generated@@66 $generated@@64) $generated@@65) ($generated@@32 $generated@@66 $generated@@64 $generated@@65))
 :pattern ( ($generated@@63 ($generated@@43 $generated@@66 $generated@@64) $generated@@65))
)))
(assert (forall (($generated@@68 T@U) ) (! (= ($generated@@67 ($generated@@24 $generated@@68)) $generated@@68)
 :pattern ( ($generated@@24 $generated@@68))
)))
(assert (forall (($generated@@69 T@U) ) (! (= ($generated@@20 ($generated@@47 $generated@@69)) $generated@@1)
 :pattern ( ($generated@@47 $generated@@69))
)))
(assert (forall (($generated@@71 T@U) ) (! (= ($generated@@70 ($generated@@47 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@47 $generated@@71))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@T) ) (! (= ($generated@@42 $generated@@73 ($generated@@43 $generated@@73 $generated@@72)) $generated@@72)
 :pattern ( ($generated@@43 $generated@@73 $generated@@72))
)))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@32 $generated@@23 ($generated@@47 $generated@@75) ($generated@@24 $generated@@74)) ($generated@@63 $generated@@75 $generated@@74))
 :pattern ( ($generated@@32 $generated@@23 ($generated@@47 $generated@@75) ($generated@@24 $generated@@74)))
)))
(assert (forall (($generated@@78 T@U) ) (! (< ($generated@@76 $generated@@78) ($generated@@77 ($generated@@47 $generated@@78)))
 :pattern ( ($generated@@47 $generated@@78))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ($generated@@81 T@U) ) (!  (=> (and ($generated@@25 $generated@@81) (and ($generated@@39 $generated@@79) ($generated@@22 $generated@@23 $generated@@79 ($generated@@24 $generated@@80) $generated@@81))) ($generated@@50 ($generated@@70 $generated@@79) $generated@@80 $generated@@81))
 :pattern ( ($generated@@50 ($generated@@70 $generated@@79) $generated@@80 $generated@@81))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ) (! (= ($generated@@82 $generated@@93 $generated@@94 $generated@@95 ($generated@@89 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@99 $generated@@96) $generated@@98 $generated@@99) $generated@@96)
 :weight 0
)) (and (forall (($generated@@100 T@T) ($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ($generated@@108 T@U) ) (!  (or (= $generated@@105 $generated@@107) (= ($generated@@82 $generated@@100 $generated@@101 $generated@@102 ($generated@@89 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@105 $generated@@106 $generated@@103) $generated@@107 $generated@@108) ($generated@@82 $generated@@100 $generated@@101 $generated@@102 $generated@@104 $generated@@107 $generated@@108)))
 :weight 0
)) (forall (($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@T) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ) (!  (or (= $generated@@115 $generated@@117) (= ($generated@@82 $generated@@109 $generated@@110 $generated@@111 ($generated@@89 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@114 $generated@@115 $generated@@112) $generated@@116 $generated@@117) ($generated@@82 $generated@@109 $generated@@110 $generated@@111 $generated@@113 $generated@@116 $generated@@117)))
 :weight 0
)))) (= ($generated@@4 $generated@@83) 4)) (= ($generated@@4 $generated@@84) 5)) (forall (($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ) (! (= ($generated@@86 $generated@@118 $generated@@119 ($generated@@90 $generated@@118 $generated@@119 $generated@@121 $generated@@122 $generated@@120) $generated@@122) $generated@@120)
 :weight 0
))) (forall (($generated@@123 T@T) ($generated@@124 T@T) ($generated@@125 T@U) ($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ) (!  (or (= $generated@@127 $generated@@128) (= ($generated@@86 $generated@@123 $generated@@124 ($generated@@90 $generated@@123 $generated@@124 $generated@@126 $generated@@127 $generated@@125) $generated@@128) ($generated@@86 $generated@@123 $generated@@124 $generated@@126 $generated@@128)))
 :weight 0
))) (= ($generated@@4 $generated@@87) 6)) (forall (($generated@@129 T@T) ($generated@@130 T@T) ) (= ($generated@@4 ($generated@@88 $generated@@129 $generated@@130)) 7))) (forall (($generated@@131 T@T) ($generated@@132 T@T) ) (! (= ($generated@@91 ($generated@@88 $generated@@131 $generated@@132)) $generated@@131)
 :pattern ( ($generated@@88 $generated@@131 $generated@@132))
))) (forall (($generated@@133 T@T) ($generated@@134 T@T) ) (! (= ($generated@@92 ($generated@@88 $generated@@133 $generated@@134)) $generated@@134)
 :pattern ( ($generated@@88 $generated@@133 $generated@@134))
))))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ($generated@@138 Bool) ($generated@@139 T@U) ($generated@@140 T@U) ) (! (= ($generated@@9 ($generated@@82 $generated@@83 $generated@@84 $generated@@5 ($generated@@85 $generated@@135 $generated@@136 $generated@@137 $generated@@138) $generated@@139 $generated@@140))  (=> (and (or (not (= $generated@@139 $generated@@135)) (not true)) ($generated@@9 ($generated@@42 $generated@@5 ($generated@@86 $generated@@84 $generated@@87 ($generated@@86 $generated@@83 ($generated@@88 $generated@@84 $generated@@87) $generated@@136 $generated@@139) $generated@@137)))) $generated@@138))
 :pattern ( ($generated@@82 $generated@@83 $generated@@84 $generated@@5 ($generated@@85 $generated@@135 $generated@@136 $generated@@137 $generated@@138) $generated@@139 $generated@@140))
)))
(assert (forall (($generated@@141 T@U) ) (! (= ($generated@@76 ($generated@@43 $generated@@23 $generated@@141)) ($generated@@77 $generated@@141))
 :pattern ( ($generated@@76 ($generated@@43 $generated@@23 $generated@@141)))
)))
(assert (forall (($generated@@142 T@U) ($generated@@143 T@U) ) (!  (=> ($generated@@63 $generated@@143 ($generated@@24 $generated@@142)) (and (= ($generated@@43 $generated@@23 ($generated@@42 $generated@@23 $generated@@143)) $generated@@143) ($generated@@32 $generated@@23 ($generated@@42 $generated@@23 $generated@@143) ($generated@@24 $generated@@142))))
 :pattern ( ($generated@@63 $generated@@143 ($generated@@24 $generated@@142)))
)))
(assert (= $generated@@21 ($generated@@30 $generated@@23 $generated@@21)))
(assert  (=> (<= 0 $generated@@28) (forall (($generated@@144 T@U) ($generated@@145 T@U) ) (!  (=> (or ($generated@@31 $generated@@144 $generated@@145) (and (< 0 $generated@@28) ($generated@@32 $generated@@23 $generated@@145 ($generated@@24 $generated@@144)))) (= ($generated@@29 $generated@@144 $generated@@145) ($generated@@33 $generated@@145)))
 :pattern ( ($generated@@29 $generated@@144 $generated@@145))
))))
(assert (forall (($generated@@146 T@U) ) (! (= ($generated@@47 ($generated@@30 $generated@@87 $generated@@146)) ($generated@@30 $generated@@23 ($generated@@47 $generated@@146)))
 :pattern ( ($generated@@47 ($generated@@30 $generated@@87 $generated@@146)))
)))
(assert (forall (($generated@@147 T@U) ($generated@@148 T@T) ) (! (= ($generated@@43 $generated@@148 ($generated@@30 $generated@@148 $generated@@147)) ($generated@@30 $generated@@87 ($generated@@43 $generated@@148 $generated@@147)))
 :pattern ( ($generated@@43 $generated@@148 ($generated@@30 $generated@@148 $generated@@147)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 () T@U)
(declare-fun $generated@@151 () T@U)
(declare-fun $generated@@152 () T@U)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 (T@U) Bool)
(declare-fun $generated@@155 () T@U)
(declare-fun $generated@@156 () Bool)
(declare-fun $generated@@157 () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@158  (=> (= $generated@@149 ($generated@@85 $generated@@150 $generated@@151 $generated false)) (and (=> (= (ControlFlow 0 2) (- 0 3)) ($generated@@39 $generated@@152)) (=> ($generated@@39 $generated@@152) (=> (and (= $generated@@153 ($generated@@70 $generated@@152)) (= (ControlFlow 0 2) (- 0 1))) true))))))
(let (($generated@@159  (=> (and (and (and ($generated@@25 $generated@@151) ($generated@@154 $generated@@151)) (and ($generated@@32 $generated@@23 $generated@@152 ($generated@@24 $generated@@155)) ($generated@@22 $generated@@23 $generated@@152 ($generated@@24 $generated@@155) $generated@@151))) (and (and (=> $generated@@156 (and ($generated@@63 $generated@@157 $generated@@155) ($generated@@50 $generated@@157 $generated@@155 $generated@@151))) (= 1 $generated@@28)) (and (not ($generated@@29 $generated@@155 $generated@@152)) (= (ControlFlow 0 4) 2)))) $generated@@158)))
$generated@@159)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
