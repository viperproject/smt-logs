(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun Tagclass.Std_mWrappers.OutcomeResult () T@U)
(declare-fun Tagclass.Std_mWrappers.Result () T@U)
(declare-fun |##Std.Wrappers.Result.Success| () T@U)
(declare-fun |##Std.Wrappers.Result.Failure| () T@U)
(declare-fun |##Std.Wrappers.OutcomeResult.Pass'| () T@U)
(declare-fun |##Std.Wrappers.OutcomeResult.Fail'| () T@U)
(declare-fun tytagFamily$OutcomeResult () T@U)
(declare-fun tytagFamily$Result () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#Std.Wrappers.OutcomeResult.Pass'| () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass.Std_mWrappers.OutcomeResult (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun Std_mWrappers.OutcomeResult.IsFailure (T@U T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |Std_mWrappers.OutcomeResult.IsFailure#canCall| (T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun Std_mWrappers.OutcomeResult.Fail_k_q (T@U) Bool)
(declare-fun Std_mWrappers.Result.Success_q (T@U) Bool)
(declare-fun Std_mWrappers.Result.Failure_q (T@U) Bool)
(declare-fun Std_mWrappers.OutcomeResult.Pass_k_q (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |#Std.Wrappers.Result.Success| (T@U) T@U)
(declare-fun |#Std.Wrappers.Result.Failure| (T@U) T@U)
(declare-fun |#Std.Wrappers.OutcomeResult.Fail'| (T@U) T@U)
(declare-fun Std_mWrappers.OutcomeResult.PropagateFailure (T@U T@U T@U) T@U)
(declare-fun |Std_mWrappers.OutcomeResult.PropagateFailure#canCall| (T@U T@U T@U) Bool)
(declare-fun Std_mWrappers.OutcomeResult.error (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun Tclass.Std_mWrappers.Result (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun Tclass.Std_mWrappers.Result_0 (T@U) T@U)
(declare-fun Tclass.Std_mWrappers.Result_1 (T@U) T@U)
(declare-fun Tclass.Std_mWrappers.OutcomeResult_0 (T@U) T@U)
(declare-fun Std_mWrappers.Result.value (T@U) T@U)
(declare-fun Std_mWrappers.Result.error (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc Tagclass.Std_mWrappers.OutcomeResult Tagclass.Std_mWrappers.Result |##Std.Wrappers.Result.Success| |##Std.Wrappers.Result.Failure| |##Std.Wrappers.OutcomeResult.Pass'| |##Std.Wrappers.OutcomeResult.Fail'| tytagFamily$OutcomeResult tytagFamily$Result)
)
(assert (= (DatatypeCtorId |#Std.Wrappers.OutcomeResult.Pass'|) |##Std.Wrappers.OutcomeResult.Pass'|))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((Std.Wrappers.OutcomeResult$E T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) ($IsAlloc DatatypeTypeType |#Std.Wrappers.OutcomeResult.Pass'| (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E) $h))
 :pattern ( ($IsAlloc DatatypeTypeType |#Std.Wrappers.OutcomeResult.Pass'| (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E) $h))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((Std.Wrappers.OutcomeResult$E@@0 T@U) (this T@U) ) (!  (=> (or (|Std_mWrappers.OutcomeResult.IsFailure#canCall| Std.Wrappers.OutcomeResult$E@@0 (Lit DatatypeTypeType this)) (and (< 0 $FunctionContextHeight) ($Is DatatypeTypeType this (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@0)))) (= (Std_mWrappers.OutcomeResult.IsFailure Std.Wrappers.OutcomeResult$E@@0 (Lit DatatypeTypeType this)) (U_2_bool (Lit boolType (bool_2_U (Std_mWrappers.OutcomeResult.Fail_k_q (Lit DatatypeTypeType this)))))))
 :weight 3
 :pattern ( (Std_mWrappers.OutcomeResult.IsFailure Std.Wrappers.OutcomeResult$E@@0 (Lit DatatypeTypeType this)))
))))
(assert (forall ((Std.Wrappers.OutcomeResult$E@@1 T@U) ) (! ($Is DatatypeTypeType |#Std.Wrappers.OutcomeResult.Pass'| (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@1))
 :pattern ( ($Is DatatypeTypeType |#Std.Wrappers.OutcomeResult.Pass'| (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@1)))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= (Lit T x@@2) x@@2)
 :pattern ( (Lit T x@@2))
)))
(assert (forall ((d T@U) ) (! (= (Std_mWrappers.Result.Success_q d) (= (DatatypeCtorId d) |##Std.Wrappers.Result.Success|))
 :pattern ( (Std_mWrappers.Result.Success_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (Std_mWrappers.Result.Failure_q d@@0) (= (DatatypeCtorId d@@0) |##Std.Wrappers.Result.Failure|))
 :pattern ( (Std_mWrappers.Result.Failure_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (Std_mWrappers.OutcomeResult.Pass_k_q d@@1) (= (DatatypeCtorId d@@1) |##Std.Wrappers.OutcomeResult.Pass'|))
 :pattern ( (Std_mWrappers.OutcomeResult.Pass_k_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (Std_mWrappers.OutcomeResult.Fail_k_q d@@2) (= (DatatypeCtorId d@@2) |##Std.Wrappers.OutcomeResult.Fail'|))
 :pattern ( (Std_mWrappers.OutcomeResult.Fail_k_q d@@2))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@3)) x@@3)
 :pattern ( ($Unbox T@@0 x@@3))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (Std_mWrappers.OutcomeResult.Pass_k_q d@@3) (= d@@3 |#Std.Wrappers.OutcomeResult.Pass'|))
 :pattern ( (Std_mWrappers.OutcomeResult.Pass_k_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (Std_mWrappers.Result.Success_q d@@4) (exists ((|a#1#0#0| T@U) ) (= d@@4 (|#Std.Wrappers.Result.Success| |a#1#0#0|))))
 :pattern ( (Std_mWrappers.Result.Success_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (!  (=> (Std_mWrappers.Result.Failure_q d@@5) (exists ((|a#7#0#0| T@U) ) (= d@@5 (|#Std.Wrappers.Result.Failure| |a#7#0#0|))))
 :pattern ( (Std_mWrappers.Result.Failure_q d@@5))
)))
(assert (forall ((d@@6 T@U) ) (!  (=> (Std_mWrappers.OutcomeResult.Fail_k_q d@@6) (exists ((|a#5#0#0| T@U) ) (= d@@6 (|#Std.Wrappers.OutcomeResult.Fail'| |a#5#0#0|))))
 :pattern ( (Std_mWrappers.OutcomeResult.Fail_k_q d@@6))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((Std.Wrappers.OutcomeResult$E@@2 T@U) (Std.Wrappers.OutcomeResult.PropagateFailure$U T@U) (this@@0 T@U) ) (!  (=> (or (|Std_mWrappers.OutcomeResult.PropagateFailure#canCall| Std.Wrappers.OutcomeResult$E@@2 Std.Wrappers.OutcomeResult.PropagateFailure$U this@@0) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType this@@0 (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@2)) (Std_mWrappers.OutcomeResult.IsFailure Std.Wrappers.OutcomeResult$E@@2 this@@0)))) (= (Std_mWrappers.OutcomeResult.PropagateFailure Std.Wrappers.OutcomeResult$E@@2 Std.Wrappers.OutcomeResult.PropagateFailure$U this@@0) (|#Std.Wrappers.Result.Failure| (Std_mWrappers.OutcomeResult.error this@@0))))
 :pattern ( (Std_mWrappers.OutcomeResult.PropagateFailure Std.Wrappers.OutcomeResult$E@@2 Std.Wrappers.OutcomeResult.PropagateFailure$U this@@0))
))))
(assert (forall ((v T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h) ($IsAlloc T@@1 v t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h))
)))
(assert (forall ((Std.Wrappers.OutcomeResult$E@@3 T@U) ) (!  (and (= (Tag (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@3)) Tagclass.Std_mWrappers.OutcomeResult) (= (TagFamily (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@3)) tytagFamily$OutcomeResult))
 :pattern ( (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@3))
)))
(assert (forall ((Std.Wrappers.OutcomeResult$E@@4 T@U) (|a#6#0#0| T@U) ($h@@0 T@U) ) (!  (=> ($IsGoodHeap $h@@0) (= ($IsAlloc DatatypeTypeType (|#Std.Wrappers.OutcomeResult.Fail'| |a#6#0#0|) (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@4) $h@@0) ($IsAllocBox |a#6#0#0| Std.Wrappers.OutcomeResult$E@@4 $h@@0)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#Std.Wrappers.OutcomeResult.Fail'| |a#6#0#0|) (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@4) $h@@0))
)))
(assert (forall ((Std.Wrappers.Result$R T@U) (Std.Wrappers.Result$E T@U) (d@@7 T@U) ) (!  (=> ($Is DatatypeTypeType d@@7 (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R Std.Wrappers.Result$E)) (or (Std_mWrappers.Result.Success_q d@@7) (Std_mWrappers.Result.Failure_q d@@7)))
 :pattern ( (Std_mWrappers.Result.Failure_q d@@7) ($Is DatatypeTypeType d@@7 (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R Std.Wrappers.Result$E)))
 :pattern ( (Std_mWrappers.Result.Success_q d@@7) ($Is DatatypeTypeType d@@7 (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R Std.Wrappers.Result$E)))
)))
(assert (forall ((Std.Wrappers.OutcomeResult$E@@5 T@U) (d@@8 T@U) ) (!  (=> ($Is DatatypeTypeType d@@8 (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@5)) (or (Std_mWrappers.OutcomeResult.Pass_k_q d@@8) (Std_mWrappers.OutcomeResult.Fail_k_q d@@8)))
 :pattern ( (Std_mWrappers.OutcomeResult.Fail_k_q d@@8) ($Is DatatypeTypeType d@@8 (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@5)))
 :pattern ( (Std_mWrappers.OutcomeResult.Pass_k_q d@@8) ($Is DatatypeTypeType d@@8 (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@5)))
)))
(assert (forall ((v@@0 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@0) t@@0) ($Is T@@2 v@@0 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@0) t@@0))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((Std.Wrappers.OutcomeResult$E@@6 T@U) (Std.Wrappers.OutcomeResult.PropagateFailure$U@@0 T@U) (this@@1 T@U) ) (!  (=> (or (|Std_mWrappers.OutcomeResult.PropagateFailure#canCall| Std.Wrappers.OutcomeResult$E@@6 Std.Wrappers.OutcomeResult.PropagateFailure$U@@0 this@@1) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType this@@1 (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@6)) (Std_mWrappers.OutcomeResult.IsFailure Std.Wrappers.OutcomeResult$E@@6 this@@1)))) ($Is DatatypeTypeType (Std_mWrappers.OutcomeResult.PropagateFailure Std.Wrappers.OutcomeResult$E@@6 Std.Wrappers.OutcomeResult.PropagateFailure$U@@0 this@@1) (Tclass.Std_mWrappers.Result Std.Wrappers.OutcomeResult.PropagateFailure$U@@0 Std.Wrappers.OutcomeResult$E@@6)))
 :pattern ( (Std_mWrappers.OutcomeResult.PropagateFailure Std.Wrappers.OutcomeResult$E@@6 Std.Wrappers.OutcomeResult.PropagateFailure$U@@0 this@@1))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap T@U) (Std.Wrappers.OutcomeResult$E@@7 T@U) (Std.Wrappers.OutcomeResult.PropagateFailure$U@@1 T@U) (this@@2 T@U) ) (!  (=> (and (or (|Std_mWrappers.OutcomeResult.PropagateFailure#canCall| Std.Wrappers.OutcomeResult$E@@7 Std.Wrappers.OutcomeResult.PropagateFailure$U@@1 this@@2) (and (< 1 $FunctionContextHeight) (and ($IsAlloc DatatypeTypeType this@@2 (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@7) $Heap) (Std_mWrappers.OutcomeResult.IsFailure Std.Wrappers.OutcomeResult$E@@7 this@@2)))) ($IsGoodHeap $Heap)) ($IsAlloc DatatypeTypeType (Std_mWrappers.OutcomeResult.PropagateFailure Std.Wrappers.OutcomeResult$E@@7 Std.Wrappers.OutcomeResult.PropagateFailure$U@@1 this@@2) (Tclass.Std_mWrappers.Result Std.Wrappers.OutcomeResult.PropagateFailure$U@@1 Std.Wrappers.OutcomeResult$E@@7) $Heap))
 :pattern ( ($IsAlloc DatatypeTypeType (Std_mWrappers.OutcomeResult.PropagateFailure Std.Wrappers.OutcomeResult$E@@7 Std.Wrappers.OutcomeResult.PropagateFailure$U@@1 this@@2) (Tclass.Std_mWrappers.Result Std.Wrappers.OutcomeResult.PropagateFailure$U@@1 Std.Wrappers.OutcomeResult$E@@7) $Heap))
))))
(assert (forall ((Std.Wrappers.Result$R@@0 T@U) (Std.Wrappers.Result$E@@0 T@U) ) (! (= (Tclass.Std_mWrappers.Result_0 (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R@@0 Std.Wrappers.Result$E@@0)) Std.Wrappers.Result$R@@0)
 :pattern ( (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R@@0 Std.Wrappers.Result$E@@0))
)))
(assert (forall ((Std.Wrappers.Result$R@@1 T@U) (Std.Wrappers.Result$E@@1 T@U) ) (! (= (Tclass.Std_mWrappers.Result_1 (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R@@1 Std.Wrappers.Result$E@@1)) Std.Wrappers.Result$E@@1)
 :pattern ( (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R@@1 Std.Wrappers.Result$E@@1))
)))
(assert (forall ((Std.Wrappers.Result$R@@2 T@U) (Std.Wrappers.Result$E@@2 T@U) (|a#2#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#Std.Wrappers.Result.Success| |a#2#0#0|) (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R@@2 Std.Wrappers.Result$E@@2)) ($IsBox |a#2#0#0| Std.Wrappers.Result$R@@2))
 :pattern ( ($Is DatatypeTypeType (|#Std.Wrappers.Result.Success| |a#2#0#0|) (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R@@2 Std.Wrappers.Result$E@@2)))
)))
(assert (forall ((Std.Wrappers.Result$R@@3 T@U) (Std.Wrappers.Result$E@@3 T@U) (|a#8#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#Std.Wrappers.Result.Failure| |a#8#0#0|) (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R@@3 Std.Wrappers.Result$E@@3)) ($IsBox |a#8#0#0| Std.Wrappers.Result$E@@3))
 :pattern ( ($Is DatatypeTypeType (|#Std.Wrappers.Result.Failure| |a#8#0#0|) (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R@@3 Std.Wrappers.Result$E@@3)))
)))
(assert (forall ((Std.Wrappers.OutcomeResult$E@@8 T@U) ) (! (= (Tclass.Std_mWrappers.OutcomeResult_0 (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@8)) Std.Wrappers.OutcomeResult$E@@8)
 :pattern ( (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@8))
)))
(assert (forall ((|a#0#0#0| T@U) ) (! (= (DatatypeCtorId (|#Std.Wrappers.Result.Success| |a#0#0#0|)) |##Std.Wrappers.Result.Success|)
 :pattern ( (|#Std.Wrappers.Result.Success| |a#0#0#0|))
)))
(assert (forall ((|a#4#0#0| T@U) ) (! (= (Std_mWrappers.Result.value (|#Std.Wrappers.Result.Success| |a#4#0#0|)) |a#4#0#0|)
 :pattern ( (|#Std.Wrappers.Result.Success| |a#4#0#0|))
)))
(assert (forall ((|a#6#0#0@@0| T@U) ) (! (= (DatatypeCtorId (|#Std.Wrappers.Result.Failure| |a#6#0#0@@0|)) |##Std.Wrappers.Result.Failure|)
 :pattern ( (|#Std.Wrappers.Result.Failure| |a#6#0#0@@0|))
)))
(assert (forall ((|a#10#0#0| T@U) ) (! (= (Std_mWrappers.Result.error (|#Std.Wrappers.Result.Failure| |a#10#0#0|)) |a#10#0#0|)
 :pattern ( (|#Std.Wrappers.Result.Failure| |a#10#0#0|))
)))
(assert (forall ((|a#4#0#0@@0| T@U) ) (! (= (DatatypeCtorId (|#Std.Wrappers.OutcomeResult.Fail'| |a#4#0#0@@0|)) |##Std.Wrappers.OutcomeResult.Fail'|)
 :pattern ( (|#Std.Wrappers.OutcomeResult.Fail'| |a#4#0#0@@0|))
)))
(assert (forall ((|a#8#0#0@@0| T@U) ) (! (= (Std_mWrappers.OutcomeResult.error (|#Std.Wrappers.OutcomeResult.Fail'| |a#8#0#0@@0|)) |a#8#0#0@@0|)
 :pattern ( (|#Std.Wrappers.OutcomeResult.Fail'| |a#8#0#0@@0|))
)))
(assert (forall ((x@@4 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@4)) x@@4)
 :pattern ( ($Box T@@3 x@@4))
)))
(assert (forall ((Std.Wrappers.OutcomeResult$E@@9 T@U) (|a#6#0#0@@1| T@U) ) (! (= ($Is DatatypeTypeType (|#Std.Wrappers.OutcomeResult.Fail'| |a#6#0#0@@1|) (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@9)) ($IsBox |a#6#0#0@@1| Std.Wrappers.OutcomeResult$E@@9))
 :pattern ( ($Is DatatypeTypeType (|#Std.Wrappers.OutcomeResult.Fail'| |a#6#0#0@@1|) (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@9)))
)))
(assert (forall ((Std.Wrappers.Result$R@@4 T@U) (Std.Wrappers.Result$E@@4 T@U) (bx T@U) ) (!  (=> ($IsBox bx (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R@@4 Std.Wrappers.Result$E@@4)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx)) bx) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx) (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R@@4 Std.Wrappers.Result$E@@4))))
 :pattern ( ($IsBox bx (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R@@4 Std.Wrappers.Result$E@@4)))
)))
(assert (forall ((|a#5#0#0@@0| T@U) ) (! (< (BoxRank |a#5#0#0@@0|) (DtRank (|#Std.Wrappers.Result.Success| |a#5#0#0@@0|)))
 :pattern ( (|#Std.Wrappers.Result.Success| |a#5#0#0@@0|))
)))
(assert (forall ((|a#11#0#0| T@U) ) (! (< (BoxRank |a#11#0#0|) (DtRank (|#Std.Wrappers.Result.Failure| |a#11#0#0|)))
 :pattern ( (|#Std.Wrappers.Result.Failure| |a#11#0#0|))
)))
(assert (forall ((|a#9#0#0| T@U) ) (! (< (BoxRank |a#9#0#0|) (DtRank (|#Std.Wrappers.OutcomeResult.Fail'| |a#9#0#0|)))
 :pattern ( (|#Std.Wrappers.OutcomeResult.Fail'| |a#9#0#0|))
)))
(assert (forall ((d@@9 T@U) (Std.Wrappers.OutcomeResult$E@@10 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) (and (Std_mWrappers.OutcomeResult.Fail_k_q d@@9) ($IsAlloc DatatypeTypeType d@@9 (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@10) $h@@1))) ($IsAllocBox (Std_mWrappers.OutcomeResult.error d@@9) Std.Wrappers.OutcomeResult$E@@10 $h@@1))
 :pattern ( ($IsAllocBox (Std_mWrappers.OutcomeResult.error d@@9) Std.Wrappers.OutcomeResult$E@@10 $h@@1))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((Std.Wrappers.Result$R@@5 T@U) (Std.Wrappers.Result$E@@5 T@U) ) (!  (and (= (Tag (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R@@5 Std.Wrappers.Result$E@@5)) Tagclass.Std_mWrappers.Result) (= (TagFamily (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R@@5 Std.Wrappers.Result$E@@5)) tytagFamily$Result))
 :pattern ( (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R@@5 Std.Wrappers.Result$E@@5))
)))
(assert (forall ((d@@10 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@10)) (DtRank d@@10))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@10)))
)))
(assert (forall ((Std.Wrappers.OutcomeResult$E@@11 T@U) (bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@11)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@0)) bx@@0) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@0) (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@11))))
 :pattern ( ($IsBox bx@@0 (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@11)))
)))
(assert (= |#Std.Wrappers.OutcomeResult.Pass'| (Lit DatatypeTypeType |#Std.Wrappers.OutcomeResult.Pass'|)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((Std.Wrappers.OutcomeResult$E@@12 T@U) (this@@3 T@U) ) (!  (=> (or (|Std_mWrappers.OutcomeResult.IsFailure#canCall| Std.Wrappers.OutcomeResult$E@@12 this@@3) (and (< 0 $FunctionContextHeight) ($Is DatatypeTypeType this@@3 (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@12)))) (= (Std_mWrappers.OutcomeResult.IsFailure Std.Wrappers.OutcomeResult$E@@12 this@@3) (Std_mWrappers.OutcomeResult.Fail_k_q this@@3)))
 :pattern ( (Std_mWrappers.OutcomeResult.IsFailure Std.Wrappers.OutcomeResult$E@@12 this@@3))
))))
(assert (forall ((d@@11 T@U) (Std.Wrappers.Result$R@@6 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (Std_mWrappers.Result.Success_q d@@11) (exists ((Std.Wrappers.Result$E@@6 T@U) ) (! ($IsAlloc DatatypeTypeType d@@11 (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R@@6 Std.Wrappers.Result$E@@6) $h@@2)
 :pattern ( ($IsAlloc DatatypeTypeType d@@11 (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R@@6 Std.Wrappers.Result$E@@6) $h@@2))
)))) ($IsAllocBox (Std_mWrappers.Result.value d@@11) Std.Wrappers.Result$R@@6 $h@@2))
 :pattern ( ($IsAllocBox (Std_mWrappers.Result.value d@@11) Std.Wrappers.Result$R@@6 $h@@2))
)))
(assert (forall ((d@@12 T@U) (Std.Wrappers.Result$E@@7 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (Std_mWrappers.Result.Failure_q d@@12) (exists ((Std.Wrappers.Result$R@@7 T@U) ) (! ($IsAlloc DatatypeTypeType d@@12 (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R@@7 Std.Wrappers.Result$E@@7) $h@@3)
 :pattern ( ($IsAlloc DatatypeTypeType d@@12 (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R@@7 Std.Wrappers.Result$E@@7) $h@@3))
)))) ($IsAllocBox (Std_mWrappers.Result.error d@@12) Std.Wrappers.Result$E@@7 $h@@3))
 :pattern ( ($IsAllocBox (Std_mWrappers.Result.error d@@12) Std.Wrappers.Result$E@@7 $h@@3))
)))
(assert (forall ((Std.Wrappers.Result$R@@8 T@U) (Std.Wrappers.Result$E@@8 T@U) (|a#2#0#0@@0| T@U) ($h@@4 T@U) ) (!  (=> ($IsGoodHeap $h@@4) (= ($IsAlloc DatatypeTypeType (|#Std.Wrappers.Result.Success| |a#2#0#0@@0|) (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R@@8 Std.Wrappers.Result$E@@8) $h@@4) ($IsAllocBox |a#2#0#0@@0| Std.Wrappers.Result$R@@8 $h@@4)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#Std.Wrappers.Result.Success| |a#2#0#0@@0|) (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R@@8 Std.Wrappers.Result$E@@8) $h@@4))
)))
(assert (forall ((Std.Wrappers.Result$R@@9 T@U) (Std.Wrappers.Result$E@@9 T@U) (|a#8#0#0@@1| T@U) ($h@@5 T@U) ) (!  (=> ($IsGoodHeap $h@@5) (= ($IsAlloc DatatypeTypeType (|#Std.Wrappers.Result.Failure| |a#8#0#0@@1|) (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R@@9 Std.Wrappers.Result$E@@9) $h@@5) ($IsAllocBox |a#8#0#0@@1| Std.Wrappers.Result$E@@9 $h@@5)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#Std.Wrappers.Result.Failure| |a#8#0#0@@1|) (Tclass.Std_mWrappers.Result Std.Wrappers.Result$R@@9 Std.Wrappers.Result$E@@9) $h@@5))
)))
(assert (forall ((|a#3#0#0| T@U) ) (! (= (|#Std.Wrappers.Result.Success| (Lit BoxType |a#3#0#0|)) (Lit DatatypeTypeType (|#Std.Wrappers.Result.Success| |a#3#0#0|)))
 :pattern ( (|#Std.Wrappers.Result.Success| (Lit BoxType |a#3#0#0|)))
)))
(assert (forall ((|a#9#0#0@@0| T@U) ) (! (= (|#Std.Wrappers.Result.Failure| (Lit BoxType |a#9#0#0@@0|)) (Lit DatatypeTypeType (|#Std.Wrappers.Result.Failure| |a#9#0#0@@0|)))
 :pattern ( (|#Std.Wrappers.Result.Failure| (Lit BoxType |a#9#0#0@@0|)))
)))
(assert (forall ((|a#7#0#0@@0| T@U) ) (! (= (|#Std.Wrappers.OutcomeResult.Fail'| (Lit BoxType |a#7#0#0@@0|)) (Lit DatatypeTypeType (|#Std.Wrappers.OutcomeResult.Fail'| |a#7#0#0@@0|)))
 :pattern ( (|#Std.Wrappers.OutcomeResult.Fail'| (Lit BoxType |a#7#0#0@@0|)))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@5)) (Lit BoxType ($Box T@@4 x@@5)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@5)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((Std.Wrappers.OutcomeResult$E@@13 T@U) (Std.Wrappers.OutcomeResult.PropagateFailure$U@@2 T@U) (this@@4 T@U) ) (!  (=> (or (|Std_mWrappers.OutcomeResult.PropagateFailure#canCall| Std.Wrappers.OutcomeResult$E@@13 Std.Wrappers.OutcomeResult.PropagateFailure$U@@2 (Lit DatatypeTypeType this@@4)) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType this@@4 (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@13)) (U_2_bool (Lit boolType (bool_2_U (Std_mWrappers.OutcomeResult.IsFailure Std.Wrappers.OutcomeResult$E@@13 (Lit DatatypeTypeType this@@4)))))))) (= (Std_mWrappers.OutcomeResult.PropagateFailure Std.Wrappers.OutcomeResult$E@@13 Std.Wrappers.OutcomeResult.PropagateFailure$U@@2 (Lit DatatypeTypeType this@@4)) (Lit DatatypeTypeType (|#Std.Wrappers.Result.Failure| (Lit BoxType (Std_mWrappers.OutcomeResult.error (Lit DatatypeTypeType this@@4)))))))
 :weight 3
 :pattern ( (Std_mWrappers.OutcomeResult.PropagateFailure Std.Wrappers.OutcomeResult$E@@13 Std.Wrappers.OutcomeResult.PropagateFailure$U@@2 (Lit DatatypeTypeType this@@4)))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun this@@5 () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap@@0 () T@U)
(declare-fun Std.Wrappers.OutcomeResult$E@@14 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let ((anon5_Else_correct  (=> (= (ControlFlow 0 3) (- 0 2)) (Std_mWrappers.OutcomeResult.Fail_k_q this@@5))))
(let ((anon5_Then_correct true))
(let ((anon0_correct  (=> (and (and (= $_ReadsFrame@0 (|lambda#0| null $Heap@@0 alloc false)) ($IsAllocBox ($Box DatatypeTypeType this@@5) (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@14) $Heap@@0)) (and (|Std_mWrappers.OutcomeResult.IsFailure#canCall| Std.Wrappers.OutcomeResult$E@@14 this@@5) (Std_mWrappers.OutcomeResult.IsFailure Std.Wrappers.OutcomeResult$E@@14 this@@5))) (and (=> (= (ControlFlow 0 4) 1) anon5_Then_correct) (=> (= (ControlFlow 0 4) 3) anon5_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@0) ($IsHeapAnchor $Heap@@0)) (=> (and (and ($Is DatatypeTypeType this@@5 (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@14)) ($IsAlloc DatatypeTypeType this@@5 (Tclass.Std_mWrappers.OutcomeResult Std.Wrappers.OutcomeResult$E@@14) $Heap@@0)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 5) 4))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
