(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.Berry () T@U)
(declare-fun Tagclass._module.CoBerry () T@U)
(declare-fun Tagclass._module.NatPlus () T@U)
(declare-fun |##_module.Berry.Smultron| () T@U)
(declare-fun |##_module.Berry.Jordgubb| () T@U)
(declare-fun |##_module.Berry.Hjortron| () T@U)
(declare-fun |##_module.Berry.Hallon| () T@U)
(declare-fun |##_module.CoBerry.Smultron| () T@U)
(declare-fun |##_module.CoBerry.Jordgubb| () T@U)
(declare-fun |##_module.CoBerry.Hjortron| () T@U)
(declare-fun |##_module.CoBerry.Hallon| () T@U)
(declare-fun |##_module.NatPlus.Succ| () T@U)
(declare-fun |##_module.NatPlus.Zero| () T@U)
(declare-fun tytagFamily$Berry () T@U)
(declare-fun tytagFamily$CoBerry () T@U)
(declare-fun tytagFamily$NatPlus () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun |$Eq#_module.CoBerry| (T@U T@U T@U) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.Berry.Smultron| () T@U)
(declare-fun |#_module.Berry.Jordgubb| () T@U)
(declare-fun |#_module.Berry.Hjortron| () T@U)
(declare-fun |#_module.Berry.Hallon| () T@U)
(declare-fun |#_module.CoBerry.Smultron| () T@U)
(declare-fun |#_module.CoBerry.Jordgubb| () T@U)
(declare-fun |#_module.CoBerry.Hjortron| () T@U)
(declare-fun |#_module.CoBerry.Hallon| () T@U)
(declare-fun |#_module.NatPlus.Zero| () T@U)
(declare-fun |$PrefixEq#_module.CoBerry| (T@U T@U T@U T@U) Bool)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.Berry () T@U)
(declare-fun Tclass._module.CoBerry () T@U)
(declare-fun Tclass._module.NatPlus () T@U)
(declare-fun |_module.Berry#Equal| (T@U T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.Inf (T@U) T@U)
(declare-fun |_module.__default.Inf#canCall| () Bool)
(declare-fun |#_module.NatPlus.Succ| (T@U) T@U)
(declare-fun _module.Berry.Smultron_q (T@U) Bool)
(declare-fun _module.Berry.Jordgubb_q (T@U) Bool)
(declare-fun _module.Berry.Hjortron_q (T@U) Bool)
(declare-fun _module.Berry.Hallon_q (T@U) Bool)
(declare-fun _module.CoBerry.Smultron_q (T@U) Bool)
(declare-fun _module.CoBerry.Jordgubb_q (T@U) Bool)
(declare-fun _module.CoBerry.Hjortron_q (T@U) Bool)
(declare-fun _module.CoBerry.Hallon_q (T@U) Bool)
(declare-fun _module.NatPlus.Succ_q (T@U) Bool)
(declare-fun _module.NatPlus.Zero_q (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun _module.__default.IsRed (T@U) Bool)
(declare-fun |_module.__default.IsRed#canCall| (T@U) Bool)
(declare-fun |$IsA#_module.Berry| (T@U) Bool)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#FromBoogieMap| (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun _module.__default.IsCoRed (T@U) Bool)
(declare-fun |_module.__default.IsCoRed#canCall| (T@U) Bool)
(declare-fun |$IsA#_module.CoBerry| (T@U) Bool)
(declare-fun $LZ () T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |$IsA#_module.NatPlus| (T@U) Bool)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun _module.NatPlus._h2 (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |lambda#9| (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet alloc Tagclass._module.Berry Tagclass._module.CoBerry Tagclass._module.NatPlus |##_module.Berry.Smultron| |##_module.Berry.Jordgubb| |##_module.Berry.Hjortron| |##_module.Berry.Hallon| |##_module.CoBerry.Smultron| |##_module.CoBerry.Jordgubb| |##_module.CoBerry.Hjortron| |##_module.CoBerry.Hallon| |##_module.NatPlus.Succ| |##_module.NatPlus.Zero| tytagFamily$Berry tytagFamily$CoBerry tytagFamily$NatPlus)
)
(assert (forall ((ly T@U) (d0 T@U) (d1 T@U) ) (! (= (|$Eq#_module.CoBerry| ($LS ly) d0 d1) (= d0 d1))
 :pattern ( (|$Eq#_module.CoBerry| ($LS ly) d0 d1))
)))
(assert (forall ((o T@U) (p T@U) (r T@U) ) (!  (=> (and (|ORD#Less| o p) (|ORD#Less| p r)) (|ORD#Less| o r))
 :pattern ( (|ORD#Less| o p) (|ORD#Less| p r))
 :pattern ( (|ORD#Less| o p) (|ORD#Less| o r))
)))
(assert (= (DatatypeCtorId |#_module.Berry.Smultron|) |##_module.Berry.Smultron|))
(assert (= (DatatypeCtorId |#_module.Berry.Jordgubb|) |##_module.Berry.Jordgubb|))
(assert (= (DatatypeCtorId |#_module.Berry.Hjortron|) |##_module.Berry.Hjortron|))
(assert (= (DatatypeCtorId |#_module.Berry.Hallon|) |##_module.Berry.Hallon|))
(assert (= (DatatypeCtorId |#_module.CoBerry.Smultron|) |##_module.CoBerry.Smultron|))
(assert (= (DatatypeCtorId |#_module.CoBerry.Jordgubb|) |##_module.CoBerry.Jordgubb|))
(assert (= (DatatypeCtorId |#_module.CoBerry.Hjortron|) |##_module.CoBerry.Hjortron|))
(assert (= (DatatypeCtorId |#_module.CoBerry.Hallon|) |##_module.CoBerry.Hallon|))
(assert (= (DatatypeCtorId |#_module.NatPlus.Zero|) |##_module.NatPlus.Zero|))
(assert (forall ((ly@@0 T@U) (d0@@0 T@U) (d1@@0 T@U) ) (!  (=> (forall ((k Int) ) (!  (=> (<= 0 k) (|$PrefixEq#_module.CoBerry| (|ORD#FromNat| k) ($LS ly@@0) d0@@0 d1@@0))
 :pattern ( (|$PrefixEq#_module.CoBerry| (|ORD#FromNat| k) ($LS ly@@0) d0@@0 d1@@0))
)) (|$Eq#_module.CoBerry| ($LS ly@@0) d0@@0 d1@@0))
 :pattern ( (|$Eq#_module.CoBerry| ($LS ly@@0) d0@@0 d1@@0))
)))
(assert (= (Ctor DatatypeTypeType) 3))
(assert ($Is DatatypeTypeType |#_module.Berry.Smultron| Tclass._module.Berry))
(assert ($Is DatatypeTypeType |#_module.Berry.Jordgubb| Tclass._module.Berry))
(assert ($Is DatatypeTypeType |#_module.Berry.Hjortron| Tclass._module.Berry))
(assert ($Is DatatypeTypeType |#_module.Berry.Hallon| Tclass._module.Berry))
(assert ($Is DatatypeTypeType |#_module.CoBerry.Smultron| Tclass._module.CoBerry))
(assert ($Is DatatypeTypeType |#_module.CoBerry.Jordgubb| Tclass._module.CoBerry))
(assert ($Is DatatypeTypeType |#_module.CoBerry.Hjortron| Tclass._module.CoBerry))
(assert ($Is DatatypeTypeType |#_module.CoBerry.Hallon| Tclass._module.CoBerry))
(assert ($Is DatatypeTypeType |#_module.NatPlus.Zero| Tclass._module.NatPlus))
(assert (forall ((a T@U) (b T@U) ) (! (= (|_module.Berry#Equal| a b) (= a b))
 :pattern ( (|_module.Berry#Equal| a b))
)))
(assert (forall ((k@@0 T@U) (ly@@1 T@U) (d0@@1 T@U) (d1@@1 T@U) (m T@U) ) (!  (=> (and (|ORD#Less| k@@0 m) (|$PrefixEq#_module.CoBerry| m ($LS ly@@1) d0@@1 d1@@1)) (|$PrefixEq#_module.CoBerry| k@@0 ($LS ly@@1) d0@@1 d1@@1))
 :pattern ( (|$PrefixEq#_module.CoBerry| k@@0 ($LS ly@@1) d0@@1 d1@@1) (|$PrefixEq#_module.CoBerry| m ($LS ly@@1) d0@@1 d1@@1))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= (Lit T x@@2) x@@2)
 :pattern ( (Lit T x@@2))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly T@U) ) (!  (=> (or |_module.__default.Inf#canCall| (< 1 $FunctionContextHeight)) (and |_module.__default.Inf#canCall| (= (_module.__default.Inf ($LS $ly)) (Lit DatatypeTypeType (|#_module.NatPlus.Succ| (Lit DatatypeTypeType (_module.__default.Inf $ly)))))))
 :pattern ( (_module.__default.Inf ($LS $ly)))
))))
(assert (forall ((d T@U) ) (! (= (_module.Berry.Smultron_q d) (= (DatatypeCtorId d) |##_module.Berry.Smultron|))
 :pattern ( (_module.Berry.Smultron_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_module.Berry.Jordgubb_q d@@0) (= (DatatypeCtorId d@@0) |##_module.Berry.Jordgubb|))
 :pattern ( (_module.Berry.Jordgubb_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_module.Berry.Hjortron_q d@@1) (= (DatatypeCtorId d@@1) |##_module.Berry.Hjortron|))
 :pattern ( (_module.Berry.Hjortron_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (_module.Berry.Hallon_q d@@2) (= (DatatypeCtorId d@@2) |##_module.Berry.Hallon|))
 :pattern ( (_module.Berry.Hallon_q d@@2))
)))
(assert (forall ((d@@3 T@U) ) (! (= (_module.CoBerry.Smultron_q d@@3) (= (DatatypeCtorId d@@3) |##_module.CoBerry.Smultron|))
 :pattern ( (_module.CoBerry.Smultron_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (! (= (_module.CoBerry.Jordgubb_q d@@4) (= (DatatypeCtorId d@@4) |##_module.CoBerry.Jordgubb|))
 :pattern ( (_module.CoBerry.Jordgubb_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (! (= (_module.CoBerry.Hjortron_q d@@5) (= (DatatypeCtorId d@@5) |##_module.CoBerry.Hjortron|))
 :pattern ( (_module.CoBerry.Hjortron_q d@@5))
)))
(assert (forall ((d@@6 T@U) ) (! (= (_module.CoBerry.Hallon_q d@@6) (= (DatatypeCtorId d@@6) |##_module.CoBerry.Hallon|))
 :pattern ( (_module.CoBerry.Hallon_q d@@6))
)))
(assert (forall ((d@@7 T@U) ) (! (= (_module.NatPlus.Succ_q d@@7) (= (DatatypeCtorId d@@7) |##_module.NatPlus.Succ|))
 :pattern ( (_module.NatPlus.Succ_q d@@7))
)))
(assert (forall ((d@@8 T@U) ) (! (= (_module.NatPlus.Zero_q d@@8) (= (DatatypeCtorId d@@8) |##_module.NatPlus.Zero|))
 :pattern ( (_module.NatPlus.Zero_q d@@8))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@3)) x@@3)
 :pattern ( ($Unbox T@@0 x@@3))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|b#0| T@U) ) (!  (=> (or (|_module.__default.IsRed#canCall| |b#0|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |b#0| Tclass._module.Berry))) (and (|$IsA#_module.Berry| |b#0|) (= (_module.__default.IsRed |b#0|)  (not (|_module.Berry#Equal| |b#0| |#_module.Berry.Hjortron|)))))
 :pattern ( (_module.__default.IsRed |b#0|))
))))
(assert  (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m@@0 T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m@@0 x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@1 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@1 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@1 y0)))
 :weight 0
))) (= (Ctor BoxType) 4)))
(assert (forall ((m@@2 T@U) (bx T@U) ) (! (= (|Set#IsMember| (|Set#FromBoogieMap| m@@2) bx) (U_2_bool (MapType0Select BoxType boolType m@@2 bx)))
 :pattern ( (|Set#IsMember| (|Set#FromBoogieMap| m@@2) bx))
)))
(assert (forall ((d@@9 T@U) ) (!  (=> (_module.Berry.Smultron_q d@@9) (= d@@9 |#_module.Berry.Smultron|))
 :pattern ( (_module.Berry.Smultron_q d@@9))
)))
(assert (forall ((d@@10 T@U) ) (!  (=> (_module.Berry.Jordgubb_q d@@10) (= d@@10 |#_module.Berry.Jordgubb|))
 :pattern ( (_module.Berry.Jordgubb_q d@@10))
)))
(assert (forall ((d@@11 T@U) ) (!  (=> (_module.Berry.Hjortron_q d@@11) (= d@@11 |#_module.Berry.Hjortron|))
 :pattern ( (_module.Berry.Hjortron_q d@@11))
)))
(assert (forall ((d@@12 T@U) ) (!  (=> (_module.Berry.Hallon_q d@@12) (= d@@12 |#_module.Berry.Hallon|))
 :pattern ( (_module.Berry.Hallon_q d@@12))
)))
(assert (forall ((d@@13 T@U) ) (!  (=> (_module.CoBerry.Smultron_q d@@13) (= d@@13 |#_module.CoBerry.Smultron|))
 :pattern ( (_module.CoBerry.Smultron_q d@@13))
)))
(assert (forall ((d@@14 T@U) ) (!  (=> (_module.CoBerry.Jordgubb_q d@@14) (= d@@14 |#_module.CoBerry.Jordgubb|))
 :pattern ( (_module.CoBerry.Jordgubb_q d@@14))
)))
(assert (forall ((d@@15 T@U) ) (!  (=> (_module.CoBerry.Hjortron_q d@@15) (= d@@15 |#_module.CoBerry.Hjortron|))
 :pattern ( (_module.CoBerry.Hjortron_q d@@15))
)))
(assert (forall ((d@@16 T@U) ) (!  (=> (_module.CoBerry.Hallon_q d@@16) (= d@@16 |#_module.CoBerry.Hallon|))
 :pattern ( (_module.CoBerry.Hallon_q d@@16))
)))
(assert (forall ((d@@17 T@U) ) (!  (=> (_module.NatPlus.Zero_q d@@17) (= d@@17 |#_module.NatPlus.Zero|))
 :pattern ( (_module.NatPlus.Zero_q d@@17))
)))
(assert (= (Ctor SetType) 5))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx@@0 T@U) ) (!  (=> (|Set#IsMember| v bx@@0) ($IsBox bx@@0 t0@@0))
 :pattern ( (|Set#IsMember| v bx@@0))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert (forall ((d@@18 T@U) ) (!  (=> (_module.NatPlus.Succ_q d@@18) (exists ((|a#45#0#0| T@U) ) (= d@@18 (|#_module.NatPlus.Succ| |a#45#0#0|))))
 :pattern ( (_module.NatPlus.Succ_q d@@18))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|b#0@@0| T@U) ) (!  (=> (or (|_module.__default.IsCoRed#canCall| |b#0@@0|) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |b#0@@0| Tclass._module.CoBerry))) (and (|$IsA#_module.CoBerry| |b#0@@0|) (= (_module.__default.IsCoRed |b#0@@0|) (|$Eq#_module.CoBerry| ($LS ($LS $LZ)) |b#0@@0| |#_module.CoBerry.Hjortron|))))
 :pattern ( (_module.__default.IsCoRed |b#0@@0|))
))))
(assert (forall ((k@@1 T@U) (ly@@2 T@U) (d0@@2 T@U) (d1@@2 T@U) ) (!  (=> (or (not (= k@@1 (|ORD#FromNat| 0))) (not true)) (= (|$PrefixEq#_module.CoBerry| k@@1 ($LS ly@@2) d0@@2 d1@@2) (|$PrefixEq#_module.CoBerry| k@@1 ly@@2 d0@@2 d1@@2)))
 :pattern ( (|$PrefixEq#_module.CoBerry| k@@1 ($LS ly@@2) d0@@2 d1@@2))
)))
(assert (forall ((ly@@3 T@U) (d0@@3 T@U) (d1@@3 T@U) ) (! (= (|$Eq#_module.CoBerry| ($LS ly@@3) d0@@3 d1@@3) (|$Eq#_module.CoBerry| ly@@3 d0@@3 d1@@3))
 :pattern ( (|$Eq#_module.CoBerry| ($LS ly@@3) d0@@3 d1@@3))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert (forall ((n Int) ) (!  (=> (<= 0 n) (and (|ORD#IsNat| (|ORD#FromNat| n)) (= (|ORD#Offset| (|ORD#FromNat| n)) n)))
 :pattern ( (|ORD#FromNat| n))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass._module.Berry) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@1)) bx@@1) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@1) Tclass._module.Berry)))
 :pattern ( ($IsBox bx@@1 Tclass._module.Berry))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._module.CoBerry) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@2)) bx@@2) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@2) Tclass._module.CoBerry)))
 :pattern ( ($IsBox bx@@2 Tclass._module.CoBerry))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._module.NatPlus) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@3)) bx@@3) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@3) Tclass._module.NatPlus)))
 :pattern ( ($IsBox bx@@3 Tclass._module.NatPlus))
)))
(assert (forall ((|a#46#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_module.NatPlus.Succ| |a#46#0#0|) Tclass._module.NatPlus) ($Is DatatypeTypeType |a#46#0#0| Tclass._module.NatPlus))
 :pattern ( ($Is DatatypeTypeType (|#_module.NatPlus.Succ| |a#46#0#0|) Tclass._module.NatPlus))
)))
(assert (forall ((ly@@4 T@U) (d0@@4 T@U) (d1@@4 T@U) ) (! (= (|$Eq#_module.CoBerry| ($LS ly@@4) d0@@4 d1@@4) (forall ((k@@2 T@U) ) (! (|$PrefixEq#_module.CoBerry| k@@2 ($LS ly@@4) d0@@4 d1@@4)
 :pattern ( (|$PrefixEq#_module.CoBerry| k@@2 ($LS ly@@4) d0@@4 d1@@4))
)))
 :pattern ( (|$Eq#_module.CoBerry| ($LS ly@@4) d0@@4 d1@@4))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|b#0@@1| T@U) ) (!  (=> (or (|_module.__default.IsRed#canCall| (Lit DatatypeTypeType |b#0@@1|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |b#0@@1| Tclass._module.Berry))) (and (|$IsA#_module.Berry| (Lit DatatypeTypeType |b#0@@1|)) (= (_module.__default.IsRed (Lit DatatypeTypeType |b#0@@1|))  (not (|_module.Berry#Equal| |b#0@@1| |#_module.Berry.Hjortron|)))))
 :weight 3
 :pattern ( (_module.__default.IsRed (Lit DatatypeTypeType |b#0@@1|)))
))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|b#0@@2| T@U) ) (!  (=> (or (|_module.__default.IsCoRed#canCall| (Lit DatatypeTypeType |b#0@@2|)) (and (< 1 $FunctionContextHeight) ($Is DatatypeTypeType |b#0@@2| Tclass._module.CoBerry))) (and (|$IsA#_module.CoBerry| (Lit DatatypeTypeType |b#0@@2|)) (= (_module.__default.IsCoRed (Lit DatatypeTypeType |b#0@@2|)) (|$Eq#_module.CoBerry| ($LS ($LS $LZ)) |b#0@@2| |#_module.CoBerry.Hjortron|))))
 :weight 3
 :pattern ( (_module.__default.IsCoRed (Lit DatatypeTypeType |b#0@@2|)))
))))
(assert (forall ((d@@19 T@U) ) (!  (=> (|$IsA#_module.NatPlus| d@@19) (or (_module.NatPlus.Succ_q d@@19) (_module.NatPlus.Zero_q d@@19)))
 :pattern ( (|$IsA#_module.NatPlus| d@@19))
)))
(assert (forall ((o@@0 T@U) (p@@0 T@U) ) (!  (or (or (|ORD#Less| o@@0 p@@0) (= o@@0 p@@0)) (|ORD#Less| p@@0 o@@0))
 :pattern ( (|ORD#Less| o@@0 p@@0) (|ORD#Less| p@@0 o@@0))
)))
(assert (forall ((d@@20 T@U) ) (!  (=> ($Is DatatypeTypeType d@@20 Tclass._module.NatPlus) (or (_module.NatPlus.Succ_q d@@20) (_module.NatPlus.Zero_q d@@20)))
 :pattern ( (_module.NatPlus.Zero_q d@@20) ($Is DatatypeTypeType d@@20 Tclass._module.NatPlus))
 :pattern ( (_module.NatPlus.Succ_q d@@20) ($Is DatatypeTypeType d@@20 Tclass._module.NatPlus))
)))
(assert (forall ((k@@3 T@U) (ly@@5 T@U) (d0@@5 T@U) (d1@@5 T@U) ) (!  (=> (and ($Is DatatypeTypeType d0@@5 Tclass._module.CoBerry) ($Is DatatypeTypeType d1@@5 Tclass._module.CoBerry)) (= (|$PrefixEq#_module.CoBerry| k@@3 ($LS ly@@5) d0@@5 d1@@5)  (and (=> (< 0 (|ORD#Offset| k@@3)) (or (or (or (and (_module.CoBerry.Smultron_q d0@@5) (_module.CoBerry.Smultron_q d1@@5)) (and (_module.CoBerry.Jordgubb_q d0@@5) (_module.CoBerry.Jordgubb_q d1@@5))) (and (_module.CoBerry.Hjortron_q d0@@5) (_module.CoBerry.Hjortron_q d1@@5))) (and (_module.CoBerry.Hallon_q d0@@5) (_module.CoBerry.Hallon_q d1@@5)))) (=> (and (or (not (= k@@3 (|ORD#FromNat| 0))) (not true)) (= (|ORD#Offset| k@@3) 0)) (|$Eq#_module.CoBerry| ly@@5 d0@@5 d1@@5)))))
 :pattern ( (|$PrefixEq#_module.CoBerry| k@@3 ($LS ly@@5) d0@@5 d1@@5))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((o@@1 T@U) ) (! (<= 0 (|ORD#Offset| o@@1))
 :pattern ( (|ORD#Offset| o@@1))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (_module.Berry.Smultron_q a@@0) (_module.Berry.Smultron_q b@@0)) (|_module.Berry#Equal| a@@0 b@@0))
 :pattern ( (|_module.Berry#Equal| a@@0 b@@0) (_module.Berry.Smultron_q a@@0))
 :pattern ( (|_module.Berry#Equal| a@@0 b@@0) (_module.Berry.Smultron_q b@@0))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (_module.Berry.Jordgubb_q a@@1) (_module.Berry.Jordgubb_q b@@1)) (|_module.Berry#Equal| a@@1 b@@1))
 :pattern ( (|_module.Berry#Equal| a@@1 b@@1) (_module.Berry.Jordgubb_q a@@1))
 :pattern ( (|_module.Berry#Equal| a@@1 b@@1) (_module.Berry.Jordgubb_q b@@1))
)))
(assert (forall ((a@@2 T@U) (b@@2 T@U) ) (!  (=> (and (_module.Berry.Hjortron_q a@@2) (_module.Berry.Hjortron_q b@@2)) (|_module.Berry#Equal| a@@2 b@@2))
 :pattern ( (|_module.Berry#Equal| a@@2 b@@2) (_module.Berry.Hjortron_q a@@2))
 :pattern ( (|_module.Berry#Equal| a@@2 b@@2) (_module.Berry.Hjortron_q b@@2))
)))
(assert (forall ((a@@3 T@U) (b@@3 T@U) ) (!  (=> (and (_module.Berry.Hallon_q a@@3) (_module.Berry.Hallon_q b@@3)) (|_module.Berry#Equal| a@@3 b@@3))
 :pattern ( (|_module.Berry#Equal| a@@3 b@@3) (_module.Berry.Hallon_q a@@3))
 :pattern ( (|_module.Berry#Equal| a@@3 b@@3) (_module.Berry.Hallon_q b@@3))
)))
(assert (forall ((v@@2 T@U) (t0@@1 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0) (forall ((bx@@4 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@4) ($IsAllocBox bx@@4 t0@@1 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@4))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0))
)))
(assert (forall ((t@@1 T@U) ) (! (= (Inv0_TSet (TSet t@@1)) t@@1)
 :pattern ( (TSet t@@1))
)))
(assert (forall ((t@@2 T@U) ) (! (= (Tag (TSet t@@2)) TagSet)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((|a#44#0#0| T@U) ) (! (= (DatatypeCtorId (|#_module.NatPlus.Succ| |a#44#0#0|)) |##_module.NatPlus.Succ|)
 :pattern ( (|#_module.NatPlus.Succ| |a#44#0#0|))
)))
(assert (forall ((|a#47#0#0| T@U) ) (! (= (_module.NatPlus._h2 (|#_module.NatPlus.Succ| |a#47#0#0|)) |a#47#0#0|)
 :pattern ( (|#_module.NatPlus.Succ| |a#47#0#0|))
)))
(assert (forall ((x@@4 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@4)) x@@4)
 :pattern ( ($Box T@@3 x@@4))
)))
(assert (forall ((o@@2 T@U) (p@@1 T@U) ) (!  (and (and (and (=> (|ORD#Less| o@@2 p@@1) (or (not (= o@@2 p@@1)) (not true))) (=> (and (|ORD#IsNat| o@@2) (not (|ORD#IsNat| p@@1))) (|ORD#Less| o@@2 p@@1))) (=> (and (|ORD#IsNat| o@@2) (|ORD#IsNat| p@@1)) (= (|ORD#Less| o@@2 p@@1) (< (|ORD#Offset| o@@2) (|ORD#Offset| p@@1))))) (=> (and (|ORD#Less| o@@2 p@@1) (|ORD#IsNat| p@@1)) (|ORD#IsNat| o@@2)))
 :pattern ( (|ORD#Less| o@@2 p@@1))
)))
(assert  (and (and (and (and (and (and (forall ((t0@@2 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@3 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 t2 (MapType1Store t0@@2 t1@@0 t2 m@@3 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@4 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@4 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@4 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@5 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@5 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@5 y0@@1 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 6)) (= (Ctor FieldType) 7)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 8))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@0 T@U) ) (!  (=> (or |_module.__default.Inf#canCall| (< 1 $FunctionContextHeight)) ($Is DatatypeTypeType (_module.__default.Inf $ly@@0) Tclass._module.NatPlus))
 :pattern ( (_module.__default.Inf $ly@@0))
))))
(assert (forall ((ly@@6 T@U) (d0@@6 T@U) (d1@@6 T@U) ) (!  (=> (and ($Is DatatypeTypeType d0@@6 Tclass._module.CoBerry) ($Is DatatypeTypeType d1@@6 Tclass._module.CoBerry)) (= (|$Eq#_module.CoBerry| ($LS ly@@6) d0@@6 d1@@6)  (or (or (or (and (_module.CoBerry.Smultron_q d0@@6) (_module.CoBerry.Smultron_q d1@@6)) (and (_module.CoBerry.Jordgubb_q d0@@6) (_module.CoBerry.Jordgubb_q d1@@6))) (and (_module.CoBerry.Hjortron_q d0@@6) (_module.CoBerry.Hjortron_q d1@@6))) (and (_module.CoBerry.Hallon_q d0@@6) (_module.CoBerry.Hallon_q d1@@6)))))
 :pattern ( (|$Eq#_module.CoBerry| ($LS ly@@6) d0@@6 d1@@6))
)))
(assert (forall (($ly@@1 T@U) ) (! (= (_module.__default.Inf ($LS $ly@@1)) (_module.__default.Inf $ly@@1))
 :pattern ( (_module.__default.Inf ($LS $ly@@1)))
)))
(assert (forall ((bx@@5 T@U) (t@@3 T@U) ) (!  (=> ($IsBox bx@@5 (TSet t@@3)) (and (= ($Box SetType ($Unbox SetType bx@@5)) bx@@5) ($Is SetType ($Unbox SetType bx@@5) (TSet t@@3))))
 :pattern ( ($IsBox bx@@5 (TSet t@@3)))
)))
(assert (forall ((o@@3 T@U) ) (!  (=> (|ORD#IsNat| o@@3) (= o@@3 (|ORD#FromNat| (|ORD#Offset| o@@3))))
 :pattern ( (|ORD#Offset| o@@3))
 :pattern ( (|ORD#IsNat| o@@3))
)))
(assert (forall ((d@@21 T@U) ($h T@U) ) (!  (=> (and ($IsGoodHeap $h) ($Is DatatypeTypeType d@@21 Tclass._module.Berry)) ($IsAlloc DatatypeTypeType d@@21 Tclass._module.Berry $h))
 :pattern ( ($IsAlloc DatatypeTypeType d@@21 Tclass._module.Berry $h))
)))
(assert (forall ((d@@22 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) ($Is DatatypeTypeType d@@22 Tclass._module.CoBerry)) ($IsAlloc DatatypeTypeType d@@22 Tclass._module.CoBerry $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType d@@22 Tclass._module.CoBerry $h@@0))
)))
(assert (forall ((d@@23 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) ($Is DatatypeTypeType d@@23 Tclass._module.NatPlus)) ($IsAlloc DatatypeTypeType d@@23 Tclass._module.NatPlus $h@@1))
 :pattern ( ($IsAlloc DatatypeTypeType d@@23 Tclass._module.NatPlus $h@@1))
)))
(assert (= (Tag Tclass._module.Berry) Tagclass._module.Berry))
(assert (= (TagFamily Tclass._module.Berry) tytagFamily$Berry))
(assert (= (Tag Tclass._module.CoBerry) Tagclass._module.CoBerry))
(assert (= (TagFamily Tclass._module.CoBerry) tytagFamily$CoBerry))
(assert (= (Tag Tclass._module.NatPlus) Tagclass._module.NatPlus))
(assert (= (TagFamily Tclass._module.NatPlus) tytagFamily$NatPlus))
(assert (forall ((|l#0@@0| T@U) (|$y#0| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#9| |l#0@@0|) |$y#0|))  (and ($IsBox |$y#0| |l#0@@0|) (_module.__default.IsRed ($Unbox DatatypeTypeType |$y#0|))))
 :pattern ( (MapType0Select BoxType boolType (|lambda#9| |l#0@@0|) |$y#0|))
)))
(assert (= |#_module.Berry.Smultron| (Lit DatatypeTypeType |#_module.Berry.Smultron|)))
(assert (= |#_module.Berry.Jordgubb| (Lit DatatypeTypeType |#_module.Berry.Jordgubb|)))
(assert (= |#_module.Berry.Hjortron| (Lit DatatypeTypeType |#_module.Berry.Hjortron|)))
(assert (= |#_module.Berry.Hallon| (Lit DatatypeTypeType |#_module.Berry.Hallon|)))
(assert (forall ((d@@24 T@U) ) (!  (=> (|$IsA#_module.Berry| d@@24) (or (or (or (_module.Berry.Smultron_q d@@24) (_module.Berry.Jordgubb_q d@@24)) (_module.Berry.Hjortron_q d@@24)) (_module.Berry.Hallon_q d@@24)))
 :pattern ( (|$IsA#_module.Berry| d@@24))
)))
(assert (forall ((d@@25 T@U) ) (!  (=> (|$IsA#_module.CoBerry| d@@25) (or (or (or (_module.CoBerry.Smultron_q d@@25) (_module.CoBerry.Jordgubb_q d@@25)) (_module.CoBerry.Hjortron_q d@@25)) (_module.CoBerry.Hallon_q d@@25)))
 :pattern ( (|$IsA#_module.CoBerry| d@@25))
)))
(assert (forall ((d@@26 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_module.NatPlus.Succ_q d@@26) ($IsAlloc DatatypeTypeType d@@26 Tclass._module.NatPlus $h@@2))) ($IsAlloc DatatypeTypeType (_module.NatPlus._h2 d@@26) Tclass._module.NatPlus $h@@2))
 :pattern ( ($IsAlloc DatatypeTypeType (_module.NatPlus._h2 d@@26) Tclass._module.NatPlus $h@@2))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@5)) (Lit BoxType ($Box T@@4 x@@5)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@5)))
)))
(assert (forall ((d@@27 T@U) ) (!  (=> ($Is DatatypeTypeType d@@27 Tclass._module.Berry) (or (or (or (_module.Berry.Smultron_q d@@27) (_module.Berry.Jordgubb_q d@@27)) (_module.Berry.Hjortron_q d@@27)) (_module.Berry.Hallon_q d@@27)))
 :pattern ( (_module.Berry.Hallon_q d@@27) ($Is DatatypeTypeType d@@27 Tclass._module.Berry))
 :pattern ( (_module.Berry.Hjortron_q d@@27) ($Is DatatypeTypeType d@@27 Tclass._module.Berry))
 :pattern ( (_module.Berry.Jordgubb_q d@@27) ($Is DatatypeTypeType d@@27 Tclass._module.Berry))
 :pattern ( (_module.Berry.Smultron_q d@@27) ($Is DatatypeTypeType d@@27 Tclass._module.Berry))
)))
(assert (forall ((d@@28 T@U) ) (!  (=> ($Is DatatypeTypeType d@@28 Tclass._module.CoBerry) (or (or (or (_module.CoBerry.Smultron_q d@@28) (_module.CoBerry.Jordgubb_q d@@28)) (_module.CoBerry.Hjortron_q d@@28)) (_module.CoBerry.Hallon_q d@@28)))
 :pattern ( (_module.CoBerry.Hallon_q d@@28) ($Is DatatypeTypeType d@@28 Tclass._module.CoBerry))
 :pattern ( (_module.CoBerry.Hjortron_q d@@28) ($Is DatatypeTypeType d@@28 Tclass._module.CoBerry))
 :pattern ( (_module.CoBerry.Jordgubb_q d@@28) ($Is DatatypeTypeType d@@28 Tclass._module.CoBerry))
 :pattern ( (_module.CoBerry.Smultron_q d@@28) ($Is DatatypeTypeType d@@28 Tclass._module.CoBerry))
)))
(assert (forall ((k@@4 T@U) (ly@@7 T@U) (d0@@7 T@U) (d1@@7 T@U) ) (!  (=> (= d0@@7 d1@@7) (|$PrefixEq#_module.CoBerry| k@@4 ($LS ly@@7) d0@@7 d1@@7))
 :pattern ( (|$PrefixEq#_module.CoBerry| k@@4 ($LS ly@@7) d0@@7 d1@@7))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |c#1@0| () T@U)
(declare-fun $Heap () T@U)
(declare-fun |s#0@0| () T@U)
(declare-fun |b#0@0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |s#0| () T@U)
(declare-fun |c#0| () T@U)
(declare-fun |n#0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 11) (let ((anon5_correct  (=> (= (ControlFlow 0 2) (- 0 1)) (or (and ($Is DatatypeTypeType (Lit DatatypeTypeType |#_module.CoBerry.Hallon|) Tclass._module.CoBerry) (U_2_bool (Lit boolType (bool_2_U (_module.__default.IsCoRed (Lit DatatypeTypeType |#_module.CoBerry.Hallon|)))))) (or (and ($Is DatatypeTypeType (Lit DatatypeTypeType |#_module.CoBerry.Hjortron|) Tclass._module.CoBerry) (U_2_bool (Lit boolType (bool_2_U (_module.__default.IsCoRed (Lit DatatypeTypeType |#_module.CoBerry.Hjortron|)))))) (or (and ($Is DatatypeTypeType (Lit DatatypeTypeType |#_module.CoBerry.Jordgubb|) Tclass._module.CoBerry) (U_2_bool (Lit boolType (bool_2_U (_module.__default.IsCoRed (Lit DatatypeTypeType |#_module.CoBerry.Jordgubb|)))))) (or (and ($Is DatatypeTypeType (Lit DatatypeTypeType |#_module.CoBerry.Smultron|) Tclass._module.CoBerry) (U_2_bool (Lit boolType (bool_2_U (_module.__default.IsCoRed (Lit DatatypeTypeType |#_module.CoBerry.Smultron|)))))) (exists ((|$as#c0#0| T@U) )  (and ($Is DatatypeTypeType |$as#c0#0| Tclass._module.CoBerry) (_module.__default.IsCoRed |$as#c0#0|))))))))))
(let ((anon8_Else_correct  (=> (and (not (and ($Is DatatypeTypeType |c#1@0| Tclass._module.CoBerry) ($IsAlloc DatatypeTypeType |c#1@0| Tclass._module.CoBerry $Heap))) (= (ControlFlow 0 4) 2)) anon5_correct)))
(let ((anon8_Then_correct  (=> (and ($Is DatatypeTypeType |c#1@0| Tclass._module.CoBerry) ($IsAlloc DatatypeTypeType |c#1@0| Tclass._module.CoBerry $Heap)) (=> (and (and ($IsAlloc DatatypeTypeType |c#1@0| Tclass._module.CoBerry $Heap) (|_module.__default.IsCoRed#canCall| |c#1@0|)) (and (|_module.__default.IsCoRed#canCall| |c#1@0|) (= (ControlFlow 0 3) 2))) anon5_correct))))
(let ((anon3_correct  (=> (and (forall ((|b#1| T@U) ) (!  (=> ($Is DatatypeTypeType |b#1| Tclass._module.Berry) (|_module.__default.IsRed#canCall| |b#1|))
 :pattern ( (_module.__default.IsRed |b#1|))
)) (= |s#0@0| (|Set#FromBoogieMap| (|lambda#9| Tclass._module.Berry)))) (and (=> (= (ControlFlow 0 5) 3) anon8_Then_correct) (=> (= (ControlFlow 0 5) 4) anon8_Else_correct)))))
(let ((anon7_Else_correct  (=> (and (not (_module.__default.IsRed |b#0@0|)) (= (ControlFlow 0 8) 5)) anon3_correct)))
(let ((anon7_Then_correct  (=> (and (_module.__default.IsRed |b#0@0|) (= (ControlFlow 0 7) 5)) anon3_correct)))
(let ((anon6_Then_correct  (=> (and (and ($Is DatatypeTypeType |b#0@0| Tclass._module.Berry) ($IsAlloc DatatypeTypeType |b#0@0| Tclass._module.Berry $Heap)) (and ($IsAlloc DatatypeTypeType |b#0@0| Tclass._module.Berry $Heap) (|_module.__default.IsRed#canCall| |b#0@0|))) (and (=> (= (ControlFlow 0 9) 7) anon7_Then_correct) (=> (= (ControlFlow 0 9) 8) anon7_Else_correct)))))
(let ((anon6_Else_correct  (=> (and (not (and ($Is DatatypeTypeType |b#0@0| Tclass._module.Berry) ($IsAlloc DatatypeTypeType |b#0@0| Tclass._module.Berry $Heap))) (= (ControlFlow 0 6) 5)) anon3_correct)))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 10) 9) anon6_Then_correct) (=> (= (ControlFlow 0 10) 6) anon6_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (and (and ($Is SetType |s#0| (TSet Tclass._module.Berry)) ($IsAlloc SetType |s#0| (TSet Tclass._module.Berry) $Heap)) true) (and (and ($Is DatatypeTypeType |c#0| Tclass._module.CoBerry) ($IsAlloc DatatypeTypeType |c#0| Tclass._module.CoBerry $Heap)) true)) (and (and (and ($Is DatatypeTypeType |n#0| Tclass._module.NatPlus) ($IsAlloc DatatypeTypeType |n#0| Tclass._module.NatPlus $Heap)) true) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 11) 10)))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
