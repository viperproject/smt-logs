(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun |$let#0_x| (T@U) Int)
(declare-fun |$let#0$canCall| (T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.Sum (T@U T@U) Int)
(declare-fun $LS (T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun |_module.__default.Sum#canCall| (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun TSet (T@U) T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |_module.__default.Pick#canCall| (T@U) Bool)
(declare-fun _module.__default.Pick (T@U) Int)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSet alloc)
)
(assert (= (Tag TInt) TagInt))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (b T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| a@@1 y@@0) (|Set#IsMember| (|Set#Union| a@@1 b) y@@0))
 :pattern ( (|Set#Union| a@@1 b) (|Set#IsMember| a@@1 y@@0))
)))
(assert (forall ((a@@2 T@U) (b@@0 T@U) (y@@1 T@U) ) (!  (=> (|Set#IsMember| b@@0 y@@1) (|Set#IsMember| (|Set#Union| a@@2 b@@0) y@@1))
 :pattern ( (|Set#Union| a@@2 b@@0) (|Set#IsMember| b@@0 y@@1))
)))
(assert (forall ((a@@3 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@3 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@3 x@@4) o))
)))
(assert (forall ((a@@4 T@U) (b@@1 T@U) (y@@2 T@U) ) (!  (=> (|Set#IsMember| b@@1 y@@2) (not (|Set#IsMember| (|Set#Difference| a@@4 b@@1) y@@2)))
 :pattern ( (|Set#Difference| a@@4 b@@1) (|Set#IsMember| b@@1 y@@2))
)))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (forall ((a@@5 T@U) (b@@2 T@U) ) (! (= (|Set#Union| (|Set#Union| a@@5 b@@2) b@@2) (|Set#Union| a@@5 b@@2))
 :pattern ( (|Set#Union| (|Set#Union| a@@5 b@@2) b@@2))
)))
(assert (forall ((a@@6 T@U) (b@@3 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@6 b@@3) o@@1)  (and (|Set#IsMember| a@@6 o@@1) (not (|Set#IsMember| b@@3 o@@1))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@6 b@@3) o@@1))
)))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 3)) (= (Ctor BoxType) 4)) (= (Ctor refType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o@@2 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o@@2) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@2) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@2) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((s T@U) ) (!  (=> (|$let#0$canCall| s) (|Set#IsMember| s ($Box intType (int_2_U (|$let#0_x| s)))))
 :pattern ( (|$let#0_x| s))
)))
(assert (forall ((x@@5 Int) ) (! (= (LitInt x@@5) x@@5)
 :pattern ( (LitInt x@@5))
)))
(assert (forall ((x@@6 T@U) (T T@T) ) (! (= (Lit T x@@6) x@@6)
 :pattern ( (Lit T x@@6))
)))
(assert (forall ((a@@7 T@U) (b@@4 T@U) ) (! (= (|Set#Subset| a@@7 b@@4) (forall ((o@@3 T@U) ) (!  (=> (|Set#IsMember| a@@7 o@@3) (|Set#IsMember| b@@4 o@@3))
 :pattern ( (|Set#IsMember| a@@7 o@@3))
 :pattern ( (|Set#IsMember| b@@4 o@@3))
)))
 :pattern ( (|Set#Subset| a@@7 b@@4))
)))
(assert (forall ((x@@7 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@7)) x@@7)
 :pattern ( ($Unbox T@@0 x@@7))
)))
(assert (= (Ctor SetType) 7))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly T@U) (|s#0| T@U) ) (!  (=> (or (|_module.__default.Sum#canCall| (Lit SetType |s#0|)) (and (< 1 $FunctionContextHeight) ($Is SetType |s#0| (TSet TInt)))) (and (=> (not (|Set#Equal| |s#0| |Set#Empty|)) (and (|_module.__default.Pick#canCall| (Lit SetType |s#0|)) (let ((|x#1| (LitInt (_module.__default.Pick (Lit SetType |s#0|)))))
(|_module.__default.Sum#canCall| (|Set#Difference| |s#0| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |x#1|)))))))) (= (_module.__default.Sum ($LS $ly) (Lit SetType |s#0|)) (ite (|Set#Equal| |s#0| |Set#Empty|) 0 (let ((|x#1@@0| (LitInt (_module.__default.Pick (Lit SetType |s#0|)))))
(+ |x#1@@0| (_module.__default.Sum ($LS $ly) (|Set#Difference| |s#0| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |x#1@@0|)))))))))))
 :weight 3
 :pattern ( (_module.__default.Sum ($LS $ly) (Lit SetType |s#0|)))
))))
(assert (forall ((a@@8 T@U) (b@@5 T@U) ) (! (= (|Set#Disjoint| a@@8 b@@5) (forall ((o@@4 T@U) ) (!  (or (not (|Set#IsMember| a@@8 o@@4)) (not (|Set#IsMember| b@@5 o@@4)))
 :pattern ( (|Set#IsMember| a@@8 o@@4))
 :pattern ( (|Set#IsMember| b@@5 o@@4))
)))
 :pattern ( (|Set#Disjoint| a@@8 b@@5))
)))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0@@0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap T@U) (|s#0@@0| T@U) ) (!  (=> (or (|_module.__default.Pick#canCall| |s#0@@0|) (and (< 0 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap) ($Is SetType |s#0@@0| (TSet TInt))) (not (|Set#Equal| |s#0@@0| |Set#Empty|))))) (and (|$let#0$canCall| |s#0@@0|) (= (_module.__default.Pick |s#0@@0|) (let ((|x#0| (|$let#0_x| |s#0@@0|)))
|x#0|))))
 :pattern ( (_module.__default.Pick |s#0@@0|) ($IsGoodHeap $Heap))
))))
(assert (forall ((v@@0 T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@0) ($IsAlloc T@@1 v@@0 t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@0 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@0 t@@0 h@@1) ($IsAllocBox bx@@0 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@0 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@1 h@@2) ($IsAlloc T@@2 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@1 t@@1 h@@2))
)))
(assert (forall ((a@@9 T@U) (b@@6 T@U) (o@@5 T@U) ) (! (= (|Set#IsMember| (|Set#Union| a@@9 b@@6) o@@5)  (or (|Set#IsMember| a@@9 o@@5) (|Set#IsMember| b@@6 o@@5)))
 :pattern ( (|Set#IsMember| (|Set#Union| a@@9 b@@6) o@@5))
)))
(assert (forall ((a@@10 T@U) (b@@7 T@U) ) (!  (=> (|Set#Disjoint| a@@10 b@@7) (and (= (|Set#Difference| (|Set#Union| a@@10 b@@7) a@@10) b@@7) (= (|Set#Difference| (|Set#Union| a@@10 b@@7) b@@7) a@@10)))
 :pattern ( (|Set#Union| a@@10 b@@7))
)))
(assert (forall ((a@@11 T@U) (b@@8 T@U) ) (!  (=> (|Set#Equal| a@@11 b@@8) (= a@@11 b@@8))
 :pattern ( (|Set#Equal| a@@11 b@@8))
)))
(assert (forall ((a@@12 T@U) (b@@9 T@U) (c T@U) ) (!  (=> (or (not (= a@@12 c)) (not true)) (=> (and ($HeapSucc a@@12 b@@9) ($HeapSucc b@@9 c)) ($HeapSucc a@@12 c)))
 :pattern ( ($HeapSucc a@@12 b@@9) ($HeapSucc b@@9 c))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@0 T@U) (|s#0@@1| T@U) ) (!  (=> (or (|_module.__default.Pick#canCall| (Lit SetType |s#0@@1|)) (and (< 0 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@0) ($Is SetType |s#0@@1| (TSet TInt))) (not (|Set#Equal| |s#0@@1| |Set#Empty|))))) (and (|$let#0$canCall| (Lit SetType |s#0@@1|)) (= (_module.__default.Pick (Lit SetType |s#0@@1|)) (let ((|x#1@@1| (|$let#0_x| (Lit SetType |s#0@@1|))))
|x#1@@1|))))
 :weight 3
 :pattern ( (_module.__default.Pick (Lit SetType |s#0@@1|)) ($IsGoodHeap $Heap@@0))
))))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TInt) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) TInt)))
 :pattern ( ($IsBox bx@@1 TInt))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@2) ($Is T@@3 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@2))
)))
(assert (forall ((v@@3 T@U) (t0@@1 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3) (forall ((bx@@2 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@2) ($IsAllocBox bx@@2 t0@@1 h@@3))
 :pattern ( (|Set#IsMember| v@@3 bx@@2))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@1) h@@3))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((x@@8 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@8)) x@@8)
 :pattern ( ($Box T@@4 x@@8))
)))
(assert (forall (($ly@@0 T@U) (|s#0@@2| T@U) ) (! (= (_module.__default.Sum ($LS $ly@@0) |s#0@@2|) (_module.__default.Sum $ly@@0 |s#0@@2|))
 :pattern ( (_module.__default.Sum ($LS $ly@@0) |s#0@@2|))
)))
(assert (forall ((a@@13 T@U) (b@@10 T@U) ) (! (= (|Set#Union| a@@13 (|Set#Union| a@@13 b@@10)) (|Set#Union| a@@13 b@@10))
 :pattern ( (|Set#Union| a@@13 (|Set#Union| a@@13 b@@10)))
)))
(assert  (and (forall ((t0@@2 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@2 t1@@0 t2 (MapType1Store t0@@2 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($ly@@1 T@U) (|s#0@@3| T@U) ) (!  (=> (or (|_module.__default.Sum#canCall| |s#0@@3|) (and (< 1 $FunctionContextHeight) ($Is SetType |s#0@@3| (TSet TInt)))) (and (=> (not (|Set#Equal| |s#0@@3| |Set#Empty|)) (and (|_module.__default.Pick#canCall| |s#0@@3|) (let ((|x#0@@0| (_module.__default.Pick |s#0@@3|)))
(|_module.__default.Sum#canCall| (|Set#Difference| |s#0@@3| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |x#0@@0|)))))))) (= (_module.__default.Sum ($LS $ly@@1) |s#0@@3|) (ite (|Set#Equal| |s#0@@3| |Set#Empty|) 0 (let ((|x#0@@1| (_module.__default.Pick |s#0@@3|)))
(+ |x#0@@1| (_module.__default.Sum $ly@@1 (|Set#Difference| |s#0@@3| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |x#0@@1|)))))))))))
 :pattern ( (_module.__default.Sum ($LS $ly@@1) |s#0@@3|))
))))
(assert (forall ((bx@@3 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@3 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@3)) bx@@3) ($Is SetType ($Unbox SetType bx@@3) (TSet t@@5))))
 :pattern ( ($IsBox bx@@3 (TSet t@@5)))
)))
(assert (forall ((a@@14 T@U) (b@@11 T@U) ) (! (= (|Set#Equal| a@@14 b@@11) (forall ((o@@6 T@U) ) (! (= (|Set#IsMember| a@@14 o@@6) (|Set#IsMember| b@@11 o@@6))
 :pattern ( (|Set#IsMember| a@@14 o@@6))
 :pattern ( (|Set#IsMember| b@@11 o@@6))
)))
 :pattern ( (|Set#Equal| a@@14 b@@11))
)))
(assert (forall ((x@@9 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@9))) (Lit BoxType ($Box intType (int_2_U x@@9))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@9))))
)))
(assert (forall ((x@@10 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@10)) (Lit BoxType ($Box T@@5 x@@10)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@10)))
)))
(assert (forall ((h@@4 T@U) (v@@4 T@U) ) (! ($IsAlloc intType v@@4 TInt h@@4)
 :pattern ( ($IsAlloc intType v@@4 TInt h@@4))
)))
(assert (forall ((v@@5 T@U) ) (! ($Is intType v@@5 TInt)
 :pattern ( ($Is intType v@@5 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |#result#0@0| () Int)
(declare-fun $LZ () T@U)
(declare-fun |s#0@@4| () T@U)
(declare-fun |s'#0@0| () T@U)
(declare-fun |sum#0@1| () Int)
(declare-fun |x#2@1| () Int)
(declare-fun |s''#0@1| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $Heap@0 () T@U)
(declare-fun |$rhs#0_0@1| () Int)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun |s''#0@0| () T@U)
(declare-fun null () T@U)
(declare-fun $Heap@@1 () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |sum#0@0| () Int)
(declare-fun |s'#0| () T@U)
(declare-fun |s''#0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 21) (let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 13) (- 0 12)) (= |#result#0@0| (_module.__default.Sum ($LS ($LS $LZ)) |s#0@@4|)))))
(let ((anon12_Then_correct  (=> (and (and (|Set#Equal| |s'#0@0| |Set#Empty|) (|_module.__default.Sum#canCall| |s#0@@4|)) (and (= |#result#0@0| |sum#0@1|) (= (ControlFlow 0 14) 13))) GeneratedUnifiedExit_correct)))
(let ((anon13_Else_correct true))
(let ((anon13_Then_correct  (and (=> (= (ControlFlow 0 4) (- 0 9)) (or (and ($Is intType (int_2_U (LitInt 0)) TInt) (|Set#IsMember| |s'#0@0| ($Box intType (int_2_U (LitInt 0))))) (exists ((|$as#x0_0#0| T@U) ) (|Set#IsMember| |s'#0@0| ($Box intType |$as#x0_0#0|))))) (=> (or (and ($Is intType (int_2_U (LitInt 0)) TInt) (|Set#IsMember| |s'#0@0| ($Box intType (int_2_U (LitInt 0))))) (exists ((|$as#x0_0#0@@0| Int) ) (|Set#IsMember| |s'#0@0| ($Box intType (int_2_U |$as#x0_0#0@@0|))))) (=> (and (|Set#IsMember| |s'#0@0| ($Box intType (int_2_U |x#2@1|))) (= |s''#0@1| (|Set#Difference| |s'#0@0| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |x#2@1|)))))) (and (=> (= (ControlFlow 0 4) (- 0 8)) (|Set#Equal| (|Set#Union| |s''#0@1| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |x#2@1|)))) |s'#0@0|)) (=> (|Set#Equal| (|Set#Union| |s''#0@1| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |x#2@1|)))) |s'#0@0|) (and (=> (= (ControlFlow 0 4) (- 0 7)) (not (|Set#IsMember| |s''#0@1| ($Box intType (int_2_U |x#2@1|))))) (=> (not (|Set#IsMember| |s''#0@1| ($Box intType (int_2_U |x#2@1|)))) (=> (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (=> (and (and (and (|_module.__default.Sum#canCall| (|Set#Union| |s''#0@1| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |x#2@1|))))) (|_module.__default.Sum#canCall| |s''#0@1|)) (= (_module.__default.Sum ($LS ($LS $LZ)) (|Set#Union| |s''#0@1| (|Set#UnionOne| |Set#Empty| ($Box intType (int_2_U |x#2@1|))))) (+ (_module.__default.Sum ($LS ($LS $LZ)) |s''#0@1|) |x#2@1|))) (and (= $Heap@0 $Heap@1) (= |$rhs#0_0@1| (+ |sum#0@1| |x#2@1|)))) (and (=> (= (ControlFlow 0 4) (- 0 6)) (and (|Set#Subset| |s''#0@1| |s'#0@0|) (not (|Set#Subset| |s'#0@0| |s''#0@1|)))) (=> (and (|Set#Subset| |s''#0@1| |s'#0@0|) (not (|Set#Subset| |s'#0@0| |s''#0@1|))) (=> (=> (|Set#Subset| |s''#0@1| |s#0@@4|) (and (|_module.__default.Sum#canCall| |s''#0@1|) (|_module.__default.Sum#canCall| |s#0@@4|))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (=> |$w$loop#0@0| (|Set#Subset| |s''#0@1| |s#0@@4|))) (=> (=> |$w$loop#0@0| (|Set#Subset| |s''#0@1| |s#0@@4|)) (=> (= (ControlFlow 0 4) (- 0 3)) (=> |$w$loop#0@0| (= (+ |$rhs#0_0@1| (_module.__default.Sum ($LS ($LS $LZ)) |s''#0@1|)) (_module.__default.Sum ($LS ($LS $LZ)) |s#0@@4|))))))))))))))))))))
(let ((anon12_Else_correct  (=> (not (|Set#Equal| |s'#0@0| |Set#Empty|)) (and (=> (= (ControlFlow 0 11) 4) anon13_Then_correct) (=> (= (ControlFlow 0 11) 10) anon13_Else_correct)))))
(let ((anon11_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 15) 14) anon12_Then_correct) (=> (= (ControlFlow 0 15) 11) anon12_Else_correct)))))
(let ((anon11_Then_correct true))
(let ((anon10_LoopBody_correct  (and (=> (= (ControlFlow 0 16) 2) anon11_Then_correct) (=> (= (ControlFlow 0 16) 15) anon11_Else_correct))))
(let ((anon10_LoopDone_correct true))
(let ((anon10_LoopHead_correct  (=> (and ($Is SetType |s''#0@0| (TSet TInt)) ($IsAlloc SetType |s''#0@0| (TSet TInt) $Heap@0)) (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and ($Is SetType |s'#0@0| (TSet TInt)) ($IsAlloc SetType |s'#0@0| (TSet TInt) $Heap@0))) (=> (and (and (and (not false) (=> |$w$loop#0@0| (|Set#Subset| |s'#0@0| |s#0@@4|))) (and (=> |$w$loop#0@0| (and (|_module.__default.Sum#canCall| |s'#0@0|) (|_module.__default.Sum#canCall| |s#0@@4|))) (=> |$w$loop#0@0| (= (+ |sum#0@1| (_module.__default.Sum ($LS ($LS $LZ)) |s'#0@0|)) (_module.__default.Sum ($LS ($LS $LZ)) |s#0@@4|))))) (and (and (forall (($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 $o@@0) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 $o@@0)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0))
)) ($HeapSucc $Heap@@1 $Heap@0)) (and (forall (($o@@1 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 $o@@1) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@1) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@@1 $o@@1) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@1 $f@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@1) $f@@0))
)) (|Set#Subset| |s'#0@0| |s#0@@4|)))) (and (=> (= (ControlFlow 0 17) 1) anon10_LoopDone_correct) (=> (= (ControlFlow 0 17) 16) anon10_LoopBody_correct)))))))
(let ((anon0_correct  (=> (and (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@1 alloc false)) (= |sum#0@0| (LitInt 0))) (and (=> (= (ControlFlow 0 18) (- 0 20)) (=> |$w$loop#0@0| (|Set#Subset| |s#0@@4| |s#0@@4|))) (=> (=> |$w$loop#0@0| (|Set#Subset| |s#0@@4| |s#0@@4|)) (and (=> (= (ControlFlow 0 18) (- 0 19)) (=> |$w$loop#0@0| (= (+ |sum#0@0| (_module.__default.Sum ($LS ($LS $LZ)) |s#0@@4|)) (_module.__default.Sum ($LS ($LS $LZ)) |s#0@@4|)))) (=> (=> |$w$loop#0@0| (= (+ |sum#0@0| (_module.__default.Sum ($LS ($LS $LZ)) |s#0@@4|)) (_module.__default.Sum ($LS ($LS $LZ)) |s#0@@4|))) (=> (= (ControlFlow 0 18) 17) anon10_LoopHead_correct))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and (and ($IsGoodHeap $Heap@@1) ($IsHeapAnchor $Heap@@1)) (and ($Is SetType |s#0@@4| (TSet TInt)) ($IsAlloc SetType |s#0@@4| (TSet TInt) $Heap@@1))) (and (and ($Is SetType |s'#0| (TSet TInt)) ($IsAlloc SetType |s'#0| (TSet TInt) $Heap@@1)) true)) (and (and (and ($Is SetType |s''#0| (TSet TInt)) ($IsAlloc SetType |s''#0| (TSet TInt) $Heap@@1)) true) (and (= 3 $FunctionContextHeight) (= (ControlFlow 0 21) 18)))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
