(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 () Int)
(declare-fun $generated@@19 (T@U Int) Int)
(declare-fun $generated@@20 (Int) Bool)
(declare-fun $generated@@21 (Int) Int)
(declare-fun $generated@@24 (T@U T@U) Bool)
(declare-fun $generated@@25 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 (T@T T@T) T@T)
(declare-fun $generated@@30 (T@T T@U) T@U)
(declare-fun $generated@@31 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@32 (T@T) T@T)
(declare-fun $generated@@33 (T@T) T@T)
(declare-fun $generated@@55 (T@T T@U) T@U)
(declare-fun $generated@@58 (T@T T@U) T@U)
(declare-fun $generated@@61 (T@T T@U T@U) Bool)
(declare-fun $generated@@62 () T@U)
(declare-fun $generated@@64 (T@U) T@U)
(declare-fun $generated@@65 (Int Int) Int)
(declare-fun $generated@@75 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@76 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@77 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@111 (T@U) T@U)
(declare-fun $generated@@112 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@22 T@U) ($generated@@23 Int) ) (!  (=> (or ($generated@@20 $generated@@23) (and (< 0 $generated@@18) (<= ($generated@@21 0) $generated@@23))) (<= ($generated@@21 0) ($generated@@19 $generated@@22 $generated@@23)))
 :pattern ( ($generated@@19 $generated@@22 $generated@@23))
))))
(assert  (and (and (and (and (and (and (and (forall (($generated@@34 T@T) ($generated@@35 T@T) ($generated@@36 T@U) ($generated@@37 T@U) ($generated@@38 T@U) ) (! (= ($generated@@25 $generated@@34 $generated@@35 ($generated@@31 $generated@@34 $generated@@35 $generated@@37 $generated@@38 $generated@@36) $generated@@38) $generated@@36)
 :weight 0
)) (forall (($generated@@39 T@T) ($generated@@40 T@T) ($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@U) ) (!  (or (= $generated@@43 $generated@@44) (= ($generated@@25 $generated@@39 $generated@@40 ($generated@@31 $generated@@39 $generated@@40 $generated@@42 $generated@@43 $generated@@41) $generated@@44) ($generated@@25 $generated@@39 $generated@@40 $generated@@42 $generated@@44)))
 :weight 0
))) (= ($generated@@2 $generated@@26) 3)) (= ($generated@@2 $generated@@27) 4)) (= ($generated@@2 $generated@@28) 5)) (forall (($generated@@45 T@T) ($generated@@46 T@T) ) (= ($generated@@2 ($generated@@29 $generated@@45 $generated@@46)) 6))) (forall (($generated@@47 T@T) ($generated@@48 T@T) ) (! (= ($generated@@32 ($generated@@29 $generated@@47 $generated@@48)) $generated@@47)
 :pattern ( ($generated@@29 $generated@@47 $generated@@48))
))) (forall (($generated@@49 T@T) ($generated@@50 T@T) ) (! (= ($generated@@33 ($generated@@29 $generated@@49 $generated@@50)) $generated@@50)
 :pattern ( ($generated@@29 $generated@@49 $generated@@50))
))))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@U) ) (!  (=> ($generated@@24 $generated@@51 $generated@@52) (forall (($generated@@53 T@U) ) (!  (=> ($generated@@7 ($generated@@30 $generated@@3 ($generated@@25 $generated@@26 $generated@@27 ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@51 $generated@@53) $generated))) ($generated@@7 ($generated@@30 $generated@@3 ($generated@@25 $generated@@26 $generated@@27 ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@52 $generated@@53) $generated))))
 :pattern ( ($generated@@25 $generated@@26 $generated@@27 ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@52 $generated@@53) $generated))
)))
 :pattern ( ($generated@@24 $generated@@51 $generated@@52))
)))
(assert (forall (($generated@@54 Int) ) (! (= ($generated@@21 $generated@@54) $generated@@54)
 :pattern ( ($generated@@21 $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ($generated@@57 T@T) ) (! (= ($generated@@55 $generated@@57 $generated@@56) $generated@@56)
 :pattern ( ($generated@@55 $generated@@57 $generated@@56))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@58 $generated@@60 ($generated@@30 $generated@@60 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@30 $generated@@60 $generated@@59))
)))
(assert (forall (($generated@@63 T@U) ) (! (= ($generated@@61 $generated@@4 $generated@@63 $generated@@62) (<= ($generated@@21 0) ($generated@@9 $generated@@63)))
 :pattern ( ($generated@@61 $generated@@4 $generated@@63 $generated@@62))
)))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@66 T@U) ($generated@@67 Int) ) (!  (=> (or ($generated@@20 $generated@@67) (and (< 0 $generated@@18) (<= ($generated@@21 0) $generated@@67))) (and (=> (or (not (= $generated@@67 ($generated@@21 0))) (not true)) ($generated@@20 (- $generated@@67 1))) (= ($generated@@19 ($generated@@64 $generated@@66) $generated@@67) (ite (= $generated@@67 ($generated@@21 0)) 1 ($generated@@65 $generated@@67 ($generated@@19 $generated@@66 (- $generated@@67 1)))))))
 :pattern ( ($generated@@19 ($generated@@64 $generated@@66) $generated@@67))
))))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@U) ($generated@@70 T@U) ) (!  (=> (or (not (= $generated@@68 $generated@@70)) (not true)) (=> (and ($generated@@24 $generated@@68 $generated@@69) ($generated@@24 $generated@@69 $generated@@70)) ($generated@@24 $generated@@68 $generated@@70)))
 :pattern ( ($generated@@24 $generated@@68 $generated@@69) ($generated@@24 $generated@@69 $generated@@70))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@T) ) (! (= ($generated@@30 $generated@@72 ($generated@@58 $generated@@72 $generated@@71)) $generated@@71)
 :pattern ( ($generated@@58 $generated@@72 $generated@@71))
)))
(assert (forall (($generated@@73 T@U) ($generated@@74 Int) ) (! (= ($generated@@19 ($generated@@64 $generated@@73) $generated@@74) ($generated@@19 $generated@@73 $generated@@74))
 :pattern ( ($generated@@19 ($generated@@64 $generated@@73) $generated@@74))
)))
(assert  (and (forall (($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@T) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@75 $generated@@78 $generated@@79 $generated@@80 ($generated@@77 $generated@@78 $generated@@79 $generated@@80 $generated@@82 $generated@@83 $generated@@84 $generated@@81) $generated@@83 $generated@@84) $generated@@81)
 :weight 0
)) (and (forall (($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@T) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ) (!  (or (= $generated@@90 $generated@@92) (= ($generated@@75 $generated@@85 $generated@@86 $generated@@87 ($generated@@77 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@90 $generated@@91 $generated@@88) $generated@@92 $generated@@93) ($generated@@75 $generated@@85 $generated@@86 $generated@@87 $generated@@89 $generated@@92 $generated@@93)))
 :weight 0
)) (forall (($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ) (!  (or (= $generated@@100 $generated@@102) (= ($generated@@75 $generated@@94 $generated@@95 $generated@@96 ($generated@@77 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@99 $generated@@100 $generated@@97) $generated@@101 $generated@@102) ($generated@@75 $generated@@94 $generated@@95 $generated@@96 $generated@@98 $generated@@101 $generated@@102)))
 :weight 0
)))))
(assert (forall (($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 Bool) ($generated@@107 T@U) ($generated@@108 T@U) ) (! (= ($generated@@7 ($generated@@75 $generated@@28 $generated@@26 $generated@@3 ($generated@@76 $generated@@103 $generated@@104 $generated@@105 $generated@@106) $generated@@107 $generated@@108))  (=> (and (or (not (= $generated@@107 $generated@@103)) (not true)) ($generated@@7 ($generated@@30 $generated@@3 ($generated@@25 $generated@@26 $generated@@27 ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@104 $generated@@107) $generated@@105)))) $generated@@106))
 :pattern ( ($generated@@75 $generated@@28 $generated@@26 $generated@@3 ($generated@@76 $generated@@103 $generated@@104 $generated@@105 $generated@@106) $generated@@107 $generated@@108))
)))
(assert (forall (($generated@@109 Int) ($generated@@110 Int) ) (! (= ($generated@@65 $generated@@109 $generated@@110) (* $generated@@109 $generated@@110))
 :pattern ( ($generated@@65 $generated@@109 $generated@@110))
)))
(assert (= ($generated@@111 $generated@@62) $generated@@0))
(assert (= ($generated@@112 $generated@@62) $generated@@1))
(assert (forall (($generated@@113 Int) ) (! (= ($generated@@58 $generated@@4 ($generated@@8 ($generated@@21 $generated@@113))) ($generated@@55 $generated@@27 ($generated@@58 $generated@@4 ($generated@@8 $generated@@113))))
 :pattern ( ($generated@@58 $generated@@4 ($generated@@8 ($generated@@21 $generated@@113))))
)))
(assert (forall (($generated@@114 T@U) ($generated@@115 T@T) ) (! (= ($generated@@58 $generated@@115 ($generated@@55 $generated@@115 $generated@@114)) ($generated@@55 $generated@@27 ($generated@@58 $generated@@115 $generated@@114)))
 :pattern ( ($generated@@58 $generated@@115 ($generated@@55 $generated@@115 $generated@@114)))
)))
(assert  (=> (<= 0 $generated@@18) (forall (($generated@@116 T@U) ($generated@@117 Int) ) (!  (=> (or ($generated@@20 ($generated@@21 $generated@@117)) (and (< 0 $generated@@18) (<= ($generated@@21 0) $generated@@117))) (and (=> (or (not (= ($generated@@21 $generated@@117) ($generated@@21 0))) (not true)) ($generated@@20 ($generated@@21 (- $generated@@117 1)))) (= ($generated@@19 ($generated@@64 $generated@@116) ($generated@@21 $generated@@117)) (ite (= ($generated@@21 $generated@@117) ($generated@@21 0)) 1 ($generated@@65 ($generated@@21 $generated@@117) ($generated@@21 ($generated@@19 ($generated@@64 $generated@@116) ($generated@@21 (- $generated@@117 1)))))))))
 :weight 3
 :pattern ( ($generated@@19 ($generated@@64 $generated@@116) ($generated@@21 $generated@@117)))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@118 () Int)
(declare-fun $generated@@119 () T@U)
(declare-fun $generated@@120 () Int)
(declare-fun $generated@@121 () Int)
(declare-fun $generated@@122 () Int)
(declare-fun $generated@@123 () Int)
(declare-fun $generated@@124 () Int)
(declare-fun $generated@@125 (T@U) Bool)
(declare-fun $generated@@126 () T@U)
(declare-fun $generated@@127 (T@U) Bool)
(declare-fun $generated@@128 () Int)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 () Int)
(declare-fun $generated@@133 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 12) (let (($generated@@134  (=> (= (ControlFlow 0 2) (- 0 1)) (= $generated@@118 ($generated@@65 ($generated@@19 ($generated@@64 ($generated@@64 $generated@@119)) $generated@@120) $generated@@121)))))
(let (($generated@@135  (=> (or (not (= $generated@@120 ($generated@@21 0))) (not true)) (and (=> (= (ControlFlow 0 4) (- 0 9)) ($generated@@61 $generated@@4 ($generated@@8 (- $generated@@120 1)) $generated@@62)) (=> ($generated@@61 $generated@@4 ($generated@@8 (- $generated@@120 1)) $generated@@62) (=> (= $generated@@122 (- $generated@@120 1)) (and (=> (= (ControlFlow 0 4) (- 0 8)) ($generated@@61 $generated@@4 ($generated@@8 ($generated@@65 $generated@@121 $generated@@120)) $generated@@62)) (=> ($generated@@61 $generated@@4 ($generated@@8 ($generated@@65 $generated@@121 $generated@@120)) $generated@@62) (=> (= $generated@@123 ($generated@@65 $generated@@121 $generated@@120)) (and (=> (= (ControlFlow 0 4) (- 0 7)) (or (<= 0 $generated@@120) (= $generated@@122 $generated@@120))) (=> (or (<= 0 $generated@@120) (= $generated@@122 $generated@@120)) (and (=> (= (ControlFlow 0 4) (- 0 6)) (or (or (<= 0 $generated@@121) (< $generated@@122 $generated@@120)) (= $generated@@123 $generated@@121))) (=> (or (or (<= 0 $generated@@121) (< $generated@@122 $generated@@120)) (= $generated@@123 $generated@@121)) (and (=> (= (ControlFlow 0 4) (- 0 5)) (or (< $generated@@122 $generated@@120) (and (= $generated@@122 $generated@@120) (< $generated@@123 $generated@@121)))) (=> (or (< $generated@@122 $generated@@120) (and (= $generated@@122 $generated@@120) (< $generated@@123 $generated@@121))) (=> (<= ($generated@@21 0) $generated@@124) (=> (and (and (and (and ($generated@@125 $generated@@126) ($generated@@127 $generated@@126)) (<= ($generated@@21 0) $generated@@128)) (and ($generated@@20 $generated@@122) (= $generated@@128 ($generated@@65 ($generated@@19 ($generated@@64 ($generated@@64 $generated@@119)) $generated@@122) $generated@@123)))) (and (and (forall (($generated@@136 T@U) ) (!  (=> (and (or (not (= $generated@@136 $generated@@129)) (not true)) ($generated@@7 ($generated@@30 $generated@@3 ($generated@@25 $generated@@26 $generated@@27 ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@130 $generated@@136) $generated)))) (= ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@126 $generated@@136) ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@130 $generated@@136)))
 :pattern ( ($generated@@25 $generated@@28 ($generated@@29 $generated@@26 $generated@@27) $generated@@126 $generated@@136))
)) ($generated@@24 $generated@@130 $generated@@126)) (and (= $generated@@118 $generated@@128) (= (ControlFlow 0 4) 2)))) $generated@@134)))))))))))))))))
(let (($generated@@137  (=> (= $generated@@120 ($generated@@21 0)) (=> (and (= $generated@@118 $generated@@121) (= (ControlFlow 0 3) 2)) $generated@@134))))
(let (($generated@@138  (=> (and (= $generated@@131 ($generated@@76 $generated@@129 $generated@@130 $generated false)) (= $generated@@132 ($generated@@21 0))) (and (=> (= (ControlFlow 0 10) (- 0 11)) (<= ($generated@@21 0) $generated@@132)) (=> (<= ($generated@@21 0) $generated@@132) (and (=> (= (ControlFlow 0 10) 3) $generated@@137) (=> (= (ControlFlow 0 10) 4) $generated@@135)))))))
(let (($generated@@139  (=> (and (and (and ($generated@@125 $generated@@130) ($generated@@127 $generated@@130)) (<= ($generated@@21 0) $generated@@120)) (and (and (<= ($generated@@21 0) $generated@@121) (<= ($generated@@21 0) $generated@@133)) (and (= 1 $generated@@18) (= (ControlFlow 0 12) 10)))) $generated@@138)))
$generated@@139))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
