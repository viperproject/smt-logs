(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun |tytagFamily$_#Func2| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2| () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun HandleTypeType () T@T)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun $OneHeap () T@U)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun null () T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TagBool TagSet TagSeq alloc Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 |tytagFamily$_#Func2| |tytagFamily$_#PartialFunc2| |tytagFamily$_#TotalFunc2|)
)
(assert (= (Tag TBool) TagBool))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (= (Ctor HandleTypeType) 3))
(assert (forall ((|#$T0| T@U) (|#$T1| T@U) (|#$R| T@U) (|f#0| T@U) ) (! (= ($Is HandleTypeType |f#0| (Tclass._System.___hTotalFunc2 |#$T0| |#$T1| |#$R|))  (and ($Is HandleTypeType |f#0| (Tclass._System.___hPartialFunc2 |#$T0| |#$T1| |#$R|)) (forall ((|x0#0| T@U) (|x1#0| T@U) )  (=> (and ($IsBox |x0#0| |#$T0|) ($IsBox |x1#0| |#$T1|)) (Requires2 |#$T0| |#$T1| |#$R| $OneHeap |f#0| |x0#0| |x1#0|)))))
 :pattern ( ($Is HandleTypeType |f#0| (Tclass._System.___hTotalFunc2 |#$T0| |#$T1| |#$R|)))
)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@1 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$T1@@0| T@U) (|#$R@@0| T@U) ) (! (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@0|)) |#$T0@@0|)
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@0|))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$T1@@1| T@U) (|#$R@@1| T@U) ) (! (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@1|)) |#$T1@@1|)
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@1|))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$T1@@2| T@U) (|#$R@@2| T@U) ) (! (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@2|)) |#$R@@2|)
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@2|))
)))
(assert (forall ((|#$T0@@3| T@U) (|#$T1@@3| T@U) (|#$R@@3| T@U) ) (! (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@3| |#$T1@@3| |#$R@@3|)) |#$T0@@3|)
 :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@3| |#$T1@@3| |#$R@@3|))
)))
(assert (forall ((|#$T0@@4| T@U) (|#$T1@@4| T@U) (|#$R@@4| T@U) ) (! (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@4|)) |#$T1@@4|)
 :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@4|))
)))
(assert (forall ((|#$T0@@5| T@U) (|#$T1@@5| T@U) (|#$R@@5| T@U) ) (! (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@5|)) |#$R@@5|)
 :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@5|))
)))
(assert (forall ((|#$T0@@6| T@U) (|#$T1@@6| T@U) (|#$R@@6| T@U) ) (! (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@6| |#$T1@@6| |#$R@@6|)) |#$T0@@6|)
 :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@6| |#$T1@@6| |#$R@@6|))
)))
(assert (forall ((|#$T0@@7| T@U) (|#$T1@@7| T@U) (|#$R@@7| T@U) ) (! (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@7| |#$T1@@7| |#$R@@7|)) |#$T1@@7|)
 :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@7| |#$T1@@7| |#$R@@7|))
)))
(assert (forall ((|#$T0@@8| T@U) (|#$T1@@8| T@U) (|#$R@@8| T@U) ) (! (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@8| |#$T1@@8| |#$R@@8|)) |#$R@@8|)
 :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@8| |#$T1@@8| |#$R@@8|))
)))
(assert (forall ((a@@2 T@U) (b T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| b y@@0) (not (|Set#IsMember| (|Set#Difference| a@@2 b) y@@0)))
 :pattern ( (|Set#Difference| a@@2 b) (|Set#IsMember| b y@@0))
)))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (forall ((s T@U) (i Int) (v T@U) (n Int) ) (!  (=> (and (<= 0 n) (< n (|Seq#Length| s))) (and (=> (= i n) (= (|Seq#Index| (|Seq#Update| s i v) n) v)) (=> (or (not (= i n)) (not true)) (= (|Seq#Index| (|Seq#Update| s i v) n) (|Seq#Index| s n)))))
 :pattern ( (|Seq#Index| (|Seq#Update| s i v) n))
)))
(assert (forall ((|#$T0@@9| T@U) (|#$T1@@9| T@U) (|#$R@@9| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@9|)) Tagclass._System.___hFunc2) (= (TagFamily (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@9|)) |tytagFamily$_#Func2|))
 :pattern ( (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@9|))
)))
(assert (forall ((|#$T0@@10| T@U) (|#$T1@@10| T@U) (|#$R@@10| T@U) ) (!  (and (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@10|)) Tagclass._System.___hPartialFunc2) (= (TagFamily (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@10|)) |tytagFamily$_#PartialFunc2|))
 :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@10|))
)))
(assert (forall ((|#$T0@@11| T@U) (|#$T1@@11| T@U) (|#$R@@11| T@U) ) (!  (and (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@11|)) Tagclass._System.___hTotalFunc2) (= (TagFamily (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@11|)) |tytagFamily$_#TotalFunc2|))
 :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@11|))
)))
(assert (forall ((a@@3 T@U) (b@@0 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@3 b@@0) o@@1)  (and (|Set#IsMember| a@@3 o@@1) (not (|Set#IsMember| b@@0 o@@1))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@3 b@@0) o@@1))
)))
(assert (forall ((|#$T0@@12| T@U) (|#$T1@@12| T@U) (|#$R@@12| T@U) (bx T@U) ) (!  (=> ($IsBox bx (Tclass._System.___hFunc2 |#$T0@@12| |#$T1@@12| |#$R@@12|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx)) bx) ($Is HandleTypeType ($Unbox HandleTypeType bx) (Tclass._System.___hFunc2 |#$T0@@12| |#$T1@@12| |#$R@@12|))))
 :pattern ( ($IsBox bx (Tclass._System.___hFunc2 |#$T0@@12| |#$T1@@12| |#$R@@12|)))
)))
(assert (forall ((|#$T0@@13| T@U) (|#$T1@@13| T@U) (|#$R@@13| T@U) (bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 (Tclass._System.___hPartialFunc2 |#$T0@@13| |#$T1@@13| |#$R@@13|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@0)) bx@@0) ($Is HandleTypeType ($Unbox HandleTypeType bx@@0) (Tclass._System.___hPartialFunc2 |#$T0@@13| |#$T1@@13| |#$R@@13|))))
 :pattern ( ($IsBox bx@@0 (Tclass._System.___hPartialFunc2 |#$T0@@13| |#$T1@@13| |#$R@@13|)))
)))
(assert (forall ((|#$T0@@14| T@U) (|#$T1@@14| T@U) (|#$R@@14| T@U) (bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@14|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@1)) bx@@1) ($Is HandleTypeType ($Unbox HandleTypeType bx@@1) (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@14|))))
 :pattern ( ($IsBox bx@@1 (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@14|)))
)))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (= (Ctor refType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o@@2 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o@@2) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@2) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@2) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@5 Int) ) (! (= (LitInt x@@5) x@@5)
 :pattern ( (LitInt x@@5))
)))
(assert (forall ((x@@6 T@U) (T T@T) ) (! (= (Lit T x@@6) x@@6)
 :pattern ( (Lit T x@@6))
)))
(assert (= (Ctor SeqType) 8))
(assert (forall ((s@@0 T@U) (bx@@2 T@U) (t T@U) ) (!  (=> (and ($Is SeqType s@@0 (TSeq t)) ($IsBox bx@@2 t)) ($Is SeqType (|Seq#Build| s@@0 bx@@2) (TSeq t)))
 :pattern ( ($Is SeqType (|Seq#Build| s@@0 bx@@2) (TSeq t)))
)))
(assert (forall ((|#$T0@@15| T@U) (|#$T1@@15| T@U) (|#$R@@15| T@U) (|f#0@@0| T@U) ) (! (= ($Is HandleTypeType |f#0@@0| (Tclass._System.___hPartialFunc2 |#$T0@@15| |#$T1@@15| |#$R@@15|))  (and ($Is HandleTypeType |f#0@@0| (Tclass._System.___hFunc2 |#$T0@@15| |#$T1@@15| |#$R@@15|)) (forall ((|x0#0@@0| T@U) (|x1#0@@0| T@U) )  (=> (and ($IsBox |x0#0@@0| |#$T0@@15|) ($IsBox |x1#0@@0| |#$T1@@15|)) (|Set#Equal| (Reads2 |#$T0@@15| |#$T1@@15| |#$R@@15| $OneHeap |f#0@@0| |x0#0@@0| |x1#0@@0|) |Set#Empty|)))))
 :pattern ( ($Is HandleTypeType |f#0@@0| (Tclass._System.___hPartialFunc2 |#$T0@@15| |#$T1@@15| |#$R@@15|)))
)))
(assert (forall ((a@@4 T@U) (b@@1 T@U) ) (! (= (|Set#Subset| a@@4 b@@1) (forall ((o@@3 T@U) ) (!  (=> (|Set#IsMember| a@@4 o@@3) (|Set#IsMember| b@@1 o@@3))
 :pattern ( (|Set#IsMember| a@@4 o@@3))
 :pattern ( (|Set#IsMember| b@@1 o@@3))
)))
 :pattern ( (|Set#Subset| a@@4 b@@1))
)))
(assert (forall ((x@@7 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@7)) x@@7)
 :pattern ( ($Unbox T@@0 x@@7))
)))
(assert (= (Ctor SetType) 9))
(assert (forall ((v@@0 T@U) (t0@@0 T@U) ) (! (= ($Is SetType v@@0 (TSet t0@@0)) (forall ((bx@@3 T@U) ) (!  (=> (|Set#IsMember| v@@0 bx@@3) ($IsBox bx@@3 t0@@0))
 :pattern ( (|Set#IsMember| v@@0 bx@@3))
)))
 :pattern ( ($Is SetType v@@0 (TSet t0@@0)))
)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((s@@1 T@U) (v@@1 T@U) ) (! (= (|Seq#Length| (|Seq#Build| s@@1 v@@1)) (+ 1 (|Seq#Length| s@@1)))
 :pattern ( (|Seq#Build| s@@1 v@@1))
)))
(assert (forall ((v@@2 T@U) (t@@0 T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@2) t@@0 h@@0) ($IsAlloc T@@1 v@@2 t@@0 h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@2) t@@0 h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@4 T@U) (t@@1 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@4 t@@1 h@@1) ($IsAllocBox bx@@4 t@@1 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@4 t@@1 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@3 T@U) (t@@2 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@3 t@@2 h@@2) ($IsAlloc T@@2 v@@3 t@@2 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@3 t@@2 h@@2))
)))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1)))
 :pattern ( (|Seq#Length| (|Seq#Append| s0 s1)))
)))
(assert (forall ((s@@2 T@U) (i@@0 Int) (v@@4 T@U) ) (!  (and (=> (= i@@0 (|Seq#Length| s@@2)) (= (|Seq#Index| (|Seq#Build| s@@2 v@@4) i@@0) v@@4)) (=> (or (not (= i@@0 (|Seq#Length| s@@2))) (not true)) (= (|Seq#Index| (|Seq#Build| s@@2 v@@4) i@@0) (|Seq#Index| s@@2 i@@0))))
 :pattern ( (|Seq#Index| (|Seq#Build| s@@2 v@@4) i@@0))
)))
(assert (forall ((f T@U) (t0@@1 T@U) (t1@@0 T@U) (t2 T@U) (h@@3 T@U) ) (!  (=> ($IsGoodHeap h@@3) (= ($IsAlloc HandleTypeType f (Tclass._System.___hFunc2 t0@@1 t1@@0 t2) h@@3) (forall ((bx0 T@U) (bx1 T@U) ) (!  (=> (and (and (and ($IsBox bx0 t0@@1) ($IsAllocBox bx0 t0@@1 h@@3)) (and ($IsBox bx1 t1@@0) ($IsAllocBox bx1 t1@@0 h@@3))) (Requires2 t0@@1 t1@@0 t2 h@@3 f bx0 bx1)) (forall ((r T@U) ) (!  (=> (and (or (not (= r null)) (not true)) (|Set#IsMember| (Reads2 t0@@1 t1@@0 t2 h@@3 f bx0 bx1) ($Box refType r))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) alloc))))
 :pattern ( (|Set#IsMember| (Reads2 t0@@1 t1@@0 t2 h@@3 f bx0 bx1) ($Box refType r)))
)))
 :pattern ( (Apply2 t0@@1 t1@@0 t2 h@@3 f bx0 bx1))
 :pattern ( (Reads2 t0@@1 t1@@0 t2 h@@3 f bx0 bx1))
))))
 :pattern ( ($IsAlloc HandleTypeType f (Tclass._System.___hFunc2 t0@@1 t1@@0 t2) h@@3))
)))
(assert (forall ((f@@0 T@U) (t0@@2 T@U) (t1@@1 T@U) (t2@@0 T@U) ) (! (= ($Is HandleTypeType f@@0 (Tclass._System.___hFunc2 t0@@2 t1@@1 t2@@0)) (forall ((h@@4 T@U) (bx0@@0 T@U) (bx1@@0 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@4) (and ($IsBox bx0@@0 t0@@2) ($IsBox bx1@@0 t1@@1))) (Requires2 t0@@2 t1@@1 t2@@0 h@@4 f@@0 bx0@@0 bx1@@0)) ($IsBox (Apply2 t0@@2 t1@@1 t2@@0 h@@4 f@@0 bx0@@0 bx1@@0) t2@@0))
 :pattern ( (Apply2 t0@@2 t1@@1 t2@@0 h@@4 f@@0 bx0@@0 bx1@@0))
)))
 :pattern ( ($Is HandleTypeType f@@0 (Tclass._System.___hFunc2 t0@@2 t1@@1 t2@@0)))
)))
(assert (forall ((a@@5 T@U) (b@@2 T@U) ) (!  (=> (|Set#Equal| a@@5 b@@2) (= a@@5 b@@2))
 :pattern ( (|Set#Equal| a@@5 b@@2))
)))
(assert (forall ((t0@@3 T@U) (t1@@2 T@U) (t2@@1 T@U) (heap T@U) (f@@1 T@U) (bx0@@1 T@U) (bx1@@1 T@U) ) (!  (=> (and ($IsGoodHeap heap) (and (and ($IsBox bx0@@1 t0@@3) ($IsBox bx1@@1 t1@@2)) ($Is HandleTypeType f@@1 (Tclass._System.___hFunc2 t0@@3 t1@@2 t2@@1)))) (= (|Set#Equal| (Reads2 t0@@3 t1@@2 t2@@1 $OneHeap f@@1 bx0@@1 bx1@@1) |Set#Empty|) (|Set#Equal| (Reads2 t0@@3 t1@@2 t2@@1 heap f@@1 bx0@@1 bx1@@1) |Set#Empty|)))
 :pattern ( (Reads2 t0@@3 t1@@2 t2@@1 $OneHeap f@@1 bx0@@1 bx1@@1) ($IsGoodHeap heap))
 :pattern ( (Reads2 t0@@3 t1@@2 t2@@1 heap f@@1 bx0@@1 bx1@@1))
)))
(assert (forall ((a@@6 T@U) (b@@3 T@U) (c T@U) ) (!  (=> (or (not (= a@@6 c)) (not true)) (=> (and ($HeapSucc a@@6 b@@3) ($HeapSucc b@@3 c)) ($HeapSucc a@@6 c)))
 :pattern ( ($HeapSucc a@@6 b@@3) ($HeapSucc b@@3 c))
)))
(assert (forall ((f@@2 T@U) (t0@@4 T@U) (t1@@3 T@U) (t2@@2 T@U) (h@@5 T@U) ) (!  (=> (and ($IsGoodHeap h@@5) ($IsAlloc HandleTypeType f@@2 (Tclass._System.___hFunc2 t0@@4 t1@@3 t2@@2) h@@5)) (forall ((bx0@@2 T@U) (bx1@@2 T@U) ) (!  (=> (and (and ($IsAllocBox bx0@@2 t0@@4 h@@5) ($IsAllocBox bx1@@2 t1@@3 h@@5)) (Requires2 t0@@4 t1@@3 t2@@2 h@@5 f@@2 bx0@@2 bx1@@2)) ($IsAllocBox (Apply2 t0@@4 t1@@3 t2@@2 h@@5 f@@2 bx0@@2 bx1@@2) t2@@2 h@@5))
 :pattern ( (Apply2 t0@@4 t1@@3 t2@@2 h@@5 f@@2 bx0@@2 bx1@@2))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@2 (Tclass._System.___hFunc2 t0@@4 t1@@3 t2@@2) h@@5))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 TBool) (and (= ($Box boolType ($Unbox boolType bx@@5)) bx@@5) ($Is boolType ($Unbox boolType bx@@5) TBool)))
 :pattern ( ($IsBox bx@@5 TBool))
)))
(assert (forall ((v@@5 T@U) (t@@3 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@5) t@@3) ($Is T@@3 v@@5 t@@3))
 :pattern ( ($IsBox ($Box T@@3 v@@5) t@@3))
)))
(assert (forall ((s@@3 T@U) ) (! (<= 0 (|Seq#Length| s@@3))
 :pattern ( (|Seq#Length| s@@3))
)))
(assert (forall ((v@@6 T@U) (t0@@5 T@U) (h@@6 T@U) ) (! (= ($IsAlloc SetType v@@6 (TSet t0@@5) h@@6) (forall ((bx@@6 T@U) ) (!  (=> (|Set#IsMember| v@@6 bx@@6) ($IsAllocBox bx@@6 t0@@5 h@@6))
 :pattern ( (|Set#IsMember| v@@6 bx@@6))
)))
 :pattern ( ($IsAlloc SetType v@@6 (TSet t0@@5) h@@6))
)))
(assert (forall ((v@@7 T@U) (t0@@6 T@U) (h@@7 T@U) ) (! (= ($IsAlloc SeqType v@@7 (TSeq t0@@6) h@@7) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@7))) ($IsAllocBox (|Seq#Index| v@@7 i@@1) t0@@6 h@@7))
 :pattern ( (|Seq#Index| v@@7 i@@1))
)))
 :pattern ( ($IsAlloc SeqType v@@7 (TSeq t0@@6) h@@7))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Inv0_TSet (TSet t@@4)) t@@4)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((t@@5 T@U) ) (! (= (Tag (TSet t@@5)) TagSet)
 :pattern ( (TSet t@@5))
)))
(assert (forall ((t@@6 T@U) ) (! (= (Inv0_TSeq (TSeq t@@6)) t@@6)
 :pattern ( (TSeq t@@6))
)))
(assert (forall ((t@@7 T@U) ) (! (= (Tag (TSeq t@@7)) TagSeq)
 :pattern ( (TSeq t@@7))
)))
(assert (forall ((x@@8 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@8)) x@@8)
 :pattern ( ($Box T@@4 x@@8))
)))
(assert (forall ((t0@@7 T@U) (t1@@4 T@U) (t2@@3 T@U) (heap@@0 T@U) (f@@3 T@U) (bx0@@3 T@U) (bx1@@3 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@0) (and (and ($IsBox bx0@@3 t0@@7) ($IsBox bx1@@3 t1@@4)) ($Is HandleTypeType f@@3 (Tclass._System.___hFunc2 t0@@7 t1@@4 t2@@3)))) (|Set#Equal| (Reads2 t0@@7 t1@@4 t2@@3 $OneHeap f@@3 bx0@@3 bx1@@3) |Set#Empty|)) (= (Requires2 t0@@7 t1@@4 t2@@3 $OneHeap f@@3 bx0@@3 bx1@@3) (Requires2 t0@@7 t1@@4 t2@@3 heap@@0 f@@3 bx0@@3 bx1@@3)))
 :pattern ( (Requires2 t0@@7 t1@@4 t2@@3 $OneHeap f@@3 bx0@@3 bx1@@3) ($IsGoodHeap heap@@0))
 :pattern ( (Requires2 t0@@7 t1@@4 t2@@3 heap@@0 f@@3 bx0@@3 bx1@@3))
)))
(assert (forall ((f@@4 T@U) (t0@@8 T@U) (t1@@5 T@U) (t2@@4 T@U) (u0@@0 T@U) (u1@@0 T@U) (u2 T@U) ) (!  (=> (and (and (and ($Is HandleTypeType f@@4 (Tclass._System.___hFunc2 t0@@8 t1@@5 t2@@4)) (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 u0@@0) ($IsBox bx@@7 t0@@8))
 :pattern ( ($IsBox bx@@7 u0@@0))
 :pattern ( ($IsBox bx@@7 t0@@8))
))) (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 u1@@0) ($IsBox bx@@8 t1@@5))
 :pattern ( ($IsBox bx@@8 u1@@0))
 :pattern ( ($IsBox bx@@8 t1@@5))
))) (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 t2@@4) ($IsBox bx@@9 u2))
 :pattern ( ($IsBox bx@@9 t2@@4))
 :pattern ( ($IsBox bx@@9 u2))
))) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc2 u0@@0 u1@@0 u2)))
 :pattern ( ($Is HandleTypeType f@@4 (Tclass._System.___hFunc2 t0@@8 t1@@5 t2@@4)) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc2 u0@@0 u1@@0 u2)))
)))
(assert  (and (forall ((t0@@9 T@T) (t1@@6 T@T) (t2@@5 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@9 t1@@6 t2@@5 (MapType1Store t0@@9 t1@@6 t2@@5 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@1 u1@@1 u2@@0 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@2 T@T) (u1@@2 T@T) (u2@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@2 u1@@2 u2@@1 (MapType1Store u0@@2 u1@@2 u2@@1 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@2 u1@@2 u2@@1 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@16| T@U) (|#$R@@16| T@U) (|f#0@@1| T@U) ($h T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@1| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@16|) $h) ($IsAlloc HandleTypeType |f#0@@1| (Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@16| |#$R@@16|) $h))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@1| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@16|) $h))
)))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@17| T@U) (|#$R@@17| T@U) (|f#0@@2| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@2| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@17|) $h@@0) ($IsAlloc HandleTypeType |f#0@@2| (Tclass._System.___hPartialFunc2 |#$T0@@17| |#$T1@@17| |#$R@@17|) $h@@0))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@2| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@17|) $h@@0))
)))
(assert (forall ((s@@4 T@U) (i@@2 Int) (v@@8 T@U) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| s@@4))) (= (|Seq#Length| (|Seq#Update| s@@4 i@@2 v@@8)) (|Seq#Length| s@@4)))
 :pattern ( (|Seq#Length| (|Seq#Update| s@@4 i@@2 v@@8)))
)))
(assert (forall ((s@@5 T@U) (val@@4 T@U) ) (!  (and (= (|Seq#Build_inv0| (|Seq#Build| s@@5 val@@4)) s@@5) (= (|Seq#Build_inv1| (|Seq#Build| s@@5 val@@4)) val@@4))
 :pattern ( (|Seq#Build| s@@5 val@@4))
)))
(assert (forall ((t0@@10 T@U) (t1@@7 T@U) (t2@@6 T@U) (h0 T@U) (h1 T@U) (f@@5 T@U) (bx0@@4 T@U) (bx1@@4 T@U) ) (!  (=> (and (and (and ($HeapSucc h0 h1) (and ($IsGoodHeap h0) ($IsGoodHeap h1))) (and (and ($IsBox bx0@@4 t0@@10) ($IsBox bx1@@4 t1@@7)) ($Is HandleTypeType f@@5 (Tclass._System.___hFunc2 t0@@10 t1@@7 t2@@6)))) (forall ((o@@4 T@U) (fld T@U) )  (=> (and (or (not (= o@@4 null)) (not true)) (|Set#IsMember| (Reads2 t0@@10 t1@@7 t2@@6 h0 f@@5 bx0@@4 bx1@@4) ($Box refType o@@4))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0 o@@4) fld) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1 o@@4) fld))))) (= (Requires2 t0@@10 t1@@7 t2@@6 h0 f@@5 bx0@@4 bx1@@4) (Requires2 t0@@10 t1@@7 t2@@6 h1 f@@5 bx0@@4 bx1@@4)))
 :pattern ( ($HeapSucc h0 h1) (Requires2 t0@@10 t1@@7 t2@@6 h1 f@@5 bx0@@4 bx1@@4))
)))
(assert (forall ((t0@@11 T@U) (t1@@8 T@U) (t2@@7 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@6 T@U) (bx0@@5 T@U) (bx1@@5 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) (and (and ($IsBox bx0@@5 t0@@11) ($IsBox bx1@@5 t1@@8)) ($Is HandleTypeType f@@6 (Tclass._System.___hFunc2 t0@@11 t1@@8 t2@@7)))) (forall ((o@@5 T@U) (fld@@0 T@U) )  (=> (and (or (not (= o@@5 null)) (not true)) (|Set#IsMember| (Reads2 t0@@11 t1@@8 t2@@7 h1@@0 f@@6 bx0@@5 bx1@@5) ($Box refType o@@5))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@0 o@@5) fld@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@0 o@@5) fld@@0))))) (= (Requires2 t0@@11 t1@@8 t2@@7 h0@@0 f@@6 bx0@@5 bx1@@5) (Requires2 t0@@11 t1@@8 t2@@7 h1@@0 f@@6 bx0@@5 bx1@@5)))
 :pattern ( ($HeapSucc h0@@0 h1@@0) (Requires2 t0@@11 t1@@8 t2@@7 h1@@0 f@@6 bx0@@5 bx1@@5))
)))
(assert (forall ((bx@@10 T@U) (t@@8 T@U) ) (!  (=> ($IsBox bx@@10 (TSet t@@8)) (and (= ($Box SetType ($Unbox SetType bx@@10)) bx@@10) ($Is SetType ($Unbox SetType bx@@10) (TSet t@@8))))
 :pattern ( ($IsBox bx@@10 (TSet t@@8)))
)))
(assert (forall ((bx@@11 T@U) (t@@9 T@U) ) (!  (=> ($IsBox bx@@11 (TSeq t@@9)) (and (= ($Box SeqType ($Unbox SeqType bx@@11)) bx@@11) ($Is SeqType ($Unbox SeqType bx@@11) (TSeq t@@9))))
 :pattern ( ($IsBox bx@@11 (TSeq t@@9)))
)))
(assert (forall ((a@@7 T@U) (b@@4 T@U) ) (! (= (|Set#Equal| a@@7 b@@4) (forall ((o@@6 T@U) ) (! (= (|Set#IsMember| a@@7 o@@6) (|Set#IsMember| b@@4 o@@6))
 :pattern ( (|Set#IsMember| a@@7 o@@6))
 :pattern ( (|Set#IsMember| b@@4 o@@6))
)))
 :pattern ( (|Set#Equal| a@@7 b@@4))
)))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (n@@0 Int) ) (!  (and (=> (< n@@0 (|Seq#Length| s0@@0)) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@0) (|Seq#Index| s0@@0 n@@0))) (=> (<= (|Seq#Length| s0@@0) n@@0) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@0) (|Seq#Index| s1@@0 (- n@@0 (|Seq#Length| s0@@0))))))
 :pattern ( (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@0))
)))
(assert (forall ((t0@@12 T@U) (t1@@9 T@U) (t2@@8 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@7 T@U) (bx0@@6 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) (and (and ($IsBox bx0@@6 t0@@12) ($IsBox bx1@@6 t1@@9)) ($Is HandleTypeType f@@7 (Tclass._System.___hFunc2 t0@@12 t1@@9 t2@@8)))) (forall ((o@@7 T@U) (fld@@1 T@U) )  (=> (and (or (not (= o@@7 null)) (not true)) (|Set#IsMember| (Reads2 t0@@12 t1@@9 t2@@8 h0@@1 f@@7 bx0@@6 bx1@@6) ($Box refType o@@7))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@1 o@@7) fld@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@1 o@@7) fld@@1))))) (= (Reads2 t0@@12 t1@@9 t2@@8 h0@@1 f@@7 bx0@@6 bx1@@6) (Reads2 t0@@12 t1@@9 t2@@8 h1@@1 f@@7 bx0@@6 bx1@@6)))
 :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads2 t0@@12 t1@@9 t2@@8 h1@@1 f@@7 bx0@@6 bx1@@6))
)))
(assert (forall ((t0@@13 T@U) (t1@@10 T@U) (t2@@9 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@8 T@U) (bx0@@7 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) (and (and ($IsBox bx0@@7 t0@@13) ($IsBox bx1@@7 t1@@10)) ($Is HandleTypeType f@@8 (Tclass._System.___hFunc2 t0@@13 t1@@10 t2@@9)))) (forall ((o@@8 T@U) (fld@@2 T@U) )  (=> (and (or (not (= o@@8 null)) (not true)) (|Set#IsMember| (Reads2 t0@@13 t1@@10 t2@@9 h1@@2 f@@8 bx0@@7 bx1@@7) ($Box refType o@@8))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@2 o@@8) fld@@2) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@2 o@@8) fld@@2))))) (= (Reads2 t0@@13 t1@@10 t2@@9 h0@@2 f@@8 bx0@@7 bx1@@7) (Reads2 t0@@13 t1@@10 t2@@9 h1@@2 f@@8 bx0@@7 bx1@@7)))
 :pattern ( ($HeapSucc h0@@2 h1@@2) (Reads2 t0@@13 t1@@10 t2@@9 h1@@2 f@@8 bx0@@7 bx1@@7))
)))
(assert (forall ((t0@@14 T@U) (t1@@11 T@U) (t2@@10 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@9 T@U) (bx0@@8 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) (and (and ($IsBox bx0@@8 t0@@14) ($IsBox bx1@@8 t1@@11)) ($Is HandleTypeType f@@9 (Tclass._System.___hFunc2 t0@@14 t1@@11 t2@@10)))) (forall ((o@@9 T@U) (fld@@3 T@U) )  (=> (and (or (not (= o@@9 null)) (not true)) (|Set#IsMember| (Reads2 t0@@14 t1@@11 t2@@10 h0@@3 f@@9 bx0@@8 bx1@@8) ($Box refType o@@9))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@3 o@@9) fld@@3) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@3 o@@9) fld@@3))))) (= (Apply2 t0@@14 t1@@11 t2@@10 h0@@3 f@@9 bx0@@8 bx1@@8) (Apply2 t0@@14 t1@@11 t2@@10 h1@@3 f@@9 bx0@@8 bx1@@8)))
 :pattern ( ($HeapSucc h0@@3 h1@@3) (Apply2 t0@@14 t1@@11 t2@@10 h1@@3 f@@9 bx0@@8 bx1@@8))
)))
(assert (forall ((t0@@15 T@U) (t1@@12 T@U) (t2@@11 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@10 T@U) (bx0@@9 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) (and (and ($IsBox bx0@@9 t0@@15) ($IsBox bx1@@9 t1@@12)) ($Is HandleTypeType f@@10 (Tclass._System.___hFunc2 t0@@15 t1@@12 t2@@11)))) (forall ((o@@10 T@U) (fld@@4 T@U) )  (=> (and (or (not (= o@@10 null)) (not true)) (|Set#IsMember| (Reads2 t0@@15 t1@@12 t2@@11 h1@@4 f@@10 bx0@@9 bx1@@9) ($Box refType o@@10))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h0@@4 o@@10) fld@@4) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h1@@4 o@@10) fld@@4))))) (= (Apply2 t0@@15 t1@@12 t2@@11 h0@@4 f@@10 bx0@@9 bx1@@9) (Apply2 t0@@15 t1@@12 t2@@11 h1@@4 f@@10 bx0@@9 bx1@@9)))
 :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply2 t0@@15 t1@@12 t2@@11 h1@@4 f@@10 bx0@@9 bx1@@9))
)))
(assert (forall ((x@@9 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@9))) (Lit BoxType ($Box intType (int_2_U x@@9))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@9))))
)))
(assert (forall ((x@@10 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@10)) (Lit BoxType ($Box T@@5 x@@10)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@10)))
)))
(assert (forall ((s@@6 T@U) ) (!  (=> (= (|Seq#Length| s@@6) 0) (= s@@6 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@6))
)))
(assert (forall ((h@@8 T@U) (v@@9 T@U) ) (! ($IsAlloc boolType v@@9 TBool h@@8)
 :pattern ( ($IsAlloc boolType v@@9 TBool h@@8))
)))
(assert (forall ((v@@10 T@U) (t0@@16 T@U) ) (! (= ($Is SeqType v@@10 (TSeq t0@@16)) (forall ((i@@3 Int) ) (!  (=> (and (<= 0 i@@3) (< i@@3 (|Seq#Length| v@@10))) ($IsBox (|Seq#Index| v@@10 i@@3) t0@@16))
 :pattern ( (|Seq#Index| v@@10 i@@3))
)))
 :pattern ( ($Is SeqType v@@10 (TSeq t0@@16)))
)))
(assert (forall ((v@@11 T@U) ) (! ($Is boolType v@@11 TBool)
 :pattern ( ($Is boolType v@@11 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |i#0@1| () Int)
(declare-fun |i#0@0| () Int)
(declare-fun |$w$loop#1@0| () Bool)
(declare-fun |r#0@3| () T@U)
(declare-fun |n#0@0| () Int)
(declare-fun EnumerationRegression._default.ToSeq$X () T@U)
(declare-fun $Heap () T@U)
(declare-fun |below#0| () T@U)
(declare-fun |j#1_0@2| () Int)
(declare-fun |j#1_0@1| () Int)
(declare-fun |j#1_0#lo@1| () Int)
(declare-fun |r#0@4| () T@U)
(declare-fun |$w$loop#1_0@1| () Bool)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun |i#0#lo@0| () Int)
(declare-fun |i#0#hi@0| () Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |r#0@2| () T@U)
(declare-fun |y#1_0@1| () T@U)
(declare-fun |defass#y#1_0@0| () Bool)
(declare-fun |y#1_0@0| () T@U)
(declare-fun |ss#0@0| () T@U)
(declare-fun |r#0@1| () T@U)
(declare-fun |x#0_0@1| () T@U)
(declare-fun |$rhs#0_0@1| () T@U)
(declare-fun |$rhs#0_1@1| () T@U)
(declare-fun |x#0_1@1| () T@U)
(declare-fun |defass#x#0_0@0| () Bool)
(declare-fun |x#0_0@0| () T@U)
(declare-fun |s#0| () T@U)
(declare-fun |r#0@0| () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |r#0| () T@U)
(declare-fun |ss#0| () T@U)
(declare-fun |defass#x#0_0| () Bool)
(declare-fun |x#0_0| () T@U)
(declare-fun |defass#y#1_0| () Bool)
(declare-fun |y#1_0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 46) (let ((after_1_0_correct  (=> (and (and (= |i#0@1| (+ |i#0@0| 1)) (= (ControlFlow 0 23) (- 0 22))) |$w$loop#1@0|) (= (|Seq#Length| |r#0@3|) |n#0@0|))))
(let ((anon33_Then_correct  (=> (and (U_2_bool ($Unbox boolType (Apply2 EnumerationRegression._default.ToSeq$X EnumerationRegression._default.ToSeq$X TBool $Heap |below#0| (|Seq#Index| |r#0@3| |j#1_0@2|) (|Seq#Index| |r#0@3| (+ |j#1_0@2| 1))))) (= (ControlFlow 0 25) 23)) after_1_0_correct)))
(let ((anon32_Then_correct  (=> (and (= |j#1_0@1| |j#1_0#lo@1|) (= (ControlFlow 0 24) 23)) after_1_0_correct)))
(let ((anon33_Else_correct  (=> (not (U_2_bool ($Unbox boolType (Apply2 EnumerationRegression._default.ToSeq$X EnumerationRegression._default.ToSeq$X TBool $Heap |below#0| (|Seq#Index| |r#0@3| |j#1_0@2|) (|Seq#Index| |r#0@3| (+ |j#1_0@2| 1)))))) (and (=> (= (ControlFlow 0 17) (- 0 21)) (and (<= 0 |j#1_0@2|) (< |j#1_0@2| (|Seq#Length| |r#0@3|)))) (=> (and (<= 0 |j#1_0@2|) (< |j#1_0@2| (|Seq#Length| |r#0@3|))) (and (=> (= (ControlFlow 0 17) (- 0 20)) (and (<= 0 (+ |j#1_0@2| 1)) (< (+ |j#1_0@2| 1) (|Seq#Length| |r#0@3|)))) (=> (and (<= 0 (+ |j#1_0@2| 1)) (< (+ |j#1_0@2| 1) (|Seq#Length| |r#0@3|))) (and (=> (= (ControlFlow 0 17) (- 0 19)) (and (<= 0 (+ |j#1_0@2| 1)) (< (+ |j#1_0@2| 1) (|Seq#Length| (|Seq#Update| |r#0@3| |j#1_0@2| (|Seq#Index| |r#0@3| (+ |j#1_0@2| 1))))))) (=> (and (<= 0 (+ |j#1_0@2| 1)) (< (+ |j#1_0@2| 1) (|Seq#Length| (|Seq#Update| |r#0@3| |j#1_0@2| (|Seq#Index| |r#0@3| (+ |j#1_0@2| 1)))))) (and (=> (= (ControlFlow 0 17) (- 0 18)) (and (<= 0 |j#1_0@2|) (< |j#1_0@2| (|Seq#Length| |r#0@3|)))) (=> (and (<= 0 |j#1_0@2|) (< |j#1_0@2| (|Seq#Length| |r#0@3|))) (=> (and (and (= |r#0@4| (|Seq#Update| (|Seq#Update| |r#0@3| |j#1_0@2| (|Seq#Index| |r#0@3| (+ |j#1_0@2| 1))) (+ |j#1_0@2| 1) (|Seq#Index| |r#0@3| |j#1_0@2|))) (= (ControlFlow 0 17) (- 0 16))) |$w$loop#1_0@1|) (= (|Seq#Length| |r#0@4|) |n#0@0|)))))))))))))
(let ((anon32_Else_correct  (=> (and (or (not (= |j#1_0@1| |j#1_0#lo@1|)) (not true)) (= |j#1_0@2| (- |j#1_0@1| 1))) (and (=> (= (ControlFlow 0 26) (- 0 28)) (and (<= 0 |j#1_0@2|) (< |j#1_0@2| (|Seq#Length| |r#0@3|)))) (=> (and (<= 0 |j#1_0@2|) (< |j#1_0@2| (|Seq#Length| |r#0@3|))) (and (=> (= (ControlFlow 0 26) (- 0 27)) (and (<= 0 (+ |j#1_0@2| 1)) (< (+ |j#1_0@2| 1) (|Seq#Length| |r#0@3|)))) (=> (and (<= 0 (+ |j#1_0@2| 1)) (< (+ |j#1_0@2| 1) (|Seq#Length| |r#0@3|))) (and (=> (= (ControlFlow 0 26) 25) anon33_Then_correct) (=> (= (ControlFlow 0 26) 17) anon33_Else_correct)))))))))
(let ((anon31_Else_correct  (=> |$w$loop#1_0@1| (and (=> (= (ControlFlow 0 29) 24) anon32_Then_correct) (=> (= (ControlFlow 0 29) 26) anon32_Else_correct)))))
(let ((anon31_Then_correct true))
(let ((anon30_LoopBody_correct  (and (=> (= (ControlFlow 0 30) 15) anon31_Then_correct) (=> (= (ControlFlow 0 30) 29) anon31_Else_correct))))
(let ((anon30_LoopDone_correct true))
(let ((anon30_LoopHead_correct  (=> (and ($Is SeqType |r#0@3| (TSeq EnumerationRegression._default.ToSeq$X)) ($IsAlloc SeqType |r#0@3| (TSeq EnumerationRegression._default.ToSeq$X) $Heap)) (=> (and (and (and (and (and (and (and (and (and (and (and (not false) |$w$loop#0@0|) (<= 0 |i#0@0|)) (= |i#0#lo@0| 0)) (<= 0 |i#0#hi@0|)) |$w$loop#1@0|) true) (<= 0 |j#1_0@1|)) (= |j#1_0#lo@1| 0)) (<= 0 |i#0@0|)) (and (<= |j#1_0#lo@1| |j#1_0@1|) (<= |j#1_0@1| |i#0@0|))) (and (and (=> |$w$loop#1_0@1| (= (|Seq#Length| |r#0@3|) |n#0@0|)) (forall (($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0))
))) (and ($HeapSucc $Heap $Heap) (forall (($o@@1 T@U) ($f@@0 T@U) ) (!  (=> (and (or (not (= $o@@1 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@1 $f@@0))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@1) $f@@0))
))))) (and (=> (= (ControlFlow 0 31) 14) anon30_LoopDone_correct) (=> (= (ControlFlow 0 31) 30) anon30_LoopBody_correct))))))
(let ((anon29_Else_correct  (=> (or (not (= |i#0@0| |i#0#hi@0|)) (not true)) (and (=> (= (ControlFlow 0 32) (- 0 35)) (and (<= 0 |i#0@0|) (< |i#0@0| (|Seq#Length| |r#0@2|)))) (=> (and (<= 0 |i#0@0|) (< |i#0@0| (|Seq#Length| |r#0@2|))) (=> (and (= |y#1_0@1| (|Seq#Index| |r#0@2| |i#0@0|)) (= |j#1_0#lo@1| (LitInt 0))) (and (=> (= (ControlFlow 0 32) (- 0 34)) (<= |j#1_0#lo@1| |i#0@0|)) (=> (<= |j#1_0#lo@1| |i#0@0|) (and (=> (= (ControlFlow 0 32) (- 0 33)) (=> |$w$loop#1_0@1| (= (|Seq#Length| |r#0@2|) |n#0@0|))) (=> (=> |$w$loop#1_0@1| (= (|Seq#Length| |r#0@2|) |n#0@0|)) (=> (= (ControlFlow 0 32) 31) anon30_LoopHead_correct)))))))))))
(let ((anon29_Then_correct true))
(let ((anon28_Else_correct  (=> |$w$loop#1@0| (and (=> (= (ControlFlow 0 36) 13) anon29_Then_correct) (=> (= (ControlFlow 0 36) 32) anon29_Else_correct)))))
(let ((anon28_Then_correct true))
(let ((anon27_LoopBody_correct  (and (=> (= (ControlFlow 0 37) 12) anon28_Then_correct) (=> (= (ControlFlow 0 37) 36) anon28_Else_correct))))
(let ((anon27_LoopDone_correct true))
(let ((anon27_LoopHead_correct  (=> (and (and ($Is SeqType |r#0@2| (TSeq EnumerationRegression._default.ToSeq$X)) ($IsAlloc SeqType |r#0@2| (TSeq EnumerationRegression._default.ToSeq$X) $Heap)) (=> |defass#y#1_0@0| (and ($IsBox |y#1_0@0| EnumerationRegression._default.ToSeq$X) ($IsAllocBox |y#1_0@0| EnumerationRegression._default.ToSeq$X $Heap)))) (=> (and (and (and (and (and (and (not false) |$w$loop#0@0|) (<= 0 |i#0@0|)) (= |i#0#lo@0| 0)) (<= 0 |i#0#hi@0|)) (and (<= |i#0#lo@0| |i#0@0|) (<= |i#0@0| |i#0#hi@0|))) (and (and (=> |$w$loop#1@0| (= (|Seq#Length| |r#0@2|) |n#0@0|)) (forall (($o@@2 T@U) ) (!  (=> (and (or (not (= $o@@2 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@2) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@2) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@2)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@2))
))) (and ($HeapSucc $Heap $Heap) (forall (($o@@3 T@U) ($f@@1 T@U) ) (!  (=> (and (or (not (= $o@@3 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@3) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@3) $f@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@3) $f@@1)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@3 $f@@1))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@3) $f@@1))
))))) (and (=> (= (ControlFlow 0 38) 11) anon27_LoopDone_correct) (=> (= (ControlFlow 0 38) 37) anon27_LoopBody_correct))))))
(let ((anon25_Then_correct  (=> (and (and (|Set#Equal| |ss#0@0| |Set#Empty|) (= |n#0@0| (|Seq#Length| |r#0@1|))) (and (= |i#0#lo@0| (LitInt 0)) (= |i#0#hi@0| (|Seq#Length| |r#0@1|)))) (and (=> (= (ControlFlow 0 39) (- 0 41)) (<= |i#0#lo@0| |i#0#hi@0|)) (=> (<= |i#0#lo@0| |i#0#hi@0|) (and (=> (= (ControlFlow 0 39) (- 0 40)) (=> |$w$loop#1@0| (= (|Seq#Length| |r#0@1|) |n#0@0|))) (=> (=> |$w$loop#1@0| (= (|Seq#Length| |r#0@1|) |n#0@0|)) (=> (= (ControlFlow 0 39) 38) anon27_LoopHead_correct))))))))
(let ((anon7_correct  (and (=> (= (ControlFlow 0 4) (- 0 7)) (exists ((|$as#x0_0#0_0| T@U) )  (and ($IsBox |$as#x0_0#0_0| EnumerationRegression._default.ToSeq$X) (|Set#IsMember| |ss#0@0| |$as#x0_0#0_0|)))) (=> (exists ((|$as#x0_0#0_0@@0| T@U) )  (and ($IsBox |$as#x0_0#0_0@@0| EnumerationRegression._default.ToSeq$X) (|Set#IsMember| |ss#0@0| |$as#x0_0#0_0@@0|))) (=> (and (=> true (and ($IsBox |x#0_0@1| EnumerationRegression._default.ToSeq$X) ($IsAllocBox |x#0_0@1| EnumerationRegression._default.ToSeq$X $Heap))) (|Set#IsMember| |ss#0@0| |x#0_0@1|)) (and (=> (= (ControlFlow 0 4) (- 0 6)) true) (=> (= |$rhs#0_0@1| (|Set#Difference| |ss#0@0| (|Set#UnionOne| |Set#Empty| |x#0_0@1|))) (and (=> (= (ControlFlow 0 4) (- 0 5)) true) (=> (and (= |$rhs#0_1@1| (|Seq#Append| |r#0@1| (|Seq#Build| |Seq#Empty| |x#0_0@1|))) (= (ControlFlow 0 4) (- 0 3))) (and (|Set#Subset| |$rhs#0_0@1| |ss#0@0|) (not (|Set#Subset| |ss#0@0| |$rhs#0_0@1|))))))))))))
(let ((anon26_Else_correct  (=> (and (not (and ($IsBox |x#0_1@1| EnumerationRegression._default.ToSeq$X) ($IsAllocBox |x#0_1@1| EnumerationRegression._default.ToSeq$X $Heap))) (= (ControlFlow 0 9) 4)) anon7_correct)))
(let ((anon26_Then_correct  (=> (and (and ($IsBox |x#0_1@1| EnumerationRegression._default.ToSeq$X) ($IsAllocBox |x#0_1@1| EnumerationRegression._default.ToSeq$X $Heap)) (= (ControlFlow 0 8) 4)) anon7_correct)))
(let ((anon25_Else_correct  (=> (not (|Set#Equal| |ss#0@0| |Set#Empty|)) (and (=> (= (ControlFlow 0 10) 8) anon26_Then_correct) (=> (= (ControlFlow 0 10) 9) anon26_Else_correct)))))
(let ((anon24_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 42) 39) anon25_Then_correct) (=> (= (ControlFlow 0 42) 10) anon25_Else_correct)))))
(let ((anon24_Then_correct true))
(let ((anon23_LoopBody_correct  (and (=> (= (ControlFlow 0 43) 2) anon24_Then_correct) (=> (= (ControlFlow 0 43) 42) anon24_Else_correct))))
(let ((anon23_LoopDone_correct true))
(let ((anon23_LoopHead_correct  (=> (=> |defass#x#0_0@0| (and ($IsBox |x#0_0@0| EnumerationRegression._default.ToSeq$X) ($IsAllocBox |x#0_0@0| EnumerationRegression._default.ToSeq$X $Heap))) (=> (and ($Is SetType |ss#0@0| (TSet EnumerationRegression._default.ToSeq$X)) ($IsAlloc SetType |ss#0@0| (TSet EnumerationRegression._default.ToSeq$X) $Heap)) (=> (and (and (and ($Is SeqType |r#0@1| (TSeq EnumerationRegression._default.ToSeq$X)) ($IsAlloc SeqType |r#0@1| (TSeq EnumerationRegression._default.ToSeq$X) $Heap)) (not false)) (and (and (forall (($o@@4 T@U) ) (!  (=> (and (or (not (= $o@@4 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@4) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@4) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@4)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@4))
)) ($HeapSucc $Heap $Heap)) (and (forall (($o@@5 T@U) ($f@@2 T@U) ) (!  (=> (and (or (not (= $o@@5 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@5) alloc)))) (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@5) $f@@2) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@5) $f@@2)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@5 $f@@2))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@5) $f@@2))
)) (|Set#Subset| |ss#0@0| |s#0|)))) (and (=> (= (ControlFlow 0 44) 1) anon23_LoopDone_correct) (=> (= (ControlFlow 0 44) 43) anon23_LoopBody_correct)))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and (= |r#0@0| (Lit SeqType |Seq#Empty|)) (= (ControlFlow 0 45) 44)) anon23_LoopHead_correct))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and ($Is SetType |s#0| (TSet EnumerationRegression._default.ToSeq$X)) ($IsAlloc SetType |s#0| (TSet EnumerationRegression._default.ToSeq$X) $Heap))) (and (and ($Is HandleTypeType |below#0| (Tclass._System.___hTotalFunc2 EnumerationRegression._default.ToSeq$X EnumerationRegression._default.ToSeq$X TBool)) ($IsAlloc HandleTypeType |below#0| (Tclass._System.___hTotalFunc2 EnumerationRegression._default.ToSeq$X EnumerationRegression._default.ToSeq$X TBool) $Heap)) (and ($Is SeqType |r#0| (TSeq EnumerationRegression._default.ToSeq$X)) ($IsAlloc SeqType |r#0| (TSeq EnumerationRegression._default.ToSeq$X) $Heap)))) (=> (and (and (and (and ($Is SetType |ss#0| (TSet EnumerationRegression._default.ToSeq$X)) ($IsAlloc SetType |ss#0| (TSet EnumerationRegression._default.ToSeq$X) $Heap)) true) (and (=> |defass#x#0_0| (and ($IsBox |x#0_0| EnumerationRegression._default.ToSeq$X) ($IsAllocBox |x#0_0| EnumerationRegression._default.ToSeq$X $Heap))) true)) (and (and (=> |defass#y#1_0| (and ($IsBox |y#1_0| EnumerationRegression._default.ToSeq$X) ($IsAllocBox |y#1_0| EnumerationRegression._default.ToSeq$X $Heap))) true) (and (= 0 $FunctionContextHeight) (= (ControlFlow 0 46) 45)))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
