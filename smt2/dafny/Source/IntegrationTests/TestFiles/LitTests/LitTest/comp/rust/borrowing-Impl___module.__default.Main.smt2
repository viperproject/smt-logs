(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TChar () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._module.Test () T@U)
(declare-fun Tagclass._module.U8 () T@U)
(declare-fun |##_module.Test.Test| () T@U)
(declare-fun tytagFamily$Test () T@U)
(declare-fun tytagFamily$U8 () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._module.U8 () T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun |lambda#0| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun |Seq#Empty| () T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#_module.Test.Test| () T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.Test () T@U)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.Test.At (T@U Int) Bool)
(declare-fun |_module.Test.At#canCall| (T@U Int) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Set#FromBoogieMap| (T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun _module.__default.ToSet (T@U Bool T@U) T@U)
(declare-fun |_module.__default.ToSet#canCall| (T@U T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun charType () T@T)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#2| (T@U T@U T@U Bool) T@U)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TChar TagChar TagSet TagSeq alloc Tagclass._module.Test Tagclass._module.U8 |##_module.Test.Test| tytagFamily$Test tytagFamily$U8)
)
(assert (= (Tag TChar) TagChar))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._module.U8 $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._module.U8 $h))
)))
(assert (forall ((s T@U) (v T@U) (x@@2 T@U) ) (! (= (|Seq#Contains| (|Seq#Build| s v) x@@2)  (or (= v x@@2) (|Seq#Contains| s x@@2)))
 :pattern ( (|Seq#Contains| (|Seq#Build| s v) x@@2))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._module.U8)  (and (<= (LitInt 0) (U_2_int |x#0@@0|)) (<= (U_2_int |x#0@@0|) (LitInt 255))))
 :pattern ( ($Is intType |x#0@@0| Tclass._module.U8))
)))
(assert  (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor BoxType) 3)))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|$y#0| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#0| |l#0| |l#1|) |$y#0|))  (and ($IsBox |$y#0| |l#0|) (|Seq#Contains| |l#1| |$y#0|)))
 :pattern ( (MapType0Select BoxType boolType (|lambda#0| |l#0| |l#1|) |$y#0|))
)))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (forall ((x@@3 T@U) ) (!  (not (|Seq#Contains| |Seq#Empty| x@@3))
 :pattern ( (|Seq#Contains| |Seq#Empty| x@@3))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (DatatypeCtorId |#_module.Test.Test|) |##_module.Test.Test|))
(assert (= (Ctor DatatypeTypeType) 4))
(assert ($Is DatatypeTypeType |#_module.Test.Test| Tclass._module.Test))
(assert (forall ((s@@0 T@U) ) (!  (and (= (= (|Set#Card| s@@0) 0) (= s@@0 |Set#Empty|)) (=> (or (not (= (|Set#Card| s@@0) 0)) (not true)) (exists ((x@@4 T@U) ) (! (|Set#IsMember| s@@0 x@@4)
 :pattern ( (|Set#IsMember| s@@0 x@@4))
))))
 :pattern ( (|Set#Card| s@@0))
)))
(assert (forall ((x@@5 Int) ) (! (= (LitInt x@@5) x@@5)
 :pattern ( (LitInt x@@5))
)))
(assert (forall ((x@@6 T@U) (T T@T) ) (! (= (Lit T x@@6) x@@6)
 :pattern ( (Lit T x@@6))
)))
(assert (= (Ctor SeqType) 5))
(assert (forall ((s@@1 T@U) (bx T@U) (t T@U) ) (!  (=> (and ($Is SeqType s@@1 (TSeq t)) ($IsBox bx t)) ($Is SeqType (|Seq#Build| s@@1 bx) (TSeq t)))
 :pattern ( ($Is SeqType (|Seq#Build| s@@1 bx) (TSeq t)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this T@U) (|x#0@@1| Int) ) (!  (=> (or (|_module.Test.At#canCall| this |x#0@@1|) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType this Tclass._module.Test) (and (<= (LitInt 0) |x#0@@1|) (<= |x#0@@1| (LitInt 255)))))) (= (_module.Test.At this |x#0@@1|) (U_2_bool (Lit boolType (bool_2_U true)))))
 :pattern ( (_module.Test.At this |x#0@@1|))
))))
(assert (forall ((x@@7 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@7)) x@@7)
 :pattern ( ($Unbox T@@0 x@@7))
)))
(assert (forall ((m@@1 T@U) (bx@@0 T@U) ) (! (= (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx@@0) (U_2_bool (MapType0Select BoxType boolType m@@1 bx@@0)))
 :pattern ( (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx@@0))
)))
(assert (= (Ctor SetType) 6))
(assert (forall ((v@@0 T@U) (t0@@0 T@U) ) (! (= ($Is SetType v@@0 (TSet t0@@0)) (forall ((bx@@1 T@U) ) (!  (=> (|Set#IsMember| v@@0 bx@@1) ($IsBox bx@@1 t0@@0))
 :pattern ( (|Set#IsMember| v@@0 bx@@1))
)))
 :pattern ( ($Is SetType v@@0 (TSet t0@@0)))
)))
(assert (forall ((s@@2 T@U) (v@@1 T@U) ) (! (= (|Seq#Length| (|Seq#Build| s@@2 v@@1)) (+ 1 (|Seq#Length| s@@2)))
 :pattern ( (|Seq#Build| s@@2 v@@1))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.ToSet$T T@U) (|xs#0| T@U) ) (!  (=> (or (|_module.__default.ToSet#canCall| _module._default.ToSet$T |xs#0|) (and (< 0 $FunctionContextHeight) ($Is SeqType |xs#0| (TSeq _module._default.ToSet$T)))) (= (_module.__default.ToSet _module._default.ToSet$T true |xs#0|) (|Set#FromBoogieMap| (|lambda#0| _module._default.ToSet$T |xs#0|))))
 :pattern ( (_module.__default.ToSet _module._default.ToSet$T true |xs#0|))
))))
(assert (forall ((v@@2 T@U) (t@@0 T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@2) t@@0 h) ($IsAlloc T@@1 v@@2 t@@0 h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@2) t@@0 h))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass._module.Test) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@2)) bx@@2) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@2) Tclass._module.Test)))
 :pattern ( ($IsBox bx@@2 Tclass._module.Test))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass._module.U8) (and (= ($Box intType ($Unbox intType bx@@3)) bx@@3) ($Is intType ($Unbox intType bx@@3) Tclass._module.U8)))
 :pattern ( ($IsBox bx@@3 Tclass._module.U8))
)))
(assert (forall ((s@@3 T@U) (i Int) (v@@3 T@U) ) (!  (and (=> (= i (|Seq#Length| s@@3)) (= (|Seq#Index| (|Seq#Build| s@@3 v@@3) i) v@@3)) (=> (or (not (= i (|Seq#Length| s@@3))) (not true)) (= (|Seq#Index| (|Seq#Build| s@@3 v@@3) i) (|Seq#Index| s@@3 i))))
 :pattern ( (|Seq#Index| (|Seq#Build| s@@3 v@@3) i))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.ToSet$T@@0 T@U) (|xs#0@@0| T@U) ) (!  (=> (or (|_module.__default.ToSet#canCall| _module._default.ToSet$T@@0 (Lit SeqType |xs#0@@0|)) (and (< 0 $FunctionContextHeight) ($Is SeqType |xs#0@@0| (TSeq _module._default.ToSet$T@@0)))) (= (_module.__default.ToSet _module._default.ToSet$T@@0 true (Lit SeqType |xs#0@@0|)) (|Set#FromBoogieMap| (|lambda#0| _module._default.ToSet$T@@0 |xs#0@@0|))))
 :weight 3
 :pattern ( (_module.__default.ToSet _module._default.ToSet$T@@0 true (Lit SeqType |xs#0@@0|)))
))))
(assert (forall ((s@@4 T@U) (x@@8 T@U) ) (! (= (|Seq#Contains| s@@4 x@@8) (exists ((i@@0 Int) ) (!  (and (and (<= 0 i@@0) (< i@@0 (|Seq#Length| s@@4))) (= (|Seq#Index| s@@4 i@@0) x@@8))
 :pattern ( (|Seq#Index| s@@4 i@@0))
)))
 :pattern ( (|Seq#Contains| s@@4 x@@8))
)))
(assert (= (Ctor charType) 7))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 TChar) (and (= ($Box charType ($Unbox charType bx@@4)) bx@@4) ($Is charType ($Unbox charType bx@@4) TChar)))
 :pattern ( ($IsBox bx@@4 TChar))
)))
(assert (forall ((v@@4 T@U) (t@@1 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@4) t@@1) ($Is T@@2 v@@4 t@@1))
 :pattern ( ($IsBox ($Box T@@2 v@@4) t@@1))
)))
(assert (forall ((s@@5 T@U) ) (! (<= 0 (|Set#Card| s@@5))
 :pattern ( (|Set#Card| s@@5))
)))
(assert (forall ((s@@6 T@U) ) (! (<= 0 (|Seq#Length| s@@6))
 :pattern ( (|Seq#Length| s@@6))
)))
(assert (forall ((v@@5 T@U) (t0@@1 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@5 (TSet t0@@1) h@@0) (forall ((bx@@5 T@U) ) (!  (=> (|Set#IsMember| v@@5 bx@@5) ($IsAllocBox bx@@5 t0@@1 h@@0))
 :pattern ( (|Set#IsMember| v@@5 bx@@5))
)))
 :pattern ( ($IsAlloc SetType v@@5 (TSet t0@@1) h@@0))
)))
(assert (forall ((v@@6 T@U) (t0@@2 T@U) (h@@1 T@U) ) (! (= ($IsAlloc SeqType v@@6 (TSeq t0@@2) h@@1) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@6))) ($IsAllocBox (|Seq#Index| v@@6 i@@1) t0@@2 h@@1))
 :pattern ( (|Seq#Index| v@@6 i@@1))
)))
 :pattern ( ($IsAlloc SeqType v@@6 (TSeq t0@@2) h@@1))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap T@U) (_module._default.ToSet$T@@1 T@U) ($reveal Bool) (|xs#0@@1| T@U) ) (!  (=> (and (or (|_module.__default.ToSet#canCall| _module._default.ToSet$T@@1 |xs#0@@1|) (and (< 0 $FunctionContextHeight) (and ($Is SeqType |xs#0@@1| (TSeq _module._default.ToSet$T@@1)) ($IsAlloc SeqType |xs#0@@1| (TSeq _module._default.ToSet$T@@1) $Heap)))) ($IsGoodHeap $Heap)) ($IsAlloc SetType (_module.__default.ToSet _module._default.ToSet$T@@1 $reveal |xs#0@@1|) (TSet _module._default.ToSet$T@@1) $Heap))
 :pattern ( ($IsAlloc SetType (_module.__default.ToSet _module._default.ToSet$T@@1 $reveal |xs#0@@1|) (TSet _module._default.ToSet$T@@1) $Heap))
))))
(assert (forall ((t@@2 T@U) ) (! (= (Inv0_TSet (TSet t@@2)) t@@2)
 :pattern ( (TSet t@@2))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Tag (TSet t@@3)) TagSet)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Inv0_TSeq (TSeq t@@4)) t@@4)
 :pattern ( (TSeq t@@4))
)))
(assert (forall ((t@@5 T@U) ) (! (= (Tag (TSeq t@@5)) TagSeq)
 :pattern ( (TSeq t@@5))
)))
(assert (forall ((x@@9 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@9)) x@@9)
 :pattern ( ($Box T@@3 x@@9))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.ToSet$T@@2 T@U) ($reveal@@0 Bool) (|xs#0@@2| T@U) ) (!  (=> (or (|_module.__default.ToSet#canCall| _module._default.ToSet$T@@2 |xs#0@@2|) (and (< 0 $FunctionContextHeight) ($Is SeqType |xs#0@@2| (TSeq _module._default.ToSet$T@@2)))) ($Is SetType (_module.__default.ToSet _module._default.ToSet$T@@2 $reveal@@0 |xs#0@@2|) (TSet _module._default.ToSet$T@@2)))
 :pattern ( (_module.__default.ToSet _module._default.ToSet$T@@2 $reveal@@0 |xs#0@@2|))
))))
(assert (forall ((n Int) ) (!  (=> (or (and (<= 0 n) (< n 55296)) (and (<= 57344 n) (< n 1114112))) (= (|char#ToInt| (|char#FromInt| n)) n))
 :pattern ( (|char#FromInt| n))
)))
(assert  (and (and (and (and (and (and (forall ((t0@@3 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@3 t1@@0 t2 (MapType1Store t0@@3 t1@@0 t2 m@@2 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@3 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@3 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@4 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@4 y0@@1 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 8)) (= (Ctor FieldType) 9)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 10))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0@@0| T@U) (|l#1@@0| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#2| |l#0@@0| |l#1@@0| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0@@0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@0| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#2| |l#0@@0| |l#1@@0| |l#2| |l#3|) $o $f))
)))
(assert (forall ((s@@7 T@U) (val@@4 T@U) ) (!  (and (= (|Seq#Build_inv0| (|Seq#Build| s@@7 val@@4)) s@@7) (= (|Seq#Build_inv1| (|Seq#Build| s@@7 val@@4)) val@@4))
 :pattern ( (|Seq#Build| s@@7 val@@4))
)))
(assert (forall ((bx@@6 T@U) (t@@6 T@U) ) (!  (=> ($IsBox bx@@6 (TSet t@@6)) (and (= ($Box SetType ($Unbox SetType bx@@6)) bx@@6) ($Is SetType ($Unbox SetType bx@@6) (TSet t@@6))))
 :pattern ( ($IsBox bx@@6 (TSet t@@6)))
)))
(assert (forall ((bx@@7 T@U) (t@@7 T@U) ) (!  (=> ($IsBox bx@@7 (TSeq t@@7)) (and (= ($Box SeqType ($Unbox SeqType bx@@7)) bx@@7) ($Is SeqType ($Unbox SeqType bx@@7) (TSeq t@@7))))
 :pattern ( ($IsBox bx@@7 (TSeq t@@7)))
)))
(assert (forall ((ch T@U) ) (!  (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (or (and (<= 0 (|char#ToInt| ch)) (< (|char#ToInt| ch) 55296)) (and (<= 57344 (|char#ToInt| ch)) (< (|char#ToInt| ch) 1114112))))
 :pattern ( (|char#ToInt| ch))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@0 T@U) (|x#0@@2| Int) ) (!  (=> (or (|_module.Test.At#canCall| (Lit DatatypeTypeType this@@0) (LitInt |x#0@@2|)) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType this@@0 Tclass._module.Test) (and (<= (LitInt 0) |x#0@@2|) (<= |x#0@@2| (LitInt 255)))))) (= (_module.Test.At (Lit DatatypeTypeType this@@0) (LitInt |x#0@@2|)) (U_2_bool (Lit boolType (bool_2_U true)))))
 :weight 3
 :pattern ( (_module.Test.At (Lit DatatypeTypeType this@@0) (LitInt |x#0@@2|)))
))))
(assert (forall ((d T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) ($Is DatatypeTypeType d Tclass._module.Test)) ($IsAlloc DatatypeTypeType d Tclass._module.Test $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType d Tclass._module.Test $h@@0))
)))
(assert (= (Tag Tclass._module.Test) Tagclass._module.Test))
(assert (= (TagFamily Tclass._module.Test) tytagFamily$Test))
(assert (= (Tag Tclass._module.U8) Tagclass._module.U8))
(assert (= (TagFamily Tclass._module.U8) tytagFamily$U8))
(assert (= |#_module.Test.Test| (Lit DatatypeTypeType |#_module.Test.Test|)))
(assert (forall ((x@@10 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@10))) (Lit BoxType ($Box intType (int_2_U x@@10))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@10))))
)))
(assert (forall ((x@@11 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@11)) (Lit BoxType ($Box T@@4 x@@11)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@11)))
)))
(assert (forall ((s@@8 T@U) ) (!  (=> (= (|Seq#Length| s@@8) 0) (= s@@8 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@8))
)))
(assert (forall ((h@@2 T@U) (v@@7 T@U) ) (! ($IsAlloc charType v@@7 TChar h@@2)
 :pattern ( ($IsAlloc charType v@@7 TChar h@@2))
)))
(assert (forall ((v@@8 T@U) (t0@@4 T@U) ) (! (= ($Is SeqType v@@8 (TSeq t0@@4)) (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| v@@8))) ($IsBox (|Seq#Index| v@@8 i@@2) t0@@4))
 :pattern ( (|Seq#Index| v@@8 i@@2))
)))
 :pattern ( ($Is SeqType v@@8 (TSeq t0@@4)))
)))
(assert (forall ((v@@9 T@U) ) (! ($Is charType v@@9 TChar)
 :pattern ( ($Is charType v@@9 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap@@0 () T@U)
(declare-fun |newtype$check#0@0| () Int)
(declare-fun |##x#0@0| () Int)
(declare-fun |z#0@0| () Bool)
(declare-fun |x#0@0| () T@U)
(declare-fun |w#0@0| () T@U)
(declare-fun reveal__module._default.ToSet () Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |x#0@@3| () T@U)
(declare-fun |w#0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let ((anon2_Else_correct true))
(let ((anon2_Then_correct true))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#2| null $Heap@@0 alloc false)) (=> (and ($IsAllocBox ($Box DatatypeTypeType (Lit DatatypeTypeType |#_module.Test.Test|)) Tclass._module.Test $Heap@@0) (= |newtype$check#0@0| (LitInt 0))) (and (=> (= (ControlFlow 0 3) (- 0 4)) (and (<= (LitInt 0) |newtype$check#0@0|) (<= |newtype$check#0@0| (LitInt 255)))) (=> (and (<= (LitInt 0) |newtype$check#0@0|) (<= |newtype$check#0@0| (LitInt 255))) (=> (and (= |##x#0@0| (LitInt 0)) ($IsAlloc intType (int_2_U |##x#0@0|) Tclass._module.U8 $Heap@@0)) (=> (and (and (and (|_module.Test.At#canCall| (Lit DatatypeTypeType |#_module.Test.Test|) (LitInt 0)) (|_module.Test.At#canCall| (Lit DatatypeTypeType |#_module.Test.Test|) (LitInt 0))) (and (= |z#0@0| (U_2_bool (Lit boolType (bool_2_U (_module.Test.At (Lit DatatypeTypeType |#_module.Test.Test|) (LitInt 0)))))) (= |x#0@0| (Lit SeqType (|Seq#Build| (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box SeqType (Lit SeqType (|Seq#Build| (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box charType (|char#FromInt| 97))) ($Box charType (|char#FromInt| 98))) ($Box charType (|char#FromInt| 99)))))) ($Box SeqType (Lit SeqType (|Seq#Build| (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box charType (|char#FromInt| 100))) ($Box charType (|char#FromInt| 101))) ($Box charType (|char#FromInt| 102)))))) ($Box SeqType (Lit SeqType (|Seq#Build| (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box charType (|char#FromInt| 97))) ($Box charType (|char#FromInt| 98))) ($Box charType (|char#FromInt| 99)))))))))) (and (and ($IsAlloc SeqType |x#0@0| (TSeq (TSeq TChar)) $Heap@@0) (|_module.__default.ToSet#canCall| (TSeq TChar) |x#0@0|)) (and (|_module.__default.ToSet#canCall| (TSeq TChar) |x#0@0|) (= |w#0@0| (_module.__default.ToSet (TSeq TChar) reveal__module._default.ToSet |x#0@0|))))) (and (=> (= (ControlFlow 0 3) 1) anon2_Then_correct) (=> (= (ControlFlow 0 3) 2) anon2_Else_correct))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@0) ($IsHeapAnchor $Heap@@0)) (=> (and (and ($Is SeqType |x#0@@3| (TSeq (TSeq TChar))) ($IsAlloc SeqType |x#0@@3| (TSeq (TSeq TChar)) $Heap@@0)) true) (=> (and (and (and ($Is SetType |w#0| (TSet (TSeq TChar))) ($IsAlloc SetType |w#0| (TSet (TSeq TChar)) $Heap@@0)) true) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 5) 3))) anon0_correct)))))
PreconditionGeneratedEntry_correct)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
