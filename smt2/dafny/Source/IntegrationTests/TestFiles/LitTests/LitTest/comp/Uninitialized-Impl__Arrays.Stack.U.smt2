(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TagBool () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass.Arrays.Stack () T@U)
(declare-fun Tagclass.Arrays.MaybeInitialized () T@U)
(declare-fun |##Arrays.MaybeInitialized.Uninitialized| () T@U)
(declare-fun |##Arrays.MaybeInitialized.Initialized| () T@U)
(declare-fun class.Arrays.Stack? () T@U)
(declare-fun Tagclass.Arrays.Stack? () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun tytagFamily$Stack () T@U)
(declare-fun tytagFamily$MaybeInitialized () T@U)
(declare-fun field$arr () T@U)
(declare-fun field$trr () T@U)
(declare-fun field$brr () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun Tclass.Arrays.Stack (T@U) T@U)
(declare-fun Tclass.Arrays.Stack? (T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#Arrays.MaybeInitialized.Uninitialized| () T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass.Arrays.MaybeInitialized (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun null () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun Arrays.Stack.arr () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun Arrays.Stack.trr () T@U)
(declare-fun Arrays.Stack.brr () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#11| (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun Arrays.MaybeInitialized.Uninitialized_q (T@U) Bool)
(declare-fun Arrays.MaybeInitialized.Initialized_q (T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |#Arrays.MaybeInitialized.Initialized| (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass.Arrays.Stack_0 (T@U) T@U)
(declare-fun Tclass.Arrays.MaybeInitialized_0 (T@U) T@U)
(declare-fun Arrays.MaybeInitialized.value (T@U) T@U)
(declare-fun Tclass.Arrays.Stack?_0 (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TagBool alloc allocName Tagclass._System.array? Tagclass._System.array Tagclass.Arrays.Stack Tagclass.Arrays.MaybeInitialized |##Arrays.MaybeInitialized.Uninitialized| |##Arrays.MaybeInitialized.Initialized| class.Arrays.Stack? Tagclass.Arrays.Stack? tytagFamily$array tytagFamily$Stack tytagFamily$MaybeInitialized field$arr field$trr field$brr)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TBool) TagBool))
(assert (= (DeclName alloc) allocName))
(assert (= (Ctor refType) 3))
(assert (forall ((_System.array$arg T@U) (|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg) $h) ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array _System.array$arg) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass._System.array? _System.array$arg) $h))
)))
(assert (forall ((Arrays.Stack$T T@U) (|c#0@@0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0@@0| (Tclass.Arrays.Stack Arrays.Stack$T) $h@@0) ($IsAlloc refType |c#0@@0| (Tclass.Arrays.Stack? Arrays.Stack$T) $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| (Tclass.Arrays.Stack Arrays.Stack$T) $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| (Tclass.Arrays.Stack? Arrays.Stack$T) $h@@0))
)))
(assert (= (DatatypeCtorId |#Arrays.MaybeInitialized.Uninitialized|) |##Arrays.MaybeInitialized.Uninitialized|))
(assert (= (Ctor DatatypeTypeType) 4))
(assert (forall ((Arrays.MaybeInitialized$T T@U) ($h@@1 T@U) ) (!  (=> ($IsGoodHeap $h@@1) ($IsAlloc DatatypeTypeType |#Arrays.MaybeInitialized.Uninitialized| (Tclass.Arrays.MaybeInitialized Arrays.MaybeInitialized$T) $h@@1))
 :pattern ( ($IsAlloc DatatypeTypeType |#Arrays.MaybeInitialized.Uninitialized| (Tclass.Arrays.MaybeInitialized Arrays.MaybeInitialized$T) $h@@1))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((_System.array$arg@@0 T@U) ($o T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o (Tclass._System.array? _System.array$arg@@0) $h@@2)  (or (= $o null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@2 $o) alloc)))))
 :pattern ( ($IsAlloc refType $o (Tclass._System.array? _System.array$arg@@0) $h@@2))
)))
(assert (forall ((Arrays.Stack$T@@0 T@U) ($o@@0 T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType $o@@0 (Tclass.Arrays.Stack? Arrays.Stack$T@@0) $h@@3)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 (Tclass.Arrays.Stack? Arrays.Stack$T@@0) $h@@3))
)))
(assert (= (FDim Arrays.Stack.arr) 0))
(assert (= (FieldOfDecl class.Arrays.Stack? field$arr) Arrays.Stack.arr))
(assert  (not ($IsGhostField Arrays.Stack.arr)))
(assert (= (FDim Arrays.Stack.trr) 0))
(assert (= (FieldOfDecl class.Arrays.Stack? field$trr) Arrays.Stack.trr))
(assert  (not ($IsGhostField Arrays.Stack.trr)))
(assert (= (FDim Arrays.Stack.brr) 0))
(assert (= (FieldOfDecl class.Arrays.Stack? field$brr) Arrays.Stack.brr))
(assert  (not ($IsGhostField Arrays.Stack.brr)))
(assert (forall ((Arrays.MaybeInitialized$T@@0 T@U) ) (! ($Is DatatypeTypeType |#Arrays.MaybeInitialized.Uninitialized| (Tclass.Arrays.MaybeInitialized Arrays.MaybeInitialized$T@@0))
 :pattern ( ($Is DatatypeTypeType |#Arrays.MaybeInitialized.Uninitialized| (Tclass.Arrays.MaybeInitialized Arrays.MaybeInitialized$T@@0)))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) (|l#4| T@U) (|l#5| T@U) (|l#6| T@U) ($o@@1 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#11| |l#0| |l#1| |l#2| |l#3| |l#4| |l#5| |l#6|) $o@@1 $f))  (=> (and (or (not (= $o@@1 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@1) |l#2|)))) (or (or (or (= $o@@1 |l#3|) (= $o@@1 |l#4|)) (= $o@@1 |l#5|)) (= $o@@1 |l#6|))))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#11| |l#0| |l#1| |l#2| |l#3| |l#4| |l#5| |l#6|) $o@@1 $f))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= (Lit T x@@2) x@@2)
 :pattern ( (Lit T x@@2))
)))
(assert (forall ((d T@U) ) (! (= (Arrays.MaybeInitialized.Uninitialized_q d) (= (DatatypeCtorId d) |##Arrays.MaybeInitialized.Uninitialized|))
 :pattern ( (Arrays.MaybeInitialized.Uninitialized_q d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (Arrays.MaybeInitialized.Initialized_q d@@0) (= (DatatypeCtorId d@@0) |##Arrays.MaybeInitialized.Initialized|))
 :pattern ( (Arrays.MaybeInitialized.Initialized_q d@@0))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@3)) x@@3)
 :pattern ( ($Unbox T@@0 x@@3))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (Arrays.MaybeInitialized.Uninitialized_q d@@1) (= d@@1 |#Arrays.MaybeInitialized.Uninitialized|))
 :pattern ( (Arrays.MaybeInitialized.Uninitialized_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (!  (=> (Arrays.MaybeInitialized.Initialized_q d@@2) (exists ((|a#5#0#0| T@U) ) (= d@@2 (|#Arrays.MaybeInitialized.Initialized| |a#5#0#0|))))
 :pattern ( (Arrays.MaybeInitialized.Initialized_q d@@2))
)))
(assert ($IsGhostField alloc))
(assert (forall ((_System.array$arg@@1 T@U) (|c#0@@1| T@U) ) (! (= ($Is refType |c#0@@1| (Tclass._System.array _System.array$arg@@1))  (and ($Is refType |c#0@@1| (Tclass._System.array? _System.array$arg@@1)) (or (not (= |c#0@@1| null)) (not true))))
 :pattern ( ($Is refType |c#0@@1| (Tclass._System.array _System.array$arg@@1)))
 :pattern ( ($Is refType |c#0@@1| (Tclass._System.array? _System.array$arg@@1)))
)))
(assert (forall ((Arrays.Stack$T@@1 T@U) (|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| (Tclass.Arrays.Stack Arrays.Stack$T@@1))  (and ($Is refType |c#0@@2| (Tclass.Arrays.Stack? Arrays.Stack$T@@1)) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| (Tclass.Arrays.Stack Arrays.Stack$T@@1)))
 :pattern ( ($Is refType |c#0@@2| (Tclass.Arrays.Stack? Arrays.Stack$T@@1)))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx t@@0 h@@1) ($IsAllocBox bx t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert (forall ((_System.array$arg@@2 T@U) ) (!  (and (= (Tag (Tclass._System.array? _System.array$arg@@2)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg@@2)) tytagFamily$array))
 :pattern ( (Tclass._System.array? _System.array$arg@@2))
)))
(assert (forall ((_System.array$arg@@3 T@U) ) (!  (and (= (Tag (Tclass._System.array _System.array$arg@@3)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@3)) tytagFamily$array))
 :pattern ( (Tclass._System.array _System.array$arg@@3))
)))
(assert (forall ((Arrays.Stack$T@@2 T@U) ) (!  (and (= (Tag (Tclass.Arrays.Stack Arrays.Stack$T@@2)) Tagclass.Arrays.Stack) (= (TagFamily (Tclass.Arrays.Stack Arrays.Stack$T@@2)) tytagFamily$Stack))
 :pattern ( (Tclass.Arrays.Stack Arrays.Stack$T@@2))
)))
(assert (forall ((Arrays.MaybeInitialized$T@@1 T@U) ) (!  (and (= (Tag (Tclass.Arrays.MaybeInitialized Arrays.MaybeInitialized$T@@1)) Tagclass.Arrays.MaybeInitialized) (= (TagFamily (Tclass.Arrays.MaybeInitialized Arrays.MaybeInitialized$T@@1)) tytagFamily$MaybeInitialized))
 :pattern ( (Tclass.Arrays.MaybeInitialized Arrays.MaybeInitialized$T@@1))
)))
(assert (forall ((Arrays.Stack$T@@3 T@U) ) (!  (and (= (Tag (Tclass.Arrays.Stack? Arrays.Stack$T@@3)) Tagclass.Arrays.Stack?) (= (TagFamily (Tclass.Arrays.Stack? Arrays.Stack$T@@3)) tytagFamily$Stack))
 :pattern ( (Tclass.Arrays.Stack? Arrays.Stack$T@@3))
)))
(assert (forall ((Arrays.Stack$T@@4 T@U) ($h@@4 T@U) ($o@@2 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@4) (and (or (not (= $o@@2 null)) (not true)) (= (dtype $o@@2) (Tclass.Arrays.Stack? Arrays.Stack$T@@4)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@2) alloc)))) ($IsAlloc refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@2) Arrays.Stack.trr)) (Tclass._System.array Arrays.Stack$T@@4) $h@@4))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@2) Arrays.Stack.trr)) (Tclass.Arrays.Stack? Arrays.Stack$T@@4))
)))
(assert (forall ((Arrays.Stack$T@@5 T@U) ($h@@5 T@U) ($o@@3 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@5) (and (or (not (= $o@@3 null)) (not true)) (= (dtype $o@@3) (Tclass.Arrays.Stack? Arrays.Stack$T@@5)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@3) alloc)))) ($IsAlloc refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@3) Arrays.Stack.brr)) (Tclass._System.array TBool) $h@@5))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@3) Arrays.Stack.brr)) (Tclass.Arrays.Stack? Arrays.Stack$T@@5))
)))
(assert (forall ((_System.array$arg@@4 T@U) ($o@@4 T@U) ) (! (= ($Is refType $o@@4 (Tclass._System.array? _System.array$arg@@4))  (or (= $o@@4 null) (= (dtype $o@@4) (Tclass._System.array? _System.array$arg@@4))))
 :pattern ( ($Is refType $o@@4 (Tclass._System.array? _System.array$arg@@4)))
)))
(assert (forall ((Arrays.Stack$T@@6 T@U) ($o@@5 T@U) ) (! (= ($Is refType $o@@5 (Tclass.Arrays.Stack? Arrays.Stack$T@@6))  (or (= $o@@5 null) (= (dtype $o@@5) (Tclass.Arrays.Stack? Arrays.Stack$T@@6))))
 :pattern ( ($Is refType $o@@5 (Tclass.Arrays.Stack? Arrays.Stack$T@@6)))
)))
(assert (forall ((Arrays.Stack$T@@7 T@U) ($h@@6 T@U) ($o@@6 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@6) (and (or (not (= $o@@6 null)) (not true)) (= (dtype $o@@6) (Tclass.Arrays.Stack? Arrays.Stack$T@@7)))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@6) alloc)))) ($IsAlloc refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@6) Arrays.Stack.arr)) (Tclass._System.array (Tclass.Arrays.MaybeInitialized Arrays.Stack$T@@7)) $h@@6))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@6) Arrays.Stack.arr)) (Tclass.Arrays.Stack? Arrays.Stack$T@@7))
)))
(assert (forall ((Arrays.MaybeInitialized$T@@2 T@U) (|a#6#0#0| T@U) ($h@@7 T@U) ) (!  (=> ($IsGoodHeap $h@@7) (= ($IsAlloc DatatypeTypeType (|#Arrays.MaybeInitialized.Initialized| |a#6#0#0|) (Tclass.Arrays.MaybeInitialized Arrays.MaybeInitialized$T@@2) $h@@7) ($IsAllocBox |a#6#0#0| Arrays.MaybeInitialized$T@@2 $h@@7)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#Arrays.MaybeInitialized.Initialized| |a#6#0#0|) (Tclass.Arrays.MaybeInitialized Arrays.MaybeInitialized$T@@2) $h@@7))
)))
(assert (forall ((Arrays.MaybeInitialized$T@@3 T@U) (d@@3 T@U) ) (!  (=> ($Is DatatypeTypeType d@@3 (Tclass.Arrays.MaybeInitialized Arrays.MaybeInitialized$T@@3)) (or (Arrays.MaybeInitialized.Uninitialized_q d@@3) (Arrays.MaybeInitialized.Initialized_q d@@3)))
 :pattern ( (Arrays.MaybeInitialized.Initialized_q d@@3) ($Is DatatypeTypeType d@@3 (Tclass.Arrays.MaybeInitialized Arrays.MaybeInitialized$T@@3)))
 :pattern ( (Arrays.MaybeInitialized.Uninitialized_q d@@3) ($Is DatatypeTypeType d@@3 (Tclass.Arrays.MaybeInitialized Arrays.MaybeInitialized$T@@3)))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 TBool) (and (= ($Box boolType ($Unbox boolType bx@@0)) bx@@0) ($Is boolType ($Unbox boolType bx@@0) TBool)))
 :pattern ( ($IsBox bx@@0 TBool))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@2) ($Is T@@3 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@2))
)))
(assert (forall ((_System.array$arg@@5 T@U) ) (! (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@5)) _System.array$arg@@5)
 :pattern ( (Tclass._System.array? _System.array$arg@@5))
)))
(assert (forall ((_System.array$arg@@6 T@U) ) (! (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@6)) _System.array$arg@@6)
 :pattern ( (Tclass._System.array _System.array$arg@@6))
)))
(assert (forall ((Arrays.Stack$T@@8 T@U) ) (! (= (Tclass.Arrays.Stack_0 (Tclass.Arrays.Stack Arrays.Stack$T@@8)) Arrays.Stack$T@@8)
 :pattern ( (Tclass.Arrays.Stack Arrays.Stack$T@@8))
)))
(assert (forall ((Arrays.MaybeInitialized$T@@4 T@U) ) (! (= (Tclass.Arrays.MaybeInitialized_0 (Tclass.Arrays.MaybeInitialized Arrays.MaybeInitialized$T@@4)) Arrays.MaybeInitialized$T@@4)
 :pattern ( (Tclass.Arrays.MaybeInitialized Arrays.MaybeInitialized$T@@4))
)))
(assert (forall ((|a#4#0#0| T@U) ) (! (= (DatatypeCtorId (|#Arrays.MaybeInitialized.Initialized| |a#4#0#0|)) |##Arrays.MaybeInitialized.Initialized|)
 :pattern ( (|#Arrays.MaybeInitialized.Initialized| |a#4#0#0|))
)))
(assert (forall ((|a#8#0#0| T@U) ) (! (= (Arrays.MaybeInitialized.value (|#Arrays.MaybeInitialized.Initialized| |a#8#0#0|)) |a#8#0#0|)
 :pattern ( (|#Arrays.MaybeInitialized.Initialized| |a#8#0#0|))
)))
(assert (forall ((Arrays.Stack$T@@9 T@U) ) (! (= (Tclass.Arrays.Stack?_0 (Tclass.Arrays.Stack? Arrays.Stack$T@@9)) Arrays.Stack$T@@9)
 :pattern ( (Tclass.Arrays.Stack? Arrays.Stack$T@@9))
)))
(assert (forall ((x@@4 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@4)) x@@4)
 :pattern ( ($Box T@@4 x@@4))
)))
(assert (forall ((Arrays.MaybeInitialized$T@@5 T@U) (|a#6#0#0@@0| T@U) ) (! (= ($Is DatatypeTypeType (|#Arrays.MaybeInitialized.Initialized| |a#6#0#0@@0|) (Tclass.Arrays.MaybeInitialized Arrays.MaybeInitialized$T@@5)) ($IsBox |a#6#0#0@@0| Arrays.MaybeInitialized$T@@5))
 :pattern ( ($Is DatatypeTypeType (|#Arrays.MaybeInitialized.Initialized| |a#6#0#0@@0|) (Tclass.Arrays.MaybeInitialized Arrays.MaybeInitialized$T@@5)))
)))
(assert (forall ((|a#9#0#0| T@U) ) (! (< (BoxRank |a#9#0#0|) (DtRank (|#Arrays.MaybeInitialized.Initialized| |a#9#0#0|)))
 :pattern ( (|#Arrays.MaybeInitialized.Initialized| |a#9#0#0|))
)))
(assert (forall ((d@@4 T@U) (Arrays.MaybeInitialized$T@@6 T@U) ($h@@8 T@U) ) (!  (=> (and ($IsGoodHeap $h@@8) (and (Arrays.MaybeInitialized.Initialized_q d@@4) ($IsAlloc DatatypeTypeType d@@4 (Tclass.Arrays.MaybeInitialized Arrays.MaybeInitialized$T@@6) $h@@8))) ($IsAllocBox (Arrays.MaybeInitialized.value d@@4) Arrays.MaybeInitialized$T@@6 $h@@8))
 :pattern ( ($IsAllocBox (Arrays.MaybeInitialized.value d@@4) Arrays.MaybeInitialized$T@@6 $h@@8))
)))
(assert (forall ((Arrays.Stack$T@@10 T@U) ($h@@9 T@U) ($o@@7 T@U) ) (!  (=> (and ($IsGoodHeap $h@@9) (and (or (not (= $o@@7 null)) (not true)) (= (dtype $o@@7) (Tclass.Arrays.Stack? Arrays.Stack$T@@10)))) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@7) Arrays.Stack.trr)) (Tclass._System.array Arrays.Stack$T@@10)))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@7) Arrays.Stack.trr)) (Tclass.Arrays.Stack? Arrays.Stack$T@@10))
)))
(assert (forall ((Arrays.Stack$T@@11 T@U) ($h@@10 T@U) ($o@@8 T@U) ) (!  (=> (and ($IsGoodHeap $h@@10) (and (or (not (= $o@@8 null)) (not true)) (= (dtype $o@@8) (Tclass.Arrays.Stack? Arrays.Stack$T@@11)))) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@8) Arrays.Stack.brr)) (Tclass._System.array TBool)))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@8) Arrays.Stack.brr)) (Tclass.Arrays.Stack? Arrays.Stack$T@@11))
)))
(assert (forall ((d@@5 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@5)) (DtRank d@@5))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@5)))
)))
(assert (forall ((_System.array$arg@@7 T@U) (bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 (Tclass._System.array? _System.array$arg@@7)) (and (= ($Box refType ($Unbox refType bx@@1)) bx@@1) ($Is refType ($Unbox refType bx@@1) (Tclass._System.array? _System.array$arg@@7))))
 :pattern ( ($IsBox bx@@1 (Tclass._System.array? _System.array$arg@@7)))
)))
(assert (forall ((_System.array$arg@@8 T@U) (bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 (Tclass._System.array _System.array$arg@@8)) (and (= ($Box refType ($Unbox refType bx@@2)) bx@@2) ($Is refType ($Unbox refType bx@@2) (Tclass._System.array _System.array$arg@@8))))
 :pattern ( ($IsBox bx@@2 (Tclass._System.array _System.array$arg@@8)))
)))
(assert (forall ((Arrays.Stack$T@@12 T@U) (bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 (Tclass.Arrays.Stack Arrays.Stack$T@@12)) (and (= ($Box refType ($Unbox refType bx@@3)) bx@@3) ($Is refType ($Unbox refType bx@@3) (Tclass.Arrays.Stack Arrays.Stack$T@@12))))
 :pattern ( ($IsBox bx@@3 (Tclass.Arrays.Stack Arrays.Stack$T@@12)))
)))
(assert (forall ((Arrays.MaybeInitialized$T@@7 T@U) (bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 (Tclass.Arrays.MaybeInitialized Arrays.MaybeInitialized$T@@7)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@4)) bx@@4) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@4) (Tclass.Arrays.MaybeInitialized Arrays.MaybeInitialized$T@@7))))
 :pattern ( ($IsBox bx@@4 (Tclass.Arrays.MaybeInitialized Arrays.MaybeInitialized$T@@7)))
)))
(assert (forall ((Arrays.Stack$T@@13 T@U) (bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 (Tclass.Arrays.Stack? Arrays.Stack$T@@13)) (and (= ($Box refType ($Unbox refType bx@@5)) bx@@5) ($Is refType ($Unbox refType bx@@5) (Tclass.Arrays.Stack? Arrays.Stack$T@@13))))
 :pattern ( ($IsBox bx@@5 (Tclass.Arrays.Stack? Arrays.Stack$T@@13)))
)))
(assert (forall ((h@@3 T@U) (r T@U) (f T@U) (x@@5 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@3 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) f x@@5))) ($HeapSucc h@@3 (MapType0Store refType (MapType0Type FieldType BoxType) h@@3 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) f x@@5))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@3 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) f x@@5)))
)))
(assert (= |#Arrays.MaybeInitialized.Uninitialized| (Lit DatatypeTypeType |#Arrays.MaybeInitialized.Uninitialized|)))
(assert (forall ((Arrays.Stack$T@@14 T@U) ($h@@11 T@U) ($o@@9 T@U) ) (!  (=> (and ($IsGoodHeap $h@@11) (and (or (not (= $o@@9 null)) (not true)) (= (dtype $o@@9) (Tclass.Arrays.Stack? Arrays.Stack$T@@14)))) ($Is refType ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@9) Arrays.Stack.arr)) (Tclass._System.array (Tclass.Arrays.MaybeInitialized Arrays.Stack$T@@14))))
 :pattern ( ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@9) Arrays.Stack.arr)) (Tclass.Arrays.Stack? Arrays.Stack$T@@14))
)))
(assert (forall ((|a#7#0#0| T@U) ) (! (= (|#Arrays.MaybeInitialized.Initialized| (Lit BoxType |a#7#0#0|)) (Lit DatatypeTypeType (|#Arrays.MaybeInitialized.Initialized| |a#7#0#0|)))
 :pattern ( (|#Arrays.MaybeInitialized.Initialized| (Lit BoxType |a#7#0#0|)))
)))
(assert (forall ((x@@6 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@6)) (Lit BoxType ($Box T@@5 x@@6)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@6)))
)))
(assert (forall ((h@@4 T@U) (v@@2 T@U) ) (! ($IsAlloc boolType v@@2 TBool h@@4)
 :pattern ( ($IsAlloc boolType v@@2 TBool h@@4))
)))
(assert (forall ((v@@3 T@U) ) (! ($Is boolType v@@3 TBool)
 :pattern ( ($Is boolType v@@3 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap () T@U)
(declare-fun this () T@U)
(declare-fun |a##0@0| () T@U)
(declare-fun |t##0@0| () T@U)
(declare-fun |t#0| () T@U)
(declare-fun |call4formal@r#0| () T@U)
(declare-fun call0formal@Arrays._default.Update$T () T@U)
(declare-fun call0formal@Arrays._default.Update$T@0 () T@U)
(declare-fun Arrays.Stack$T@@15 () T@U)
(declare-fun |call2formal@t#0@0| () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |call4formal@r#0@0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |a##1@0| () T@U)
(declare-fun |call4formal@r#0@@0| () T@U)
(declare-fun call0formal@Arrays._default.Update$T@@0 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |call4formal@r#0@0@@0| () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun |a##2@0| () T@U)
(declare-fun |t##2@0| () Bool)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#11| null $Heap alloc this ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) Arrays.Stack.arr)) ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) Arrays.Stack.trr)) ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) Arrays.Stack.brr)))) (and (=> (= (ControlFlow 0 2) (- 0 7)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this Arrays.Stack.arr))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this Arrays.Stack.arr)) (=> (and (= |a##0@0| ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap this) Arrays.Stack.arr))) (= |t##0@0| (|#Arrays.MaybeInitialized.Initialized| |t#0|))) (and (=> (= (ControlFlow 0 2) (- 0 6)) (forall (($o@@10 T@U) ($f@@0 T@U) )  (=> (and (and (or (not (= $o@@10 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@10) alloc)))) (= $o@@10 |a##0@0|)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@10 $f@@0))))) (=> (forall (($o@@11 T@U) ($f@@1 T@U) )  (=> (and (and (or (not (= $o@@11 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@11) alloc)))) (= $o@@11 |a##0@0|)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@11 $f@@1)))) (=> (and (and ($Is refType |call4formal@r#0| (Tclass._System.array call0formal@Arrays._default.Update$T)) ($IsAlloc refType |call4formal@r#0| (Tclass._System.array call0formal@Arrays._default.Update$T) $Heap)) (and (= call0formal@Arrays._default.Update$T@0 (Tclass.Arrays.MaybeInitialized Arrays.Stack$T@@15)) (= |call2formal@t#0@0| ($Box DatatypeTypeType |t##0@0|)))) (=> (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and ($Is refType |call4formal@r#0@0| (Tclass._System.array call0formal@Arrays._default.Update$T@0)) ($IsAlloc refType |call4formal@r#0@0| (Tclass._System.array call0formal@Arrays._default.Update$T@0) $Heap@0))) (and (and (forall (($o@@12 T@U) ) (!  (=> (and (or (not (= $o@@12 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@12) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@12) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@12)) (= $o@@12 |a##0@0|)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@12))
)) ($HeapSucc $Heap $Heap@0)) (and (= $Heap@1 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@0 this (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 this) Arrays.Stack.arr ($Box refType |call4formal@r#0@0|)))) ($IsGoodHeap $Heap@1)))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this Arrays.Stack.trr))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this Arrays.Stack.trr)) (=> (= |a##1@0| ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 this) Arrays.Stack.trr))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (forall (($o@@13 T@U) ($f@@2 T@U) )  (=> (and (and (or (not (= $o@@13 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@13) alloc)))) (= $o@@13 |a##1@0|)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@13 $f@@2))))) (=> (forall (($o@@14 T@U) ($f@@3 T@U) )  (=> (and (and (or (not (= $o@@14 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@14) alloc)))) (= $o@@14 |a##1@0|)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@14 $f@@3)))) (=> (and ($Is refType |call4formal@r#0@@0| (Tclass._System.array call0formal@Arrays._default.Update$T@@0)) ($IsAlloc refType |call4formal@r#0@@0| (Tclass._System.array call0formal@Arrays._default.Update$T@@0) $Heap)) (=> (and (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (and ($Is refType |call4formal@r#0@0@@0| (Tclass._System.array Arrays.Stack$T@@15)) ($IsAlloc refType |call4formal@r#0@0@@0| (Tclass._System.array Arrays.Stack$T@@15) $Heap@2))) (and (and (forall (($o@@15 T@U) ) (!  (=> (and (or (not (= $o@@15 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@15) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@15) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@15)) (= $o@@15 |a##1@0|)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@15))
)) ($HeapSucc $Heap@1 $Heap@2)) (and (= $Heap@3 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@2 this (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 this) Arrays.Stack.trr ($Box refType |call4formal@r#0@0@@0|)))) ($IsGoodHeap $Heap@3)))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this Arrays.Stack.brr))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 this Arrays.Stack.brr)) (=> (= |a##2@0| ($Unbox refType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 this) Arrays.Stack.brr))) (=> (and (= |t##2@0| (U_2_bool (Lit boolType (bool_2_U true)))) (= (ControlFlow 0 2) (- 0 1))) (forall (($o@@16 T@U) ($f@@4 T@U) )  (=> (and (and (or (not (= $o@@16 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@16) alloc)))) (= $o@@16 |a##2@0|)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@16 $f@@4)))))))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (or (not (= this null)) (not true)) (and ($Is refType this (Tclass.Arrays.Stack Arrays.Stack$T@@15)) ($IsAlloc refType this (Tclass.Arrays.Stack Arrays.Stack$T@@15) $Heap)))) (and (and ($IsBox |t#0| Arrays.Stack$T@@15) ($IsAllocBox |t#0| Arrays.Stack$T@@15 $Heap)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 8) 2)))) anon0_correct)))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
