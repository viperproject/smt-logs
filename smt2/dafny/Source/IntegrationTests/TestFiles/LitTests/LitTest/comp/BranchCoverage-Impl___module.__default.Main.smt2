(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun Tagclass._module.MyClass () T@U)
(declare-fun Tagclass._module.MyClass? () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$MyClass () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.__default.Fib (T@U Int) Int)
(declare-fun |_module.__default.Fib#canCall| (Int) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun _module.__default.Factorial (T@U Int) Int)
(declare-fun |_module.__default.Factorial#canCall| (Int) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.MyClass? () T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._module.MyClass () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun Mul (Int Int) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc Tagclass._System.nat Tagclass._module.MyClass Tagclass._module.MyClass? tytagFamily$nat tytagFamily$MyClass)
)
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly T@U) (|n#0| Int) ) (!  (=> (or (|_module.__default.Fib#canCall| |n#0|) (and (< 0 $FunctionContextHeight) (<= (LitInt 0) |n#0|))) (<= (LitInt 0) (_module.__default.Fib $ly |n#0|)))
 :pattern ( (_module.__default.Fib $ly |n#0|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@0 T@U) (|n#0@@0| Int) ) (!  (=> (or (|_module.__default.Factorial#canCall| |n#0@@0|) (and (< 0 $FunctionContextHeight) (<= (LitInt 0) |n#0@@0|))) (<= (LitInt 0) (_module.__default.Factorial $ly@@0 |n#0@@0|)))
 :pattern ( (_module.__default.Factorial $ly@@0 |n#0@@0|))
))))
(assert (= (Ctor refType) 3))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.MyClass?)  (or (= $o null) (= (dtype $o) Tclass._module.MyClass?)))
 :pattern ( ($Is refType $o Tclass._module.MyClass?))
)))
(assert (forall ((|c#0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._module.MyClass $h@@0) ($IsAlloc refType |c#0| Tclass._module.MyClass? $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.MyClass $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.MyClass? $h@@0))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($o@@0 T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType $o@@0 Tclass._module.MyClass? $h@@1)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@1 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 Tclass._module.MyClass? $h@@1))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@1 T@U) (|n#0@@1| Int) ) (!  (=> (or (|_module.__default.Fib#canCall| |n#0@@1|) (and (< 0 $FunctionContextHeight) (<= (LitInt 0) |n#0@@1|))) (and (=> (<= 2 |n#0@@1|) (=> (not (U_2_bool (Lit boolType (bool_2_U false)))) (and (|_module.__default.Fib#canCall| (- |n#0@@1| 2)) (|_module.__default.Fib#canCall| (- |n#0@@1| 1))))) (= (_module.__default.Fib ($LS $ly@@1) |n#0@@1|) (ite (< |n#0@@1| 2) |n#0@@1| (ite false 8 (+ (_module.__default.Fib $ly@@1 (- |n#0@@1| 2)) (_module.__default.Fib $ly@@1 (- |n#0@@1| 1))))))))
 :pattern ( (_module.__default.Fib ($LS $ly@@1) |n#0@@1|))
))))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@0|)))
 :pattern ( ($Is intType |x#0@@0| Tclass._System.nat))
)))
(assert (forall ((h@@0 T@U) (k@@0 T@U) (v T@U) (t T@U) (T@@1 T@T) ) (!  (=> ($HeapSucc h@@0 k@@0) (=> ($IsAlloc T@@1 v t h@@0) ($IsAlloc T@@1 v t k@@0)))
 :pattern ( ($HeapSucc h@@0 k@@0) ($IsAlloc T@@1 v t h@@0))
)))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass._module.MyClass)  (and ($Is refType |c#0@@0| Tclass._module.MyClass?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.MyClass))
 :pattern ( ($Is refType |c#0@@0| Tclass._module.MyClass?))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@2 T@U) (|n#0@@2| Int) ) (!  (=> (or (|_module.__default.Factorial#canCall| |n#0@@2|) (and (< 0 $FunctionContextHeight) (<= (LitInt 0) |n#0@@2|))) (and (=> (or (not (= |n#0@@2| (LitInt 0))) (not true)) (|_module.__default.Factorial#canCall| (- |n#0@@2| 1))) (= (_module.__default.Factorial ($LS $ly@@2) |n#0@@2|) (ite (= |n#0@@2| (LitInt 0)) 1 (Mul |n#0@@2| (_module.__default.Factorial $ly@@2 (- |n#0@@2| 1)))))))
 :pattern ( (_module.__default.Factorial ($LS $ly@@2) |n#0@@2|))
))))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((x@@5 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@5)) x@@5)
 :pattern ( ($Box T@@2 x@@5))
)))
(assert (forall (($ly@@3 T@U) (|n#0@@3| Int) ) (! (= (_module.__default.Fib ($LS $ly@@3) |n#0@@3|) (_module.__default.Fib $ly@@3 |n#0@@3|))
 :pattern ( (_module.__default.Fib ($LS $ly@@3) |n#0@@3|))
)))
(assert (forall (($ly@@4 T@U) (|n#0@@4| Int) ) (! (= (_module.__default.Factorial ($LS $ly@@4) |n#0@@4|) (_module.__default.Factorial $ly@@4 |n#0@@4|))
 :pattern ( (_module.__default.Factorial ($LS $ly@@4) |n#0@@4|))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@1 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@1 $f))  (=> (and (or (not (= $o@@1 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@1) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@1 $f))
)))
(assert (forall ((x@@6 Int) (y Int) ) (! (= (Mul x@@6 y) (* x@@6 y))
 :pattern ( (Mul x@@6 y))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (= (Tag Tclass._module.MyClass) Tagclass._module.MyClass))
(assert (= (TagFamily Tclass._module.MyClass) tytagFamily$MyClass))
(assert (= (Tag Tclass._module.MyClass?) Tagclass._module.MyClass?))
(assert (= (TagFamily Tclass._module.MyClass?) tytagFamily$MyClass))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@5 T@U) (|n#0@@5| Int) ) (!  (=> (or (|_module.__default.Fib#canCall| (LitInt |n#0@@5|)) (and (< 0 $FunctionContextHeight) (<= (LitInt 0) |n#0@@5|))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (< |n#0@@5| 2))))) (=> (not (U_2_bool (Lit boolType (bool_2_U false)))) (and (|_module.__default.Fib#canCall| (LitInt (- |n#0@@5| 2))) (|_module.__default.Fib#canCall| (LitInt (- |n#0@@5| 1)))))) (= (_module.__default.Fib ($LS $ly@@5) (LitInt |n#0@@5|)) (ite (< |n#0@@5| 2) |n#0@@5| (ite false 8 (+ (_module.__default.Fib ($LS $ly@@5) (LitInt (- |n#0@@5| 2))) (_module.__default.Fib ($LS $ly@@5) (LitInt (- |n#0@@5| 1)))))))))
 :weight 3
 :pattern ( (_module.__default.Fib ($LS $ly@@5) (LitInt |n#0@@5|)))
))))
(assert (forall ((x@@7 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@7))) (Lit BoxType ($Box intType (int_2_U x@@7))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@7))))
)))
(assert (forall ((x@@8 T@U) (T@@3 T@T) ) (! (= ($Box T@@3 (Lit T@@3 x@@8)) (Lit BoxType ($Box T@@3 x@@8)))
 :pattern ( ($Box T@@3 (Lit T@@3 x@@8)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($ly@@6 T@U) (|n#0@@6| Int) ) (!  (=> (or (|_module.__default.Factorial#canCall| (LitInt |n#0@@6|)) (and (< 0 $FunctionContextHeight) (<= (LitInt 0) |n#0@@6|))) (and (=> (or (not (= (LitInt |n#0@@6|) (LitInt 0))) (not true)) (|_module.__default.Factorial#canCall| (LitInt (- |n#0@@6| 1)))) (= (_module.__default.Factorial ($LS $ly@@6) (LitInt |n#0@@6|)) (ite (= (LitInt |n#0@@6|) (LitInt 0)) 1 (Mul (LitInt |n#0@@6|) (LitInt (_module.__default.Factorial ($LS $ly@@6) (LitInt (- |n#0@@6| 1)))))))))
 :weight 3
 :pattern ( (_module.__default.Factorial ($LS $ly@@6) (LitInt |n#0@@6|)))
))))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap () T@U)
(declare-fun call1formal@this () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun call1formal@this@0 () T@U)
(declare-fun call1formal@this@@0 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun call1formal@this@0@@0 () T@U)
(declare-fun call1formal@this@@1 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun call1formal@this@0@@1 () T@U)
(declare-fun |x##0@0| () Int)
(declare-fun $Heap@3 () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun |x##3@0| () Int)
(declare-fun $Heap@6 () T@U)
(declare-fun $Heap@7 () T@U)
(declare-fun $Heap@8 () T@U)
(declare-fun |x##6@0| () Int)
(declare-fun $Heap@9 () T@U)
(declare-fun |x##7@0| () Int)
(declare-fun $Heap@10 () T@U)
(declare-fun |x##8@0| () Int)
(declare-fun $Heap@11 () T@U)
(declare-fun |x##9@0| () Int)
(declare-fun $Heap@12 () T@U)
(declare-fun |x##10@0| () Int)
(declare-fun $Heap@13 () T@U)
(declare-fun |##n#0@0| () Int)
(declare-fun |y#0@0| () Int)
(declare-fun $LZ () T@U)
(declare-fun |##n#1@0| () Int)
(declare-fun |y#0@1| () Int)
(declare-fun |n##0@0| () Int)
(declare-fun |defass#mc#0| () Bool)
(declare-fun |mc#0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and (and (or (not (= call1formal@this null)) (not true)) (and ($Is refType call1formal@this Tclass._module.MyClass) ($IsAlloc refType call1formal@this Tclass._module.MyClass $Heap))) (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0))) (=> (and (and (and (and (and (and (and (or (not (= call1formal@this@0 null)) (not true)) (and ($Is refType call1formal@this@0 Tclass._module.MyClass) ($IsAlloc refType call1formal@this@0 Tclass._module.MyClass $Heap@0))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap call1formal@this@0) alloc))))) (and (forall (($o@@2 T@U) ) (!  (=> (and (or (not (= $o@@2 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@2) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@2) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@2)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@2))
)) ($HeapSucc $Heap $Heap@0))) (and (and (or (not (= call1formal@this@@0 null)) (not true)) (and ($Is refType call1formal@this@@0 Tclass._module.MyClass) ($IsAlloc refType call1formal@this@@0 Tclass._module.MyClass $Heap))) (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)))) (and (and (and (or (not (= call1formal@this@0@@0 null)) (not true)) (and ($Is refType call1formal@this@0@@0 Tclass._module.MyClass) ($IsAlloc refType call1formal@this@0@@0 Tclass._module.MyClass $Heap@1))) (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 call1formal@this@0@@0) alloc))))) (and (and (forall (($o@@3 T@U) ) (!  (=> (and (or (not (= $o@@3 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@3) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@3) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@3)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@3))
)) ($HeapSucc $Heap@0 $Heap@1)) (and (or (not (= call1formal@this@@1 null)) (not true)) (and ($Is refType call1formal@this@@1 Tclass._module.MyClass) ($IsAlloc refType call1formal@this@@1 Tclass._module.MyClass $Heap)))))) (and (and (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (and (or (not (= call1formal@this@0@@1 null)) (not true)) (and ($Is refType call1formal@this@0@@1 Tclass._module.MyClass) ($IsAlloc refType call1formal@this@0@@1 Tclass._module.MyClass $Heap@2)))) (and (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 call1formal@this@0@@1) alloc)))) (forall (($o@@4 T@U) ) (!  (=> (and (or (not (= $o@@4 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@4) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@4) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $o@@4)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@4))
))) (and ($HeapSucc $Heap@1 $Heap@2) (= |x##0@0| (LitInt 5))))) (and (and (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (and (forall (($o@@5 T@U) ) (!  (=> (and (or (not (= $o@@5 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@5) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@5) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@5)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@5))
)) ($HeapSucc $Heap@2 $Heap@3))) (and (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (and (forall (($o@@6 T@U) ) (!  (=> (and (or (not (= $o@@6 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@6) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@6) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@6)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@6))
)) ($HeapSucc $Heap@3 $Heap@4)))))) (and (and (and (and (and (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (forall (($o@@7 T@U) ) (!  (=> (and (or (not (= $o@@7 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@7) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@7) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@7)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@7))
))) (and ($HeapSucc $Heap@4 $Heap@5) (= |x##3@0| (LitInt 5)))) (and (and (and ($IsGoodHeap $Heap@6) ($IsHeapAnchor $Heap@6)) (and (forall (($o@@8 T@U) ) (!  (=> (and (or (not (= $o@@8 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@8) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@8) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@8)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@8))
)) ($HeapSucc $Heap@5 $Heap@6))) (and (and ($IsGoodHeap $Heap@7) ($IsHeapAnchor $Heap@7)) (and (forall (($o@@9 T@U) ) (!  (=> (and (or (not (= $o@@9 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@9) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@9) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@9)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@9))
)) ($HeapSucc $Heap@6 $Heap@7))))) (and (and (and (and ($IsGoodHeap $Heap@8) ($IsHeapAnchor $Heap@8)) (forall (($o@@10 T@U) ) (!  (=> (and (or (not (= $o@@10 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@10) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 $o@@10) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@10)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 $o@@10))
))) (and ($HeapSucc $Heap@7 $Heap@8) (= |x##6@0| (LitInt 5)))) (and (and (and ($IsGoodHeap $Heap@9) ($IsHeapAnchor $Heap@9)) (forall (($o@@11 T@U) ) (!  (=> (and (or (not (= $o@@11 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 $o@@11) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 $o@@11) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 $o@@11)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 $o@@11))
))) (and ($HeapSucc $Heap@8 $Heap@9) (= |x##7@0| (LitInt 50)))))) (and (and (and (and (and ($IsGoodHeap $Heap@10) ($IsHeapAnchor $Heap@10)) (forall (($o@@12 T@U) ) (!  (=> (and (or (not (= $o@@12 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 $o@@12) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@10 $o@@12) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 $o@@12)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@10 $o@@12))
))) (and ($HeapSucc $Heap@9 $Heap@10) (= |x##8@0| (LitInt 101)))) (and (and (and ($IsGoodHeap $Heap@11) ($IsHeapAnchor $Heap@11)) (forall (($o@@13 T@U) ) (!  (=> (and (or (not (= $o@@13 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@10 $o@@13) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 $o@@13) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@10 $o@@13)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 $o@@13))
))) (and ($HeapSucc $Heap@10 $Heap@11) (= |x##9@0| (LitInt 1010))))) (and (and (and (and ($IsGoodHeap $Heap@12) ($IsHeapAnchor $Heap@12)) (forall (($o@@14 T@U) ) (!  (=> (and (or (not (= $o@@14 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 $o@@14) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@12 $o@@14) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 $o@@14)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@12 $o@@14))
))) (and ($HeapSucc $Heap@11 $Heap@12) (= |x##10@0| (LitInt 111)))) (and (and ($IsGoodHeap $Heap@13) ($IsHeapAnchor $Heap@13)) (and (forall (($o@@15 T@U) ) (!  (=> (and (or (not (= $o@@15 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@12 $o@@15) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@13 $o@@15) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@12 $o@@15)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@13 $o@@15))
)) ($HeapSucc $Heap@12 $Heap@13))))))) (and (=> (= (ControlFlow 0 2) (- 0 5)) ($Is intType (int_2_U (LitInt 12)) Tclass._System.nat)) (=> ($Is intType (int_2_U (LitInt 12)) Tclass._System.nat) (=> (= |##n#0@0| (LitInt 12)) (=> (and (and ($IsAlloc intType (int_2_U |##n#0@0|) Tclass._System.nat $Heap@13) (|_module.__default.Fib#canCall| (LitInt 12))) (and (|_module.__default.Fib#canCall| (LitInt 12)) (= |y#0@0| (LitInt (_module.__default.Fib ($LS $LZ) (LitInt 12)))))) (and (=> (= (ControlFlow 0 2) (- 0 4)) ($Is intType (int_2_U (LitInt 10)) Tclass._System.nat)) (=> ($Is intType (int_2_U (LitInt 10)) Tclass._System.nat) (=> (= |##n#1@0| (LitInt 10)) (=> (and (and ($IsAlloc intType (int_2_U |##n#1@0|) Tclass._System.nat $Heap@13) (|_module.__default.Factorial#canCall| (LitInt 10))) (and (|_module.__default.Factorial#canCall| (LitInt 10)) (= |y#0@1| (LitInt (_module.__default.Factorial ($LS $LZ) (LitInt 10)))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) ($Is intType (int_2_U (LitInt 10)) Tclass._System.nat)) (=> ($Is intType (int_2_U (LitInt 10)) Tclass._System.nat) (=> (and (= |n##0@0| (LitInt 10)) (= (ControlFlow 0 2) (- 0 1))) ($Is intType (int_2_U (LitInt 1)) Tclass._System.nat)))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (=> |defass#mc#0| (and ($Is refType |mc#0| Tclass._module.MyClass) ($IsAlloc refType |mc#0| Tclass._module.MyClass $Heap))) true) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 6) 2))) anon0_correct))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
