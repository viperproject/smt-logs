(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 (T@T) Int)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 () T@T)
(declare-fun $generated@@10 (Bool) T@U)
(declare-fun $generated@@11 (T@U) Bool)
(declare-fun $generated@@12 (Int) T@U)
(declare-fun $generated@@13 (T@U) Int)
(declare-fun $generated@@14 (Real) T@U)
(declare-fun $generated@@15 (T@U) Real)
(declare-fun $generated@@22 (T@U T@U) T@U)
(declare-fun $generated@@23 (T@U T@U) Bool)
(declare-fun $generated@@32 (T@U) Bool)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@34 () T@U)
(declare-fun $generated@@36 (T@T T@U T@U) Bool)
(declare-fun $generated@@37 () T@T)
(declare-fun $generated@@38 () T@U)
(declare-fun $generated@@39 (T@U) T@U)
(declare-fun $generated@@41 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@42 () T@U)
(declare-fun $generated@@43 () T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@49 (T@T T@U) T@U)
(declare-fun $generated@@50 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@51 () T@T)
(declare-fun $generated@@52 () T@T)
(declare-fun $generated@@53 (T@T T@T) T@T)
(declare-fun $generated@@54 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@55 (T@T) T@T)
(declare-fun $generated@@56 (T@T) T@T)
(declare-fun $generated@@78 (T@U T@U) Bool)
(declare-fun $generated@@82 (T@T T@U) T@U)
(declare-fun $generated@@85 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@86 (T@U T@U T@U T@U) T@U)
(declare-fun $generated@@87 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@126 (T@U) T@U)
(declare-fun $generated@@127 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@6 $generated@@7) 0) (= ($generated@@6 $generated@@8) 1)) (= ($generated@@6 $generated@@9) 2)) (forall (($generated@@16 Bool) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 Int) ) (! (= ($generated@@13 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 T@U) ) (! (= ($generated@@12 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 Real) ) (! (= ($generated@@15 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 T@U) ) (! (= ($generated@@14 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5)
)
(assert (forall (($generated@@24 T@U) ($generated@@25 T@U) ) (! ($generated@@23 ($generated@@22 $generated@@24 $generated@@25) $generated@@25)
 :pattern ( ($generated@@22 $generated@@24 $generated@@25))
)))
(assert (forall (($generated@@26 T@U) ($generated@@27 T@U) ($generated@@28 T@U) ) (!  (=> ($generated@@23 $generated@@26 $generated@@28) ($generated@@23 ($generated@@22 $generated@@26 $generated@@27) $generated@@28))
 :pattern ( ($generated@@22 $generated@@26 $generated@@27) ($generated@@23 $generated@@26 $generated@@28))
)))
(assert (forall (($generated@@29 T@U) ($generated@@30 T@U) ($generated@@31 T@U) ) (! (= ($generated@@23 ($generated@@22 $generated@@29 $generated@@30) $generated@@31)  (or (= $generated@@31 $generated@@30) ($generated@@23 $generated@@29 $generated@@31)))
 :pattern ( ($generated@@23 ($generated@@22 $generated@@29 $generated@@30) $generated@@31))
)))
(assert ($generated@@32 $generated@@33))
(assert (forall (($generated@@35 T@U) ) (!  (not ($generated@@23 $generated@@34 $generated@@35))
 :pattern ( ($generated@@23 $generated@@34 $generated@@35))
)))
(assert (= ($generated@@6 $generated@@37) 3))
(assert (forall (($generated@@40 T@U) ) (! (= ($generated@@36 $generated@@37 $generated@@40 $generated@@33)  (or (= $generated@@40 $generated@@38) (= ($generated@@39 $generated@@40) $generated@@33)))
 :pattern ( ($generated@@36 $generated@@37 $generated@@40 $generated@@33))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@U) ) (! (= ($generated@@41 $generated@@37 $generated@@44 $generated@@42 $generated@@45) ($generated@@41 $generated@@37 $generated@@44 $generated@@43 $generated@@45))
 :pattern ( ($generated@@41 $generated@@37 $generated@@44 $generated@@42 $generated@@45))
 :pattern ( ($generated@@41 $generated@@37 $generated@@44 $generated@@43 $generated@@45))
)))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@U) ) (! (= ($generated@@41 $generated@@37 $generated@@47 $generated@@46 $generated@@48) ($generated@@41 $generated@@37 $generated@@47 $generated@@33 $generated@@48))
 :pattern ( ($generated@@41 $generated@@37 $generated@@47 $generated@@46 $generated@@48))
 :pattern ( ($generated@@41 $generated@@37 $generated@@47 $generated@@33 $generated@@48))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@57 T@T) ($generated@@58 T@T) ($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ) (! (= ($generated@@50 $generated@@57 $generated@@58 ($generated@@54 $generated@@57 $generated@@58 $generated@@60 $generated@@61 $generated@@59) $generated@@61) $generated@@59)
 :weight 0
)) (forall (($generated@@62 T@T) ($generated@@63 T@T) ($generated@@64 T@U) ($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ) (!  (or (= $generated@@66 $generated@@67) (= ($generated@@50 $generated@@62 $generated@@63 ($generated@@54 $generated@@62 $generated@@63 $generated@@65 $generated@@66 $generated@@64) $generated@@67) ($generated@@50 $generated@@62 $generated@@63 $generated@@65 $generated@@67)))
 :weight 0
))) (= ($generated@@6 $generated@@51) 4)) (= ($generated@@6 $generated@@52) 5)) (forall (($generated@@68 T@T) ($generated@@69 T@T) ) (= ($generated@@6 ($generated@@53 $generated@@68 $generated@@69)) 6))) (forall (($generated@@70 T@T) ($generated@@71 T@T) ) (! (= ($generated@@55 ($generated@@53 $generated@@70 $generated@@71)) $generated@@70)
 :pattern ( ($generated@@53 $generated@@70 $generated@@71))
))) (forall (($generated@@72 T@T) ($generated@@73 T@T) ) (! (= ($generated@@56 ($generated@@53 $generated@@72 $generated@@73)) $generated@@73)
 :pattern ( ($generated@@53 $generated@@72 $generated@@73))
))))
(assert (forall (($generated@@74 T@U) ($generated@@75 T@U) ) (! (= ($generated@@41 $generated@@37 $generated@@74 $generated@@43 $generated@@75)  (or (= $generated@@74 $generated@@38) ($generated@@11 ($generated@@49 $generated@@7 ($generated@@50 $generated@@51 $generated@@52 ($generated@@50 $generated@@37 ($generated@@53 $generated@@51 $generated@@52) $generated@@75 $generated@@74) $generated)))))
 :pattern ( ($generated@@41 $generated@@37 $generated@@74 $generated@@43 $generated@@75))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@41 $generated@@37 $generated@@76 $generated@@33 $generated@@77)  (or (= $generated@@76 $generated@@38) ($generated@@11 ($generated@@49 $generated@@7 ($generated@@50 $generated@@51 $generated@@52 ($generated@@50 $generated@@37 ($generated@@53 $generated@@51 $generated@@52) $generated@@77 $generated@@76) $generated)))))
 :pattern ( ($generated@@41 $generated@@37 $generated@@76 $generated@@33 $generated@@77))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ) (! (= ($generated@@78 $generated@@79 $generated@@80) (forall (($generated@@81 T@U) ) (!  (=> ($generated@@23 $generated@@79 $generated@@81) ($generated@@23 $generated@@80 $generated@@81))
 :pattern ( ($generated@@23 $generated@@79 $generated@@81))
 :pattern ( ($generated@@23 $generated@@80 $generated@@81))
)))
 :pattern ( ($generated@@78 $generated@@79 $generated@@80))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@T) ) (! (= ($generated@@82 $generated@@84 ($generated@@49 $generated@@84 $generated@@83)) $generated@@83)
 :pattern ( ($generated@@49 $generated@@84 $generated@@83))
)))
(assert  (and (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (! (= ($generated@@85 $generated@@88 $generated@@89 $generated@@90 ($generated@@87 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@94 $generated@@91) $generated@@93 $generated@@94) $generated@@91)
 :weight 0
)) (and (forall (($generated@@95 T@T) ($generated@@96 T@T) ($generated@@97 T@T) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (!  (or (= $generated@@100 $generated@@102) (= ($generated@@85 $generated@@95 $generated@@96 $generated@@97 ($generated@@87 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@100 $generated@@101 $generated@@98) $generated@@102 $generated@@103) ($generated@@85 $generated@@95 $generated@@96 $generated@@97 $generated@@99 $generated@@102 $generated@@103)))
 :weight 0
)) (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or (= $generated@@110 $generated@@112) (= ($generated@@85 $generated@@104 $generated@@105 $generated@@106 ($generated@@87 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@111 $generated@@112) ($generated@@85 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@111 $generated@@112)))
 :weight 0
)))))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ) (! (= ($generated@@11 ($generated@@85 $generated@@37 $generated@@51 $generated@@7 ($generated@@86 $generated@@113 $generated@@114 $generated@@115 $generated@@116) $generated@@117 $generated@@118))  (=> (and (or (not (= $generated@@117 $generated@@113)) (not true)) ($generated@@11 ($generated@@49 $generated@@7 ($generated@@50 $generated@@51 $generated@@52 ($generated@@50 $generated@@37 ($generated@@53 $generated@@51 $generated@@52) $generated@@114 $generated@@117) $generated@@115)))) (= $generated@@117 $generated@@116)))
 :pattern ( ($generated@@85 $generated@@37 $generated@@51 $generated@@7 ($generated@@86 $generated@@113 $generated@@114 $generated@@115 $generated@@116) $generated@@117 $generated@@118))
)))
(assert (forall (($generated@@119 T@U) ) (! (= ($generated@@36 $generated@@37 $generated@@119 $generated@@42)  (and ($generated@@36 $generated@@37 $generated@@119 $generated@@43) (or (not (= $generated@@119 $generated@@38)) (not true))))
 :pattern ( ($generated@@36 $generated@@37 $generated@@119 $generated@@42))
 :pattern ( ($generated@@36 $generated@@37 $generated@@119 $generated@@43))
)))
(assert (forall (($generated@@120 T@U) ) (! (= ($generated@@36 $generated@@37 $generated@@120 $generated@@46)  (and ($generated@@36 $generated@@37 $generated@@120 $generated@@33) (or (not (= $generated@@120 $generated@@38)) (not true))))
 :pattern ( ($generated@@36 $generated@@37 $generated@@120 $generated@@46))
 :pattern ( ($generated@@36 $generated@@37 $generated@@120 $generated@@33))
)))
(assert (forall (($generated@@121 T@U) ($generated@@122 T@U) ) (!  (=> ($generated@@41 $generated@@37 $generated@@121 $generated@@33 $generated@@122) ($generated@@41 $generated@@37 $generated@@121 $generated@@43 $generated@@122))
 :pattern ( ($generated@@41 $generated@@37 $generated@@121 $generated@@33 $generated@@122))
)))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@T) ) (! (= ($generated@@49 $generated@@124 ($generated@@82 $generated@@124 $generated@@123)) $generated@@123)
 :pattern ( ($generated@@82 $generated@@124 $generated@@123))
)))
(assert (forall (($generated@@125 T@U) ) (!  (=> ($generated@@36 $generated@@37 $generated@@125 $generated@@33) ($generated@@36 $generated@@37 $generated@@125 $generated@@43))
 :pattern ( ($generated@@36 $generated@@37 $generated@@125 $generated@@33))
)))
(assert (= ($generated@@126 $generated@@43) $generated@@0))
(assert (= ($generated@@127 $generated@@43) $generated@@4))
(assert (= ($generated@@126 $generated@@42) $generated@@1))
(assert (= ($generated@@127 $generated@@42) $generated@@4))
(assert (= ($generated@@126 $generated@@46) $generated@@2))
(assert (= ($generated@@127 $generated@@46) $generated@@5))
(assert (= ($generated@@126 $generated@@33) $generated@@3))
(assert (= ($generated@@127 $generated@@33) $generated@@5))
(assert (forall (($generated@@128 T@U) ) (! (= ($generated@@36 $generated@@37 $generated@@128 $generated@@43)  (or (= $generated@@128 $generated@@38) ($generated@@32 ($generated@@39 $generated@@128))))
 :pattern ( ($generated@@36 $generated@@37 $generated@@128 $generated@@43))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@129 () T@U)
(declare-fun $generated@@130 () T@U)
(declare-fun $generated@@131 () T@U)
(declare-fun $generated@@132 (T@U) Bool)
(declare-fun $generated@@133 (T@U) Bool)
(declare-fun $generated@@134 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@135  (and (=> (= (ControlFlow 0 2) (- 0 3)) ($generated@@78 ($generated@@22 $generated@@34 ($generated@@82 $generated@@37 $generated@@129)) ($generated@@22 $generated@@34 ($generated@@82 $generated@@37 $generated@@129)))) (=> ($generated@@78 ($generated@@22 $generated@@34 ($generated@@82 $generated@@37 $generated@@129)) ($generated@@22 $generated@@34 ($generated@@82 $generated@@37 $generated@@129))) (=> (and (= $generated@@130 ($generated@@86 $generated@@38 $generated@@131 $generated $generated@@129)) (= (ControlFlow 0 2) (- 0 1))) (forall (($generated@@136 T@U) ($generated@@137 T@U) )  (=> (and (and (or (not (= $generated@@136 $generated@@38)) (not true)) ($generated@@11 ($generated@@49 $generated@@7 ($generated@@50 $generated@@51 $generated@@52 ($generated@@50 $generated@@37 ($generated@@53 $generated@@51 $generated@@52) $generated@@131 $generated@@136) $generated)))) (= $generated@@136 $generated@@129)) (= $generated@@136 $generated@@129))))))))
(let (($generated@@138  (=> (and ($generated@@132 $generated@@131) ($generated@@133 $generated@@131)) (=> (and (and (or (not (= $generated@@129 $generated@@38)) (not true)) (and ($generated@@36 $generated@@37 $generated@@129 $generated@@46) ($generated@@41 $generated@@37 $generated@@129 $generated@@46 $generated@@131))) (and (= 0 $generated@@134) (= (ControlFlow 0 4) 2))) $generated@@135))))
$generated@@138)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
