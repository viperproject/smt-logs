(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass._module.MyClass () T@U)
(declare-fun Tagclass._module.MyTrait () T@U)
(declare-fun Tagclass._module.MyTraitInstance () T@U)
(declare-fun Tagclass._module.MyClass? () T@U)
(declare-fun Tagclass._module.MyTrait? () T@U)
(declare-fun class._module.MyClass? () T@U)
(declare-fun class._module.MyTrait? () T@U)
(declare-fun Tagclass._module.MyTraitInstance? () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$MyClass () T@U)
(declare-fun tytagFamily$MyTrait () T@U)
(declare-fun tytagFamily$MyTraitInstance () T@U)
(declare-fun field$a () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun implements$_module.MyTrait (T@U) Bool)
(declare-fun Tclass._module.MyTraitInstance? () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass._module.MyClass? () T@U)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun _module.MyTrait.a () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Tclass._module.MyTrait? () T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Tclass._System.object? () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._module.MyClass () T@U)
(declare-fun Tclass._module.MyTrait () T@U)
(declare-fun Tclass._module.MyTraitInstance () T@U)
(declare-fun _module.MyClass.a () T@U)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt alloc allocName Tagclass._System.object? Tagclass._System.object Tagclass._module.MyClass Tagclass._module.MyTrait Tagclass._module.MyTraitInstance Tagclass._module.MyClass? Tagclass._module.MyTrait? class._module.MyClass? class._module.MyTrait? Tagclass._module.MyTraitInstance? tytagFamily$object tytagFamily$MyClass tytagFamily$MyTrait tytagFamily$MyTraitInstance field$a)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert (implements$_module.MyTrait Tclass._module.MyTraitInstance?))
(assert (= (Ctor refType) 3))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.MyClass?)  (or (= $o null) (= (dtype $o) Tclass._module.MyClass?)))
 :pattern ( ($Is refType $o Tclass._module.MyClass?))
)))
(assert (forall (($o@@0 T@U) ) (! (= ($Is refType $o@@0 Tclass._module.MyTraitInstance?)  (or (= $o@@0 null) (= (dtype $o@@0) Tclass._module.MyTraitInstance?)))
 :pattern ( ($Is refType $o@@0 Tclass._module.MyTraitInstance?))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($h T@U) ($o@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h) (and (or (not (= $o@@1 null)) (not true)) ($Is refType $o@@1 Tclass._module.MyTrait?))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o@@1) _module.MyTrait.a)) TInt))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o@@1) _module.MyTrait.a)))
)))
(assert (forall ((bx T@U) ($h@@0 T@U) ) (!  (=> (and ($IsAllocBox bx Tclass._module.MyTrait? $h@@0) ($IsGoodHeap $h@@0)) ($IsAllocBox bx Tclass._System.object? $h@@0))
 :pattern ( ($IsAllocBox bx Tclass._module.MyTrait? $h@@0))
)))
(assert (forall ((bx@@0 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsAllocBox bx@@0 Tclass._module.MyTraitInstance? $h@@1) ($IsGoodHeap $h@@1)) ($IsAllocBox bx@@0 Tclass._module.MyTrait? $h@@1))
 :pattern ( ($IsAllocBox bx@@0 Tclass._module.MyTraitInstance? $h@@1))
)))
(assert (forall ((|c#0| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._System.object $h@@2) ($IsAlloc refType |c#0| Tclass._System.object? $h@@2))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object $h@@2))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object? $h@@2))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._module.MyClass $h@@3) ($IsAlloc refType |c#0@@0| Tclass._module.MyClass? $h@@3))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.MyClass $h@@3))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.MyClass? $h@@3))
)))
(assert (forall ((|c#0@@1| T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType |c#0@@1| Tclass._module.MyTrait $h@@4) ($IsAlloc refType |c#0@@1| Tclass._module.MyTrait? $h@@4))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass._module.MyTrait $h@@4))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass._module.MyTrait? $h@@4))
)))
(assert (forall ((|c#0@@2| T@U) ($h@@5 T@U) ) (! (= ($IsAlloc refType |c#0@@2| Tclass._module.MyTraitInstance $h@@5) ($IsAlloc refType |c#0@@2| Tclass._module.MyTraitInstance? $h@@5))
 :pattern ( ($IsAlloc refType |c#0@@2| Tclass._module.MyTraitInstance $h@@5))
 :pattern ( ($IsAlloc refType |c#0@@2| Tclass._module.MyTraitInstance? $h@@5))
)))
(assert (= (FDim _module.MyClass.a) 0))
(assert (= (FieldOfDecl class._module.MyClass? field$a) _module.MyClass.a))
(assert  (not ($IsGhostField _module.MyClass.a)))
(assert (= (FDim _module.MyTrait.a) 0))
(assert (= (FieldOfDecl class._module.MyTrait? field$a) _module.MyTrait.a))
(assert  (not ($IsGhostField _module.MyTrait.a)))
(assert (forall (($o@@2 T@U) ($h@@6 T@U) ) (! (= ($IsAlloc refType $o@@2 Tclass._System.object? $h@@6)  (or (= $o@@2 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@2) alloc)))))
 :pattern ( ($IsAlloc refType $o@@2 Tclass._System.object? $h@@6))
)))
(assert (forall (($o@@3 T@U) ($h@@7 T@U) ) (! (= ($IsAlloc refType $o@@3 Tclass._module.MyClass? $h@@7)  (or (= $o@@3 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@3) alloc)))))
 :pattern ( ($IsAlloc refType $o@@3 Tclass._module.MyClass? $h@@7))
)))
(assert (forall (($o@@4 T@U) ($h@@8 T@U) ) (! (= ($IsAlloc refType $o@@4 Tclass._module.MyTrait? $h@@8)  (or (= $o@@4 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@8 $o@@4) alloc)))))
 :pattern ( ($IsAlloc refType $o@@4 Tclass._module.MyTrait? $h@@8))
)))
(assert (forall (($o@@5 T@U) ($h@@9 T@U) ) (! (= ($IsAlloc refType $o@@5 Tclass._module.MyTraitInstance? $h@@9)  (or (= $o@@5 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@5) alloc)))))
 :pattern ( ($IsAlloc refType $o@@5 Tclass._module.MyTraitInstance? $h@@9))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= ($Box T ($Unbox T x@@2)) x@@2)
 :pattern ( ($Unbox T x@@2))
)))
(assert ($IsGhostField alloc))
(assert (forall (($h@@10 T@U) ($o@@6 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@10) (and (or (not (= $o@@6 null)) (not true)) (= (dtype $o@@6) Tclass._module.MyClass?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@6) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@6) _module.MyClass.a)) TInt $h@@10))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@10 $o@@6) _module.MyClass.a)))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@0 T@T) ) (! (= ($IsAllocBox ($Box T@@0 v) t h@@0) ($IsAlloc T@@0 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@0 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@1 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@1 t@@0 h@@1) ($IsAllocBox bx@@1 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@1 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@1 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@1 v@@0 t@@1 h@@2) ($IsAlloc T@@1 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@1 v@@0 t@@1 h@@2))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) (|l#4| T@U) (|l#5| T@U) ($o@@7 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3| |l#4| |l#5|) $o@@7 $f))  (=> (and (or (not (= $o@@7 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@7) |l#2|)))) (or (or (= $o@@7 |l#3|) (= $o@@7 |l#4|)) (= $o@@7 |l#5|))))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3| |l#4| |l#5|) $o@@7 $f))
)))
(assert (forall ((|c#0@@3| T@U) ) (! (= ($Is refType |c#0@@3| Tclass._System.object)  (and ($Is refType |c#0@@3| Tclass._System.object?) (or (not (= |c#0@@3| null)) (not true))))
 :pattern ( ($Is refType |c#0@@3| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@3| Tclass._System.object?))
)))
(assert (forall ((|c#0@@4| T@U) ) (! (= ($Is refType |c#0@@4| Tclass._module.MyClass)  (and ($Is refType |c#0@@4| Tclass._module.MyClass?) (or (not (= |c#0@@4| null)) (not true))))
 :pattern ( ($Is refType |c#0@@4| Tclass._module.MyClass))
 :pattern ( ($Is refType |c#0@@4| Tclass._module.MyClass?))
)))
(assert (forall ((|c#0@@5| T@U) ) (! (= ($Is refType |c#0@@5| Tclass._module.MyTrait)  (and ($Is refType |c#0@@5| Tclass._module.MyTrait?) (or (not (= |c#0@@5| null)) (not true))))
 :pattern ( ($Is refType |c#0@@5| Tclass._module.MyTrait))
 :pattern ( ($Is refType |c#0@@5| Tclass._module.MyTrait?))
)))
(assert (forall ((|c#0@@6| T@U) ) (! (= ($Is refType |c#0@@6| Tclass._module.MyTraitInstance)  (and ($Is refType |c#0@@6| Tclass._module.MyTraitInstance?) (or (not (= |c#0@@6| null)) (not true))))
 :pattern ( ($Is refType |c#0@@6| Tclass._module.MyTraitInstance))
 :pattern ( ($Is refType |c#0@@6| Tclass._module.MyTraitInstance?))
)))
(assert (forall (($o@@8 T@U) ($heap T@U) ) (!  (=> ($IsAlloc refType $o@@8 Tclass._module.MyTrait? $heap) ($IsAlloc refType $o@@8 Tclass._System.object? $heap))
 :pattern ( ($IsAlloc refType $o@@8 Tclass._module.MyTrait? $heap))
)))
(assert (forall (($o@@9 T@U) ($heap@@0 T@U) ) (!  (=> ($IsAlloc refType $o@@9 Tclass._module.MyTraitInstance? $heap@@0) ($IsAlloc refType $o@@9 Tclass._module.MyTrait? $heap@@0))
 :pattern ( ($IsAlloc refType $o@@9 Tclass._module.MyTraitInstance? $heap@@0))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall (($o@@10 T@U) ) (! ($Is refType $o@@10 Tclass._System.object?)
 :pattern ( ($Is refType $o@@10 Tclass._System.object?))
)))
(assert (forall (($h@@11 T@U) ($o@@11 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@11) (and (or (not (= $o@@11 null)) (not true)) ($Is refType $o@@11 Tclass._module.MyTrait?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@11) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@11) _module.MyTrait.a)) TInt $h@@11))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@11 $o@@11) _module.MyTrait.a)))
)))
(assert (forall ((x@@3 T@U) (T@@2 T@T) ) (! (= ($Unbox T@@2 ($Box T@@2 x@@3)) x@@3)
 :pattern ( ($Box T@@2 x@@3))
)))
(assert (forall (($h@@12 T@U) ($o@@12 T@U) ) (!  (=> (and ($IsGoodHeap $h@@12) (and (or (not (= $o@@12 null)) (not true)) (= (dtype $o@@12) Tclass._module.MyClass?))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@12) _module.MyClass.a)) TInt))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@12 $o@@12) _module.MyClass.a)))
)))
(assert (forall (($o@@13 T@U) ) (!  (=> ($Is refType $o@@13 Tclass._module.MyTrait?) ($Is refType $o@@13 Tclass._System.object?))
 :pattern ( ($Is refType $o@@13 Tclass._module.MyTrait?))
)))
(assert (forall (($o@@14 T@U) ) (!  (=> ($Is refType $o@@14 Tclass._module.MyTraitInstance?) ($Is refType $o@@14 Tclass._module.MyTrait?))
 :pattern ( ($Is refType $o@@14 Tclass._module.MyTraitInstance?))
)))
(assert (forall ((h@@3 T@U) (r T@U) (f T@U) (x@@4 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@3 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) f x@@4))) ($HeapSucc h@@3 (MapType0Store refType (MapType0Type FieldType BoxType) h@@3 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) f x@@4))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@3 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@3 r) f x@@4)))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (= (Tag Tclass._module.MyClass) Tagclass._module.MyClass))
(assert (= (TagFamily Tclass._module.MyClass) tytagFamily$MyClass))
(assert (= (Tag Tclass._module.MyTrait) Tagclass._module.MyTrait))
(assert (= (TagFamily Tclass._module.MyTrait) tytagFamily$MyTrait))
(assert (= (Tag Tclass._module.MyTraitInstance) Tagclass._module.MyTraitInstance))
(assert (= (TagFamily Tclass._module.MyTraitInstance) tytagFamily$MyTraitInstance))
(assert (= (Tag Tclass._module.MyClass?) Tagclass._module.MyClass?))
(assert (= (TagFamily Tclass._module.MyClass?) tytagFamily$MyClass))
(assert (= (Tag Tclass._module.MyTrait?) Tagclass._module.MyTrait?))
(assert (= (TagFamily Tclass._module.MyTrait?) tytagFamily$MyTrait))
(assert (= (Tag Tclass._module.MyTraitInstance?) Tagclass._module.MyTraitInstance?))
(assert (= (TagFamily Tclass._module.MyTraitInstance?) tytagFamily$MyTraitInstance))
(assert (forall (($o@@15 T@U) ) (! (= ($Is refType $o@@15 Tclass._module.MyTrait?)  (or (= $o@@15 null) (implements$_module.MyTrait (dtype $o@@15))))
 :pattern ( ($Is refType $o@@15 Tclass._module.MyTrait?))
)))
(assert (forall ((h@@4 T@U) (v@@1 T@U) ) (! ($IsAlloc intType v@@1 TInt h@@4)
 :pattern ( ($IsAlloc intType v@@1 TInt h@@4))
)))
(assert (forall ((v@@2 T@U) ) (! ($Is intType v@@2 TInt)
 :pattern ( ($Is intType v@@2 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun $Heap () T@U)
(declare-fun |c#0@@7| () T@U)
(declare-fun |t#0| () T@U)
(declare-fun |i#0| () T@U)
(declare-fun |$rhs#0@0| () Int)
(declare-fun $Heap@0 () T@U)
(declare-fun |$rhs#1@0| () Int)
(declare-fun $Heap@1 () T@U)
(declare-fun |$rhs#2@0| () Int)
(declare-fun $Heap@2 () T@U)
(declare-fun |_module.MyClass.F#canCall| (T@U) Bool)
(declare-fun |_module.MyClass.G#canCall| () Bool)
(declare-fun $Heap@3 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $Heap@4 () T@U)
(declare-fun |_module.MyTrait.F#canCall| (T@U) Bool)
(declare-fun |_module.MyTrait.G#canCall| () Bool)
(declare-fun $Heap@5 () T@U)
(declare-fun $Heap@6 () T@U)
(declare-fun $Heap@7 () T@U)
(declare-fun $Heap@8 () T@U)
(declare-fun $Heap@9 () T@U)
(declare-fun $Heap@10 () T@U)
(declare-fun $Heap@11 () T@U)
(declare-fun $Heap@12 () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 31) (let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc |c#0@@7| |t#0| |i#0|)) (and (=> (= (ControlFlow 0 2) (- 0 30)) (or (not (= |c#0@@7| null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 29)) (or (not (= |t#0| null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 28)) (or (not (= |i#0| null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 27)) (or (not (= |c#0@@7| null)) (not true))) (=> (or (not (= |c#0@@7| null)) (not true)) (and (=> (= (ControlFlow 0 2) (- 0 26)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |c#0@@7| _module.MyClass.a))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |c#0@@7| _module.MyClass.a)) (and (=> (= (ControlFlow 0 2) (- 0 25)) (or (not (= |c#0@@7| null)) (not true))) (=> (or (not (= |c#0@@7| null)) (not true)) (=> (= |$rhs#0@0| (+ (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |c#0@@7|) _module.MyClass.a))) 3)) (=> (and (= $Heap@0 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap |c#0@@7| (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap |c#0@@7|) _module.MyClass.a ($Box intType (int_2_U |$rhs#0@0|))))) ($IsGoodHeap $Heap@0)) (and (=> (= (ControlFlow 0 2) (- 0 24)) (or (not (= |t#0| null)) (not true))) (=> (or (not (= |t#0| null)) (not true)) (and (=> (= (ControlFlow 0 2) (- 0 23)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |t#0| _module.MyTrait.a))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |t#0| _module.MyTrait.a)) (and (=> (= (ControlFlow 0 2) (- 0 22)) (or (not (= |t#0| null)) (not true))) (=> (or (not (= |t#0| null)) (not true)) (=> (= |$rhs#1@0| (+ (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |t#0|) _module.MyTrait.a))) 3)) (=> (and (= $Heap@1 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@0 |t#0| (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 |t#0|) _module.MyTrait.a ($Box intType (int_2_U |$rhs#1@0|))))) ($IsGoodHeap $Heap@1)) (and (=> (= (ControlFlow 0 2) (- 0 21)) (or (not (= |i#0| null)) (not true))) (=> (or (not (= |i#0| null)) (not true)) (and (=> (= (ControlFlow 0 2) (- 0 20)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |i#0| _module.MyTrait.a))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |i#0| _module.MyTrait.a)) (and (=> (= (ControlFlow 0 2) (- 0 19)) (or (not (= |i#0| null)) (not true))) (=> (or (not (= |i#0| null)) (not true)) (=> (= |$rhs#2@0| (+ (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |i#0|) _module.MyTrait.a))) 3)) (=> (and (= $Heap@2 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@1 |i#0| (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 |i#0|) _module.MyTrait.a ($Box intType (int_2_U |$rhs#2@0|))))) ($IsGoodHeap $Heap@2)) (and (=> (= (ControlFlow 0 2) (- 0 18)) (or (not (= |c#0@@7| null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 17)) (or (not (= |t#0| null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 16)) (or (not (= |i#0| null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 15)) (or (not (= |c#0@@7| null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 14)) (or (not (= |c#0@@7| null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 13)) (or (not (= |c#0@@7| null)) (not true))) (=> ($IsAllocBox ($Box refType |c#0@@7|) Tclass._module.MyClass? $Heap@2) (=> (and (and (|_module.MyClass.F#canCall| |c#0@@7|) (|_module.MyClass.F#canCall| |c#0@@7|)) (and |_module.MyClass.G#canCall| |_module.MyClass.G#canCall|)) (and (=> (= (ControlFlow 0 2) (- 0 12)) (or (not (= |c#0@@7| null)) (not true))) (=> (or (not (= |c#0@@7| null)) (not true)) (=> (and (and (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (and (forall (($o@@16 T@U) ) (!  (=> (and (or (not (= $o@@16 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@16) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@16) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $o@@16)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@16))
)) ($HeapSucc $Heap@2 $Heap@3))) (and (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (and (forall (($o@@17 T@U) ) (!  (=> (and (or (not (= $o@@17 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@17) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@17) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $o@@17)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@17))
)) ($HeapSucc $Heap@3 $Heap@4)))) (and (=> (= (ControlFlow 0 2) (- 0 11)) (or (not (= |t#0| null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 10)) (or (not (= |t#0| null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 9)) (or (not (= |t#0| null)) (not true))) (=> ($IsAllocBox ($Box refType |t#0|) Tclass._module.MyTrait? $Heap@4) (=> (and (and (|_module.MyTrait.F#canCall| |t#0|) (|_module.MyTrait.F#canCall| |t#0|)) (and |_module.MyTrait.G#canCall| |_module.MyTrait.G#canCall|)) (and (=> (= (ControlFlow 0 2) (- 0 8)) (or (not (= |t#0| null)) (not true))) (=> (or (not (= |t#0| null)) (not true)) (=> (and (and (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (and (forall (($o@@18 T@U) ) (!  (=> (and (or (not (= $o@@18 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@18) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@18) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $o@@18)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@18))
)) ($HeapSucc $Heap@4 $Heap@5))) (and (and ($IsGoodHeap $Heap@6) ($IsHeapAnchor $Heap@6)) (and (forall (($o@@19 T@U) ) (!  (=> (and (or (not (= $o@@19 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@19) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@19) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@19)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@19))
)) ($HeapSucc $Heap@5 $Heap@6)))) (and (=> (= (ControlFlow 0 2) (- 0 7)) (or (not (= |i#0| null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 6)) (or (not (= |i#0| null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 5)) (or (not (= |i#0| null)) (not true))) (=> ($IsAllocBox ($Box refType |i#0|) Tclass._module.MyTrait? $Heap@6) (=> (and (and (|_module.MyTrait.F#canCall| |i#0|) (|_module.MyTrait.F#canCall| |i#0|)) (and |_module.MyTrait.G#canCall| |_module.MyTrait.G#canCall|)) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (not (= |i#0| null)) (not true))) (=> (or (not (= |i#0| null)) (not true)) (=> (and ($IsGoodHeap $Heap@7) ($IsHeapAnchor $Heap@7)) (=> (and (and (and (forall (($o@@20 T@U) ) (!  (=> (and (or (not (= $o@@20 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@20) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@20) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@20)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@20))
)) ($HeapSucc $Heap@6 $Heap@7)) (and ($IsGoodHeap $Heap@8) ($IsHeapAnchor $Heap@8))) (and (and (forall (($o@@21 T@U) ) (!  (=> (and (or (not (= $o@@21 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@21) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 $o@@21) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@21)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 $o@@21))
)) ($HeapSucc $Heap@7 $Heap@8)) (and |_module.MyClass.G#canCall| |_module.MyClass.G#canCall|))) (=> (and (and (and (and ($IsGoodHeap $Heap@9) ($IsHeapAnchor $Heap@9)) (and (forall (($o@@22 T@U) ) (!  (=> (and (or (not (= $o@@22 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 $o@@22) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 $o@@22) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 $o@@22)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 $o@@22))
)) ($HeapSucc $Heap@8 $Heap@9))) (and (and |_module.MyTrait.G#canCall| |_module.MyTrait.G#canCall|) (and ($IsGoodHeap $Heap@10) ($IsHeapAnchor $Heap@10)))) (and (and (and (forall (($o@@23 T@U) ) (!  (=> (and (or (not (= $o@@23 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 $o@@23) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@10 $o@@23) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 $o@@23)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@10 $o@@23))
)) ($HeapSucc $Heap@9 $Heap@10)) (and |_module.MyTrait.G#canCall| |_module.MyTrait.G#canCall|)) (and (and ($IsGoodHeap $Heap@11) ($IsHeapAnchor $Heap@11)) (and (forall (($o@@24 T@U) ) (!  (=> (and (or (not (= $o@@24 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@10 $o@@24) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 $o@@24) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@10 $o@@24)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 $o@@24))
)) ($HeapSucc $Heap@10 $Heap@11))))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (forall (($o@@25 T@U) ($f@@0 T@U) )  (=> (and (and (or (not (= $o@@25 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 $o@@25) alloc)))) (= $o@@25 |i#0|)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@25 $f@@0))))) (=> (forall (($o@@26 T@U) ($f@@1 T@U) )  (=> (and (and (or (not (= $o@@26 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 $o@@26) alloc)))) (= $o@@26 |i#0|)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $o@@26 $f@@1)))) (=> (and (and (and ($IsGoodHeap $Heap@12) ($IsHeapAnchor $Heap@12)) (forall (($o@@27 T@U) ) (!  (=> (and (or (not (= $o@@27 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 $o@@27) alloc)))) (or (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@12 $o@@27) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@11 $o@@27)) (= $o@@27 |i#0|)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@12 $o@@27))
))) (and ($HeapSucc $Heap@11 $Heap@12) (= (ControlFlow 0 2) (- 0 1)))) (or (not (= |i#0| null)) (not true))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (and ($Is refType |c#0@@7| Tclass._module.MyClass) ($IsAlloc refType |c#0@@7| Tclass._module.MyClass $Heap)) (and ($Is refType |t#0| Tclass._module.MyTrait) ($IsAlloc refType |t#0| Tclass._module.MyTrait $Heap))) (and (and ($Is refType |i#0| Tclass._module.MyTraitInstance) ($IsAlloc refType |i#0| Tclass._module.MyTraitInstance $Heap)) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 31) 2)))) anon0_correct))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
