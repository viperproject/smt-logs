(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 () Int)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@T T@U) T@U)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 (T@U) Bool)
(declare-fun $generated@@25 (T@T T@U T@U) Bool)
(declare-fun $generated@@26 (T@U) Int)
(declare-fun $generated@@27 (Int) T@U)
(declare-fun $generated@@28 (T@U T@U) T@U)
(declare-fun $generated@@29 (T@U T@U) T@U)
(declare-fun $generated@@31 (T@U) Int)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@33 (T@U Int) T@U)
(declare-fun $generated@@34 (T@U T@U) T@U)
(declare-fun $generated@@39 (T@U Int) T@U)
(declare-fun $generated@@40 (T@U T@U) T@U)
(declare-fun $generated@@46 (Int) Int)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@51 (T@U) T@U)
(declare-fun $generated@@52 (T@U T@U) Bool)
(declare-fun $generated@@56 (T@U Int) T@U)
(declare-fun $generated@@62 (T@T T@U) T@U)
(declare-fun $generated@@63 (T@T T@U) T@U)
(declare-fun $generated@@66 (T@U) Int)
(declare-fun $generated@@73 (T@U T@U T@U) Bool)
(declare-fun $generated@@74 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@105 (T@U) T@U)
(declare-fun $generated@@110 (T@U T@U) T@U)
(declare-fun $generated@@111 (T@U) T@U)
(declare-fun $generated@@112 (T@U) Bool)
(declare-fun $generated@@120 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@121 () T@T)
(declare-fun $generated@@122 () T@T)
(declare-fun $generated@@123 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@124 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@125 () T@T)
(declare-fun $generated@@126 (T@T T@T) T@T)
(declare-fun $generated@@127 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@128 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@129 (T@T) T@T)
(declare-fun $generated@@130 (T@T) T@T)
(declare-fun $generated@@179 (T@U) T@U)
(declare-fun $generated@@180 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@3 $generated@@23) 3))
(assert  (=> (<= 0 $generated@@20) (forall (($generated@@30 T@U) ) (!  (=> (or ($generated@@24 ($generated@@22 $generated@@23 $generated@@30)) (and (< 0 $generated@@20) ($generated@@25 $generated@@23 $generated@@30 $generated))) (= ($generated@@21 ($generated@@22 $generated@@23 $generated@@30)) (ite  (and (<= ($generated@@26 ($generated@@22 $generated@@23 ($generated@@27 65))) ($generated@@26 ($generated@@22 $generated@@23 $generated@@30))) (<= ($generated@@26 ($generated@@22 $generated@@23 $generated@@30)) ($generated@@26 ($generated@@22 $generated@@23 ($generated@@27 90))))) ($generated@@28 ($generated@@29 $generated@@30 ($generated@@27 65)) ($generated@@27 97)) $generated@@30)))
 :weight 3
 :pattern ( ($generated@@21 ($generated@@22 $generated@@23 $generated@@30)))
))))
(assert (= ($generated@@31 $generated@@32) 0))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@U) ($generated@@37 Int) ) (!  (=> (and (<= 0 $generated@@37) (<= $generated@@37 ($generated@@31 $generated@@35))) (= ($generated@@33 ($generated@@34 $generated@@35 $generated@@36) $generated@@37) ($generated@@34 ($generated@@33 $generated@@35 $generated@@37) $generated@@36)))
 :pattern ( ($generated@@33 ($generated@@34 $generated@@35 $generated@@36) $generated@@37))
)))
(assert  (=> (<= 0 $generated@@20) (forall (($generated@@38 T@U) ) (!  (=> (or ($generated@@24 $generated@@38) (and (< 0 $generated@@20) ($generated@@25 $generated@@23 $generated@@38 $generated))) (= ($generated@@21 $generated@@38) (ite  (and (<= ($generated@@26 ($generated@@22 $generated@@23 ($generated@@27 65))) ($generated@@26 $generated@@38)) (<= ($generated@@26 $generated@@38) ($generated@@26 ($generated@@22 $generated@@23 ($generated@@27 90))))) ($generated@@28 ($generated@@29 $generated@@38 ($generated@@27 65)) ($generated@@27 97)) $generated@@38)))
 :pattern ( ($generated@@21 $generated@@38))
))))
(assert (forall (($generated@@41 T@U) ($generated@@42 T@U) ($generated@@43 Int) ) (!  (=> (= $generated@@43 ($generated@@31 $generated@@41)) (and (= ($generated@@39 ($generated@@40 $generated@@41 $generated@@42) $generated@@43) $generated@@41) (= ($generated@@33 ($generated@@40 $generated@@41 $generated@@42) $generated@@43) $generated@@42)))
 :pattern ( ($generated@@39 ($generated@@40 $generated@@41 $generated@@42) $generated@@43))
 :pattern ( ($generated@@33 ($generated@@40 $generated@@41 $generated@@42) $generated@@43))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 Int) ) (!  (=> (= $generated@@45 0) (= ($generated@@33 $generated@@44 $generated@@45) $generated@@44))
 :pattern ( ($generated@@33 $generated@@44 $generated@@45))
)))
(assert (forall (($generated@@47 Int) ) (! (= ($generated@@46 $generated@@47) $generated@@47)
 :pattern ( ($generated@@46 $generated@@47))
)))
(assert (forall (($generated@@48 T@U) ($generated@@49 T@T) ) (! (= ($generated@@22 $generated@@49 $generated@@48) $generated@@48)
 :pattern ( ($generated@@22 $generated@@49 $generated@@48))
)))
(assert (= ($generated@@3 $generated@@50) 4))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@U) ($generated@@55 T@U) ) (!  (=> (and ($generated@@25 $generated@@50 $generated@@53 ($generated@@51 $generated@@55)) ($generated@@52 $generated@@54 $generated@@55)) ($generated@@25 $generated@@50 ($generated@@34 $generated@@53 $generated@@54) ($generated@@51 $generated@@55)))
 :pattern ( ($generated@@25 $generated@@50 ($generated@@34 $generated@@53 $generated@@54) ($generated@@51 $generated@@55)))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 Int) ($generated@@59 Int) ) (!  (=> (and (and (<= 0 $generated@@59) (< $generated@@59 $generated@@58)) (< $generated@@59 ($generated@@31 $generated@@57))) (= ($generated@@56 ($generated@@39 $generated@@57 $generated@@58) $generated@@59) ($generated@@56 $generated@@57 $generated@@59)))
 :weight 25
 :pattern ( ($generated@@56 ($generated@@39 $generated@@57 $generated@@58) $generated@@59))
 :pattern ( ($generated@@56 $generated@@57 $generated@@59) ($generated@@39 $generated@@57 $generated@@58))
)))
(assert (forall (($generated@@60 T@U) ($generated@@61 Int) ) (!  (=> (and (<= 0 $generated@@61) (<= $generated@@61 ($generated@@31 $generated@@60))) (= ($generated@@31 ($generated@@33 $generated@@60 $generated@@61)) (- ($generated@@31 $generated@@60) $generated@@61)))
 :pattern ( ($generated@@31 ($generated@@33 $generated@@60 $generated@@61)))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@T) ) (! (= ($generated@@63 $generated@@65 ($generated@@62 $generated@@65 $generated@@64)) $generated@@64)
 :pattern ( ($generated@@62 $generated@@65 $generated@@64))
)))
(assert (forall (($generated@@67 T@U) ($generated@@68 Int) ) (!  (=> (and (<= 0 $generated@@68) (< $generated@@68 ($generated@@31 $generated@@67))) (< ($generated@@66 ($generated@@39 $generated@@67 $generated@@68)) ($generated@@66 $generated@@67)))
 :pattern ( ($generated@@66 ($generated@@39 $generated@@67 $generated@@68)))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 Int) ) (!  (=> (and (< 0 $generated@@70) (<= $generated@@70 ($generated@@31 $generated@@69))) (< ($generated@@66 ($generated@@33 $generated@@69 $generated@@70)) ($generated@@66 $generated@@69)))
 :pattern ( ($generated@@66 ($generated@@33 $generated@@69 $generated@@70)))
)))
(assert (forall (($generated@@71 T@U) ($generated@@72 T@U) ) (! (= ($generated@@31 ($generated@@34 $generated@@71 $generated@@72)) (+ 1 ($generated@@31 $generated@@71)))
 :pattern ( ($generated@@34 $generated@@71 $generated@@72))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ($generated@@78 T@T) ) (! (= ($generated@@73 ($generated@@63 $generated@@78 $generated@@75) $generated@@76 $generated@@77) ($generated@@74 $generated@@78 $generated@@75 $generated@@76 $generated@@77))
 :pattern ( ($generated@@73 ($generated@@63 $generated@@78 $generated@@75) $generated@@76 $generated@@77))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 Int) ($generated@@81 Int) ) (!  (=> (and (and (<= 0 $generated@@80) (<= 0 $generated@@81)) (< $generated@@81 (- ($generated@@31 $generated@@79) $generated@@80))) (= ($generated@@56 ($generated@@33 $generated@@79 $generated@@80) $generated@@81) ($generated@@56 $generated@@79 (+ $generated@@81 $generated@@80))))
 :weight 25
 :pattern ( ($generated@@56 ($generated@@33 $generated@@79 $generated@@80) $generated@@81))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ) (! (= ($generated@@31 ($generated@@40 $generated@@82 $generated@@83)) (+ ($generated@@31 $generated@@82) ($generated@@31 $generated@@83)))
 :pattern ( ($generated@@31 ($generated@@40 $generated@@82 $generated@@83)))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 Int) ($generated@@86 T@U) ) (!  (and (=> (= $generated@@85 ($generated@@31 $generated@@84)) (= ($generated@@56 ($generated@@34 $generated@@84 $generated@@86) $generated@@85) $generated@@86)) (=> (or (not (= $generated@@85 ($generated@@31 $generated@@84))) (not true)) (= ($generated@@56 ($generated@@34 $generated@@84 $generated@@86) $generated@@85) ($generated@@56 $generated@@84 $generated@@85))))
 :pattern ( ($generated@@56 ($generated@@34 $generated@@84 $generated@@86) $generated@@85))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@U) ) (! (= ($generated@@29 $generated@@87 $generated@@88) ($generated@@27 (- ($generated@@26 $generated@@87) ($generated@@26 $generated@@88))))
 :pattern ( ($generated@@29 $generated@@87 $generated@@88))
)))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@U) ) (! (= ($generated@@28 $generated@@89 $generated@@90) ($generated@@27 (+ ($generated@@26 $generated@@89) ($generated@@26 $generated@@90))))
 :pattern ( ($generated@@28 $generated@@89 $generated@@90))
)))
(assert (forall (($generated@@91 T@U) ($generated@@92 Int) ) (!  (=> (and (<= 0 $generated@@92) (<= $generated@@92 ($generated@@31 $generated@@91))) (= ($generated@@31 ($generated@@39 $generated@@91 $generated@@92)) $generated@@92))
 :pattern ( ($generated@@31 ($generated@@39 $generated@@91 $generated@@92)))
)))
(assert (forall (($generated@@93 T@U) ) (!  (=> ($generated@@52 $generated@@93 $generated) (and (= ($generated@@63 $generated@@23 ($generated@@62 $generated@@23 $generated@@93)) $generated@@93) ($generated@@25 $generated@@23 ($generated@@62 $generated@@23 $generated@@93) $generated)))
 :pattern ( ($generated@@52 $generated@@93 $generated))
)))
(assert (forall (($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@T) ) (! (= ($generated@@52 ($generated@@63 $generated@@96 $generated@@94) $generated@@95) ($generated@@25 $generated@@96 $generated@@94 $generated@@95))
 :pattern ( ($generated@@52 ($generated@@63 $generated@@96 $generated@@94) $generated@@95))
)))
(assert (forall (($generated@@97 T@U) ) (! (<= 0 ($generated@@31 $generated@@97))
 :pattern ( ($generated@@31 $generated@@97))
)))
(assert (forall (($generated@@98 T@U) ($generated@@99 Int) ($generated@@100 Int) ) (!  (=> (and (and (<= 0 $generated@@99) (< $generated@@99 $generated@@100)) (<= $generated@@100 ($generated@@31 $generated@@98))) (< ($generated@@66 ($generated@@40 ($generated@@39 $generated@@98 $generated@@99) ($generated@@33 $generated@@98 $generated@@100))) ($generated@@66 $generated@@98)))
 :pattern ( ($generated@@66 ($generated@@40 ($generated@@39 $generated@@98 $generated@@99) ($generated@@33 $generated@@98 $generated@@100))))
)))
(assert (forall (($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@74 $generated@@50 $generated@@101 ($generated@@51 $generated@@102) $generated@@103) (forall (($generated@@104 Int) ) (!  (=> (and (<= 0 $generated@@104) (< $generated@@104 ($generated@@31 $generated@@101))) ($generated@@73 ($generated@@56 $generated@@101 $generated@@104) $generated@@102 $generated@@103))
 :pattern ( ($generated@@56 $generated@@101 $generated@@104))
)))
 :pattern ( ($generated@@74 $generated@@50 $generated@@101 ($generated@@51 $generated@@102) $generated@@103))
)))
(assert (forall (($generated@@106 T@U) ) (! (= ($generated@@105 ($generated@@51 $generated@@106)) $generated@@106)
 :pattern ( ($generated@@51 $generated@@106))
)))
(assert (forall (($generated@@107 T@U) ) (! (= ($generated@@19 ($generated@@51 $generated@@107)) $generated@@1)
 :pattern ( ($generated@@51 $generated@@107))
)))
(assert (forall (($generated@@108 T@U) ($generated@@109 T@T) ) (! (= ($generated@@62 $generated@@109 ($generated@@63 $generated@@109 $generated@@108)) $generated@@108)
 :pattern ( ($generated@@63 $generated@@109 $generated@@108))
)))
(assert  (=> (<= 1 $generated@@20) (forall (($generated@@113 T@U) ($generated@@114 T@U) ) (!  (=> (or ($generated@@112 $generated@@114) (and (< 1 $generated@@20) ($generated@@25 $generated@@50 $generated@@114 ($generated@@51 $generated)))) (and (=> (or (not (= ($generated@@46 0) ($generated@@31 $generated@@114))) (not true)) (and ($generated@@24 ($generated@@62 $generated@@23 ($generated@@56 $generated@@114 ($generated@@46 0)))) ($generated@@112 ($generated@@33 $generated@@114 ($generated@@46 1))))) (= ($generated@@110 ($generated@@111 $generated@@113) $generated@@114) (ite (= ($generated@@46 0) ($generated@@31 $generated@@114)) $generated@@32 ($generated@@40 ($generated@@34 $generated@@32 ($generated@@63 $generated@@23 ($generated@@21 ($generated@@62 $generated@@23 ($generated@@56 $generated@@114 ($generated@@46 0)))))) ($generated@@110 $generated@@113 ($generated@@33 $generated@@114 ($generated@@46 1))))))))
 :pattern ( ($generated@@110 ($generated@@111 $generated@@113) $generated@@114))
))))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@U) ) (! (= ($generated@@110 ($generated@@111 $generated@@115) $generated@@116) ($generated@@110 $generated@@115 $generated@@116))
 :pattern ( ($generated@@110 ($generated@@111 $generated@@115) $generated@@116))
)))
(assert  (=> (<= 1 $generated@@20) (forall (($generated@@117 T@U) ($generated@@118 T@U) ) (!  (=> (or ($generated@@112 ($generated@@22 $generated@@50 $generated@@118)) (and (< 1 $generated@@20) ($generated@@25 $generated@@50 $generated@@118 ($generated@@51 $generated)))) (and (=> (or (not (= ($generated@@46 0) ($generated@@31 ($generated@@22 $generated@@50 $generated@@118)))) (not true)) (and ($generated@@24 ($generated@@62 $generated@@23 ($generated@@56 ($generated@@22 $generated@@50 $generated@@118) ($generated@@46 0)))) ($generated@@112 ($generated@@22 $generated@@50 ($generated@@33 ($generated@@22 $generated@@50 $generated@@118) ($generated@@46 1)))))) (= ($generated@@110 ($generated@@111 $generated@@117) ($generated@@22 $generated@@50 $generated@@118)) (ite (= ($generated@@46 0) ($generated@@31 ($generated@@22 $generated@@50 $generated@@118))) $generated@@32 ($generated@@40 ($generated@@34 $generated@@32 ($generated@@63 $generated@@23 ($generated@@21 ($generated@@62 $generated@@23 ($generated@@56 ($generated@@22 $generated@@50 $generated@@118) ($generated@@46 0)))))) ($generated@@110 ($generated@@111 $generated@@117) ($generated@@22 $generated@@50 ($generated@@33 ($generated@@22 $generated@@50 $generated@@118) ($generated@@46 1)))))))))
 :weight 3
 :pattern ( ($generated@@110 ($generated@@111 $generated@@117) ($generated@@22 $generated@@50 $generated@@118)))
))))
(assert (forall (($generated@@119 Int) ) (!  (=> (or (and (<= 0 $generated@@119) (< $generated@@119 55296)) (and (<= 57344 $generated@@119) (< $generated@@119 1114112))) (= ($generated@@26 ($generated@@27 $generated@@119)) $generated@@119))
 :pattern ( ($generated@@27 $generated@@119))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@131 T@T) ($generated@@132 T@T) ($generated@@133 T@T) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ($generated@@137 T@U) ) (! (= ($generated@@120 $generated@@131 $generated@@132 $generated@@133 ($generated@@127 $generated@@131 $generated@@132 $generated@@133 $generated@@135 $generated@@136 $generated@@137 $generated@@134) $generated@@136 $generated@@137) $generated@@134)
 :weight 0
)) (and (forall (($generated@@138 T@T) ($generated@@139 T@T) ($generated@@140 T@T) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 T@U) ) (!  (or (= $generated@@143 $generated@@145) (= ($generated@@120 $generated@@138 $generated@@139 $generated@@140 ($generated@@127 $generated@@138 $generated@@139 $generated@@140 $generated@@142 $generated@@143 $generated@@144 $generated@@141) $generated@@145 $generated@@146) ($generated@@120 $generated@@138 $generated@@139 $generated@@140 $generated@@142 $generated@@145 $generated@@146)))
 :weight 0
)) (forall (($generated@@147 T@T) ($generated@@148 T@T) ($generated@@149 T@T) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ($generated@@153 T@U) ($generated@@154 T@U) ($generated@@155 T@U) ) (!  (or (= $generated@@153 $generated@@155) (= ($generated@@120 $generated@@147 $generated@@148 $generated@@149 ($generated@@127 $generated@@147 $generated@@148 $generated@@149 $generated@@151 $generated@@152 $generated@@153 $generated@@150) $generated@@154 $generated@@155) ($generated@@120 $generated@@147 $generated@@148 $generated@@149 $generated@@151 $generated@@154 $generated@@155)))
 :weight 0
)))) (= ($generated@@3 $generated@@121) 5)) (= ($generated@@3 $generated@@122) 6)) (forall (($generated@@156 T@T) ($generated@@157 T@T) ($generated@@158 T@U) ($generated@@159 T@U) ($generated@@160 T@U) ) (! (= ($generated@@124 $generated@@156 $generated@@157 ($generated@@128 $generated@@156 $generated@@157 $generated@@159 $generated@@160 $generated@@158) $generated@@160) $generated@@158)
 :weight 0
))) (forall (($generated@@161 T@T) ($generated@@162 T@T) ($generated@@163 T@U) ($generated@@164 T@U) ($generated@@165 T@U) ($generated@@166 T@U) ) (!  (or (= $generated@@165 $generated@@166) (= ($generated@@124 $generated@@161 $generated@@162 ($generated@@128 $generated@@161 $generated@@162 $generated@@164 $generated@@165 $generated@@163) $generated@@166) ($generated@@124 $generated@@161 $generated@@162 $generated@@164 $generated@@166)))
 :weight 0
))) (= ($generated@@3 $generated@@125) 7)) (forall (($generated@@167 T@T) ($generated@@168 T@T) ) (= ($generated@@3 ($generated@@126 $generated@@167 $generated@@168)) 8))) (forall (($generated@@169 T@T) ($generated@@170 T@T) ) (! (= ($generated@@129 ($generated@@126 $generated@@169 $generated@@170)) $generated@@169)
 :pattern ( ($generated@@126 $generated@@169 $generated@@170))
))) (forall (($generated@@171 T@T) ($generated@@172 T@T) ) (! (= ($generated@@130 ($generated@@126 $generated@@171 $generated@@172)) $generated@@172)
 :pattern ( ($generated@@126 $generated@@171 $generated@@172))
))))
(assert (forall (($generated@@173 T@U) ($generated@@174 T@U) ($generated@@175 T@U) ($generated@@176 Bool) ($generated@@177 T@U) ($generated@@178 T@U) ) (! (= ($generated@@8 ($generated@@120 $generated@@121 $generated@@122 $generated@@4 ($generated@@123 $generated@@173 $generated@@174 $generated@@175 $generated@@176) $generated@@177 $generated@@178))  (=> (and (or (not (= $generated@@177 $generated@@173)) (not true)) ($generated@@8 ($generated@@62 $generated@@4 ($generated@@124 $generated@@122 $generated@@125 ($generated@@124 $generated@@121 ($generated@@126 $generated@@122 $generated@@125) $generated@@174 $generated@@177) $generated@@175)))) $generated@@176))
 :pattern ( ($generated@@120 $generated@@121 $generated@@122 $generated@@4 ($generated@@123 $generated@@173 $generated@@174 $generated@@175 $generated@@176) $generated@@177 $generated@@178))
)))
(assert (forall (($generated@@181 T@U) ($generated@@182 T@U) ) (!  (and (= ($generated@@179 ($generated@@34 $generated@@181 $generated@@182)) $generated@@181) (= ($generated@@180 ($generated@@34 $generated@@181 $generated@@182)) $generated@@182))
 :pattern ( ($generated@@34 $generated@@181 $generated@@182))
)))
(assert (forall (($generated@@183 T@U) ($generated@@184 T@U) ) (!  (=> ($generated@@52 $generated@@183 ($generated@@51 $generated@@184)) (and (= ($generated@@63 $generated@@50 ($generated@@62 $generated@@50 $generated@@183)) $generated@@183) ($generated@@25 $generated@@50 ($generated@@62 $generated@@50 $generated@@183) ($generated@@51 $generated@@184))))
 :pattern ( ($generated@@52 $generated@@183 ($generated@@51 $generated@@184)))
)))
(assert  (=> (<= 0 $generated@@20) (forall (($generated@@185 T@U) ) (!  (=> (or ($generated@@24 $generated@@185) (and (< 0 $generated@@20) ($generated@@25 $generated@@23 $generated@@185 $generated))) ($generated@@25 $generated@@23 ($generated@@21 $generated@@185) $generated))
 :pattern ( ($generated@@21 $generated@@185))
))))
(assert (forall (($generated@@186 T@U) ) (!  (and (= ($generated@@27 ($generated@@26 $generated@@186)) $generated@@186) (or (and (<= 0 ($generated@@26 $generated@@186)) (< ($generated@@26 $generated@@186) 55296)) (and (<= 57344 ($generated@@26 $generated@@186)) (< ($generated@@26 $generated@@186) 1114112))))
 :pattern ( ($generated@@26 $generated@@186))
)))
(assert (forall (($generated@@187 T@U) ($generated@@188 Int) ($generated@@189 Int) ) (!  (=> (and (and (<= 0 $generated@@188) (<= $generated@@188 $generated@@189)) (< $generated@@189 ($generated@@31 $generated@@187))) (= ($generated@@56 ($generated@@33 $generated@@187 $generated@@188) (- $generated@@189 $generated@@188)) ($generated@@56 $generated@@187 $generated@@189)))
 :weight 25
 :pattern ( ($generated@@56 $generated@@187 $generated@@189) ($generated@@33 $generated@@187 $generated@@188))
)))
(assert (forall (($generated@@190 T@U) ($generated@@191 Int) ($generated@@192 Int) ) (!  (=> (and (and (<= 0 $generated@@191) (<= 0 $generated@@192)) (<= (+ $generated@@191 $generated@@192) ($generated@@31 $generated@@190))) (= ($generated@@33 ($generated@@33 $generated@@190 $generated@@191) $generated@@192) ($generated@@33 $generated@@190 (+ $generated@@191 $generated@@192))))
 :pattern ( ($generated@@33 ($generated@@33 $generated@@190 $generated@@191) $generated@@192))
)))
(assert (forall (($generated@@193 T@U) ($generated@@194 T@U) ($generated@@195 Int) ) (!  (and (=> (< $generated@@195 ($generated@@31 $generated@@193)) (= ($generated@@56 ($generated@@40 $generated@@193 $generated@@194) $generated@@195) ($generated@@56 $generated@@193 $generated@@195))) (=> (<= ($generated@@31 $generated@@193) $generated@@195) (= ($generated@@56 ($generated@@40 $generated@@193 $generated@@194) $generated@@195) ($generated@@56 $generated@@194 (- $generated@@195 ($generated@@31 $generated@@193))))))
 :pattern ( ($generated@@56 ($generated@@40 $generated@@193 $generated@@194) $generated@@195))
)))
(assert (forall (($generated@@196 Int) ) (! (= ($generated@@63 $generated@@5 ($generated@@9 ($generated@@46 $generated@@196))) ($generated@@22 $generated@@125 ($generated@@63 $generated@@5 ($generated@@9 $generated@@196))))
 :pattern ( ($generated@@63 $generated@@5 ($generated@@9 ($generated@@46 $generated@@196))))
)))
(assert (forall (($generated@@197 T@U) ($generated@@198 T@T) ) (! (= ($generated@@63 $generated@@198 ($generated@@22 $generated@@198 $generated@@197)) ($generated@@22 $generated@@125 ($generated@@63 $generated@@198 $generated@@197)))
 :pattern ( ($generated@@63 $generated@@198 ($generated@@22 $generated@@198 $generated@@197)))
)))
(assert (forall (($generated@@199 T@U) ) (!  (=> (= ($generated@@31 $generated@@199) 0) (= $generated@@199 $generated@@32))
 :pattern ( ($generated@@31 $generated@@199))
)))
(assert (forall (($generated@@200 T@U) ($generated@@201 Int) ) (!  (=> (= $generated@@201 0) (= ($generated@@39 $generated@@200 $generated@@201) $generated@@32))
 :pattern ( ($generated@@39 $generated@@200 $generated@@201))
)))
(assert (forall (($generated@@202 T@U) ($generated@@203 T@U) ) (! ($generated@@74 $generated@@23 $generated@@203 $generated $generated@@202)
 :pattern ( ($generated@@74 $generated@@23 $generated@@203 $generated $generated@@202))
)))
(assert  (=> (<= 1 $generated@@20) (forall (($generated@@204 T@U) ($generated@@205 T@U) ) (!  (=> (or ($generated@@112 $generated@@205) (and (< 1 $generated@@20) ($generated@@25 $generated@@50 $generated@@205 ($generated@@51 $generated)))) ($generated@@25 $generated@@50 ($generated@@110 $generated@@204 $generated@@205) ($generated@@51 $generated)))
 :pattern ( ($generated@@110 $generated@@204 $generated@@205))
))))
(assert (forall (($generated@@206 T@U) ($generated@@207 T@U) ) (! (= ($generated@@25 $generated@@50 $generated@@206 ($generated@@51 $generated@@207)) (forall (($generated@@208 Int) ) (!  (=> (and (<= 0 $generated@@208) (< $generated@@208 ($generated@@31 $generated@@206))) ($generated@@52 ($generated@@56 $generated@@206 $generated@@208) $generated@@207))
 :pattern ( ($generated@@56 $generated@@206 $generated@@208))
)))
 :pattern ( ($generated@@25 $generated@@50 $generated@@206 ($generated@@51 $generated@@207)))
)))
(assert (forall (($generated@@209 T@U) ) (! ($generated@@25 $generated@@23 $generated@@209 $generated)
 :pattern ( ($generated@@25 $generated@@23 $generated@@209 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@210 () T@U)
(declare-fun $generated@@211 () T@U)
(declare-fun $generated@@212 () T@U)
(declare-fun $generated@@213 () T@U)
(declare-fun $generated@@214 () T@U)
(declare-fun $generated@@215 () T@U)
(declare-fun $generated@@216 (T@U) Bool)
(declare-fun $generated@@217 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 8) (let (($generated@@218  (=> (or (not (= ($generated@@46 0) ($generated@@31 $generated@@210))) (not true)) (and (=> (= (ControlFlow 0 4) (- 0 6)) (and (<= 0 ($generated@@46 0)) (< ($generated@@46 0) ($generated@@31 $generated@@210)))) (=> (and (<= 0 ($generated@@46 0)) (< ($generated@@46 0) ($generated@@31 $generated@@210))) (=> (= $generated@@211 ($generated@@62 $generated@@23 ($generated@@56 $generated@@210 ($generated@@46 0)))) (=> (and ($generated@@74 $generated@@23 $generated@@211 $generated $generated@@212) ($generated@@24 ($generated@@62 $generated@@23 ($generated@@56 $generated@@210 ($generated@@46 0))))) (and (=> (= (ControlFlow 0 4) (- 0 5)) (and (<= 0 ($generated@@46 1)) (<= ($generated@@46 1) ($generated@@31 $generated@@210)))) (=> (and (<= 0 ($generated@@46 1)) (<= ($generated@@46 1) ($generated@@31 $generated@@210))) (=> (= $generated@@213 ($generated@@33 $generated@@210 ($generated@@46 1))) (=> (and ($generated@@74 $generated@@50 $generated@@213 ($generated@@51 $generated) $generated@@212) (= (ControlFlow 0 4) (- 0 3))) (< ($generated@@66 $generated@@213) ($generated@@66 $generated@@210)))))))))))))
(let (($generated@@219 true))
(let (($generated@@220 true))
(let (($generated@@221  (=> (= $generated@@214 ($generated@@123 $generated@@215 $generated@@212 $generated@@2 false)) (and (and (=> (= (ControlFlow 0 7) 1) $generated@@220) (=> (= (ControlFlow 0 7) 2) $generated@@219)) (=> (= (ControlFlow 0 7) 4) $generated@@218)))))
(let (($generated@@222  (=> (and (and (and ($generated@@216 $generated@@212) ($generated@@217 $generated@@212)) ($generated@@25 $generated@@50 $generated@@210 ($generated@@51 $generated))) (and (= 1 $generated@@20) (= (ControlFlow 0 8) 7))) $generated@@221)))
$generated@@222))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
