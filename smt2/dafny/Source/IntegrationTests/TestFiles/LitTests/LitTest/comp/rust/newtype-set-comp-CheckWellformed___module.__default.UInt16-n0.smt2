(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 () Int)
(declare-fun $generated@@20 (Int) T@U)
(declare-fun $generated@@21 (Int) Int)
(declare-fun $generated@@22 (Int) Bool)
(declare-fun $generated@@23 (Int Int) Int)
(declare-fun $generated@@24 (Int Int) Int)
(declare-fun $generated@@25 (T@T T@U) T@U)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 (T@U T@U) T@U)
(declare-fun $generated@@28 () T@U)
(declare-fun $generated@@29 (T@T T@U) T@U)
(declare-fun $generated@@33 (T@U) Int)
(declare-fun $generated@@37 (T@T T@U T@U) Bool)
(declare-fun $generated@@38 (T@U) T@U)
(declare-fun $generated@@39 (T@U T@U) Bool)
(declare-fun $generated@@43 (T@T T@U) T@U)
(declare-fun $generated@@48 () T@U)
(declare-fun $generated@@50 (T@U Int) T@U)
(declare-fun $generated@@64 (T@U) T@U)
(declare-fun $generated@@66 (T@U) T@U)
(declare-fun $generated@@70 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@71 () T@T)
(declare-fun $generated@@72 () T@T)
(declare-fun $generated@@73 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@74 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@75 () T@T)
(declare-fun $generated@@76 (T@T T@T) T@T)
(declare-fun $generated@@77 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@78 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@79 (T@T) T@T)
(declare-fun $generated@@80 (T@T) T@T)
(declare-fun $generated@@131 (T@U) T@U)
(declare-fun $generated@@132 (T@U) T@U)
(declare-fun $generated@@137 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@3 $generated@@26) 3))
(assert  (=> (<= 1 $generated@@19) (forall (($generated@@30 Int) ) (!  (=> (or ($generated@@22 ($generated@@21 $generated@@30)) (and (< 1 $generated@@19) (and (<= ($generated@@21 0) $generated@@30) (< $generated@@30 65536)))) (= ($generated@@20 ($generated@@21 $generated@@30)) (let (($generated@@31 ($generated@@21 ($generated@@23 $generated@@30 ($generated@@21 256)))))
(let (($generated@@32 ($generated@@21 ($generated@@24 $generated@@30 ($generated@@21 256)))))
($generated@@25 $generated@@26 ($generated@@27 ($generated@@27 $generated@@28 ($generated@@29 $generated@@5 ($generated@@9 $generated@@31))) ($generated@@29 $generated@@5 ($generated@@9 $generated@@32))))))))
 :weight 3
 :pattern ( ($generated@@20 ($generated@@21 $generated@@30)))
))))
(assert (= ($generated@@33 $generated@@28) 0))
(assert (forall (($generated@@34 Int) ) (! (= ($generated@@21 $generated@@34) $generated@@34)
 :pattern ( ($generated@@21 $generated@@34))
)))
(assert (forall (($generated@@35 T@U) ($generated@@36 T@T) ) (! (= ($generated@@25 $generated@@36 $generated@@35) $generated@@35)
 :pattern ( ($generated@@25 $generated@@36 $generated@@35))
)))
(assert (forall (($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ) (!  (=> (and ($generated@@37 $generated@@26 $generated@@40 ($generated@@38 $generated@@42)) ($generated@@39 $generated@@41 $generated@@42)) ($generated@@37 $generated@@26 ($generated@@27 $generated@@40 $generated@@41) ($generated@@38 $generated@@42)))
 :pattern ( ($generated@@37 $generated@@26 ($generated@@27 $generated@@40 $generated@@41) ($generated@@38 $generated@@42)))
)))
(assert (forall (($generated@@44 T@U) ($generated@@45 T@T) ) (! (= ($generated@@29 $generated@@45 ($generated@@43 $generated@@45 $generated@@44)) $generated@@44)
 :pattern ( ($generated@@43 $generated@@45 $generated@@44))
)))
(assert (forall (($generated@@46 T@U) ($generated@@47 T@U) ) (! (= ($generated@@33 ($generated@@27 $generated@@46 $generated@@47)) (+ 1 ($generated@@33 $generated@@46)))
 :pattern ( ($generated@@27 $generated@@46 $generated@@47))
)))
(assert (forall (($generated@@49 T@U) ) (!  (=> ($generated@@39 $generated@@49 $generated@@48) (and (= ($generated@@29 $generated@@5 ($generated@@43 $generated@@5 $generated@@49)) $generated@@49) ($generated@@37 $generated@@5 ($generated@@43 $generated@@5 $generated@@49) $generated@@48)))
 :pattern ( ($generated@@39 $generated@@49 $generated@@48))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 Int) ($generated@@53 T@U) ) (!  (and (=> (= $generated@@52 ($generated@@33 $generated@@51)) (= ($generated@@50 ($generated@@27 $generated@@51 $generated@@53) $generated@@52) $generated@@53)) (=> (or (not (= $generated@@52 ($generated@@33 $generated@@51))) (not true)) (= ($generated@@50 ($generated@@27 $generated@@51 $generated@@53) $generated@@52) ($generated@@50 $generated@@51 $generated@@52))))
 :pattern ( ($generated@@50 ($generated@@27 $generated@@51 $generated@@53) $generated@@52))
)))
(assert  (=> (<= 1 $generated@@19) (forall (($generated@@54 Int) ) (!  (=> (or ($generated@@22 $generated@@54) (and (< 1 $generated@@19) (and (<= ($generated@@21 0) $generated@@54) (< $generated@@54 65536)))) ($generated@@37 $generated@@26 ($generated@@20 $generated@@54) ($generated@@38 $generated@@48)))
 :pattern ( ($generated@@20 $generated@@54))
))))
(assert (forall (($generated@@55 Int) ($generated@@56 Int) ) (! (= ($generated@@23 $generated@@55 $generated@@56) (div $generated@@55 $generated@@56))
 :pattern ( ($generated@@23 $generated@@55 $generated@@56))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@39 ($generated@@29 $generated@@59 $generated@@57) $generated@@58) ($generated@@37 $generated@@59 $generated@@57 $generated@@58))
 :pattern ( ($generated@@39 ($generated@@29 $generated@@59 $generated@@57) $generated@@58))
)))
(assert (forall (($generated@@60 T@U) ) (! (<= 0 ($generated@@33 $generated@@60))
 :pattern ( ($generated@@33 $generated@@60))
)))
(assert  (=> (<= 1 $generated@@19) (forall (($generated@@61 Int) ) (!  (=> (or ($generated@@22 $generated@@61) (and (< 1 $generated@@19) (and (<= ($generated@@21 0) $generated@@61) (< $generated@@61 65536)))) (= ($generated@@20 $generated@@61) (let (($generated@@62 ($generated@@23 $generated@@61 ($generated@@21 256))))
(let (($generated@@63 ($generated@@24 $generated@@61 ($generated@@21 256))))
($generated@@27 ($generated@@27 $generated@@28 ($generated@@29 $generated@@5 ($generated@@9 $generated@@62))) ($generated@@29 $generated@@5 ($generated@@9 $generated@@63)))))))
 :pattern ( ($generated@@20 $generated@@61))
))))
(assert (forall (($generated@@65 T@U) ) (! (= ($generated@@64 ($generated@@38 $generated@@65)) $generated@@65)
 :pattern ( ($generated@@38 $generated@@65))
)))
(assert (forall (($generated@@67 T@U) ) (! (= ($generated@@66 ($generated@@38 $generated@@67)) $generated)
 :pattern ( ($generated@@38 $generated@@67))
)))
(assert (forall (($generated@@68 T@U) ($generated@@69 T@T) ) (! (= ($generated@@43 $generated@@69 ($generated@@29 $generated@@69 $generated@@68)) $generated@@68)
 :pattern ( ($generated@@29 $generated@@69 $generated@@68))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@81 T@T) ($generated@@82 T@T) ($generated@@83 T@T) ($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@70 $generated@@81 $generated@@82 $generated@@83 ($generated@@77 $generated@@81 $generated@@82 $generated@@83 $generated@@85 $generated@@86 $generated@@87 $generated@@84) $generated@@86 $generated@@87) $generated@@84)
 :weight 0
)) (and (forall (($generated@@88 T@T) ($generated@@89 T@T) ($generated@@90 T@T) ($generated@@91 T@U) ($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ($generated@@95 T@U) ($generated@@96 T@U) ) (!  (or (= $generated@@93 $generated@@95) (= ($generated@@70 $generated@@88 $generated@@89 $generated@@90 ($generated@@77 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@93 $generated@@94 $generated@@91) $generated@@95 $generated@@96) ($generated@@70 $generated@@88 $generated@@89 $generated@@90 $generated@@92 $generated@@95 $generated@@96)))
 :weight 0
)) (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ($generated@@104 T@U) ($generated@@105 T@U) ) (!  (or (= $generated@@103 $generated@@105) (= ($generated@@70 $generated@@97 $generated@@98 $generated@@99 ($generated@@77 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@103 $generated@@100) $generated@@104 $generated@@105) ($generated@@70 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@104 $generated@@105)))
 :weight 0
)))) (= ($generated@@3 $generated@@71) 4)) (= ($generated@@3 $generated@@72) 5)) (forall (($generated@@106 T@T) ($generated@@107 T@T) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ) (! (= ($generated@@74 $generated@@106 $generated@@107 ($generated@@78 $generated@@106 $generated@@107 $generated@@109 $generated@@110 $generated@@108) $generated@@110) $generated@@108)
 :weight 0
))) (forall (($generated@@111 T@T) ($generated@@112 T@T) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@115 $generated@@116) (= ($generated@@74 $generated@@111 $generated@@112 ($generated@@78 $generated@@111 $generated@@112 $generated@@114 $generated@@115 $generated@@113) $generated@@116) ($generated@@74 $generated@@111 $generated@@112 $generated@@114 $generated@@116)))
 :weight 0
))) (= ($generated@@3 $generated@@75) 6)) (forall (($generated@@117 T@T) ($generated@@118 T@T) ) (= ($generated@@3 ($generated@@76 $generated@@117 $generated@@118)) 7))) (forall (($generated@@119 T@T) ($generated@@120 T@T) ) (! (= ($generated@@79 ($generated@@76 $generated@@119 $generated@@120)) $generated@@119)
 :pattern ( ($generated@@76 $generated@@119 $generated@@120))
))) (forall (($generated@@121 T@T) ($generated@@122 T@T) ) (! (= ($generated@@80 ($generated@@76 $generated@@121 $generated@@122)) $generated@@122)
 :pattern ( ($generated@@76 $generated@@121 $generated@@122))
))))
(assert (forall (($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ($generated@@126 Bool) ($generated@@127 T@U) ($generated@@128 T@U) ) (! (= ($generated@@8 ($generated@@70 $generated@@71 $generated@@72 $generated@@4 ($generated@@73 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@127 $generated@@128))  (=> (and (or (not (= $generated@@127 $generated@@123)) (not true)) ($generated@@8 ($generated@@43 $generated@@4 ($generated@@74 $generated@@72 $generated@@75 ($generated@@74 $generated@@71 ($generated@@76 $generated@@72 $generated@@75) $generated@@124 $generated@@127) $generated@@125)))) $generated@@126))
 :pattern ( ($generated@@70 $generated@@71 $generated@@72 $generated@@4 ($generated@@73 $generated@@123 $generated@@124 $generated@@125 $generated@@126) $generated@@127 $generated@@128))
)))
(assert (forall (($generated@@129 Int) ($generated@@130 Int) ) (! (= ($generated@@24 $generated@@129 $generated@@130) (mod $generated@@129 $generated@@130))
 :pattern ( ($generated@@24 $generated@@129 $generated@@130))
)))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ) (!  (and (= ($generated@@131 ($generated@@27 $generated@@133 $generated@@134)) $generated@@133) (= ($generated@@132 ($generated@@27 $generated@@133 $generated@@134)) $generated@@134))
 :pattern ( ($generated@@27 $generated@@133 $generated@@134))
)))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@U) ) (!  (=> ($generated@@39 $generated@@135 ($generated@@38 $generated@@136)) (and (= ($generated@@29 $generated@@26 ($generated@@43 $generated@@26 $generated@@135)) $generated@@135) ($generated@@37 $generated@@26 ($generated@@43 $generated@@26 $generated@@135) ($generated@@38 $generated@@136))))
 :pattern ( ($generated@@39 $generated@@135 ($generated@@38 $generated@@136)))
)))
(assert (= ($generated@@66 $generated@@48) $generated@@1))
(assert (= ($generated@@137 $generated@@48) $generated@@2))
(assert (forall (($generated@@138 T@U) ) (! (= ($generated@@37 $generated@@5 $generated@@138 $generated@@48)  (and (<= ($generated@@21 0) ($generated@@10 $generated@@138)) (< ($generated@@10 $generated@@138) 256)))
 :pattern ( ($generated@@37 $generated@@5 $generated@@138 $generated@@48))
)))
(assert (forall (($generated@@139 Int) ) (! (= ($generated@@29 $generated@@5 ($generated@@9 ($generated@@21 $generated@@139))) ($generated@@25 $generated@@75 ($generated@@29 $generated@@5 ($generated@@9 $generated@@139))))
 :pattern ( ($generated@@29 $generated@@5 ($generated@@9 ($generated@@21 $generated@@139))))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@T) ) (! (= ($generated@@29 $generated@@141 ($generated@@25 $generated@@141 $generated@@140)) ($generated@@25 $generated@@75 ($generated@@29 $generated@@141 $generated@@140)))
 :pattern ( ($generated@@29 $generated@@141 ($generated@@25 $generated@@141 $generated@@140)))
)))
(assert (forall (($generated@@142 T@U) ) (!  (=> (= ($generated@@33 $generated@@142) 0) (= $generated@@142 $generated@@28))
 :pattern ( ($generated@@33 $generated@@142))
)))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@U) ) (! (= ($generated@@37 $generated@@26 $generated@@143 ($generated@@38 $generated@@144)) (forall (($generated@@145 Int) ) (!  (=> (and (<= 0 $generated@@145) (< $generated@@145 ($generated@@33 $generated@@143))) ($generated@@39 ($generated@@50 $generated@@143 $generated@@145) $generated@@144))
 :pattern ( ($generated@@50 $generated@@143 $generated@@145))
)))
 :pattern ( ($generated@@37 $generated@@26 $generated@@143 ($generated@@38 $generated@@144)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@146 () Int)
(declare-fun $generated@@147 () Int)
(declare-fun $generated@@148 () Int)
(declare-fun $generated@@149 () Int)
(declare-fun $generated@@150 () Int)
(declare-fun $generated@@151 () Int)
(declare-fun $generated@@152 () Int)
(declare-fun $generated@@153 () Int)
(declare-fun $generated@@154 () Int)
(declare-fun $generated@@155 () Int)
(declare-fun $generated@@156 () Int)
(declare-fun $generated@@157 () T@U)
(declare-fun $generated@@158 () T@U)
(declare-fun $generated@@159 () T@U)
(declare-fun $generated@@160 (T@U) Bool)
(declare-fun $generated@@161 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 14) (let (($generated@@162  (=> (= $generated@@146 ($generated@@21 256)) (and (=> (= (ControlFlow 0 3) (- 0 12)) (and (<= ($generated@@21 0) $generated@@146) (< $generated@@146 65536))) (=> (and (<= ($generated@@21 0) $generated@@146) (< $generated@@146 65536)) (and (=> (= (ControlFlow 0 3) (- 0 11)) (or (not (= ($generated@@21 256) 0)) (not true))) (=> (or (not (= ($generated@@21 256) 0)) (not true)) (=> (= $generated@@147 ($generated@@23 $generated@@148 ($generated@@21 256))) (and (=> (= (ControlFlow 0 3) (- 0 10)) (and (<= ($generated@@21 0) $generated@@147) (< $generated@@147 65536))) (=> (and (<= ($generated@@21 0) $generated@@147) (< $generated@@147 65536)) (=> (= $generated@@149 ($generated@@23 $generated@@148 ($generated@@21 256))) (and (=> (= (ControlFlow 0 3) (- 0 9)) (and (<= ($generated@@21 0) $generated@@149) (< $generated@@149 256))) (=> (and (<= ($generated@@21 0) $generated@@149) (< $generated@@149 256)) (=> (= $generated@@150 ($generated@@23 $generated@@148 ($generated@@21 256))) (and (=> (= (ControlFlow 0 3) (- 0 8)) (and (<= ($generated@@21 0) $generated@@150) (< $generated@@150 256))) (=> (and (<= ($generated@@21 0) $generated@@150) (< $generated@@150 256)) (=> (and (and (= $generated@@151 ($generated@@23 $generated@@148 ($generated@@21 256))) ($generated@@37 $generated@@5 ($generated@@9 $generated@@151) $generated@@48)) (and (= $generated@@152 $generated@@151) (= $generated@@153 ($generated@@21 256)))) (and (=> (= (ControlFlow 0 3) (- 0 7)) (and (<= ($generated@@21 0) $generated@@153) (< $generated@@153 65536))) (=> (and (<= ($generated@@21 0) $generated@@153) (< $generated@@153 65536)) (and (=> (= (ControlFlow 0 3) (- 0 6)) (or (not (= ($generated@@21 256) 0)) (not true))) (=> (or (not (= ($generated@@21 256) 0)) (not true)) (=> (= $generated@@154 ($generated@@24 $generated@@148 ($generated@@21 256))) (and (=> (= (ControlFlow 0 3) (- 0 5)) (and (<= ($generated@@21 0) $generated@@154) (< $generated@@154 65536))) (=> (and (<= ($generated@@21 0) $generated@@154) (< $generated@@154 65536)) (=> (= $generated@@155 ($generated@@24 $generated@@148 ($generated@@21 256))) (and (=> (= (ControlFlow 0 3) (- 0 4)) (and (<= ($generated@@21 0) $generated@@155) (< $generated@@155 256))) (=> (and (<= ($generated@@21 0) $generated@@155) (< $generated@@155 256)) (=> (and (= $generated@@156 ($generated@@24 $generated@@148 ($generated@@21 256))) (= (ControlFlow 0 3) (- 0 2))) (and (<= ($generated@@21 0) $generated@@156) (< $generated@@156 256))))))))))))))))))))))))))))))
(let (($generated@@163 true))
(let (($generated@@164  (=> (= $generated@@157 ($generated@@73 $generated@@158 $generated@@159 $generated@@0 false)) (and (=> (= (ControlFlow 0 13) 1) $generated@@163) (=> (= (ControlFlow 0 13) 3) $generated@@162)))))
(let (($generated@@165  (=> (and ($generated@@160 $generated@@159) ($generated@@161 $generated@@159)) (=> (and (and (<= ($generated@@21 0) $generated@@148) (< $generated@@148 65536)) (and (= 1 $generated@@19) (= (ControlFlow 0 14) 13))) $generated@@164))))
$generated@@165)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
