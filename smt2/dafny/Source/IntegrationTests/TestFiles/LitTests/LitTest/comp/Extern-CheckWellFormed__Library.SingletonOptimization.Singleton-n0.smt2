(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun alloc () T@U)
(declare-fun |##_System._tuple#2GO._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2GO () T@U)
(declare-fun |##_System._tuple#3OGG._#Make3| () T@U)
(declare-fun Tagclass._System.Tuple3OGG () T@U)
(declare-fun Tagclass.Library.MyInt () T@U)
(declare-fun |tytagFamily$_tuple#2GO| () T@U)
(declare-fun |tytagFamily$_tuple#3OGG| () T@U)
(declare-fun tytagFamily$MyInt () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass.Library.MyInt () T@U)
(declare-fun |$IsA#_System.Tuple2GO| (T@U) Bool)
(declare-fun _System.Tuple2GO.___hMake2_q (T@U) Bool)
(declare-fun |#_System._tuple#3OGG._#Make3| (T@U T@U T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun Tclass._System.Tuple3OGG (T@U T@U T@U) T@U)
(declare-fun Tclass._System.Tuple3OGG_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple3OGG_1 (T@U) T@U)
(declare-fun Tclass._System.Tuple3OGG_2 (T@U) T@U)
(declare-fun _System.Tuple3OGG._0 (T@U) T@U)
(declare-fun _System.Tuple3OGG._1 (T@U) T@U)
(declare-fun _System.Tuple3OGG._2 (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._System.Tuple2GO (T@U T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun |#_System._tuple#2GO._#Make2| (T@U T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun refType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun _System.Tuple3OGG.___hMake3_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2GO_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2GO_1 (T@U) T@U)
(declare-fun _System.Tuple2GO._0 (T@U) T@U)
(declare-fun _System.Tuple2GO._1 (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct alloc |##_System._tuple#2GO._#Make2| Tagclass._System.Tuple2GO |##_System._tuple#3OGG._#Make3| Tagclass._System.Tuple3OGG Tagclass.Library.MyInt |tytagFamily$_tuple#2GO| |tytagFamily$_tuple#3OGG| tytagFamily$MyInt)
)
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass.Library.MyInt $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass.Library.MyInt $h))
)))
(assert (forall ((d T@U) ) (!  (=> (|$IsA#_System.Tuple2GO| d) (_System.Tuple2GO.___hMake2_q d))
 :pattern ( (|$IsA#_System.Tuple2GO| d))
)))
(assert (forall ((|a#20#0#0| T@U) (|a#20#1#0| T@U) (|a#20#2#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#3OGG._#Make3| |a#20#0#0| |a#20#1#0| |a#20#2#0|)) |##_System._tuple#3OGG._#Make3|)
 :pattern ( (|#_System._tuple#3OGG._#Make3| |a#20#0#0| |a#20#1#0| |a#20#2#0|))
)))
(assert (forall ((|_System._tuple#3OGG$T0| T@U) (|_System._tuple#3OGG$T1| T@U) (|_System._tuple#3OGG$T2| T@U) ) (! (= (Tclass._System.Tuple3OGG_0 (Tclass._System.Tuple3OGG |_System._tuple#3OGG$T0| |_System._tuple#3OGG$T1| |_System._tuple#3OGG$T2|)) |_System._tuple#3OGG$T0|)
 :pattern ( (Tclass._System.Tuple3OGG |_System._tuple#3OGG$T0| |_System._tuple#3OGG$T1| |_System._tuple#3OGG$T2|))
)))
(assert (forall ((|_System._tuple#3OGG$T0@@0| T@U) (|_System._tuple#3OGG$T1@@0| T@U) (|_System._tuple#3OGG$T2@@0| T@U) ) (! (= (Tclass._System.Tuple3OGG_1 (Tclass._System.Tuple3OGG |_System._tuple#3OGG$T0@@0| |_System._tuple#3OGG$T1@@0| |_System._tuple#3OGG$T2@@0|)) |_System._tuple#3OGG$T1@@0|)
 :pattern ( (Tclass._System.Tuple3OGG |_System._tuple#3OGG$T0@@0| |_System._tuple#3OGG$T1@@0| |_System._tuple#3OGG$T2@@0|))
)))
(assert (forall ((|_System._tuple#3OGG$T0@@1| T@U) (|_System._tuple#3OGG$T1@@1| T@U) (|_System._tuple#3OGG$T2@@1| T@U) ) (! (= (Tclass._System.Tuple3OGG_2 (Tclass._System.Tuple3OGG |_System._tuple#3OGG$T0@@1| |_System._tuple#3OGG$T1@@1| |_System._tuple#3OGG$T2@@1|)) |_System._tuple#3OGG$T2@@1|)
 :pattern ( (Tclass._System.Tuple3OGG |_System._tuple#3OGG$T0@@1| |_System._tuple#3OGG$T1@@1| |_System._tuple#3OGG$T2@@1|))
)))
(assert (forall ((|a#24#0#0| T@U) (|a#24#1#0| T@U) (|a#24#2#0| T@U) ) (! (= (_System.Tuple3OGG._0 (|#_System._tuple#3OGG._#Make3| |a#24#0#0| |a#24#1#0| |a#24#2#0|)) |a#24#0#0|)
 :pattern ( (|#_System._tuple#3OGG._#Make3| |a#24#0#0| |a#24#1#0| |a#24#2#0|))
)))
(assert (forall ((|a#26#0#0| T@U) (|a#26#1#0| T@U) (|a#26#2#0| T@U) ) (! (= (_System.Tuple3OGG._1 (|#_System._tuple#3OGG._#Make3| |a#26#0#0| |a#26#1#0| |a#26#2#0|)) |a#26#1#0|)
 :pattern ( (|#_System._tuple#3OGG._#Make3| |a#26#0#0| |a#26#1#0| |a#26#2#0|))
)))
(assert (forall ((|a#28#0#0| T@U) (|a#28#1#0| T@U) (|a#28#2#0| T@U) ) (! (= (_System.Tuple3OGG._2 (|#_System._tuple#3OGG._#Make3| |a#28#0#0| |a#28#1#0| |a#28#2#0|)) |a#28#2#0|)
 :pattern ( (|#_System._tuple#3OGG._#Make3| |a#28#0#0| |a#28#1#0| |a#28#2#0|))
)))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((|_System._tuple#2GO$T0| T@U) (|_System._tuple#2GO$T1| T@U) (d@@0 T@U) ) (!  (=> ($Is DatatypeTypeType d@@0 (Tclass._System.Tuple2GO |_System._tuple#2GO$T0| |_System._tuple#2GO$T1|)) (_System.Tuple2GO.___hMake2_q d@@0))
 :pattern ( (_System.Tuple2GO.___hMake2_q d@@0) ($Is DatatypeTypeType d@@0 (Tclass._System.Tuple2GO |_System._tuple#2GO$T0| |_System._tuple#2GO$T1|)))
)))
(assert (forall ((|_System._tuple#3OGG$T0@@2| T@U) (|_System._tuple#3OGG$T1@@2| T@U) (|_System._tuple#3OGG$T2@@2| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple3OGG |_System._tuple#3OGG$T0@@2| |_System._tuple#3OGG$T1@@2| |_System._tuple#3OGG$T2@@2|)) Tagclass._System.Tuple3OGG) (= (TagFamily (Tclass._System.Tuple3OGG |_System._tuple#3OGG$T0@@2| |_System._tuple#3OGG$T1@@2| |_System._tuple#3OGG$T2@@2|)) |tytagFamily$_tuple#3OGG|))
 :pattern ( (Tclass._System.Tuple3OGG |_System._tuple#3OGG$T0@@2| |_System._tuple#3OGG$T1@@2| |_System._tuple#3OGG$T2@@2|))
)))
(assert (forall ((|_System._tuple#3OGG$T0@@3| T@U) (|_System._tuple#3OGG$T1@@3| T@U) (|_System._tuple#3OGG$T2@@3| T@U) (bx T@U) ) (!  (=> ($IsBox bx (Tclass._System.Tuple3OGG |_System._tuple#3OGG$T0@@3| |_System._tuple#3OGG$T1@@3| |_System._tuple#3OGG$T2@@3|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx)) bx) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx) (Tclass._System.Tuple3OGG |_System._tuple#3OGG$T0@@3| |_System._tuple#3OGG$T1@@3| |_System._tuple#3OGG$T2@@3|))))
 :pattern ( ($IsBox bx (Tclass._System.Tuple3OGG |_System._tuple#3OGG$T0@@3| |_System._tuple#3OGG$T1@@3| |_System._tuple#3OGG$T2@@3|)))
)))
(assert (forall ((|_System._tuple#2GO$T0@@0| T@U) (|_System._tuple#2GO$T1@@0| T@U) (|a#14#0#0| T@U) (|a#14#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2GO._#Make2| |a#14#0#0| |a#14#1#0|) (Tclass._System.Tuple2GO |_System._tuple#2GO$T0@@0| |_System._tuple#2GO$T1@@0|))  (and ($IsBox |a#14#0#0| |_System._tuple#2GO$T0@@0|) ($IsBox |a#14#1#0| |_System._tuple#2GO$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2GO._#Make2| |a#14#0#0| |a#14#1#0|) (Tclass._System.Tuple2GO |_System._tuple#2GO$T0@@0| |_System._tuple#2GO$T1@@0|)))
)))
(assert  (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (= (Ctor refType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((|_System._tuple#2GO$T0@@1| T@U) (|_System._tuple#2GO$T1@@1| T@U) (|a#14#0#0@@0| T@U) (|a#14#1#0@@0| T@U) ($h@@0 T@U) ) (!  (=> ($IsGoodHeap $h@@0) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2GO._#Make2| |a#14#0#0@@0| |a#14#1#0@@0|) (Tclass._System.Tuple2GO |_System._tuple#2GO$T0@@1| |_System._tuple#2GO$T1@@1|) $h@@0)  (and ($IsAllocBox |a#14#0#0@@0| |_System._tuple#2GO$T0@@1| $h@@0) ($IsAllocBox |a#14#1#0@@0| |_System._tuple#2GO$T1@@1| $h@@0))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2GO._#Make2| |a#14#0#0@@0| |a#14#1#0@@0|) (Tclass._System.Tuple2GO |_System._tuple#2GO$T0@@1| |_System._tuple#2GO$T1@@1|) $h@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_System.Tuple2GO.___hMake2_q d@@1) (= (DatatypeCtorId d@@1) |##_System._tuple#2GO._#Make2|))
 :pattern ( (_System.Tuple2GO.___hMake2_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (_System.Tuple3OGG.___hMake3_q d@@2) (= (DatatypeCtorId d@@2) |##_System._tuple#3OGG._#Make3|))
 :pattern ( (_System.Tuple3OGG.___hMake3_q d@@2))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (_System.Tuple3OGG.___hMake3_q d@@3) (exists ((|a#21#0#0| T@U) (|a#21#1#0| T@U) (|a#21#2#0| T@U) ) (= d@@3 (|#_System._tuple#3OGG._#Make3| |a#21#0#0| |a#21#1#0| |a#21#2#0|))))
 :pattern ( (_System.Tuple3OGG.___hMake3_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (_System.Tuple2GO.___hMake2_q d@@4) (exists ((|a#13#0#0| T@U) (|a#13#1#0| T@U) ) (= d@@4 (|#_System._tuple#2GO._#Make2| |a#13#0#0| |a#13#1#0|))))
 :pattern ( (_System.Tuple2GO.___hMake2_q d@@4))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass.Library.MyInt)  (and (<= (LitInt (- 0 100)) (U_2_int |x#0@@0|)) (< (U_2_int |x#0@@0|) 2147483648)))
 :pattern ( ($Is intType |x#0@@0| Tclass.Library.MyInt))
)))
(assert (forall ((|_System._tuple#3OGG$T0@@4| T@U) (|_System._tuple#3OGG$T1@@4| T@U) (|_System._tuple#3OGG$T2@@4| T@U) (|a#22#0#0| T@U) (|a#22#1#0| T@U) (|a#22#2#0| T@U) ($h@@1 T@U) ) (!  (=> ($IsGoodHeap $h@@1) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#3OGG._#Make3| |a#22#0#0| |a#22#1#0| |a#22#2#0|) (Tclass._System.Tuple3OGG |_System._tuple#3OGG$T0@@4| |_System._tuple#3OGG$T1@@4| |_System._tuple#3OGG$T2@@4|) $h@@1)  (and (and ($IsAllocBox |a#22#0#0| |_System._tuple#3OGG$T0@@4| $h@@1) ($IsAllocBox |a#22#1#0| |_System._tuple#3OGG$T1@@4| $h@@1)) ($IsAllocBox |a#22#2#0| |_System._tuple#3OGG$T2@@4| $h@@1))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#3OGG._#Make3| |a#22#0#0| |a#22#1#0| |a#22#2#0|) (Tclass._System.Tuple3OGG |_System._tuple#3OGG$T0@@4| |_System._tuple#3OGG$T1@@4| |_System._tuple#3OGG$T2@@4|) $h@@1))
)))
(assert (forall ((v T@U) (t T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v) t h@@0) ($IsAlloc T@@1 v t h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v) t h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@0 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@0 t@@0 h@@1) ($IsAllocBox bx@@0 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@0 t@@0 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@0 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@0 t@@1 h@@2) ($IsAlloc T@@2 v@@0 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@0 t@@1 h@@2))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass.Library.MyInt) (and (= ($Box intType ($Unbox intType bx@@1)) bx@@1) ($Is intType ($Unbox intType bx@@1) Tclass.Library.MyInt)))
 :pattern ( ($IsBox bx@@1 Tclass.Library.MyInt))
)))
(assert (forall ((|_System._tuple#3OGG$T0@@5| T@U) (|_System._tuple#3OGG$T1@@5| T@U) (|_System._tuple#3OGG$T2@@5| T@U) (d@@5 T@U) ) (!  (=> ($Is DatatypeTypeType d@@5 (Tclass._System.Tuple3OGG |_System._tuple#3OGG$T0@@5| |_System._tuple#3OGG$T1@@5| |_System._tuple#3OGG$T2@@5|)) (_System.Tuple3OGG.___hMake3_q d@@5))
 :pattern ( (_System.Tuple3OGG.___hMake3_q d@@5) ($Is DatatypeTypeType d@@5 (Tclass._System.Tuple3OGG |_System._tuple#3OGG$T0@@5| |_System._tuple#3OGG$T1@@5| |_System._tuple#3OGG$T2@@5|)))
)))
(assert (forall ((|_System._tuple#3OGG$T0@@6| T@U) (|_System._tuple#3OGG$T1@@6| T@U) (|_System._tuple#3OGG$T2@@6| T@U) (|a#22#0#0@@0| T@U) (|a#22#1#0@@0| T@U) (|a#22#2#0@@0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#3OGG._#Make3| |a#22#0#0@@0| |a#22#1#0@@0| |a#22#2#0@@0|) (Tclass._System.Tuple3OGG |_System._tuple#3OGG$T0@@6| |_System._tuple#3OGG$T1@@6| |_System._tuple#3OGG$T2@@6|))  (and (and ($IsBox |a#22#0#0@@0| |_System._tuple#3OGG$T0@@6|) ($IsBox |a#22#1#0@@0| |_System._tuple#3OGG$T1@@6|)) ($IsBox |a#22#2#0@@0| |_System._tuple#3OGG$T2@@6|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#3OGG._#Make3| |a#22#0#0@@0| |a#22#1#0@@0| |a#22#2#0@@0|) (Tclass._System.Tuple3OGG |_System._tuple#3OGG$T0@@6| |_System._tuple#3OGG$T1@@6| |_System._tuple#3OGG$T2@@6|)))
)))
(assert (forall ((a T@U) (b T@U) (c T@U) ) (!  (=> (or (not (= a c)) (not true)) (=> (and ($HeapSucc a b) ($HeapSucc b c)) ($HeapSucc a c)))
 :pattern ( ($HeapSucc a b) ($HeapSucc b c))
)))
(assert (forall ((v@@1 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@1) t@@2) ($Is T@@3 v@@1 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@1) t@@2))
)))
(assert (forall ((|a#12#0#0| T@U) (|a#12#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2GO._#Make2| |a#12#0#0| |a#12#1#0|)) |##_System._tuple#2GO._#Make2|)
 :pattern ( (|#_System._tuple#2GO._#Make2| |a#12#0#0| |a#12#1#0|))
)))
(assert (forall ((|_System._tuple#2GO$T0@@2| T@U) (|_System._tuple#2GO$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2GO_0 (Tclass._System.Tuple2GO |_System._tuple#2GO$T0@@2| |_System._tuple#2GO$T1@@2|)) |_System._tuple#2GO$T0@@2|)
 :pattern ( (Tclass._System.Tuple2GO |_System._tuple#2GO$T0@@2| |_System._tuple#2GO$T1@@2|))
)))
(assert (forall ((|_System._tuple#2GO$T0@@3| T@U) (|_System._tuple#2GO$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2GO_1 (Tclass._System.Tuple2GO |_System._tuple#2GO$T0@@3| |_System._tuple#2GO$T1@@3|)) |_System._tuple#2GO$T1@@3|)
 :pattern ( (Tclass._System.Tuple2GO |_System._tuple#2GO$T0@@3| |_System._tuple#2GO$T1@@3|))
)))
(assert (forall ((|a#16#0#0| T@U) (|a#16#1#0| T@U) ) (! (= (_System.Tuple2GO._0 (|#_System._tuple#2GO._#Make2| |a#16#0#0| |a#16#1#0|)) |a#16#0#0|)
 :pattern ( (|#_System._tuple#2GO._#Make2| |a#16#0#0| |a#16#1#0|))
)))
(assert (forall ((|a#18#0#0| T@U) (|a#18#1#0| T@U) ) (! (= (_System.Tuple2GO._1 (|#_System._tuple#2GO._#Make2| |a#18#0#0| |a#18#1#0|)) |a#18#1#0|)
 :pattern ( (|#_System._tuple#2GO._#Make2| |a#18#0#0| |a#18#1#0|))
)))
(assert (forall ((|a#23#0#0| T@U) (|a#23#1#0| T@U) (|a#23#2#0| T@U) ) (! (= (|#_System._tuple#3OGG._#Make3| (Lit BoxType |a#23#0#0|) (Lit BoxType |a#23#1#0|) (Lit BoxType |a#23#2#0|)) (Lit DatatypeTypeType (|#_System._tuple#3OGG._#Make3| |a#23#0#0| |a#23#1#0| |a#23#2#0|)))
 :pattern ( (|#_System._tuple#3OGG._#Make3| (Lit BoxType |a#23#0#0|) (Lit BoxType |a#23#1#0|) (Lit BoxType |a#23#2#0|)))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert (forall ((|a#25#0#0| T@U) (|a#25#1#0| T@U) (|a#25#2#0| T@U) ) (! (< (BoxRank |a#25#0#0|) (DtRank (|#_System._tuple#3OGG._#Make3| |a#25#0#0| |a#25#1#0| |a#25#2#0|)))
 :pattern ( (|#_System._tuple#3OGG._#Make3| |a#25#0#0| |a#25#1#0| |a#25#2#0|))
)))
(assert (forall ((|a#27#0#0| T@U) (|a#27#1#0| T@U) (|a#27#2#0| T@U) ) (! (< (BoxRank |a#27#1#0|) (DtRank (|#_System._tuple#3OGG._#Make3| |a#27#0#0| |a#27#1#0| |a#27#2#0|)))
 :pattern ( (|#_System._tuple#3OGG._#Make3| |a#27#0#0| |a#27#1#0| |a#27#2#0|))
)))
(assert (forall ((|a#29#0#0| T@U) (|a#29#1#0| T@U) (|a#29#2#0| T@U) ) (! (< (BoxRank |a#29#2#0|) (DtRank (|#_System._tuple#3OGG._#Make3| |a#29#0#0| |a#29#1#0| |a#29#2#0|)))
 :pattern ( (|#_System._tuple#3OGG._#Make3| |a#29#0#0| |a#29#1#0| |a#29#2#0|))
)))
(assert (forall ((|a#17#0#0| T@U) (|a#17#1#0| T@U) ) (! (< (BoxRank |a#17#0#0|) (DtRank (|#_System._tuple#2GO._#Make2| |a#17#0#0| |a#17#1#0|)))
 :pattern ( (|#_System._tuple#2GO._#Make2| |a#17#0#0| |a#17#1#0|))
)))
(assert (forall ((|a#19#0#0| T@U) (|a#19#1#0| T@U) ) (! (< (BoxRank |a#19#1#0|) (DtRank (|#_System._tuple#2GO._#Make2| |a#19#0#0| |a#19#1#0|)))
 :pattern ( (|#_System._tuple#2GO._#Make2| |a#19#0#0| |a#19#1#0|))
)))
(assert (forall ((|_System._tuple#2GO$T0@@4| T@U) (|_System._tuple#2GO$T1@@4| T@U) (bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 (Tclass._System.Tuple2GO |_System._tuple#2GO$T0@@4| |_System._tuple#2GO$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@2)) bx@@2) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@2) (Tclass._System.Tuple2GO |_System._tuple#2GO$T0@@4| |_System._tuple#2GO$T1@@4|))))
 :pattern ( ($IsBox bx@@2 (Tclass._System.Tuple2GO |_System._tuple#2GO$T0@@4| |_System._tuple#2GO$T1@@4|)))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((|_System._tuple#2GO$T0@@5| T@U) (|_System._tuple#2GO$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2GO |_System._tuple#2GO$T0@@5| |_System._tuple#2GO$T1@@5|)) Tagclass._System.Tuple2GO) (= (TagFamily (Tclass._System.Tuple2GO |_System._tuple#2GO$T0@@5| |_System._tuple#2GO$T1@@5|)) |tytagFamily$_tuple#2GO|))
 :pattern ( (Tclass._System.Tuple2GO |_System._tuple#2GO$T0@@5| |_System._tuple#2GO$T1@@5|))
)))
(assert (forall ((d@@6 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@6)) (DtRank d@@6))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@6)))
)))
(assert (forall ((d@@7 T@U) (|_System._tuple#3OGG$T0@@7| T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (_System.Tuple3OGG.___hMake3_q d@@7) (exists ((|_System._tuple#3OGG$T1@@7| T@U) (|_System._tuple#3OGG$T2@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@7 (Tclass._System.Tuple3OGG |_System._tuple#3OGG$T0@@7| |_System._tuple#3OGG$T1@@7| |_System._tuple#3OGG$T2@@7|) $h@@2)
 :pattern ( ($IsAlloc DatatypeTypeType d@@7 (Tclass._System.Tuple3OGG |_System._tuple#3OGG$T0@@7| |_System._tuple#3OGG$T1@@7| |_System._tuple#3OGG$T2@@7|) $h@@2))
)))) ($IsAllocBox (_System.Tuple3OGG._0 d@@7) |_System._tuple#3OGG$T0@@7| $h@@2))
 :pattern ( ($IsAllocBox (_System.Tuple3OGG._0 d@@7) |_System._tuple#3OGG$T0@@7| $h@@2))
)))
(assert (forall ((d@@8 T@U) (|_System._tuple#3OGG$T1@@8| T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_System.Tuple3OGG.___hMake3_q d@@8) (exists ((|_System._tuple#3OGG$T0@@8| T@U) (|_System._tuple#3OGG$T2@@8| T@U) ) (! ($IsAlloc DatatypeTypeType d@@8 (Tclass._System.Tuple3OGG |_System._tuple#3OGG$T0@@8| |_System._tuple#3OGG$T1@@8| |_System._tuple#3OGG$T2@@8|) $h@@3)
 :pattern ( ($IsAlloc DatatypeTypeType d@@8 (Tclass._System.Tuple3OGG |_System._tuple#3OGG$T0@@8| |_System._tuple#3OGG$T1@@8| |_System._tuple#3OGG$T2@@8|) $h@@3))
)))) ($IsAllocBox (_System.Tuple3OGG._1 d@@8) |_System._tuple#3OGG$T1@@8| $h@@3))
 :pattern ( ($IsAllocBox (_System.Tuple3OGG._1 d@@8) |_System._tuple#3OGG$T1@@8| $h@@3))
)))
(assert (forall ((d@@9 T@U) (|_System._tuple#3OGG$T2@@9| T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) (and (_System.Tuple3OGG.___hMake3_q d@@9) (exists ((|_System._tuple#3OGG$T0@@9| T@U) (|_System._tuple#3OGG$T1@@9| T@U) ) (! ($IsAlloc DatatypeTypeType d@@9 (Tclass._System.Tuple3OGG |_System._tuple#3OGG$T0@@9| |_System._tuple#3OGG$T1@@9| |_System._tuple#3OGG$T2@@9|) $h@@4)
 :pattern ( ($IsAlloc DatatypeTypeType d@@9 (Tclass._System.Tuple3OGG |_System._tuple#3OGG$T0@@9| |_System._tuple#3OGG$T1@@9| |_System._tuple#3OGG$T2@@9|) $h@@4))
)))) ($IsAllocBox (_System.Tuple3OGG._2 d@@9) |_System._tuple#3OGG$T2@@9| $h@@4))
 :pattern ( ($IsAllocBox (_System.Tuple3OGG._2 d@@9) |_System._tuple#3OGG$T2@@9| $h@@4))
)))
(assert (= (Tag Tclass.Library.MyInt) Tagclass.Library.MyInt))
(assert (= (TagFamily Tclass.Library.MyInt) tytagFamily$MyInt))
(assert (forall ((d@@10 T@U) (|_System._tuple#2GO$T0@@6| T@U) ($h@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) (and (_System.Tuple2GO.___hMake2_q d@@10) (exists ((|_System._tuple#2GO$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@10 (Tclass._System.Tuple2GO |_System._tuple#2GO$T0@@6| |_System._tuple#2GO$T1@@6|) $h@@5)
 :pattern ( ($IsAlloc DatatypeTypeType d@@10 (Tclass._System.Tuple2GO |_System._tuple#2GO$T0@@6| |_System._tuple#2GO$T1@@6|) $h@@5))
)))) ($IsAllocBox (_System.Tuple2GO._0 d@@10) |_System._tuple#2GO$T0@@6| $h@@5))
 :pattern ( ($IsAllocBox (_System.Tuple2GO._0 d@@10) |_System._tuple#2GO$T0@@6| $h@@5))
)))
(assert (forall ((d@@11 T@U) (|_System._tuple#2GO$T1@@7| T@U) ($h@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (_System.Tuple2GO.___hMake2_q d@@11) (exists ((|_System._tuple#2GO$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@11 (Tclass._System.Tuple2GO |_System._tuple#2GO$T0@@7| |_System._tuple#2GO$T1@@7|) $h@@6)
 :pattern ( ($IsAlloc DatatypeTypeType d@@11 (Tclass._System.Tuple2GO |_System._tuple#2GO$T0@@7| |_System._tuple#2GO$T1@@7|) $h@@6))
)))) ($IsAllocBox (_System.Tuple2GO._1 d@@11) |_System._tuple#2GO$T1@@7| $h@@6))
 :pattern ( ($IsAllocBox (_System.Tuple2GO._1 d@@11) |_System._tuple#2GO$T1@@7| $h@@6))
)))
(assert (forall ((|a#15#0#0| T@U) (|a#15#1#0| T@U) ) (! (= (|#_System._tuple#2GO._#Make2| (Lit BoxType |a#15#0#0|) (Lit BoxType |a#15#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2GO._#Make2| |a#15#0#0| |a#15#1#0|)))
 :pattern ( (|#_System._tuple#2GO._#Make2| (Lit BoxType |a#15#0#0|) (Lit BoxType |a#15#1#0|)))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@7)) (Lit BoxType ($Box T@@5 x@@7)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@7)))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $Heap () T@U)
(declare-fun |a#0| () T@U)
(declare-fun |newtype$check#0@0| () Int)
(declare-fun $Heap@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |b#0@0| () T@U)
(declare-fun |newtype$check#1@0| () Int)
(declare-fun |newtype$check#2@0| () Int)
(declare-fun |b#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 5) (let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and (_System.Tuple2GO.___hMake2_q |a#0|) (= |newtype$check#0@0| (LitInt 2147483647))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (and (<= (LitInt (- 0 100)) |newtype$check#0@0|) (< |newtype$check#0@0| 2147483648))) (=> (and (<= (LitInt (- 0 100)) |newtype$check#0@0|) (< |newtype$check#0@0| 2147483648)) (=> (< (U_2_int ($Unbox intType (_System.Tuple2GO._1 |a#0|))) 2147483647) (=> (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (forall (($o@@0 T@U) ) (!  (=> (and (or (not (= $o@@0 null)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0) alloc)))) (= (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0) (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $o@@0)))
 :pattern ( (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $o@@0))
)) ($HeapSucc $Heap $Heap@0))) (=> (and (and (and ($Is DatatypeTypeType |b#0@0| (Tclass._System.Tuple3OGG Tclass.Library.MyInt Tclass.Library.MyInt Tclass.Library.MyInt)) ($IsAlloc DatatypeTypeType |b#0@0| (Tclass._System.Tuple3OGG Tclass.Library.MyInt Tclass.Library.MyInt Tclass.Library.MyInt) $Heap@0)) (_System.Tuple3OGG.___hMake3_q |b#0@0|)) (and (_System.Tuple2GO.___hMake2_q |a#0|) (= |newtype$check#1@0| (LitInt 1)))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (<= (LitInt (- 0 100)) |newtype$check#1@0|) (< |newtype$check#1@0| 2147483648))) (=> (and (<= (LitInt (- 0 100)) |newtype$check#1@0|) (< |newtype$check#1@0| 2147483648)) (=> (and (= |newtype$check#2@0| (+ (U_2_int ($Unbox intType (_System.Tuple2GO._1 |a#0|))) 1)) (= (ControlFlow 0 2) (- 0 1))) (and (<= (LitInt (- 0 100)) |newtype$check#2@0|) (< |newtype$check#2@0| 2147483648))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and (and ($Is DatatypeTypeType |a#0| (Tclass._System.Tuple2GO Tclass.Library.MyInt Tclass.Library.MyInt)) ($IsAlloc DatatypeTypeType |a#0| (Tclass._System.Tuple2GO Tclass.Library.MyInt Tclass.Library.MyInt) $Heap)) (|$IsA#_System.Tuple2GO| |a#0|)) (and (and ($Is DatatypeTypeType |b#0| (Tclass._System.Tuple3OGG Tclass.Library.MyInt Tclass.Library.MyInt Tclass.Library.MyInt)) ($IsAlloc DatatypeTypeType |b#0| (Tclass._System.Tuple3OGG Tclass.Library.MyInt Tclass.Library.MyInt Tclass.Library.MyInt) $Heap)) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 5) 2)))) anon0_correct))))
PreconditionGeneratedEntry_correct)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
