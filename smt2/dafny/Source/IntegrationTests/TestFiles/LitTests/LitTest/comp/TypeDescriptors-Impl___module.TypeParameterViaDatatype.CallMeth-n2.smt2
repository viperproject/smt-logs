(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 (T@T) Int)
(declare-fun $generated@@3 () T@T)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 (Bool) T@U)
(declare-fun $generated@@7 (T@U) Bool)
(declare-fun $generated@@8 (Int) T@U)
(declare-fun $generated@@9 (T@U) Int)
(declare-fun $generated@@10 (Real) T@U)
(declare-fun $generated@@11 (T@U) Real)
(declare-fun $generated@@18 (T@U) Int)
(declare-fun $generated@@19 () T@U)
(declare-fun $generated@@20 (T@U T@U) Bool)
(declare-fun $generated@@21 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@22 () T@T)
(declare-fun $generated@@23 () T@T)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 (T@T T@T) T@T)
(declare-fun $generated@@26 (T@T T@U) T@U)
(declare-fun $generated@@27 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@28 (T@T) T@T)
(declare-fun $generated@@29 (T@T) T@T)
(declare-fun $generated@@50 (T@T T@U) T@U)
(declare-fun $generated@@53 (T@T T@U) T@U)
(declare-fun $generated@@56 (T@U T@U) T@U)
(declare-fun $generated@@59 (T@U T@U T@U) Bool)
(declare-fun $generated@@60 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@74 (T@U) T@U)
(declare-fun $generated@@75 (T@U) T@U)
(declare-fun $generated@@76 (T@U) T@U)
(declare-fun $generated@@81 (T@U T@U) Bool)
(declare-fun $generated@@82 (T@T T@U T@U) Bool)
(declare-fun $generated@@87 (T@U) T@U)
(declare-fun $generated@@91 (Int) T@U)
(declare-fun $generated@@92 (T@U) Int)
(declare-fun $generated@@94 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@95 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@96 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@128 (T@U) T@U)
(declare-fun $generated@@129 (T@U) T@U)
(declare-fun $generated@@132 () T@T)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@2 $generated@@3) 0) (= ($generated@@2 $generated@@4) 1)) (= ($generated@@2 $generated@@5) 2)) (forall (($generated@@12 Bool) ) (! (= ($generated@@7 ($generated@@6 $generated@@12)) $generated@@12)
 :pattern ( ($generated@@6 $generated@@12))
))) (forall (($generated@@13 T@U) ) (! (= ($generated@@6 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 Int) ) (! (= ($generated@@9 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 T@U) ) (! (= ($generated@@8 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 Real) ) (! (= ($generated@@11 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 T@U) ) (! (= ($generated@@10 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))))
(assert (distinct $generated $generated@@0 $generated@@1)
)
(assert (= ($generated@@18 $generated@@19) 0))
(assert  (and (and (and (and (and (and (and (forall (($generated@@30 T@T) ($generated@@31 T@T) ($generated@@32 T@U) ($generated@@33 T@U) ($generated@@34 T@U) ) (! (= ($generated@@21 $generated@@30 $generated@@31 ($generated@@27 $generated@@30 $generated@@31 $generated@@33 $generated@@34 $generated@@32) $generated@@34) $generated@@32)
 :weight 0
)) (forall (($generated@@35 T@T) ($generated@@36 T@T) ($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 T@U) ($generated@@40 T@U) ) (!  (or (= $generated@@39 $generated@@40) (= ($generated@@21 $generated@@35 $generated@@36 ($generated@@27 $generated@@35 $generated@@36 $generated@@38 $generated@@39 $generated@@37) $generated@@40) ($generated@@21 $generated@@35 $generated@@36 $generated@@38 $generated@@40)))
 :weight 0
))) (= ($generated@@2 $generated@@22) 3)) (= ($generated@@2 $generated@@23) 4)) (= ($generated@@2 $generated@@24) 5)) (forall (($generated@@41 T@T) ($generated@@42 T@T) ) (= ($generated@@2 ($generated@@25 $generated@@41 $generated@@42)) 6))) (forall (($generated@@43 T@T) ($generated@@44 T@T) ) (! (= ($generated@@28 ($generated@@25 $generated@@43 $generated@@44)) $generated@@43)
 :pattern ( ($generated@@25 $generated@@43 $generated@@44))
))) (forall (($generated@@45 T@T) ($generated@@46 T@T) ) (! (= ($generated@@29 ($generated@@25 $generated@@45 $generated@@46)) $generated@@46)
 :pattern ( ($generated@@25 $generated@@45 $generated@@46))
))))
(assert (forall (($generated@@47 T@U) ($generated@@48 T@U) ) (!  (=> ($generated@@20 $generated@@47 $generated@@48) (forall (($generated@@49 T@U) ) (!  (=> ($generated@@7 ($generated@@26 $generated@@3 ($generated@@21 $generated@@22 $generated@@23 ($generated@@21 $generated@@24 ($generated@@25 $generated@@22 $generated@@23) $generated@@47 $generated@@49) $generated))) ($generated@@7 ($generated@@26 $generated@@3 ($generated@@21 $generated@@22 $generated@@23 ($generated@@21 $generated@@24 ($generated@@25 $generated@@22 $generated@@23) $generated@@48 $generated@@49) $generated))))
 :pattern ( ($generated@@21 $generated@@22 $generated@@23 ($generated@@21 $generated@@24 ($generated@@25 $generated@@22 $generated@@23) $generated@@48 $generated@@49) $generated))
)))
 :pattern ( ($generated@@20 $generated@@47 $generated@@48))
)))
(assert (forall (($generated@@51 T@U) ($generated@@52 T@T) ) (! (= ($generated@@50 $generated@@52 $generated@@51) $generated@@51)
 :pattern ( ($generated@@50 $generated@@52 $generated@@51))
)))
(assert (forall (($generated@@54 T@U) ($generated@@55 T@T) ) (! (= ($generated@@53 $generated@@55 ($generated@@26 $generated@@55 $generated@@54)) $generated@@54)
 :pattern ( ($generated@@26 $generated@@55 $generated@@54))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@U) ) (! (= ($generated@@18 ($generated@@56 $generated@@57 $generated@@58)) (+ 1 ($generated@@18 $generated@@57)))
 :pattern ( ($generated@@56 $generated@@57 $generated@@58))
)))
(assert (forall (($generated@@61 T@U) ($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@59 ($generated@@53 $generated@@64 $generated@@61) $generated@@62 $generated@@63) ($generated@@60 $generated@@64 $generated@@61 $generated@@62 $generated@@63))
 :pattern ( ($generated@@59 ($generated@@53 $generated@@64 $generated@@61) $generated@@62 $generated@@63))
)))
(assert (forall (($generated@@65 T@U) ($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ) (!  (=> ($generated@@20 $generated@@65 $generated@@66) (=> ($generated@@59 $generated@@67 $generated@@68 $generated@@65) ($generated@@59 $generated@@67 $generated@@68 $generated@@66)))
 :pattern ( ($generated@@20 $generated@@65 $generated@@66) ($generated@@59 $generated@@67 $generated@@68 $generated@@65))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@T) ) (!  (=> ($generated@@20 $generated@@69 $generated@@70) (=> ($generated@@60 $generated@@73 $generated@@71 $generated@@72 $generated@@69) ($generated@@60 $generated@@73 $generated@@71 $generated@@72 $generated@@70)))
 :pattern ( ($generated@@20 $generated@@69 $generated@@70) ($generated@@60 $generated@@73 $generated@@71 $generated@@72 $generated@@69))
)))
(assert (forall (($generated@@77 T@U) ) (!  (and (= ($generated@@75 ($generated@@74 $generated@@77)) $generated@@0) (= ($generated@@76 ($generated@@74 $generated@@77)) $generated@@1))
 :pattern ( ($generated@@74 $generated@@77))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ($generated@@80 T@U) ) (!  (=> (or (not (= $generated@@78 $generated@@80)) (not true)) (=> (and ($generated@@20 $generated@@78 $generated@@79) ($generated@@20 $generated@@79 $generated@@80)) ($generated@@20 $generated@@78 $generated@@80)))
 :pattern ( ($generated@@20 $generated@@78 $generated@@79) ($generated@@20 $generated@@79 $generated@@80))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ($generated@@85 T@T) ) (! (= ($generated@@81 ($generated@@53 $generated@@85 $generated@@83) $generated@@84) ($generated@@82 $generated@@85 $generated@@83 $generated@@84))
 :pattern ( ($generated@@81 ($generated@@53 $generated@@85 $generated@@83) $generated@@84))
)))
(assert (forall (($generated@@86 T@U) ) (! (<= 0 ($generated@@18 $generated@@86))
 :pattern ( ($generated@@18 $generated@@86))
)))
(assert (forall (($generated@@88 T@U) ) (! (= ($generated@@87 ($generated@@74 $generated@@88)) $generated@@88)
 :pattern ( ($generated@@74 $generated@@88))
)))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@T) ) (! (= ($generated@@26 $generated@@90 ($generated@@53 $generated@@90 $generated@@89)) $generated@@89)
 :pattern ( ($generated@@53 $generated@@90 $generated@@89))
)))
(assert (forall (($generated@@93 Int) ) (!  (=> (or (and (<= 0 $generated@@93) (< $generated@@93 55296)) (and (<= 57344 $generated@@93) (< $generated@@93 1114112))) (= ($generated@@92 ($generated@@91 $generated@@93)) $generated@@93))
 :pattern ( ($generated@@91 $generated@@93))
)))
(assert  (and (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@94 $generated@@97 $generated@@98 $generated@@99 ($generated@@96 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@103 $generated@@100) $generated@@102 $generated@@103) $generated@@100)
 :weight 0
)) (and (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or (= $generated@@109 $generated@@111) (= ($generated@@94 $generated@@104 $generated@@105 $generated@@106 ($generated@@96 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@111 $generated@@112) ($generated@@94 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@111 $generated@@112)))
 :weight 0
)) (forall (($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (!  (or (= $generated@@119 $generated@@121) (= ($generated@@94 $generated@@113 $generated@@114 $generated@@115 ($generated@@96 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@118 $generated@@119 $generated@@116) $generated@@120 $generated@@121) ($generated@@94 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@120 $generated@@121)))
 :weight 0
)))))
(assert (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 Bool) ($generated@@126 T@U) ($generated@@127 T@U) ) (! (= ($generated@@7 ($generated@@94 $generated@@24 $generated@@22 $generated@@3 ($generated@@95 $generated@@122 $generated@@123 $generated@@124 $generated@@125) $generated@@126 $generated@@127))  (=> (and (or (not (= $generated@@126 $generated@@122)) (not true)) ($generated@@7 ($generated@@26 $generated@@3 ($generated@@21 $generated@@22 $generated@@23 ($generated@@21 $generated@@24 ($generated@@25 $generated@@22 $generated@@23) $generated@@123 $generated@@126) $generated@@124)))) $generated@@125))
 :pattern ( ($generated@@94 $generated@@24 $generated@@22 $generated@@3 ($generated@@95 $generated@@122 $generated@@123 $generated@@124 $generated@@125) $generated@@126 $generated@@127))
)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ) (!  (and (= ($generated@@128 ($generated@@56 $generated@@130 $generated@@131)) $generated@@130) (= ($generated@@129 ($generated@@56 $generated@@130 $generated@@131)) $generated@@131))
 :pattern ( ($generated@@56 $generated@@130 $generated@@131))
)))
(assert (= ($generated@@2 $generated@@132) 7))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ) (!  (=> ($generated@@81 $generated@@134 ($generated@@74 $generated@@133)) (and (= ($generated@@53 $generated@@132 ($generated@@26 $generated@@132 $generated@@134)) $generated@@134) ($generated@@82 $generated@@132 ($generated@@26 $generated@@132 $generated@@134) ($generated@@74 $generated@@133))))
 :pattern ( ($generated@@81 $generated@@134 ($generated@@74 $generated@@133)))
)))
(assert (forall (($generated@@135 T@U) ) (!  (and (= ($generated@@91 ($generated@@92 $generated@@135)) $generated@@135) (or (and (<= 0 ($generated@@92 $generated@@135)) (< ($generated@@92 $generated@@135) 55296)) (and (<= 57344 ($generated@@92 $generated@@135)) (< ($generated@@92 $generated@@135) 1114112))))
 :pattern ( ($generated@@92 $generated@@135))
)))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@T) ) (! (= ($generated@@53 $generated@@137 ($generated@@50 $generated@@137 $generated@@136)) ($generated@@50 $generated@@23 ($generated@@53 $generated@@137 $generated@@136)))
 :pattern ( ($generated@@53 $generated@@137 ($generated@@50 $generated@@137 $generated@@136)))
)))
(assert (forall (($generated@@138 T@U) ) (!  (=> (= ($generated@@18 $generated@@138) 0) (= $generated@@138 $generated@@19))
 :pattern ( ($generated@@18 $generated@@138))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 2) true)
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
