(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 (T@T) Int)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 (Bool) T@U)
(declare-fun $generated@@14 (T@U) Bool)
(declare-fun $generated@@15 (Int) T@U)
(declare-fun $generated@@16 (T@U) Int)
(declare-fun $generated@@17 (Real) T@U)
(declare-fun $generated@@18 (T@U) Real)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@27 () T@U)
(declare-fun $generated@@30 () Int)
(declare-fun $generated@@31 (T@U T@U) T@U)
(declare-fun $generated@@32 (T@U T@U) Bool)
(declare-fun $generated@@33 (T@T T@U T@U) Bool)
(declare-fun $generated@@34 () T@T)
(declare-fun $generated@@35 () T@U)
(declare-fun $generated@@38 (T@T T@U) T@U)
(declare-fun $generated@@39 (T@U) Bool)
(declare-fun $generated@@40 (Int) Int)
(declare-fun $generated@@41 (T@U) Int)
(declare-fun $generated@@42 (T@U) Bool)
(declare-fun $generated@@43 (Int Bool) T@U)
(declare-fun $generated@@44 (T@U) Bool)
(declare-fun $generated@@52 (T@U) T@U)
(declare-fun $generated@@55 (T@U) Bool)
(declare-fun $generated@@57 (T@T T@U) T@U)
(declare-fun $generated@@58 (T@T T@U) T@U)
(declare-fun $generated@@66 (Int) T@U)
(declare-fun $generated@@69 (Bool) T@U)
(declare-fun $generated@@90 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@91 () T@T)
(declare-fun $generated@@92 () T@T)
(declare-fun $generated@@93 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@94 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@95 () T@T)
(declare-fun $generated@@96 (T@T T@T) T@T)
(declare-fun $generated@@97 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@98 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@99 (T@T) T@T)
(declare-fun $generated@@100 (T@T) T@T)
(declare-fun $generated@@149 (T@U) Bool)
(declare-fun $generated@@157 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@9 $generated@@10) 0) (= ($generated@@9 $generated@@11) 1)) (= ($generated@@9 $generated@@12) 2)) (forall (($generated@@19 Bool) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Int) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8)
)
(assert (= ($generated@@25 $generated) $generated@@0))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@U) ) (! ($generated@@26 $generated@@11 $generated@@28 $generated@@27 $generated@@29)
 :pattern ( ($generated@@26 $generated@@11 $generated@@28 $generated@@27 $generated@@29))
)))
(assert (= ($generated@@9 $generated@@34) 3))
(assert  (=> (<= 2 $generated@@30) (forall (($generated@@36 T@U) ($generated@@37 T@U) ) (!  (=> (or ($generated@@32 $generated@@36 $generated@@37) (and (< 2 $generated@@30) (and ($generated@@33 $generated@@34 $generated@@36 $generated@@35) ($generated@@33 $generated@@34 $generated@@37 $generated@@35)))) ($generated@@33 $generated@@34 ($generated@@31 $generated@@36 $generated@@37) $generated@@35))
 :pattern ( ($generated@@31 $generated@@36 $generated@@37))
))))
(assert  (=> (<= 2 $generated@@30) (forall (($generated@@45 T@U) ($generated@@46 T@U) ) (!  (=> (or ($generated@@32 ($generated@@38 $generated@@34 $generated@@45) ($generated@@38 $generated@@34 $generated@@46)) (and (< 2 $generated@@30) (and ($generated@@33 $generated@@34 $generated@@45 $generated@@35) ($generated@@33 $generated@@34 $generated@@46 $generated@@35)))) (= ($generated@@31 ($generated@@38 $generated@@34 $generated@@45) ($generated@@38 $generated@@34 $generated@@46)) (ite ($generated@@39 ($generated@@38 $generated@@34 $generated@@45)) (let (($generated@@47 ($generated@@40 ($generated@@41 ($generated@@38 $generated@@34 $generated@@45)))))
(ite ($generated@@42 ($generated@@38 $generated@@34 $generated@@46)) ($generated@@43 $generated@@47 ($generated@@14 ($generated@@38 $generated@@10 ($generated@@13 ($generated@@44 ($generated@@38 $generated@@34 $generated@@46)))))) $generated@@45)) (ite ($generated@@42 ($generated@@38 $generated@@34 $generated@@45)) (let (($generated@@48 ($generated@@14 ($generated@@38 $generated@@10 ($generated@@13 ($generated@@44 ($generated@@38 $generated@@34 $generated@@45)))))))
(ite ($generated@@39 ($generated@@38 $generated@@34 $generated@@46)) ($generated@@43 ($generated@@40 ($generated@@41 ($generated@@38 $generated@@34 $generated@@46))) $generated@@48) $generated@@45)) ($generated@@38 $generated@@34 $generated@@45)))))
 :weight 3
 :pattern ( ($generated@@31 ($generated@@38 $generated@@34 $generated@@45) ($generated@@38 $generated@@34 $generated@@46)))
))))
(assert (forall (($generated@@49 Int) ) (! (= ($generated@@40 $generated@@49) $generated@@49)
 :pattern ( ($generated@@40 $generated@@49))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@T) ) (! (= ($generated@@38 $generated@@51 $generated@@50) $generated@@50)
 :pattern ( ($generated@@38 $generated@@51 $generated@@50))
)))
(assert (forall (($generated@@53 T@U) ) (! (= ($generated@@39 $generated@@53) (= ($generated@@52 $generated@@53) $generated@@4))
 :pattern ( ($generated@@39 $generated@@53))
)))
(assert (forall (($generated@@54 T@U) ) (! (= ($generated@@42 $generated@@54) (= ($generated@@52 $generated@@54) $generated@@5))
 :pattern ( ($generated@@42 $generated@@54))
)))
(assert (forall (($generated@@56 T@U) ) (! (= ($generated@@55 $generated@@56) (= ($generated@@52 $generated@@56) $generated@@6))
 :pattern ( ($generated@@55 $generated@@56))
)))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@T) ) (! (= ($generated@@58 $generated@@60 ($generated@@57 $generated@@60 $generated@@59)) $generated@@59)
 :pattern ( ($generated@@57 $generated@@60 $generated@@59))
)))
(assert (forall (($generated@@61 Int) ($generated@@62 Bool) ) (! (= ($generated@@33 $generated@@34 ($generated@@43 $generated@@61 $generated@@62) $generated@@35)  (and ($generated@@33 $generated@@11 ($generated@@15 $generated@@61) $generated@@27) ($generated@@33 $generated@@10 ($generated@@13 $generated@@62) $generated)))
 :pattern ( ($generated@@33 $generated@@34 ($generated@@43 $generated@@61 $generated@@62) $generated@@35))
)))
(assert (forall (($generated@@63 T@U) ) (!  (=> ($generated@@55 $generated@@63) (exists (($generated@@64 Int) ($generated@@65 Bool) ) (= $generated@@63 ($generated@@43 $generated@@64 $generated@@65))))
 :pattern ( ($generated@@55 $generated@@63))
)))
(assert (forall (($generated@@67 T@U) ) (!  (=> ($generated@@39 $generated@@67) (exists (($generated@@68 Int) ) (= $generated@@67 ($generated@@66 $generated@@68))))
 :pattern ( ($generated@@39 $generated@@67))
)))
(assert (forall (($generated@@70 T@U) ) (!  (=> ($generated@@42 $generated@@70) (exists (($generated@@71 Bool) ) (= $generated@@70 ($generated@@69 $generated@@71))))
 :pattern ( ($generated@@42 $generated@@70))
)))
(assert (forall (($generated@@72 Int) ) (! (= ($generated@@33 $generated@@34 ($generated@@66 $generated@@72) $generated@@35) ($generated@@33 $generated@@11 ($generated@@15 $generated@@72) $generated@@27))
 :pattern ( ($generated@@33 $generated@@34 ($generated@@66 $generated@@72) $generated@@35))
)))
(assert  (=> (<= 2 $generated@@30) (forall (($generated@@73 T@U) ($generated@@74 T@U) ) (!  (=> (or ($generated@@32 $generated@@73 $generated@@74) (and (< 2 $generated@@30) (and ($generated@@33 $generated@@34 $generated@@73 $generated@@35) ($generated@@33 $generated@@34 $generated@@74 $generated@@35)))) (= ($generated@@31 $generated@@73 $generated@@74) (ite ($generated@@39 $generated@@73) (let (($generated@@75 ($generated@@41 $generated@@73)))
(ite ($generated@@42 $generated@@74) ($generated@@43 $generated@@75 ($generated@@44 $generated@@74)) $generated@@73)) (ite ($generated@@42 $generated@@73) (let (($generated@@76 ($generated@@44 $generated@@73)))
(ite ($generated@@39 $generated@@74) ($generated@@43 ($generated@@41 $generated@@74) $generated@@76) $generated@@73)) $generated@@73))))
 :pattern ( ($generated@@31 $generated@@73 $generated@@74))
))))
(assert (forall (($generated@@77 Int) ($generated@@78 Bool) ) (! (= ($generated@@44 ($generated@@43 $generated@@77 $generated@@78)) $generated@@78)
 :pattern ( ($generated@@43 $generated@@77 $generated@@78))
)))
(assert (forall (($generated@@79 Bool) ) (! (= ($generated@@44 ($generated@@69 $generated@@79)) $generated@@79)
 :pattern ( ($generated@@69 $generated@@79))
)))
(assert (forall (($generated@@80 Int) ($generated@@81 Bool) ) (! (= ($generated@@52 ($generated@@43 $generated@@80 $generated@@81)) $generated@@6)
 :pattern ( ($generated@@43 $generated@@80 $generated@@81))
)))
(assert (forall (($generated@@82 Int) ($generated@@83 Bool) ) (! (= ($generated@@41 ($generated@@43 $generated@@82 $generated@@83)) $generated@@82)
 :pattern ( ($generated@@43 $generated@@82 $generated@@83))
)))
(assert (forall (($generated@@84 Int) ) (! (= ($generated@@52 ($generated@@66 $generated@@84)) $generated@@4)
 :pattern ( ($generated@@66 $generated@@84))
)))
(assert (forall (($generated@@85 Int) ) (! (= ($generated@@41 ($generated@@66 $generated@@85)) $generated@@85)
 :pattern ( ($generated@@66 $generated@@85))
)))
(assert (forall (($generated@@86 Bool) ) (! (= ($generated@@52 ($generated@@69 $generated@@86)) $generated@@5)
 :pattern ( ($generated@@69 $generated@@86))
)))
(assert (forall (($generated@@87 T@U) ($generated@@88 T@T) ) (! (= ($generated@@57 $generated@@88 ($generated@@58 $generated@@88 $generated@@87)) $generated@@87)
 :pattern ( ($generated@@58 $generated@@88 $generated@@87))
)))
(assert (forall (($generated@@89 Bool) ) (! (= ($generated@@33 $generated@@34 ($generated@@69 $generated@@89) $generated@@35) ($generated@@33 $generated@@10 ($generated@@13 $generated@@89) $generated))
 :pattern ( ($generated@@33 $generated@@34 ($generated@@69 $generated@@89) $generated@@35))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (! (= ($generated@@90 $generated@@101 $generated@@102 $generated@@103 ($generated@@97 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@107 $generated@@104) $generated@@106 $generated@@107) $generated@@104)
 :weight 0
)) (and (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@113 $generated@@115) (= ($generated@@90 $generated@@108 $generated@@109 $generated@@110 ($generated@@97 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@114 $generated@@111) $generated@@115 $generated@@116) ($generated@@90 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@115 $generated@@116)))
 :weight 0
)) (forall (($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (!  (or (= $generated@@123 $generated@@125) (= ($generated@@90 $generated@@117 $generated@@118 $generated@@119 ($generated@@97 $generated@@117 $generated@@118 $generated@@119 $generated@@121 $generated@@122 $generated@@123 $generated@@120) $generated@@124 $generated@@125) ($generated@@90 $generated@@117 $generated@@118 $generated@@119 $generated@@121 $generated@@124 $generated@@125)))
 :weight 0
)))) (= ($generated@@9 $generated@@91) 4)) (= ($generated@@9 $generated@@92) 5)) (forall (($generated@@126 T@T) ($generated@@127 T@T) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ) (! (= ($generated@@94 $generated@@126 $generated@@127 ($generated@@98 $generated@@126 $generated@@127 $generated@@129 $generated@@130 $generated@@128) $generated@@130) $generated@@128)
 :weight 0
))) (forall (($generated@@131 T@T) ($generated@@132 T@T) ($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 T@U) ) (!  (or (= $generated@@135 $generated@@136) (= ($generated@@94 $generated@@131 $generated@@132 ($generated@@98 $generated@@131 $generated@@132 $generated@@134 $generated@@135 $generated@@133) $generated@@136) ($generated@@94 $generated@@131 $generated@@132 $generated@@134 $generated@@136)))
 :weight 0
))) (= ($generated@@9 $generated@@95) 6)) (forall (($generated@@137 T@T) ($generated@@138 T@T) ) (= ($generated@@9 ($generated@@96 $generated@@137 $generated@@138)) 7))) (forall (($generated@@139 T@T) ($generated@@140 T@T) ) (! (= ($generated@@99 ($generated@@96 $generated@@139 $generated@@140)) $generated@@139)
 :pattern ( ($generated@@96 $generated@@139 $generated@@140))
))) (forall (($generated@@141 T@T) ($generated@@142 T@T) ) (! (= ($generated@@100 ($generated@@96 $generated@@141 $generated@@142)) $generated@@142)
 :pattern ( ($generated@@96 $generated@@141 $generated@@142))
))))
(assert (forall (($generated@@143 T@U) ($generated@@144 T@U) ($generated@@145 T@U) ($generated@@146 Bool) ($generated@@147 T@U) ($generated@@148 T@U) ) (! (= ($generated@@14 ($generated@@90 $generated@@91 $generated@@92 $generated@@10 ($generated@@93 $generated@@143 $generated@@144 $generated@@145 $generated@@146) $generated@@147 $generated@@148))  (=> (and (or (not (= $generated@@147 $generated@@143)) (not true)) ($generated@@14 ($generated@@57 $generated@@10 ($generated@@94 $generated@@92 $generated@@95 ($generated@@94 $generated@@91 ($generated@@96 $generated@@92 $generated@@95) $generated@@144 $generated@@147) $generated@@145)))) $generated@@146))
 :pattern ( ($generated@@90 $generated@@91 $generated@@92 $generated@@10 ($generated@@93 $generated@@143 $generated@@144 $generated@@145 $generated@@146) $generated@@147 $generated@@148))
)))
(assert (forall (($generated@@150 T@U) ($generated@@151 T@U) ) (!  (=> (and ($generated@@149 $generated@@151) (and ($generated@@42 $generated@@150) ($generated@@26 $generated@@34 $generated@@150 $generated@@35 $generated@@151))) ($generated@@26 $generated@@10 ($generated@@13 ($generated@@44 $generated@@150)) $generated $generated@@151))
 :pattern ( ($generated@@26 $generated@@10 ($generated@@13 ($generated@@44 $generated@@150)) $generated $generated@@151))
)))
(assert (forall (($generated@@152 T@U) ($generated@@153 T@U) ) (!  (=> (and ($generated@@149 $generated@@153) (and ($generated@@55 $generated@@152) ($generated@@26 $generated@@34 $generated@@152 $generated@@35 $generated@@153))) ($generated@@26 $generated@@10 ($generated@@13 ($generated@@44 $generated@@152)) $generated $generated@@153))
 :pattern ( ($generated@@26 $generated@@10 ($generated@@13 ($generated@@44 $generated@@152)) $generated $generated@@153))
)))
(assert (forall (($generated@@154 T@U) ) (!  (=> ($generated@@33 $generated@@34 $generated@@154 $generated@@35) (or (or ($generated@@39 $generated@@154) ($generated@@42 $generated@@154)) ($generated@@55 $generated@@154)))
 :pattern ( ($generated@@55 $generated@@154) ($generated@@33 $generated@@34 $generated@@154 $generated@@35))
 :pattern ( ($generated@@42 $generated@@154) ($generated@@33 $generated@@34 $generated@@154 $generated@@35))
 :pattern ( ($generated@@39 $generated@@154) ($generated@@33 $generated@@34 $generated@@154 $generated@@35))
)))
(assert (forall (($generated@@155 T@U) ($generated@@156 T@U) ) (!  (=> (and ($generated@@149 $generated@@156) ($generated@@33 $generated@@34 $generated@@155 $generated@@35)) ($generated@@26 $generated@@34 $generated@@155 $generated@@35 $generated@@156))
 :pattern ( ($generated@@26 $generated@@34 $generated@@155 $generated@@35 $generated@@156))
)))
(assert (= ($generated@@25 $generated@@27) $generated@@2))
(assert (= ($generated@@157 $generated@@27) $generated@@7))
(assert (= ($generated@@25 $generated@@35) $generated@@3))
(assert (= ($generated@@157 $generated@@35) $generated@@8))
(assert (forall (($generated@@158 T@U) ($generated@@159 T@U) ) (!  (=> (and ($generated@@149 $generated@@159) (and ($generated@@39 $generated@@158) ($generated@@26 $generated@@34 $generated@@158 $generated@@35 $generated@@159))) ($generated@@26 $generated@@11 ($generated@@15 ($generated@@41 $generated@@158)) $generated@@27 $generated@@159))
 :pattern ( ($generated@@26 $generated@@11 ($generated@@15 ($generated@@41 $generated@@158)) $generated@@27 $generated@@159))
)))
(assert (forall (($generated@@160 T@U) ($generated@@161 T@U) ) (!  (=> (and ($generated@@149 $generated@@161) (and ($generated@@55 $generated@@160) ($generated@@26 $generated@@34 $generated@@160 $generated@@35 $generated@@161))) ($generated@@26 $generated@@11 ($generated@@15 ($generated@@41 $generated@@160)) $generated@@27 $generated@@161))
 :pattern ( ($generated@@26 $generated@@11 ($generated@@15 ($generated@@41 $generated@@160)) $generated@@27 $generated@@161))
)))
(assert (forall (($generated@@162 T@U) ) (! (= ($generated@@33 $generated@@11 $generated@@162 $generated@@27)  (and (<= ($generated@@40 0) ($generated@@16 $generated@@162)) (< ($generated@@16 $generated@@162) 255)))
 :pattern ( ($generated@@33 $generated@@11 $generated@@162 $generated@@27))
)))
(assert (forall (($generated@@163 Int) ($generated@@164 T@U) ) (! (= ($generated@@43 ($generated@@40 $generated@@163) ($generated@@14 ($generated@@38 $generated@@10 $generated@@164))) ($generated@@38 $generated@@34 ($generated@@43 $generated@@163 ($generated@@14 $generated@@164))))
 :pattern ( ($generated@@43 ($generated@@40 $generated@@163) ($generated@@14 ($generated@@38 $generated@@10 $generated@@164))))
)))
(assert (forall (($generated@@165 Int) ) (! (= ($generated@@58 $generated@@11 ($generated@@15 ($generated@@40 $generated@@165))) ($generated@@38 $generated@@95 ($generated@@58 $generated@@11 ($generated@@15 $generated@@165))))
 :pattern ( ($generated@@58 $generated@@11 ($generated@@15 ($generated@@40 $generated@@165))))
)))
(assert (forall (($generated@@166 Int) ) (! (= ($generated@@66 ($generated@@40 $generated@@166)) ($generated@@38 $generated@@34 ($generated@@66 $generated@@166)))
 :pattern ( ($generated@@66 ($generated@@40 $generated@@166)))
)))
(assert (forall (($generated@@167 T@U) ) (! (= ($generated@@69 ($generated@@14 ($generated@@38 $generated@@10 $generated@@167))) ($generated@@38 $generated@@34 ($generated@@69 ($generated@@14 $generated@@167))))
 :pattern ( ($generated@@69 ($generated@@14 ($generated@@38 $generated@@10 $generated@@167))))
)))
(assert (forall (($generated@@168 T@U) ($generated@@169 T@T) ) (! (= ($generated@@58 $generated@@169 ($generated@@38 $generated@@169 $generated@@168)) ($generated@@38 $generated@@95 ($generated@@58 $generated@@169 $generated@@168)))
 :pattern ( ($generated@@58 $generated@@169 ($generated@@38 $generated@@169 $generated@@168)))
)))
(assert (forall (($generated@@170 T@U) ($generated@@171 T@U) ) (! ($generated@@26 $generated@@10 $generated@@171 $generated $generated@@170)
 :pattern ( ($generated@@26 $generated@@10 $generated@@171 $generated $generated@@170))
)))
(assert (forall (($generated@@172 T@U) ) (! ($generated@@33 $generated@@10 $generated@@172 $generated)
 :pattern ( ($generated@@33 $generated@@10 $generated@@172 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@173 () T@U)
(declare-fun $generated@@174 () T@U)
(declare-fun $generated@@175 () Int)
(declare-fun $generated@@176 () Int)
(declare-fun $generated@@177 () Int)
(declare-fun $generated@@178 () Bool)
(declare-fun $generated@@179 () Bool)
(declare-fun $generated@@180 () Bool)
(declare-fun $generated@@181 () T@U)
(declare-fun $generated@@182 () T@U)
(declare-fun $generated@@183 () T@U)
(declare-fun $generated@@184 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 15) (let (($generated@@185 true))
(let (($generated@@186  (=> (and ($generated@@42 $generated@@173) (= (ControlFlow 0 11) (- 0 10))) (or ($generated@@42 $generated@@173) ($generated@@55 $generated@@173)))))
(let (($generated@@187  (=> (= $generated@@174 ($generated@@66 $generated@@175)) (=> (and (and (and (<= ($generated@@40 0) $generated@@175) (< $generated@@175 255)) (= $generated@@176 $generated@@175)) (and ($generated@@33 $generated@@11 ($generated@@15 $generated@@176) $generated@@27) (= $generated@@177 $generated@@176))) (and (=> (= (ControlFlow 0 13) 11) $generated@@186) (=> (= (ControlFlow 0 13) 12) $generated@@185))))))
(let (($generated@@188 true))
(let (($generated@@189  (=> (and ($generated@@39 $generated@@173) (= (ControlFlow 0 6) (- 0 5))) (or ($generated@@39 $generated@@173) ($generated@@55 $generated@@173)))))
(let (($generated@@190  (=> (and (and (= $generated@@174 ($generated@@69 $generated@@178)) (= $generated@@179 $generated@@178)) (and ($generated@@33 $generated@@10 ($generated@@13 $generated@@179) $generated) (= $generated@@180 $generated@@179))) (and (=> (= (ControlFlow 0 8) 6) $generated@@189) (=> (= (ControlFlow 0 8) 7) $generated@@188)))))
(let (($generated@@191 true))
(let (($generated@@192 true))
(let (($generated@@193  (=> (or (not (= $generated@@174 ($generated@@69 $generated@@178))) (not true)) (and (=> (= (ControlFlow 0 4) 2) $generated@@192) (=> (= (ControlFlow 0 4) 3) $generated@@191)))))
(let (($generated@@194  (=> (or (not (= $generated@@174 ($generated@@66 $generated@@175))) (not true)) (and (=> (= (ControlFlow 0 9) 8) $generated@@190) (=> (= (ControlFlow 0 9) 4) $generated@@193)))))
(let (($generated@@195 true))
(let (($generated@@196  (=> (= $generated@@181 ($generated@@93 $generated@@182 $generated@@183 $generated@@1 false)) (and (and (=> (= (ControlFlow 0 14) 1) $generated@@195) (=> (= (ControlFlow 0 14) 13) $generated@@187)) (=> (= (ControlFlow 0 14) 9) $generated@@194)))))
(let (($generated@@197  (=> (and ($generated@@149 $generated@@183) ($generated@@184 $generated@@183)) (=> (and (and (and ($generated@@33 $generated@@34 $generated@@174 $generated@@35) ($generated@@26 $generated@@34 $generated@@174 $generated@@35 $generated@@183)) ($generated@@33 $generated@@34 $generated@@173 $generated@@35)) (and (= 2 $generated@@30) (= (ControlFlow 0 15) 14))) $generated@@196))))
$generated@@197))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
