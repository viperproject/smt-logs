(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TInt () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagMap () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun Tagclass._module.CellA () T@U)
(declare-fun Tagclass._module.CellB () T@U)
(declare-fun Tagclass._module.CellA? () T@U)
(declare-fun Tagclass._module.CellB? () T@U)
(declare-fun Tagclass._module.ICell? () T@U)
(declare-fun class._module.ICell? () T@U)
(declare-fun Tagclass._module.ICell () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun tytagFamily$CellA () T@U)
(declare-fun tytagFamily$CellB () T@U)
(declare-fun tytagFamily$ICell () T@U)
(declare-fun field$data () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun FDim (T@U) Int)
(declare-fun Tag (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun implements$_module.ICell (T@U) Bool)
(declare-fun Tclass._module.CellA? () T@U)
(declare-fun Tclass._module.CellB? () T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun refType () T@T)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun _module.ICell.data () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun Tclass._module.ICell? () T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._module.ICell () T@U)
(declare-fun Tclass._module.CellA () T@U)
(declare-fun Tclass._module.CellB () T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun FieldOfDecl (T@U T@U) T@U)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun MapType () T@T)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Set#FromBoogieMap| (T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun |lambda#24| (T@U T@U T@U T@U Int) T@U)
(declare-fun |lambda#26| (T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |Map#Empty| () T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TInt TagInt TagSet TagMap alloc allocName |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 Tagclass._module.CellA Tagclass._module.CellB Tagclass._module.CellA? Tagclass._module.CellB? Tagclass._module.ICell? class._module.ICell? Tagclass._module.ICell |tytagFamily$_tuple#2| tytagFamily$CellA tytagFamily$CellB tytagFamily$ICell field$data)
)
(assert (= (FDim alloc) 0))
(assert (= (Tag TInt) TagInt))
(assert (= (DeclName alloc) allocName))
(assert (forall ((a T@U) (x@@2 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@2) x@@2)
 :pattern ( (|Set#UnionOne| a x@@2))
)))
(assert (forall ((a@@0 T@U) (x@@3 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@3) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@3) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (x@@4 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o)  (or (= o x@@4) (|Set#IsMember| a@@1 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@1 x@@4) o))
)))
(assert (forall ((a@@2 T@U) (b T@U) (t T@U) ) (! (= (|Map#Domain| (|Map#Glue| a@@2 b t)) a@@2)
 :pattern ( (|Map#Domain| (|Map#Glue| a@@2 b t)))
)))
(assert (forall ((a@@3 T@U) (b@@0 T@U) (t@@0 T@U) ) (! (= (|Map#Elements| (|Map#Glue| a@@3 b@@0 t@@0)) b@@0)
 :pattern ( (|Map#Elements| (|Map#Glue| a@@3 b@@0 t@@0)))
)))
(assert (implements$_module.ICell Tclass._module.CellA?))
(assert (implements$_module.ICell Tclass._module.CellB?))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d))
 :pattern ( (_System.Tuple2.___hMake2_q d) ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (= (Ctor refType) 4))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass._module.CellA?)  (or (= $o null) (= (dtype $o) Tclass._module.CellA?)))
 :pattern ( ($Is refType $o Tclass._module.CellA?))
)))
(assert (forall (($o@@0 T@U) ) (! (= ($Is refType $o@@0 Tclass._module.CellB?)  (or (= $o@@0 null) (= (dtype $o@@0) Tclass._module.CellB?)))
 :pattern ( ($Is refType $o@@0 Tclass._module.CellB?))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 7))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall (($h T@U) ($o@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h) (and (or (not (= $o@@1 null)) (not true)) ($Is refType $o@@1 Tclass._module.ICell?))) ($Is intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o@@1) _module.ICell.data)) TInt))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h $o@@1) _module.ICell.data)))
)))
(assert (forall ((bx T@U) ($h@@0 T@U) ) (!  (=> (and ($IsAllocBox bx Tclass._module.CellA? $h@@0) ($IsGoodHeap $h@@0)) ($IsAllocBox bx Tclass._module.ICell? $h@@0))
 :pattern ( ($IsAllocBox bx Tclass._module.CellA? $h@@0))
)))
(assert (forall ((bx@@0 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsAllocBox bx@@0 Tclass._module.CellB? $h@@1) ($IsGoodHeap $h@@1)) ($IsAllocBox bx@@0 Tclass._module.ICell? $h@@1))
 :pattern ( ($IsAllocBox bx@@0 Tclass._module.CellB? $h@@1))
)))
(assert (forall ((|c#0| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._module.ICell $h@@2) ($IsAlloc refType |c#0| Tclass._module.ICell? $h@@2))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.ICell $h@@2))
 :pattern ( ($IsAlloc refType |c#0| Tclass._module.ICell? $h@@2))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass._module.CellA $h@@3) ($IsAlloc refType |c#0@@0| Tclass._module.CellA? $h@@3))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.CellA $h@@3))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass._module.CellA? $h@@3))
)))
(assert (forall ((|c#0@@1| T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType |c#0@@1| Tclass._module.CellB $h@@4) ($IsAlloc refType |c#0@@1| Tclass._module.CellB? $h@@4))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass._module.CellB $h@@4))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass._module.CellB? $h@@4))
)))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert (= (FDim _module.ICell.data) 0))
(assert (= (FieldOfDecl class._module.ICell? field$data) _module.ICell.data))
(assert  (not ($IsGhostField _module.ICell.data)))
(assert (forall (($o@@2 T@U) ($h@@5 T@U) ) (! (= ($IsAlloc refType $o@@2 Tclass._module.ICell? $h@@5)  (or (= $o@@2 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@2) alloc)))))
 :pattern ( ($IsAlloc refType $o@@2 Tclass._module.ICell? $h@@5))
)))
(assert (forall (($o@@3 T@U) ($h@@6 T@U) ) (! (= ($IsAlloc refType $o@@3 Tclass._module.CellA? $h@@6)  (or (= $o@@3 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@3) alloc)))))
 :pattern ( ($IsAlloc refType $o@@3 Tclass._module.CellA? $h@@6))
)))
(assert (forall (($o@@4 T@U) ($h@@7 T@U) ) (! (= ($IsAlloc refType $o@@4 Tclass._module.CellB? $h@@7)  (or (= $o@@4 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@7 $o@@4) alloc)))))
 :pattern ( ($IsAlloc refType $o@@4 Tclass._module.CellB? $h@@7))
)))
(assert (forall ((h T@U) (k T@U) ) (!  (=> ($HeapSucc h k) (forall ((o@@1 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h o@@1) alloc))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@1) alloc))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) k o@@1) alloc))
)))
 :pattern ( ($HeapSucc h k))
)))
(assert (forall ((x@@5 Int) ) (! (= (LitInt x@@5) x@@5)
 :pattern ( (LitInt x@@5))
)))
(assert (forall ((x@@6 T@U) (T T@T) ) (! (= (Lit T x@@6) x@@6)
 :pattern ( (Lit T x@@6))
)))
(assert (= (Ctor MapType) 8))
(assert (forall ((a@@4 T@U) (b@@1 T@U) (t0@@0 T@U) (t1@@0 T@U) ) (!  (=> (forall ((bx@@1 T@U) )  (=> (|Set#IsMember| a@@4 bx@@1) (and ($IsBox bx@@1 t0@@0) ($IsBox (MapType0Select BoxType BoxType b@@1 bx@@1) t1@@0)))) ($Is MapType (|Map#Glue| a@@4 b@@1 (TMap t0@@0 t1@@0)) (TMap t0@@0 t1@@0)))
 :pattern ( (|Map#Glue| a@@4 b@@1 (TMap t0@@0 t1@@0)))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h@@8 T@U) ) (!  (=> ($IsGoodHeap $h@@8) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@8)  (and ($IsAllocBox |a#2#0#0@@0| |_System._tuple#2$T0@@1| $h@@8) ($IsAllocBox |a#2#1#0@@0| |_System._tuple#2$T1@@1| $h@@8))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@8))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@0))
)))
(assert (forall ((x@@7 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@7)) x@@7)
 :pattern ( ($Unbox T@@0 x@@7))
)))
(assert (forall ((m@@1 T@U) (bx@@2 T@U) ) (! (= (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx@@2) (U_2_bool (MapType0Select BoxType boolType m@@1 bx@@2)))
 :pattern ( (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx@@2))
)))
(assert (forall ((d@@1 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@1) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@1))
)))
(assert (= (Ctor SetType) 9))
(assert (forall ((v T@U) (t0@@1 T@U) ) (! (= ($Is SetType v (TSet t0@@1)) (forall ((bx@@3 T@U) ) (!  (=> (|Set#IsMember| v bx@@3) ($IsBox bx@@3 t0@@1))
 :pattern ( (|Set#IsMember| v bx@@3))
)))
 :pattern ( ($Is SetType v (TSet t0@@1)))
)))
(assert ($IsGhostField alloc))
(assert (forall ((v@@0 T@U) (t@@1 T@U) (h@@0 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t@@1 h@@0) ($IsAlloc T@@1 v@@0 t@@1 h@@0))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t@@1 h@@0))
)))
(assert (forall ((h@@1 T@U) (k@@0 T@U) (bx@@4 T@U) (t@@2 T@U) ) (!  (=> ($HeapSucc h@@1 k@@0) (=> ($IsAllocBox bx@@4 t@@2 h@@1) ($IsAllocBox bx@@4 t@@2 k@@0)))
 :pattern ( ($HeapSucc h@@1 k@@0) ($IsAllocBox bx@@4 t@@2 h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@1 T@U) (v@@1 T@U) (t@@3 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@2 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@3 h@@2) ($IsAlloc T@@2 v@@1 t@@3 k@@1)))
 :pattern ( ($HeapSucc h@@2 k@@1) ($IsAlloc T@@2 v@@1 t@@3 h@@2))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 Tclass._module.CellA) (and (= ($Box refType ($Unbox refType bx@@5)) bx@@5) ($Is refType ($Unbox refType bx@@5) Tclass._module.CellA)))
 :pattern ( ($IsBox bx@@5 Tclass._module.CellA))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 Tclass._module.CellB) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) Tclass._module.CellB)))
 :pattern ( ($IsBox bx@@6 Tclass._module.CellB))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 Tclass._module.CellA?) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) Tclass._module.CellA?)))
 :pattern ( ($IsBox bx@@7 Tclass._module.CellA?))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 Tclass._module.CellB?) (and (= ($Box refType ($Unbox refType bx@@8)) bx@@8) ($Is refType ($Unbox refType bx@@8) Tclass._module.CellB?)))
 :pattern ( ($IsBox bx@@8 Tclass._module.CellB?))
)))
(assert (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 Tclass._module.ICell?) (and (= ($Box refType ($Unbox refType bx@@9)) bx@@9) ($Is refType ($Unbox refType bx@@9) Tclass._module.ICell?)))
 :pattern ( ($IsBox bx@@9 Tclass._module.ICell?))
)))
(assert (forall ((bx@@10 T@U) ) (!  (=> ($IsBox bx@@10 Tclass._module.ICell) (and (= ($Box refType ($Unbox refType bx@@10)) bx@@10) ($Is refType ($Unbox refType bx@@10) Tclass._module.ICell)))
 :pattern ( ($IsBox bx@@10 Tclass._module.ICell))
)))
(assert (forall ((|c#0@@2| T@U) ) (! (= ($Is refType |c#0@@2| Tclass._module.ICell)  (and ($Is refType |c#0@@2| Tclass._module.ICell?) (or (not (= |c#0@@2| null)) (not true))))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.ICell))
 :pattern ( ($Is refType |c#0@@2| Tclass._module.ICell?))
)))
(assert (forall ((|c#0@@3| T@U) ) (! (= ($Is refType |c#0@@3| Tclass._module.CellA)  (and ($Is refType |c#0@@3| Tclass._module.CellA?) (or (not (= |c#0@@3| null)) (not true))))
 :pattern ( ($Is refType |c#0@@3| Tclass._module.CellA))
 :pattern ( ($Is refType |c#0@@3| Tclass._module.CellA?))
)))
(assert (forall ((|c#0@@4| T@U) ) (! (= ($Is refType |c#0@@4| Tclass._module.CellB)  (and ($Is refType |c#0@@4| Tclass._module.CellB?) (or (not (= |c#0@@4| null)) (not true))))
 :pattern ( ($Is refType |c#0@@4| Tclass._module.CellB))
 :pattern ( ($Is refType |c#0@@4| Tclass._module.CellB?))
)))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) (|l#4| Int) (|$y#0| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#24| |l#0| |l#1| |l#2| |l#3| |l#4|) |$y#0|))  (and ($IsBox |$y#0| |l#0|) (and (|Set#IsMember| |l#1| |$y#0|) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#2| ($Unbox refType |$y#0|)) |l#3|))) |l#4|))))
 :pattern ( (MapType0Select BoxType boolType (|lambda#24| |l#0| |l#1| |l#2| |l#3| |l#4|) |$y#0|))
)))
(assert (forall (($o@@5 T@U) ($heap T@U) ) (!  (=> ($IsAlloc refType $o@@5 Tclass._module.CellA? $heap) ($IsAlloc refType $o@@5 Tclass._module.ICell? $heap))
 :pattern ( ($IsAlloc refType $o@@5 Tclass._module.CellA? $heap))
)))
(assert (forall (($o@@6 T@U) ($heap@@0 T@U) ) (!  (=> ($IsAlloc refType $o@@6 Tclass._module.CellB? $heap@@0) ($IsAlloc refType $o@@6 Tclass._module.ICell? $heap@@0))
 :pattern ( ($IsAlloc refType $o@@6 Tclass._module.CellB? $heap@@0))
)))
(assert (forall ((|l#0@@0| T@U) (|$w#0| T@U) ) (! (= (MapType0Select BoxType BoxType (|lambda#26| |l#0@@0|) |$w#0|) |l#0@@0|)
 :pattern ( (MapType0Select BoxType BoxType (|lambda#26| |l#0@@0|) |$w#0|))
)))
(assert (forall ((a@@5 T@U) (b@@2 T@U) (c T@U) ) (!  (=> (or (not (= a@@5 c)) (not true)) (=> (and ($HeapSucc a@@5 b@@2) ($HeapSucc b@@2 c)) ($HeapSucc a@@5 c)))
 :pattern ( ($HeapSucc a@@5 b@@2) ($HeapSucc b@@2 c))
)))
(assert (forall ((cl T@U) (nm T@U) ) (!  (and (= (DeclType (FieldOfDecl cl nm)) cl) (= (DeclName (FieldOfDecl cl nm)) nm))
 :pattern ( (FieldOfDecl cl nm))
)))
(assert (forall ((bx@@11 T@U) ) (!  (=> ($IsBox bx@@11 TInt) (and (= ($Box intType ($Unbox intType bx@@11)) bx@@11) ($Is intType ($Unbox intType bx@@11) TInt)))
 :pattern ( ($IsBox bx@@11 TInt))
)))
(assert (forall ((v@@2 T@U) (t@@4 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@4) ($Is T@@3 v@@2 t@@4))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@4))
)))
(assert (forall ((v@@3 T@U) (t0@@2 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@2) h@@3) (forall ((bx@@12 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@12) ($IsAllocBox bx@@12 t0@@2 h@@3))
 :pattern ( (|Set#IsMember| v@@3 bx@@12))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@2) h@@3))
)))
(assert (forall ((t@@5 T@U) (u T@U) ) (! (= (Inv0_TMap (TMap t@@5 u)) t@@5)
 :pattern ( (TMap t@@5 u))
)))
(assert (forall ((t@@6 T@U) (u@@0 T@U) ) (! (= (Inv1_TMap (TMap t@@6 u@@0)) u@@0)
 :pattern ( (TMap t@@6 u@@0))
)))
(assert (forall ((t@@7 T@U) (u@@1 T@U) ) (! (= (Tag (TMap t@@7 u@@1)) TagMap)
 :pattern ( (TMap t@@7 u@@1))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) |a#6#1#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall (($h@@9 T@U) ($o@@7 T@U) ) (!  (=> (and (and ($IsGoodHeap $h@@9) (and (or (not (= $o@@7 null)) (not true)) ($Is refType $o@@7 Tclass._module.ICell?))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@7) alloc)))) ($IsAlloc intType ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@7) _module.ICell.data)) TInt $h@@9))
 :pattern ( ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@9 $o@@7) _module.ICell.data)))
)))
(assert (forall ((t@@8 T@U) ) (! (= (Inv0_TSet (TSet t@@8)) t@@8)
 :pattern ( (TSet t@@8))
)))
(assert (forall ((t@@9 T@U) ) (! (= (Tag (TSet t@@9)) TagSet)
 :pattern ( (TSet t@@9))
)))
(assert (forall ((x@@8 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@8)) x@@8)
 :pattern ( ($Box T@@4 x@@8))
)))
(assert (forall ((v@@4 T@U) (t0@@3 T@U) (t1@@1 T@U) (h@@4 T@U) ) (! (= ($IsAlloc MapType v@@4 (TMap t0@@3 t1@@1) h@@4) (forall ((bx@@13 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@4) bx@@13) (and ($IsAllocBox (MapType0Select BoxType BoxType (|Map#Elements| v@@4) bx@@13) t1@@1 h@@4) ($IsAllocBox bx@@13 t0@@3 h@@4)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@4) bx@@13))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@4) bx@@13))
)))
 :pattern ( ($IsAlloc MapType v@@4 (TMap t0@@3 t1@@1) h@@4))
)))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (! (< (BoxRank |a#5#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((u@@2 T@U) ) (!  (not (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@2))
 :pattern ( (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@2))
)))
(assert (forall ((bx@@14 T@U) (s T@U) (t@@10 T@U) ) (!  (=> ($IsBox bx@@14 (TMap s t@@10)) (and (= ($Box MapType ($Unbox MapType bx@@14)) bx@@14) ($Is MapType ($Unbox MapType bx@@14) (TMap s t@@10))))
 :pattern ( ($IsBox bx@@14 (TMap s t@@10)))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@15 T@U) ) (!  (=> ($IsBox bx@@15 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@15)) bx@@15) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@15) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@15 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert  (and (forall ((t0@@4 T@T) (t1@@2 T@T) (t2 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@4 t1@@2 t2 (MapType1Store t0@@4 t1@@2 t2 m@@2 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@3 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@3 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@4 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@4 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0@@1| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3@@0| Bool) ($o@@8 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@1| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@8 $f))  (=> (and (or (not (= $o@@8 |l#0@@1|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@0| $o@@8) |l#2@@0|)))) |l#3@@0|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@1| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@8 $f))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall ((m@@5 T@U) ) (!  (or (= m@@5 |Map#Empty|) (exists ((k@@2 T@U) ) (|Set#IsMember| (|Map#Domain| m@@5) k@@2)))
 :pattern ( (|Map#Domain| m@@5))
)))
(assert (forall ((m@@6 T@U) ) (!  (or (= m@@6 |Map#Empty|) (exists ((v@@5 T@U) ) (|Set#IsMember| (|Map#Values| m@@6) v@@5)))
 :pattern ( (|Map#Values| m@@6))
)))
(assert (forall ((m@@7 T@U) (item T@U) ) (! (= (|Set#IsMember| (|Map#Items| m@@7) item)  (and (|Set#IsMember| (|Map#Domain| m@@7) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (= (MapType0Select BoxType BoxType (|Map#Elements| m@@7) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))
 :pattern ( (|Set#IsMember| (|Map#Items| m@@7) item))
)))
(assert (forall ((m@@8 T@U) (v@@6 T@U) ) (! (= (|Set#IsMember| (|Map#Values| m@@8) v@@6) (exists ((u@@3 T@U) ) (!  (and (|Set#IsMember| (|Map#Domain| m@@8) u@@3) (= v@@6 (MapType0Select BoxType BoxType (|Map#Elements| m@@8) u@@3)))
 :pattern ( (|Set#IsMember| (|Map#Domain| m@@8) u@@3))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| m@@8) u@@3))
)))
 :pattern ( (|Set#IsMember| (|Map#Values| m@@8) v@@6))
)))
(assert (forall ((d@@2 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@2)) (DtRank d@@2))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@2)))
)))
(assert (forall ((bx@@16 T@U) (t@@11 T@U) ) (!  (=> ($IsBox bx@@16 (TSet t@@11)) (and (= ($Box SetType ($Unbox SetType bx@@16)) bx@@16) ($Is SetType ($Unbox SetType bx@@16) (TSet t@@11))))
 :pattern ( ($IsBox bx@@16 (TSet t@@11)))
)))
(assert (forall (($o@@9 T@U) ) (!  (=> ($Is refType $o@@9 Tclass._module.CellA?) ($Is refType $o@@9 Tclass._module.ICell?))
 :pattern ( ($Is refType $o@@9 Tclass._module.CellA?))
)))
(assert (forall ((bx@@17 T@U) ) (!  (=> ($IsBox bx@@17 Tclass._module.CellA?) ($IsBox bx@@17 Tclass._module.ICell?))
 :pattern ( ($IsBox bx@@17 Tclass._module.CellA?))
)))
(assert (forall (($o@@10 T@U) ) (!  (=> ($Is refType $o@@10 Tclass._module.CellB?) ($Is refType $o@@10 Tclass._module.ICell?))
 :pattern ( ($Is refType $o@@10 Tclass._module.CellB?))
)))
(assert (forall ((bx@@18 T@U) ) (!  (=> ($IsBox bx@@18 Tclass._module.CellB?) ($IsBox bx@@18 Tclass._module.ICell?))
 :pattern ( ($IsBox bx@@18 Tclass._module.CellB?))
)))
(assert (forall ((v@@7 T@U) (t0@@5 T@U) (t1@@3 T@U) ) (! (= ($Is MapType v@@7 (TMap t0@@5 t1@@3)) (forall ((bx@@19 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@7) bx@@19) (and ($IsBox (MapType0Select BoxType BoxType (|Map#Elements| v@@7) bx@@19) t1@@3) ($IsBox bx@@19 t0@@5)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@7) bx@@19))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@7) bx@@19))
)))
 :pattern ( ($Is MapType v@@7 (TMap t0@@5 t1@@3)))
)))
(assert (forall ((h@@5 T@U) (r T@U) (f T@U) (x@@9 T@U) ) (!  (=> ($IsGoodHeap (MapType0Store refType (MapType0Type FieldType BoxType) h@@5 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@5 r) f x@@9))) ($HeapSucc h@@5 (MapType0Store refType (MapType0Type FieldType BoxType) h@@5 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@5 r) f x@@9))))
 :pattern ( (MapType0Store refType (MapType0Type FieldType BoxType) h@@5 r (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@5 r) f x@@9)))
)))
(assert (= (Tag Tclass._module.CellA) Tagclass._module.CellA))
(assert (= (TagFamily Tclass._module.CellA) tytagFamily$CellA))
(assert (= (Tag Tclass._module.CellB) Tagclass._module.CellB))
(assert (= (TagFamily Tclass._module.CellB) tytagFamily$CellB))
(assert (= (Tag Tclass._module.CellA?) Tagclass._module.CellA?))
(assert (= (TagFamily Tclass._module.CellA?) tytagFamily$CellA))
(assert (= (Tag Tclass._module.CellB?) Tagclass._module.CellB?))
(assert (= (TagFamily Tclass._module.CellB?) tytagFamily$CellB))
(assert (= (Tag Tclass._module.ICell?) Tagclass._module.ICell?))
(assert (= (TagFamily Tclass._module.ICell?) tytagFamily$ICell))
(assert (= (Tag Tclass._module.ICell) Tagclass._module.ICell))
(assert (= (TagFamily Tclass._module.ICell) tytagFamily$ICell))
(assert (forall (($o@@11 T@U) ) (! (= ($Is refType $o@@11 Tclass._module.ICell?)  (or (= $o@@11 null) (implements$_module.ICell (dtype $o@@11))))
 :pattern ( ($Is refType $o@@11 Tclass._module.ICell?))
)))
(assert (forall ((d@@3 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@10 T@U) ) (!  (=> (and ($IsGoodHeap $h@@10) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@10)
 :pattern ( ($IsAlloc DatatypeTypeType d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@10))
)))) ($IsAllocBox (_System.Tuple2._0 d@@3) |_System._tuple#2$T0@@6| $h@@10))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@3) |_System._tuple#2$T0@@6| $h@@10))
)))
(assert (forall ((d@@4 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@11 T@U) ) (!  (=> (and ($IsGoodHeap $h@@11) (and (_System.Tuple2.___hMake2_q d@@4) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@4 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@11)
 :pattern ( ($IsAlloc DatatypeTypeType d@@4 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@11))
)))) ($IsAllocBox (_System.Tuple2._1 d@@4) |_System._tuple#2$T1@@7| $h@@11))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@4) |_System._tuple#2$T1@@7| $h@@11))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((x@@10 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@10))) (Lit BoxType ($Box intType (int_2_U x@@10))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@10))))
)))
(assert (forall ((x@@11 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@11)) (Lit BoxType ($Box T@@5 x@@11)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@11)))
)))
(assert (forall ((h@@6 T@U) (v@@8 T@U) ) (! ($IsAlloc intType v@@8 TInt h@@6)
 :pattern ( ($IsAlloc intType v@@8 TInt h@@6))
)))
(assert (forall ((m@@9 T@U) ) (!  (or (= m@@9 |Map#Empty|) (exists ((k@@3 T@U) (v@@9 T@U) ) (|Set#IsMember| (|Map#Items| m@@9) ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| k@@3 v@@9)))))
 :pattern ( (|Map#Items| m@@9))
)))
(assert (forall ((v@@10 T@U) (t0@@6 T@U) (t1@@4 T@U) ) (!  (=> ($Is MapType v@@10 (TMap t0@@6 t1@@4)) (and (and ($Is SetType (|Map#Domain| v@@10) (TSet t0@@6)) ($Is SetType (|Map#Values| v@@10) (TSet t1@@4))) ($Is SetType (|Map#Items| v@@10) (TSet (Tclass._System.Tuple2 t0@@6 t1@@4)))))
 :pattern ( ($Is MapType v@@10 (TMap t0@@6 t1@@4)))
)))
(assert (forall ((v@@11 T@U) ) (! ($Is intType v@@11 TInt)
 :pattern ( ($Is intType v@@11 TInt))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |m#0@0| () T@U)
(declare-fun |s#0@0| () T@U)
(declare-fun $Heap@9 () T@U)
(declare-fun |a#2@0| () T@U)
(declare-fun |r#0@0| () T@U)
(declare-fun |a#0@0| () T@U)
(declare-fun $Heap@8 () T@U)
(declare-fun |u#0@0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |$rhs#7@0| () Int)
(declare-fun $nw@0 () T@U)
(declare-fun $nw@1 () T@U)
(declare-fun $nw@2 () T@U)
(declare-fun |u#1@0| () T@U)
(declare-fun $Heap@7 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $Heap@6 () T@U)
(declare-fun |$rhs#6@0| () Int)
(declare-fun |a#1_0@0| () T@U)
(declare-fun |a#1_1@0| () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun |a#0_0@0| () T@U)
(declare-fun |a#0_1@0| () T@U)
(declare-fun $Heap () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |$rhs#3@0| () Int)
(declare-fun |$rhs#4@0| () Int)
(declare-fun |$rhs#5@0| () Int)
(declare-fun $Heap@3 () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun |defass#c#0| () Bool)
(declare-fun |c#0@@5| () T@U)
(declare-fun |defass#d#0| () Bool)
(declare-fun |d#0| () T@U)
(declare-fun |defass#e#0| () Bool)
(declare-fun |e#0| () T@U)
(declare-fun |s#0| () T@U)
(declare-fun |defass#u#0| () Bool)
(declare-fun |u#0| () T@U)
(declare-fun |r#0| () T@U)
(declare-fun |m#0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 88) (let ((anon20_correct  (=> (= |m#0@0| (|Map#Glue| (|Set#FromBoogieMap| (|lambda#24| Tclass._module.CellA |s#0@0| $Heap@9 _module.ICell.data 6)) (|lambda#26| ($Box intType (int_2_U (LitInt 3)))) (TMap Tclass._module.CellA TInt))) (and (=> (= (ControlFlow 0 13) (- 0 14)) true) (=> (= (ControlFlow 0 13) (- 0 12)) true)))))
(let ((anon30_Else_correct  (=> (and (not (and (|Set#IsMember| |s#0@0| ($Box refType |a#2@0|)) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 |a#2@0|) _module.ICell.data))) 6))) (= (ControlFlow 0 17) 13)) anon20_correct)))
(let ((anon30_Then_correct  (=> (and (and (|Set#IsMember| |s#0@0| ($Box refType |a#2@0|)) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 |a#2@0|) _module.ICell.data))) 6)) (= (ControlFlow 0 16) 13)) anon20_correct)))
(let ((anon29_Else_correct  (=> (not (|Set#IsMember| |s#0@0| ($Box refType |a#2@0|))) (and (=> (= (ControlFlow 0 20) 16) anon30_Then_correct) (=> (= (ControlFlow 0 20) 17) anon30_Else_correct)))))
(let ((anon29_Then_correct  (=> (|Set#IsMember| |s#0@0| ($Box refType |a#2@0|)) (and (=> (= (ControlFlow 0 18) (- 0 19)) (or (not (= |a#2@0| null)) (not true))) (=> (or (not (= |a#2@0| null)) (not true)) (and (=> (= (ControlFlow 0 18) 16) anon30_Then_correct) (=> (= (ControlFlow 0 18) 17) anon30_Else_correct)))))))
(let ((anon28_Then_correct  (=> (and ($Is refType |a#2@0| Tclass._module.CellA) ($IsAlloc refType |a#2@0| Tclass._module.CellA $Heap@9)) (and (=> (= (ControlFlow 0 21) 18) anon29_Then_correct) (=> (= (ControlFlow 0 21) 20) anon29_Else_correct)))))
(let ((anon28_Else_correct  (=> (and (not (and ($Is refType |a#2@0| Tclass._module.CellA) ($IsAlloc refType |a#2@0| Tclass._module.CellA $Heap@9))) (= (ControlFlow 0 15) 13)) anon20_correct)))
(let ((anon15_correct  (=> (= |r#0@0| (|Set#FromBoogieMap| (|lambda#24| Tclass._module.CellA |s#0@0| $Heap@9 _module.ICell.data 6))) (and (=> (= (ControlFlow 0 22) 21) anon28_Then_correct) (=> (= (ControlFlow 0 22) 15) anon28_Else_correct)))))
(let ((anon27_Else_correct  (=> (and (not (and (|Set#IsMember| |s#0@0| ($Box refType |a#0@0|)) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 |a#0@0|) _module.ICell.data))) 6))) (= (ControlFlow 0 25) 22)) anon15_correct)))
(let ((anon27_Then_correct  (=> (and (and (|Set#IsMember| |s#0@0| ($Box refType |a#0@0|)) (< (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@9 |a#0@0|) _module.ICell.data))) 6)) (= (ControlFlow 0 24) 22)) anon15_correct)))
(let ((anon26_Else_correct  (=> (not (|Set#IsMember| |s#0@0| ($Box refType |a#0@0|))) (and (=> (= (ControlFlow 0 28) 24) anon27_Then_correct) (=> (= (ControlFlow 0 28) 25) anon27_Else_correct)))))
(let ((anon26_Then_correct  (=> (|Set#IsMember| |s#0@0| ($Box refType |a#0@0|)) (and (=> (= (ControlFlow 0 26) (- 0 27)) (or (not (= |a#0@0| null)) (not true))) (=> (or (not (= |a#0@0| null)) (not true)) (and (=> (= (ControlFlow 0 26) 24) anon27_Then_correct) (=> (= (ControlFlow 0 26) 25) anon27_Else_correct)))))))
(let ((anon25_Then_correct  (=> (and ($Is refType |a#0@0| Tclass._module.CellA) ($IsAlloc refType |a#0@0| Tclass._module.CellA $Heap@9)) (and (=> (= (ControlFlow 0 29) 26) anon26_Then_correct) (=> (= (ControlFlow 0 29) 28) anon26_Else_correct)))))
(let ((anon25_Else_correct  (=> (and (not (and ($Is refType |a#0@0| Tclass._module.CellA) ($IsAlloc refType |a#0@0| Tclass._module.CellA $Heap@9))) (= (ControlFlow 0 23) 22)) anon15_correct)))
(let ((anon10_correct  (and (=> (= (ControlFlow 0 30) (- 0 40)) (or (and ($Is refType null Tclass._module.CellA) (and (|Set#IsMember| |s#0@0| ($Box refType null)) (<= (LitInt 7) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 null) _module.ICell.data)))))) (exists ((|$as#u0#0| T@U) )  (and ($Is refType |$as#u0#0| Tclass._module.CellA) (and (|Set#IsMember| |s#0@0| ($Box refType |$as#u0#0|)) (<= (LitInt 7) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 |$as#u0#0|) _module.ICell.data))))))))) (=> (or (and ($Is refType null Tclass._module.CellA) (and (|Set#IsMember| |s#0@0| ($Box refType null)) (<= (LitInt 7) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 null) _module.ICell.data)))))) (exists ((|$as#u0#0@@0| T@U) )  (and ($Is refType |$as#u0#0@@0| Tclass._module.CellA) (and (|Set#IsMember| |s#0@0| ($Box refType |$as#u0#0@@0|)) (<= (LitInt 7) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 |$as#u0#0@@0|) _module.ICell.data)))))))) (=> (=> true (and ($Is refType |u#0@0| Tclass._module.CellA) ($IsAlloc refType |u#0@0| Tclass._module.CellA $Heap@8))) (=> (and (|Set#IsMember| |s#0@0| ($Box refType |u#0@0|)) (<= (LitInt 7) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 |u#0@0|) _module.ICell.data))))) (and (=> (= (ControlFlow 0 30) (- 0 39)) true) (and (=> (= (ControlFlow 0 30) (- 0 38)) (or (not (= |u#0@0| null)) (not true))) (=> (or (not (= |u#0@0| null)) (not true)) (and (=> (= (ControlFlow 0 30) (- 0 37)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |u#0@0| _module.ICell.data))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |u#0@0| _module.ICell.data)) (=> (= |$rhs#7@0| (LitInt 8)) (=> (and (= $Heap@9 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@8 |u#0@0| (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@8 |u#0@0|) _module.ICell.data ($Box intType (int_2_U |$rhs#7@0|))))) ($IsGoodHeap $Heap@9)) (and (=> (= (ControlFlow 0 30) (- 0 36)) true) (and (=> (= (ControlFlow 0 30) (- 0 35)) (or (not (= $nw@0 null)) (not true))) (and (=> (= (ControlFlow 0 30) (- 0 34)) true) (and (=> (= (ControlFlow 0 30) (- 0 33)) (or (not (= $nw@1 null)) (not true))) (and (=> (= (ControlFlow 0 30) (- 0 32)) true) (and (=> (= (ControlFlow 0 30) (- 0 31)) (or (not (= $nw@2 null)) (not true))) (and (=> (= (ControlFlow 0 30) 29) anon25_Then_correct) (=> (= (ControlFlow 0 30) 23) anon25_Else_correct)))))))))))))))))))))
(let ((anon9_correct  (=> (= (ControlFlow 0 42) 30) anon10_correct)))
(let ((anon24_Else_correct  (=> (and (not (|Set#IsMember| |s#0@0| ($Box refType |u#1@0|))) (= (ControlFlow 0 45) 42)) anon9_correct)))
(let ((anon24_Then_correct  (=> (|Set#IsMember| |s#0@0| ($Box refType |u#1@0|)) (and (=> (= (ControlFlow 0 43) (- 0 44)) (or (not (= |u#1@0| null)) (not true))) (=> (= (ControlFlow 0 43) 42) anon9_correct)))))
(let ((anon23_Then_correct  (=> (and ($Is refType |u#1@0| Tclass._module.CellA) ($IsAlloc refType |u#1@0| Tclass._module.CellA $Heap@8)) (and (=> (= (ControlFlow 0 46) 43) anon24_Then_correct) (=> (= (ControlFlow 0 46) 45) anon24_Else_correct)))))
(let ((anon23_Else_correct  (=> (and (not (and ($Is refType |u#1@0| Tclass._module.CellA) ($IsAlloc refType |u#1@0| Tclass._module.CellA $Heap@8))) (= (ControlFlow 0 41) 30)) anon10_correct)))
(let ((anon22_Else_correct  (=> (and (and (and ($IsGoodHeap $Heap@7) ($IsHeapAnchor $Heap@7)) ($HeapSucc $Heap@6 $Heap@7)) (and (forall (($o@@12 T@U) ($f@@0 T@U) ) (!  (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@12) $f@@0) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@12) $f@@0)) (exists ((|a#1_2| T@U) )  (and (and (and ($Is refType |a#1_2| Tclass._module.CellA) (|Set#IsMember| |s#0@0| ($Box refType |a#1_2|))) (= $o@@12 |a#1_2|)) (= $f@@0 _module.ICell.data))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $o@@12) $f@@0))
)) (forall ((|a#inv#1_0| T@U) ) (!  (=> (and ($Is refType |a#inv#1_0| Tclass._module.CellA) (and (or (not (= |a#inv#1_0| null)) (not true)) (|Set#IsMember| |s#0@0| ($Box refType |a#inv#1_0|)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |a#inv#1_0|) _module.ICell.data) ($Box intType (int_2_U (LitInt 2)))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 |a#inv#1_0|) _module.ICell.data))
)))) (and (=> (= (ControlFlow 0 47) (- 0 58)) true) (and (=> (= (ControlFlow 0 47) (- 0 57)) (or (not (= $nw@0 null)) (not true))) (and (=> (= (ControlFlow 0 47) (- 0 56)) true) (and (=> (= (ControlFlow 0 47) (- 0 55)) (or (not (= $nw@1 null)) (not true))) (and (=> (= (ControlFlow 0 47) (- 0 54)) true) (and (=> (= (ControlFlow 0 47) (- 0 53)) (or (not (= $nw@2 null)) (not true))) (and (=> (= (ControlFlow 0 47) (- 0 52)) true) (and (=> (= (ControlFlow 0 47) (- 0 51)) (or (not (= $nw@1 null)) (not true))) (=> (or (not (= $nw@1 null)) (not true)) (and (=> (= (ControlFlow 0 47) (- 0 50)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $nw@1 _module.ICell.data))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $nw@1 _module.ICell.data)) (=> (= |$rhs#6@0| (LitInt 9)) (=> (and (= $Heap@8 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@7 $nw@1 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@7 $nw@1) _module.ICell.data ($Box intType (int_2_U |$rhs#6@0|))))) ($IsGoodHeap $Heap@8)) (and (=> (= (ControlFlow 0 47) (- 0 49)) true) (and (=> (= (ControlFlow 0 47) (- 0 48)) (|Set#IsMember| |s#0@0| ($Box refType $nw@1))) (=> (|Set#IsMember| |s#0@0| ($Box refType $nw@1)) (and (=> (= (ControlFlow 0 47) 46) anon23_Then_correct) (=> (= (ControlFlow 0 47) 41) anon23_Else_correct)))))))))))))))))))))
(let ((anon22_Then_correct  (=> (and (and ($Is refType |a#1_0@0| Tclass._module.CellA) ($IsAlloc refType |a#1_0@0| Tclass._module.CellA $Heap@6)) (|Set#IsMember| |s#0@0| ($Box refType |a#1_0@0|))) (and (=> (= (ControlFlow 0 9) (- 0 11)) (or (not (= |a#1_0@0| null)) (not true))) (and (=> (= (ControlFlow 0 9) (- 0 10)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |a#1_0@0| _module.ICell.data))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |a#1_0@0| _module.ICell.data)) (=> (and (and (and ($Is refType |a#1_1@0| Tclass._module.CellA) ($IsAlloc refType |a#1_1@0| Tclass._module.CellA $Heap@6)) (|Set#IsMember| |s#0@0| ($Box refType |a#1_1@0|))) (and (or (not (= |a#1_0@0| |a#1_1@0|)) (not true)) (= (ControlFlow 0 9) (- 0 8)))) (or (or (or (not (= |a#1_0@0| |a#1_1@0|)) (not true)) (or (not (= _module.ICell.data _module.ICell.data)) (not true))) (= (LitInt 2) (LitInt 2))))))))))
(let ((anon21_Else_correct  (=> (and (and (and ($IsGoodHeap $Heap@6) ($IsHeapAnchor $Heap@6)) ($HeapSucc $Heap@5 $Heap@6)) (and (forall (($o@@13 T@U) ($f@@1 T@U) ) (!  (or (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@13) $f@@1) (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $o@@13) $f@@1)) (exists ((|a#0_2| T@U) )  (and (and (and ($Is refType |a#0_2| Tclass._module.CellA) (|Set#IsMember| |s#0@0| ($Box refType |a#0_2|))) (= $o@@13 |a#0_2|)) (= $f@@1 _module.ICell.data))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 $o@@13) $f@@1))
)) (forall ((|a#inv#0_0| T@U) ) (!  (=> (and ($Is refType |a#inv#0_0| Tclass._module.CellA) (and (or (not (= |a#inv#0_0| null)) (not true)) (|Set#IsMember| |s#0@0| ($Box refType |a#inv#0_0|)))) (= (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |a#inv#0_0|) _module.ICell.data) ($Box intType (int_2_U (- (+ (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $nw@0) _module.ICell.data))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#inv#0_0|) _module.ICell.data)))) 2)))))
 :pattern ( (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@6 |a#inv#0_0|) _module.ICell.data))
)))) (and (=> (= (ControlFlow 0 59) (- 0 65)) true) (and (=> (= (ControlFlow 0 59) (- 0 64)) (or (not (= $nw@0 null)) (not true))) (and (=> (= (ControlFlow 0 59) (- 0 63)) true) (and (=> (= (ControlFlow 0 59) (- 0 62)) (or (not (= $nw@1 null)) (not true))) (and (=> (= (ControlFlow 0 59) (- 0 61)) true) (and (=> (= (ControlFlow 0 59) (- 0 60)) (or (not (= $nw@2 null)) (not true))) (and (=> (= (ControlFlow 0 59) 9) anon22_Then_correct) (=> (= (ControlFlow 0 59) 47) anon22_Else_correct)))))))))))
(let ((anon21_Then_correct  (=> (and (and ($Is refType |a#0_0@0| Tclass._module.CellA) ($IsAlloc refType |a#0_0@0| Tclass._module.CellA $Heap@5)) (|Set#IsMember| |s#0@0| ($Box refType |a#0_0@0|))) (and (=> (= (ControlFlow 0 2) (- 0 7)) (or (not (= |a#0_0@0| null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 6)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |a#0_0@0| _module.ICell.data))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 |a#0_0@0| _module.ICell.data)) (and (=> (= (ControlFlow 0 2) (- 0 5)) true) (and (=> (= (ControlFlow 0 2) (- 0 4)) (or (not (= $nw@0 null)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (not (= |a#0_0@0| null)) (not true))) (=> (and (and (and ($Is refType |a#0_1@0| Tclass._module.CellA) ($IsAlloc refType |a#0_1@0| Tclass._module.CellA $Heap@5)) (|Set#IsMember| |s#0@0| ($Box refType |a#0_1@0|))) (and (or (not (= |a#0_0@0| |a#0_1@0|)) (not true)) (= (ControlFlow 0 2) (- 0 1)))) (or (or (or (not (= |a#0_0@0| |a#0_1@0|)) (not true)) (or (not (= _module.ICell.data _module.ICell.data)) (not true))) (= (- (+ (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $nw@0) _module.ICell.data))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0_0@0|) _module.ICell.data)))) 2) (- (+ (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 $nw@0) _module.ICell.data))) (U_2_int ($Unbox intType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@5 |a#0_1@0|) _module.ICell.data)))) 2)))))))))))))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap alloc false)) (=> (and (or (not (= $nw@0 null)) (not true)) ($Is refType $nw@0 Tclass._module.CellA?)) (=> (and (and (and (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) alloc)))) (= $Heap@0 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap $nw@0 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap $nw@0) alloc ($Box boolType (bool_2_U true)))))) (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0))) (and (and (or (not (= $nw@1 null)) (not true)) ($Is refType $nw@1 Tclass._module.CellA?)) (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $nw@1) alloc)))) (= $Heap@1 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@0 $nw@1 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@0 $nw@1) alloc ($Box boolType (bool_2_U true)))))))) (and (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (and (or (not (= $nw@2 null)) (not true)) ($Is refType $nw@2 Tclass._module.CellB?))) (and (and (not (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@2) alloc)))) (= $Heap@2 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@1 $nw@2 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@1 $nw@2) alloc ($Box boolType (bool_2_U true)))))) (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2))))) (and (=> (= (ControlFlow 0 66) (- 0 87)) true) (and (=> (= (ControlFlow 0 66) (- 0 86)) (or (not (= $nw@0 null)) (not true))) (=> (or (not (= $nw@0 null)) (not true)) (and (=> (= (ControlFlow 0 66) (- 0 85)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $nw@0 _module.ICell.data))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $nw@0 _module.ICell.data)) (and (=> (= (ControlFlow 0 66) (- 0 84)) true) (and (=> (= (ControlFlow 0 66) (- 0 83)) (or (not (= $nw@1 null)) (not true))) (=> (or (not (= $nw@1 null)) (not true)) (and (=> (= (ControlFlow 0 66) (- 0 82)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $nw@1 _module.ICell.data))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $nw@1 _module.ICell.data)) (and (=> (= (ControlFlow 0 66) (- 0 81)) true) (and (=> (= (ControlFlow 0 66) (- 0 80)) (or (not (= $nw@2 null)) (not true))) (=> (or (not (= $nw@2 null)) (not true)) (and (=> (= (ControlFlow 0 66) (- 0 79)) (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $nw@2 _module.ICell.data))) (=> (U_2_bool (MapType1Select refType FieldType boolType $_ModifiesFrame@0 $nw@2 _module.ICell.data)) (=> (= |$rhs#3@0| (LitInt 4)) (=> (and (= |$rhs#4@0| (LitInt 5)) (= |$rhs#5@0| (LitInt 1))) (and (=> (= (ControlFlow 0 66) (- 0 78)) (or (or (not (= $nw@1 $nw@0)) (not true)) (= |$rhs#4@0| |$rhs#3@0|))) (=> (or (or (not (= $nw@1 $nw@0)) (not true)) (= |$rhs#4@0| |$rhs#3@0|)) (and (=> (= (ControlFlow 0 66) (- 0 77)) (or (or (not (= $nw@2 $nw@0)) (not true)) (= |$rhs#5@0| |$rhs#3@0|))) (=> (or (or (not (= $nw@2 $nw@0)) (not true)) (= |$rhs#5@0| |$rhs#3@0|)) (and (=> (= (ControlFlow 0 66) (- 0 76)) (or (or (not (= $nw@2 $nw@1)) (not true)) (= |$rhs#5@0| |$rhs#4@0|))) (=> (or (or (not (= $nw@2 $nw@1)) (not true)) (= |$rhs#5@0| |$rhs#4@0|)) (=> (and (= $Heap@3 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@2 $nw@0 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@2 $nw@0) _module.ICell.data ($Box intType (int_2_U |$rhs#3@0|))))) ($IsGoodHeap $Heap@3)) (=> (and (and (= $Heap@4 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@3 $nw@1 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@3 $nw@1) _module.ICell.data ($Box intType (int_2_U |$rhs#4@0|))))) ($IsGoodHeap $Heap@4)) (and (= $Heap@5 (MapType0Store refType (MapType0Type FieldType BoxType) $Heap@4 $nw@2 (MapType0Store FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $Heap@4 $nw@2) _module.ICell.data ($Box intType (int_2_U |$rhs#5@0|))))) ($IsGoodHeap $Heap@5))) (and (=> (= (ControlFlow 0 66) (- 0 75)) true) (and (=> (= (ControlFlow 0 66) (- 0 74)) true) (and (=> (= (ControlFlow 0 66) (- 0 73)) true) (=> (= |s#0@0| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| |Set#Empty| ($Box refType $nw@0)) ($Box refType $nw@1)) ($Box refType $nw@2)) ($Box refType null))) (and (=> (= (ControlFlow 0 66) (- 0 72)) true) (and (=> (= (ControlFlow 0 66) (- 0 71)) (or (not (= $nw@0 null)) (not true))) (and (=> (= (ControlFlow 0 66) (- 0 70)) true) (and (=> (= (ControlFlow 0 66) (- 0 69)) (or (not (= $nw@1 null)) (not true))) (and (=> (= (ControlFlow 0 66) (- 0 68)) true) (and (=> (= (ControlFlow 0 66) (- 0 67)) (or (not (= $nw@2 null)) (not true))) (and (=> (= (ControlFlow 0 66) 2) anon21_Then_correct) (=> (= (ControlFlow 0 66) 59) anon21_Else_correct))))))))))))))))))))))))))))))))))))))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (and (=> |defass#c#0| (and ($Is refType |c#0@@5| Tclass._module.CellA) ($IsAlloc refType |c#0@@5| Tclass._module.CellA $Heap))) true)) (and (and (=> |defass#d#0| (and ($Is refType |d#0| Tclass._module.CellA) ($IsAlloc refType |d#0| Tclass._module.CellA $Heap))) true) (and (=> |defass#e#0| (and ($Is refType |e#0| Tclass._module.CellB) ($IsAlloc refType |e#0| Tclass._module.CellB $Heap))) true))) (=> (and (and (and (and (and ($Is SetType |s#0| (TSet Tclass._module.ICell?)) ($IsAlloc SetType |s#0| (TSet Tclass._module.ICell?) $Heap)) true) (and (=> |defass#u#0| (and ($Is refType |u#0| Tclass._module.CellA) ($IsAlloc refType |u#0| Tclass._module.CellA $Heap))) true)) (and (and ($Is SetType |r#0| (TSet Tclass._module.CellA)) ($IsAlloc SetType |r#0| (TSet Tclass._module.CellA) $Heap)) true)) (and (and (and ($Is MapType |m#0| (TMap Tclass._module.CellA TInt)) ($IsAlloc MapType |m#0| (TMap Tclass._module.CellA TInt) $Heap)) true) (and (= 1 $FunctionContextHeight) (= (ControlFlow 0 88) 66)))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
