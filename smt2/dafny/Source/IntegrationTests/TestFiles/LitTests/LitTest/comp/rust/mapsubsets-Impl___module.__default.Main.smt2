(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun Tagclass._module.Test () T@U)
(declare-fun Tagclass._module.Test__ () T@U)
(declare-fun |##_module.Test_.Test| () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun tytagFamily$Test () T@U)
(declare-fun tytagFamily$Test_ () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun |lambda#3| () T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun bv16Type () T@T)
(declare-fun bv16_2_U ((_ BitVec 16)) T@U)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun charType () T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun U_2_bv16 (T@U) (_ BitVec 16))
(declare-fun Tag (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun _module.Test__.Valid_q (T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._module.Test__ () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun |lambda#4| (T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |Set#Empty| () T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun Tclass._module.Test () T@U)
(declare-fun _module.Test__.Test_q (T@U) Bool)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun _module.__default.Map (T@U T@U T@U) T@U)
(declare-fun |_module.__default.Map#canCall| (T@U T@U T@U) Bool)
(declare-fun MapType () T@T)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun null () T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun $OneHeap () T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun TSet (T@U) T@U)
(declare-fun AtLayer (T@T T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun |#_module.Test_.Test| (Int) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun _module.Test__.Char_q (T@U T@U) Bool)
(declare-fun |_module.Test__.Char_q#canCall| (T@U T@U) Bool)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |Map#Empty| () T@U)
(declare-fun _module.Test__.i (T@U) Int)
(declare-fun |lambda#5| (Bool) T@U)
(declare-fun |lambda#7| (T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun $LS (T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun |lambda#6| (T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TChar TInt TagBool TagChar TagInt TagSet TagSeq TagMap alloc Tagclass._System.object? Tagclass._System.object Tagclass._System.___hFunc1 |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 Tagclass._module.Test Tagclass._module.Test__ |##_module.Test_.Test| tytagFamily$object |tytagFamily$_#Func1| |tytagFamily$_tuple#2| tytagFamily$Test tytagFamily$Test_)
)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 3))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))) (= (Ctor refType) 4)) (= (Ctor FieldType) 5)) (= (Ctor BoxType) 6)) (= (Ctor bv16Type) 7)) (= (Ctor charType) 8)) (forall ((arg0@@5 (_ BitVec 16)) ) (! (= (U_2_bv16 (bv16_2_U arg0@@5)) arg0@@5)
 :pattern ( (bv16_2_U arg0@@5))
))) (forall ((x@@2 T@U) ) (! (= (bv16_2_U (U_2_bv16 x@@2)) x@@2)
 :pattern ( (U_2_bv16 x@@2))
))))
(assert (forall ((|$l#0#heap#0| T@U) (|$l#0#c#0| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType |lambda#3| |$l#0#heap#0| |$l#0#c#0|) ($Box bv16Type (bv16_2_U ((_ int2bv 16) (|char#ToInt| ($Unbox charType |$l#0#c#0|))))))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType |lambda#3| |$l#0#heap#0| |$l#0#c#0|))
)))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Ctor DatatypeTypeType) 9))
(assert  (=> (< 0 $FunctionContextHeight) (forall (($h T@U) ($o T@U) ) (!  (=> (and (and ($IsGoodHeap $h) ($Is DatatypeTypeType $o Tclass._module.Test__)) ($IsAlloc DatatypeTypeType $o Tclass._module.Test__ $h)) ($IsAlloc boolType (bool_2_U (_module.Test__.Valid_q $o)) TBool $h))
 :pattern ( (_module.Test__.Valid_q $o) ($IsAlloc DatatypeTypeType $o Tclass._module.Test__ $h))
))))
(assert (forall ((v T@U) (h T@U) ) (! ($IsAlloc intType v (TBitvector 0) h)
 :pattern ( ($IsAlloc intType v (TBitvector 0) h))
)))
(assert (forall ((a T@U) (x@@3 T@U) ) (! (|Set#IsMember| (|Set#UnionOne| a x@@3) x@@3)
 :pattern ( (|Set#UnionOne| a x@@3))
)))
(assert (forall ((v@@0 T@U) (heap T@U) ) (! ($IsAlloc bv16Type v@@0 (TBitvector 16) heap)
 :pattern ( ($IsAlloc bv16Type v@@0 (TBitvector 16) heap))
)))
(assert (= (Ctor SetType) 10))
(assert (forall ((t0@@1 T@U) (t1@@1 T@U) (heap@@0 T@U) (h@@0 T@U) (r T@U) (rd T@U) (bx0 T@U) (bx T@U) ) (! (= (|Set#IsMember| (Reads1 t0@@1 t1@@1 heap@@0 (Handle1 h@@0 r rd) bx0) bx) (|Set#IsMember| (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType rd heap@@0 bx0) bx))
 :pattern ( (|Set#IsMember| (Reads1 t0@@1 t1@@1 heap@@0 (Handle1 h@@0 r rd) bx0) bx))
)))
(assert (forall ((|l#0| T@U) (|$l#0#heap#0@@0| T@U) (|$l#0#c#0@@0| T@U) ) (! (= (U_2_bool (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType (|lambda#4| |l#0|) |$l#0#heap#0@@0| |$l#0#c#0@@0|)) ($IsBox |$l#0#c#0@@0| |l#0|))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType (|lambda#4| |l#0|) |$l#0#heap#0@@0| |$l#0#c#0@@0|))
)))
(assert (forall ((a@@0 T@U) (x@@4 T@U) (y T@U) ) (!  (=> (|Set#IsMember| a@@0 y) (|Set#IsMember| (|Set#UnionOne| a@@0 x@@4) y))
 :pattern ( (|Set#UnionOne| a@@0 x@@4) (|Set#IsMember| a@@0 y))
)))
(assert (forall ((a@@1 T@U) (x@@5 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#UnionOne| a@@1 x@@5) o)  (or (= o x@@5) (|Set#IsMember| a@@1 o)))
 :pattern ( (|Set#IsMember| (|Set#UnionOne| a@@1 x@@5) o))
)))
(assert (forall ((v@@1 T@U) ) (! ($Is intType v@@1 (TBitvector 0))
 :pattern ( ($Is intType v@@1 (TBitvector 0)))
)))
(assert (forall ((v@@2 T@U) ) (! ($Is bv16Type v@@2 (TBitvector 16))
 :pattern ( ($Is bv16Type v@@2 (TBitvector 16)))
)))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d))
 :pattern ( (_System.Tuple2.___hMake2_q d) ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert (forall ((o@@0 T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o@@0))
 :pattern ( (|Set#IsMember| |Set#Empty| o@@0))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (Ctor HandleTypeType) 11))
(assert (forall ((f T@U) (t0@@2 T@U) (t1@@2 T@U) (u0@@2 T@U) (u1@@2 T@U) ) (!  (=> (and (and ($Is HandleTypeType f (Tclass._System.___hFunc1 t0@@2 t1@@2)) (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 u0@@2) ($IsBox bx@@0 t0@@2))
 :pattern ( ($IsBox bx@@0 u0@@2))
 :pattern ( ($IsBox bx@@0 t0@@2))
))) (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 t1@@2) ($IsBox bx@@1 u1@@2))
 :pattern ( ($IsBox bx@@1 t1@@2))
 :pattern ( ($IsBox bx@@1 u1@@2))
))) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0@@2 u1@@2)))
 :pattern ( ($Is HandleTypeType f (Tclass._System.___hFunc1 t0@@2 t1@@2)) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0@@2 u1@@2)))
)))
(assert (forall ((|c#0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._System.object $h@@0) ($IsAlloc refType |c#0| Tclass._System.object? $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object? $h@@0))
)))
(assert (forall ((|t#0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc DatatypeTypeType |t#0| Tclass._module.Test $h@@1) ($IsAlloc DatatypeTypeType |t#0| Tclass._module.Test__ $h@@1))
 :pattern ( ($IsAlloc DatatypeTypeType |t#0| Tclass._module.Test $h@@1))
)))
(assert (forall ((d@@0 T@U) ) (!  (=> ($Is DatatypeTypeType d@@0 Tclass._module.Test__) (_module.Test__.Test_q d@@0))
 :pattern ( (_module.Test__.Test_q d@@0) ($Is DatatypeTypeType d@@0 Tclass._module.Test__))
)))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert (= (Ctor MapType) 12))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.Map$T T@U) (_module._default.Map$U T@U) (|m#0| T@U) ) (!  (=> (or (|_module.__default.Map#canCall| _module._default.Map$T _module._default.Map$U |m#0|) (and (< 0 $FunctionContextHeight) ($Is MapType |m#0| (TMap _module._default.Map$T _module._default.Map$U)))) (= (_module.__default.Map _module._default.Map$T _module._default.Map$U |m#0|) |m#0|))
 :pattern ( (_module.__default.Map _module._default.Map$T _module._default.Map$U |m#0|))
))))
(assert (forall ((s T@U) ) (!  (and (= (= (|Set#Card| s) 0) (= s |Set#Empty|)) (=> (or (not (= (|Set#Card| s) 0)) (not true)) (exists ((x@@6 T@U) ) (! (|Set#IsMember| s x@@6)
 :pattern ( (|Set#IsMember| s x@@6))
))))
 :pattern ( (|Set#Card| s))
)))
(assert (forall (($o@@0 T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o@@0 Tclass._System.object? $h@@2)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@2 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 Tclass._System.object? $h@@2))
)))
(assert (forall ((h@@1 T@U) (k T@U) ) (!  (=> ($HeapSucc h@@1 k) (forall ((o@@1 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@1 o@@1) alloc))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) k o@@1) alloc))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) k o@@1) alloc))
)))
 :pattern ( ($HeapSucc h@@1 k))
)))
(assert (forall ((x@@7 Int) ) (! (= (LitInt x@@7) x@@7)
 :pattern ( (LitInt x@@7))
)))
(assert (forall ((x@@8 T@U) (T T@T) ) (! (= (Lit T x@@8) x@@8)
 :pattern ( (Lit T x@@8))
)))
(assert (= (Ctor SeqType) 13))
(assert (forall ((s@@0 T@U) (bx@@2 T@U) (t T@U) ) (!  (=> (and ($Is SeqType s@@0 (TSeq t)) ($IsBox bx@@2 t)) ($Is SeqType (|Seq#Build| s@@0 bx@@2) (TSeq t)))
 :pattern ( ($Is SeqType (|Seq#Build| s@@0 bx@@2) (TSeq t)))
)))
(assert (forall ((t0@@3 T@U) (t1@@3 T@U) (heap@@1 T@U) (f@@0 T@U) (bx0@@0 T@U) ) (!  (=> (and ($IsGoodHeap heap@@1) (and ($IsBox bx0@@0 t0@@3) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 t0@@3 t1@@3)))) (= (|Set#Equal| (Reads1 t0@@3 t1@@3 $OneHeap f@@0 bx0@@0) |Set#Empty|) (|Set#Equal| (Reads1 t0@@3 t1@@3 heap@@1 f@@0 bx0@@0) |Set#Empty|)))
 :pattern ( (Reads1 t0@@3 t1@@3 $OneHeap f@@0 bx0@@0) ($IsGoodHeap heap@@1))
 :pattern ( (Reads1 t0@@3 t1@@3 heap@@1 f@@0 bx0@@0))
)))
(assert (forall ((m@@4 T@U) (u T@U) (v@@3 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| m@@4) u) (= (|Map#Card| (|Map#Build| m@@4 u v@@3)) (|Map#Card| m@@4)))
 :pattern ( (|Map#Card| (|Map#Build| m@@4 u v@@3)))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h@@3 T@U) ) (!  (=> ($IsGoodHeap $h@@3) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@3)  (and ($IsAllocBox |a#2#0#0@@0| |_System._tuple#2$T0@@1| $h@@3) ($IsAllocBox |a#2#1#0@@0| |_System._tuple#2$T1@@1| $h@@3))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@3))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@1) (= (DatatypeCtorId d@@1) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (_module.Test__.Test_q d@@2) (= (DatatypeCtorId d@@2) |##_module.Test_.Test|))
 :pattern ( (_module.Test__.Test_q d@@2))
)))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (= (|Seq#Equal| s0 s1)  (and (= (|Seq#Length| s0) (|Seq#Length| s1)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0))) (= (|Seq#Index| s0 j) (|Seq#Index| s1 j)))
 :pattern ( (|Seq#Index| s0 j))
 :pattern ( (|Seq#Index| s1 j))
))))
 :pattern ( (|Seq#Equal| s0 s1))
)))
(assert (forall ((x@@9 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@9)) x@@9)
 :pattern ( ($Unbox T@@0 x@@9))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@3) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@3 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@3))
)))
(assert (forall ((t0@@4 T@U) (t1@@4 T@U) (h0 T@U) (h1 T@U) (f@@1 T@U) (bx0@@1 T@U) ) (!  (=> (and (and (and ($HeapSucc h0 h1) (and ($IsGoodHeap h0) ($IsGoodHeap h1))) (and ($IsBox bx0@@1 t0@@4) ($Is HandleTypeType f@@1 (Tclass._System.___hFunc1 t0@@4 t1@@4)))) (forall ((o@@2 T@U) (fld T@U) )  (=> (and (or (not (= o@@2 null)) (not true)) (|Set#IsMember| (Reads1 t0@@4 t1@@4 h0 f@@1 bx0@@1) ($Box refType o@@2))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0 o@@2) fld) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1 o@@2) fld))))) (= (Requires1 t0@@4 t1@@4 h0 f@@1 bx0@@1) (Requires1 t0@@4 t1@@4 h1 f@@1 bx0@@1)))
 :pattern ( ($HeapSucc h0 h1) (Requires1 t0@@4 t1@@4 h1 f@@1 bx0@@1))
)))
(assert (forall ((t0@@5 T@U) (t1@@5 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@2 T@U) (bx0@@2 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) (and ($IsBox bx0@@2 t0@@5) ($Is HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@5 t1@@5)))) (forall ((o@@3 T@U) (fld@@0 T@U) )  (=> (and (or (not (= o@@3 null)) (not true)) (|Set#IsMember| (Reads1 t0@@5 t1@@5 h1@@0 f@@2 bx0@@2) ($Box refType o@@3))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@0 o@@3) fld@@0) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@0 o@@3) fld@@0))))) (= (Requires1 t0@@5 t1@@5 h0@@0 f@@2 bx0@@2) (Requires1 t0@@5 t1@@5 h1@@0 f@@2 bx0@@2)))
 :pattern ( ($HeapSucc h0@@0 h1@@0) (Requires1 t0@@5 t1@@5 h1@@0 f@@2 bx0@@2))
)))
(assert (forall ((v@@4 T@U) (t0@@6 T@U) ) (! (= ($Is SetType v@@4 (TSet t0@@6)) (forall ((bx@@3 T@U) ) (!  (=> (|Set#IsMember| v@@4 bx@@3) ($IsBox bx@@3 t0@@6))
 :pattern ( (|Set#IsMember| v@@4 bx@@3))
)))
 :pattern ( ($Is SetType v@@4 (TSet t0@@6)))
)))
(assert (= (Ctor LayerTypeType) 14))
(assert (forall ((f@@3 T@U) (ly T@U) (A T@T) ) (! (= (AtLayer A f@@3 ly) (MapType1Select LayerTypeType A f@@3 ly))
 :pattern ( (AtLayer A f@@3 ly))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (_module.Test__.Test_q d@@4) (exists ((|a#1#0#0@@0| Int) ) (= d@@4 (|#_module.Test_.Test| |a#1#0#0@@0|))))
 :pattern ( (_module.Test__.Test_q d@@4))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.Map$T@@0 T@U) (_module._default.Map$U@@0 T@U) (|m#0@@0| T@U) ) (!  (=> (or (|_module.__default.Map#canCall| _module._default.Map$T@@0 _module._default.Map$U@@0 (Lit MapType |m#0@@0|)) (and (< 0 $FunctionContextHeight) ($Is MapType |m#0@@0| (TMap _module._default.Map$T@@0 _module._default.Map$U@@0)))) (= (_module.__default.Map _module._default.Map$T@@0 _module._default.Map$U@@0 (Lit MapType |m#0@@0|)) (Lit MapType |m#0@@0|)))
 :weight 3
 :pattern ( (_module.__default.Map _module._default.Map$T@@0 _module._default.Map$U@@0 (Lit MapType |m#0@@0|)))
))))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((s@@1 T@U) (v@@5 T@U) ) (! (= (|Seq#Length| (|Seq#Build| s@@1 v@@5)) (+ 1 (|Seq#Length| s@@1)))
 :pattern ( (|Seq#Build| s@@1 v@@5))
)))
(assert (forall ((m@@5 T@U) (u@@0 T@U) (v@@6 T@U) ) (!  (=> (not (|Set#IsMember| (|Map#Domain| m@@5) u@@0)) (= (|Map#Card| (|Map#Build| m@@5 u@@0 v@@6)) (+ (|Map#Card| m@@5) 1)))
 :pattern ( (|Map#Card| (|Map#Build| m@@5 u@@0 v@@6)))
)))
(assert (forall ((v@@7 T@U) (t@@0 T@U) (h@@2 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@7) t@@0 h@@2) ($IsAlloc T@@1 v@@7 t@@0 h@@2))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@7) t@@0 h@@2))
)))
(assert (forall ((h@@3 T@U) (k@@0 T@U) (bx@@4 T@U) (t@@1 T@U) ) (!  (=> ($HeapSucc h@@3 k@@0) (=> ($IsAllocBox bx@@4 t@@1 h@@3) ($IsAllocBox bx@@4 t@@1 k@@0)))
 :pattern ( ($HeapSucc h@@3 k@@0) ($IsAllocBox bx@@4 t@@1 h@@3))
)))
(assert (forall ((h@@4 T@U) (k@@1 T@U) (v@@8 T@U) (t@@2 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@4 k@@1) (=> ($IsAlloc T@@2 v@@8 t@@2 h@@4) ($IsAlloc T@@2 v@@8 t@@2 k@@1)))
 :pattern ( ($HeapSucc h@@4 k@@1) ($IsAlloc T@@2 v@@8 t@@2 h@@4))
)))
(assert (forall ((t0@@7 T@U) (t1@@6 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@4 T@U) (bx0@@3 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) (and ($IsBox bx0@@3 t0@@7) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc1 t0@@7 t1@@6)))) (forall ((o@@4 T@U) (fld@@1 T@U) )  (=> (and (or (not (= o@@4 null)) (not true)) (|Set#IsMember| (Reads1 t0@@7 t1@@6 h0@@1 f@@4 bx0@@3) ($Box refType o@@4))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@1 o@@4) fld@@1) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@1 o@@4) fld@@1))))) (= (Reads1 t0@@7 t1@@6 h0@@1 f@@4 bx0@@3) (Reads1 t0@@7 t1@@6 h1@@1 f@@4 bx0@@3)))
 :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads1 t0@@7 t1@@6 h1@@1 f@@4 bx0@@3))
)))
(assert (forall ((t0@@8 T@U) (t1@@7 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@5 T@U) (bx0@@4 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) (and ($IsBox bx0@@4 t0@@8) ($Is HandleTypeType f@@5 (Tclass._System.___hFunc1 t0@@8 t1@@7)))) (forall ((o@@5 T@U) (fld@@2 T@U) )  (=> (and (or (not (= o@@5 null)) (not true)) (|Set#IsMember| (Reads1 t0@@8 t1@@7 h1@@2 f@@5 bx0@@4) ($Box refType o@@5))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@2 o@@5) fld@@2) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@2 o@@5) fld@@2))))) (= (Reads1 t0@@8 t1@@7 h0@@2 f@@5 bx0@@4) (Reads1 t0@@8 t1@@7 h1@@2 f@@5 bx0@@4)))
 :pattern ( ($HeapSucc h0@@2 h1@@2) (Reads1 t0@@8 t1@@7 h1@@2 f@@5 bx0@@4))
)))
(assert (forall ((t0@@9 T@U) (t1@@8 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@6 T@U) (bx0@@5 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) (and ($IsBox bx0@@5 t0@@9) ($Is HandleTypeType f@@6 (Tclass._System.___hFunc1 t0@@9 t1@@8)))) (forall ((o@@6 T@U) (fld@@3 T@U) )  (=> (and (or (not (= o@@6 null)) (not true)) (|Set#IsMember| (Reads1 t0@@9 t1@@8 h0@@3 f@@6 bx0@@5) ($Box refType o@@6))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@3 o@@6) fld@@3) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@3 o@@6) fld@@3))))) (= (Apply1 t0@@9 t1@@8 h0@@3 f@@6 bx0@@5) (Apply1 t0@@9 t1@@8 h1@@3 f@@6 bx0@@5)))
 :pattern ( ($HeapSucc h0@@3 h1@@3) (Apply1 t0@@9 t1@@8 h1@@3 f@@6 bx0@@5))
)))
(assert (forall ((t0@@10 T@U) (t1@@9 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@7 T@U) (bx0@@6 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) (and ($IsBox bx0@@6 t0@@10) ($Is HandleTypeType f@@7 (Tclass._System.___hFunc1 t0@@10 t1@@9)))) (forall ((o@@7 T@U) (fld@@4 T@U) )  (=> (and (or (not (= o@@7 null)) (not true)) (|Set#IsMember| (Reads1 t0@@10 t1@@9 h1@@4 f@@7 bx0@@6) ($Box refType o@@7))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@4 o@@7) fld@@4) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@4 o@@7) fld@@4))))) (= (Apply1 t0@@10 t1@@9 h0@@4 f@@7 bx0@@6) (Apply1 t0@@10 t1@@9 h1@@4 f@@7 bx0@@6)))
 :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply1 t0@@10 t1@@9 h1@@4 f@@7 bx0@@6))
)))
(assert  (=> (< 0 $FunctionContextHeight) (forall (($o@@1 T@U) ) (!  (=> ($Is DatatypeTypeType $o@@1 Tclass._module.Test__) ($Is boolType (bool_2_U (_module.Test__.Valid_q $o@@1)) TBool))
 :pattern ( (_module.Test__.Valid_q $o@@1))
))))
(assert (forall ((s@@2 T@U) (bx@@5 T@U) ) (! (= (|Set#IsMember| (SetRef_to_SetBox s@@2) bx@@5) (U_2_bool (MapType1Select refType boolType s@@2 ($Unbox refType bx@@5))))
 :pattern ( (|Set#IsMember| (SetRef_to_SetBox s@@2) bx@@5))
)))
(assert (forall ((t0@@11 T@U) (t1@@10 T@U) (heap@@2 T@U) (h@@5 T@U) (r@@0 T@U) (rd@@0 T@U) (bx0@@7 T@U) ) (! (= (Apply1 t0@@11 t1@@10 heap@@2 (Handle1 h@@5 r@@0 rd@@0) bx0@@7) (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType h@@5 heap@@2 bx0@@7))
 :pattern ( (Apply1 t0@@11 t1@@10 heap@@2 (Handle1 h@@5 r@@0 rd@@0) bx0@@7))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@6 Tclass._System.object?))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) Tclass._System.object)))
 :pattern ( ($IsBox bx@@7 Tclass._System.object))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 Tclass._module.Test) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@8)) bx@@8) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@8) Tclass._module.Test)))
 :pattern ( ($IsBox bx@@8 Tclass._module.Test))
)))
(assert (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 Tclass._module.Test__) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@9)) bx@@9) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@9) Tclass._module.Test__)))
 :pattern ( ($IsBox bx@@9 Tclass._module.Test__))
)))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass._System.object)  (and ($Is refType |c#0@@0| Tclass._System.object?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@0| Tclass._System.object?))
)))
(assert (forall ((s@@3 T@U) (i Int) (v@@9 T@U) ) (!  (and (=> (= i (|Seq#Length| s@@3)) (= (|Seq#Index| (|Seq#Build| s@@3 v@@9) i) v@@9)) (=> (or (not (= i (|Seq#Length| s@@3))) (not true)) (= (|Seq#Index| (|Seq#Build| s@@3 v@@9) i) (|Seq#Index| s@@3 i))))
 :pattern ( (|Seq#Index| (|Seq#Build| s@@3 v@@9) i))
)))
(assert (forall ((f@@8 T@U) (t0@@12 T@U) (t1@@11 T@U) (h@@6 T@U) ) (!  (=> (and ($IsGoodHeap h@@6) ($IsAlloc HandleTypeType f@@8 (Tclass._System.___hFunc1 t0@@12 t1@@11) h@@6)) (forall ((bx0@@8 T@U) ) (!  (=> (and ($IsAllocBox bx0@@8 t0@@12 h@@6) (Requires1 t0@@12 t1@@11 h@@6 f@@8 bx0@@8)) ($IsAllocBox (Apply1 t0@@12 t1@@11 h@@6 f@@8 bx0@@8) t1@@11 h@@6))
 :pattern ( (Apply1 t0@@12 t1@@11 h@@6 f@@8 bx0@@8))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@8 (Tclass._System.___hFunc1 t0@@12 t1@@11) h@@6))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this T@U) (|c#0@@1| T@U) ) (!  (=> (or (|_module.Test__.Char_q#canCall| (Lit DatatypeTypeType this) (Lit charType |c#0@@1|)) (and (< 1 $FunctionContextHeight) (and (and ($Is DatatypeTypeType this Tclass._module.Test__) ($Is charType |c#0@@1| TChar)) (and (_module.Test__.Valid_q (Lit DatatypeTypeType this)) (< (|char#ToInt| (Lit charType |c#0@@1|)) 256))))) (= (_module.Test__.Char_q (Lit DatatypeTypeType this) (Lit charType |c#0@@1|)) (< (|char#ToInt| (Lit charType |c#0@@1|)) (|char#ToInt| (|char#FromInt| (LitInt 3))))))
 :weight 3
 :pattern ( (_module.Test__.Char_q (Lit DatatypeTypeType this) (Lit charType |c#0@@1|)))
))))
(assert (forall ((m@@6 T@U) ) (! (= (= (|Map#Card| m@@6) 0) (= m@@6 |Map#Empty|))
 :pattern ( (|Map#Card| m@@6))
)))
(assert (forall ((this@@0 T@U) ) (! (= (_module.Test__.Valid_q this@@0)  (and (<= (LitInt 0) (_module.Test__.i this@@0)) (< (_module.Test__.i this@@0) 4)))
 :pattern ( (_module.Test__.Valid_q this@@0))
)))
(assert (forall ((|l#0@@0| Bool) (|$l#0#o#0| T@U) ) (! (= (U_2_bool (MapType1Select refType boolType (|lambda#5| |l#0@@0|) |$l#0#o#0|)) |l#0@@0|)
 :pattern ( (MapType1Select refType boolType (|lambda#5| |l#0@@0|) |$l#0#o#0|))
)))
(assert (forall ((|l#0@@1| T@U) (|$l#0#ly#0| T@U) ) (! (= (MapType1Select LayerTypeType HandleTypeType (|lambda#7| |l#0@@1|) |$l#0#ly#0|) |l#0@@1|)
 :pattern ( (MapType1Select LayerTypeType HandleTypeType (|lambda#7| |l#0@@1|) |$l#0#ly#0|))
)))
(assert (forall ((a@@2 T@U) (b T@U) ) (!  (=> (|Set#Equal| a@@2 b) (= a@@2 b))
 :pattern ( (|Set#Equal| a@@2 b))
)))
(assert (forall ((a@@3 T@U) (b@@0 T@U) ) (!  (=> (|Seq#Equal| a@@3 b@@0) (= a@@3 b@@0))
 :pattern ( (|Seq#Equal| a@@3 b@@0))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((_module._default.Map$T@@1 T@U) (_module._default.Map$U@@1 T@U) (|m#0@@1| T@U) ) (!  (=> (or (|_module.__default.Map#canCall| _module._default.Map$T@@1 _module._default.Map$U@@1 |m#0@@1|) (and (< 0 $FunctionContextHeight) ($Is MapType |m#0@@1| (TMap _module._default.Map$T@@1 _module._default.Map$U@@1)))) ($Is MapType (_module.__default.Map _module._default.Map$T@@1 _module._default.Map$U@@1 |m#0@@1|) (TMap _module._default.Map$T@@1 _module._default.Map$U@@1)))
 :pattern ( (_module.__default.Map _module._default.Map$T@@1 _module._default.Map$U@@1 |m#0@@1|))
))))
(assert (forall ((a@@4 T@U) (b@@1 T@U) (c T@U) ) (!  (=> (or (not (= a@@4 c)) (not true)) (=> (and ($HeapSucc a@@4 b@@1) ($HeapSucc b@@1 c)) ($HeapSucc a@@4 c)))
 :pattern ( ($HeapSucc a@@4 b@@1) ($HeapSucc b@@1 c))
)))
(assert (forall ((f@@9 T@U) (t0@@13 T@U) (t1@@12 T@U) ) (! (= ($Is HandleTypeType f@@9 (Tclass._System.___hFunc1 t0@@13 t1@@12)) (forall ((h@@7 T@U) (bx0@@9 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@7) ($IsBox bx0@@9 t0@@13)) (Requires1 t0@@13 t1@@12 h@@7 f@@9 bx0@@9)) ($IsBox (Apply1 t0@@13 t1@@12 h@@7 f@@9 bx0@@9) t1@@12))
 :pattern ( (Apply1 t0@@13 t1@@12 h@@7 f@@9 bx0@@9))
)))
 :pattern ( ($Is HandleTypeType f@@9 (Tclass._System.___hFunc1 t0@@13 t1@@12)))
)))
(assert (forall ((bx@@10 T@U) ) (!  (=> ($IsBox bx@@10 TInt) (and (= ($Box intType ($Unbox intType bx@@10)) bx@@10) ($Is intType ($Unbox intType bx@@10) TInt)))
 :pattern ( ($IsBox bx@@10 TInt))
)))
(assert (forall ((bx@@11 T@U) ) (!  (=> ($IsBox bx@@11 TBool) (and (= ($Box boolType ($Unbox boolType bx@@11)) bx@@11) ($Is boolType ($Unbox boolType bx@@11) TBool)))
 :pattern ( ($IsBox bx@@11 TBool))
)))
(assert (forall ((bx@@12 T@U) ) (!  (=> ($IsBox bx@@12 TChar) (and (= ($Box charType ($Unbox charType bx@@12)) bx@@12) ($Is charType ($Unbox charType bx@@12) TChar)))
 :pattern ( ($IsBox bx@@12 TChar))
)))
(assert (forall ((v@@10 T@U) (t@@3 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@10) t@@3) ($Is T@@3 v@@10 t@@3))
 :pattern ( ($IsBox ($Box T@@3 v@@10) t@@3))
)))
(assert (forall ((t0@@14 T@U) (t1@@13 T@U) (heap@@3 T@U) (h@@8 T@U) (r@@1 T@U) (rd@@1 T@U) (bx0@@10 T@U) ) (!  (=> (U_2_bool (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType r@@1 heap@@3 bx0@@10)) (Requires1 t0@@14 t1@@13 heap@@3 (Handle1 h@@8 r@@1 rd@@1) bx0@@10))
 :pattern ( (Requires1 t0@@14 t1@@13 heap@@3 (Handle1 h@@8 r@@1 rd@@1) bx0@@10))
)))
(assert (forall ((s@@4 T@U) ) (! (<= 0 (|Set#Card| s@@4))
 :pattern ( (|Set#Card| s@@4))
)))
(assert (forall ((s@@5 T@U) ) (! (<= 0 (|Seq#Length| s@@5))
 :pattern ( (|Seq#Length| s@@5))
)))
(assert (forall ((m@@7 T@U) ) (! (<= 0 (|Map#Card| m@@7))
 :pattern ( (|Map#Card| m@@7))
)))
(assert (forall ((v@@11 T@U) (t0@@15 T@U) (h@@9 T@U) ) (! (= ($IsAlloc SetType v@@11 (TSet t0@@15) h@@9) (forall ((bx@@13 T@U) ) (!  (=> (|Set#IsMember| v@@11 bx@@13) ($IsAllocBox bx@@13 t0@@15 h@@9))
 :pattern ( (|Set#IsMember| v@@11 bx@@13))
)))
 :pattern ( ($IsAlloc SetType v@@11 (TSet t0@@15) h@@9))
)))
(assert (forall ((t@@4 T@U) (u@@1 T@U) ) (! (= (Inv0_TMap (TMap t@@4 u@@1)) t@@4)
 :pattern ( (TMap t@@4 u@@1))
)))
(assert (forall ((t@@5 T@U) (u@@2 T@U) ) (! (= (Inv1_TMap (TMap t@@5 u@@2)) u@@2)
 :pattern ( (TMap t@@5 u@@2))
)))
(assert (forall ((t@@6 T@U) (u@@3 T@U) ) (! (= (Tag (TMap t@@6 u@@3)) TagMap)
 :pattern ( (TMap t@@6 u@@3))
)))
(assert (forall ((|#$T0| T@U) (|#$R| T@U) ) (! (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0| |#$R|)) |#$T0|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0| |#$R|))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) ) (! (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) |#$R@@0|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) |a#6#1#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall (($o@@2 T@U) ) (! ($Is refType $o@@2 Tclass._System.object?)
 :pattern ( ($Is refType $o@@2 Tclass._System.object?))
)))
(assert (forall ((v@@12 T@U) (t0@@16 T@U) (h@@10 T@U) ) (! (= ($IsAlloc SeqType v@@12 (TSeq t0@@16) h@@10) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@12))) ($IsAllocBox (|Seq#Index| v@@12 i@@0) t0@@16 h@@10))
 :pattern ( (|Seq#Index| v@@12 i@@0))
)))
 :pattern ( ($IsAlloc SeqType v@@12 (TSeq t0@@16) h@@10))
)))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w)
 :pattern ( (TBitvector w))
)))
(assert (forall ((t@@7 T@U) ) (! (= (Inv0_TSet (TSet t@@7)) t@@7)
 :pattern ( (TSet t@@7))
)))
(assert (forall ((t@@8 T@U) ) (! (= (Tag (TSet t@@8)) TagSet)
 :pattern ( (TSet t@@8))
)))
(assert (forall ((t@@9 T@U) ) (! (= (Inv0_TSeq (TSeq t@@9)) t@@9)
 :pattern ( (TSeq t@@9))
)))
(assert (forall ((t@@10 T@U) ) (! (= (Tag (TSeq t@@10)) TagSeq)
 :pattern ( (TSeq t@@10))
)))
(assert (forall ((|a#0#0#0@@0| Int) ) (! (= (DatatypeCtorId (|#_module.Test_.Test| |a#0#0#0@@0|)) |##_module.Test_.Test|)
 :pattern ( (|#_module.Test_.Test| |a#0#0#0@@0|))
)))
(assert (forall ((|a#4#0#0@@0| Int) ) (! (= (_module.Test__.i (|#_module.Test_.Test| |a#4#0#0@@0|)) |a#4#0#0@@0|)
 :pattern ( (|#_module.Test_.Test| |a#4#0#0@@0|))
)))
(assert (forall ((x@@10 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@10)) x@@10)
 :pattern ( ($Box T@@4 x@@10))
)))
(assert (forall ((v@@13 T@U) (t0@@17 T@U) (t1@@14 T@U) (h@@11 T@U) ) (! (= ($IsAlloc MapType v@@13 (TMap t0@@17 t1@@14) h@@11) (forall ((bx@@14 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@13) bx@@14) (and ($IsAllocBox (MapType1Select BoxType BoxType (|Map#Elements| v@@13) bx@@14) t1@@14 h@@11) ($IsAllocBox bx@@14 t0@@17 h@@11)))
 :pattern ( (MapType1Select BoxType BoxType (|Map#Elements| v@@13) bx@@14))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@13) bx@@14))
)))
 :pattern ( ($IsAlloc MapType v@@13 (TMap t0@@17 t1@@14) h@@11))
)))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (! (< (BoxRank |a#5#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((u@@4 T@U) ) (!  (not (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@4))
 :pattern ( (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@4))
)))
(assert (forall ((|a#2#0#0@@1| Int) ) (! (= ($Is DatatypeTypeType (|#_module.Test_.Test| |a#2#0#0@@1|) Tclass._module.Test__) ($Is intType (int_2_U |a#2#0#0@@1|) TInt))
 :pattern ( ($Is DatatypeTypeType (|#_module.Test_.Test| |a#2#0#0@@1|) Tclass._module.Test__))
)))
(assert (forall ((f@@10 T@U) (ly@@0 T@U) (A@@0 T@T) ) (! (= (AtLayer A@@0 f@@10 ($LS ly@@0)) (AtLayer A@@0 f@@10 ly@@0))
 :pattern ( (AtLayer A@@0 f@@10 ($LS ly@@0)))
)))
(assert (forall ((n Int) ) (!  (=> (or (and (<= 0 n) (< n 55296)) (and (<= 57344 n) (< n 1114112))) (= (|char#ToInt| (|char#FromInt| n)) n))
 :pattern ( (|char#FromInt| n))
)))
(assert (forall ((f@@11 T@U) (t0@@18 T@U) (t1@@15 T@U) (h@@12 T@U) ) (!  (=> ($IsGoodHeap h@@12) (= ($IsAlloc HandleTypeType f@@11 (Tclass._System.___hFunc1 t0@@18 t1@@15) h@@12) (forall ((bx0@@11 T@U) ) (!  (=> (and (and ($IsBox bx0@@11 t0@@18) ($IsAllocBox bx0@@11 t0@@18 h@@12)) (Requires1 t0@@18 t1@@15 h@@12 f@@11 bx0@@11)) (forall ((r@@2 T@U) ) (!  (=> (and (or (not (= r@@2 null)) (not true)) (|Set#IsMember| (Reads1 t0@@18 t1@@15 h@@12 f@@11 bx0@@11) ($Box refType r@@2))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@12 r@@2) alloc))))
 :pattern ( (|Set#IsMember| (Reads1 t0@@18 t1@@15 h@@12 f@@11 bx0@@11) ($Box refType r@@2)))
)))
 :pattern ( (Apply1 t0@@18 t1@@15 h@@12 f@@11 bx0@@11))
 :pattern ( (Reads1 t0@@18 t1@@15 h@@12 f@@11 bx0@@11))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@11 (Tclass._System.___hFunc1 t0@@18 t1@@15) h@@12))
)))
(assert (forall ((bx@@15 T@U) (s@@6 T@U) (t@@11 T@U) ) (!  (=> ($IsBox bx@@15 (TMap s@@6 t@@11)) (and (= ($Box MapType ($Unbox MapType bx@@15)) bx@@15) ($Is MapType ($Unbox MapType bx@@15) (TMap s@@6 t@@11))))
 :pattern ( ($IsBox bx@@15 (TMap s@@6 t@@11)))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) (bx@@16 T@U) ) (!  (=> ($IsBox bx@@16 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@16)) bx@@16) ($Is HandleTypeType ($Unbox HandleTypeType bx@@16) (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|))))
 :pattern ( ($IsBox bx@@16 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@17 T@U) ) (!  (=> ($IsBox bx@@17 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@17)) bx@@17) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@17) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@17 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert (forall ((|l#0@@2| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@3 T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@2| |l#1| |l#2| |l#3|) $o@@3 $f))  (=> (and (or (not (= $o@@3 |l#0@@2|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1| $o@@3) |l#2|)))) |l#3|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@2| |l#1| |l#2| |l#3|) $o@@3 $f))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((this@@1 T@U) (|c#0@@2| T@U) ) (!  (=> (or (|_module.Test__.Char_q#canCall| this@@1 |c#0@@2|) (and (< 1 $FunctionContextHeight) (and (and ($Is DatatypeTypeType this@@1 Tclass._module.Test__) ($Is charType |c#0@@2| TChar)) (and (_module.Test__.Valid_q this@@1) (< (|char#ToInt| |c#0@@2|) 256))))) (= (_module.Test__.Char_q this@@1 |c#0@@2|) (< (|char#ToInt| |c#0@@2|) (|char#ToInt| (|char#FromInt| (LitInt 3))))))
 :pattern ( (_module.Test__.Char_q this@@1 |c#0@@2|))
))))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap T@U) (_module._default.Map$T@@2 T@U) (_module._default.Map$U@@2 T@U) (|m#0@@2| T@U) ) (!  (=> (and (or (|_module.__default.Map#canCall| _module._default.Map$T@@2 _module._default.Map$U@@2 |m#0@@2|) (and (< 0 $FunctionContextHeight) (and ($Is MapType |m#0@@2| (TMap _module._default.Map$T@@2 _module._default.Map$U@@2)) ($IsAlloc MapType |m#0@@2| (TMap _module._default.Map$T@@2 _module._default.Map$U@@2) $Heap)))) ($IsGoodHeap $Heap)) ($IsAlloc MapType (_module.__default.Map _module._default.Map$T@@2 _module._default.Map$U@@2 |m#0@@2|) (TMap _module._default.Map$T@@2 _module._default.Map$U@@2) $Heap))
 :pattern ( ($IsAlloc MapType (_module.__default.Map _module._default.Map$T@@2 _module._default.Map$U@@2 |m#0@@2|) (TMap _module._default.Map$T@@2 _module._default.Map$U@@2) $Heap))
))))
(assert (forall ((s@@7 T@U) (val@@4 T@U) ) (!  (and (= (|Seq#Build_inv0| (|Seq#Build| s@@7 val@@4)) s@@7) (= (|Seq#Build_inv1| (|Seq#Build| s@@7 val@@4)) val@@4))
 :pattern ( (|Seq#Build| s@@7 val@@4))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)) |tytagFamily$_#Func1|))
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall ((d@@5 T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) (and (_module.Test__.Test_q d@@5) ($IsAlloc DatatypeTypeType d@@5 Tclass._module.Test__ $h@@4))) ($IsAlloc intType (int_2_U (_module.Test__.i d@@5)) TInt $h@@4))
 :pattern ( ($IsAlloc intType (int_2_U (_module.Test__.i d@@5)) TInt $h@@4))
)))
(assert (forall ((t0@@19 T@U) (t1@@16 T@U) (heap@@4 T@U) (f@@12 T@U) (bx0@@12 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@4) (and ($IsBox bx0@@12 t0@@19) ($Is HandleTypeType f@@12 (Tclass._System.___hFunc1 t0@@19 t1@@16)))) (|Set#Equal| (Reads1 t0@@19 t1@@16 $OneHeap f@@12 bx0@@12) |Set#Empty|)) (= (Requires1 t0@@19 t1@@16 $OneHeap f@@12 bx0@@12) (Requires1 t0@@19 t1@@16 heap@@4 f@@12 bx0@@12)))
 :pattern ( (Requires1 t0@@19 t1@@16 $OneHeap f@@12 bx0@@12) ($IsGoodHeap heap@@4))
 :pattern ( (Requires1 t0@@19 t1@@16 heap@@4 f@@12 bx0@@12))
)))
(assert (forall ((m@@8 T@U) ) (!  (or (= m@@8 |Map#Empty|) (exists ((k@@2 T@U) ) (|Set#IsMember| (|Map#Domain| m@@8) k@@2)))
 :pattern ( (|Map#Domain| m@@8))
)))
(assert (forall ((m@@9 T@U) ) (!  (or (= m@@9 |Map#Empty|) (exists ((v@@14 T@U) ) (|Set#IsMember| (|Map#Values| m@@9) v@@14)))
 :pattern ( (|Map#Values| m@@9))
)))
(assert (forall ((m@@10 T@U) (item T@U) ) (! (= (|Set#IsMember| (|Map#Items| m@@10) item)  (and (|Set#IsMember| (|Map#Domain| m@@10) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (= (MapType1Select BoxType BoxType (|Map#Elements| m@@10) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))
 :pattern ( (|Set#IsMember| (|Map#Items| m@@10) item))
)))
(assert (forall ((m@@11 T@U) (v@@15 T@U) ) (! (= (|Set#IsMember| (|Map#Values| m@@11) v@@15) (exists ((u@@5 T@U) ) (!  (and (|Set#IsMember| (|Map#Domain| m@@11) u@@5) (= v@@15 (MapType1Select BoxType BoxType (|Map#Elements| m@@11) u@@5)))
 :pattern ( (|Set#IsMember| (|Map#Domain| m@@11) u@@5))
 :pattern ( (MapType1Select BoxType BoxType (|Map#Elements| m@@11) u@@5))
)))
 :pattern ( (|Set#IsMember| (|Map#Values| m@@11) v@@15))
)))
(assert (forall ((m@@12 T@U) (u@@6 T@U) (|u'| T@U) (v@@16 T@U) ) (!  (and (=> (= |u'| u@@6) (and (|Set#IsMember| (|Map#Domain| (|Map#Build| m@@12 u@@6 v@@16)) |u'|) (= (MapType1Select BoxType BoxType (|Map#Elements| (|Map#Build| m@@12 u@@6 v@@16)) |u'|) v@@16))) (=> (or (not (= |u'| u@@6)) (not true)) (and (= (|Set#IsMember| (|Map#Domain| (|Map#Build| m@@12 u@@6 v@@16)) |u'|) (|Set#IsMember| (|Map#Domain| m@@12) |u'|)) (= (MapType1Select BoxType BoxType (|Map#Elements| (|Map#Build| m@@12 u@@6 v@@16)) |u'|) (MapType1Select BoxType BoxType (|Map#Elements| m@@12) |u'|)))))
 :pattern ( (|Set#IsMember| (|Map#Domain| (|Map#Build| m@@12 u@@6 v@@16)) |u'|))
 :pattern ( (MapType1Select BoxType BoxType (|Map#Elements| (|Map#Build| m@@12 u@@6 v@@16)) |u'|))
)))
(assert (forall ((d@@6 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@6)) (DtRank d@@6))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@6)))
)))
(assert (forall ((m@@13 T@U) ) (! (= (|Set#Card| (|Map#Domain| m@@13)) (|Map#Card| m@@13))
 :pattern ( (|Set#Card| (|Map#Domain| m@@13)))
 :pattern ( (|Map#Card| m@@13))
)))
(assert (forall ((m@@14 T@U) ) (! (= (|Set#Card| (|Map#Items| m@@14)) (|Map#Card| m@@14))
 :pattern ( (|Set#Card| (|Map#Items| m@@14)))
 :pattern ( (|Map#Card| m@@14))
)))
(assert (forall ((m@@15 T@U) ) (! (<= (|Set#Card| (|Map#Values| m@@15)) (|Map#Card| m@@15))
 :pattern ( (|Set#Card| (|Map#Values| m@@15)))
 :pattern ( (|Map#Card| m@@15))
)))
(assert (forall ((bx@@18 T@U) ) (!  (=> ($IsBox bx@@18 (TBitvector 0)) (and (= ($Box intType ($Unbox intType bx@@18)) bx@@18) ($Is intType ($Unbox intType bx@@18) (TBitvector 0))))
 :pattern ( ($IsBox bx@@18 (TBitvector 0)))
)))
(assert (forall ((bx@@19 T@U) (t@@12 T@U) ) (!  (=> ($IsBox bx@@19 (TSet t@@12)) (and (= ($Box SetType ($Unbox SetType bx@@19)) bx@@19) ($Is SetType ($Unbox SetType bx@@19) (TSet t@@12))))
 :pattern ( ($IsBox bx@@19 (TSet t@@12)))
)))
(assert (forall ((bx@@20 T@U) (t@@13 T@U) ) (!  (=> ($IsBox bx@@20 (TSeq t@@13)) (and (= ($Box SeqType ($Unbox SeqType bx@@20)) bx@@20) ($Is SeqType ($Unbox SeqType bx@@20) (TSeq t@@13))))
 :pattern ( ($IsBox bx@@20 (TSeq t@@13)))
)))
(assert (forall ((bx@@21 T@U) ) (!  (=> ($IsBox bx@@21 (TBitvector 16)) (and (= ($Box bv16Type ($Unbox bv16Type bx@@21)) bx@@21) ($Is bv16Type ($Unbox bv16Type bx@@21) (TBitvector 16))))
 :pattern ( ($IsBox bx@@21 (TBitvector 16)))
)))
(assert (forall ((a@@5 T@U) (x@@11 T@U) ) (!  (=> (|Set#IsMember| a@@5 x@@11) (= (|Set#Card| (|Set#UnionOne| a@@5 x@@11)) (|Set#Card| a@@5)))
 :pattern ( (|Set#Card| (|Set#UnionOne| a@@5 x@@11)))
)))
(assert (forall ((ch T@U) ) (!  (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (or (and (<= 0 (|char#ToInt| ch)) (< (|char#ToInt| ch) 55296)) (and (<= 57344 (|char#ToInt| ch)) (< (|char#ToInt| ch) 1114112))))
 :pattern ( (|char#ToInt| ch))
)))
(assert (forall ((v@@17 T@U) (t0@@20 T@U) (t1@@17 T@U) ) (! (= ($Is MapType v@@17 (TMap t0@@20 t1@@17)) (forall ((bx@@22 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@17) bx@@22) (and ($IsBox (MapType1Select BoxType BoxType (|Map#Elements| v@@17) bx@@22) t1@@17) ($IsBox bx@@22 t0@@20)))
 :pattern ( (MapType1Select BoxType BoxType (|Map#Elements| v@@17) bx@@22))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@17) bx@@22))
)))
 :pattern ( ($Is MapType v@@17 (TMap t0@@20 t1@@17)))
)))
(assert (forall ((d@@7 T@U) ($h@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) ($Is DatatypeTypeType d@@7 Tclass._module.Test__)) ($IsAlloc DatatypeTypeType d@@7 Tclass._module.Test__ $h@@5))
 :pattern ( ($IsAlloc DatatypeTypeType d@@7 Tclass._module.Test__ $h@@5))
)))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (= (Tag Tclass._module.Test) Tagclass._module.Test))
(assert (= (TagFamily Tclass._module.Test) tytagFamily$Test))
(assert (= (Tag Tclass._module.Test__) Tagclass._module.Test__))
(assert (= (TagFamily Tclass._module.Test__) tytagFamily$Test_))
(assert (forall ((s@@8 T@U) ) (! ($Is SetType (SetRef_to_SetBox s@@8) (TSet Tclass._System.object?))
 :pattern ( (SetRef_to_SetBox s@@8))
)))
(assert (forall ((a@@6 T@U) (b@@2 T@U) ) (! (= (|Set#Equal| a@@6 b@@2) (forall ((o@@8 T@U) ) (! (= (|Set#IsMember| a@@6 o@@8) (|Set#IsMember| b@@2 o@@8))
 :pattern ( (|Set#IsMember| a@@6 o@@8))
 :pattern ( (|Set#IsMember| b@@2 o@@8))
)))
 :pattern ( (|Set#Equal| a@@6 b@@2))
)))
(assert (forall ((d@@8 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (_System.Tuple2.___hMake2_q d@@8) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@8 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@6)
 :pattern ( ($IsAlloc DatatypeTypeType d@@8 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@6))
)))) ($IsAllocBox (_System.Tuple2._0 d@@8) |_System._tuple#2$T0@@6| $h@@6))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@8) |_System._tuple#2$T0@@6| $h@@6))
)))
(assert (forall ((d@@9 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@7 T@U) ) (!  (=> (and ($IsGoodHeap $h@@7) (and (_System.Tuple2.___hMake2_q d@@9) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@9 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@7)
 :pattern ( ($IsAlloc DatatypeTypeType d@@9 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@7))
)))) ($IsAllocBox (_System.Tuple2._1 d@@9) |_System._tuple#2$T1@@7| $h@@7))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@9) |_System._tuple#2$T1@@7| $h@@7))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((|t#0@@0| T@U) ) (! (= ($Is DatatypeTypeType |t#0@@0| Tclass._module.Test)  (and ($Is DatatypeTypeType |t#0@@0| Tclass._module.Test__) (_module.Test__.Valid_q |t#0@@0|)))
 :pattern ( ($Is DatatypeTypeType |t#0@@0| Tclass._module.Test))
)))
(assert (forall ((x@@12 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@12))) (Lit BoxType ($Box intType (int_2_U x@@12))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@12))))
)))
(assert (forall ((|a#3#0#0@@0| Int) ) (! (= (|#_module.Test_.Test| (LitInt |a#3#0#0@@0|)) (Lit DatatypeTypeType (|#_module.Test_.Test| |a#3#0#0@@0|)))
 :pattern ( (|#_module.Test_.Test| (LitInt |a#3#0#0@@0|)))
)))
(assert (forall ((x@@13 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@13)) (Lit BoxType ($Box T@@5 x@@13)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@13)))
)))
(assert (forall ((s@@9 T@U) ) (!  (=> (= (|Seq#Length| s@@9) 0) (= s@@9 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@9))
)))
(assert (forall ((h@@13 T@U) (v@@18 T@U) ) (! ($IsAlloc intType v@@18 TInt h@@13)
 :pattern ( ($IsAlloc intType v@@18 TInt h@@13))
)))
(assert (forall ((h@@14 T@U) (v@@19 T@U) ) (! ($IsAlloc boolType v@@19 TBool h@@14)
 :pattern ( ($IsAlloc boolType v@@19 TBool h@@14))
)))
(assert (forall ((h@@15 T@U) (v@@20 T@U) ) (! ($IsAlloc charType v@@20 TChar h@@15)
 :pattern ( ($IsAlloc charType v@@20 TChar h@@15))
)))
(assert (forall ((v@@21 T@U) (t0@@21 T@U) ) (! (= ($Is SeqType v@@21 (TSeq t0@@21)) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@21))) ($IsBox (|Seq#Index| v@@21 i@@1) t0@@21))
 :pattern ( (|Seq#Index| v@@21 i@@1))
)))
 :pattern ( ($Is SeqType v@@21 (TSeq t0@@21)))
)))
(assert (forall ((a@@7 T@U) (x@@14 T@U) ) (!  (=> (not (|Set#IsMember| a@@7 x@@14)) (= (|Set#Card| (|Set#UnionOne| a@@7 x@@14)) (+ (|Set#Card| a@@7) 1)))
 :pattern ( (|Set#Card| (|Set#UnionOne| a@@7 x@@14)))
)))
(assert (forall ((|l#0@@3| T@U) (|$l#0#heap#0@@1| T@U) (|$l#0#c#0@@1| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType (|lambda#6| |l#0@@3|) |$l#0#heap#0@@1| |$l#0#c#0@@1|) |l#0@@3|)
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType (|lambda#6| |l#0@@3|) |$l#0#heap#0@@1| |$l#0#c#0@@1|))
)))
(assert (forall ((m@@16 T@U) ) (!  (or (= m@@16 |Map#Empty|) (exists ((k@@3 T@U) (v@@22 T@U) ) (|Set#IsMember| (|Map#Items| m@@16) ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| k@@3 v@@22)))))
 :pattern ( (|Map#Items| m@@16))
)))
(assert (forall ((s@@10 T@U) (i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| s@@10))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@10 i@@2))) (|Seq#Rank| s@@10)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@10 i@@2))))
)))
(assert (forall ((v@@23 T@U) (t0@@22 T@U) (t1@@18 T@U) ) (!  (=> ($Is MapType v@@23 (TMap t0@@22 t1@@18)) (and (and ($Is SetType (|Map#Domain| v@@23) (TSet t0@@22)) ($Is SetType (|Map#Values| v@@23) (TSet t1@@18))) ($Is SetType (|Map#Items| v@@23) (TSet (Tclass._System.Tuple2 t0@@22 t1@@18)))))
 :pattern ( ($Is MapType v@@23 (TMap t0@@22 t1@@18)))
)))
(assert (forall ((v@@24 T@U) ) (! ($Is intType v@@24 TInt)
 :pattern ( ($Is intType v@@24 TInt))
)))
(assert (forall ((v@@25 T@U) ) (! ($Is boolType v@@25 TBool)
 :pattern ( ($Is boolType v@@25 TBool))
)))
(assert (forall ((v@@26 T@U) ) (! ($Is charType v@@26 TChar)
 :pattern ( ($Is charType v@@26 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |c#0@0| () T@U)
(declare-fun |$_Frame#l0@0| () T@U)
(declare-fun |$lambdaHeap#0@0| () T@U)
(declare-fun |newtype$check#0@0| () Int)
(declare-fun |lambdaResult#0| () (_ BitVec 16))
(declare-fun $Heap@@0 () T@U)
(declare-fun |call3formal@r#0@0| () T@U)
(declare-fun |t#0@0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |newtype$check#1@0| () Int)
(declare-fun |##c#0@0| () T@U)
(declare-fun |call3formal@r#0@0@@0| () T@U)
(declare-fun |c##1@0| () T@U)
(declare-fun |s##1@0| () T@U)
(declare-fun |call3formal@r#0| () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $Heap@0 () T@U)
(declare-fun |z#0@0| () (_ BitVec 16))
(declare-fun $LZ () T@U)
(declare-fun |c##0@0| () T@U)
(declare-fun |s##0@0| () T@U)
(declare-fun |call3formal@r#0@@0| () T@U)
(declare-fun |s#0@0| () T@U)
(declare-fun $_ModifiesFrame@0 () T@U)
(declare-fun |##m#0@0| () T@U)
(declare-fun |m#0@0| () T@U)
(declare-fun |m#0@@3| () T@U)
(declare-fun |s#0| () T@U)
(declare-fun |t#0@@1| () T@U)
(declare-fun |x#0| () T@U)
(declare-fun |y#0| () T@U)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 20) (let ((anon5_correct true))
(let ((anon15_Else_correct  (=> (and (not ($Is charType |c#0@0| TChar)) (= (ControlFlow 0 16) 13)) anon5_correct)))
(let ((anon15_Then_correct  (=> ($Is charType |c#0@0| TChar) (=> (and (= |$_Frame#l0@0| (|lambda#0| null |$lambdaHeap#0@0| alloc false)) (= |newtype$check#0@0| (|char#ToInt| |c#0@0|))) (and (=> (= (ControlFlow 0 14) (- 0 15)) (and (<= 0 |newtype$check#0@0|) (< |newtype$check#0@0| 65536))) (=> (and (<= 0 |newtype$check#0@0|) (< |newtype$check#0@0| 65536)) (=> (= |lambdaResult#0| ((_ int2bv 16) (|char#ToInt| |c#0@0|))) (=> (and ($Is bv16Type (bv16_2_U |lambdaResult#0|) (TBitvector 16)) (= (ControlFlow 0 14) 13)) anon5_correct))))))))
(let ((anon14_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#0@0|) (or (= $Heap@@0 |$lambdaHeap#0@0|) ($HeapSucc $Heap@@0 |$lambdaHeap#0@0|))) (and (=> (= (ControlFlow 0 17) 14) anon15_Then_correct) (=> (= (ControlFlow 0 17) 16) anon15_Else_correct)))))
(let ((anon18_Else_correct true))
(let ((anon18_Then_correct true))
(let ((anon17_Else_correct  (=> (|Seq#Equal| |call3formal@r#0@0| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box charType (|char#FromInt| 110))) ($Box charType (|char#FromInt| 111))) ($Box charType (|char#FromInt| 116))) ($Box charType (|char#FromInt| 32))) ($Box charType (|char#FromInt| 105))) ($Box charType (|char#FromInt| 110))) ($Box charType (|char#FromInt| 115))) ($Box charType (|char#FromInt| 105))) ($Box charType (|char#FromInt| 100))) ($Box charType (|char#FromInt| 101)))) (=> (and ($IsAllocBox ($Box DatatypeTypeType |t#0@0|) Tclass._module.Test__ $Heap@1) (= |newtype$check#1@0| (LitInt 2))) (and (=> (= (ControlFlow 0 6) (- 0 9)) (or (and (<= 0 |newtype$check#1@0|) (< |newtype$check#1@0| 55296)) (and (<= 57344 |newtype$check#1@0|) (< |newtype$check#1@0| 1114112)))) (=> (or (and (<= 0 |newtype$check#1@0|) (< |newtype$check#1@0| 55296)) (and (<= 57344 |newtype$check#1@0|) (< |newtype$check#1@0| 1114112))) (=> (and (= |##c#0@0| (|char#FromInt| (LitInt 2))) ($IsAlloc charType |##c#0@0| TChar $Heap@1)) (and (=> (= (ControlFlow 0 6) (- 0 8)) (_module.Test__.Valid_q |t#0@0|)) (=> (_module.Test__.Valid_q |t#0@0|) (and (=> (= (ControlFlow 0 6) (- 0 7)) (< (|char#ToInt| |##c#0@0|) 256)) (=> (< (|char#ToInt| |##c#0@0|) 256) (=> (and (|_module.Test__.Char_q#canCall| |t#0@0| (|char#FromInt| (LitInt 2))) (|_module.Test__.Char_q#canCall| |t#0@0| (|char#FromInt| (LitInt 2)))) (and (=> (= (ControlFlow 0 6) 4) anon18_Then_correct) (=> (= (ControlFlow 0 6) 5) anon18_Else_correct))))))))))))))
(let ((anon17_Then_correct true))
(let ((anon16_Else_correct  (=> (|Seq#Equal| |call3formal@r#0@0@@0| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box charType (|char#FromInt| 105))) ($Box charType (|char#FromInt| 110))) ($Box charType (|char#FromInt| 115))) ($Box charType (|char#FromInt| 105))) ($Box charType (|char#FromInt| 100))) ($Box charType (|char#FromInt| 101))) ($Box charType (|char#FromInt| 58))) ($Box charType (|char#FromInt| 104))) ($Box charType (|char#FromInt| 101))) ($Box charType (|char#FromInt| 108))) ($Box charType (|char#FromInt| 108))) ($Box charType (|char#FromInt| 111)))) (=> (and (= |c##1@0| (Lit charType (|char#FromInt| 122))) (= |s##1@0| (Lit MapType (|Map#Build| |Map#Empty| ($Box charType (Lit charType (|char#FromInt| 97))) ($Box SeqType (Lit SeqType (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box charType (|char#FromInt| 104))) ($Box charType (|char#FromInt| 101))) ($Box charType (|char#FromInt| 108))) ($Box charType (|char#FromInt| 108))) ($Box charType (|char#FromInt| 111))))))))) (=> (and (and (and ($Is SeqType |call3formal@r#0| (TSeq TChar)) ($IsAlloc SeqType |call3formal@r#0| (TSeq TChar) $Heap@@0)) (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1))) (and (and ($Is SeqType |call3formal@r#0@0| (TSeq TChar)) ($IsAlloc SeqType |call3formal@r#0@0| (TSeq TChar) $Heap@1)) (and (forall (($o@@4 T@U) ) (!  (=> (and (or (not (= $o@@4 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $o@@4) alloc)))) (= (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $o@@4) (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $o@@4)))
 :pattern ( (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@1 $o@@4))
)) ($HeapSucc $Heap@0 $Heap@1)))) (and (=> (= (ControlFlow 0 10) 3) anon17_Then_correct) (=> (= (ControlFlow 0 10) 6) anon17_Else_correct)))))))
(let ((anon16_Then_correct true))
(let ((anon14_Else_correct  (=> (= |z#0@0| (U_2_bv16 ($Unbox bv16Type (Apply1 TChar (TBitvector 16) $Heap@@0 (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#7| (Handle1 |lambda#3| (|lambda#4| TChar) (|lambda#6| (SetRef_to_SetBox (|lambda#5| false))))) ($LS $LZ))) ($Box charType (Lit charType (|char#FromInt| 97))))))) (and (=> (= (ControlFlow 0 11) (- 0 12)) ($Is DatatypeTypeType (Lit DatatypeTypeType (|#_module.Test_.Test| (LitInt 2))) Tclass._module.Test)) (=> ($Is DatatypeTypeType (Lit DatatypeTypeType (|#_module.Test_.Test| (LitInt 2))) Tclass._module.Test) (=> (= |t#0@0| (Lit DatatypeTypeType (|#_module.Test_.Test| (LitInt 2)))) (=> (and (= |c##0@0| (Lit charType (|char#FromInt| 97))) (= |s##0@0| (Lit MapType (|Map#Build| |Map#Empty| ($Box charType (Lit charType (|char#FromInt| 97))) ($Box SeqType (Lit SeqType (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| |Seq#Empty| ($Box charType (|char#FromInt| 104))) ($Box charType (|char#FromInt| 101))) ($Box charType (|char#FromInt| 108))) ($Box charType (|char#FromInt| 108))) ($Box charType (|char#FromInt| 111))))))))) (=> (and (and (and ($Is SeqType |call3formal@r#0@@0| (TSeq TChar)) ($IsAlloc SeqType |call3formal@r#0@@0| (TSeq TChar) $Heap@@0)) (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0))) (and (and ($Is SeqType |call3formal@r#0@0@@0| (TSeq TChar)) ($IsAlloc SeqType |call3formal@r#0@0@@0| (TSeq TChar) $Heap@0)) (and (forall (($o@@5 T@U) ) (!  (=> (and (or (not (= $o@@5 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@0 $o@@5) alloc)))) (= (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $o@@5) (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@@0 $o@@5)))
 :pattern ( (MapType1Select refType (MapType1Type FieldType BoxType) $Heap@0 $o@@5))
)) ($HeapSucc $Heap@@0 $Heap@0)))) (and (=> (= (ControlFlow 0 11) 2) anon16_Then_correct) (=> (= (ControlFlow 0 11) 10) anon16_Else_correct))))))))))
(let ((anon13_Else_correct  (=> (= (|Set#Card| |s#0@0|) (LitInt 1)) (and (=> (= (ControlFlow 0 18) 17) anon14_Then_correct) (=> (= (ControlFlow 0 18) 11) anon14_Else_correct)))))
(let ((anon13_Then_correct true))
(let ((anon0_correct  (=> (= $_ModifiesFrame@0 (|lambda#0| null $Heap@@0 alloc false)) (=> (and (= |##m#0@0| (Lit MapType (|Map#Build| |Map#Empty| ($Box intType (int_2_U (LitInt 1))) ($Box intType (int_2_U (LitInt 2)))))) ($IsAlloc MapType |##m#0@0| (TMap TInt TInt) $Heap@@0)) (=> (and (and (|_module.__default.Map#canCall| TInt TInt (Lit MapType (|Map#Build| |Map#Empty| ($Box intType (int_2_U (LitInt 1))) ($Box intType (int_2_U (LitInt 2)))))) (|_module.__default.Map#canCall| TInt TInt (Lit MapType (|Map#Build| |Map#Empty| ($Box intType (int_2_U (LitInt 1))) ($Box intType (int_2_U (LitInt 2))))))) (and (= |m#0@0| (Lit MapType (_module.__default.Map TInt TInt (Lit MapType (|Map#Build| |Map#Empty| ($Box intType (int_2_U (LitInt 1))) ($Box intType (int_2_U (LitInt 2)))))))) (= |s#0@0| (Lit SetType (|Set#UnionOne| |Set#Empty| ($Box SetType (Lit SetType |Set#Empty|))))))) (and (=> (= (ControlFlow 0 19) 1) anon13_Then_correct) (=> (= (ControlFlow 0 19) 18) anon13_Else_correct)))))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@0) ($IsHeapAnchor $Heap@@0)) (=> (and (and (and ($Is MapType |m#0@@3| (TMap TInt TInt)) ($IsAlloc MapType |m#0@@3| (TMap TInt TInt) $Heap@@0)) true) (and (and ($Is SetType |s#0| (TSet (TSet TInt))) ($IsAlloc SetType |s#0| (TSet (TSet TInt)) $Heap@@0)) true)) (=> (and (and (and (and ($Is DatatypeTypeType |t#0@@1| Tclass._module.Test) ($IsAlloc DatatypeTypeType |t#0@@1| Tclass._module.Test $Heap@@0)) true) (and (and ($Is SeqType |x#0| (TSeq TChar)) ($IsAlloc SeqType |x#0| (TSeq TChar) $Heap@@0)) true)) (and (and (and ($Is SeqType |y#0| (TSeq TChar)) ($IsAlloc SeqType |y#0| (TSeq TChar) $Heap@@0)) true) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 20) 19)))) anon0_correct)))))
PreconditionGeneratedEntry_correct))))))))))))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 14) (- 15))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
