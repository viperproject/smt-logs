(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 (T@T) Int)
(declare-fun $generated@@4 () T@T)
(declare-fun $generated@@5 () T@T)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 (Bool) T@U)
(declare-fun $generated@@8 (T@U) Bool)
(declare-fun $generated@@9 (Int) T@U)
(declare-fun $generated@@10 (T@U) Int)
(declare-fun $generated@@11 (Real) T@U)
(declare-fun $generated@@12 (T@U) Real)
(declare-fun $generated@@19 (T@U) T@U)
(declare-fun $generated@@20 (T@U) Int)
(declare-fun $generated@@21 () T@U)
(declare-fun $generated@@22 (T@U T@U) Bool)
(declare-fun $generated@@23 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@24 () T@T)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 () T@T)
(declare-fun $generated@@27 (T@T T@T) T@T)
(declare-fun $generated@@28 (T@T T@U) T@U)
(declare-fun $generated@@29 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@30 (T@T) T@T)
(declare-fun $generated@@31 (T@T) T@T)
(declare-fun $generated@@52 (Int) Int)
(declare-fun $generated@@54 (T@T T@U) T@U)
(declare-fun $generated@@57 (T@T T@U) T@U)
(declare-fun $generated@@60 (T@U T@U T@U) Bool)
(declare-fun $generated@@61 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@78 (T@U T@U) Bool)
(declare-fun $generated@@79 () T@T)
(declare-fun $generated@@80 (T@T T@U T@U) Bool)
(declare-fun $generated@@86 () T@T)
(declare-fun $generated@@87 (T@U) T@U)
(declare-fun $generated@@88 (T@U Int) T@U)
(declare-fun $generated@@93 (T@U) T@U)
(declare-fun $generated@@98 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@99 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@100 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@3 $generated@@4) 0) (= ($generated@@3 $generated@@5) 1)) (= ($generated@@3 $generated@@6) 2)) (forall (($generated@@13 Bool) ) (! (= ($generated@@8 ($generated@@7 $generated@@13)) $generated@@13)
 :pattern ( ($generated@@7 $generated@@13))
))) (forall (($generated@@14 T@U) ) (! (= ($generated@@7 ($generated@@8 $generated@@14)) $generated@@14)
 :pattern ( ($generated@@8 $generated@@14))
))) (forall (($generated@@15 Int) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Real) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2)
)
(assert (= ($generated@@19 $generated) $generated@@0))
(assert (= ($generated@@20 $generated@@21) 0))
(assert  (and (and (and (and (and (and (and (forall (($generated@@32 T@T) ($generated@@33 T@T) ($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 T@U) ) (! (= ($generated@@23 $generated@@32 $generated@@33 ($generated@@29 $generated@@32 $generated@@33 $generated@@35 $generated@@36 $generated@@34) $generated@@36) $generated@@34)
 :weight 0
)) (forall (($generated@@37 T@T) ($generated@@38 T@T) ($generated@@39 T@U) ($generated@@40 T@U) ($generated@@41 T@U) ($generated@@42 T@U) ) (!  (or (= $generated@@41 $generated@@42) (= ($generated@@23 $generated@@37 $generated@@38 ($generated@@29 $generated@@37 $generated@@38 $generated@@40 $generated@@41 $generated@@39) $generated@@42) ($generated@@23 $generated@@37 $generated@@38 $generated@@40 $generated@@42)))
 :weight 0
))) (= ($generated@@3 $generated@@24) 3)) (= ($generated@@3 $generated@@25) 4)) (= ($generated@@3 $generated@@26) 5)) (forall (($generated@@43 T@T) ($generated@@44 T@T) ) (= ($generated@@3 ($generated@@27 $generated@@43 $generated@@44)) 6))) (forall (($generated@@45 T@T) ($generated@@46 T@T) ) (! (= ($generated@@30 ($generated@@27 $generated@@45 $generated@@46)) $generated@@45)
 :pattern ( ($generated@@27 $generated@@45 $generated@@46))
))) (forall (($generated@@47 T@T) ($generated@@48 T@T) ) (! (= ($generated@@31 ($generated@@27 $generated@@47 $generated@@48)) $generated@@48)
 :pattern ( ($generated@@27 $generated@@47 $generated@@48))
))))
(assert (forall (($generated@@49 T@U) ($generated@@50 T@U) ) (!  (=> ($generated@@22 $generated@@49 $generated@@50) (forall (($generated@@51 T@U) ) (!  (=> ($generated@@8 ($generated@@28 $generated@@4 ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@49 $generated@@51) $generated@@2))) ($generated@@8 ($generated@@28 $generated@@4 ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@50 $generated@@51) $generated@@2))))
 :pattern ( ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@50 $generated@@51) $generated@@2))
)))
 :pattern ( ($generated@@22 $generated@@49 $generated@@50))
)))
(assert (forall (($generated@@53 Int) ) (! (= ($generated@@52 $generated@@53) $generated@@53)
 :pattern ( ($generated@@52 $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ($generated@@56 T@T) ) (! (= ($generated@@54 $generated@@56 $generated@@55) $generated@@55)
 :pattern ( ($generated@@54 $generated@@56 $generated@@55))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@T) ) (! (= ($generated@@57 $generated@@59 ($generated@@28 $generated@@59 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@28 $generated@@59 $generated@@58))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@U) ($generated@@64 T@U) ($generated@@65 T@T) ) (! (= ($generated@@60 ($generated@@57 $generated@@65 $generated@@62) $generated@@63 $generated@@64) ($generated@@61 $generated@@65 $generated@@62 $generated@@63 $generated@@64))
 :pattern ( ($generated@@60 ($generated@@57 $generated@@65 $generated@@62) $generated@@63 $generated@@64))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@U) ($generated@@68 T@U) ($generated@@69 T@U) ) (!  (=> ($generated@@22 $generated@@66 $generated@@67) (=> ($generated@@60 $generated@@68 $generated@@69 $generated@@66) ($generated@@60 $generated@@68 $generated@@69 $generated@@67)))
 :pattern ( ($generated@@22 $generated@@66 $generated@@67) ($generated@@60 $generated@@68 $generated@@69 $generated@@66))
)))
(assert (forall (($generated@@70 T@U) ($generated@@71 T@U) ($generated@@72 T@U) ($generated@@73 T@U) ($generated@@74 T@T) ) (!  (=> ($generated@@22 $generated@@70 $generated@@71) (=> ($generated@@61 $generated@@74 $generated@@72 $generated@@73 $generated@@70) ($generated@@61 $generated@@74 $generated@@72 $generated@@73 $generated@@71)))
 :pattern ( ($generated@@22 $generated@@70 $generated@@71) ($generated@@61 $generated@@74 $generated@@72 $generated@@73 $generated@@70))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ($generated@@77 T@U) ) (!  (=> (or (not (= $generated@@75 $generated@@77)) (not true)) (=> (and ($generated@@22 $generated@@75 $generated@@76) ($generated@@22 $generated@@76 $generated@@77)) ($generated@@22 $generated@@75 $generated@@77)))
 :pattern ( ($generated@@22 $generated@@75 $generated@@76) ($generated@@22 $generated@@76 $generated@@77))
)))
(assert (= ($generated@@3 $generated@@79) 7))
(assert (forall (($generated@@81 T@U) ) (!  (=> ($generated@@78 $generated@@81 $generated) (and (= ($generated@@57 $generated@@79 ($generated@@28 $generated@@79 $generated@@81)) $generated@@81) ($generated@@80 $generated@@79 ($generated@@28 $generated@@79 $generated@@81) $generated)))
 :pattern ( ($generated@@78 $generated@@81 $generated))
)))
(assert (forall (($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@T) ) (! (= ($generated@@78 ($generated@@57 $generated@@84 $generated@@82) $generated@@83) ($generated@@80 $generated@@84 $generated@@82 $generated@@83))
 :pattern ( ($generated@@78 ($generated@@57 $generated@@84 $generated@@82) $generated@@83))
)))
(assert (forall (($generated@@85 T@U) ) (! (<= 0 ($generated@@20 $generated@@85))
 :pattern ( ($generated@@20 $generated@@85))
)))
(assert (= ($generated@@3 $generated@@86) 8))
(assert (forall (($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ) (! (= ($generated@@61 $generated@@86 $generated@@89 ($generated@@87 $generated@@90) $generated@@91) (forall (($generated@@92 Int) ) (!  (=> (and (<= 0 $generated@@92) (< $generated@@92 ($generated@@20 $generated@@89))) ($generated@@60 ($generated@@88 $generated@@89 $generated@@92) $generated@@90 $generated@@91))
 :pattern ( ($generated@@88 $generated@@89 $generated@@92))
)))
 :pattern ( ($generated@@61 $generated@@86 $generated@@89 ($generated@@87 $generated@@90) $generated@@91))
)))
(assert (forall (($generated@@94 T@U) ) (! (= ($generated@@93 ($generated@@87 $generated@@94)) $generated@@94)
 :pattern ( ($generated@@87 $generated@@94))
)))
(assert (forall (($generated@@95 T@U) ) (! (= ($generated@@19 ($generated@@87 $generated@@95)) $generated@@1)
 :pattern ( ($generated@@87 $generated@@95))
)))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@T) ) (! (= ($generated@@28 $generated@@97 ($generated@@57 $generated@@97 $generated@@96)) $generated@@96)
 :pattern ( ($generated@@57 $generated@@97 $generated@@96))
)))
(assert  (and (forall (($generated@@101 T@T) ($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ($generated@@107 T@U) ) (! (= ($generated@@98 $generated@@101 $generated@@102 $generated@@103 ($generated@@100 $generated@@101 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@107 $generated@@104) $generated@@106 $generated@@107) $generated@@104)
 :weight 0
)) (and (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ($generated@@115 T@U) ($generated@@116 T@U) ) (!  (or (= $generated@@113 $generated@@115) (= ($generated@@98 $generated@@108 $generated@@109 $generated@@110 ($generated@@100 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@114 $generated@@111) $generated@@115 $generated@@116) ($generated@@98 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@115 $generated@@116)))
 :weight 0
)) (forall (($generated@@117 T@T) ($generated@@118 T@T) ($generated@@119 T@T) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 T@U) ) (!  (or (= $generated@@123 $generated@@125) (= ($generated@@98 $generated@@117 $generated@@118 $generated@@119 ($generated@@100 $generated@@117 $generated@@118 $generated@@119 $generated@@121 $generated@@122 $generated@@123 $generated@@120) $generated@@124 $generated@@125) ($generated@@98 $generated@@117 $generated@@118 $generated@@119 $generated@@121 $generated@@124 $generated@@125)))
 :weight 0
)))))
(assert (forall (($generated@@126 T@U) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 Bool) ($generated@@130 T@U) ($generated@@131 T@U) ) (! (= ($generated@@8 ($generated@@98 $generated@@26 $generated@@24 $generated@@4 ($generated@@99 $generated@@126 $generated@@127 $generated@@128 $generated@@129) $generated@@130 $generated@@131))  (=> (and (or (not (= $generated@@130 $generated@@126)) (not true)) ($generated@@8 ($generated@@28 $generated@@4 ($generated@@23 $generated@@24 $generated@@25 ($generated@@23 $generated@@26 ($generated@@27 $generated@@24 $generated@@25) $generated@@127 $generated@@130) $generated@@128)))) $generated@@129))
 :pattern ( ($generated@@98 $generated@@26 $generated@@24 $generated@@4 ($generated@@99 $generated@@126 $generated@@127 $generated@@128 $generated@@129) $generated@@130 $generated@@131))
)))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ) (!  (=> ($generated@@78 $generated@@132 ($generated@@87 $generated@@133)) (and (= ($generated@@57 $generated@@86 ($generated@@28 $generated@@86 $generated@@132)) $generated@@132) ($generated@@80 $generated@@86 ($generated@@28 $generated@@86 $generated@@132) ($generated@@87 $generated@@133))))
 :pattern ( ($generated@@78 $generated@@132 ($generated@@87 $generated@@133)))
)))
(assert (forall (($generated@@134 Int) ) (! (= ($generated@@57 $generated@@5 ($generated@@9 ($generated@@52 $generated@@134))) ($generated@@54 $generated@@25 ($generated@@57 $generated@@5 ($generated@@9 $generated@@134))))
 :pattern ( ($generated@@57 $generated@@5 ($generated@@9 ($generated@@52 $generated@@134))))
)))
(assert (forall (($generated@@135 T@U) ($generated@@136 T@T) ) (! (= ($generated@@57 $generated@@136 ($generated@@54 $generated@@136 $generated@@135)) ($generated@@54 $generated@@25 ($generated@@57 $generated@@136 $generated@@135)))
 :pattern ( ($generated@@57 $generated@@136 ($generated@@54 $generated@@136 $generated@@135)))
)))
(assert (forall (($generated@@137 T@U) ) (!  (=> (= ($generated@@20 $generated@@137) 0) (= $generated@@137 $generated@@21))
 :pattern ( ($generated@@20 $generated@@137))
)))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ) (! ($generated@@61 $generated@@79 $generated@@139 $generated $generated@@138)
 :pattern ( ($generated@@61 $generated@@79 $generated@@139 $generated $generated@@138))
)))
(assert (forall (($generated@@140 T@U) ($generated@@141 T@U) ) (! (= ($generated@@80 $generated@@86 $generated@@140 ($generated@@87 $generated@@141)) (forall (($generated@@142 Int) ) (!  (=> (and (<= 0 $generated@@142) (< $generated@@142 ($generated@@20 $generated@@140))) ($generated@@78 ($generated@@88 $generated@@140 $generated@@142) $generated@@141))
 :pattern ( ($generated@@88 $generated@@140 $generated@@142))
)))
 :pattern ( ($generated@@80 $generated@@86 $generated@@140 ($generated@@87 $generated@@141)))
)))
(assert (forall (($generated@@143 T@U) ) (! ($generated@@80 $generated@@79 $generated@@143 $generated)
 :pattern ( ($generated@@80 $generated@@79 $generated@@143 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@144 () T@U)
(declare-fun $generated@@145 () T@U)
(declare-fun $generated@@146 () T@U)
(declare-fun $generated@@147 () Int)
(declare-fun $generated@@148 () Int)
(declare-fun $generated@@149 () Int)
(declare-fun $generated@@150 (T@U) Bool)
(declare-fun $generated@@151 (T@U) Bool)
(declare-fun $generated@@152 () Int)
(declare-fun $generated@@153 () T@U)
(declare-fun $generated@@154 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 4) (let (($generated@@155  (=> (and (= $generated@@144 ($generated@@99 $generated@@145 $generated@@146 $generated@@2 false)) (= $generated@@147 ($generated@@52 0))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (and (<= ($generated@@52 (- 0 32768)) $generated@@147) (< $generated@@147 32768))) (=> (and (<= ($generated@@52 (- 0 32768)) $generated@@147) (< $generated@@147 32768)) (=> (or (not (= $generated@@148 0)) (not true)) (=> (and (= $generated@@149 ($generated@@52 (- 0 32767))) (= (ControlFlow 0 2) (- 0 1))) (and (<= ($generated@@52 (- 0 32768)) $generated@@149) (< $generated@@149 32768)))))))))
(let (($generated@@156  (=> (and ($generated@@150 $generated@@146) ($generated@@151 $generated@@146)) (=> (and (and (and (<= ($generated@@52 (- 0 32768)) $generated@@152) (< $generated@@152 32768)) (and (<= ($generated@@52 (- 0 32768)) $generated@@148) (< $generated@@148 32768))) (and (and ($generated@@80 $generated@@86 $generated@@153 ($generated@@87 $generated)) ($generated@@61 $generated@@86 $generated@@153 ($generated@@87 $generated) $generated@@146)) (and (= 1 $generated@@154) (= (ControlFlow 0 4) 2)))) $generated@@155))))
$generated@@156)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
