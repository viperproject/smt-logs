(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@22 () T@U)
(declare-fun $generated@@25 () T@T)
(declare-fun $generated@@26 (T@U) T@U)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@31 (T@U) Int)
(declare-fun $generated@@32 () T@U)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@37 () T@T)
(declare-fun $generated@@38 (T@T T@T) T@T)
(declare-fun $generated@@39 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@40 (T@T) T@T)
(declare-fun $generated@@41 (T@T) T@T)
(declare-fun $generated@@62 (T@U T@U) Bool)
(declare-fun $generated@@66 (Int) Int)
(declare-fun $generated@@68 (T@T T@U) T@U)
(declare-fun $generated@@71 (T@T T@U) T@U)
(declare-fun $generated@@74 (T@U T@U) T@U)
(declare-fun $generated@@77 (T@T T@U T@U) Bool)
(declare-fun $generated@@85 (T@U) T@U)
(declare-fun $generated@@86 (T@U) T@U)
(declare-fun $generated@@89 (T@U) T@U)
(declare-fun $generated@@96 (T@U) T@U)
(declare-fun $generated@@98 (T@U) T@U)
(declare-fun $generated@@102 (Int) T@U)
(declare-fun $generated@@103 (T@U) Int)
(declare-fun $generated@@105 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@106 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@107 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@139 (T@U) T@U)
(declare-fun $generated@@140 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (forall (($generated@@23 T@U) ($generated@@24 T@U) ) (! ($generated@@21 $generated@@7 $generated@@23 $generated@@22 $generated@@24)
 :pattern ( ($generated@@21 $generated@@7 $generated@@23 $generated@@22 $generated@@24))
)))
(assert (= ($generated@@5 $generated@@25) 3))
(assert (forall (($generated@@28 T@U) ($generated@@29 T@U) ($generated@@30 T@U) ) (! (= ($generated@@21 $generated@@25 $generated@@29 ($generated@@26 $generated@@28) $generated@@30) ($generated@@21 $generated@@25 $generated@@29 ($generated@@27 $generated@@28) $generated@@30))
 :pattern ( ($generated@@21 $generated@@25 $generated@@29 ($generated@@26 $generated@@28) $generated@@30))
 :pattern ( ($generated@@21 $generated@@25 $generated@@29 ($generated@@27 $generated@@28) $generated@@30))
)))
(assert (= ($generated@@31 $generated@@32) 0))
(assert  (and (and (and (and (and (and (forall (($generated@@42 T@T) ($generated@@43 T@T) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ) (! (= ($generated@@35 $generated@@42 $generated@@43 ($generated@@39 $generated@@42 $generated@@43 $generated@@45 $generated@@46 $generated@@44) $generated@@46) $generated@@44)
 :weight 0
)) (forall (($generated@@47 T@T) ($generated@@48 T@T) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ) (!  (or (= $generated@@51 $generated@@52) (= ($generated@@35 $generated@@47 $generated@@48 ($generated@@39 $generated@@47 $generated@@48 $generated@@50 $generated@@51 $generated@@49) $generated@@52) ($generated@@35 $generated@@47 $generated@@48 $generated@@50 $generated@@52)))
 :weight 0
))) (= ($generated@@5 $generated@@36) 4)) (= ($generated@@5 $generated@@37) 5)) (forall (($generated@@53 T@T) ($generated@@54 T@T) ) (= ($generated@@5 ($generated@@38 $generated@@53 $generated@@54)) 6))) (forall (($generated@@55 T@T) ($generated@@56 T@T) ) (! (= ($generated@@40 ($generated@@38 $generated@@55 $generated@@56)) $generated@@55)
 :pattern ( ($generated@@38 $generated@@55 $generated@@56))
))) (forall (($generated@@57 T@T) ($generated@@58 T@T) ) (! (= ($generated@@41 ($generated@@38 $generated@@57 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@38 $generated@@57 $generated@@58))
))))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ) (! (= ($generated@@21 $generated@@25 $generated@@60 ($generated@@27 $generated@@59) $generated@@61)  (or (= $generated@@60 $generated@@33) ($generated@@10 ($generated@@34 $generated@@6 ($generated@@35 $generated@@36 $generated@@37 ($generated@@35 $generated@@25 ($generated@@38 $generated@@36 $generated@@37) $generated@@61 $generated@@60) $generated)))))
 :pattern ( ($generated@@21 $generated@@25 $generated@@60 ($generated@@27 $generated@@59) $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@U) ) (!  (=> ($generated@@62 $generated@@63 $generated@@64) (forall (($generated@@65 T@U) ) (!  (=> ($generated@@10 ($generated@@34 $generated@@6 ($generated@@35 $generated@@36 $generated@@37 ($generated@@35 $generated@@25 ($generated@@38 $generated@@36 $generated@@37) $generated@@63 $generated@@65) $generated))) ($generated@@10 ($generated@@34 $generated@@6 ($generated@@35 $generated@@36 $generated@@37 ($generated@@35 $generated@@25 ($generated@@38 $generated@@36 $generated@@37) $generated@@64 $generated@@65) $generated))))
 :pattern ( ($generated@@35 $generated@@36 $generated@@37 ($generated@@35 $generated@@25 ($generated@@38 $generated@@36 $generated@@37) $generated@@64 $generated@@65) $generated))
)))
 :pattern ( ($generated@@62 $generated@@63 $generated@@64))
)))
(assert (forall (($generated@@67 Int) ) (! (= ($generated@@66 $generated@@67) $generated@@67)
 :pattern ( ($generated@@66 $generated@@67))
)))
(assert (forall (($generated@@69 T@U) ($generated@@70 T@T) ) (! (= ($generated@@68 $generated@@70 $generated@@69) $generated@@69)
 :pattern ( ($generated@@68 $generated@@70 $generated@@69))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@T) ) (! (= ($generated@@71 $generated@@73 ($generated@@34 $generated@@73 $generated@@72)) $generated@@72)
 :pattern ( ($generated@@34 $generated@@73 $generated@@72))
)))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ) (! (= ($generated@@31 ($generated@@74 $generated@@75 $generated@@76)) (+ 1 ($generated@@31 $generated@@75)))
 :pattern ( ($generated@@74 $generated@@75 $generated@@76))
)))
(assert (forall (($generated@@78 T@U) ($generated@@79 T@U) ) (! (= ($generated@@77 $generated@@25 $generated@@79 ($generated@@26 $generated@@78))  (and ($generated@@77 $generated@@25 $generated@@79 ($generated@@27 $generated@@78)) (or (not (= $generated@@79 $generated@@33)) (not true))))
 :pattern ( ($generated@@77 $generated@@25 $generated@@79 ($generated@@26 $generated@@78)))
 :pattern ( ($generated@@77 $generated@@25 $generated@@79 ($generated@@27 $generated@@78)))
)))
(assert (forall (($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ($generated@@84 T@T) ) (!  (=> ($generated@@62 $generated@@80 $generated@@81) (=> ($generated@@21 $generated@@84 $generated@@82 $generated@@83 $generated@@80) ($generated@@21 $generated@@84 $generated@@82 $generated@@83 $generated@@81)))
 :pattern ( ($generated@@62 $generated@@80 $generated@@81) ($generated@@21 $generated@@84 $generated@@82 $generated@@83 $generated@@80))
)))
(assert (forall (($generated@@87 T@U) ) (!  (and (= ($generated@@85 ($generated@@27 $generated@@87)) $generated@@0) (= ($generated@@86 ($generated@@27 $generated@@87)) $generated@@3))
 :pattern ( ($generated@@27 $generated@@87))
)))
(assert (forall (($generated@@88 T@U) ) (!  (and (= ($generated@@85 ($generated@@26 $generated@@88)) $generated@@1) (= ($generated@@86 ($generated@@26 $generated@@88)) $generated@@3))
 :pattern ( ($generated@@26 $generated@@88))
)))
(assert (forall (($generated@@90 T@U) ($generated@@91 T@U) ) (! (= ($generated@@77 $generated@@25 $generated@@91 ($generated@@27 $generated@@90))  (or (= $generated@@91 $generated@@33) (= ($generated@@89 $generated@@91) ($generated@@27 $generated@@90))))
 :pattern ( ($generated@@77 $generated@@25 $generated@@91 ($generated@@27 $generated@@90)))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@U) ($generated@@94 T@U) ) (!  (=> (or (not (= $generated@@92 $generated@@94)) (not true)) (=> (and ($generated@@62 $generated@@92 $generated@@93) ($generated@@62 $generated@@93 $generated@@94)) ($generated@@62 $generated@@92 $generated@@94)))
 :pattern ( ($generated@@62 $generated@@92 $generated@@93) ($generated@@62 $generated@@93 $generated@@94))
)))
(assert (forall (($generated@@95 T@U) ) (! (<= 0 ($generated@@31 $generated@@95))
 :pattern ( ($generated@@31 $generated@@95))
)))
(assert (forall (($generated@@97 T@U) ) (! (= ($generated@@96 ($generated@@27 $generated@@97)) $generated@@97)
 :pattern ( ($generated@@27 $generated@@97))
)))
(assert (forall (($generated@@99 T@U) ) (! (= ($generated@@98 ($generated@@26 $generated@@99)) $generated@@99)
 :pattern ( ($generated@@26 $generated@@99))
)))
(assert (forall (($generated@@100 T@U) ($generated@@101 T@T) ) (! (= ($generated@@34 $generated@@101 ($generated@@71 $generated@@101 $generated@@100)) $generated@@100)
 :pattern ( ($generated@@71 $generated@@101 $generated@@100))
)))
(assert (forall (($generated@@104 Int) ) (!  (=> (or (and (<= 0 $generated@@104) (< $generated@@104 55296)) (and (<= 57344 $generated@@104) (< $generated@@104 1114112))) (= ($generated@@103 ($generated@@102 $generated@@104)) $generated@@104))
 :pattern ( ($generated@@102 $generated@@104))
)))
(assert  (and (forall (($generated@@108 T@T) ($generated@@109 T@T) ($generated@@110 T@T) ($generated@@111 T@U) ($generated@@112 T@U) ($generated@@113 T@U) ($generated@@114 T@U) ) (! (= ($generated@@105 $generated@@108 $generated@@109 $generated@@110 ($generated@@107 $generated@@108 $generated@@109 $generated@@110 $generated@@112 $generated@@113 $generated@@114 $generated@@111) $generated@@113 $generated@@114) $generated@@111)
 :weight 0
)) (and (forall (($generated@@115 T@T) ($generated@@116 T@T) ($generated@@117 T@T) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 T@U) ($generated@@123 T@U) ) (!  (or (= $generated@@120 $generated@@122) (= ($generated@@105 $generated@@115 $generated@@116 $generated@@117 ($generated@@107 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@120 $generated@@121 $generated@@118) $generated@@122 $generated@@123) ($generated@@105 $generated@@115 $generated@@116 $generated@@117 $generated@@119 $generated@@122 $generated@@123)))
 :weight 0
)) (forall (($generated@@124 T@T) ($generated@@125 T@T) ($generated@@126 T@T) ($generated@@127 T@U) ($generated@@128 T@U) ($generated@@129 T@U) ($generated@@130 T@U) ($generated@@131 T@U) ($generated@@132 T@U) ) (!  (or (= $generated@@130 $generated@@132) (= ($generated@@105 $generated@@124 $generated@@125 $generated@@126 ($generated@@107 $generated@@124 $generated@@125 $generated@@126 $generated@@128 $generated@@129 $generated@@130 $generated@@127) $generated@@131 $generated@@132) ($generated@@105 $generated@@124 $generated@@125 $generated@@126 $generated@@128 $generated@@131 $generated@@132)))
 :weight 0
)))))
(assert (forall (($generated@@133 T@U) ($generated@@134 T@U) ($generated@@135 T@U) ($generated@@136 Bool) ($generated@@137 T@U) ($generated@@138 T@U) ) (! (= ($generated@@10 ($generated@@105 $generated@@25 $generated@@36 $generated@@6 ($generated@@106 $generated@@133 $generated@@134 $generated@@135 $generated@@136) $generated@@137 $generated@@138))  (=> (and (or (not (= $generated@@137 $generated@@133)) (not true)) ($generated@@10 ($generated@@34 $generated@@6 ($generated@@35 $generated@@36 $generated@@37 ($generated@@35 $generated@@25 ($generated@@38 $generated@@36 $generated@@37) $generated@@134 $generated@@137) $generated@@135)))) $generated@@136))
 :pattern ( ($generated@@105 $generated@@25 $generated@@36 $generated@@6 ($generated@@106 $generated@@133 $generated@@134 $generated@@135 $generated@@136) $generated@@137 $generated@@138))
)))
(assert (forall (($generated@@141 T@U) ($generated@@142 T@U) ) (!  (and (= ($generated@@139 ($generated@@74 $generated@@141 $generated@@142)) $generated@@141) (= ($generated@@140 ($generated@@74 $generated@@141 $generated@@142)) $generated@@142))
 :pattern ( ($generated@@74 $generated@@141 $generated@@142))
)))
(assert (forall (($generated@@143 T@U) ) (!  (and (= ($generated@@102 ($generated@@103 $generated@@143)) $generated@@143) (or (and (<= 0 ($generated@@103 $generated@@143)) (< ($generated@@103 $generated@@143) 55296)) (and (<= 57344 ($generated@@103 $generated@@143)) (< ($generated@@103 $generated@@143) 1114112))))
 :pattern ( ($generated@@103 $generated@@143))
)))
(assert (= ($generated@@85 $generated@@22) $generated@@2))
(assert (= ($generated@@86 $generated@@22) $generated@@4))
(assert (forall (($generated@@144 T@U) ) (! (= ($generated@@77 $generated@@7 $generated@@144 $generated@@22)  (and (<= ($generated@@66 0) ($generated@@12 $generated@@144)) (< ($generated@@12 $generated@@144) 256)))
 :pattern ( ($generated@@77 $generated@@7 $generated@@144 $generated@@22))
)))
(assert (forall (($generated@@145 Int) ) (! (= ($generated@@71 $generated@@7 ($generated@@11 ($generated@@66 $generated@@145))) ($generated@@68 $generated@@37 ($generated@@71 $generated@@7 ($generated@@11 $generated@@145))))
 :pattern ( ($generated@@71 $generated@@7 ($generated@@11 ($generated@@66 $generated@@145))))
)))
(assert (forall (($generated@@146 T@U) ($generated@@147 T@T) ) (! (= ($generated@@71 $generated@@147 ($generated@@68 $generated@@147 $generated@@146)) ($generated@@68 $generated@@37 ($generated@@71 $generated@@147 $generated@@146)))
 :pattern ( ($generated@@71 $generated@@147 ($generated@@68 $generated@@147 $generated@@146)))
)))
(assert (forall (($generated@@148 T@U) ) (!  (=> (= ($generated@@31 $generated@@148) 0) (= $generated@@148 $generated@@32))
 :pattern ( ($generated@@31 $generated@@148))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 2) true)
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
