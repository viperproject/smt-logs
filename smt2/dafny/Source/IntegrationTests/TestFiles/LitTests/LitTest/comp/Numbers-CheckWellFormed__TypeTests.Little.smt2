(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 (T@T) Int)
(declare-fun $generated@@6 () T@T)
(declare-fun $generated@@7 () T@T)
(declare-fun $generated@@8 () T@T)
(declare-fun $generated@@9 (Bool) T@U)
(declare-fun $generated@@10 (T@U) Bool)
(declare-fun $generated@@11 (Int) T@U)
(declare-fun $generated@@12 (T@U) Int)
(declare-fun $generated@@13 (Real) T@U)
(declare-fun $generated@@14 (T@U) Real)
(declare-fun $generated@@21 (T@U) T@U)
(declare-fun $generated@@22 (T@U) Int)
(declare-fun $generated@@23 () T@U)
(declare-fun $generated@@24 () Int)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 (T@U) Bool)
(declare-fun $generated@@27 (T@T T@U T@U) Bool)
(declare-fun $generated@@28 () T@T)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@31 (Int) Int)
(declare-fun $generated@@33 (T@T T@U) T@U)
(declare-fun $generated@@36 (T@T T@U) T@U)
(declare-fun $generated@@37 (T@T T@U) T@U)
(declare-fun $generated@@40 (T@U T@U T@U) Bool)
(declare-fun $generated@@41 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@48 (T@U T@U) Bool)
(declare-fun $generated@@50 () T@T)
(declare-fun $generated@@56 (T@U Int) T@U)
(declare-fun $generated@@61 (T@U) T@U)
(declare-fun $generated@@66 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@67 () T@T)
(declare-fun $generated@@68 () T@T)
(declare-fun $generated@@69 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@70 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@71 () T@T)
(declare-fun $generated@@72 (T@T T@T) T@T)
(declare-fun $generated@@73 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@74 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@75 (T@T) T@T)
(declare-fun $generated@@76 (T@T) T@T)
(declare-fun $generated@@127 (T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@5 $generated@@6) 0) (= ($generated@@5 $generated@@7) 1)) (= ($generated@@5 $generated@@8) 2)) (forall (($generated@@15 Bool) ) (! (= ($generated@@10 ($generated@@9 $generated@@15)) $generated@@15)
 :pattern ( ($generated@@9 $generated@@15))
))) (forall (($generated@@16 T@U) ) (! (= ($generated@@9 ($generated@@10 $generated@@16)) $generated@@16)
 :pattern ( ($generated@@10 $generated@@16))
))) (forall (($generated@@17 Int) ) (! (= ($generated@@12 ($generated@@11 $generated@@17)) $generated@@17)
 :pattern ( ($generated@@11 $generated@@17))
))) (forall (($generated@@18 T@U) ) (! (= ($generated@@11 ($generated@@12 $generated@@18)) $generated@@18)
 :pattern ( ($generated@@12 $generated@@18))
))) (forall (($generated@@19 Real) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4)
)
(assert (= ($generated@@21 $generated) $generated@@1))
(assert (= ($generated@@21 $generated@@0) $generated@@2))
(assert (= ($generated@@22 $generated@@23) 0))
(assert (= ($generated@@5 $generated@@28) 3))
(assert  (=> (<= 0 $generated@@24) (forall (($generated@@30 T@U) ) (!  (=> (or ($generated@@26 $generated@@30) (< 0 $generated@@24)) ($generated@@27 $generated@@28 ($generated@@25 $generated@@30) ($generated@@29 $generated@@30)))
 :pattern ( ($generated@@25 $generated@@30))
))))
(assert (forall (($generated@@32 Int) ) (! (= ($generated@@31 $generated@@32) $generated@@32)
 :pattern ( ($generated@@31 $generated@@32))
)))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@T) ) (! (= ($generated@@33 $generated@@35 $generated@@34) $generated@@34)
 :pattern ( ($generated@@33 $generated@@35 $generated@@34))
)))
(assert (forall (($generated@@38 T@U) ($generated@@39 T@T) ) (! (= ($generated@@37 $generated@@39 ($generated@@36 $generated@@39 $generated@@38)) $generated@@38)
 :pattern ( ($generated@@36 $generated@@39 $generated@@38))
)))
(assert (forall (($generated@@42 T@U) ($generated@@43 T@U) ($generated@@44 T@U) ($generated@@45 T@T) ) (! (= ($generated@@40 ($generated@@37 $generated@@45 $generated@@42) $generated@@43 $generated@@44) ($generated@@41 $generated@@45 $generated@@42 $generated@@43 $generated@@44))
 :pattern ( ($generated@@40 ($generated@@37 $generated@@45 $generated@@42) $generated@@43 $generated@@44))
)))
(assert  (=> (<= 0 $generated@@24) (forall (($generated@@46 T@U) ) (!  (=> (or ($generated@@26 $generated@@46) (< 0 $generated@@24)) (= ($generated@@25 $generated@@46) ($generated@@33 $generated@@28 $generated@@23)))
 :pattern ( ($generated@@25 $generated@@46))
))))
(assert  (=> (<= 0 $generated@@24) (forall (($generated@@47 T@U) ) (!  (=> (or ($generated@@26 $generated@@47) (< 0 $generated@@24)) (= ($generated@@25 $generated@@47) ($generated@@33 $generated@@28 $generated@@23)))
 :weight 3
 :pattern ( ($generated@@25 $generated@@47))
))))
(assert (forall (($generated@@49 T@U) ) (!  (=> ($generated@@48 $generated@@49 $generated) (and (= ($generated@@37 $generated@@6 ($generated@@36 $generated@@6 $generated@@49)) $generated@@49) ($generated@@27 $generated@@6 ($generated@@36 $generated@@6 $generated@@49) $generated)))
 :pattern ( ($generated@@48 $generated@@49 $generated))
)))
(assert (= ($generated@@5 $generated@@50) 4))
(assert (forall (($generated@@51 T@U) ) (!  (=> ($generated@@48 $generated@@51 $generated@@0) (and (= ($generated@@37 $generated@@50 ($generated@@36 $generated@@50 $generated@@51)) $generated@@51) ($generated@@27 $generated@@50 ($generated@@36 $generated@@50 $generated@@51) $generated@@0)))
 :pattern ( ($generated@@48 $generated@@51 $generated@@0))
)))
(assert (forall (($generated@@52 T@U) ($generated@@53 T@U) ($generated@@54 T@T) ) (! (= ($generated@@48 ($generated@@37 $generated@@54 $generated@@52) $generated@@53) ($generated@@27 $generated@@54 $generated@@52 $generated@@53))
 :pattern ( ($generated@@48 ($generated@@37 $generated@@54 $generated@@52) $generated@@53))
)))
(assert (forall (($generated@@55 T@U) ) (! (<= 0 ($generated@@22 $generated@@55))
 :pattern ( ($generated@@22 $generated@@55))
)))
(assert (forall (($generated@@57 T@U) ($generated@@58 T@U) ($generated@@59 T@U) ) (! (= ($generated@@41 $generated@@28 $generated@@57 ($generated@@29 $generated@@58) $generated@@59) (forall (($generated@@60 Int) ) (!  (=> (and (<= 0 $generated@@60) (< $generated@@60 ($generated@@22 $generated@@57))) ($generated@@40 ($generated@@56 $generated@@57 $generated@@60) $generated@@58 $generated@@59))
 :pattern ( ($generated@@56 $generated@@57 $generated@@60))
)))
 :pattern ( ($generated@@41 $generated@@28 $generated@@57 ($generated@@29 $generated@@58) $generated@@59))
)))
(assert (forall (($generated@@62 T@U) ) (! (= ($generated@@61 ($generated@@29 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@29 $generated@@62))
)))
(assert (forall (($generated@@63 T@U) ) (! (= ($generated@@21 ($generated@@29 $generated@@63)) $generated@@3)
 :pattern ( ($generated@@29 $generated@@63))
)))
(assert (forall (($generated@@64 T@U) ($generated@@65 T@T) ) (! (= ($generated@@36 $generated@@65 ($generated@@37 $generated@@65 $generated@@64)) $generated@@64)
 :pattern ( ($generated@@37 $generated@@65 $generated@@64))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@77 T@T) ($generated@@78 T@T) ($generated@@79 T@T) ($generated@@80 T@U) ($generated@@81 T@U) ($generated@@82 T@U) ($generated@@83 T@U) ) (! (= ($generated@@66 $generated@@77 $generated@@78 $generated@@79 ($generated@@73 $generated@@77 $generated@@78 $generated@@79 $generated@@81 $generated@@82 $generated@@83 $generated@@80) $generated@@82 $generated@@83) $generated@@80)
 :weight 0
)) (and (forall (($generated@@84 T@T) ($generated@@85 T@T) ($generated@@86 T@T) ($generated@@87 T@U) ($generated@@88 T@U) ($generated@@89 T@U) ($generated@@90 T@U) ($generated@@91 T@U) ($generated@@92 T@U) ) (!  (or (= $generated@@89 $generated@@91) (= ($generated@@66 $generated@@84 $generated@@85 $generated@@86 ($generated@@73 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@89 $generated@@90 $generated@@87) $generated@@91 $generated@@92) ($generated@@66 $generated@@84 $generated@@85 $generated@@86 $generated@@88 $generated@@91 $generated@@92)))
 :weight 0
)) (forall (($generated@@93 T@T) ($generated@@94 T@T) ($generated@@95 T@T) ($generated@@96 T@U) ($generated@@97 T@U) ($generated@@98 T@U) ($generated@@99 T@U) ($generated@@100 T@U) ($generated@@101 T@U) ) (!  (or (= $generated@@99 $generated@@101) (= ($generated@@66 $generated@@93 $generated@@94 $generated@@95 ($generated@@73 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@98 $generated@@99 $generated@@96) $generated@@100 $generated@@101) ($generated@@66 $generated@@93 $generated@@94 $generated@@95 $generated@@97 $generated@@100 $generated@@101)))
 :weight 0
)))) (= ($generated@@5 $generated@@67) 5)) (= ($generated@@5 $generated@@68) 6)) (forall (($generated@@102 T@T) ($generated@@103 T@T) ($generated@@104 T@U) ($generated@@105 T@U) ($generated@@106 T@U) ) (! (= ($generated@@70 $generated@@102 $generated@@103 ($generated@@74 $generated@@102 $generated@@103 $generated@@105 $generated@@106 $generated@@104) $generated@@106) $generated@@104)
 :weight 0
))) (forall (($generated@@107 T@T) ($generated@@108 T@T) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or (= $generated@@111 $generated@@112) (= ($generated@@70 $generated@@107 $generated@@108 ($generated@@74 $generated@@107 $generated@@108 $generated@@110 $generated@@111 $generated@@109) $generated@@112) ($generated@@70 $generated@@107 $generated@@108 $generated@@110 $generated@@112)))
 :weight 0
))) (= ($generated@@5 $generated@@71) 7)) (forall (($generated@@113 T@T) ($generated@@114 T@T) ) (= ($generated@@5 ($generated@@72 $generated@@113 $generated@@114)) 8))) (forall (($generated@@115 T@T) ($generated@@116 T@T) ) (! (= ($generated@@75 ($generated@@72 $generated@@115 $generated@@116)) $generated@@115)
 :pattern ( ($generated@@72 $generated@@115 $generated@@116))
))) (forall (($generated@@117 T@T) ($generated@@118 T@T) ) (! (= ($generated@@76 ($generated@@72 $generated@@117 $generated@@118)) $generated@@118)
 :pattern ( ($generated@@72 $generated@@117 $generated@@118))
))))
(assert (forall (($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ($generated@@122 Bool) ($generated@@123 T@U) ($generated@@124 T@U) ) (! (= ($generated@@10 ($generated@@66 $generated@@67 $generated@@68 $generated@@6 ($generated@@69 $generated@@119 $generated@@120 $generated@@121 $generated@@122) $generated@@123 $generated@@124))  (=> (and (or (not (= $generated@@123 $generated@@119)) (not true)) ($generated@@10 ($generated@@36 $generated@@6 ($generated@@70 $generated@@68 $generated@@71 ($generated@@70 $generated@@67 ($generated@@72 $generated@@68 $generated@@71) $generated@@120 $generated@@123) $generated@@121)))) $generated@@122))
 :pattern ( ($generated@@66 $generated@@67 $generated@@68 $generated@@6 ($generated@@69 $generated@@119 $generated@@120 $generated@@121 $generated@@122) $generated@@123 $generated@@124))
)))
(assert (forall (($generated@@125 T@U) ($generated@@126 T@U) ) (!  (=> ($generated@@48 $generated@@125 ($generated@@29 $generated@@126)) (and (= ($generated@@37 $generated@@28 ($generated@@36 $generated@@28 $generated@@125)) $generated@@125) ($generated@@27 $generated@@28 ($generated@@36 $generated@@28 $generated@@125) ($generated@@29 $generated@@126))))
 :pattern ( ($generated@@48 $generated@@125 ($generated@@29 $generated@@126)))
)))
(assert  (=> (<= 0 $generated@@24) (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (!  (=> (and (or ($generated@@26 $generated@@129) (< 0 $generated@@24)) ($generated@@127 $generated@@128)) ($generated@@41 $generated@@28 ($generated@@25 $generated@@129) ($generated@@29 $generated@@129) $generated@@128))
 :pattern ( ($generated@@41 $generated@@28 ($generated@@25 $generated@@129) ($generated@@29 $generated@@129) $generated@@128))
))))
(assert (forall (($generated@@130 Int) ) (! (= ($generated@@37 $generated@@7 ($generated@@11 ($generated@@31 $generated@@130))) ($generated@@33 $generated@@71 ($generated@@37 $generated@@7 ($generated@@11 $generated@@130))))
 :pattern ( ($generated@@37 $generated@@7 ($generated@@11 ($generated@@31 $generated@@130))))
)))
(assert (forall (($generated@@131 T@U) ($generated@@132 T@T) ) (! (= ($generated@@37 $generated@@132 ($generated@@33 $generated@@132 $generated@@131)) ($generated@@33 $generated@@71 ($generated@@37 $generated@@132 $generated@@131)))
 :pattern ( ($generated@@37 $generated@@132 ($generated@@33 $generated@@132 $generated@@131)))
)))
(assert (forall (($generated@@133 T@U) ) (!  (=> (= ($generated@@22 $generated@@133) 0) (= $generated@@133 $generated@@23))
 :pattern ( ($generated@@22 $generated@@133))
)))
(assert (forall (($generated@@134 T@U) ($generated@@135 T@U) ) (! ($generated@@41 $generated@@6 $generated@@135 $generated $generated@@134)
 :pattern ( ($generated@@41 $generated@@6 $generated@@135 $generated $generated@@134))
)))
(assert (forall (($generated@@136 T@U) ($generated@@137 T@U) ) (! ($generated@@41 $generated@@50 $generated@@137 $generated@@0 $generated@@136)
 :pattern ( ($generated@@41 $generated@@50 $generated@@137 $generated@@0 $generated@@136))
)))
(assert (forall (($generated@@138 T@U) ($generated@@139 T@U) ) (! (= ($generated@@27 $generated@@28 $generated@@138 ($generated@@29 $generated@@139)) (forall (($generated@@140 Int) ) (!  (=> (and (<= 0 $generated@@140) (< $generated@@140 ($generated@@22 $generated@@138))) ($generated@@48 ($generated@@56 $generated@@138 $generated@@140) $generated@@139))
 :pattern ( ($generated@@56 $generated@@138 $generated@@140))
)))
 :pattern ( ($generated@@27 $generated@@28 $generated@@138 ($generated@@29 $generated@@139)))
)))
(assert (forall (($generated@@141 T@U) ) (! ($generated@@27 $generated@@6 $generated@@141 $generated)
 :pattern ( ($generated@@27 $generated@@6 $generated@@141 $generated))
)))
(assert (forall (($generated@@142 T@U) ) (! ($generated@@27 $generated@@50 $generated@@142 $generated@@0)
 :pattern ( ($generated@@27 $generated@@50 $generated@@142 $generated@@0))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@143 () Int)
(declare-fun $generated@@144 () Int)
(declare-fun $generated@@145 () Int)
(declare-fun $generated@@146 () Int)
(declare-fun $generated@@147 () T@U)
(declare-fun $generated@@148 () T@U)
(declare-fun $generated@@149 () T@U)
(declare-fun $generated@@150 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 15) (let (($generated@@151  (=> (= $generated@@143 ($generated@@31 0)) (and (=> (= (ControlFlow 0 9) (- 0 13)) (and (and (<= ($generated@@31 0) $generated@@143) (< $generated@@143 10000)) (or (not (= $generated@@143 22)) (not true)))) (=> (and (and (<= ($generated@@31 0) $generated@@143) (< $generated@@143 10000)) (or (not (= $generated@@143 22)) (not true))) (and (=> (= (ControlFlow 0 9) (- 0 12)) (or (not (= $generated@@143 10)) (not true))) (=> (or (not (= $generated@@143 10)) (not true)) (and (=> (= (ControlFlow 0 9) (- 0 11)) (and (or (not (= $generated@@143 34)) (not true)) (= ($generated@@22 ($generated@@33 $generated@@28 ($generated@@25 $generated))) ($generated@@22 ($generated@@33 $generated@@28 ($generated@@25 $generated@@0)))))) (=> (and (or (not (= $generated@@143 34)) (not true)) (= ($generated@@22 ($generated@@33 $generated@@28 ($generated@@25 $generated))) ($generated@@22 ($generated@@33 $generated@@28 ($generated@@25 $generated@@0))))) (and (=> (= (ControlFlow 0 9) (- 0 10)) ($generated@@10 ($generated@@33 $generated@@6 ($generated@@9 (< 0 200))))) (=> (= (ControlFlow 0 9) (- 0 8)) ($generated@@10 ($generated@@33 $generated@@6 ($generated@@9  (or (not (= 0 16)) (not true))))))))))))))))
(let (($generated@@152  (=> (and (and (and (and (and (<= ($generated@@31 0) $generated@@144) (< $generated@@144 10000)) (or (not (= $generated@@144 22)) (not true))) (or (not (= $generated@@144 10)) (not true))) (and (or (not (= $generated@@144 34)) (not true)) (= ($generated@@22 ($generated@@33 $generated@@28 ($generated@@25 $generated))) ($generated@@22 ($generated@@33 $generated@@28 ($generated@@25 $generated@@0)))))) (= $generated@@145 ($generated@@31 200))) (and (=> (= (ControlFlow 0 2) (- 0 7)) (and (and (<= ($generated@@31 0) $generated@@145) (< $generated@@145 10000)) (or (not (= $generated@@145 22)) (not true)))) (=> (and (and (<= ($generated@@31 0) $generated@@145) (< $generated@@145 10000)) (or (not (= $generated@@145 22)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 6)) (or (not (= $generated@@145 10)) (not true))) (=> (or (not (= $generated@@145 10)) (not true)) (and (=> (= (ControlFlow 0 2) (- 0 5)) (and (or (not (= $generated@@145 34)) (not true)) (= ($generated@@22 ($generated@@33 $generated@@28 ($generated@@25 $generated))) ($generated@@22 ($generated@@33 $generated@@28 ($generated@@25 $generated@@0)))))) (=> (and (or (not (= $generated@@145 34)) (not true)) (= ($generated@@22 ($generated@@33 $generated@@28 ($generated@@25 $generated))) ($generated@@22 ($generated@@33 $generated@@28 ($generated@@25 $generated@@0))))) (=> (and (< $generated@@144 200) (= $generated@@146 ($generated@@31 16))) (and (=> (= (ControlFlow 0 2) (- 0 4)) (and (and (<= ($generated@@31 0) $generated@@146) (< $generated@@146 10000)) (or (not (= $generated@@146 22)) (not true)))) (=> (and (and (<= ($generated@@31 0) $generated@@146) (< $generated@@146 10000)) (or (not (= $generated@@146 22)) (not true))) (and (=> (= (ControlFlow 0 2) (- 0 3)) (or (not (= $generated@@146 10)) (not true))) (=> (or (not (= $generated@@146 10)) (not true)) (=> (= (ControlFlow 0 2) (- 0 1)) (and (or (not (= $generated@@146 34)) (not true)) (= ($generated@@22 ($generated@@33 $generated@@28 ($generated@@25 $generated))) ($generated@@22 ($generated@@33 $generated@@28 ($generated@@25 $generated@@0))))))))))))))))))))
(let (($generated@@153  (=> (= $generated@@147 ($generated@@69 $generated@@148 $generated@@149 $generated@@4 false)) (and (=> (= (ControlFlow 0 14) 2) $generated@@152) (=> (= (ControlFlow 0 14) 9) $generated@@151)))))
(let (($generated@@154  (=> (and (and ($generated@@127 $generated@@149) ($generated@@150 $generated@@149)) (and (= 4 $generated@@24) (= (ControlFlow 0 15) 14))) $generated@@153)))
$generated@@154)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
