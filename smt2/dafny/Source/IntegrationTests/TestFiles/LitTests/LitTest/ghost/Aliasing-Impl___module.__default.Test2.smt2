(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 (T@T) Int)
(declare-fun $generated@@10 () T@T)
(declare-fun $generated@@11 () T@T)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 (Bool) T@U)
(declare-fun $generated@@14 (T@U) Bool)
(declare-fun $generated@@15 (Int) T@U)
(declare-fun $generated@@16 (T@U) Int)
(declare-fun $generated@@17 (Real) T@U)
(declare-fun $generated@@18 (T@U) Real)
(declare-fun $generated@@25 (T@U) T@U)
(declare-fun $generated@@26 (T@T T@U T@U T@U) Bool)
(declare-fun $generated@@27 () T@T)
(declare-fun $generated@@28 (T@U) T@U)
(declare-fun $generated@@29 (T@U) T@U)
(declare-fun $generated@@33 () T@U)
(declare-fun $generated@@34 (T@T T@U) T@U)
(declare-fun $generated@@35 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@36 () T@T)
(declare-fun $generated@@37 () T@T)
(declare-fun $generated@@38 (T@T T@T) T@T)
(declare-fun $generated@@39 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@40 (T@T) T@T)
(declare-fun $generated@@41 (T@T) T@T)
(declare-fun $generated@@62 (T@T T@U) T@U)
(declare-fun $generated@@65 (T@T T@U T@U) Bool)
(declare-fun $generated@@68 (T@U) T@U)
(declare-fun $generated@@71 (T@U) T@U)
(declare-fun $generated@@74 (T@U T@U) T@U)
(declare-fun $generated@@75 (T@U) T@U)
(declare-fun $generated@@78 (T@U) T@U)
(declare-fun $generated@@81 (T@U T@U) T@U)
(declare-fun $generated@@82 (T@U) T@U)
(declare-fun $generated@@85 (T@U) T@U)
(declare-fun $generated@@88 (T@U) T@U)
(declare-fun $generated@@90 (T@U) T@U)
(declare-fun $generated@@94 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@95 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@96 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@9 $generated@@10) 0) (= ($generated@@9 $generated@@11) 1)) (= ($generated@@9 $generated@@12) 2)) (forall (($generated@@19 Bool) ) (! (= ($generated@@14 ($generated@@13 $generated@@19)) $generated@@19)
 :pattern ( ($generated@@13 $generated@@19))
))) (forall (($generated@@20 T@U) ) (! (= ($generated@@13 ($generated@@14 $generated@@20)) $generated@@20)
 :pattern ( ($generated@@14 $generated@@20))
))) (forall (($generated@@21 Int) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 Real) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8)
)
(assert (= ($generated@@25 $generated) $generated@@0))
(assert (= ($generated@@9 $generated@@27) 3))
(assert (forall (($generated@@30 T@U) ($generated@@31 T@U) ($generated@@32 T@U) ) (! (= ($generated@@26 $generated@@27 $generated@@31 ($generated@@28 $generated@@30) $generated@@32) ($generated@@26 $generated@@27 $generated@@31 ($generated@@29 $generated@@30) $generated@@32))
 :pattern ( ($generated@@26 $generated@@27 $generated@@31 ($generated@@28 $generated@@30) $generated@@32))
 :pattern ( ($generated@@26 $generated@@27 $generated@@31 ($generated@@29 $generated@@30) $generated@@32))
)))
(assert  (and (and (and (and (and (and (forall (($generated@@42 T@T) ($generated@@43 T@T) ($generated@@44 T@U) ($generated@@45 T@U) ($generated@@46 T@U) ) (! (= ($generated@@35 $generated@@42 $generated@@43 ($generated@@39 $generated@@42 $generated@@43 $generated@@45 $generated@@46 $generated@@44) $generated@@46) $generated@@44)
 :weight 0
)) (forall (($generated@@47 T@T) ($generated@@48 T@T) ($generated@@49 T@U) ($generated@@50 T@U) ($generated@@51 T@U) ($generated@@52 T@U) ) (!  (or (= $generated@@51 $generated@@52) (= ($generated@@35 $generated@@47 $generated@@48 ($generated@@39 $generated@@47 $generated@@48 $generated@@50 $generated@@51 $generated@@49) $generated@@52) ($generated@@35 $generated@@47 $generated@@48 $generated@@50 $generated@@52)))
 :weight 0
))) (= ($generated@@9 $generated@@36) 4)) (= ($generated@@9 $generated@@37) 5)) (forall (($generated@@53 T@T) ($generated@@54 T@T) ) (= ($generated@@9 ($generated@@38 $generated@@53 $generated@@54)) 6))) (forall (($generated@@55 T@T) ($generated@@56 T@T) ) (! (= ($generated@@40 ($generated@@38 $generated@@55 $generated@@56)) $generated@@55)
 :pattern ( ($generated@@38 $generated@@55 $generated@@56))
))) (forall (($generated@@57 T@T) ($generated@@58 T@T) ) (! (= ($generated@@41 ($generated@@38 $generated@@57 $generated@@58)) $generated@@58)
 :pattern ( ($generated@@38 $generated@@57 $generated@@58))
))))
(assert (forall (($generated@@59 T@U) ($generated@@60 T@U) ($generated@@61 T@U) ) (! (= ($generated@@26 $generated@@27 $generated@@60 ($generated@@29 $generated@@59) $generated@@61)  (or (= $generated@@60 $generated@@33) ($generated@@14 ($generated@@34 $generated@@10 ($generated@@35 $generated@@36 $generated@@37 ($generated@@35 $generated@@27 ($generated@@38 $generated@@36 $generated@@37) $generated@@61 $generated@@60) $generated@@1)))))
 :pattern ( ($generated@@26 $generated@@27 $generated@@60 ($generated@@29 $generated@@59) $generated@@61))
)))
(assert (forall (($generated@@63 T@U) ($generated@@64 T@T) ) (! (= ($generated@@62 $generated@@64 ($generated@@34 $generated@@64 $generated@@63)) $generated@@63)
 :pattern ( ($generated@@34 $generated@@64 $generated@@63))
)))
(assert (forall (($generated@@66 T@U) ($generated@@67 T@U) ) (! (= ($generated@@65 $generated@@27 $generated@@67 ($generated@@28 $generated@@66))  (and ($generated@@65 $generated@@27 $generated@@67 ($generated@@29 $generated@@66)) (or (not (= $generated@@67 $generated@@33)) (not true))))
 :pattern ( ($generated@@65 $generated@@27 $generated@@67 ($generated@@28 $generated@@66)))
 :pattern ( ($generated@@65 $generated@@27 $generated@@67 ($generated@@29 $generated@@66)))
)))
(assert (forall (($generated@@69 T@U) ) (!  (and (= ($generated@@25 ($generated@@29 $generated@@69)) $generated@@2) (= ($generated@@68 ($generated@@29 $generated@@69)) $generated@@6))
 :pattern ( ($generated@@29 $generated@@69))
)))
(assert (forall (($generated@@70 T@U) ) (!  (and (= ($generated@@25 ($generated@@28 $generated@@70)) $generated@@3) (= ($generated@@68 ($generated@@28 $generated@@70)) $generated@@6))
 :pattern ( ($generated@@28 $generated@@70))
)))
(assert (forall (($generated@@72 T@U) ($generated@@73 T@U) ) (! (= ($generated@@65 $generated@@27 $generated@@73 ($generated@@29 $generated@@72))  (or (= $generated@@73 $generated@@33) (= ($generated@@71 $generated@@73) ($generated@@29 $generated@@72))))
 :pattern ( ($generated@@65 $generated@@27 $generated@@73 ($generated@@29 $generated@@72)))
)))
(assert (forall (($generated@@76 T@U) ($generated@@77 T@U) ) (! (= ($generated@@75 ($generated@@74 $generated@@76 $generated@@77)) $generated@@76)
 :pattern ( ($generated@@74 $generated@@76 $generated@@77))
)))
(assert (forall (($generated@@79 T@U) ($generated@@80 T@U) ) (! (= ($generated@@78 ($generated@@74 $generated@@79 $generated@@80)) $generated@@80)
 :pattern ( ($generated@@74 $generated@@79 $generated@@80))
)))
(assert (forall (($generated@@83 T@U) ($generated@@84 T@U) ) (! (= ($generated@@82 ($generated@@81 $generated@@83 $generated@@84)) $generated@@83)
 :pattern ( ($generated@@81 $generated@@83 $generated@@84))
)))
(assert (forall (($generated@@86 T@U) ($generated@@87 T@U) ) (! (= ($generated@@85 ($generated@@81 $generated@@86 $generated@@87)) $generated@@87)
 :pattern ( ($generated@@81 $generated@@86 $generated@@87))
)))
(assert (forall (($generated@@89 T@U) ) (! (= ($generated@@88 ($generated@@29 $generated@@89)) $generated@@89)
 :pattern ( ($generated@@29 $generated@@89))
)))
(assert (forall (($generated@@91 T@U) ) (! (= ($generated@@90 ($generated@@28 $generated@@91)) $generated@@91)
 :pattern ( ($generated@@28 $generated@@91))
)))
(assert (forall (($generated@@92 T@U) ($generated@@93 T@T) ) (! (= ($generated@@34 $generated@@93 ($generated@@62 $generated@@93 $generated@@92)) $generated@@92)
 :pattern ( ($generated@@62 $generated@@93 $generated@@92))
)))
(assert  (and (forall (($generated@@97 T@T) ($generated@@98 T@T) ($generated@@99 T@T) ($generated@@100 T@U) ($generated@@101 T@U) ($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@94 $generated@@97 $generated@@98 $generated@@99 ($generated@@96 $generated@@97 $generated@@98 $generated@@99 $generated@@101 $generated@@102 $generated@@103 $generated@@100) $generated@@102 $generated@@103) $generated@@100)
 :weight 0
)) (and (forall (($generated@@104 T@T) ($generated@@105 T@T) ($generated@@106 T@T) ($generated@@107 T@U) ($generated@@108 T@U) ($generated@@109 T@U) ($generated@@110 T@U) ($generated@@111 T@U) ($generated@@112 T@U) ) (!  (or (= $generated@@109 $generated@@111) (= ($generated@@94 $generated@@104 $generated@@105 $generated@@106 ($generated@@96 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@109 $generated@@110 $generated@@107) $generated@@111 $generated@@112) ($generated@@94 $generated@@104 $generated@@105 $generated@@106 $generated@@108 $generated@@111 $generated@@112)))
 :weight 0
)) (forall (($generated@@113 T@T) ($generated@@114 T@T) ($generated@@115 T@T) ($generated@@116 T@U) ($generated@@117 T@U) ($generated@@118 T@U) ($generated@@119 T@U) ($generated@@120 T@U) ($generated@@121 T@U) ) (!  (or (= $generated@@119 $generated@@121) (= ($generated@@94 $generated@@113 $generated@@114 $generated@@115 ($generated@@96 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@118 $generated@@119 $generated@@116) $generated@@120 $generated@@121) ($generated@@94 $generated@@113 $generated@@114 $generated@@115 $generated@@117 $generated@@120 $generated@@121)))
 :weight 0
)))))
(assert (forall (($generated@@122 T@U) ($generated@@123 T@U) ($generated@@124 T@U) ($generated@@125 Bool) ($generated@@126 T@U) ($generated@@127 T@U) ) (! (= ($generated@@14 ($generated@@94 $generated@@27 $generated@@36 $generated@@10 ($generated@@95 $generated@@122 $generated@@123 $generated@@124 $generated@@125) $generated@@126 $generated@@127))  (=> (and (or (not (= $generated@@126 $generated@@122)) (not true)) ($generated@@14 ($generated@@34 $generated@@10 ($generated@@35 $generated@@36 $generated@@37 ($generated@@35 $generated@@27 ($generated@@38 $generated@@36 $generated@@37) $generated@@123 $generated@@126) $generated@@124)))) $generated@@125))
 :pattern ( ($generated@@94 $generated@@27 $generated@@36 $generated@@10 ($generated@@95 $generated@@122 $generated@@123 $generated@@124 $generated@@125) $generated@@126 $generated@@127))
)))
(assert (forall (($generated@@128 T@U) ($generated@@129 T@U) ) (!  (and (= ($generated@@25 ($generated@@74 $generated@@128 $generated@@129)) $generated@@4) (= ($generated@@68 ($generated@@74 $generated@@128 $generated@@129)) $generated@@7))
 :pattern ( ($generated@@74 $generated@@128 $generated@@129))
)))
(assert (forall (($generated@@130 T@U) ($generated@@131 T@U) ) (!  (and (= ($generated@@25 ($generated@@81 $generated@@130 $generated@@131)) $generated@@5) (= ($generated@@68 ($generated@@81 $generated@@130 $generated@@131)) $generated@@8))
 :pattern ( ($generated@@81 $generated@@130 $generated@@131))
)))
(assert (forall (($generated@@132 T@U) ($generated@@133 T@U) ) (! ($generated@@26 $generated@@11 $generated@@133 $generated $generated@@132)
 :pattern ( ($generated@@26 $generated@@11 $generated@@133 $generated $generated@@132))
)))
(assert (forall (($generated@@134 T@U) ) (! ($generated@@65 $generated@@11 $generated@@134 $generated)
 :pattern ( ($generated@@65 $generated@@11 $generated@@134 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@135 () T@U)
(declare-fun $generated@@136 () T@U)
(declare-fun $generated@@137 () T@U)
(declare-fun $generated@@138 () T@U)
(declare-fun $generated@@139 (T@U) Bool)
(declare-fun $generated@@140 (T@U) Bool)
(declare-fun $generated@@141 () Int)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 3) (let (($generated@@142  (=> (and (= $generated@@135 ($generated@@95 $generated@@33 $generated@@136 $generated@@1 false)) (= (ControlFlow 0 2) (- 0 1))) (or (not (= $generated@@137 $generated@@138)) (not true)))))
(let (($generated@@143  (=> (and (and (and ($generated@@139 $generated@@136) ($generated@@140 $generated@@136)) (and ($generated@@65 $generated@@27 $generated@@137 ($generated@@28 ($generated@@74 $generated $generated))) ($generated@@26 $generated@@27 $generated@@137 ($generated@@28 ($generated@@74 $generated $generated)) $generated@@136))) (and (and ($generated@@65 $generated@@27 $generated@@138 ($generated@@28 ($generated@@81 $generated $generated))) ($generated@@26 $generated@@27 $generated@@138 ($generated@@28 ($generated@@81 $generated $generated)) $generated@@136)) (and (= 0 $generated@@141) (= (ControlFlow 0 3) 2)))) $generated@@142)))
$generated@@143)))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
