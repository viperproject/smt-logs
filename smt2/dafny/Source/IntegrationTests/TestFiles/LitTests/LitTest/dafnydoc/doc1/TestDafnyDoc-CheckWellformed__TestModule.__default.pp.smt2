(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TagBool () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass.TestModule.A? () T@U)
(declare-fun Tagclass.TestModule.A () T@U)
(declare-fun Tagclass.TestModule.T1? () T@U)
(declare-fun Tagclass.TestModule.T1 () T@U)
(declare-fun Tagclass.TestModule.T2? () T@U)
(declare-fun Tagclass.TestModule.T2 () T@U)
(declare-fun Tagclass.TestModule.T3? () T@U)
(declare-fun Tagclass.TestModule.T3 () T@U)
(declare-fun tytagFamily$A () T@U)
(declare-fun tytagFamily$T1 () T@U)
(declare-fun tytagFamily$T2 () T@U)
(declare-fun tytagFamily$T3 () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun Tclass.TestModule.T1 (T@U) T@U)
(declare-fun Tclass.TestModule.T1? (T@U) T@U)
(declare-fun implements$TestModule.T2 (T@U) Bool)
(declare-fun Tclass.TestModule.A? () T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun null () T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass.TestModule.A () T@U)
(declare-fun Tclass.TestModule.T2 () T@U)
(declare-fun Tclass.TestModule.T2? () T@U)
(declare-fun Tclass.TestModule.T3 () T@U)
(declare-fun Tclass.TestModule.T3? () T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $FunctionContextHeight () Int)
(declare-fun TestModule.__default.pp (Bool T@U Int) Bool)
(declare-fun |TestModule.__default.pp#canCall| (T@U Int) Bool)
(declare-fun $OlderTag (T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun Tclass.TestModule.T1?_0 (T@U) T@U)
(declare-fun Tclass.TestModule.T1_0 (T@U) T@U)
(declare-fun implements$TestModule.T1 (T@U T@U) Bool)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun implements$TestModule.T3 (T@U) Bool)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TagBool alloc Tagclass.TestModule.A? Tagclass.TestModule.A Tagclass.TestModule.T1? Tagclass.TestModule.T1 Tagclass.TestModule.T2? Tagclass.TestModule.T2 Tagclass.TestModule.T3? Tagclass.TestModule.T3 tytagFamily$A tytagFamily$T1 tytagFamily$T2 tytagFamily$T3)
)
(assert (= (Tag TBool) TagBool))
(assert (= (Ctor refType) 3))
(assert (forall ((TestModule.T1$TR T@U) (|c#0| T@U) ($h T@U) ) (! (= ($IsAlloc refType |c#0| (Tclass.TestModule.T1 TestModule.T1$TR) $h) ($IsAlloc refType |c#0| (Tclass.TestModule.T1? TestModule.T1$TR) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass.TestModule.T1 TestModule.T1$TR) $h))
 :pattern ( ($IsAlloc refType |c#0| (Tclass.TestModule.T1? TestModule.T1$TR) $h))
)))
(assert (implements$TestModule.T2 Tclass.TestModule.A?))
(assert (forall (($o T@U) ) (! (= ($Is refType $o Tclass.TestModule.A?)  (or (= $o null) (= (dtype $o) Tclass.TestModule.A?)))
 :pattern ( ($Is refType $o Tclass.TestModule.A?))
)))
(assert (forall ((|c#0@@0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0@@0| Tclass.TestModule.A $h@@0) ($IsAlloc refType |c#0@@0| Tclass.TestModule.A? $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass.TestModule.A $h@@0))
 :pattern ( ($IsAlloc refType |c#0@@0| Tclass.TestModule.A? $h@@0))
)))
(assert (forall ((|c#0@@1| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc refType |c#0@@1| Tclass.TestModule.T2 $h@@1) ($IsAlloc refType |c#0@@1| Tclass.TestModule.T2? $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass.TestModule.T2 $h@@1))
 :pattern ( ($IsAlloc refType |c#0@@1| Tclass.TestModule.T2? $h@@1))
)))
(assert (forall ((|c#0@@2| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType |c#0@@2| Tclass.TestModule.T3 $h@@2) ($IsAlloc refType |c#0@@2| Tclass.TestModule.T3? $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@2| Tclass.TestModule.T3 $h@@2))
 :pattern ( ($IsAlloc refType |c#0@@2| Tclass.TestModule.T3? $h@@2))
)))
(assert  (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor FieldType) 4)) (= (Ctor BoxType) 5)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 6))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((TestModule.T1$TR@@0 T@U) ($o@@0 T@U) ($h@@3 T@U) ) (! (= ($IsAlloc refType $o@@0 (Tclass.TestModule.T1? TestModule.T1$TR@@0) $h@@3)  (or (= $o@@0 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@3 $o@@0) alloc)))))
 :pattern ( ($IsAlloc refType $o@@0 (Tclass.TestModule.T1? TestModule.T1$TR@@0) $h@@3))
)))
(assert (forall (($o@@1 T@U) ($h@@4 T@U) ) (! (= ($IsAlloc refType $o@@1 Tclass.TestModule.A? $h@@4)  (or (= $o@@1 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@4 $o@@1) alloc)))))
 :pattern ( ($IsAlloc refType $o@@1 Tclass.TestModule.A? $h@@4))
)))
(assert (forall (($o@@2 T@U) ($h@@5 T@U) ) (! (= ($IsAlloc refType $o@@2 Tclass.TestModule.T2? $h@@5)  (or (= $o@@2 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@5 $o@@2) alloc)))))
 :pattern ( ($IsAlloc refType $o@@2 Tclass.TestModule.T2? $h@@5))
)))
(assert (forall (($o@@3 T@U) ($h@@6 T@U) ) (! (= ($IsAlloc refType $o@@3 Tclass.TestModule.T3? $h@@6)  (or (= $o@@3 null) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) $h@@6 $o@@3) alloc)))))
 :pattern ( ($IsAlloc refType $o@@3 Tclass.TestModule.T3? $h@@6))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($reveal Bool) (|a#0| T@U) (|x#0| Int) ) (!  (=> (or (|TestModule.__default.pp#canCall| |a#0| |x#0|) (and (< 0 $FunctionContextHeight) ($Is refType |a#0| Tclass.TestModule.A?))) (forall (($olderHeap T@U) ) (!  (=> (and (and ($IsGoodHeap $olderHeap) ($OlderTag $olderHeap)) (TestModule.__default.pp $reveal |a#0| |x#0|)) ($IsAlloc refType |a#0| Tclass.TestModule.A? $olderHeap))
 :pattern ( ($OlderTag $olderHeap))
)))
 :pattern ( (TestModule.__default.pp $reveal |a#0| |x#0|))
))))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|a#0@@0| T@U) (|x#0@@0| Int) ) (!  (=> (or (|TestModule.__default.pp#canCall| |a#0@@0| |x#0@@0|) (and (< 0 $FunctionContextHeight) ($Is refType |a#0@@0| Tclass.TestModule.A?))) (= (TestModule.__default.pp true |a#0@@0| |x#0@@0|) (U_2_bool (Lit boolType (bool_2_U true)))))
 :pattern ( (TestModule.__default.pp true |a#0@@0| |x#0@@0|))
))))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((TestModule.T1$TR@@1 T@U) (|c#0@@3| T@U) ) (! (= ($Is refType |c#0@@3| (Tclass.TestModule.T1 TestModule.T1$TR@@1))  (and ($Is refType |c#0@@3| (Tclass.TestModule.T1? TestModule.T1$TR@@1)) (or (not (= |c#0@@3| null)) (not true))))
 :pattern ( ($Is refType |c#0@@3| (Tclass.TestModule.T1 TestModule.T1$TR@@1)))
 :pattern ( ($Is refType |c#0@@3| (Tclass.TestModule.T1? TestModule.T1$TR@@1)))
)))
(assert (forall ((TestModule.T1$TR@@2 T@U) ) (!  (and (= (Tag (Tclass.TestModule.T1? TestModule.T1$TR@@2)) Tagclass.TestModule.T1?) (= (TagFamily (Tclass.TestModule.T1? TestModule.T1$TR@@2)) tytagFamily$T1))
 :pattern ( (Tclass.TestModule.T1? TestModule.T1$TR@@2))
)))
(assert (forall ((TestModule.T1$TR@@3 T@U) ) (!  (and (= (Tag (Tclass.TestModule.T1 TestModule.T1$TR@@3)) Tagclass.TestModule.T1) (= (TagFamily (Tclass.TestModule.T1 TestModule.T1$TR@@3)) tytagFamily$T1))
 :pattern ( (Tclass.TestModule.T1 TestModule.T1$TR@@3))
)))
(assert (forall ((|c#0@@4| T@U) ) (! (= ($Is refType |c#0@@4| Tclass.TestModule.A)  (and ($Is refType |c#0@@4| Tclass.TestModule.A?) (or (not (= |c#0@@4| null)) (not true))))
 :pattern ( ($Is refType |c#0@@4| Tclass.TestModule.A))
 :pattern ( ($Is refType |c#0@@4| Tclass.TestModule.A?))
)))
(assert (forall ((|c#0@@5| T@U) ) (! (= ($Is refType |c#0@@5| Tclass.TestModule.T2)  (and ($Is refType |c#0@@5| Tclass.TestModule.T2?) (or (not (= |c#0@@5| null)) (not true))))
 :pattern ( ($Is refType |c#0@@5| Tclass.TestModule.T2))
 :pattern ( ($Is refType |c#0@@5| Tclass.TestModule.T2?))
)))
(assert (forall ((|c#0@@6| T@U) ) (! (= ($Is refType |c#0@@6| Tclass.TestModule.T3)  (and ($Is refType |c#0@@6| Tclass.TestModule.T3?) (or (not (= |c#0@@6| null)) (not true))))
 :pattern ( ($Is refType |c#0@@6| Tclass.TestModule.T3))
 :pattern ( ($Is refType |c#0@@6| Tclass.TestModule.T3?))
)))
(assert (forall ((TestModule.T1$TR@@4 T@U) ($o@@4 T@U) ($heap T@U) ) (!  (=> ($IsAlloc refType $o@@4 (Tclass.TestModule.T1? TestModule.T1$TR@@4) $heap) ($IsAlloc refType $o@@4 Tclass.TestModule.T3? $heap))
 :pattern ( ($IsAlloc refType $o@@4 (Tclass.TestModule.T1? TestModule.T1$TR@@4) $heap))
)))
(assert (forall (($o@@5 T@U) ($heap@@0 T@U) ) (!  (=> ($IsAlloc refType $o@@5 Tclass.TestModule.A? $heap@@0) ($IsAlloc refType $o@@5 Tclass.TestModule.T2? $heap@@0))
 :pattern ( ($IsAlloc refType $o@@5 Tclass.TestModule.A? $heap@@0))
)))
(assert (forall (($o@@6 T@U) ($heap@@1 T@U) ) (!  (=> ($IsAlloc refType $o@@6 Tclass.TestModule.T2? $heap@@1) ($IsAlloc refType $o@@6 Tclass.TestModule.T3? $heap@@1))
 :pattern ( ($IsAlloc refType $o@@6 Tclass.TestModule.T2? $heap@@1))
)))
(assert (forall (($o@@7 T@U) ($heap@@2 T@U) ) (!  (=> ($IsAlloc refType $o@@7 Tclass.TestModule.T2? $heap@@2) ($IsAlloc refType $o@@7 (Tclass.TestModule.T1? Tclass.TestModule.A) $heap@@2))
 :pattern ( ($IsAlloc refType $o@@7 Tclass.TestModule.T2? $heap@@2))
)))
(assert (forall ((TestModule.T1$TR@@5 T@U) ) (! (= (Tclass.TestModule.T1?_0 (Tclass.TestModule.T1? TestModule.T1$TR@@5)) TestModule.T1$TR@@5)
 :pattern ( (Tclass.TestModule.T1? TestModule.T1$TR@@5))
)))
(assert (forall ((TestModule.T1$TR@@6 T@U) ) (! (= (Tclass.TestModule.T1_0 (Tclass.TestModule.T1 TestModule.T1$TR@@6)) TestModule.T1$TR@@6)
 :pattern ( (Tclass.TestModule.T1 TestModule.T1$TR@@6))
)))
(assert (forall ((x@@5 T@U) (T@@1 T@T) ) (! (= ($Unbox T@@1 ($Box T@@1 x@@5)) x@@5)
 :pattern ( ($Box T@@1 x@@5))
)))
(assert (forall ((TestModule.T1$TR@@7 T@U) ($o@@8 T@U) ) (! (= ($Is refType $o@@8 (Tclass.TestModule.T1? TestModule.T1$TR@@7))  (or (= $o@@8 null) (implements$TestModule.T1 (dtype $o@@8) TestModule.T1$TR@@7)))
 :pattern ( ($Is refType $o@@8 (Tclass.TestModule.T1? TestModule.T1$TR@@7)))
)))
(assert  (and (forall ((t0@@0 T@T) (t1@@0 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 t2 (MapType1Store t0@@0 t1@@0 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@9 T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@9 $f))  (=> (and (or (not (= $o@@9 |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o@@9) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@9 $f))
)))
(assert (forall ((TestModule.T1$TR@@8 T@U) ($o@@10 T@U) ) (!  (=> ($Is refType $o@@10 (Tclass.TestModule.T1? TestModule.T1$TR@@8)) ($Is refType $o@@10 Tclass.TestModule.T3?))
 :pattern ( ($Is refType $o@@10 (Tclass.TestModule.T1? TestModule.T1$TR@@8)))
)))
(assert (forall (($o@@11 T@U) ) (!  (=> ($Is refType $o@@11 Tclass.TestModule.A?) ($Is refType $o@@11 Tclass.TestModule.T2?))
 :pattern ( ($Is refType $o@@11 Tclass.TestModule.A?))
)))
(assert (forall (($o@@12 T@U) ) (!  (=> ($Is refType $o@@12 Tclass.TestModule.T2?) ($Is refType $o@@12 Tclass.TestModule.T3?))
 :pattern ( ($Is refType $o@@12 Tclass.TestModule.T2?))
)))
(assert (= (Tag Tclass.TestModule.A?) Tagclass.TestModule.A?))
(assert (= (TagFamily Tclass.TestModule.A?) tytagFamily$A))
(assert (= (Tag Tclass.TestModule.A) Tagclass.TestModule.A))
(assert (= (TagFamily Tclass.TestModule.A) tytagFamily$A))
(assert (= (Tag Tclass.TestModule.T2?) Tagclass.TestModule.T2?))
(assert (= (TagFamily Tclass.TestModule.T2?) tytagFamily$T2))
(assert (= (Tag Tclass.TestModule.T2) Tagclass.TestModule.T2))
(assert (= (TagFamily Tclass.TestModule.T2) tytagFamily$T2))
(assert (= (Tag Tclass.TestModule.T3?) Tagclass.TestModule.T3?))
(assert (= (TagFamily Tclass.TestModule.T3?) tytagFamily$T3))
(assert (= (Tag Tclass.TestModule.T3) Tagclass.TestModule.T3))
(assert (= (TagFamily Tclass.TestModule.T3) tytagFamily$T3))
(assert (forall (($o@@13 T@U) ) (! (= ($Is refType $o@@13 Tclass.TestModule.T2?)  (or (= $o@@13 null) (implements$TestModule.T2 (dtype $o@@13))))
 :pattern ( ($Is refType $o@@13 Tclass.TestModule.T2?))
)))
(assert (forall (($o@@14 T@U) ) (! (= ($Is refType $o@@14 Tclass.TestModule.T3?)  (or (= $o@@14 null) (implements$TestModule.T3 (dtype $o@@14))))
 :pattern ( ($Is refType $o@@14 Tclass.TestModule.T3?))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((|a#0@@1| T@U) (|x#0@@1| Int) ) (!  (=> (or (|TestModule.__default.pp#canCall| (Lit refType |a#0@@1|) (LitInt |x#0@@1|)) (and (< 0 $FunctionContextHeight) ($Is refType |a#0@@1| Tclass.TestModule.A?))) (= (TestModule.__default.pp true (Lit refType |a#0@@1|) (LitInt |x#0@@1|)) (U_2_bool (Lit boolType (bool_2_U true)))))
 :weight 3
 :pattern ( (TestModule.__default.pp true (Lit refType |a#0@@1|) (LitInt |x#0@@1|)))
))))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@2 T@T) ) (! (= ($Box T@@2 (Lit T@@2 x@@7)) (Lit BoxType ($Box T@@2 x@@7)))
 :pattern ( ($Box T@@2 (Lit T@@2 x@@7)))
)))
(assert (forall (($o@@15 T@U) ) (!  (=> ($Is refType $o@@15 Tclass.TestModule.T2?) ($Is refType $o@@15 (Tclass.TestModule.T1? Tclass.TestModule.A)))
 :pattern ( ($Is refType $o@@15 Tclass.TestModule.T2?))
)))
(assert (forall ((h T@U) (v T@U) ) (! ($IsAlloc boolType v TBool h)
 :pattern ( ($IsAlloc boolType v TBool h))
)))
(assert (forall ((v@@0 T@U) ) (! ($Is boolType v@@0 TBool)
 :pattern ( ($Is boolType v@@0 TBool))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun reveal_TestModule._default.pp () Bool)
(declare-fun |a#0@@2| () T@U)
(declare-fun |x#0@@2| () Int)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun $Heap () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 3) (- 0 2)) (forall (($olderHeap@@0 T@U) ) (!  (=> (and (and ($IsGoodHeap $olderHeap@@0) ($OlderTag $olderHeap@@0)) (TestModule.__default.pp reveal_TestModule._default.pp |a#0@@2| |x#0@@2|)) ($IsAlloc refType |a#0@@2| Tclass.TestModule.A? $olderHeap@@0))
 :pattern ( ($OlderTag $olderHeap@@0))
)))))
(let ((anon5_Else_correct  (=> (= (TestModule.__default.pp reveal_TestModule._default.pp |a#0@@2| |x#0@@2|) (U_2_bool (Lit boolType (bool_2_U true)))) (=> (and ($Is boolType (bool_2_U (TestModule.__default.pp reveal_TestModule._default.pp |a#0@@2| |x#0@@2|)) TBool) (= (ControlFlow 0 4) 3)) GeneratedUnifiedExit_correct))))
(let ((anon5_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 5) 1) anon5_Then_correct) (=> (= (ControlFlow 0 5) 4) anon5_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) ($Is refType |a#0@@2| Tclass.TestModule.A?)) (and (= 0 $FunctionContextHeight) (= (ControlFlow 0 6) 5))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))
))
(check-sat)
(get-info :reason-unknown)
(get-info :rlimit)
(assert (not (= (ControlFlow 0 3) (- 2))))
(check-sat)
(get-info :rlimit)
(pop 1)
; Invalid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
