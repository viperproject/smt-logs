(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun alloc () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun Tagclass.DafnyAST.Expr () T@U)
(declare-fun Tagclass.DafnyAST.BinOp () T@U)
(declare-fun |##DafnyAST.BinOp.Add| () T@U)
(declare-fun |##DafnyAST.BinOp.Sub| () T@U)
(declare-fun |##DafnyAST.Expr.Const| () T@U)
(declare-fun |##DafnyAST.Expr.Var| () T@U)
(declare-fun |##DafnyAST.Expr.Op| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun tytagFamily$Expr () T@U)
(declare-fun tytagFamily$BinOp () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |#DafnyAST.Expr.Op| (T@U T@U T@U) T@U)
(declare-fun Tclass.DafnyAST.Expr () T@U)
(declare-fun Tclass.DafnyAST.BinOp () T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |#DafnyAST.Expr.Var| (T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun DafnyAST.Expr.op (T@U) T@U)
(declare-fun DafnyAST.Expr.e1 (T@U) T@U)
(declare-fun DafnyAST.Expr.e2 (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun DafnyAST.__default.interpExpr (T@U T@U T@U) Int)
(declare-fun $LS (T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun MapType () T@T)
(declare-fun |DafnyAST.__default.interpExpr#canCall| (T@U T@U) Bool)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun DafnyAST.Expr.Const_q (T@U) Bool)
(declare-fun DafnyAST.Expr.Var_q (T@U) Bool)
(declare-fun DafnyAST.BinOp.Add_q (T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun DafnyAST.Expr.n (T@U) Int)
(declare-fun SeqType () T@T)
(declare-fun DafnyAST.Expr.v (T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |Seq#Empty| () T@U)
(declare-fun |#DafnyAST.BinOp.Add| () T@U)
(declare-fun |#DafnyAST.BinOp.Sub| () T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun DafnyAST.BinOp.Sub_q (T@U) Bool)
(declare-fun DafnyAST.Expr.Op_q (T@U) Bool)
(declare-fun TSet (T@U) T@U)
(declare-fun |#DafnyAST.Expr.Const| (Int) T@U)
(declare-fun charType () T@T)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun |Map#Empty| () T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TChar TInt TagChar TagInt TagSet TagSeq TagMap alloc |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 Tagclass.DafnyAST.Expr Tagclass.DafnyAST.BinOp |##DafnyAST.BinOp.Add| |##DafnyAST.BinOp.Sub| |##DafnyAST.Expr.Const| |##DafnyAST.Expr.Var| |##DafnyAST.Expr.Op| |tytagFamily$_tuple#2| tytagFamily$Expr tytagFamily$BinOp)
)
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((|a#22#0#0| T@U) (|a#22#1#0| T@U) (|a#22#2#0| T@U) ) (! (= ($Is DatatypeTypeType (|#DafnyAST.Expr.Op| |a#22#0#0| |a#22#1#0| |a#22#2#0|) Tclass.DafnyAST.Expr)  (and (and ($Is DatatypeTypeType |a#22#0#0| Tclass.DafnyAST.BinOp) ($Is DatatypeTypeType |a#22#1#0| Tclass.DafnyAST.Expr)) ($Is DatatypeTypeType |a#22#2#0| Tclass.DafnyAST.Expr)))
 :pattern ( ($Is DatatypeTypeType (|#DafnyAST.Expr.Op| |a#22#0#0| |a#22#1#0| |a#22#2#0|) Tclass.DafnyAST.Expr))
)))
(assert (forall ((|a#18#0#0| T@U) (i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| |a#18#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#18#0#0| i))) (DtRank (|#DafnyAST.Expr.Var| |a#18#0#0|))))
 :pattern ( (|Seq#Index| |a#18#0#0| i) (|#DafnyAST.Expr.Var| |a#18#0#0|))
)))
(assert (forall ((|a#20#0#0| T@U) (|a#20#1#0| T@U) (|a#20#2#0| T@U) ) (! (= (DatatypeCtorId (|#DafnyAST.Expr.Op| |a#20#0#0| |a#20#1#0| |a#20#2#0|)) |##DafnyAST.Expr.Op|)
 :pattern ( (|#DafnyAST.Expr.Op| |a#20#0#0| |a#20#1#0| |a#20#2#0|))
)))
(assert (forall ((|a#24#0#0| T@U) (|a#24#1#0| T@U) (|a#24#2#0| T@U) ) (! (= (DafnyAST.Expr.op (|#DafnyAST.Expr.Op| |a#24#0#0| |a#24#1#0| |a#24#2#0|)) |a#24#0#0|)
 :pattern ( (|#DafnyAST.Expr.Op| |a#24#0#0| |a#24#1#0| |a#24#2#0|))
)))
(assert (forall ((|a#26#0#0| T@U) (|a#26#1#0| T@U) (|a#26#2#0| T@U) ) (! (= (DafnyAST.Expr.e1 (|#DafnyAST.Expr.Op| |a#26#0#0| |a#26#1#0| |a#26#2#0|)) |a#26#1#0|)
 :pattern ( (|#DafnyAST.Expr.Op| |a#26#0#0| |a#26#1#0| |a#26#2#0|))
)))
(assert (forall ((|a#28#0#0| T@U) (|a#28#1#0| T@U) (|a#28#2#0| T@U) ) (! (= (DafnyAST.Expr.e2 (|#DafnyAST.Expr.Op| |a#28#0#0| |a#28#1#0| |a#28#2#0|)) |a#28#2#0|)
 :pattern ( (|#DafnyAST.Expr.Op| |a#28#0#0| |a#28#1#0| |a#28#2#0|))
)))
(assert  (and (and (and (and (and (= (Ctor MapType) 4) (= (Ctor SeqType) 5)) (= (Ctor SetType) 6)) (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
))) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor BoxType) 7)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly T@U) (|e#0| T@U) (|ctx#0| T@U) ) (!  (=> (or (|DafnyAST.__default.interpExpr#canCall| (Lit DatatypeTypeType |e#0|) (Lit MapType |ctx#0|)) (and (< 2 $FunctionContextHeight) (and ($Is DatatypeTypeType |e#0| Tclass.DafnyAST.Expr) ($Is MapType |ctx#0| (TMap (TSeq TChar) TInt))))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (DafnyAST.Expr.Const_q (Lit DatatypeTypeType |e#0|)))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (DafnyAST.Expr.Var_q (Lit DatatypeTypeType |e#0|)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (DafnyAST.BinOp.Add_q (Lit DatatypeTypeType (DafnyAST.Expr.op (Lit DatatypeTypeType |e#0|))))))) (let ((|e2#6| (Lit DatatypeTypeType (DafnyAST.Expr.e2 (Lit DatatypeTypeType |e#0|)))))
(let ((|e1#6| (Lit DatatypeTypeType (DafnyAST.Expr.e1 (Lit DatatypeTypeType |e#0|)))))
 (and (|DafnyAST.__default.interpExpr#canCall| |e1#6| (Lit MapType |ctx#0|)) (|DafnyAST.__default.interpExpr#canCall| |e2#6| (Lit MapType |ctx#0|)))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (DafnyAST.BinOp.Add_q (Lit DatatypeTypeType (DafnyAST.Expr.op (Lit DatatypeTypeType |e#0|)))))))) (let ((|e2#7| (Lit DatatypeTypeType (DafnyAST.Expr.e2 (Lit DatatypeTypeType |e#0|)))))
(let ((|e1#7| (Lit DatatypeTypeType (DafnyAST.Expr.e1 (Lit DatatypeTypeType |e#0|)))))
 (and (|DafnyAST.__default.interpExpr#canCall| |e1#7| (Lit MapType |ctx#0|)) (|DafnyAST.__default.interpExpr#canCall| |e2#7| (Lit MapType |ctx#0|))))))))) (= (DafnyAST.__default.interpExpr ($LS $ly) (Lit DatatypeTypeType |e#0|) (Lit MapType |ctx#0|)) (ite (DafnyAST.Expr.Const_q (Lit DatatypeTypeType |e#0|)) (let ((|n#2| (LitInt (DafnyAST.Expr.n (Lit DatatypeTypeType |e#0|)))))
|n#2|) (ite (DafnyAST.Expr.Var_q (Lit DatatypeTypeType |e#0|)) (let ((|v#2| (Lit SeqType (DafnyAST.Expr.v (Lit DatatypeTypeType |e#0|)))))
(ite (|Set#IsMember| (Lit SetType (|Map#Domain| (Lit MapType |ctx#0|))) ($Box SeqType |v#2|)) (U_2_int ($Unbox intType (MapType0Select BoxType BoxType (|Map#Elements| (Lit MapType |ctx#0|)) ($Box SeqType |v#2|)))) 0)) (ite (DafnyAST.BinOp.Add_q (Lit DatatypeTypeType (DafnyAST.Expr.op (Lit DatatypeTypeType |e#0|)))) (let ((|e2#4| (Lit DatatypeTypeType (DafnyAST.Expr.e2 (Lit DatatypeTypeType |e#0|)))))
(let ((|e1#4| (Lit DatatypeTypeType (DafnyAST.Expr.e1 (Lit DatatypeTypeType |e#0|)))))
(LitInt (+ (DafnyAST.__default.interpExpr ($LS $ly) |e1#4| (Lit MapType |ctx#0|)) (DafnyAST.__default.interpExpr ($LS $ly) |e2#4| (Lit MapType |ctx#0|)))))) (let ((|e2#5| (Lit DatatypeTypeType (DafnyAST.Expr.e2 (Lit DatatypeTypeType |e#0|)))))
(let ((|e1#5| (Lit DatatypeTypeType (DafnyAST.Expr.e1 (Lit DatatypeTypeType |e#0|)))))
(LitInt (- (DafnyAST.__default.interpExpr ($LS $ly) |e1#5| (Lit MapType |ctx#0|)) (DafnyAST.__default.interpExpr ($LS $ly) |e2#5| (Lit MapType |ctx#0|))))))))))))
 :weight 3
 :pattern ( (DafnyAST.__default.interpExpr ($LS $ly) (Lit DatatypeTypeType |e#0|) (Lit MapType |ctx#0|)))
))))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d))
 :pattern ( (_System.Tuple2.___hMake2_q d) ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (DatatypeCtorId |#DafnyAST.BinOp.Add|) |##DafnyAST.BinOp.Add|))
(assert (= (DatatypeCtorId |#DafnyAST.BinOp.Sub|) |##DafnyAST.BinOp.Sub|))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert ($Is DatatypeTypeType |#DafnyAST.BinOp.Add| Tclass.DafnyAST.BinOp))
(assert ($Is DatatypeTypeType |#DafnyAST.BinOp.Sub| Tclass.DafnyAST.BinOp))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((a T@U) (b T@U) ) (! (= (|Set#Subset| a b) (forall ((o T@U) ) (!  (=> (|Set#IsMember| a o) (|Set#IsMember| b o))
 :pattern ( (|Set#IsMember| a o))
 :pattern ( (|Set#IsMember| b o))
)))
 :pattern ( (|Set#Subset| a b))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h)  (and ($IsAllocBox |a#2#0#0@@0| |_System._tuple#2$T0@@1| $h) ($IsAllocBox |a#2#1#0@@0| |_System._tuple#2$T1@@1| $h))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (DafnyAST.BinOp.Add_q d@@1) (= (DatatypeCtorId d@@1) |##DafnyAST.BinOp.Add|))
 :pattern ( (DafnyAST.BinOp.Add_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (DafnyAST.BinOp.Sub_q d@@2) (= (DatatypeCtorId d@@2) |##DafnyAST.BinOp.Sub|))
 :pattern ( (DafnyAST.BinOp.Sub_q d@@2))
)))
(assert (forall ((d@@3 T@U) ) (! (= (DafnyAST.Expr.Const_q d@@3) (= (DatatypeCtorId d@@3) |##DafnyAST.Expr.Const|))
 :pattern ( (DafnyAST.Expr.Const_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (! (= (DafnyAST.Expr.Var_q d@@4) (= (DatatypeCtorId d@@4) |##DafnyAST.Expr.Var|))
 :pattern ( (DafnyAST.Expr.Var_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (! (= (DafnyAST.Expr.Op_q d@@5) (= (DatatypeCtorId d@@5) |##DafnyAST.Expr.Op|))
 :pattern ( (DafnyAST.Expr.Op_q d@@5))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@6 T@U) ) (!  (=> (DafnyAST.Expr.Op_q d@@6) (exists ((|a#21#0#0| T@U) (|a#21#1#0| T@U) (|a#21#2#0| T@U) ) (= d@@6 (|#DafnyAST.Expr.Op| |a#21#0#0| |a#21#1#0| |a#21#2#0|))))
 :pattern ( (DafnyAST.Expr.Op_q d@@6))
)))
(assert (forall ((d@@7 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@7) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@7 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@7))
)))
(assert (forall ((d@@8 T@U) ) (!  (=> (DafnyAST.BinOp.Add_q d@@8) (= d@@8 |#DafnyAST.BinOp.Add|))
 :pattern ( (DafnyAST.BinOp.Add_q d@@8))
)))
(assert (forall ((d@@9 T@U) ) (!  (=> (DafnyAST.BinOp.Sub_q d@@9) (= d@@9 |#DafnyAST.BinOp.Sub|))
 :pattern ( (DafnyAST.BinOp.Sub_q d@@9))
)))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0@@0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert (forall ((d@@10 T@U) ) (!  (=> (DafnyAST.Expr.Const_q d@@10) (exists ((|a#9#0#0| Int) ) (= d@@10 (|#DafnyAST.Expr.Const| |a#9#0#0|))))
 :pattern ( (DafnyAST.Expr.Const_q d@@10))
)))
(assert (forall ((d@@11 T@U) ) (!  (=> (DafnyAST.Expr.Var_q d@@11) (exists ((|a#14#0#0| T@U) ) (= d@@11 (|#DafnyAST.Expr.Var| |a#14#0#0|))))
 :pattern ( (DafnyAST.Expr.Var_q d@@11))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 Tclass.DafnyAST.Expr) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@0)) bx@@0) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@0) Tclass.DafnyAST.Expr)))
 :pattern ( ($IsBox bx@@0 Tclass.DafnyAST.Expr))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 Tclass.DafnyAST.BinOp) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@1)) bx@@1) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@1) Tclass.DafnyAST.BinOp)))
 :pattern ( ($IsBox bx@@1 Tclass.DafnyAST.BinOp))
)))
(assert (forall (($ly@@0 T@U) (|e#0@@0| T@U) (|ctx#0@@0| T@U) ) (! (= (DafnyAST.__default.interpExpr ($LS $ly@@0) |e#0@@0| |ctx#0@@0|) (DafnyAST.__default.interpExpr $ly@@0 |e#0@@0| |ctx#0@@0|))
 :pattern ( (DafnyAST.__default.interpExpr ($LS $ly@@0) |e#0@@0| |ctx#0@@0|))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@1 T@U) (|e#0@@1| T@U) (|ctx#0@@1| T@U) ) (!  (=> (or (|DafnyAST.__default.interpExpr#canCall| |e#0@@1| |ctx#0@@1|) (and (< 2 $FunctionContextHeight) (and ($Is DatatypeTypeType |e#0@@1| Tclass.DafnyAST.Expr) ($Is MapType |ctx#0@@1| (TMap (TSeq TChar) TInt))))) (and (=> (not (DafnyAST.Expr.Const_q |e#0@@1|)) (=> (not (DafnyAST.Expr.Var_q |e#0@@1|)) (and (=> (DafnyAST.BinOp.Add_q (DafnyAST.Expr.op |e#0@@1|)) (let ((|e2#2| (DafnyAST.Expr.e2 |e#0@@1|)))
(let ((|e1#2| (DafnyAST.Expr.e1 |e#0@@1|)))
 (and (|DafnyAST.__default.interpExpr#canCall| |e1#2| |ctx#0@@1|) (|DafnyAST.__default.interpExpr#canCall| |e2#2| |ctx#0@@1|))))) (=> (not (DafnyAST.BinOp.Add_q (DafnyAST.Expr.op |e#0@@1|))) (let ((|e2#3| (DafnyAST.Expr.e2 |e#0@@1|)))
(let ((|e1#3| (DafnyAST.Expr.e1 |e#0@@1|)))
 (and (|DafnyAST.__default.interpExpr#canCall| |e1#3| |ctx#0@@1|) (|DafnyAST.__default.interpExpr#canCall| |e2#3| |ctx#0@@1|)))))))) (= (DafnyAST.__default.interpExpr ($LS $ly@@1) |e#0@@1| |ctx#0@@1|) (ite (DafnyAST.Expr.Const_q |e#0@@1|) (let ((|n#0| (DafnyAST.Expr.n |e#0@@1|)))
|n#0|) (ite (DafnyAST.Expr.Var_q |e#0@@1|) (let ((|v#0| (DafnyAST.Expr.v |e#0@@1|)))
(ite (|Set#IsMember| (|Map#Domain| |ctx#0@@1|) ($Box SeqType |v#0|)) (U_2_int ($Unbox intType (MapType0Select BoxType BoxType (|Map#Elements| |ctx#0@@1|) ($Box SeqType |v#0|)))) 0)) (ite (DafnyAST.BinOp.Add_q (DafnyAST.Expr.op |e#0@@1|)) (let ((|e2#0| (DafnyAST.Expr.e2 |e#0@@1|)))
(let ((|e1#0| (DafnyAST.Expr.e1 |e#0@@1|)))
(+ (DafnyAST.__default.interpExpr $ly@@1 |e1#0| |ctx#0@@1|) (DafnyAST.__default.interpExpr $ly@@1 |e2#0| |ctx#0@@1|)))) (let ((|e2#1| (DafnyAST.Expr.e2 |e#0@@1|)))
(let ((|e1#1| (DafnyAST.Expr.e1 |e#0@@1|)))
(- (DafnyAST.__default.interpExpr $ly@@1 |e1#1| |ctx#0@@1|) (DafnyAST.__default.interpExpr $ly@@1 |e2#1| |ctx#0@@1|))))))))))
 :pattern ( (DafnyAST.__default.interpExpr ($LS $ly@@1) |e#0@@1| |ctx#0@@1|))
))))
(assert (forall ((d@@12 T@U) ) (!  (=> ($Is DatatypeTypeType d@@12 Tclass.DafnyAST.BinOp) (or (DafnyAST.BinOp.Add_q d@@12) (DafnyAST.BinOp.Sub_q d@@12)))
 :pattern ( (DafnyAST.BinOp.Sub_q d@@12) ($Is DatatypeTypeType d@@12 Tclass.DafnyAST.BinOp))
 :pattern ( (DafnyAST.BinOp.Add_q d@@12) ($Is DatatypeTypeType d@@12 Tclass.DafnyAST.BinOp))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 TInt) (and (= ($Box intType ($Unbox intType bx@@2)) bx@@2) ($Is intType ($Unbox intType bx@@2) TInt)))
 :pattern ( ($IsBox bx@@2 TInt))
)))
(assert (= (Ctor charType) 8))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 TChar) (and (= ($Box charType ($Unbox charType bx@@3)) bx@@3) ($Is charType ($Unbox charType bx@@3) TChar)))
 :pattern ( ($IsBox bx@@3 TChar))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((s T@U) ) (! (<= 0 (|Seq#Length| s))
 :pattern ( (|Seq#Length| s))
)))
(assert (forall ((v@@2 T@U) (t0@@1 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0) (forall ((bx@@4 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@4) ($IsAllocBox bx@@4 t0@@1 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@4))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0))
)))
(assert (forall ((t@@1 T@U) (u T@U) ) (! (= (Inv0_TMap (TMap t@@1 u)) t@@1)
 :pattern ( (TMap t@@1 u))
)))
(assert (forall ((t@@2 T@U) (u@@0 T@U) ) (! (= (Inv1_TMap (TMap t@@2 u@@0)) u@@0)
 :pattern ( (TMap t@@2 u@@0))
)))
(assert (forall ((t@@3 T@U) (u@@1 T@U) ) (! (= (Tag (TMap t@@3 u@@1)) TagMap)
 :pattern ( (TMap t@@3 u@@1))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) |a#6#1#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall ((v@@3 T@U) (t0@@2 T@U) (h@@1 T@U) ) (! (= ($IsAlloc SeqType v@@3 (TSeq t0@@2) h@@1) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@3))) ($IsAllocBox (|Seq#Index| v@@3 i@@0) t0@@2 h@@1))
 :pattern ( (|Seq#Index| v@@3 i@@0))
)))
 :pattern ( ($IsAlloc SeqType v@@3 (TSeq t0@@2) h@@1))
)))
(assert (forall ((|a#23#0#0| T@U) (|a#23#1#0| T@U) (|a#23#2#0| T@U) ) (! (= (|#DafnyAST.Expr.Op| (Lit DatatypeTypeType |a#23#0#0|) (Lit DatatypeTypeType |a#23#1#0|) (Lit DatatypeTypeType |a#23#2#0|)) (Lit DatatypeTypeType (|#DafnyAST.Expr.Op| |a#23#0#0| |a#23#1#0| |a#23#2#0|)))
 :pattern ( (|#DafnyAST.Expr.Op| (Lit DatatypeTypeType |a#23#0#0|) (Lit DatatypeTypeType |a#23#1#0|) (Lit DatatypeTypeType |a#23#2#0|)))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Inv0_TSet (TSet t@@4)) t@@4)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((t@@5 T@U) ) (! (= (Tag (TSet t@@5)) TagSet)
 :pattern ( (TSet t@@5))
)))
(assert (forall ((t@@6 T@U) ) (! (= (Inv0_TSeq (TSeq t@@6)) t@@6)
 :pattern ( (TSeq t@@6))
)))
(assert (forall ((t@@7 T@U) ) (! (= (Tag (TSeq t@@7)) TagSeq)
 :pattern ( (TSeq t@@7))
)))
(assert (forall ((|a#8#0#0| Int) ) (! (= (DatatypeCtorId (|#DafnyAST.Expr.Const| |a#8#0#0|)) |##DafnyAST.Expr.Const|)
 :pattern ( (|#DafnyAST.Expr.Const| |a#8#0#0|))
)))
(assert (forall ((|a#12#0#0| Int) ) (! (= (DafnyAST.Expr.n (|#DafnyAST.Expr.Const| |a#12#0#0|)) |a#12#0#0|)
 :pattern ( (|#DafnyAST.Expr.Const| |a#12#0#0|))
)))
(assert (forall ((|a#13#0#0| T@U) ) (! (= (DatatypeCtorId (|#DafnyAST.Expr.Var| |a#13#0#0|)) |##DafnyAST.Expr.Var|)
 :pattern ( (|#DafnyAST.Expr.Var| |a#13#0#0|))
)))
(assert (forall ((|a#17#0#0| T@U) ) (! (= (DafnyAST.Expr.v (|#DafnyAST.Expr.Var| |a#17#0#0|)) |a#17#0#0|)
 :pattern ( (|#DafnyAST.Expr.Var| |a#17#0#0|))
)))
(assert (forall ((x@@5 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@5)) x@@5)
 :pattern ( ($Box T@@3 x@@5))
)))
(assert (forall ((v@@4 T@U) (t0@@3 T@U) (t1@@0 T@U) (h@@2 T@U) ) (! (= ($IsAlloc MapType v@@4 (TMap t0@@3 t1@@0) h@@2) (forall ((bx@@5 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@4) bx@@5) (and ($IsAllocBox (MapType0Select BoxType BoxType (|Map#Elements| v@@4) bx@@5) t1@@0 h@@2) ($IsAllocBox bx@@5 t0@@3 h@@2)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@4) bx@@5))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@4) bx@@5))
)))
 :pattern ( ($IsAlloc MapType v@@4 (TMap t0@@3 t1@@0) h@@2))
)))
(assert (forall ((|a#25#0#0| T@U) (|a#25#1#0| T@U) (|a#25#2#0| T@U) ) (! (< (DtRank |a#25#0#0|) (DtRank (|#DafnyAST.Expr.Op| |a#25#0#0| |a#25#1#0| |a#25#2#0|)))
 :pattern ( (|#DafnyAST.Expr.Op| |a#25#0#0| |a#25#1#0| |a#25#2#0|))
)))
(assert (forall ((|a#27#0#0| T@U) (|a#27#1#0| T@U) (|a#27#2#0| T@U) ) (! (< (DtRank |a#27#1#0|) (DtRank (|#DafnyAST.Expr.Op| |a#27#0#0| |a#27#1#0| |a#27#2#0|)))
 :pattern ( (|#DafnyAST.Expr.Op| |a#27#0#0| |a#27#1#0| |a#27#2#0|))
)))
(assert (forall ((|a#29#0#0| T@U) (|a#29#1#0| T@U) (|a#29#2#0| T@U) ) (! (< (DtRank |a#29#2#0|) (DtRank (|#DafnyAST.Expr.Op| |a#29#0#0| |a#29#1#0| |a#29#2#0|)))
 :pattern ( (|#DafnyAST.Expr.Op| |a#29#0#0| |a#29#1#0| |a#29#2#0|))
)))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (! (< (BoxRank |a#5#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((u@@2 T@U) ) (!  (not (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@2))
 :pattern ( (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@2))
)))
(assert (forall ((|a#10#0#0| Int) ) (! (= ($Is DatatypeTypeType (|#DafnyAST.Expr.Const| |a#10#0#0|) Tclass.DafnyAST.Expr) ($Is intType (int_2_U |a#10#0#0|) TInt))
 :pattern ( ($Is DatatypeTypeType (|#DafnyAST.Expr.Const| |a#10#0#0|) Tclass.DafnyAST.Expr))
)))
(assert (forall ((bx@@6 T@U) (s@@0 T@U) (t@@8 T@U) ) (!  (=> ($IsBox bx@@6 (TMap s@@0 t@@8)) (and (= ($Box MapType ($Unbox MapType bx@@6)) bx@@6) ($Is MapType ($Unbox MapType bx@@6) (TMap s@@0 t@@8))))
 :pattern ( ($IsBox bx@@6 (TMap s@@0 t@@8)))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@7)) bx@@7) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@7) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@7 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert (forall ((|a#19#0#0| T@U) ) (! (< (|Seq#Rank| |a#19#0#0|) (DtRank (|#DafnyAST.Expr.Var| |a#19#0#0|)))
 :pattern ( (|#DafnyAST.Expr.Var| |a#19#0#0|))
)))
(assert  (and (and (and (and (and (and (forall ((t0@@4 T@T) (t1@@1 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@4 t1@@1 t2 (MapType1Store t0@@4 t1@@1 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 9)) (= (Ctor FieldType) 10)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 11))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall ((d@@13 T@U) ($h@@0 T@U) ) (!  (=> (and ($IsGoodHeap $h@@0) (and (DafnyAST.Expr.Const_q d@@13) ($IsAlloc DatatypeTypeType d@@13 Tclass.DafnyAST.Expr $h@@0))) ($IsAlloc intType (int_2_U (DafnyAST.Expr.n d@@13)) TInt $h@@0))
 :pattern ( ($IsAlloc intType (int_2_U (DafnyAST.Expr.n d@@13)) TInt $h@@0))
)))
(assert (forall ((d@@14 T@U) ) (!  (=> ($Is DatatypeTypeType d@@14 Tclass.DafnyAST.Expr) (or (or (DafnyAST.Expr.Const_q d@@14) (DafnyAST.Expr.Var_q d@@14)) (DafnyAST.Expr.Op_q d@@14)))
 :pattern ( (DafnyAST.Expr.Op_q d@@14) ($Is DatatypeTypeType d@@14 Tclass.DafnyAST.Expr))
 :pattern ( (DafnyAST.Expr.Var_q d@@14) ($Is DatatypeTypeType d@@14 Tclass.DafnyAST.Expr))
 :pattern ( (DafnyAST.Expr.Const_q d@@14) ($Is DatatypeTypeType d@@14 Tclass.DafnyAST.Expr))
)))
(assert (forall ((m@@4 T@U) ) (!  (or (= m@@4 |Map#Empty|) (exists ((k T@U) ) (|Set#IsMember| (|Map#Domain| m@@4) k)))
 :pattern ( (|Map#Domain| m@@4))
)))
(assert (forall ((m@@5 T@U) ) (!  (or (= m@@5 |Map#Empty|) (exists ((v@@5 T@U) ) (|Set#IsMember| (|Map#Values| m@@5) v@@5)))
 :pattern ( (|Map#Values| m@@5))
)))
(assert (forall ((m@@6 T@U) (item T@U) ) (! (= (|Set#IsMember| (|Map#Items| m@@6) item)  (and (|Set#IsMember| (|Map#Domain| m@@6) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (= (MapType0Select BoxType BoxType (|Map#Elements| m@@6) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))
 :pattern ( (|Set#IsMember| (|Map#Items| m@@6) item))
)))
(assert (forall ((m@@7 T@U) (v@@6 T@U) ) (! (= (|Set#IsMember| (|Map#Values| m@@7) v@@6) (exists ((u@@3 T@U) ) (!  (and (|Set#IsMember| (|Map#Domain| m@@7) u@@3) (= v@@6 (MapType0Select BoxType BoxType (|Map#Elements| m@@7) u@@3)))
 :pattern ( (|Set#IsMember| (|Map#Domain| m@@7) u@@3))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| m@@7) u@@3))
)))
 :pattern ( (|Set#IsMember| (|Map#Values| m@@7) v@@6))
)))
(assert (forall ((d@@15 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@15)) (DtRank d@@15))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@15)))
)))
(assert (forall ((bx@@8 T@U) (t@@9 T@U) ) (!  (=> ($IsBox bx@@8 (TSet t@@9)) (and (= ($Box SetType ($Unbox SetType bx@@8)) bx@@8) ($Is SetType ($Unbox SetType bx@@8) (TSet t@@9))))
 :pattern ( ($IsBox bx@@8 (TSet t@@9)))
)))
(assert (forall ((bx@@9 T@U) (t@@10 T@U) ) (!  (=> ($IsBox bx@@9 (TSeq t@@10)) (and (= ($Box SeqType ($Unbox SeqType bx@@9)) bx@@9) ($Is SeqType ($Unbox SeqType bx@@9) (TSeq t@@10))))
 :pattern ( ($IsBox bx@@9 (TSeq t@@10)))
)))
(assert (forall ((v@@7 T@U) (t0@@5 T@U) (t1@@2 T@U) ) (! (= ($Is MapType v@@7 (TMap t0@@5 t1@@2)) (forall ((bx@@10 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@7) bx@@10) (and ($IsBox (MapType0Select BoxType BoxType (|Map#Elements| v@@7) bx@@10) t1@@2) ($IsBox bx@@10 t0@@5)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@7) bx@@10))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@7) bx@@10))
)))
 :pattern ( ($Is MapType v@@7 (TMap t0@@5 t1@@2)))
)))
(assert (forall ((d@@16 T@U) ($h@@1 T@U) ) (!  (=> (and ($IsGoodHeap $h@@1) ($Is DatatypeTypeType d@@16 Tclass.DafnyAST.BinOp)) ($IsAlloc DatatypeTypeType d@@16 Tclass.DafnyAST.BinOp $h@@1))
 :pattern ( ($IsAlloc DatatypeTypeType d@@16 Tclass.DafnyAST.BinOp $h@@1))
)))
(assert (forall ((d@@17 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) ($Is DatatypeTypeType d@@17 Tclass.DafnyAST.Expr)) ($IsAlloc DatatypeTypeType d@@17 Tclass.DafnyAST.Expr $h@@2))
 :pattern ( ($IsAlloc DatatypeTypeType d@@17 Tclass.DafnyAST.Expr $h@@2))
)))
(assert (= (Tag Tclass.DafnyAST.Expr) Tagclass.DafnyAST.Expr))
(assert (= (TagFamily Tclass.DafnyAST.Expr) tytagFamily$Expr))
(assert (= (Tag Tclass.DafnyAST.BinOp) Tagclass.DafnyAST.BinOp))
(assert (= (TagFamily Tclass.DafnyAST.BinOp) tytagFamily$BinOp))
(assert (= |#DafnyAST.BinOp.Add| (Lit DatatypeTypeType |#DafnyAST.BinOp.Add|)))
(assert (= |#DafnyAST.BinOp.Sub| (Lit DatatypeTypeType |#DafnyAST.BinOp.Sub|)))
(assert (forall ((|a#15#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#DafnyAST.Expr.Var| |a#15#0#0|) Tclass.DafnyAST.Expr) ($Is SeqType |a#15#0#0| (TSeq TChar)))
 :pattern ( ($Is DatatypeTypeType (|#DafnyAST.Expr.Var| |a#15#0#0|) Tclass.DafnyAST.Expr))
)))
(assert (forall ((d@@18 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (DafnyAST.Expr.Var_q d@@18) ($IsAlloc DatatypeTypeType d@@18 Tclass.DafnyAST.Expr $h@@3))) ($IsAlloc SeqType (DafnyAST.Expr.v d@@18) (TSeq TChar) $h@@3))
 :pattern ( ($IsAlloc SeqType (DafnyAST.Expr.v d@@18) (TSeq TChar) $h@@3))
)))
(assert (forall ((d@@19 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) (and (_System.Tuple2.___hMake2_q d@@19) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@19 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@4)
 :pattern ( ($IsAlloc DatatypeTypeType d@@19 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@4))
)))) ($IsAllocBox (_System.Tuple2._0 d@@19) |_System._tuple#2$T0@@6| $h@@4))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@19) |_System._tuple#2$T0@@6| $h@@4))
)))
(assert (forall ((d@@20 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) (and (_System.Tuple2.___hMake2_q d@@20) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@20 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@5)
 :pattern ( ($IsAlloc DatatypeTypeType d@@20 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@5))
)))) ($IsAllocBox (_System.Tuple2._1 d@@20) |_System._tuple#2$T1@@7| $h@@5))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@20) |_System._tuple#2$T1@@7| $h@@5))
)))
(assert (forall ((d@@21 T@U) ($h@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (DafnyAST.Expr.Op_q d@@21) ($IsAlloc DatatypeTypeType d@@21 Tclass.DafnyAST.Expr $h@@6))) ($IsAlloc DatatypeTypeType (DafnyAST.Expr.op d@@21) Tclass.DafnyAST.BinOp $h@@6))
 :pattern ( ($IsAlloc DatatypeTypeType (DafnyAST.Expr.op d@@21) Tclass.DafnyAST.BinOp $h@@6))
)))
(assert (forall ((d@@22 T@U) ($h@@7 T@U) ) (!  (=> (and ($IsGoodHeap $h@@7) (and (DafnyAST.Expr.Op_q d@@22) ($IsAlloc DatatypeTypeType d@@22 Tclass.DafnyAST.Expr $h@@7))) ($IsAlloc DatatypeTypeType (DafnyAST.Expr.e1 d@@22) Tclass.DafnyAST.Expr $h@@7))
 :pattern ( ($IsAlloc DatatypeTypeType (DafnyAST.Expr.e1 d@@22) Tclass.DafnyAST.Expr $h@@7))
)))
(assert (forall ((d@@23 T@U) ($h@@8 T@U) ) (!  (=> (and ($IsGoodHeap $h@@8) (and (DafnyAST.Expr.Op_q d@@23) ($IsAlloc DatatypeTypeType d@@23 Tclass.DafnyAST.Expr $h@@8))) ($IsAlloc DatatypeTypeType (DafnyAST.Expr.e2 d@@23) Tclass.DafnyAST.Expr $h@@8))
 :pattern ( ($IsAlloc DatatypeTypeType (DafnyAST.Expr.e2 d@@23) Tclass.DafnyAST.Expr $h@@8))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((|a#11#0#0| Int) ) (! (= (|#DafnyAST.Expr.Const| (LitInt |a#11#0#0|)) (Lit DatatypeTypeType (|#DafnyAST.Expr.Const| |a#11#0#0|)))
 :pattern ( (|#DafnyAST.Expr.Const| (LitInt |a#11#0#0|)))
)))
(assert (forall ((|a#16#0#0| T@U) ) (! (= (|#DafnyAST.Expr.Var| (Lit SeqType |a#16#0#0|)) (Lit DatatypeTypeType (|#DafnyAST.Expr.Var| |a#16#0#0|)))
 :pattern ( (|#DafnyAST.Expr.Var| (Lit SeqType |a#16#0#0|)))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert (forall ((s@@1 T@U) ) (!  (=> (= (|Seq#Length| s@@1) 0) (= s@@1 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@1))
)))
(assert (forall ((h@@3 T@U) (v@@8 T@U) ) (! ($IsAlloc intType v@@8 TInt h@@3)
 :pattern ( ($IsAlloc intType v@@8 TInt h@@3))
)))
(assert (forall ((h@@4 T@U) (v@@9 T@U) ) (! ($IsAlloc charType v@@9 TChar h@@4)
 :pattern ( ($IsAlloc charType v@@9 TChar h@@4))
)))
(assert (forall ((v@@10 T@U) (t0@@6 T@U) ) (! (= ($Is SeqType v@@10 (TSeq t0@@6)) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@10))) ($IsBox (|Seq#Index| v@@10 i@@1) t0@@6))
 :pattern ( (|Seq#Index| v@@10 i@@1))
)))
 :pattern ( ($Is SeqType v@@10 (TSeq t0@@6)))
)))
(assert (forall ((m@@8 T@U) ) (!  (or (= m@@8 |Map#Empty|) (exists ((k@@0 T@U) (v@@11 T@U) ) (|Set#IsMember| (|Map#Items| m@@8) ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| k@@0 v@@11)))))
 :pattern ( (|Map#Items| m@@8))
)))
(assert (forall ((s@@2 T@U) (i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| s@@2))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@2 i@@2))) (|Seq#Rank| s@@2)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@2 i@@2))))
)))
(assert (forall ((v@@12 T@U) (t0@@7 T@U) (t1@@3 T@U) ) (!  (=> ($Is MapType v@@12 (TMap t0@@7 t1@@3)) (and (and ($Is SetType (|Map#Domain| v@@12) (TSet t0@@7)) ($Is SetType (|Map#Values| v@@12) (TSet t1@@3))) ($Is SetType (|Map#Items| v@@12) (TSet (Tclass._System.Tuple2 t0@@7 t1@@3)))))
 :pattern ( ($Is MapType v@@12 (TMap t0@@7 t1@@3)))
)))
(assert (forall ((v@@13 T@U) ) (! ($Is intType v@@13 TInt)
 :pattern ( ($Is intType v@@13 TInt))
)))
(assert (forall ((v@@14 T@U) ) (! ($Is charType v@@14 TChar)
 :pattern ( ($Is charType v@@14 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |ctx#0@@2| () T@U)
(declare-fun |v#Z#0@0| () T@U)
(declare-fun |e#0@@2| () T@U)
(declare-fun |_mcc#1#0| () T@U)
(declare-fun |let#4#0#0| () T@U)
(declare-fun |_mcc#2#0| () T@U)
(declare-fun |let#0#0#0| () T@U)
(declare-fun |_mcc#4#0| () T@U)
(declare-fun |e2#Z#0@0| () T@U)
(declare-fun |let#1#0#0| () T@U)
(declare-fun |_mcc#3#0| () T@U)
(declare-fun |e1#Z#0@0| () T@U)
(declare-fun $Heap () T@U)
(declare-fun |let#2#0#0| () T@U)
(declare-fun |e2#Z#1@0| () T@U)
(declare-fun |let#3#0#0| () T@U)
(declare-fun |e1#Z#1@0| () T@U)
(declare-fun |_mcc#0#0| () Int)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 20) (let ((anon17_Else_correct true))
(let ((anon17_Then_correct  (=> (and (|Set#IsMember| (|Map#Domain| |ctx#0@@2|) ($Box SeqType |v#Z#0@0|)) (= (ControlFlow 0 15) (- 0 14))) (|Set#IsMember| (|Map#Domain| |ctx#0@@2|) ($Box SeqType |v#Z#0@0|)))))
(let ((anon16_Then_correct  (=> (= |e#0@@2| (|#DafnyAST.Expr.Var| |_mcc#1#0|)) (=> (and (and ($Is SeqType |_mcc#1#0| (TSeq TChar)) (= |let#4#0#0| |_mcc#1#0|)) (and ($Is SeqType |let#4#0#0| (TSeq TChar)) (= |v#Z#0@0| |let#4#0#0|))) (and (=> (= (ControlFlow 0 17) 15) anon17_Then_correct) (=> (= (ControlFlow 0 17) 16) anon17_Else_correct))))))
(let ((anon20_Else_correct true))
(let ((anon20_Then_correct  (=> (= |_mcc#2#0| |#DafnyAST.BinOp.Sub|) (=> (and (and (and (= |let#0#0#0| |_mcc#4#0|) ($Is DatatypeTypeType |let#0#0#0| Tclass.DafnyAST.Expr)) (and (= |e2#Z#0@0| |let#0#0#0|) (= |let#1#0#0| |_mcc#3#0|))) (and (and ($Is DatatypeTypeType |let#1#0#0| Tclass.DafnyAST.Expr) (= |e1#Z#0@0| |let#1#0#0|)) (and ($IsAlloc DatatypeTypeType |e1#Z#0@0| Tclass.DafnyAST.Expr $Heap) ($IsAlloc MapType |ctx#0@@2| (TMap (TSeq TChar) TInt) $Heap)))) (and (=> (= (ControlFlow 0 8) (- 0 9)) (or (< (DtRank |e1#Z#0@0|) (DtRank |e#0@@2|)) (and (= (DtRank |e1#Z#0@0|) (DtRank |e#0@@2|)) (and (|Set#Subset| (|Map#Domain| |ctx#0@@2|) (|Map#Domain| |ctx#0@@2|)) (not (|Set#Subset| (|Map#Domain| |ctx#0@@2|) (|Map#Domain| |ctx#0@@2|))))))) (=> (or (< (DtRank |e1#Z#0@0|) (DtRank |e#0@@2|)) (and (= (DtRank |e1#Z#0@0|) (DtRank |e#0@@2|)) (and (|Set#Subset| (|Map#Domain| |ctx#0@@2|) (|Map#Domain| |ctx#0@@2|)) (not (|Set#Subset| (|Map#Domain| |ctx#0@@2|) (|Map#Domain| |ctx#0@@2|)))))) (=> (and (and (|DafnyAST.__default.interpExpr#canCall| |e1#Z#0@0| |ctx#0@@2|) ($IsAlloc DatatypeTypeType |e2#Z#0@0| Tclass.DafnyAST.Expr $Heap)) (and ($IsAlloc MapType |ctx#0@@2| (TMap (TSeq TChar) TInt) $Heap) (= (ControlFlow 0 8) (- 0 7)))) (or (< (DtRank |e2#Z#0@0|) (DtRank |e#0@@2|)) (and (= (DtRank |e2#Z#0@0|) (DtRank |e#0@@2|)) (and (|Set#Subset| (|Map#Domain| |ctx#0@@2|) (|Map#Domain| |ctx#0@@2|)) (not (|Set#Subset| (|Map#Domain| |ctx#0@@2|) (|Map#Domain| |ctx#0@@2|)))))))))))))
(let ((anon19_Else_correct  (=> (or (not (= |_mcc#2#0| |#DafnyAST.BinOp.Add|)) (not true)) (and (=> (= (ControlFlow 0 11) 8) anon20_Then_correct) (=> (= (ControlFlow 0 11) 10) anon20_Else_correct)))))
(let ((anon19_Then_correct  (=> (= |_mcc#2#0| |#DafnyAST.BinOp.Add|) (=> (and (and (and (= |let#2#0#0| |_mcc#4#0|) ($Is DatatypeTypeType |let#2#0#0| Tclass.DafnyAST.Expr)) (and (= |e2#Z#1@0| |let#2#0#0|) (= |let#3#0#0| |_mcc#3#0|))) (and (and ($Is DatatypeTypeType |let#3#0#0| Tclass.DafnyAST.Expr) (= |e1#Z#1@0| |let#3#0#0|)) (and ($IsAlloc DatatypeTypeType |e1#Z#1@0| Tclass.DafnyAST.Expr $Heap) ($IsAlloc MapType |ctx#0@@2| (TMap (TSeq TChar) TInt) $Heap)))) (and (=> (= (ControlFlow 0 5) (- 0 6)) (or (< (DtRank |e1#Z#1@0|) (DtRank |e#0@@2|)) (and (= (DtRank |e1#Z#1@0|) (DtRank |e#0@@2|)) (and (|Set#Subset| (|Map#Domain| |ctx#0@@2|) (|Map#Domain| |ctx#0@@2|)) (not (|Set#Subset| (|Map#Domain| |ctx#0@@2|) (|Map#Domain| |ctx#0@@2|))))))) (=> (or (< (DtRank |e1#Z#1@0|) (DtRank |e#0@@2|)) (and (= (DtRank |e1#Z#1@0|) (DtRank |e#0@@2|)) (and (|Set#Subset| (|Map#Domain| |ctx#0@@2|) (|Map#Domain| |ctx#0@@2|)) (not (|Set#Subset| (|Map#Domain| |ctx#0@@2|) (|Map#Domain| |ctx#0@@2|)))))) (=> (and (and (|DafnyAST.__default.interpExpr#canCall| |e1#Z#1@0| |ctx#0@@2|) ($IsAlloc DatatypeTypeType |e2#Z#1@0| Tclass.DafnyAST.Expr $Heap)) (and ($IsAlloc MapType |ctx#0@@2| (TMap (TSeq TChar) TInt) $Heap) (= (ControlFlow 0 5) (- 0 4)))) (or (< (DtRank |e2#Z#1@0|) (DtRank |e#0@@2|)) (and (= (DtRank |e2#Z#1@0|) (DtRank |e#0@@2|)) (and (|Set#Subset| (|Map#Domain| |ctx#0@@2|) (|Map#Domain| |ctx#0@@2|)) (not (|Set#Subset| (|Map#Domain| |ctx#0@@2|) (|Map#Domain| |ctx#0@@2|)))))))))))))
(let ((anon18_Then_correct  (=> (and (and (= |e#0@@2| (|#DafnyAST.Expr.Op| |_mcc#2#0| |_mcc#3#0| |_mcc#4#0|)) ($Is DatatypeTypeType |_mcc#2#0| Tclass.DafnyAST.BinOp)) (and ($Is DatatypeTypeType |_mcc#3#0| Tclass.DafnyAST.Expr) ($Is DatatypeTypeType |_mcc#4#0| Tclass.DafnyAST.Expr))) (and (=> (= (ControlFlow 0 12) 5) anon19_Then_correct) (=> (= (ControlFlow 0 12) 11) anon19_Else_correct)))))
(let ((anon18_Else_correct true))
(let ((anon16_Else_correct  (=> (or (not (= |e#0@@2| (|#DafnyAST.Expr.Var| |_mcc#1#0|))) (not true)) (and (=> (= (ControlFlow 0 13) 12) anon18_Then_correct) (=> (= (ControlFlow 0 13) 3) anon18_Else_correct)))))
(let ((anon15_Else_correct  (=> (or (not (= |e#0@@2| (|#DafnyAST.Expr.Const| |_mcc#0#0|))) (not true)) (and (=> (= (ControlFlow 0 18) 17) anon16_Then_correct) (=> (= (ControlFlow 0 18) 13) anon16_Else_correct)))))
(let ((anon15_Then_correct true))
(let ((anon14_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap alloc false)) (and (and (=> (= (ControlFlow 0 19) 1) anon14_Then_correct) (=> (= (ControlFlow 0 19) 2) anon15_Then_correct)) (=> (= (ControlFlow 0 19) 18) anon15_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) (=> (and (and ($Is DatatypeTypeType |e#0@@2| Tclass.DafnyAST.Expr) ($Is MapType |ctx#0@@2| (TMap (TSeq TChar) TInt))) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 20) 19))) anon0_correct))))
PreconditionGeneratedEntry_correct))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
