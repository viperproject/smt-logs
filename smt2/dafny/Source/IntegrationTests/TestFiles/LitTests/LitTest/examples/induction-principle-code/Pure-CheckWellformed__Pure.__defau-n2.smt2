(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun alloc () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun Tagclass.Utils.Result () T@U)
(declare-fun |##Utils.Result.Success| () T@U)
(declare-fun |##Utils.Result.Failure| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun tytagFamily$Result () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Seq#Empty| () T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#Utils.Result.Failure| () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass.Utils.Result (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Utils.Result.Success_q (T@U) Bool)
(declare-fun Utils.Result.Failure_q (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun |#Utils.Result.Success| (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun charType () T@T)
(declare-fun $FunctionContextHeight () Int)
(declare-fun Pure.__default.ResultSameCtx (T@U T@U T@U T@U) Bool)
(declare-fun |Pure.__default.ResultSameCtx#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun TSeq (T@U) T@U)
(declare-fun MapType () T@T)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Utils.Result.value (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun Tclass.Utils.Result_0 (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |Map#Empty| () T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#6| (T@U T@U T@U Bool) T@U)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TChar TInt TagBool TagChar TagInt TagSet TagSeq TagMap alloc |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 Tagclass.Utils.Result |##Utils.Result.Success| |##Utils.Result.Failure| |tytagFamily$_tuple#2| tytagFamily$Result)
)
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d))
 :pattern ( (_System.Tuple2.___hMake2_q d) ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (DatatypeCtorId |#Utils.Result.Failure|) |##Utils.Result.Failure|))
(assert (forall ((Utils.Result$T T@U) ($h T@U) ) (!  (=> ($IsGoodHeap $h) ($IsAlloc DatatypeTypeType |#Utils.Result.Failure| (Tclass.Utils.Result Utils.Result$T) $h))
 :pattern ( ($IsAlloc DatatypeTypeType |#Utils.Result.Failure| (Tclass.Utils.Result Utils.Result$T) $h))
)))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert (forall ((Utils.Result$T@@0 T@U) ) (! ($Is DatatypeTypeType |#Utils.Result.Failure| (Tclass.Utils.Result Utils.Result$T@@0))
 :pattern ( ($Is DatatypeTypeType |#Utils.Result.Failure| (Tclass.Utils.Result Utils.Result$T@@0)))
)))
(assert (forall ((x@@2 T@U) (T T@T) ) (! (= (Lit T x@@2) x@@2)
 :pattern ( (Lit T x@@2))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h@@0 T@U) ) (!  (=> ($IsGoodHeap $h@@0) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@0)  (and ($IsAllocBox |a#2#0#0@@0| |_System._tuple#2$T0@@1| $h@@0) ($IsAllocBox |a#2#1#0@@0| |_System._tuple#2$T1@@1| $h@@0))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@0))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (Utils.Result.Success_q d@@1) (= (DatatypeCtorId d@@1) |##Utils.Result.Success|))
 :pattern ( (Utils.Result.Success_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (Utils.Result.Failure_q d@@2) (= (DatatypeCtorId d@@2) |##Utils.Result.Failure|))
 :pattern ( (Utils.Result.Failure_q d@@2))
)))
(assert (forall ((x@@3 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@3)) x@@3)
 :pattern ( ($Unbox T@@0 x@@3))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@3) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@3 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (Utils.Result.Failure_q d@@4) (= d@@4 |#Utils.Result.Failure|))
 :pattern ( (Utils.Result.Failure_q d@@4))
)))
(assert (= (Ctor SetType) 4))
(assert (forall ((v T@U) (t0 T@U) ) (! (= ($Is SetType v (TSet t0)) (forall ((bx T@U) ) (!  (=> (|Set#IsMember| v bx) ($IsBox bx t0))
 :pattern ( (|Set#IsMember| v bx))
)))
 :pattern ( ($Is SetType v (TSet t0)))
)))
(assert (forall ((d@@5 T@U) ) (!  (=> (Utils.Result.Success_q d@@5) (exists ((|a#1#0#0@@0| T@U) ) (= d@@5 (|#Utils.Result.Success| |a#1#0#0@@0|))))
 :pattern ( (Utils.Result.Success_q d@@5))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert (forall ((Utils.Result$T@@1 T@U) ) (!  (and (= (Tag (Tclass.Utils.Result Utils.Result$T@@1)) Tagclass.Utils.Result) (= (TagFamily (Tclass.Utils.Result Utils.Result$T@@1)) tytagFamily$Result))
 :pattern ( (Tclass.Utils.Result Utils.Result$T@@1))
)))
(assert (forall ((Utils.Result$T@@2 T@U) (|a#2#0#0@@1| T@U) ($h@@1 T@U) ) (!  (=> ($IsGoodHeap $h@@1) (= ($IsAlloc DatatypeTypeType (|#Utils.Result.Success| |a#2#0#0@@1|) (Tclass.Utils.Result Utils.Result$T@@2) $h@@1) ($IsAllocBox |a#2#0#0@@1| Utils.Result$T@@2 $h@@1)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#Utils.Result.Success| |a#2#0#0@@1|) (Tclass.Utils.Result Utils.Result$T@@2) $h@@1))
)))
(assert (forall ((Utils.Result$T@@3 T@U) (d@@6 T@U) ) (!  (=> ($Is DatatypeTypeType d@@6 (Tclass.Utils.Result Utils.Result$T@@3)) (or (Utils.Result.Success_q d@@6) (Utils.Result.Failure_q d@@6)))
 :pattern ( (Utils.Result.Failure_q d@@6) ($Is DatatypeTypeType d@@6 (Tclass.Utils.Result Utils.Result$T@@3)))
 :pattern ( (Utils.Result.Success_q d@@6) ($Is DatatypeTypeType d@@6 (Tclass.Utils.Result Utils.Result$T@@3)))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Set#Equal| a b) (= a b))
 :pattern ( (|Set#Equal| a b))
)))
(assert (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 TInt) (and (= ($Box intType ($Unbox intType bx@@0)) bx@@0) ($Is intType ($Unbox intType bx@@0) TInt)))
 :pattern ( ($IsBox bx@@0 TInt))
)))
(assert (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 TBool) (and (= ($Box boolType ($Unbox boolType bx@@1)) bx@@1) ($Is boolType ($Unbox boolType bx@@1) TBool)))
 :pattern ( ($IsBox bx@@1 TBool))
)))
(assert (= (Ctor charType) 5))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 TChar) (and (= ($Box charType ($Unbox charType bx@@2)) bx@@2) ($Is charType ($Unbox charType bx@@2) TChar)))
 :pattern ( ($IsBox bx@@2 TChar))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((s T@U) ) (! (<= 0 (|Seq#Length| s))
 :pattern ( (|Seq#Length| s))
)))
(assert (forall ((v@@2 T@U) (t0@@0 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@0) h@@0) (forall ((bx@@3 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@3) ($IsAllocBox bx@@3 t0@@0 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@3))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@0) h@@0))
)))
(assert  (and (and (and (and (= (Ctor MapType) 6) (forall ((t0@@1 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0@@1 t1 (MapType0Store t0@@1 t1 m x0 val) x0) val)
 :weight 0
))) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor BoxType) 7)) (= (Ctor SeqType) 8)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((Pure._default.ResultSameCtx$V T@U) (|locals#0| T@U) (|ctx#0| T@U) (|res#0| T@U) ) (!  (=> (or (|Pure.__default.ResultSameCtx#canCall| Pure._default.ResultSameCtx$V |locals#0| |ctx#0| |res#0|) (and (< 0 $FunctionContextHeight) (and (and ($Is SetType |locals#0| (TSet (TSeq TChar))) ($Is MapType |ctx#0| (TMap (TSeq TChar) TInt))) ($Is DatatypeTypeType |res#0| (Tclass.Utils.Result (Tclass._System.Tuple2 Pure._default.ResultSameCtx$V (TMap (TSeq TChar) TInt))))))) (and (=> (Utils.Result.Success_q |res#0|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Utils.Result.value |res#0|)))) (= (Pure.__default.ResultSameCtx Pure._default.ResultSameCtx$V |locals#0| |ctx#0| |res#0|) (ite (Utils.Result.Success_q |res#0|) (let ((|ctx'#0| ($Unbox MapType (_System.Tuple2._1 ($Unbox DatatypeTypeType (Utils.Result.value |res#0|))))))
 (and (|Set#Equal| (|Map#Domain| |ctx'#0|) (|Map#Domain| |ctx#0|)) (forall ((|x#0| T@U) ) (!  (=> (and ($Is SeqType |x#0| (TSeq TChar)) (and (|Set#IsMember| (|Map#Domain| |ctx#0|) ($Box SeqType |x#0|)) (not (|Set#IsMember| |locals#0| ($Box SeqType |x#0|))))) (= (U_2_int ($Unbox intType (MapType0Select BoxType BoxType (|Map#Elements| |ctx'#0|) ($Box SeqType |x#0|)))) (U_2_int ($Unbox intType (MapType0Select BoxType BoxType (|Map#Elements| |ctx#0|) ($Box SeqType |x#0|))))))
 :pattern ( ($Unbox intType (MapType0Select BoxType BoxType (|Map#Elements| |ctx#0|) ($Box SeqType |x#0|))))
 :pattern ( ($Unbox intType (MapType0Select BoxType BoxType (|Map#Elements| |ctx'#0|) ($Box SeqType |x#0|))))
 :pattern ( (|Set#IsMember| |locals#0| ($Box SeqType |x#0|)))
 :pattern ( (|Set#IsMember| (|Map#Domain| |ctx#0|) ($Box SeqType |x#0|)))
)))) true))))
 :pattern ( (Pure.__default.ResultSameCtx Pure._default.ResultSameCtx$V |locals#0| |ctx#0| |res#0|))
))))
(assert (forall ((t@@1 T@U) (u T@U) ) (! (= (Inv0_TMap (TMap t@@1 u)) t@@1)
 :pattern ( (TMap t@@1 u))
)))
(assert (forall ((t@@2 T@U) (u@@0 T@U) ) (! (= (Inv1_TMap (TMap t@@2 u@@0)) u@@0)
 :pattern ( (TMap t@@2 u@@0))
)))
(assert (forall ((t@@3 T@U) (u@@1 T@U) ) (! (= (Tag (TMap t@@3 u@@1)) TagMap)
 :pattern ( (TMap t@@3 u@@1))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) |a#6#1#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall ((v@@3 T@U) (t0@@2 T@U) (h@@1 T@U) ) (! (= ($IsAlloc SeqType v@@3 (TSeq t0@@2) h@@1) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@3))) ($IsAllocBox (|Seq#Index| v@@3 i) t0@@2 h@@1))
 :pattern ( (|Seq#Index| v@@3 i))
)))
 :pattern ( ($IsAlloc SeqType v@@3 (TSeq t0@@2) h@@1))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Inv0_TSet (TSet t@@4)) t@@4)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((t@@5 T@U) ) (! (= (Tag (TSet t@@5)) TagSet)
 :pattern ( (TSet t@@5))
)))
(assert (forall ((t@@6 T@U) ) (! (= (Inv0_TSeq (TSeq t@@6)) t@@6)
 :pattern ( (TSeq t@@6))
)))
(assert (forall ((t@@7 T@U) ) (! (= (Tag (TSeq t@@7)) TagSeq)
 :pattern ( (TSeq t@@7))
)))
(assert (forall ((Utils.Result$T@@4 T@U) ) (! (= (Tclass.Utils.Result_0 (Tclass.Utils.Result Utils.Result$T@@4)) Utils.Result$T@@4)
 :pattern ( (Tclass.Utils.Result Utils.Result$T@@4))
)))
(assert (forall ((|a#0#0#0@@0| T@U) ) (! (= (DatatypeCtorId (|#Utils.Result.Success| |a#0#0#0@@0|)) |##Utils.Result.Success|)
 :pattern ( (|#Utils.Result.Success| |a#0#0#0@@0|))
)))
(assert (forall ((|a#4#0#0@@0| T@U) ) (! (= (Utils.Result.value (|#Utils.Result.Success| |a#4#0#0@@0|)) |a#4#0#0@@0|)
 :pattern ( (|#Utils.Result.Success| |a#4#0#0@@0|))
)))
(assert (forall ((x@@4 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@4)) x@@4)
 :pattern ( ($Box T@@3 x@@4))
)))
(assert (forall ((v@@4 T@U) (t0@@3 T@U) (t1@@0 T@U) (h@@2 T@U) ) (! (= ($IsAlloc MapType v@@4 (TMap t0@@3 t1@@0) h@@2) (forall ((bx@@4 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@4) bx@@4) (and ($IsAllocBox (MapType0Select BoxType BoxType (|Map#Elements| v@@4) bx@@4) t1@@0 h@@2) ($IsAllocBox bx@@4 t0@@3 h@@2)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@4) bx@@4))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@4) bx@@4))
)))
 :pattern ( ($IsAlloc MapType v@@4 (TMap t0@@3 t1@@0) h@@2))
)))
(assert (forall ((Utils.Result$T@@5 T@U) (|a#2#0#0@@2| T@U) ) (! (= ($Is DatatypeTypeType (|#Utils.Result.Success| |a#2#0#0@@2|) (Tclass.Utils.Result Utils.Result$T@@5)) ($IsBox |a#2#0#0@@2| Utils.Result$T@@5))
 :pattern ( ($Is DatatypeTypeType (|#Utils.Result.Success| |a#2#0#0@@2|) (Tclass.Utils.Result Utils.Result$T@@5)))
)))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (! (< (BoxRank |a#5#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((u@@2 T@U) ) (!  (not (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@2))
 :pattern ( (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@2))
)))
(assert (forall ((bx@@5 T@U) (s@@0 T@U) (t@@8 T@U) ) (!  (=> ($IsBox bx@@5 (TMap s@@0 t@@8)) (and (= ($Box MapType ($Unbox MapType bx@@5)) bx@@5) ($Is MapType ($Unbox MapType bx@@5) (TMap s@@0 t@@8))))
 :pattern ( ($IsBox bx@@5 (TMap s@@0 t@@8)))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@6)) bx@@6) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@6) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@6 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert (forall ((|a#5#0#0@@0| T@U) ) (! (< (BoxRank |a#5#0#0@@0|) (DtRank (|#Utils.Result.Success| |a#5#0#0@@0|)))
 :pattern ( (|#Utils.Result.Success| |a#5#0#0@@0|))
)))
(assert (forall ((d@@7 T@U) (Utils.Result$T@@6 T@U) ($h@@2 T@U) ) (!  (=> (and ($IsGoodHeap $h@@2) (and (Utils.Result.Success_q d@@7) ($IsAlloc DatatypeTypeType d@@7 (Tclass.Utils.Result Utils.Result$T@@6) $h@@2))) ($IsAllocBox (Utils.Result.value d@@7) Utils.Result$T@@6 $h@@2))
 :pattern ( ($IsAllocBox (Utils.Result.value d@@7) Utils.Result$T@@6 $h@@2))
)))
(assert  (and (and (and (and (and (and (forall ((t0@@4 T@T) (t1@@1 T@T) (t2 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@4 t1@@1 t2 (MapType1Store t0@@4 t1@@1 t2 m@@1 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@2 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@2 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@3 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@3 y0@@1 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 9)) (= (Ctor FieldType) 10)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 11))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#6| |l#0| |l#1| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#6| |l#0| |l#1| |l#2| |l#3|) $o $f))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall ((m@@4 T@U) ) (!  (or (= m@@4 |Map#Empty|) (exists ((k T@U) ) (|Set#IsMember| (|Map#Domain| m@@4) k)))
 :pattern ( (|Map#Domain| m@@4))
)))
(assert (forall ((m@@5 T@U) ) (!  (or (= m@@5 |Map#Empty|) (exists ((v@@5 T@U) ) (|Set#IsMember| (|Map#Values| m@@5) v@@5)))
 :pattern ( (|Map#Values| m@@5))
)))
(assert (forall ((m@@6 T@U) (item T@U) ) (! (= (|Set#IsMember| (|Map#Items| m@@6) item)  (and (|Set#IsMember| (|Map#Domain| m@@6) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (= (MapType0Select BoxType BoxType (|Map#Elements| m@@6) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))
 :pattern ( (|Set#IsMember| (|Map#Items| m@@6) item))
)))
(assert (forall ((m@@7 T@U) (v@@6 T@U) ) (! (= (|Set#IsMember| (|Map#Values| m@@7) v@@6) (exists ((u@@3 T@U) ) (!  (and (|Set#IsMember| (|Map#Domain| m@@7) u@@3) (= v@@6 (MapType0Select BoxType BoxType (|Map#Elements| m@@7) u@@3)))
 :pattern ( (|Set#IsMember| (|Map#Domain| m@@7) u@@3))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| m@@7) u@@3))
)))
 :pattern ( (|Set#IsMember| (|Map#Values| m@@7) v@@6))
)))
(assert (forall ((d@@8 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@8)) (DtRank d@@8))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@8)))
)))
(assert (forall ((bx@@7 T@U) (t@@9 T@U) ) (!  (=> ($IsBox bx@@7 (TSet t@@9)) (and (= ($Box SetType ($Unbox SetType bx@@7)) bx@@7) ($Is SetType ($Unbox SetType bx@@7) (TSet t@@9))))
 :pattern ( ($IsBox bx@@7 (TSet t@@9)))
)))
(assert (forall ((bx@@8 T@U) (t@@10 T@U) ) (!  (=> ($IsBox bx@@8 (TSeq t@@10)) (and (= ($Box SeqType ($Unbox SeqType bx@@8)) bx@@8) ($Is SeqType ($Unbox SeqType bx@@8) (TSeq t@@10))))
 :pattern ( ($IsBox bx@@8 (TSeq t@@10)))
)))
(assert (forall ((Utils.Result$T@@7 T@U) (bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 (Tclass.Utils.Result Utils.Result$T@@7)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@9)) bx@@9) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@9) (Tclass.Utils.Result Utils.Result$T@@7))))
 :pattern ( ($IsBox bx@@9 (Tclass.Utils.Result Utils.Result$T@@7)))
)))
(assert (forall ((v@@7 T@U) (t0@@5 T@U) (t1@@2 T@U) ) (! (= ($Is MapType v@@7 (TMap t0@@5 t1@@2)) (forall ((bx@@10 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@7) bx@@10) (and ($IsBox (MapType0Select BoxType BoxType (|Map#Elements| v@@7) bx@@10) t1@@2) ($IsBox bx@@10 t0@@5)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@7) bx@@10))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@7) bx@@10))
)))
 :pattern ( ($Is MapType v@@7 (TMap t0@@5 t1@@2)))
)))
(assert (= |#Utils.Result.Failure| (Lit DatatypeTypeType |#Utils.Result.Failure|)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (! (= (|Set#Equal| a@@0 b@@0) (forall ((o T@U) ) (! (= (|Set#IsMember| a@@0 o) (|Set#IsMember| b@@0 o))
 :pattern ( (|Set#IsMember| a@@0 o))
 :pattern ( (|Set#IsMember| b@@0 o))
)))
 :pattern ( (|Set#Equal| a@@0 b@@0))
)))
(assert (forall ((d@@9 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (_System.Tuple2.___hMake2_q d@@9) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@9 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@3)
 :pattern ( ($IsAlloc DatatypeTypeType d@@9 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@3))
)))) ($IsAllocBox (_System.Tuple2._0 d@@9) |_System._tuple#2$T0@@6| $h@@3))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@9) |_System._tuple#2$T0@@6| $h@@3))
)))
(assert (forall ((d@@10 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) (and (_System.Tuple2.___hMake2_q d@@10) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@10 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@4)
 :pattern ( ($IsAlloc DatatypeTypeType d@@10 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@4))
)))) ($IsAllocBox (_System.Tuple2._1 d@@10) |_System._tuple#2$T1@@7| $h@@4))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@10) |_System._tuple#2$T1@@7| $h@@4))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((|a#3#0#0@@0| T@U) ) (! (= (|#Utils.Result.Success| (Lit BoxType |a#3#0#0@@0|)) (Lit DatatypeTypeType (|#Utils.Result.Success| |a#3#0#0@@0|)))
 :pattern ( (|#Utils.Result.Success| (Lit BoxType |a#3#0#0@@0|)))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@5)) (Lit BoxType ($Box T@@4 x@@5)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@5)))
)))
(assert (forall ((s@@1 T@U) ) (!  (=> (= (|Seq#Length| s@@1) 0) (= s@@1 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@1))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((Pure._default.ResultSameCtx$V@@0 T@U) (|locals#0@@0| T@U) (|ctx#0@@0| T@U) (|res#0@@0| T@U) ) (!  (=> (or (|Pure.__default.ResultSameCtx#canCall| Pure._default.ResultSameCtx$V@@0 (Lit SetType |locals#0@@0|) (Lit MapType |ctx#0@@0|) (Lit DatatypeTypeType |res#0@@0|)) (and (< 0 $FunctionContextHeight) (and (and ($Is SetType |locals#0@@0| (TSet (TSeq TChar))) ($Is MapType |ctx#0@@0| (TMap (TSeq TChar) TInt))) ($Is DatatypeTypeType |res#0@@0| (Tclass.Utils.Result (Tclass._System.Tuple2 Pure._default.ResultSameCtx$V@@0 (TMap (TSeq TChar) TInt))))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (Utils.Result.Success_q (Lit DatatypeTypeType |res#0@@0|))))) (_System.Tuple2.___hMake2_q (Lit DatatypeTypeType ($Unbox DatatypeTypeType (Utils.Result.value (Lit DatatypeTypeType |res#0@@0|)))))) (= (Pure.__default.ResultSameCtx Pure._default.ResultSameCtx$V@@0 (Lit SetType |locals#0@@0|) (Lit MapType |ctx#0@@0|) (Lit DatatypeTypeType |res#0@@0|)) (ite (Utils.Result.Success_q (Lit DatatypeTypeType |res#0@@0|)) (let ((|ctx'#2| (Lit MapType ($Unbox MapType (_System.Tuple2._1 (Lit DatatypeTypeType ($Unbox DatatypeTypeType (Utils.Result.value (Lit DatatypeTypeType |res#0@@0|)))))))))
 (and (|Set#Equal| (|Map#Domain| |ctx'#2|) (|Map#Domain| (Lit MapType |ctx#0@@0|))) (forall ((|x#2| T@U) ) (!  (=> (and ($Is SeqType |x#2| (TSeq TChar)) (and (|Set#IsMember| (Lit SetType (|Map#Domain| (Lit MapType |ctx#0@@0|))) ($Box SeqType |x#2|)) (not (|Set#IsMember| (Lit SetType |locals#0@@0|) ($Box SeqType |x#2|))))) (= (U_2_int ($Unbox intType (MapType0Select BoxType BoxType (|Map#Elements| |ctx'#2|) ($Box SeqType |x#2|)))) (U_2_int ($Unbox intType (MapType0Select BoxType BoxType (|Map#Elements| (Lit MapType |ctx#0@@0|)) ($Box SeqType |x#2|))))))
 :pattern ( ($Unbox intType (MapType0Select BoxType BoxType (|Map#Elements| |ctx#0@@0|) ($Box SeqType |x#2|))))
 :pattern ( ($Unbox intType (MapType0Select BoxType BoxType (|Map#Elements| |ctx'#2|) ($Box SeqType |x#2|))))
 :pattern ( (|Set#IsMember| |locals#0@@0| ($Box SeqType |x#2|)))
 :pattern ( (|Set#IsMember| (|Map#Domain| |ctx#0@@0|) ($Box SeqType |x#2|)))
)))) true))))
 :weight 3
 :pattern ( (Pure.__default.ResultSameCtx Pure._default.ResultSameCtx$V@@0 (Lit SetType |locals#0@@0|) (Lit MapType |ctx#0@@0|) (Lit DatatypeTypeType |res#0@@0|)))
))))
(assert (forall ((h@@3 T@U) (v@@8 T@U) ) (! ($IsAlloc intType v@@8 TInt h@@3)
 :pattern ( ($IsAlloc intType v@@8 TInt h@@3))
)))
(assert (forall ((h@@4 T@U) (v@@9 T@U) ) (! ($IsAlloc boolType v@@9 TBool h@@4)
 :pattern ( ($IsAlloc boolType v@@9 TBool h@@4))
)))
(assert (forall ((h@@5 T@U) (v@@10 T@U) ) (! ($IsAlloc charType v@@10 TChar h@@5)
 :pattern ( ($IsAlloc charType v@@10 TChar h@@5))
)))
(assert (forall ((v@@11 T@U) (t0@@6 T@U) ) (! (= ($Is SeqType v@@11 (TSeq t0@@6)) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@11))) ($IsBox (|Seq#Index| v@@11 i@@0) t0@@6))
 :pattern ( (|Seq#Index| v@@11 i@@0))
)))
 :pattern ( ($Is SeqType v@@11 (TSeq t0@@6)))
)))
(assert (forall ((m@@8 T@U) ) (!  (or (= m@@8 |Map#Empty|) (exists ((k@@0 T@U) (v@@12 T@U) ) (|Set#IsMember| (|Map#Items| m@@8) ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| k@@0 v@@12)))))
 :pattern ( (|Map#Items| m@@8))
)))
(assert (forall ((s@@2 T@U) (i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| s@@2))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@2 i@@1))) (|Seq#Rank| s@@2)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@2 i@@1))))
)))
(assert (forall ((v@@13 T@U) (t0@@7 T@U) (t1@@3 T@U) ) (!  (=> ($Is MapType v@@13 (TMap t0@@7 t1@@3)) (and (and ($Is SetType (|Map#Domain| v@@13) (TSet t0@@7)) ($Is SetType (|Map#Values| v@@13) (TSet t1@@3))) ($Is SetType (|Map#Items| v@@13) (TSet (Tclass._System.Tuple2 t0@@7 t1@@3)))))
 :pattern ( ($Is MapType v@@13 (TMap t0@@7 t1@@3)))
)))
(assert (forall ((v@@14 T@U) ) (! ($Is intType v@@14 TInt)
 :pattern ( ($Is intType v@@14 TInt))
)))
(assert (forall ((v@@15 T@U) ) (! ($Is boolType v@@15 TBool)
 :pattern ( ($Is boolType v@@15 TBool))
)))
(assert (forall ((v@@16 T@U) ) (! ($Is charType v@@16 TChar)
 :pattern ( ($Is charType v@@16 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |ctx#0@@1| () T@U)
(declare-fun |x#4@0| () T@U)
(declare-fun |locals#0@@1| () T@U)
(declare-fun |ctx'#Z#0@0| () T@U)
(declare-fun $Heap () T@U)
(declare-fun |_mcc#0#0| () T@U)
(declare-fun |_mcc#1#0| () T@U)
(declare-fun |_mcc#2#0| () T@U)
(declare-fun Pure._default.ResultSameCtx$V@@1 () T@U)
(declare-fun |let#0#0#0| () T@U)
(declare-fun |res#0@@1| () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 20) (let ((anon12_correct true))
(let ((anon23_Else_correct  (=> (and (not (and (|Set#IsMember| (|Map#Domain| |ctx#0@@1|) ($Box SeqType |x#4@0|)) (not (|Set#IsMember| |locals#0@@1| ($Box SeqType |x#4@0|))))) (= (ControlFlow 0 12) 6)) anon12_correct)))
(let ((anon23_Then_correct  (=> (and (|Set#IsMember| (|Map#Domain| |ctx#0@@1|) ($Box SeqType |x#4@0|)) (not (|Set#IsMember| |locals#0@@1| ($Box SeqType |x#4@0|)))) (and (=> (= (ControlFlow 0 9) (- 0 11)) (|Set#IsMember| (|Map#Domain| |ctx'#Z#0@0|) ($Box SeqType |x#4@0|))) (=> (|Set#IsMember| (|Map#Domain| |ctx'#Z#0@0|) ($Box SeqType |x#4@0|)) (and (=> (= (ControlFlow 0 9) (- 0 10)) (|Set#IsMember| (|Map#Domain| |ctx#0@@1|) ($Box SeqType |x#4@0|))) (=> (|Set#IsMember| (|Map#Domain| |ctx#0@@1|) ($Box SeqType |x#4@0|)) (=> (= (ControlFlow 0 9) 6) anon12_correct))))))))
(let ((anon22_Else_correct  (=> (not (|Set#IsMember| (|Map#Domain| |ctx#0@@1|) ($Box SeqType |x#4@0|))) (and (=> (= (ControlFlow 0 14) 9) anon23_Then_correct) (=> (= (ControlFlow 0 14) 12) anon23_Else_correct)))))
(let ((anon22_Then_correct  (=> (|Set#IsMember| (|Map#Domain| |ctx#0@@1|) ($Box SeqType |x#4@0|)) (and (=> (= (ControlFlow 0 13) 9) anon23_Then_correct) (=> (= (ControlFlow 0 13) 12) anon23_Else_correct)))))
(let ((anon21_Then_correct  (=> (and ($Is SeqType |x#4@0| (TSeq TChar)) ($IsAlloc SeqType |x#4@0| (TSeq TChar) $Heap)) (and (=> (= (ControlFlow 0 15) 13) anon22_Then_correct) (=> (= (ControlFlow 0 15) 14) anon22_Else_correct)))))
(let ((anon21_Else_correct  (=> (and (not (and ($Is SeqType |x#4@0| (TSeq TChar)) ($IsAlloc SeqType |x#4@0| (TSeq TChar) $Heap))) (= (ControlFlow 0 8) 6)) anon12_correct)))
(let ((anon20_Then_correct  (=> (|Set#Equal| (|Map#Domain| |ctx'#Z#0@0|) (|Map#Domain| |ctx#0@@1|)) (and (=> (= (ControlFlow 0 16) 15) anon21_Then_correct) (=> (= (ControlFlow 0 16) 8) anon21_Else_correct)))))
(let ((anon20_Else_correct  (=> (and (not (|Set#Equal| (|Map#Domain| |ctx'#Z#0@0|) (|Map#Domain| |ctx#0@@1|))) (= (ControlFlow 0 7) 6)) anon12_correct)))
(let ((anon19_Then_correct  (=> (and (= |_mcc#0#0| (|#_System._tuple#2._#Make2| |_mcc#1#0| ($Box MapType |_mcc#2#0|))) ($IsBox |_mcc#1#0| Pure._default.ResultSameCtx$V@@1)) (=> (and (and ($Is MapType |_mcc#2#0| (TMap (TSeq TChar) TInt)) (= |let#0#0#0| |_mcc#2#0|)) (and ($Is MapType |let#0#0#0| (TMap (TSeq TChar) TInt)) (= |ctx'#Z#0@0| |let#0#0#0|))) (and (=> (= (ControlFlow 0 17) 16) anon20_Then_correct) (=> (= (ControlFlow 0 17) 7) anon20_Else_correct))))))
(let ((anon19_Else_correct true))
(let ((anon18_Then_correct  (=> (and (= |res#0@@1| (|#Utils.Result.Success| ($Box DatatypeTypeType |_mcc#0#0|))) ($Is DatatypeTypeType |_mcc#0#0| (Tclass._System.Tuple2 Pure._default.ResultSameCtx$V@@1 (TMap (TSeq TChar) TInt)))) (and (=> (= (ControlFlow 0 18) 17) anon19_Then_correct) (=> (= (ControlFlow 0 18) 5) anon19_Else_correct)))))
(let ((anon24_Else_correct true))
(let ((anon24_Then_correct true))
(let ((anon18_Else_correct  (=> (or (not (= |res#0@@1| (|#Utils.Result.Success| ($Box DatatypeTypeType |_mcc#0#0|)))) (not true)) (and (=> (= (ControlFlow 0 4) 2) anon24_Then_correct) (=> (= (ControlFlow 0 4) 3) anon24_Else_correct)))))
(let ((anon17_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#6| null $Heap alloc false)) (and (and (=> (= (ControlFlow 0 19) 1) anon17_Then_correct) (=> (= (ControlFlow 0 19) 18) anon18_Then_correct)) (=> (= (ControlFlow 0 19) 4) anon18_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) ($Is SetType |locals#0@@1| (TSet (TSeq TChar)))) (and (and ($Is MapType |ctx#0@@1| (TMap (TSeq TChar) TInt)) ($Is DatatypeTypeType |res#0@@1| (Tclass.Utils.Result (Tclass._System.Tuple2 Pure._default.ResultSameCtx$V@@1 (TMap (TSeq TChar) TInt))))) (and (= 0 $FunctionContextHeight) (= (ControlFlow 0 20) 19)))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
