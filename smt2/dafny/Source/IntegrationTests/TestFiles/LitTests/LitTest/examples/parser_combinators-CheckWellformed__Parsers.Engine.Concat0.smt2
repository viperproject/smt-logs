(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TagSet () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun |##Parsers.ParseResult.Failure| () T@U)
(declare-fun Tagclass.Parsers.ParseResult () T@U)
(declare-fun |##Parsers.ParseResult.Success| () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun tytagFamily$ParseResult () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun $FunctionContextHeight () Int)
(declare-fun Parsers.ParseResult.PropagateFailure (T@U T@U T@U) T@U)
(declare-fun |Parsers.ParseResult.PropagateFailure#canCall| (T@U T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass.Parsers.ParseResult (T@U) T@U)
(declare-fun Parsers.ParseResult.Failure_q (T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun |#Parsers.ParseResult.Failure| () T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1Type (T@T T@T) T@T)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun BoxType () T@T)
(declare-fun SetType () T@T)
(declare-fun MapType0Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType1Select (T@T T@T T@U T@U) T@U)
(declare-fun MapType1Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun MapType1TypeInv0 (T@T) T@T)
(declare-fun MapType1TypeInv1 (T@T) T@T)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun Parsers.Engine.Concat0 (T@U T@U T@U T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |Parsers.Engine.Concat0#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun Parsers.ParseResult.Success_q (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Parsers.ParseResult.pos (T@U) Int)
(declare-fun |Parsers.ParseResult.IsFailure#canCall| (T@U T@U) Bool)
(declare-fun Parsers.ParseResult.IsFailure (T@U T@U) Bool)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |Parsers.ParseResult.Extract#canCall| (T@U T@U) Bool)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun Parsers.ParseResult.Extract (T@U T@U) T@U)
(declare-fun AtLayer (T@T T@U T@U) T@U)
(declare-fun |lambda#6| (T@U) T@U)
(declare-fun |lambda#2| (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#3| (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#5| (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun |lambda#4| (Bool) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun Parsers.ParseResult.t (T@U) T@U)
(declare-fun null () T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $OneHeap () T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |#Parsers.ParseResult.Success| (Int T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun TSet (T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun Tag (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Tclass.Parsers.ParseResult_0 (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TagSet alloc Tagclass._System.nat Tagclass._System.object? Tagclass._System.object Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 |##Parsers.ParseResult.Failure| Tagclass.Parsers.ParseResult |##Parsers.ParseResult.Success| tytagFamily$nat tytagFamily$object |tytagFamily$_#Func1| |tytagFamily$_#PartialFunc1| |tytagFamily$_tuple#2| tytagFamily$ParseResult)
)
(assert (= (Ctor DatatypeTypeType) 3))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((Parsers.ParseResult$T T@U) (Parsers.ParseResult.PropagateFailure$U T@U) (this T@U) ) (!  (=> (or (|Parsers.ParseResult.PropagateFailure#canCall| Parsers.ParseResult$T Parsers.ParseResult.PropagateFailure$U this) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType this (Tclass.Parsers.ParseResult Parsers.ParseResult$T)) (Parsers.ParseResult.Failure_q this)))) (= (Parsers.ParseResult.PropagateFailure Parsers.ParseResult$T Parsers.ParseResult.PropagateFailure$U this) (Lit DatatypeTypeType |#Parsers.ParseResult.Failure|)))
 :pattern ( (Parsers.ParseResult.PropagateFailure Parsers.ParseResult$T Parsers.ParseResult.PropagateFailure$U this))
))))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((t0 T@T) (t1 T@T) (t2 T@T) (val T@U) (m T@U) (x0 T@U) (x1 T@U) ) (! (= (MapType0Select t0 t1 t2 (MapType0Store t0 t1 t2 m x0 x1 val) x0 x1) val)
 :weight 0
)) (and (forall ((u0 T@T) (u1 T@T) (u2 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (x1@@0 T@U) (y0 T@U) (y1 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 u2 (MapType0Store u0 u1 u2 m@@0 x0@@0 x1@@0 val@@0) y0 y1) (MapType0Select u0 u1 u2 m@@0 y0 y1)))
 :weight 0
)) (forall ((u0@@0 T@T) (u1@@0 T@T) (u2@@0 T@T) (val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (x1@@1 T@U) (y0@@0 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType0Select u0@@0 u1@@0 u2@@0 (MapType0Store u0@@0 u1@@0 u2@@0 m@@1 x0@@1 x1@@1 val@@1) y0@@0 y1@@0) (MapType0Select u0@@0 u1@@0 u2@@0 m@@1 y0@@0 y1@@0)))
 :weight 0
)))) (forall ((t0@@0 T@T) (t1@@0 T@T) (val@@2 T@U) (m@@2 T@U) (x0@@2 T@U) ) (! (= (MapType1Select t0@@0 t1@@0 (MapType1Store t0@@0 t1@@0 m@@2 x0@@2 val@@2) x0@@2) val@@2)
 :weight 0
))) (forall ((u0@@1 T@T) (u1@@1 T@T) (val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select u0@@1 u1@@1 (MapType1Store u0@@1 u1@@1 m@@3 x0@@3 val@@3) y0@@1) (MapType1Select u0@@1 u1@@1 m@@3 y0@@1)))
 :weight 0
))) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType1Type arg0@@2 arg1)) 4))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType1TypeInv0 (MapType1Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType1Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType1TypeInv1 (MapType1Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType1Type arg0@@4 arg1@@1))
))) (= (Ctor refType) 5)) (= (Ctor FieldType) 6)) (= (Ctor BoxType) 7)) (= (Ctor SetType) 8)))
(assert (forall ((t0@@1 T@U) (t1@@1 T@U) (heap T@U) (h T@U) (r T@U) (rd T@U) (bx0 T@U) (bx T@U) ) (! (= (|Set#IsMember| (Reads1 t0@@1 t1@@1 heap (Handle1 h r rd) bx0) bx) (|Set#IsMember| (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType rd heap bx0) bx))
 :pattern ( (|Set#IsMember| (Reads1 t0@@1 t1@@1 heap (Handle1 h r rd) bx0) bx))
)))
(assert (forall ((|x#0| T@U) ($h T@U) ) (! ($IsAlloc intType |x#0| Tclass._System.nat $h)
 :pattern ( ($IsAlloc intType |x#0| Tclass._System.nat $h))
)))
(assert (= (Ctor HandleTypeType) 9))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((Parsers.Engine.Concat0$L T@U) (Parsers.Engine.Concat0$R T@U) ($Heap T@U) (|left#0| T@U) (|right#0| T@U) ) (!  (=> (or (|Parsers.Engine.Concat0#canCall| Parsers.Engine.Concat0$L Parsers.Engine.Concat0$R (Lit HandleTypeType |left#0|) (Lit HandleTypeType |right#0|)) (and (< 2 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap) ($Is HandleTypeType |left#0| (Tclass._System.___hPartialFunc1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L)))) ($Is HandleTypeType |right#0| (Tclass._System.___hPartialFunc1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R)))))) (and (forall ((|$l#3#pos#0| T@U) (|$l#3#heap#0| T@U) )  (=> (and (<= (LitInt 0) (U_2_int |$l#3#pos#0|)) ($IsGoodHeap |$l#3#heap#0|)) (and (and true (=> (Requires1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L) $Heap (Lit HandleTypeType |left#0|) ($Box intType |$l#3#pos#0|)) (=> (Parsers.ParseResult.Success_q ($Unbox DatatypeTypeType (Apply1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L) $Heap (Lit HandleTypeType |left#0|) ($Box intType |$l#3#pos#0|)))) true))) (=> (and (Requires1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L) $Heap (Lit HandleTypeType |left#0|) ($Box intType |$l#3#pos#0|)) (=> (Parsers.ParseResult.Success_q ($Unbox DatatypeTypeType (Apply1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L) $Heap (Lit HandleTypeType |left#0|) ($Box intType |$l#3#pos#0|)))) (Requires1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R) $Heap (Lit HandleTypeType |right#0|) ($Box intType (int_2_U (Parsers.ParseResult.pos ($Unbox DatatypeTypeType (Apply1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L) $Heap (Lit HandleTypeType |left#0|) ($Box intType |$l#3#pos#0|))))))))) (let ((|valueOrError0#3| ($Unbox DatatypeTypeType (Apply1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L) |$l#3#heap#0| (Lit HandleTypeType |left#0|) ($Box intType |$l#3#pos#0|)))))
 (and (and (|Parsers.ParseResult.IsFailure#canCall| Parsers.Engine.Concat0$L |valueOrError0#3|) (=> (Parsers.ParseResult.IsFailure Parsers.Engine.Concat0$L |valueOrError0#3|) (|Parsers.ParseResult.PropagateFailure#canCall| Parsers.Engine.Concat0$L (Tclass._System.Tuple2 Parsers.Engine.Concat0$L Parsers.Engine.Concat0$R) |valueOrError0#3|))) (=> (not (Parsers.ParseResult.IsFailure Parsers.Engine.Concat0$L |valueOrError0#3|)) (and (|Parsers.ParseResult.Extract#canCall| Parsers.Engine.Concat0$L |valueOrError0#3|) (let ((|pos#7| (U_2_int ($Unbox intType (_System.Tuple2._0 (Parsers.ParseResult.Extract Parsers.Engine.Concat0$L |valueOrError0#3|))))))
(let ((|valueOrError1#3| ($Unbox DatatypeTypeType (Apply1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R) |$l#3#heap#0| (Lit HandleTypeType |right#0|) ($Box intType (int_2_U |pos#7|))))))
 (and (and (|Parsers.ParseResult.IsFailure#canCall| Parsers.Engine.Concat0$R |valueOrError1#3|) (=> (Parsers.ParseResult.IsFailure Parsers.Engine.Concat0$R |valueOrError1#3|) (|Parsers.ParseResult.PropagateFailure#canCall| Parsers.Engine.Concat0$R (Tclass._System.Tuple2 Parsers.Engine.Concat0$L Parsers.Engine.Concat0$R) |valueOrError1#3|))) (=> (not (Parsers.ParseResult.IsFailure Parsers.Engine.Concat0$R |valueOrError1#3|)) (|Parsers.ParseResult.Extract#canCall| Parsers.Engine.Concat0$R |valueOrError1#3|))))))))))))) (= (Parsers.Engine.Concat0 Parsers.Engine.Concat0$L Parsers.Engine.Concat0$R (Lit HandleTypeType |left#0|) (Lit HandleTypeType |right#0|)) (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#6| (Handle1 (|lambda#2| Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L) (Lit HandleTypeType |left#0|) Parsers.Engine.Concat0$L Parsers.Engine.Concat0$L (Tclass._System.Tuple2 Parsers.Engine.Concat0$L Parsers.Engine.Concat0$R) Parsers.Engine.Concat0$L Parsers.Engine.Concat0$L Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R) (Lit HandleTypeType |right#0|) Parsers.Engine.Concat0$R Parsers.Engine.Concat0$R (Tclass._System.Tuple2 Parsers.Engine.Concat0$L Parsers.Engine.Concat0$R) Parsers.Engine.Concat0$R Parsers.Engine.Concat0$R) (|lambda#3| Tclass._System.nat Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L) (Lit HandleTypeType |left#0|) Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L) (Lit HandleTypeType |left#0|) Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R) (Lit HandleTypeType |right#0|) Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L) (Lit HandleTypeType |left#0|)) (|lambda#5| (SetRef_to_SetBox (|lambda#4| false))))) ($LS $LZ))))))
 :weight 3
 :pattern ( (Parsers.Engine.Concat0 Parsers.Engine.Concat0$L Parsers.Engine.Concat0$R (Lit HandleTypeType |left#0|) (Lit HandleTypeType |right#0|)) ($IsGoodHeap $Heap))
))))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d))
 :pattern ( (_System.Tuple2.___hMake2_q d) ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (= (DatatypeCtorId |#Parsers.ParseResult.Failure|) |##Parsers.ParseResult.Failure|))
(assert (forall ((f T@U) (t0@@2 T@U) (t1@@2 T@U) (u0@@2 T@U) (u1@@2 T@U) ) (!  (=> (and (and ($Is HandleTypeType f (Tclass._System.___hFunc1 t0@@2 t1@@2)) (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 u0@@2) ($IsBox bx@@0 t0@@2))
 :pattern ( ($IsBox bx@@0 u0@@2))
 :pattern ( ($IsBox bx@@0 t0@@2))
))) (forall ((bx@@1 T@U) ) (!  (=> ($IsBox bx@@1 t1@@2) ($IsBox bx@@1 u1@@2))
 :pattern ( ($IsBox bx@@1 t1@@2))
 :pattern ( ($IsBox bx@@1 u1@@2))
))) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0@@2 u1@@2)))
 :pattern ( ($Is HandleTypeType f (Tclass._System.___hFunc1 t0@@2 t1@@2)) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0@@2 u1@@2)))
)))
(assert (forall ((|c#0| T@U) ($h@@0 T@U) ) (! (= ($IsAlloc refType |c#0| Tclass._System.object $h@@0) ($IsAlloc refType |c#0| Tclass._System.object? $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object $h@@0))
 :pattern ( ($IsAlloc refType |c#0| Tclass._System.object? $h@@0))
)))
(assert (forall ((Parsers.ParseResult$T@@0 T@U) ($h@@1 T@U) ) (!  (=> ($IsGoodHeap $h@@1) ($IsAlloc DatatypeTypeType |#Parsers.ParseResult.Failure| (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@0) $h@@1))
 :pattern ( ($IsAlloc DatatypeTypeType |#Parsers.ParseResult.Failure| (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@0) $h@@1))
)))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((Parsers.ParseResult$T@@1 T@U) (this@@0 T@U) ) (!  (=> (or (|Parsers.ParseResult.IsFailure#canCall| Parsers.ParseResult$T@@1 (Lit DatatypeTypeType this@@0)) (and (< 0 $FunctionContextHeight) ($Is DatatypeTypeType this@@0 (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@1)))) (= (Parsers.ParseResult.IsFailure Parsers.ParseResult$T@@1 (Lit DatatypeTypeType this@@0)) (U_2_bool (Lit boolType (bool_2_U (Parsers.ParseResult.Failure_q (Lit DatatypeTypeType this@@0)))))))
 :weight 3
 :pattern ( (Parsers.ParseResult.IsFailure Parsers.ParseResult$T@@1 (Lit DatatypeTypeType this@@0)))
))))
(assert (forall ((Parsers.ParseResult$T@@2 T@U) ) (! ($Is DatatypeTypeType |#Parsers.ParseResult.Failure| (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@2))
 :pattern ( ($Is DatatypeTypeType |#Parsers.ParseResult.Failure| (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@2)))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((Parsers.ParseResult$T@@3 T@U) (this@@1 T@U) ) (!  (=> (or (|Parsers.ParseResult.Extract#canCall| Parsers.ParseResult$T@@3 this@@1) (and (< 0 $FunctionContextHeight) (and ($Is DatatypeTypeType this@@1 (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@3)) (Parsers.ParseResult.Success_q this@@1)))) (= (Parsers.ParseResult.Extract Parsers.ParseResult$T@@3 this@@1) (|#_System._tuple#2._#Make2| ($Box intType (int_2_U (Parsers.ParseResult.pos this@@1))) (Parsers.ParseResult.t this@@1))))
 :pattern ( (Parsers.ParseResult.Extract Parsers.ParseResult$T@@3 this@@1))
))))
(assert (forall (($o T@U) ($h@@2 T@U) ) (! (= ($IsAlloc refType $o Tclass._System.object? $h@@2)  (or (= $o null) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) $h@@2 $o) alloc)))))
 :pattern ( ($IsAlloc refType $o Tclass._System.object? $h@@2))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall (($Heap@@0 T@U) (Parsers.ParseResult$T@@4 T@U) (this@@2 T@U) ) (!  (=> (and (or (|Parsers.ParseResult.Extract#canCall| Parsers.ParseResult$T@@4 this@@2) (and (< 0 $FunctionContextHeight) (and ($IsAlloc DatatypeTypeType this@@2 (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@4) $Heap@@0) (Parsers.ParseResult.Success_q this@@2)))) ($IsGoodHeap $Heap@@0)) ($IsAlloc DatatypeTypeType (Parsers.ParseResult.Extract Parsers.ParseResult$T@@4 this@@2) (Tclass._System.Tuple2 Tclass._System.nat Parsers.ParseResult$T@@4) $Heap@@0))
 :pattern ( ($IsAlloc DatatypeTypeType (Parsers.ParseResult.Extract Parsers.ParseResult$T@@4 this@@2) (Tclass._System.Tuple2 Tclass._System.nat Parsers.ParseResult$T@@4) $Heap@@0))
))))
(assert (forall ((h@@0 T@U) (k T@U) ) (!  (=> ($HeapSucc h@@0 k) (forall ((o@@0 T@U) ) (!  (=> (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@0 o@@0) alloc))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) k o@@0) alloc))))
 :pattern ( (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) k o@@0) alloc))
)))
 :pattern ( ($HeapSucc h@@0 k))
)))
(assert (forall ((x@@2 Int) ) (! (= (LitInt x@@2) x@@2)
 :pattern ( (LitInt x@@2))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((t0@@3 T@U) (t1@@3 T@U) (heap@@0 T@U) (f@@0 T@U) (bx0@@0 T@U) ) (!  (=> (and ($IsGoodHeap heap@@0) (and ($IsBox bx0@@0 t0@@3) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 t0@@3 t1@@3)))) (= (|Set#Equal| (Reads1 t0@@3 t1@@3 $OneHeap f@@0 bx0@@0) |Set#Empty|) (|Set#Equal| (Reads1 t0@@3 t1@@3 heap@@0 f@@0 bx0@@0) |Set#Empty|)))
 :pattern ( (Reads1 t0@@3 t1@@3 $OneHeap f@@0 bx0@@0) ($IsGoodHeap heap@@0))
 :pattern ( (Reads1 t0@@3 t1@@3 heap@@0 f@@0 bx0@@0))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((Parsers.ParseResult$T@@5 T@U) (Parsers.ParseResult.PropagateFailure$U@@0 T@U) (this@@3 T@U) ) (!  (=> (or (|Parsers.ParseResult.PropagateFailure#canCall| Parsers.ParseResult$T@@5 Parsers.ParseResult.PropagateFailure$U@@0 (Lit DatatypeTypeType this@@3)) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType this@@3 (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@5)) (U_2_bool (Lit boolType (bool_2_U (Parsers.ParseResult.Failure_q (Lit DatatypeTypeType this@@3)))))))) (= (Parsers.ParseResult.PropagateFailure Parsers.ParseResult$T@@5 Parsers.ParseResult.PropagateFailure$U@@0 (Lit DatatypeTypeType this@@3)) (Lit DatatypeTypeType |#Parsers.ParseResult.Failure|)))
 :weight 3
 :pattern ( (Parsers.ParseResult.PropagateFailure Parsers.ParseResult$T@@5 Parsers.ParseResult.PropagateFailure$U@@0 (Lit DatatypeTypeType this@@3)))
))))
(assert (forall ((Parsers.ParseResult$T@@6 T@U) (|a#18#0#0| Int) (|a#18#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#Parsers.ParseResult.Success| |a#18#0#0| |a#18#1#0|) (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@6))  (and ($Is intType (int_2_U |a#18#0#0|) Tclass._System.nat) ($IsBox |a#18#1#0| Parsers.ParseResult$T@@6)))
 :pattern ( ($Is DatatypeTypeType (|#Parsers.ParseResult.Success| |a#18#0#0| |a#18#1#0|) (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@6)))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h@@3 T@U) ) (!  (=> ($IsGoodHeap $h@@3) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@3)  (and ($IsAllocBox |a#2#0#0@@0| |_System._tuple#2$T0@@1| $h@@3) ($IsAllocBox |a#2#1#0@@0| |_System._tuple#2$T1@@1| $h@@3))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@3))
)))
(assert (forall ((d@@0 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (Parsers.ParseResult.Failure_q d@@1) (= (DatatypeCtorId d@@1) |##Parsers.ParseResult.Failure|))
 :pattern ( (Parsers.ParseResult.Failure_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (Parsers.ParseResult.Success_q d@@2) (= (DatatypeCtorId d@@2) |##Parsers.ParseResult.Success|))
 :pattern ( (Parsers.ParseResult.Success_q d@@2))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall (($Heap@@1 T@U) (Parsers.ParseResult$T@@7 T@U) (Parsers.ParseResult.PropagateFailure$U@@1 T@U) (this@@4 T@U) ) (!  (=> (and (or (|Parsers.ParseResult.PropagateFailure#canCall| Parsers.ParseResult$T@@7 Parsers.ParseResult.PropagateFailure$U@@1 this@@4) (and (< 1 $FunctionContextHeight) (and ($IsAlloc DatatypeTypeType this@@4 (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@7) $Heap@@1) (Parsers.ParseResult.Failure_q this@@4)))) ($IsGoodHeap $Heap@@1)) ($IsAlloc DatatypeTypeType (Parsers.ParseResult.PropagateFailure Parsers.ParseResult$T@@7 Parsers.ParseResult.PropagateFailure$U@@1 this@@4) (Tclass.Parsers.ParseResult Parsers.ParseResult.PropagateFailure$U@@1) $Heap@@1))
 :pattern ( ($IsAlloc DatatypeTypeType (Parsers.ParseResult.PropagateFailure Parsers.ParseResult$T@@7 Parsers.ParseResult.PropagateFailure$U@@1 this@@4) (Tclass.Parsers.ParseResult Parsers.ParseResult.PropagateFailure$U@@1) $Heap@@1))
))))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((d@@3 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@3) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@3 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (!  (=> (Parsers.ParseResult.Success_q d@@4) (exists ((|a#17#0#0| Int) (|a#17#1#0| T@U) ) (= d@@4 (|#Parsers.ParseResult.Success| |a#17#0#0| |a#17#1#0|))))
 :pattern ( (Parsers.ParseResult.Success_q d@@4))
)))
(assert (forall ((t0@@4 T@U) (t1@@4 T@U) (h0 T@U) (h1 T@U) (f@@1 T@U) (bx0@@1 T@U) ) (!  (=> (and (and (and ($HeapSucc h0 h1) (and ($IsGoodHeap h0) ($IsGoodHeap h1))) (and ($IsBox bx0@@1 t0@@4) ($Is HandleTypeType f@@1 (Tclass._System.___hFunc1 t0@@4 t1@@4)))) (forall ((o@@1 T@U) (fld T@U) )  (=> (and (or (not (= o@@1 null)) (not true)) (|Set#IsMember| (Reads1 t0@@4 t1@@4 h0 f@@1 bx0@@1) ($Box refType o@@1))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0 o@@1) fld) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1 o@@1) fld))))) (= (Requires1 t0@@4 t1@@4 h0 f@@1 bx0@@1) (Requires1 t0@@4 t1@@4 h1 f@@1 bx0@@1)))
 :pattern ( ($HeapSucc h0 h1) (Requires1 t0@@4 t1@@4 h1 f@@1 bx0@@1))
)))
(assert (forall ((t0@@5 T@U) (t1@@5 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@2 T@U) (bx0@@2 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) (and ($IsBox bx0@@2 t0@@5) ($Is HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@5 t1@@5)))) (forall ((o@@2 T@U) (fld@@0 T@U) )  (=> (and (or (not (= o@@2 null)) (not true)) (|Set#IsMember| (Reads1 t0@@5 t1@@5 h1@@0 f@@2 bx0@@2) ($Box refType o@@2))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@0 o@@2) fld@@0) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@0 o@@2) fld@@0))))) (= (Requires1 t0@@5 t1@@5 h0@@0 f@@2 bx0@@2) (Requires1 t0@@5 t1@@5 h1@@0 f@@2 bx0@@2)))
 :pattern ( ($HeapSucc h0@@0 h1@@0) (Requires1 t0@@5 t1@@5 h1@@0 f@@2 bx0@@2))
)))
(assert (forall ((d@@5 T@U) ) (!  (=> (Parsers.ParseResult.Failure_q d@@5) (= d@@5 |#Parsers.ParseResult.Failure|))
 :pattern ( (Parsers.ParseResult.Failure_q d@@5))
)))
(assert (forall ((v T@U) (t0@@6 T@U) ) (! (= ($Is SetType v (TSet t0@@6)) (forall ((bx@@2 T@U) ) (!  (=> (|Set#IsMember| v bx@@2) ($IsBox bx@@2 t0@@6))
 :pattern ( (|Set#IsMember| v bx@@2))
)))
 :pattern ( ($Is SetType v (TSet t0@@6)))
)))
(assert (= (Ctor LayerTypeType) 10))
(assert (forall ((f@@3 T@U) (ly T@U) (A T@T) ) (! (= (AtLayer A f@@3 ly) (MapType1Select LayerTypeType A f@@3 ly))
 :pattern ( (AtLayer A f@@3 ly))
)))
(assert (forall ((|x#0@@0| T@U) ) (! (= ($Is intType |x#0@@0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0@@0|)))
 :pattern ( ($Is intType |x#0@@0| Tclass._System.nat))
)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((v@@0 T@U) (t T@U) (h@@1 T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h@@1) ($IsAlloc T@@1 v@@0 t h@@1))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h@@1))
)))
(assert (forall ((h@@2 T@U) (k@@0 T@U) (bx@@3 T@U) (t@@0 T@U) ) (!  (=> ($HeapSucc h@@2 k@@0) (=> ($IsAllocBox bx@@3 t@@0 h@@2) ($IsAllocBox bx@@3 t@@0 k@@0)))
 :pattern ( ($HeapSucc h@@2 k@@0) ($IsAllocBox bx@@3 t@@0 h@@2))
)))
(assert (forall ((h@@3 T@U) (k@@1 T@U) (v@@1 T@U) (t@@1 T@U) (T@@2 T@T) ) (!  (=> ($HeapSucc h@@3 k@@1) (=> ($IsAlloc T@@2 v@@1 t@@1 h@@3) ($IsAlloc T@@2 v@@1 t@@1 k@@1)))
 :pattern ( ($HeapSucc h@@3 k@@1) ($IsAlloc T@@2 v@@1 t@@1 h@@3))
)))
(assert (forall ((t0@@7 T@U) (t1@@6 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@4 T@U) (bx0@@3 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) (and ($IsBox bx0@@3 t0@@7) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc1 t0@@7 t1@@6)))) (forall ((o@@3 T@U) (fld@@1 T@U) )  (=> (and (or (not (= o@@3 null)) (not true)) (|Set#IsMember| (Reads1 t0@@7 t1@@6 h0@@1 f@@4 bx0@@3) ($Box refType o@@3))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@1 o@@3) fld@@1) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@1 o@@3) fld@@1))))) (= (Reads1 t0@@7 t1@@6 h0@@1 f@@4 bx0@@3) (Reads1 t0@@7 t1@@6 h1@@1 f@@4 bx0@@3)))
 :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads1 t0@@7 t1@@6 h1@@1 f@@4 bx0@@3))
)))
(assert (forall ((t0@@8 T@U) (t1@@7 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@5 T@U) (bx0@@4 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) (and ($IsBox bx0@@4 t0@@8) ($Is HandleTypeType f@@5 (Tclass._System.___hFunc1 t0@@8 t1@@7)))) (forall ((o@@4 T@U) (fld@@2 T@U) )  (=> (and (or (not (= o@@4 null)) (not true)) (|Set#IsMember| (Reads1 t0@@8 t1@@7 h1@@2 f@@5 bx0@@4) ($Box refType o@@4))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@2 o@@4) fld@@2) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@2 o@@4) fld@@2))))) (= (Reads1 t0@@8 t1@@7 h0@@2 f@@5 bx0@@4) (Reads1 t0@@8 t1@@7 h1@@2 f@@5 bx0@@4)))
 :pattern ( ($HeapSucc h0@@2 h1@@2) (Reads1 t0@@8 t1@@7 h1@@2 f@@5 bx0@@4))
)))
(assert (forall ((t0@@9 T@U) (t1@@8 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@6 T@U) (bx0@@5 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) (and ($IsBox bx0@@5 t0@@9) ($Is HandleTypeType f@@6 (Tclass._System.___hFunc1 t0@@9 t1@@8)))) (forall ((o@@5 T@U) (fld@@3 T@U) )  (=> (and (or (not (= o@@5 null)) (not true)) (|Set#IsMember| (Reads1 t0@@9 t1@@8 h0@@3 f@@6 bx0@@5) ($Box refType o@@5))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@3 o@@5) fld@@3) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@3 o@@5) fld@@3))))) (= (Apply1 t0@@9 t1@@8 h0@@3 f@@6 bx0@@5) (Apply1 t0@@9 t1@@8 h1@@3 f@@6 bx0@@5)))
 :pattern ( ($HeapSucc h0@@3 h1@@3) (Apply1 t0@@9 t1@@8 h1@@3 f@@6 bx0@@5))
)))
(assert (forall ((t0@@10 T@U) (t1@@9 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@7 T@U) (bx0@@6 T@U) ) (!  (=> (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) (and ($IsBox bx0@@6 t0@@10) ($Is HandleTypeType f@@7 (Tclass._System.___hFunc1 t0@@10 t1@@9)))) (forall ((o@@6 T@U) (fld@@4 T@U) )  (=> (and (or (not (= o@@6 null)) (not true)) (|Set#IsMember| (Reads1 t0@@10 t1@@9 h1@@4 f@@7 bx0@@6) ($Box refType o@@6))) (= (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h0@@4 o@@6) fld@@4) (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h1@@4 o@@6) fld@@4))))) (= (Apply1 t0@@10 t1@@9 h0@@4 f@@7 bx0@@6) (Apply1 t0@@10 t1@@9 h1@@4 f@@7 bx0@@6)))
 :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply1 t0@@10 t1@@9 h1@@4 f@@7 bx0@@6))
)))
(assert (forall ((Parsers.ParseResult$T@@8 T@U) ) (!  (and (= (Tag (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@8)) Tagclass.Parsers.ParseResult) (= (TagFamily (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@8)) tytagFamily$ParseResult))
 :pattern ( (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@8))
)))
(assert (forall ((s T@U) (bx@@4 T@U) ) (! (= (|Set#IsMember| (SetRef_to_SetBox s) bx@@4) (U_2_bool (MapType1Select refType boolType s ($Unbox refType bx@@4))))
 :pattern ( (|Set#IsMember| (SetRef_to_SetBox s) bx@@4))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((Parsers.ParseResult$T@@9 T@U) (this@@5 T@U) ) (!  (=> (or (|Parsers.ParseResult.Extract#canCall| Parsers.ParseResult$T@@9 this@@5) (and (< 0 $FunctionContextHeight) (and ($Is DatatypeTypeType this@@5 (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@9)) (Parsers.ParseResult.Success_q this@@5)))) ($Is DatatypeTypeType (Parsers.ParseResult.Extract Parsers.ParseResult$T@@9 this@@5) (Tclass._System.Tuple2 Tclass._System.nat Parsers.ParseResult$T@@9)))
 :pattern ( (Parsers.ParseResult.Extract Parsers.ParseResult$T@@9 this@@5))
))))
(assert (forall ((|#$T0| T@U) (|#$R| T@U) (|f#0| T@U) ($h@@4 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hPartialFunc1 |#$T0| |#$R|) $h@@4) ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hFunc1 |#$T0| |#$R|) $h@@4))
 :pattern ( ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hPartialFunc1 |#$T0| |#$R|) $h@@4))
)))
(assert (forall ((t0@@11 T@U) (t1@@10 T@U) (heap@@1 T@U) (h@@4 T@U) (r@@0 T@U) (rd@@0 T@U) (bx0@@7 T@U) ) (! (= (Apply1 t0@@11 t1@@10 heap@@1 (Handle1 h@@4 r@@0 rd@@0) bx0@@7) (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType h@@4 heap@@1 bx0@@7))
 :pattern ( (Apply1 t0@@11 t1@@10 heap@@1 (Handle1 h@@4 r@@0 rd@@0) bx0@@7))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 Tclass._System.nat) (and (= ($Box intType ($Unbox intType bx@@5)) bx@@5) ($Is intType ($Unbox intType bx@@5) Tclass._System.nat)))
 :pattern ( ($IsBox bx@@5 Tclass._System.nat))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 Tclass._System.object?) (and (= ($Box refType ($Unbox refType bx@@6)) bx@@6) ($Is refType ($Unbox refType bx@@6) Tclass._System.object?)))
 :pattern ( ($IsBox bx@@6 Tclass._System.object?))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 Tclass._System.object) (and (= ($Box refType ($Unbox refType bx@@7)) bx@@7) ($Is refType ($Unbox refType bx@@7) Tclass._System.object)))
 :pattern ( ($IsBox bx@@7 Tclass._System.object))
)))
(assert (forall ((|c#0@@0| T@U) ) (! (= ($Is refType |c#0@@0| Tclass._System.object)  (and ($Is refType |c#0@@0| Tclass._System.object?) (or (not (= |c#0@@0| null)) (not true))))
 :pattern ( ($Is refType |c#0@@0| Tclass._System.object))
 :pattern ( ($Is refType |c#0@@0| Tclass._System.object?))
)))
(assert (forall ((f@@8 T@U) (t0@@12 T@U) (t1@@11 T@U) (h@@5 T@U) ) (!  (=> (and ($IsGoodHeap h@@5) ($IsAlloc HandleTypeType f@@8 (Tclass._System.___hFunc1 t0@@12 t1@@11) h@@5)) (forall ((bx0@@8 T@U) ) (!  (=> (and ($IsAllocBox bx0@@8 t0@@12 h@@5) (Requires1 t0@@12 t1@@11 h@@5 f@@8 bx0@@8)) ($IsAllocBox (Apply1 t0@@12 t1@@11 h@@5 f@@8 bx0@@8) t1@@11 h@@5))
 :pattern ( (Apply1 t0@@12 t1@@11 h@@5 f@@8 bx0@@8))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@8 (Tclass._System.___hFunc1 t0@@12 t1@@11) h@@5))
)))
(assert (forall ((|l#0| Bool) (|$l#0#o#0| T@U) ) (! (= (U_2_bool (MapType1Select refType boolType (|lambda#4| |l#0|) |$l#0#o#0|)) |l#0|)
 :pattern ( (MapType1Select refType boolType (|lambda#4| |l#0|) |$l#0#o#0|))
)))
(assert (forall ((|l#0@@0| T@U) (|$l#0#ly#0| T@U) ) (! (= (MapType1Select LayerTypeType HandleTypeType (|lambda#6| |l#0@@0|) |$l#0#ly#0|) |l#0@@0|)
 :pattern ( (MapType1Select LayerTypeType HandleTypeType (|lambda#6| |l#0@@0|) |$l#0#ly#0|))
)))
(assert (forall ((Parsers.ParseResult$T@@10 T@U) (d@@6 T@U) ) (!  (=> ($Is DatatypeTypeType d@@6 (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@10)) (or (Parsers.ParseResult.Failure_q d@@6) (Parsers.ParseResult.Success_q d@@6)))
 :pattern ( (Parsers.ParseResult.Success_q d@@6) ($Is DatatypeTypeType d@@6 (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@10)))
 :pattern ( (Parsers.ParseResult.Failure_q d@@6) ($Is DatatypeTypeType d@@6 (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@10)))
)))
(assert (forall ((d@@7 T@U) ($h@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) (and (Parsers.ParseResult.Success_q d@@7) (exists ((Parsers.ParseResult$T@@11 T@U) ) (! ($IsAlloc DatatypeTypeType d@@7 (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@11) $h@@5)
 :pattern ( ($IsAlloc DatatypeTypeType d@@7 (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@11) $h@@5))
)))) ($IsAlloc intType (int_2_U (Parsers.ParseResult.pos d@@7)) Tclass._System.nat $h@@5))
 :pattern ( ($IsAlloc intType (int_2_U (Parsers.ParseResult.pos d@@7)) Tclass._System.nat $h@@5))
)))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (|Set#Equal| a b) (= a b))
 :pattern ( (|Set#Equal| a b))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (c T@U) ) (!  (=> (or (not (= a@@0 c)) (not true)) (=> (and ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c)) ($HeapSucc a@@0 c)))
 :pattern ( ($HeapSucc a@@0 b@@0) ($HeapSucc b@@0 c))
)))
(assert (forall ((f@@9 T@U) (t0@@13 T@U) (t1@@12 T@U) ) (! (= ($Is HandleTypeType f@@9 (Tclass._System.___hFunc1 t0@@13 t1@@12)) (forall ((h@@6 T@U) (bx0@@9 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@6) ($IsBox bx0@@9 t0@@13)) (Requires1 t0@@13 t1@@12 h@@6 f@@9 bx0@@9)) ($IsBox (Apply1 t0@@13 t1@@12 h@@6 f@@9 bx0@@9) t1@@12))
 :pattern ( (Apply1 t0@@13 t1@@12 h@@6 f@@9 bx0@@9))
)))
 :pattern ( ($Is HandleTypeType f@@9 (Tclass._System.___hFunc1 t0@@13 t1@@12)))
)))
(assert (forall ((v@@2 T@U) (t@@2 T@U) (T@@3 T@T) ) (! (= ($IsBox ($Box T@@3 v@@2) t@@2) ($Is T@@3 v@@2 t@@2))
 :pattern ( ($IsBox ($Box T@@3 v@@2) t@@2))
)))
(assert (forall ((t0@@14 T@U) (t1@@13 T@U) (heap@@2 T@U) (h@@7 T@U) (r@@1 T@U) (rd@@1 T@U) (bx0@@10 T@U) ) (!  (=> (U_2_bool (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType r@@1 heap@@2 bx0@@10)) (Requires1 t0@@14 t1@@13 heap@@2 (Handle1 h@@7 r@@1 rd@@1) bx0@@10))
 :pattern ( (Requires1 t0@@14 t1@@13 heap@@2 (Handle1 h@@7 r@@1 rd@@1) bx0@@10))
)))
(assert (forall ((|l#0@@1| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| T@U) (|l#4| T@U) (|l#5| T@U) (|l#6| T@U) (|l#7| T@U) (|l#8| T@U) (|l#9| T@U) (|l#10| T@U) (|l#11| T@U) (|l#12| T@U) (|l#13| T@U) (|l#14| T@U) (|l#15| T@U) (|$l#0#heap#0| T@U) (|$l#0#pos#0| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType (|lambda#2| |l#0@@1| |l#1| |l#2| |l#3| |l#4| |l#5| |l#6| |l#7| |l#8| |l#9| |l#10| |l#11| |l#12| |l#13| |l#14| |l#15|) |$l#0#heap#0| |$l#0#pos#0|) ($Box DatatypeTypeType (let ((|valueOrError0#0| ($Unbox DatatypeTypeType (Apply1 |l#0@@1| |l#1| |$l#0#heap#0| |l#2| ($Box intType ($Unbox intType |$l#0#pos#0|))))))
(ite (Parsers.ParseResult.IsFailure |l#3| |valueOrError0#0|) (Parsers.ParseResult.PropagateFailure |l#4| |l#5| |valueOrError0#0|) (let ((|l#0@@2| (_System.Tuple2._1 (Parsers.ParseResult.Extract |l#7| |valueOrError0#0|))))
(let ((|pos#0| (U_2_int ($Unbox intType (_System.Tuple2._0 (Parsers.ParseResult.Extract |l#6| |valueOrError0#0|))))))
(let ((|valueOrError1#0| ($Unbox DatatypeTypeType (Apply1 |l#8| |l#9| |$l#0#heap#0| |l#10| ($Box intType (int_2_U |pos#0|))))))
(ite (Parsers.ParseResult.IsFailure |l#11| |valueOrError1#0|) (Parsers.ParseResult.PropagateFailure |l#12| |l#13| |valueOrError1#0|) (let ((|r#0| (_System.Tuple2._1 (Parsers.ParseResult.Extract |l#15| |valueOrError1#0|))))
(let ((|pos#1| (U_2_int ($Unbox intType (_System.Tuple2._0 (Parsers.ParseResult.Extract |l#14| |valueOrError1#0|))))))
(|#Parsers.ParseResult.Success| |pos#1| ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| |l#0@@2| |r#0|)))))))))))))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType BoxType (|lambda#2| |l#0@@1| |l#1| |l#2| |l#3| |l#4| |l#5| |l#6| |l#7| |l#8| |l#9| |l#10| |l#11| |l#12| |l#13| |l#14| |l#15|) |$l#0#heap#0| |$l#0#pos#0|))
)))
(assert (forall ((v@@3 T@U) (t0@@15 T@U) (h@@8 T@U) ) (! (= ($IsAlloc SetType v@@3 (TSet t0@@15) h@@8) (forall ((bx@@8 T@U) ) (!  (=> (|Set#IsMember| v@@3 bx@@8) ($IsAllocBox bx@@8 t0@@15 h@@8))
 :pattern ( (|Set#IsMember| v@@3 bx@@8))
)))
 :pattern ( ($IsAlloc SetType v@@3 (TSet t0@@15) h@@8))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) ) (! (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) |#$T0@@0|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) ) (! (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) |#$R@@1|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) ) (! (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@2| |#$R@@2|)) |#$T0@@2|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@2| |#$R@@2|))
)))
(assert (forall ((|#$T0@@3| T@U) (|#$R@@3| T@U) ) (! (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) |#$R@@3|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) |a#6#1#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall ((|a#16#0#0| Int) (|a#16#1#0| T@U) ) (! (= (DatatypeCtorId (|#Parsers.ParseResult.Success| |a#16#0#0| |a#16#1#0|)) |##Parsers.ParseResult.Success|)
 :pattern ( (|#Parsers.ParseResult.Success| |a#16#0#0| |a#16#1#0|))
)))
(assert (forall ((|a#20#0#0| Int) (|a#20#1#0| T@U) ) (! (= (Parsers.ParseResult.pos (|#Parsers.ParseResult.Success| |a#20#0#0| |a#20#1#0|)) |a#20#0#0|)
 :pattern ( (|#Parsers.ParseResult.Success| |a#20#0#0| |a#20#1#0|))
)))
(assert (forall ((|a#21#0#0| Int) (|a#21#1#0| T@U) ) (! (= (Parsers.ParseResult.t (|#Parsers.ParseResult.Success| |a#21#0#0| |a#21#1#0|)) |a#21#1#0|)
 :pattern ( (|#Parsers.ParseResult.Success| |a#21#0#0| |a#21#1#0|))
)))
(assert (forall (($o@@0 T@U) ) (! ($Is refType $o@@0 Tclass._System.object?)
 :pattern ( ($Is refType $o@@0 Tclass._System.object?))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((Parsers.ParseResult$T@@12 T@U) ) (! (= (Tclass.Parsers.ParseResult_0 (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@12)) Parsers.ParseResult$T@@12)
 :pattern ( (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@12))
)))
(assert (forall ((x@@5 T@U) (T@@4 T@T) ) (! (= ($Unbox T@@4 ($Box T@@4 x@@5)) x@@5)
 :pattern ( ($Box T@@4 x@@5))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((Parsers.ParseResult$T@@13 T@U) (Parsers.ParseResult.PropagateFailure$U@@2 T@U) (this@@6 T@U) ) (!  (=> (or (|Parsers.ParseResult.PropagateFailure#canCall| Parsers.ParseResult$T@@13 Parsers.ParseResult.PropagateFailure$U@@2 this@@6) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType this@@6 (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@13)) (Parsers.ParseResult.Failure_q this@@6)))) ($Is DatatypeTypeType (Parsers.ParseResult.PropagateFailure Parsers.ParseResult$T@@13 Parsers.ParseResult.PropagateFailure$U@@2 this@@6) (Tclass.Parsers.ParseResult Parsers.ParseResult.PropagateFailure$U@@2)))
 :pattern ( (Parsers.ParseResult.PropagateFailure Parsers.ParseResult$T@@13 Parsers.ParseResult.PropagateFailure$U@@2 this@@6))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((Parsers.Engine.Concat0$L@@0 T@U) (Parsers.Engine.Concat0$R@@0 T@U) (|left#0@@0| T@U) (|right#0@@0| T@U) ) (!  (=> (or (|Parsers.Engine.Concat0#canCall| Parsers.Engine.Concat0$L@@0 Parsers.Engine.Concat0$R@@0 |left#0@@0| |right#0@@0|) (and (< 2 $FunctionContextHeight) (and ($Is HandleTypeType |left#0@@0| (Tclass._System.___hPartialFunc1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@0))) ($Is HandleTypeType |right#0@@0| (Tclass._System.___hPartialFunc1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R@@0)))))) ($Is HandleTypeType (Parsers.Engine.Concat0 Parsers.Engine.Concat0$L@@0 Parsers.Engine.Concat0$R@@0 |left#0@@0| |right#0@@0|) (Tclass._System.___hPartialFunc1 Tclass._System.nat (Tclass.Parsers.ParseResult (Tclass._System.Tuple2 Parsers.Engine.Concat0$L@@0 Parsers.Engine.Concat0$R@@0)))))
 :pattern ( (Parsers.Engine.Concat0 Parsers.Engine.Concat0$L@@0 Parsers.Engine.Concat0$R@@0 |left#0@@0| |right#0@@0|))
))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap@@2 T@U) (Parsers.Engine.Concat0$L@@1 T@U) (Parsers.Engine.Concat0$R@@1 T@U) (|left#0@@1| T@U) (|right#0@@1| T@U) ) (!  (=> (and (or (|Parsers.Engine.Concat0#canCall| Parsers.Engine.Concat0$L@@1 Parsers.Engine.Concat0$R@@1 |left#0@@1| |right#0@@1|) (and (< 2 $FunctionContextHeight) (and (and ($Is HandleTypeType |left#0@@1| (Tclass._System.___hPartialFunc1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@1))) ($IsAlloc HandleTypeType |left#0@@1| (Tclass._System.___hPartialFunc1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@1)) $Heap@@2)) (and ($Is HandleTypeType |right#0@@1| (Tclass._System.___hPartialFunc1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R@@1))) ($IsAlloc HandleTypeType |right#0@@1| (Tclass._System.___hPartialFunc1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R@@1)) $Heap@@2))))) ($IsGoodHeap $Heap@@2)) ($IsAlloc HandleTypeType (Parsers.Engine.Concat0 Parsers.Engine.Concat0$L@@1 Parsers.Engine.Concat0$R@@1 |left#0@@1| |right#0@@1|) (Tclass._System.___hPartialFunc1 Tclass._System.nat (Tclass.Parsers.ParseResult (Tclass._System.Tuple2 Parsers.Engine.Concat0$L@@1 Parsers.Engine.Concat0$R@@1))) $Heap@@2))
 :pattern ( ($IsAlloc HandleTypeType (Parsers.Engine.Concat0 Parsers.Engine.Concat0$L@@1 Parsers.Engine.Concat0$R@@1 |left#0@@1| |right#0@@1|) (Tclass._System.___hPartialFunc1 Tclass._System.nat (Tclass.Parsers.ParseResult (Tclass._System.Tuple2 Parsers.Engine.Concat0$L@@1 Parsers.Engine.Concat0$R@@1))) $Heap@@2))
))))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (! (< (BoxRank |a#5#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((|a#22#0#0| Int) (|a#22#1#0| T@U) ) (! (< (BoxRank |a#22#1#0|) (DtRank (|#Parsers.ParseResult.Success| |a#22#0#0| |a#22#1#0|)))
 :pattern ( (|#Parsers.ParseResult.Success| |a#22#0#0| |a#22#1#0|))
)))
(assert (forall ((|#$T0@@4| T@U) (|#$R@@4| T@U) (|f#0@@0| T@U) ) (! (= ($Is HandleTypeType |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|))  (and ($Is HandleTypeType |f#0@@0| (Tclass._System.___hFunc1 |#$T0@@4| |#$R@@4|)) (forall ((|x0#0| T@U) )  (=> ($IsBox |x0#0| |#$T0@@4|) (|Set#Equal| (Reads1 |#$T0@@4| |#$R@@4| $OneHeap |f#0@@0| |x0#0|) |Set#Empty|)))))
 :pattern ( ($Is HandleTypeType |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)))
)))
(assert (forall ((f@@10 T@U) (ly@@0 T@U) (A@@0 T@T) ) (! (= (AtLayer A@@0 f@@10 ($LS ly@@0)) (AtLayer A@@0 f@@10 ly@@0))
 :pattern ( (AtLayer A@@0 f@@10 ($LS ly@@0)))
)))
(assert (forall ((f@@11 T@U) (t0@@16 T@U) (t1@@14 T@U) (h@@9 T@U) ) (!  (=> ($IsGoodHeap h@@9) (= ($IsAlloc HandleTypeType f@@11 (Tclass._System.___hFunc1 t0@@16 t1@@14) h@@9) (forall ((bx0@@11 T@U) ) (!  (=> (and (and ($IsBox bx0@@11 t0@@16) ($IsAllocBox bx0@@11 t0@@16 h@@9)) (Requires1 t0@@16 t1@@14 h@@9 f@@11 bx0@@11)) (forall ((r@@2 T@U) ) (!  (=> (and (or (not (= r@@2 null)) (not true)) (|Set#IsMember| (Reads1 t0@@16 t1@@14 h@@9 f@@11 bx0@@11) ($Box refType r@@2))) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) h@@9 r@@2) alloc))))
 :pattern ( (|Set#IsMember| (Reads1 t0@@16 t1@@14 h@@9 f@@11 bx0@@11) ($Box refType r@@2)))
)))
 :pattern ( (Apply1 t0@@16 t1@@14 h@@9 f@@11 bx0@@11))
 :pattern ( (Reads1 t0@@16 t1@@14 h@@9 f@@11 bx0@@11))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@11 (Tclass._System.___hFunc1 t0@@16 t1@@14) h@@9))
)))
(assert (forall ((|#$T0@@5| T@U) (|#$R@@5| T@U) (bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 (Tclass._System.___hFunc1 |#$T0@@5| |#$R@@5|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@9)) bx@@9) ($Is HandleTypeType ($Unbox HandleTypeType bx@@9) (Tclass._System.___hFunc1 |#$T0@@5| |#$R@@5|))))
 :pattern ( ($IsBox bx@@9 (Tclass._System.___hFunc1 |#$T0@@5| |#$R@@5|)))
)))
(assert (forall ((|#$T0@@6| T@U) (|#$R@@6| T@U) (bx@@10 T@U) ) (!  (=> ($IsBox bx@@10 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@10)) bx@@10) ($Is HandleTypeType ($Unbox HandleTypeType bx@@10) (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))))
 :pattern ( ($IsBox bx@@10 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|)))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@11 T@U) ) (!  (=> ($IsBox bx@@11 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@11)) bx@@11) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@11) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@11 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert (forall ((d@@8 T@U) (Parsers.ParseResult$T@@14 T@U) ($h@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (Parsers.ParseResult.Success_q d@@8) ($IsAlloc DatatypeTypeType d@@8 (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@14) $h@@6))) ($IsAllocBox (Parsers.ParseResult.t d@@8) Parsers.ParseResult$T@@14 $h@@6))
 :pattern ( ($IsAllocBox (Parsers.ParseResult.t d@@8) Parsers.ParseResult$T@@14 $h@@6))
)))
(assert (forall ((|l#0@@3| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3@@0| Bool) ($o@@1 T@U) ($f T@U) ) (! (= (U_2_bool (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@3| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@1 $f))  (=> (and (or (not (= $o@@1 |l#0@@3|)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |l#1@@0| $o@@1) |l#2@@0|)))) |l#3@@0|))
 :pattern ( (MapType0Select refType FieldType boolType (|lambda#0| |l#0@@3| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@1 $f))
)))
(assert (forall ((|#$T0@@7| T@U) (|#$R@@7| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@7|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@7|)) |tytagFamily$_#Func1|))
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@7|))
)))
(assert (forall ((|#$T0@@8| T@U) (|#$R@@8| T@U) ) (!  (and (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|)) Tagclass._System.___hPartialFunc1) (= (TagFamily (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|)) |tytagFamily$_#PartialFunc1|))
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall ((t0@@17 T@U) (t1@@15 T@U) (heap@@3 T@U) (f@@12 T@U) (bx0@@12 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@3) (and ($IsBox bx0@@12 t0@@17) ($Is HandleTypeType f@@12 (Tclass._System.___hFunc1 t0@@17 t1@@15)))) (|Set#Equal| (Reads1 t0@@17 t1@@15 $OneHeap f@@12 bx0@@12) |Set#Empty|)) (= (Requires1 t0@@17 t1@@15 $OneHeap f@@12 bx0@@12) (Requires1 t0@@17 t1@@15 heap@@3 f@@12 bx0@@12)))
 :pattern ( (Requires1 t0@@17 t1@@15 $OneHeap f@@12 bx0@@12) ($IsGoodHeap heap@@3))
 :pattern ( (Requires1 t0@@17 t1@@15 heap@@3 f@@12 bx0@@12))
)))
(assert (forall ((d@@9 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@9)) (DtRank d@@9))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@9)))
)))
(assert (forall ((bx@@12 T@U) (t@@5 T@U) ) (!  (=> ($IsBox bx@@12 (TSet t@@5)) (and (= ($Box SetType ($Unbox SetType bx@@12)) bx@@12) ($Is SetType ($Unbox SetType bx@@12) (TSet t@@5))))
 :pattern ( ($IsBox bx@@12 (TSet t@@5)))
)))
(assert (forall ((Parsers.ParseResult$T@@15 T@U) (bx@@13 T@U) ) (!  (=> ($IsBox bx@@13 (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@15)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@13)) bx@@13) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@13) (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@15))))
 :pattern ( ($IsBox bx@@13 (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@15)))
)))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (= |#Parsers.ParseResult.Failure| (Lit DatatypeTypeType |#Parsers.ParseResult.Failure|)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((Parsers.ParseResult$T@@16 T@U) (this@@7 T@U) ) (!  (=> (or (|Parsers.ParseResult.Extract#canCall| Parsers.ParseResult$T@@16 (Lit DatatypeTypeType this@@7)) (and (< 0 $FunctionContextHeight) (and ($Is DatatypeTypeType this@@7 (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@16)) (U_2_bool (Lit boolType (bool_2_U (Parsers.ParseResult.Success_q (Lit DatatypeTypeType this@@7)))))))) (= (Parsers.ParseResult.Extract Parsers.ParseResult$T@@16 (Lit DatatypeTypeType this@@7)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| ($Box intType (int_2_U (LitInt (Parsers.ParseResult.pos (Lit DatatypeTypeType this@@7))))) (Lit BoxType (Parsers.ParseResult.t (Lit DatatypeTypeType this@@7)))))))
 :weight 3
 :pattern ( (Parsers.ParseResult.Extract Parsers.ParseResult$T@@16 (Lit DatatypeTypeType this@@7)))
))))
(assert (forall ((s@@0 T@U) ) (! ($Is SetType (SetRef_to_SetBox s@@0) (TSet Tclass._System.object?))
 :pattern ( (SetRef_to_SetBox s@@0))
)))
(assert (forall ((|l#0@@4| T@U) (|l#1@@1| T@U) (|l#2@@1| T@U) (|l#3@@1| T@U) (|l#4@@0| T@U) (|l#5@@0| T@U) (|l#6@@0| T@U) (|l#7@@0| T@U) (|l#8@@0| T@U) (|l#9@@0| T@U) (|l#10@@0| T@U) (|l#11@@0| T@U) (|l#12@@0| T@U) (|$l#0#heap#0@@0| T@U) (|$l#0#pos#0@@0| T@U) ) (! (= (U_2_bool (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType (|lambda#3| |l#0@@4| |l#1@@1| |l#2@@1| |l#3@@1| |l#4@@0| |l#5@@0| |l#6@@0| |l#7@@0| |l#8@@0| |l#9@@0| |l#10@@0| |l#11@@0| |l#12@@0|) |$l#0#heap#0@@0| |$l#0#pos#0@@0|))  (and ($IsBox |$l#0#pos#0@@0| |l#0@@4|) (and (Requires1 |l#1@@1| |l#2@@1| |$l#0#heap#0@@0| |l#3@@1| |$l#0#pos#0@@0|) (=> (Parsers.ParseResult.Success_q ($Unbox DatatypeTypeType (Apply1 |l#4@@0| |l#5@@0| |$l#0#heap#0@@0| |l#6@@0| ($Box intType ($Unbox intType |$l#0#pos#0@@0|))))) (Requires1 |l#7@@0| |l#8@@0| |$l#0#heap#0@@0| |l#9@@0| ($Box intType (int_2_U (Parsers.ParseResult.pos ($Unbox DatatypeTypeType (Apply1 |l#10@@0| |l#11@@0| |$l#0#heap#0@@0| |l#12@@0| ($Box intType ($Unbox intType |$l#0#pos#0@@0|))))))))))))
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType boolType (|lambda#3| |l#0@@4| |l#1@@1| |l#2@@1| |l#3@@1| |l#4@@0| |l#5@@0| |l#6@@0| |l#7@@0| |l#8@@0| |l#9@@0| |l#10@@0| |l#11@@0| |l#12@@0|) |$l#0#heap#0@@0| |$l#0#pos#0@@0|))
)))
(assert  (=> (<= 0 $FunctionContextHeight) (forall ((Parsers.ParseResult$T@@17 T@U) (this@@8 T@U) ) (!  (=> (or (|Parsers.ParseResult.IsFailure#canCall| Parsers.ParseResult$T@@17 this@@8) (and (< 0 $FunctionContextHeight) ($Is DatatypeTypeType this@@8 (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@17)))) (= (Parsers.ParseResult.IsFailure Parsers.ParseResult$T@@17 this@@8) (Parsers.ParseResult.Failure_q this@@8)))
 :pattern ( (Parsers.ParseResult.IsFailure Parsers.ParseResult$T@@17 this@@8))
))))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (! (= (|Set#Equal| a@@1 b@@1) (forall ((o@@7 T@U) ) (! (= (|Set#IsMember| a@@1 o@@7) (|Set#IsMember| b@@1 o@@7))
 :pattern ( (|Set#IsMember| a@@1 o@@7))
 :pattern ( (|Set#IsMember| b@@1 o@@7))
)))
 :pattern ( (|Set#Equal| a@@1 b@@1))
)))
(assert (forall ((d@@10 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@7 T@U) ) (!  (=> (and ($IsGoodHeap $h@@7) (and (_System.Tuple2.___hMake2_q d@@10) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@10 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@7)
 :pattern ( ($IsAlloc DatatypeTypeType d@@10 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@7))
)))) ($IsAllocBox (_System.Tuple2._0 d@@10) |_System._tuple#2$T0@@6| $h@@7))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@10) |_System._tuple#2$T0@@6| $h@@7))
)))
(assert (forall ((d@@11 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@8 T@U) ) (!  (=> (and ($IsGoodHeap $h@@8) (and (_System.Tuple2.___hMake2_q d@@11) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@11 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@8)
 :pattern ( ($IsAlloc DatatypeTypeType d@@11 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@8))
)))) ($IsAllocBox (_System.Tuple2._1 d@@11) |_System._tuple#2$T1@@7| $h@@8))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@11) |_System._tuple#2$T1@@7| $h@@8))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((|a#19#0#0| Int) (|a#19#1#0| T@U) ) (! (= (|#Parsers.ParseResult.Success| (LitInt |a#19#0#0|) (Lit BoxType |a#19#1#0|)) (Lit DatatypeTypeType (|#Parsers.ParseResult.Success| |a#19#0#0| |a#19#1#0|)))
 :pattern ( (|#Parsers.ParseResult.Success| (LitInt |a#19#0#0|) (Lit BoxType |a#19#1#0|)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((Parsers.Engine.Concat0$L@@2 T@U) (Parsers.Engine.Concat0$R@@2 T@U) ($Heap@@3 T@U) (|left#0@@2| T@U) (|right#0@@2| T@U) ) (!  (=> (or (|Parsers.Engine.Concat0#canCall| Parsers.Engine.Concat0$L@@2 Parsers.Engine.Concat0$R@@2 |left#0@@2| |right#0@@2|) (and (< 2 $FunctionContextHeight) (and (and ($IsGoodHeap $Heap@@3) ($Is HandleTypeType |left#0@@2| (Tclass._System.___hPartialFunc1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@2)))) ($Is HandleTypeType |right#0@@2| (Tclass._System.___hPartialFunc1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R@@2)))))) (and (forall ((|$l#1#pos#0| T@U) (|$l#1#heap#0| T@U) )  (=> (and (<= (LitInt 0) (U_2_int |$l#1#pos#0|)) ($IsGoodHeap |$l#1#heap#0|)) (and (and true (=> (Requires1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@2) $Heap@@3 |left#0@@2| ($Box intType |$l#1#pos#0|)) (=> (Parsers.ParseResult.Success_q ($Unbox DatatypeTypeType (Apply1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@2) $Heap@@3 |left#0@@2| ($Box intType |$l#1#pos#0|)))) true))) (=> (and (Requires1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@2) $Heap@@3 |left#0@@2| ($Box intType |$l#1#pos#0|)) (=> (Parsers.ParseResult.Success_q ($Unbox DatatypeTypeType (Apply1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@2) $Heap@@3 |left#0@@2| ($Box intType |$l#1#pos#0|)))) (Requires1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R@@2) $Heap@@3 |right#0@@2| ($Box intType (int_2_U (Parsers.ParseResult.pos ($Unbox DatatypeTypeType (Apply1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@2) $Heap@@3 |left#0@@2| ($Box intType |$l#1#pos#0|))))))))) (let ((|valueOrError0#1| ($Unbox DatatypeTypeType (Apply1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@2) |$l#1#heap#0| |left#0@@2| ($Box intType |$l#1#pos#0|)))))
 (and (and (|Parsers.ParseResult.IsFailure#canCall| Parsers.Engine.Concat0$L@@2 |valueOrError0#1|) (=> (Parsers.ParseResult.IsFailure Parsers.Engine.Concat0$L@@2 |valueOrError0#1|) (|Parsers.ParseResult.PropagateFailure#canCall| Parsers.Engine.Concat0$L@@2 (Tclass._System.Tuple2 Parsers.Engine.Concat0$L@@2 Parsers.Engine.Concat0$R@@2) |valueOrError0#1|))) (=> (not (Parsers.ParseResult.IsFailure Parsers.Engine.Concat0$L@@2 |valueOrError0#1|)) (and (|Parsers.ParseResult.Extract#canCall| Parsers.Engine.Concat0$L@@2 |valueOrError0#1|) (let ((|pos#3| (U_2_int ($Unbox intType (_System.Tuple2._0 (Parsers.ParseResult.Extract Parsers.Engine.Concat0$L@@2 |valueOrError0#1|))))))
(let ((|valueOrError1#1| ($Unbox DatatypeTypeType (Apply1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R@@2) |$l#1#heap#0| |right#0@@2| ($Box intType (int_2_U |pos#3|))))))
 (and (and (|Parsers.ParseResult.IsFailure#canCall| Parsers.Engine.Concat0$R@@2 |valueOrError1#1|) (=> (Parsers.ParseResult.IsFailure Parsers.Engine.Concat0$R@@2 |valueOrError1#1|) (|Parsers.ParseResult.PropagateFailure#canCall| Parsers.Engine.Concat0$R@@2 (Tclass._System.Tuple2 Parsers.Engine.Concat0$L@@2 Parsers.Engine.Concat0$R@@2) |valueOrError1#1|))) (=> (not (Parsers.ParseResult.IsFailure Parsers.Engine.Concat0$R@@2 |valueOrError1#1|)) (|Parsers.ParseResult.Extract#canCall| Parsers.Engine.Concat0$R@@2 |valueOrError1#1|))))))))))))) (= (Parsers.Engine.Concat0 Parsers.Engine.Concat0$L@@2 Parsers.Engine.Concat0$R@@2 |left#0@@2| |right#0@@2|) (Lit HandleTypeType (AtLayer HandleTypeType (|lambda#6| (Handle1 (|lambda#2| Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@2) |left#0@@2| Parsers.Engine.Concat0$L@@2 Parsers.Engine.Concat0$L@@2 (Tclass._System.Tuple2 Parsers.Engine.Concat0$L@@2 Parsers.Engine.Concat0$R@@2) Parsers.Engine.Concat0$L@@2 Parsers.Engine.Concat0$L@@2 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R@@2) |right#0@@2| Parsers.Engine.Concat0$R@@2 Parsers.Engine.Concat0$R@@2 (Tclass._System.Tuple2 Parsers.Engine.Concat0$L@@2 Parsers.Engine.Concat0$R@@2) Parsers.Engine.Concat0$R@@2 Parsers.Engine.Concat0$R@@2) (|lambda#3| Tclass._System.nat Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@2) |left#0@@2| Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@2) |left#0@@2| Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R@@2) |right#0@@2| Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@2) |left#0@@2|) (|lambda#5| (SetRef_to_SetBox (|lambda#4| false))))) ($LS $LZ))))))
 :pattern ( (Parsers.Engine.Concat0 Parsers.Engine.Concat0$L@@2 Parsers.Engine.Concat0$R@@2 |left#0@@2| |right#0@@2|) ($IsGoodHeap $Heap@@3))
))))
(assert (forall ((x@@6 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@6))) (Lit BoxType ($Box intType (int_2_U x@@6))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@6))))
)))
(assert (forall ((x@@7 T@U) (T@@5 T@T) ) (! (= ($Box T@@5 (Lit T@@5 x@@7)) (Lit BoxType ($Box T@@5 x@@7)))
 :pattern ( ($Box T@@5 (Lit T@@5 x@@7)))
)))
(assert (forall ((Parsers.ParseResult$T@@18 T@U) (|a#18#0#0@@0| Int) (|a#18#1#0@@0| T@U) ($h@@9 T@U) ) (!  (=> ($IsGoodHeap $h@@9) (= ($IsAlloc DatatypeTypeType (|#Parsers.ParseResult.Success| |a#18#0#0@@0| |a#18#1#0@@0|) (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@18) $h@@9)  (and ($IsAlloc intType (int_2_U |a#18#0#0@@0|) Tclass._System.nat $h@@9) ($IsAllocBox |a#18#1#0@@0| Parsers.ParseResult$T@@18 $h@@9))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#Parsers.ParseResult.Success| |a#18#0#0@@0| |a#18#1#0@@0|) (Tclass.Parsers.ParseResult Parsers.ParseResult$T@@18) $h@@9))
)))
(assert (forall ((|l#0@@5| T@U) (|$l#0#heap#0@@1| T@U) (|$l#0#pos#0@@1| T@U) ) (! (= (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType (|lambda#5| |l#0@@5|) |$l#0#heap#0@@1| |$l#0#pos#0@@1|) |l#0@@5|)
 :pattern ( (MapType0Select (MapType1Type refType (MapType1Type FieldType BoxType)) BoxType SetType (|lambda#5| |l#0@@5|) |$l#0#heap#0@@1| |$l#0#pos#0@@1|))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun Parsers.Engine.Concat0$R@@3 () T@U)
(declare-fun |valueOrError1#Z#0@0| () T@U)
(declare-fun |$lambdaHeap#0@0| () T@U)
(declare-fun |let#3#0#0| () T@U)
(declare-fun |pos#Z#1@0| () Int)
(declare-fun |r#Z#0@0| () T@U)
(declare-fun |lambdaResult#0| () T@U)
(declare-fun |l#Z#0@0| () T@U)
(declare-fun Parsers.Engine.Concat0$L@@3 () T@U)
(declare-fun |valueOrError0#Z#0@0| () T@U)
(declare-fun |let#1#0#0| () T@U)
(declare-fun |pos#Z#0@0| () Int)
(declare-fun |right#0@@3| () T@U)
(declare-fun |let#2#0#0| () T@U)
(declare-fun |left#0@@3| () T@U)
(declare-fun |pos#8@0| () Int)
(declare-fun |let#0#0#0| () T@U)
(declare-fun |##x0#1@0| () Int)
(declare-fun |$_Frame#l0@0| () T@U)
(declare-fun $Heap@@4 () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 29) (let ((anon14_correct true))
(let ((anon24_Else_correct  (=> (and (not (Parsers.ParseResult.IsFailure Parsers.Engine.Concat0$R@@3 |valueOrError1#Z#0@0|)) ($IsAllocBox ($Box DatatypeTypeType |valueOrError1#Z#0@0|) (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R@@3) |$lambdaHeap#0@0|)) (and (=> (= (ControlFlow 0 10) (- 0 11)) (Parsers.ParseResult.Success_q |valueOrError1#Z#0@0|)) (=> (Parsers.ParseResult.Success_q |valueOrError1#Z#0@0|) (=> (and (|Parsers.ParseResult.Extract#canCall| Parsers.Engine.Concat0$R@@3 |valueOrError1#Z#0@0|) (_System.Tuple2.___hMake2_q (Parsers.ParseResult.Extract Parsers.Engine.Concat0$R@@3 |valueOrError1#Z#0@0|))) (=> (and (and (and (= |let#3#0#0| (Parsers.ParseResult.Extract Parsers.Engine.Concat0$R@@3 |valueOrError1#Z#0@0|)) (|Parsers.ParseResult.Extract#canCall| Parsers.Engine.Concat0$R@@3 |valueOrError1#Z#0@0|)) (and ($Is DatatypeTypeType |let#3#0#0| (Tclass._System.Tuple2 Tclass._System.nat Parsers.Engine.Concat0$R@@3)) (_System.Tuple2.___hMake2_q |let#3#0#0|))) (and (and (= (|#_System._tuple#2._#Make2| ($Box intType (int_2_U |pos#Z#1@0|)) |r#Z#0@0|) |let#3#0#0|) (= |lambdaResult#0| (|#Parsers.ParseResult.Success| |pos#Z#1@0| ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| |l#Z#0@0| |r#Z#0@0|))))) (and ($Is DatatypeTypeType |lambdaResult#0| (Tclass.Parsers.ParseResult (Tclass._System.Tuple2 Parsers.Engine.Concat0$L@@3 Parsers.Engine.Concat0$R@@3))) (= (ControlFlow 0 10) 3)))) anon14_correct)))))))
(let ((anon24_Then_correct  (=> (and (Parsers.ParseResult.IsFailure Parsers.Engine.Concat0$R@@3 |valueOrError1#Z#0@0|) ($IsAllocBox ($Box DatatypeTypeType |valueOrError1#Z#0@0|) (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R@@3) |$lambdaHeap#0@0|)) (and (=> (= (ControlFlow 0 8) (- 0 9)) (Parsers.ParseResult.Failure_q |valueOrError1#Z#0@0|)) (=> (and (Parsers.ParseResult.Failure_q |valueOrError1#Z#0@0|) (|Parsers.ParseResult.PropagateFailure#canCall| Parsers.Engine.Concat0$R@@3 (Tclass._System.Tuple2 Parsers.Engine.Concat0$L@@3 Parsers.Engine.Concat0$R@@3) |valueOrError1#Z#0@0|)) (=> (and (and (= |lambdaResult#0| (Parsers.ParseResult.PropagateFailure Parsers.Engine.Concat0$R@@3 (Tclass._System.Tuple2 Parsers.Engine.Concat0$L@@3 Parsers.Engine.Concat0$R@@3) |valueOrError1#Z#0@0|)) (|Parsers.ParseResult.PropagateFailure#canCall| Parsers.Engine.Concat0$R@@3 (Tclass._System.Tuple2 Parsers.Engine.Concat0$L@@3 Parsers.Engine.Concat0$R@@3) |valueOrError1#Z#0@0|)) (and ($Is DatatypeTypeType |lambdaResult#0| (Tclass.Parsers.ParseResult (Tclass._System.Tuple2 Parsers.Engine.Concat0$L@@3 Parsers.Engine.Concat0$R@@3))) (= (ControlFlow 0 8) 3))) anon14_correct))))))
(let ((anon23_Else_correct  (=> (and (not (Parsers.ParseResult.IsFailure Parsers.Engine.Concat0$L@@3 |valueOrError0#Z#0@0|)) ($IsAllocBox ($Box DatatypeTypeType |valueOrError0#Z#0@0|) (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0|)) (and (=> (= (ControlFlow 0 12) (- 0 14)) (Parsers.ParseResult.Success_q |valueOrError0#Z#0@0|)) (=> (and (and (and (Parsers.ParseResult.Success_q |valueOrError0#Z#0@0|) (|Parsers.ParseResult.Extract#canCall| Parsers.Engine.Concat0$L@@3 |valueOrError0#Z#0@0|)) (and (_System.Tuple2.___hMake2_q (Parsers.ParseResult.Extract Parsers.Engine.Concat0$L@@3 |valueOrError0#Z#0@0|)) (= |let#1#0#0| (Parsers.ParseResult.Extract Parsers.Engine.Concat0$L@@3 |valueOrError0#Z#0@0|)))) (and (and (|Parsers.ParseResult.Extract#canCall| Parsers.Engine.Concat0$L@@3 |valueOrError0#Z#0@0|) ($Is DatatypeTypeType |let#1#0#0| (Tclass._System.Tuple2 Tclass._System.nat Parsers.Engine.Concat0$L@@3))) (and (_System.Tuple2.___hMake2_q |let#1#0#0|) (= (|#_System._tuple#2._#Make2| ($Box intType (int_2_U |pos#Z#0@0|)) |l#Z#0@0|) |let#1#0#0|)))) (and (=> (= (ControlFlow 0 12) (- 0 13)) (Requires1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R@@3) |$lambdaHeap#0@0| |right#0@@3| ($Box intType (int_2_U |pos#Z#0@0|)))) (=> (Requires1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R@@3) |$lambdaHeap#0@0| |right#0@@3| ($Box intType (int_2_U |pos#Z#0@0|))) (=> (= |let#2#0#0| ($Unbox DatatypeTypeType (Apply1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R@@3) |$lambdaHeap#0@0| |right#0@@3| ($Box intType (int_2_U |pos#Z#0@0|))))) (=> (and (and ($Is DatatypeTypeType |let#2#0#0| (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R@@3)) (= |valueOrError1#Z#0@0| |let#2#0#0|)) (and ($IsAllocBox ($Box DatatypeTypeType |valueOrError1#Z#0@0|) (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R@@3) |$lambdaHeap#0@0|) (|Parsers.ParseResult.IsFailure#canCall| Parsers.Engine.Concat0$R@@3 |valueOrError1#Z#0@0|))) (and (=> (= (ControlFlow 0 12) 8) anon24_Then_correct) (=> (= (ControlFlow 0 12) 10) anon24_Else_correct)))))))))))
(let ((anon23_Then_correct  (=> (and (Parsers.ParseResult.IsFailure Parsers.Engine.Concat0$L@@3 |valueOrError0#Z#0@0|) ($IsAllocBox ($Box DatatypeTypeType |valueOrError0#Z#0@0|) (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0|)) (and (=> (= (ControlFlow 0 6) (- 0 7)) (Parsers.ParseResult.Failure_q |valueOrError0#Z#0@0|)) (=> (and (Parsers.ParseResult.Failure_q |valueOrError0#Z#0@0|) (|Parsers.ParseResult.PropagateFailure#canCall| Parsers.Engine.Concat0$L@@3 (Tclass._System.Tuple2 Parsers.Engine.Concat0$L@@3 Parsers.Engine.Concat0$R@@3) |valueOrError0#Z#0@0|)) (=> (and (and (= |lambdaResult#0| (Parsers.ParseResult.PropagateFailure Parsers.Engine.Concat0$L@@3 (Tclass._System.Tuple2 Parsers.Engine.Concat0$L@@3 Parsers.Engine.Concat0$R@@3) |valueOrError0#Z#0@0|)) (|Parsers.ParseResult.PropagateFailure#canCall| Parsers.Engine.Concat0$L@@3 (Tclass._System.Tuple2 Parsers.Engine.Concat0$L@@3 Parsers.Engine.Concat0$R@@3) |valueOrError0#Z#0@0|)) (and ($Is DatatypeTypeType |lambdaResult#0| (Tclass.Parsers.ParseResult (Tclass._System.Tuple2 Parsers.Engine.Concat0$L@@3 Parsers.Engine.Concat0$R@@3))) (= (ControlFlow 0 6) 3))) anon14_correct))))))
(let ((anon22_Then_correct  (=> (and (Requires1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0| |left#0@@3| ($Box intType (int_2_U |pos#8@0|))) (=> (Parsers.ParseResult.Success_q ($Unbox DatatypeTypeType (Apply1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0| |left#0@@3| ($Box intType (int_2_U |pos#8@0|))))) (Requires1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R@@3) |$lambdaHeap#0@0| |right#0@@3| ($Box intType (int_2_U (Parsers.ParseResult.pos ($Unbox DatatypeTypeType (Apply1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0| |left#0@@3| ($Box intType (int_2_U |pos#8@0|)))))))))) (and (=> (= (ControlFlow 0 15) (- 0 16)) (Requires1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0| |left#0@@3| ($Box intType (int_2_U |pos#8@0|)))) (=> (Requires1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0| |left#0@@3| ($Box intType (int_2_U |pos#8@0|))) (=> (= |let#0#0#0| ($Unbox DatatypeTypeType (Apply1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0| |left#0@@3| ($Box intType (int_2_U |pos#8@0|))))) (=> (and (and ($Is DatatypeTypeType |let#0#0#0| (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3)) (= |valueOrError0#Z#0@0| |let#0#0#0|)) (and ($IsAllocBox ($Box DatatypeTypeType |valueOrError0#Z#0@0|) (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0|) (|Parsers.ParseResult.IsFailure#canCall| Parsers.Engine.Concat0$L@@3 |valueOrError0#Z#0@0|))) (and (=> (= (ControlFlow 0 15) 6) anon23_Then_correct) (=> (= (ControlFlow 0 15) 12) anon23_Else_correct)))))))))
(let ((anon22_Else_correct  (=> (and (not (and (Requires1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0| |left#0@@3| ($Box intType (int_2_U |pos#8@0|))) (=> (Parsers.ParseResult.Success_q ($Unbox DatatypeTypeType (Apply1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0| |left#0@@3| ($Box intType (int_2_U |pos#8@0|))))) (Requires1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R@@3) |$lambdaHeap#0@0| |right#0@@3| ($Box intType (int_2_U (Parsers.ParseResult.pos ($Unbox DatatypeTypeType (Apply1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0| |left#0@@3| ($Box intType (int_2_U |pos#8@0|))))))))))) (= (ControlFlow 0 5) 3)) anon14_correct)))
(let ((anon21_Else_correct  (=> (not (Parsers.ParseResult.Success_q ($Unbox DatatypeTypeType (Apply1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0| |left#0@@3| ($Box intType (int_2_U |pos#8@0|)))))) (and (=> (= (ControlFlow 0 22) 15) anon22_Then_correct) (=> (= (ControlFlow 0 22) 5) anon22_Else_correct)))))
(let ((anon21_Then_correct  (=> (and (Parsers.ParseResult.Success_q ($Unbox DatatypeTypeType (Apply1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0| |left#0@@3| ($Box intType (int_2_U |pos#8@0|))))) ($IsAllocBox ($Box HandleTypeType |right#0@@3|) (Tclass._System.___hFunc1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R@@3)) |$lambdaHeap#0@0|)) (and (=> (= (ControlFlow 0 18) (- 0 21)) (Requires1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0| |left#0@@3| ($Box intType (int_2_U |pos#8@0|)))) (=> (Requires1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0| |left#0@@3| ($Box intType (int_2_U |pos#8@0|))) (and (=> (= (ControlFlow 0 18) (- 0 20)) (Parsers.ParseResult.Success_q ($Unbox DatatypeTypeType (Apply1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0| |left#0@@3| ($Box intType (int_2_U |pos#8@0|)))))) (=> (Parsers.ParseResult.Success_q ($Unbox DatatypeTypeType (Apply1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0| |left#0@@3| ($Box intType (int_2_U |pos#8@0|))))) (=> (and (= |##x0#1@0| (Parsers.ParseResult.pos ($Unbox DatatypeTypeType (Apply1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0| |left#0@@3| ($Box intType (int_2_U |pos#8@0|)))))) ($IsAlloc intType (int_2_U |##x0#1@0|) Tclass._System.nat |$lambdaHeap#0@0|)) (and (=> (= (ControlFlow 0 18) (- 0 19)) (forall (($o@@2 T@U) ($f@@0 T@U) )  (=> (and (and (or (not (= $o@@2 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |$lambdaHeap#0@0| $o@@2) alloc)))) (|Set#IsMember| (Reads1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R@@3) |$lambdaHeap#0@0| |right#0@@3| ($Box intType (int_2_U |##x0#1@0|))) ($Box refType $o@@2))) (U_2_bool (MapType0Select refType FieldType boolType |$_Frame#l0@0| $o@@2 $f@@0))))) (=> (forall (($o@@3 T@U) ($f@@1 T@U) )  (=> (and (and (or (not (= $o@@3 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |$lambdaHeap#0@0| $o@@3) alloc)))) (|Set#IsMember| (Reads1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R@@3) |$lambdaHeap#0@0| |right#0@@3| ($Box intType (int_2_U |##x0#1@0|))) ($Box refType $o@@3))) (U_2_bool (MapType0Select refType FieldType boolType |$_Frame#l0@0| $o@@3 $f@@1)))) (and (=> (= (ControlFlow 0 18) 15) anon22_Then_correct) (=> (= (ControlFlow 0 18) 5) anon22_Else_correct))))))))))))
(let ((anon20_Then_correct  (=> (Requires1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0| |left#0@@3| ($Box intType (int_2_U |pos#8@0|))) (and (=> (= (ControlFlow 0 23) (- 0 24)) (Requires1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0| |left#0@@3| ($Box intType (int_2_U |pos#8@0|)))) (=> (Requires1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0| |left#0@@3| ($Box intType (int_2_U |pos#8@0|))) (and (=> (= (ControlFlow 0 23) 18) anon21_Then_correct) (=> (= (ControlFlow 0 23) 22) anon21_Else_correct)))))))
(let ((anon20_Else_correct  (=> (not (Requires1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0| |left#0@@3| ($Box intType (int_2_U |pos#8@0|)))) (and (=> (= (ControlFlow 0 17) 15) anon22_Then_correct) (=> (= (ControlFlow 0 17) 5) anon22_Else_correct)))))
(let ((anon19_Then_correct  (=> (and (and (<= (LitInt 0) |pos#8@0|) (= |$_Frame#l0@0| (|lambda#0| null |$lambdaHeap#0@0| alloc false))) (and ($IsAllocBox ($Box HandleTypeType |left#0@@3|) (Tclass._System.___hFunc1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3)) |$lambdaHeap#0@0|) ($IsAlloc intType (int_2_U |pos#8@0|) Tclass._System.nat |$lambdaHeap#0@0|))) (and (=> (= (ControlFlow 0 25) (- 0 26)) (forall (($o@@4 T@U) ($f@@2 T@U) )  (=> (and (and (or (not (= $o@@4 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |$lambdaHeap#0@0| $o@@4) alloc)))) (|Set#IsMember| (Reads1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0| |left#0@@3| ($Box intType (int_2_U |pos#8@0|))) ($Box refType $o@@4))) (U_2_bool (MapType0Select refType FieldType boolType |$_Frame#l0@0| $o@@4 $f@@2))))) (=> (forall (($o@@5 T@U) ($f@@3 T@U) )  (=> (and (and (or (not (= $o@@5 null)) (not true)) (U_2_bool ($Unbox boolType (MapType1Select FieldType BoxType (MapType1Select refType (MapType1Type FieldType BoxType) |$lambdaHeap#0@0| $o@@5) alloc)))) (|Set#IsMember| (Reads1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3) |$lambdaHeap#0@0| |left#0@@3| ($Box intType (int_2_U |pos#8@0|))) ($Box refType $o@@5))) (U_2_bool (MapType0Select refType FieldType boolType |$_Frame#l0@0| $o@@5 $f@@3)))) (and (=> (= (ControlFlow 0 25) 23) anon20_Then_correct) (=> (= (ControlFlow 0 25) 17) anon20_Else_correct)))))))
(let ((anon19_Else_correct  (=> (and (< |pos#8@0| (LitInt 0)) (= (ControlFlow 0 4) 3)) anon14_correct)))
(let ((anon18_Then_correct  (=> (and ($IsGoodHeap |$lambdaHeap#0@0|) (or (= $Heap@@4 |$lambdaHeap#0@0|) ($HeapSucc $Heap@@4 |$lambdaHeap#0@0|))) (and (=> (= (ControlFlow 0 27) 25) anon19_Then_correct) (=> (= (ControlFlow 0 27) 4) anon19_Else_correct)))))
(let ((anon18_Else_correct true))
(let ((anon17_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap@@4 alloc false)) (and (and (=> (= (ControlFlow 0 28) 1) anon17_Then_correct) (=> (= (ControlFlow 0 28) 27) anon18_Then_correct)) (=> (= (ControlFlow 0 28) 2) anon18_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@4) ($IsHeapAnchor $Heap@@4)) (=> (and (and ($Is HandleTypeType |left#0@@3| (Tclass._System.___hPartialFunc1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$L@@3))) ($Is HandleTypeType |right#0@@3| (Tclass._System.___hPartialFunc1 Tclass._System.nat (Tclass.Parsers.ParseResult Parsers.Engine.Concat0$R@@3)))) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 29) 28))) anon0_correct))))
PreconditionGeneratedEntry_correct)))))))))))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
