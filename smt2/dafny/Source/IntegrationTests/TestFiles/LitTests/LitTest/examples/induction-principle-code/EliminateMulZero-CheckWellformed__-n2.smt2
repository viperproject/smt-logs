(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun alloc () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass.AST.Expr () T@U)
(declare-fun Tagclass.AST.Expr__Raw () T@U)
(declare-fun Tagclass.AST.BinOp () T@U)
(declare-fun |##AST.BinOp.Add| () T@U)
(declare-fun |##AST.BinOp.Sub| () T@U)
(declare-fun |##AST.BinOp.Mul| () T@U)
(declare-fun |##AST.Expr_Raw.Var| () T@U)
(declare-fun |##AST.Expr_Raw.Literal| () T@U)
(declare-fun |##AST.Expr_Raw.Bind| () T@U)
(declare-fun |##AST.Expr_Raw.Assign| () T@U)
(declare-fun |##AST.Expr_Raw.If| () T@U)
(declare-fun |##AST.Expr_Raw.Op| () T@U)
(declare-fun |##AST.Expr_Raw.Seq| () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1| () T@U)
(declare-fun tytagFamily$Expr () T@U)
(declare-fun tytagFamily$Expr_Raw () T@U)
(declare-fun tytagFamily$BinOp () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |#AST.Expr_Raw.Bind| (T@U T@U T@U) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |#AST.Expr_Raw.Assign| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun |#AST.Expr_Raw.If| (T@U T@U T@U) T@U)
(declare-fun Tclass.AST.Expr__Raw () T@U)
(declare-fun |#AST.Expr_Raw.Op| (T@U T@U T@U) T@U)
(declare-fun Tclass.AST.BinOp () T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |AST.Expr__Raw#Equal| (T@U T@U) Bool)
(declare-fun AST.Expr__Raw.Literal_q (T@U) Bool)
(declare-fun AST.Expr__Raw.n (T@U) Int)
(declare-fun |#AST.Expr_Raw.Var| (T@U) T@U)
(declare-fun |#AST.Expr_Raw.Seq| (T@U) T@U)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun |lambda#6| (T@U T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun AST.Expr__Raw.bvars (T@U) T@U)
(declare-fun AST.Expr__Raw.bvals (T@U) T@U)
(declare-fun AST.Expr__Raw.body (T@U) T@U)
(declare-fun AST.Expr__Raw.cond (T@U) T@U)
(declare-fun AST.Expr__Raw.thn (T@U) T@U)
(declare-fun AST.Expr__Raw.els (T@U) T@U)
(declare-fun AST.Expr__Raw.op (T@U) T@U)
(declare-fun AST.Expr__Raw.oe1 (T@U) T@U)
(declare-fun AST.Expr__Raw.oe2 (T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun AST.Expr__Raw.WellFormed__Single (T@U) Bool)
(declare-fun |AST.Expr__Raw.WellFormed__Single#canCall| (T@U) Bool)
(declare-fun AST.Expr__Raw.Var_q (T@U) Bool)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun AST.Expr__Raw.Bind_q (T@U) Bool)
(declare-fun AST.Expr__Raw.Assign_q (T@U) Bool)
(declare-fun AST.Expr__Raw.avals (T@U) T@U)
(declare-fun AST.Expr__Raw.avars (T@U) T@U)
(declare-fun AST.Expr__Raw.If_q (T@U) Bool)
(declare-fun AST.Expr__Raw.Op_q (T@U) Bool)
(declare-fun |Set#Empty| () T@U)
(declare-fun |Seq#Empty| () T@U)
(declare-fun |#AST.BinOp.Add| () T@U)
(declare-fun |#AST.BinOp.Sub| () T@U)
(declare-fun |#AST.BinOp.Mul| () T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass.AST.Expr () T@U)
(declare-fun SeqType () T@T)
(declare-fun TSeq (T@U) T@U)
(declare-fun AST.Expr__Raw.WellFormed (T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |AST.Expr__Raw.WellFormed#canCall| (T@U) Bool)
(declare-fun |AST.Expr__Raw.All#canCall| (T@U T@U) Bool)
(declare-fun |AST.Expr__Raw.WellFormed__Single#Handle| () T@U)
(declare-fun AST.Expr__Raw.All (T@U T@U T@U) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun Pure.__default.IsPure__Es (T@U T@U T@U) Bool)
(declare-fun |Pure.__default.IsPure__Es#canCall| (T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Pure.__default.IsPure#canCall| (T@U T@U) Bool)
(declare-fun LitInt (Int) Int)
(declare-fun Pure.__default.IsPure (T@U T@U T@U) Bool)
(declare-fun |AST.BinOp#Equal| (T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun $OneHeap () T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun EliminateMulZero.__default.Eliminate__Es (T@U T@U) T@U)
(declare-fun |EliminateMulZero.__default.Eliminate__Es#canCall| (T@U) Bool)
(declare-fun |EliminateMulZero.__default.Eliminate#canCall| (T@U) Bool)
(declare-fun EliminateMulZero.__default.Eliminate (T@U T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |$IsA#AST.Expr__Raw| (T@U) Bool)
(declare-fun AST.Expr__Raw.Seq_q (T@U) Bool)
(declare-fun AST.BinOp.Add_q (T@U) Bool)
(declare-fun AST.BinOp.Sub_q (T@U) Bool)
(declare-fun AST.BinOp.Mul_q (T@U) Bool)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#FromBoogieMap| (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun AST.Expr__Raw.es (T@U) T@U)
(declare-fun |#AST.Expr_Raw.Literal| (Int) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun EliminateMulZero.__default.ZeroExpr () T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun AST.Expr__Raw.name (T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun |EliminateMulZero.__default.IsZeroMulPure#canCall| (T@U T@U) Bool)
(declare-fun EliminateMulZero.__default.IsZeroMulPure (T@U T@U) Bool)
(declare-fun charType () T@T)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun |AST.Expr__Raw.WellFormed__Single#requires| (T@U) Bool)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun refType () T@T)
(declare-fun null () T@U)
(declare-fun FieldType () T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TBool TChar TInt TagBool TagChar TagInt TagSet TagSeq alloc Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 Tagclass.AST.Expr Tagclass.AST.Expr__Raw Tagclass.AST.BinOp |##AST.BinOp.Add| |##AST.BinOp.Sub| |##AST.BinOp.Mul| |##AST.Expr_Raw.Var| |##AST.Expr_Raw.Literal| |##AST.Expr_Raw.Bind| |##AST.Expr_Raw.Assign| |##AST.Expr_Raw.If| |##AST.Expr_Raw.Op| |##AST.Expr_Raw.Seq| |tytagFamily$_#Func1| |tytagFamily$_#PartialFunc1| |tytagFamily$_#TotalFunc1| tytagFamily$Expr tytagFamily$Expr_Raw tytagFamily$BinOp)
)
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Ctor DatatypeTypeType) 3))
(assert (forall ((|a#39#0#0| T@U) (|a#39#1#0| T@U) (|a#39#2#0| T@U) (i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| |a#39#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#39#0#0| i))) (DtRank (|#AST.Expr_Raw.Bind| |a#39#0#0| |a#39#1#0| |a#39#2#0|))))
 :pattern ( (|Seq#Index| |a#39#0#0| i) (|#AST.Expr_Raw.Bind| |a#39#0#0| |a#39#1#0| |a#39#2#0|))
)))
(assert (forall ((|a#42#0#0| T@U) (|a#42#1#0| T@U) (|a#42#2#0| T@U) (i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| |a#42#1#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#42#1#0| i@@0))) (DtRank (|#AST.Expr_Raw.Bind| |a#42#0#0| |a#42#1#0| |a#42#2#0|))))
 :pattern ( (|Seq#Index| |a#42#1#0| i@@0) (|#AST.Expr_Raw.Bind| |a#42#0#0| |a#42#1#0| |a#42#2#0|))
)))
(assert (forall ((|a#51#0#0| T@U) (|a#51#1#0| T@U) (i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| |a#51#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#51#0#0| i@@1))) (DtRank (|#AST.Expr_Raw.Assign| |a#51#0#0| |a#51#1#0|))))
 :pattern ( (|Seq#Index| |a#51#0#0| i@@1) (|#AST.Expr_Raw.Assign| |a#51#0#0| |a#51#1#0|))
)))
(assert (forall ((|a#54#0#0| T@U) (|a#54#1#0| T@U) (i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| |a#54#1#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#54#1#0| i@@2))) (DtRank (|#AST.Expr_Raw.Assign| |a#54#0#0| |a#54#1#0|))))
 :pattern ( (|Seq#Index| |a#54#1#0| i@@2) (|#AST.Expr_Raw.Assign| |a#54#0#0| |a#54#1#0|))
)))
(assert (forall ((a T@U) (b T@U) (y T@U) ) (!  (=> (|Set#IsMember| a y) (|Set#IsMember| (|Set#Union| a b) y))
 :pattern ( (|Set#Union| a b) (|Set#IsMember| a y))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| b@@0 y@@0) (|Set#IsMember| (|Set#Union| a@@0 b@@0) y@@0))
 :pattern ( (|Set#Union| a@@0 b@@0) (|Set#IsMember| b@@0 y@@0))
)))
(assert (forall ((|a#58#0#0| T@U) (|a#58#1#0| T@U) (|a#58#2#0| T@U) ) (! (= ($Is DatatypeTypeType (|#AST.Expr_Raw.If| |a#58#0#0| |a#58#1#0| |a#58#2#0|) Tclass.AST.Expr__Raw)  (and (and ($Is DatatypeTypeType |a#58#0#0| Tclass.AST.Expr__Raw) ($Is DatatypeTypeType |a#58#1#0| Tclass.AST.Expr__Raw)) ($Is DatatypeTypeType |a#58#2#0| Tclass.AST.Expr__Raw)))
 :pattern ( ($Is DatatypeTypeType (|#AST.Expr_Raw.If| |a#58#0#0| |a#58#1#0| |a#58#2#0|) Tclass.AST.Expr__Raw))
)))
(assert (forall ((|a#68#0#0| T@U) (|a#68#1#0| T@U) (|a#68#2#0| T@U) ) (! (= ($Is DatatypeTypeType (|#AST.Expr_Raw.Op| |a#68#0#0| |a#68#1#0| |a#68#2#0|) Tclass.AST.Expr__Raw)  (and (and ($Is DatatypeTypeType |a#68#0#0| Tclass.AST.BinOp) ($Is DatatypeTypeType |a#68#1#0| Tclass.AST.Expr__Raw)) ($Is DatatypeTypeType |a#68#2#0| Tclass.AST.Expr__Raw)))
 :pattern ( ($Is DatatypeTypeType (|#AST.Expr_Raw.Op| |a#68#0#0| |a#68#1#0| |a#68#2#0|) Tclass.AST.Expr__Raw))
)))
(assert (forall ((s T@U) (v T@U) (x@@2 T@U) ) (! (= (|Seq#Contains| (|Seq#Build| s v) x@@2)  (or (= v x@@2) (|Seq#Contains| s x@@2)))
 :pattern ( (|Seq#Contains| (|Seq#Build| s v) x@@2))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (AST.Expr__Raw.Literal_q a@@1) (AST.Expr__Raw.Literal_q b@@1)) (= (|AST.Expr__Raw#Equal| a@@1 b@@1) (= (AST.Expr__Raw.n a@@1) (AST.Expr__Raw.n b@@1))))
 :pattern ( (|AST.Expr__Raw#Equal| a@@1 b@@1) (AST.Expr__Raw.Literal_q a@@1))
 :pattern ( (|AST.Expr__Raw#Equal| a@@1 b@@1) (AST.Expr__Raw.Literal_q b@@1))
)))
(assert (forall ((|a#27#0#0| T@U) (i@@3 Int) ) (!  (=> (and (<= 0 i@@3) (< i@@3 (|Seq#Length| |a#27#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#27#0#0| i@@3))) (DtRank (|#AST.Expr_Raw.Var| |a#27#0#0|))))
 :pattern ( (|Seq#Index| |a#27#0#0| i@@3) (|#AST.Expr_Raw.Var| |a#27#0#0|))
)))
(assert (forall ((|a#81#0#0| T@U) (i@@4 Int) ) (!  (=> (and (<= 0 i@@4) (< i@@4 (|Seq#Length| |a#81#0#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#81#0#0| i@@4))) (DtRank (|#AST.Expr_Raw.Seq| |a#81#0#0|))))
 :pattern ( (|Seq#Index| |a#81#0#0| i@@4) (|#AST.Expr_Raw.Seq| |a#81#0#0|))
)))
(assert  (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor BoxType) 4)))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|$y#0| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#6| |l#0| |l#1|) |$y#0|))  (and ($IsBox |$y#0| |l#0|) (|Seq#Contains| |l#1| |$y#0|)))
 :pattern ( (MapType0Select BoxType boolType (|lambda#6| |l#0| |l#1|) |$y#0|))
)))
(assert (forall ((|a#34#0#0| T@U) (|a#34#1#0| T@U) (|a#34#2#0| T@U) ) (! (= (DatatypeCtorId (|#AST.Expr_Raw.Bind| |a#34#0#0| |a#34#1#0| |a#34#2#0|)) |##AST.Expr_Raw.Bind|)
 :pattern ( (|#AST.Expr_Raw.Bind| |a#34#0#0| |a#34#1#0| |a#34#2#0|))
)))
(assert (forall ((|a#38#0#0| T@U) (|a#38#1#0| T@U) (|a#38#2#0| T@U) ) (! (= (AST.Expr__Raw.bvars (|#AST.Expr_Raw.Bind| |a#38#0#0| |a#38#1#0| |a#38#2#0|)) |a#38#0#0|)
 :pattern ( (|#AST.Expr_Raw.Bind| |a#38#0#0| |a#38#1#0| |a#38#2#0|))
)))
(assert (forall ((|a#41#0#0| T@U) (|a#41#1#0| T@U) (|a#41#2#0| T@U) ) (! (= (AST.Expr__Raw.bvals (|#AST.Expr_Raw.Bind| |a#41#0#0| |a#41#1#0| |a#41#2#0|)) |a#41#1#0|)
 :pattern ( (|#AST.Expr_Raw.Bind| |a#41#0#0| |a#41#1#0| |a#41#2#0|))
)))
(assert (forall ((|a#44#0#0| T@U) (|a#44#1#0| T@U) (|a#44#2#0| T@U) ) (! (= (AST.Expr__Raw.body (|#AST.Expr_Raw.Bind| |a#44#0#0| |a#44#1#0| |a#44#2#0|)) |a#44#2#0|)
 :pattern ( (|#AST.Expr_Raw.Bind| |a#44#0#0| |a#44#1#0| |a#44#2#0|))
)))
(assert (forall ((|a#56#0#0| T@U) (|a#56#1#0| T@U) (|a#56#2#0| T@U) ) (! (= (DatatypeCtorId (|#AST.Expr_Raw.If| |a#56#0#0| |a#56#1#0| |a#56#2#0|)) |##AST.Expr_Raw.If|)
 :pattern ( (|#AST.Expr_Raw.If| |a#56#0#0| |a#56#1#0| |a#56#2#0|))
)))
(assert (forall ((|a#60#0#0| T@U) (|a#60#1#0| T@U) (|a#60#2#0| T@U) ) (! (= (AST.Expr__Raw.cond (|#AST.Expr_Raw.If| |a#60#0#0| |a#60#1#0| |a#60#2#0|)) |a#60#0#0|)
 :pattern ( (|#AST.Expr_Raw.If| |a#60#0#0| |a#60#1#0| |a#60#2#0|))
)))
(assert (forall ((|a#62#0#0| T@U) (|a#62#1#0| T@U) (|a#62#2#0| T@U) ) (! (= (AST.Expr__Raw.thn (|#AST.Expr_Raw.If| |a#62#0#0| |a#62#1#0| |a#62#2#0|)) |a#62#1#0|)
 :pattern ( (|#AST.Expr_Raw.If| |a#62#0#0| |a#62#1#0| |a#62#2#0|))
)))
(assert (forall ((|a#64#0#0| T@U) (|a#64#1#0| T@U) (|a#64#2#0| T@U) ) (! (= (AST.Expr__Raw.els (|#AST.Expr_Raw.If| |a#64#0#0| |a#64#1#0| |a#64#2#0|)) |a#64#2#0|)
 :pattern ( (|#AST.Expr_Raw.If| |a#64#0#0| |a#64#1#0| |a#64#2#0|))
)))
(assert (forall ((|a#66#0#0| T@U) (|a#66#1#0| T@U) (|a#66#2#0| T@U) ) (! (= (DatatypeCtorId (|#AST.Expr_Raw.Op| |a#66#0#0| |a#66#1#0| |a#66#2#0|)) |##AST.Expr_Raw.Op|)
 :pattern ( (|#AST.Expr_Raw.Op| |a#66#0#0| |a#66#1#0| |a#66#2#0|))
)))
(assert (forall ((|a#70#0#0| T@U) (|a#70#1#0| T@U) (|a#70#2#0| T@U) ) (! (= (AST.Expr__Raw.op (|#AST.Expr_Raw.Op| |a#70#0#0| |a#70#1#0| |a#70#2#0|)) |a#70#0#0|)
 :pattern ( (|#AST.Expr_Raw.Op| |a#70#0#0| |a#70#1#0| |a#70#2#0|))
)))
(assert (forall ((|a#72#0#0| T@U) (|a#72#1#0| T@U) (|a#72#2#0| T@U) ) (! (= (AST.Expr__Raw.oe1 (|#AST.Expr_Raw.Op| |a#72#0#0| |a#72#1#0| |a#72#2#0|)) |a#72#1#0|)
 :pattern ( (|#AST.Expr_Raw.Op| |a#72#0#0| |a#72#1#0| |a#72#2#0|))
)))
(assert (forall ((|a#74#0#0| T@U) (|a#74#1#0| T@U) (|a#74#2#0| T@U) ) (! (= (AST.Expr__Raw.oe2 (|#AST.Expr_Raw.Op| |a#74#0#0| |a#74#1#0| |a#74#2#0|)) |a#74#2#0|)
 :pattern ( (|#AST.Expr_Raw.Op| |a#74#0#0| |a#74#1#0| |a#74#2#0|))
)))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (y@@1 T@U) ) (!  (=> (|Set#IsMember| b@@2 y@@1) (not (|Set#IsMember| (|Set#Difference| a@@2 b@@2) y@@1)))
 :pattern ( (|Set#Difference| a@@2 b@@2) (|Set#IsMember| b@@2 y@@1))
)))
(assert (forall ((|e#0| T@U) ) (!  (=> (or (|AST.Expr__Raw.WellFormed__Single#canCall| |e#0|) ($Is DatatypeTypeType |e#0| Tclass.AST.Expr__Raw)) (= (AST.Expr__Raw.WellFormed__Single |e#0|) (ite (AST.Expr__Raw.Var_q |e#0|) (U_2_bool (Lit boolType (bool_2_U true))) (ite (AST.Expr__Raw.Literal_q |e#0|) (U_2_bool (Lit boolType (bool_2_U true))) (ite (AST.Expr__Raw.Bind_q |e#0|) (let ((|bvals#0| (AST.Expr__Raw.bvals |e#0|)))
(let ((|bvars#0| (AST.Expr__Raw.bvars |e#0|)))
(= (|Seq#Length| |bvars#0|) (|Seq#Length| |bvals#0|)))) (ite (AST.Expr__Raw.Assign_q |e#0|) (let ((|avals#0| (AST.Expr__Raw.avals |e#0|)))
(let ((|avars#0| (AST.Expr__Raw.avars |e#0|)))
(= (|Seq#Length| |avars#0|) (|Seq#Length| |avals#0|)))) (ite (AST.Expr__Raw.If_q |e#0|) (U_2_bool (Lit boolType (bool_2_U true))) (ite (AST.Expr__Raw.Op_q |e#0|) (U_2_bool (Lit boolType (bool_2_U true))) (U_2_bool (Lit boolType (bool_2_U true)))))))))))
 :pattern ( (AST.Expr__Raw.WellFormed__Single |e#0|))
)))
(assert (forall ((o T@U) ) (!  (not (|Set#IsMember| |Set#Empty| o))
 :pattern ( (|Set#IsMember| |Set#Empty| o))
)))
(assert (forall ((x@@3 T@U) ) (!  (not (|Seq#Contains| |Seq#Empty| x@@3))
 :pattern ( (|Seq#Contains| |Seq#Empty| x@@3))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (DatatypeCtorId |#AST.BinOp.Add|) |##AST.BinOp.Add|))
(assert (= (DatatypeCtorId |#AST.BinOp.Sub|) |##AST.BinOp.Sub|))
(assert (= (DatatypeCtorId |#AST.BinOp.Mul|) |##AST.BinOp.Mul|))
(assert (forall ((s@@0 T@U) (v@@0 T@U) (n Int) ) (!  (=> (and (<= 0 n) (<= n (|Seq#Length| s@@0))) (= (|Seq#Drop| (|Seq#Build| s@@0 v@@0) n) (|Seq#Build| (|Seq#Drop| s@@0 n) v@@0)))
 :pattern ( (|Seq#Drop| (|Seq#Build| s@@0 v@@0) n))
)))
(assert (forall ((a@@3 T@U) (b@@3 T@U) ) (! (= (|Set#Union| (|Set#Union| a@@3 b@@3) b@@3) (|Set#Union| a@@3 b@@3))
 :pattern ( (|Set#Union| (|Set#Union| a@@3 b@@3) b@@3))
)))
(assert (forall ((a@@4 T@U) (b@@4 T@U) (o@@0 T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@4 b@@4) o@@0)  (and (|Set#IsMember| a@@4 o@@0) (not (|Set#IsMember| b@@4 o@@0))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@4 b@@4) o@@0))
)))
(assert (= (Ctor HandleTypeType) 5))
(assert (forall ((f T@U) (t0@@0 T@U) (t1@@0 T@U) (u0@@0 T@U) (u1@@0 T@U) ) (!  (=> (and (and ($Is HandleTypeType f (Tclass._System.___hFunc1 t0@@0 t1@@0)) (forall ((bx T@U) ) (!  (=> ($IsBox bx u0@@0) ($IsBox bx t0@@0))
 :pattern ( ($IsBox bx u0@@0))
 :pattern ( ($IsBox bx t0@@0))
))) (forall ((bx@@0 T@U) ) (!  (=> ($IsBox bx@@0 t1@@0) ($IsBox bx@@0 u1@@0))
 :pattern ( ($IsBox bx@@0 t1@@0))
 :pattern ( ($IsBox bx@@0 u1@@0))
))) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0@@0 u1@@0)))
 :pattern ( ($Is HandleTypeType f (Tclass._System.___hFunc1 t0@@0 t1@@0)) ($Is HandleTypeType f (Tclass._System.___hFunc1 u0@@0 u1@@0)))
)))
(assert (forall ((s@@1 T@U) (t T@U) (n@@0 Int) ) (!  (=> (= n@@0 (|Seq#Length| s@@1)) (and (= (|Seq#Take| (|Seq#Append| s@@1 t) n@@0) s@@1) (= (|Seq#Drop| (|Seq#Append| s@@1 t) n@@0) t)))
 :pattern ( (|Seq#Take| (|Seq#Append| s@@1 t) n@@0))
 :pattern ( (|Seq#Drop| (|Seq#Append| s@@1 t) n@@0))
)))
(assert (forall ((|e#0@@0| T@U) ($h T@U) ) (! (= ($IsAlloc DatatypeTypeType |e#0@@0| Tclass.AST.Expr $h) ($IsAlloc DatatypeTypeType |e#0@@0| Tclass.AST.Expr__Raw $h))
 :pattern ( ($IsAlloc DatatypeTypeType |e#0@@0| Tclass.AST.Expr $h))
)))
(assert (= (Ctor SeqType) 6))
(assert (forall ((|a#48#0#0| T@U) (|a#48#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#AST.Expr_Raw.Assign| |a#48#0#0| |a#48#1#0|) Tclass.AST.Expr__Raw)  (and ($Is SeqType |a#48#0#0| (TSeq (TSeq TChar))) ($Is SeqType |a#48#1#0| (TSeq Tclass.AST.Expr__Raw))))
 :pattern ( ($Is DatatypeTypeType (|#AST.Expr_Raw.Assign| |a#48#0#0| |a#48#1#0|) Tclass.AST.Expr__Raw))
)))
(assert (forall ((|a#36#0#0| T@U) (|a#36#1#0| T@U) (|a#36#2#0| T@U) ) (! (= ($Is DatatypeTypeType (|#AST.Expr_Raw.Bind| |a#36#0#0| |a#36#1#0| |a#36#2#0|) Tclass.AST.Expr__Raw)  (and (and ($Is SeqType |a#36#0#0| (TSeq (TSeq TChar))) ($Is SeqType |a#36#1#0| (TSeq Tclass.AST.Expr__Raw))) ($Is DatatypeTypeType |a#36#2#0| Tclass.AST.Expr__Raw)))
 :pattern ( ($Is DatatypeTypeType (|#AST.Expr_Raw.Bind| |a#36#0#0| |a#36#1#0| |a#36#2#0|) Tclass.AST.Expr__Raw))
)))
(assert ($Is DatatypeTypeType |#AST.BinOp.Add| Tclass.AST.BinOp))
(assert ($Is DatatypeTypeType |#AST.BinOp.Sub| Tclass.AST.BinOp))
(assert ($Is DatatypeTypeType |#AST.BinOp.Mul| Tclass.AST.BinOp))
(assert (forall (($Heap T@U) (this T@U) ) (!  (=> (or (|AST.Expr__Raw.WellFormed#canCall| (Lit DatatypeTypeType this)) (and ($IsGoodHeap $Heap) (and ($Is DatatypeTypeType this Tclass.AST.Expr__Raw) ($IsAlloc DatatypeTypeType this Tclass.AST.Expr__Raw $Heap)))) (and (|AST.Expr__Raw.All#canCall| (Lit DatatypeTypeType this) |AST.Expr__Raw.WellFormed__Single#Handle|) (= (AST.Expr__Raw.WellFormed (Lit DatatypeTypeType this)) (AST.Expr__Raw.All ($LS $LZ) (Lit DatatypeTypeType this) |AST.Expr__Raw.WellFormed__Single#Handle|))))
 :weight 3
 :pattern ( (AST.Expr__Raw.WellFormed (Lit DatatypeTypeType this)) ($IsGoodHeap $Heap))
)))
(assert (= (Ctor SetType) 7))
(assert (forall (($ly T@U) (|es#0| T@U) (|locals#0| T@U) ) (!  (=> (or (|Pure.__default.IsPure__Es#canCall| |es#0| |locals#0|) (and ($Is SeqType |es#0| (TSeq Tclass.AST.Expr)) ($Is SetType |locals#0| (TSet (TSeq TChar))))) (and (=> (not (|Seq#Equal| |es#0| |Seq#Empty|)) (and (|Pure.__default.IsPure#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |es#0| (LitInt 0))) |locals#0|) (=> (Pure.__default.IsPure $ly ($Unbox DatatypeTypeType (|Seq#Index| |es#0| (LitInt 0))) |locals#0|) (|Pure.__default.IsPure__Es#canCall| (|Seq#Drop| |es#0| (LitInt 1)) |locals#0|)))) (= (Pure.__default.IsPure__Es ($LS $ly) |es#0| |locals#0|) (ite (|Seq#Equal| |es#0| |Seq#Empty|) true  (and (Pure.__default.IsPure $ly ($Unbox DatatypeTypeType (|Seq#Index| |es#0| (LitInt 0))) |locals#0|) (Pure.__default.IsPure__Es $ly (|Seq#Drop| |es#0| (LitInt 1)) |locals#0|))))))
 :pattern ( (Pure.__default.IsPure__Es ($LS $ly) |es#0| |locals#0|))
)))
(assert (forall ((a@@5 T@U) (b@@5 T@U) ) (!  (=> (and (AST.Expr__Raw.Bind_q a@@5) (AST.Expr__Raw.Bind_q b@@5)) (= (|AST.Expr__Raw#Equal| a@@5 b@@5)  (and (and (|Seq#Equal| (AST.Expr__Raw.bvars a@@5) (AST.Expr__Raw.bvars b@@5)) (|Seq#Equal| (AST.Expr__Raw.bvals a@@5) (AST.Expr__Raw.bvals b@@5))) (|AST.Expr__Raw#Equal| (AST.Expr__Raw.body a@@5) (AST.Expr__Raw.body b@@5)))))
 :pattern ( (|AST.Expr__Raw#Equal| a@@5 b@@5) (AST.Expr__Raw.Bind_q a@@5))
 :pattern ( (|AST.Expr__Raw#Equal| a@@5 b@@5) (AST.Expr__Raw.Bind_q b@@5))
)))
(assert (forall ((a@@6 T@U) (b@@6 T@U) ) (!  (=> (and (AST.Expr__Raw.If_q a@@6) (AST.Expr__Raw.If_q b@@6)) (= (|AST.Expr__Raw#Equal| a@@6 b@@6)  (and (and (|AST.Expr__Raw#Equal| (AST.Expr__Raw.cond a@@6) (AST.Expr__Raw.cond b@@6)) (|AST.Expr__Raw#Equal| (AST.Expr__Raw.thn a@@6) (AST.Expr__Raw.thn b@@6))) (|AST.Expr__Raw#Equal| (AST.Expr__Raw.els a@@6) (AST.Expr__Raw.els b@@6)))))
 :pattern ( (|AST.Expr__Raw#Equal| a@@6 b@@6) (AST.Expr__Raw.If_q a@@6))
 :pattern ( (|AST.Expr__Raw#Equal| a@@6 b@@6) (AST.Expr__Raw.If_q b@@6))
)))
(assert (forall ((a@@7 T@U) (b@@7 T@U) ) (!  (=> (and (AST.Expr__Raw.Op_q a@@7) (AST.Expr__Raw.Op_q b@@7)) (= (|AST.Expr__Raw#Equal| a@@7 b@@7)  (and (and (|AST.BinOp#Equal| (AST.Expr__Raw.op a@@7) (AST.Expr__Raw.op b@@7)) (|AST.Expr__Raw#Equal| (AST.Expr__Raw.oe1 a@@7) (AST.Expr__Raw.oe1 b@@7))) (|AST.Expr__Raw#Equal| (AST.Expr__Raw.oe2 a@@7) (AST.Expr__Raw.oe2 b@@7)))))
 :pattern ( (|AST.Expr__Raw#Equal| a@@7 b@@7) (AST.Expr__Raw.Op_q a@@7))
 :pattern ( (|AST.Expr__Raw#Equal| a@@7 b@@7) (AST.Expr__Raw.Op_q b@@7))
)))
(assert (forall ((a@@8 T@U) (b@@8 T@U) ) (! (= (|AST.BinOp#Equal| a@@8 b@@8) (= a@@8 b@@8))
 :pattern ( (|AST.BinOp#Equal| a@@8 b@@8))
)))
(assert (forall ((a@@9 T@U) (b@@9 T@U) ) (! (= (|AST.Expr__Raw#Equal| a@@9 b@@9) (= a@@9 b@@9))
 :pattern ( (|AST.Expr__Raw#Equal| a@@9 b@@9))
)))
(assert (forall ((s@@2 T@U) (n@@1 Int) ) (!  (=> (= n@@1 0) (= (|Seq#Drop| s@@2 n@@1) s@@2))
 :pattern ( (|Seq#Drop| s@@2 n@@1))
)))
(assert (forall ((x@@4 Int) ) (! (= (LitInt x@@4) x@@4)
 :pattern ( (LitInt x@@4))
)))
(assert (forall ((x@@5 T@U) (T T@T) ) (! (= (Lit T x@@5) x@@5)
 :pattern ( (Lit T x@@5))
)))
(assert (forall ((s@@3 T@U) (bx@@1 T@U) (t@@0 T@U) ) (!  (=> (and ($Is SeqType s@@3 (TSeq t@@0)) ($IsBox bx@@1 t@@0)) ($Is SeqType (|Seq#Build| s@@3 bx@@1) (TSeq t@@0)))
 :pattern ( ($Is SeqType (|Seq#Build| s@@3 bx@@1) (TSeq t@@0)))
)))
(assert (forall ((t0@@1 T@U) (t1@@1 T@U) (heap T@U) (f@@0 T@U) (bx0 T@U) ) (!  (=> (and ($IsGoodHeap heap) (and ($IsBox bx0 t0@@1) ($Is HandleTypeType f@@0 (Tclass._System.___hFunc1 t0@@1 t1@@1)))) (= (|Set#Equal| (Reads1 t0@@1 t1@@1 $OneHeap f@@0 bx0) |Set#Empty|) (|Set#Equal| (Reads1 t0@@1 t1@@1 heap f@@0 bx0) |Set#Empty|)))
 :pattern ( (Reads1 t0@@1 t1@@1 $OneHeap f@@0 bx0) ($IsGoodHeap heap))
 :pattern ( (Reads1 t0@@1 t1@@1 heap f@@0 bx0))
)))
(assert (forall (($ly@@0 T@U) (|es#0@@0| T@U) (|locals#0@@0| T@U) ) (!  (=> (or (|Pure.__default.IsPure__Es#canCall| (Lit SeqType |es#0@@0|) |locals#0@@0|) (and ($Is SeqType |es#0@@0| (TSeq Tclass.AST.Expr)) ($Is SetType |locals#0@@0| (TSet (TSeq TChar))))) (and (=> (not (|Seq#Equal| |es#0@@0| |Seq#Empty|)) (and (|Pure.__default.IsPure#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit SeqType |es#0@@0|) (LitInt 0))) |locals#0@@0|) (=> (Pure.__default.IsPure ($LS $ly@@0) ($Unbox DatatypeTypeType (|Seq#Index| (Lit SeqType |es#0@@0|) (LitInt 0))) |locals#0@@0|) (|Pure.__default.IsPure__Es#canCall| (Lit SeqType (|Seq#Drop| (Lit SeqType |es#0@@0|) (LitInt 1))) |locals#0@@0|)))) (= (Pure.__default.IsPure__Es ($LS $ly@@0) (Lit SeqType |es#0@@0|) |locals#0@@0|) (ite (|Seq#Equal| |es#0@@0| |Seq#Empty|) true  (and (Pure.__default.IsPure ($LS $ly@@0) ($Unbox DatatypeTypeType (|Seq#Index| (Lit SeqType |es#0@@0|) (LitInt 0))) |locals#0@@0|) (Pure.__default.IsPure__Es ($LS $ly@@0) (Lit SeqType (|Seq#Drop| (Lit SeqType |es#0@@0|) (LitInt 1))) |locals#0@@0|))))))
 :weight 3
 :pattern ( (Pure.__default.IsPure__Es ($LS $ly@@0) (Lit SeqType |es#0@@0|) |locals#0@@0|))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@1 T@U) (|es#0@@1| T@U) ) (!  (=> (or (|EliminateMulZero.__default.Eliminate__Es#canCall| |es#0@@1|) (and (< 2 $FunctionContextHeight) ($Is SeqType |es#0@@1| (TSeq Tclass.AST.Expr)))) (and (=> (not (|Seq#Equal| |es#0@@1| |Seq#Empty|)) (and (|EliminateMulZero.__default.Eliminate#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |es#0@@1| (LitInt 0)))) (|EliminateMulZero.__default.Eliminate__Es#canCall| (|Seq#Drop| |es#0@@1| (LitInt 1))))) (= (EliminateMulZero.__default.Eliminate__Es ($LS $ly@@1) |es#0@@1|) (ite (|Seq#Equal| |es#0@@1| |Seq#Empty|) |Seq#Empty| (let ((|e'#0| (EliminateMulZero.__default.Eliminate $ly@@1 ($Unbox DatatypeTypeType (|Seq#Index| |es#0@@1| (LitInt 0))))))
(let ((|es'#0| (EliminateMulZero.__default.Eliminate__Es $ly@@1 (|Seq#Drop| |es#0@@1| (LitInt 1)))))
(|Seq#Append| (|Seq#Build| |Seq#Empty| ($Box DatatypeTypeType |e'#0|)) |es'#0|)))))))
 :pattern ( (EliminateMulZero.__default.Eliminate__Es ($LS $ly@@1) |es#0@@1|))
))))
(assert (forall ((s@@4 T@U) (n@@2 Int) (j Int) ) (!  (=> (and (and (<= 0 j) (< j n@@2)) (< j (|Seq#Length| s@@4))) (= (|Seq#Index| (|Seq#Take| s@@4 n@@2) j) (|Seq#Index| s@@4 j)))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Take| s@@4 n@@2) j))
 :pattern ( (|Seq#Index| s@@4 j) (|Seq#Take| s@@4 n@@2))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@2 T@U) (|es#0@@2| T@U) ) (!  (=> (or (|EliminateMulZero.__default.Eliminate__Es#canCall| (Lit SeqType |es#0@@2|)) (and (< 2 $FunctionContextHeight) ($Is SeqType |es#0@@2| (TSeq Tclass.AST.Expr)))) (and (=> (not (|Seq#Equal| |es#0@@2| |Seq#Empty|)) (and (|EliminateMulZero.__default.Eliminate#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit SeqType |es#0@@2|) (LitInt 0)))) (|EliminateMulZero.__default.Eliminate__Es#canCall| (Lit SeqType (|Seq#Drop| (Lit SeqType |es#0@@2|) (LitInt 1)))))) (= (EliminateMulZero.__default.Eliminate__Es ($LS $ly@@2) (Lit SeqType |es#0@@2|)) (ite (|Seq#Equal| |es#0@@2| |Seq#Empty|) |Seq#Empty| (let ((|e'#1| (EliminateMulZero.__default.Eliminate ($LS $ly@@2) ($Unbox DatatypeTypeType (|Seq#Index| (Lit SeqType |es#0@@2|) (LitInt 0))))))
(let ((|es'#1| (Lit SeqType (EliminateMulZero.__default.Eliminate__Es ($LS $ly@@2) (Lit SeqType (|Seq#Drop| (Lit SeqType |es#0@@2|) (LitInt 1)))))))
(|Seq#Append| (|Seq#Build| |Seq#Empty| ($Box DatatypeTypeType |e'#1|)) |es'#1|)))))))
 :weight 3
 :pattern ( (EliminateMulZero.__default.Eliminate__Es ($LS $ly@@2) (Lit SeqType |es#0@@2|)))
))))
(assert (forall ((s@@5 T@U) (n@@3 Int) ) (!  (=> (and (<= 0 n@@3) (<= n@@3 (|Seq#Length| s@@5))) (= (|Seq#Length| (|Seq#Drop| s@@5 n@@3)) (- (|Seq#Length| s@@5) n@@3)))
 :pattern ( (|Seq#Length| (|Seq#Drop| s@@5 n@@3)))
)))
(assert (forall ((d T@U) ) (!  (=> (|$IsA#AST.Expr__Raw| d) (or (or (or (or (or (or (AST.Expr__Raw.Var_q d) (AST.Expr__Raw.Literal_q d)) (AST.Expr__Raw.Bind_q d)) (AST.Expr__Raw.Assign_q d)) (AST.Expr__Raw.If_q d)) (AST.Expr__Raw.Op_q d)) (AST.Expr__Raw.Seq_q d)))
 :pattern ( (|$IsA#AST.Expr__Raw| d))
)))
(assert (forall ((d@@0 T@U) ) (! (= (AST.BinOp.Add_q d@@0) (= (DatatypeCtorId d@@0) |##AST.BinOp.Add|))
 :pattern ( (AST.BinOp.Add_q d@@0))
)))
(assert (forall ((d@@1 T@U) ) (! (= (AST.BinOp.Sub_q d@@1) (= (DatatypeCtorId d@@1) |##AST.BinOp.Sub|))
 :pattern ( (AST.BinOp.Sub_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (AST.BinOp.Mul_q d@@2) (= (DatatypeCtorId d@@2) |##AST.BinOp.Mul|))
 :pattern ( (AST.BinOp.Mul_q d@@2))
)))
(assert (forall ((d@@3 T@U) ) (! (= (AST.Expr__Raw.Var_q d@@3) (= (DatatypeCtorId d@@3) |##AST.Expr_Raw.Var|))
 :pattern ( (AST.Expr__Raw.Var_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (! (= (AST.Expr__Raw.Literal_q d@@4) (= (DatatypeCtorId d@@4) |##AST.Expr_Raw.Literal|))
 :pattern ( (AST.Expr__Raw.Literal_q d@@4))
)))
(assert (forall ((d@@5 T@U) ) (! (= (AST.Expr__Raw.Bind_q d@@5) (= (DatatypeCtorId d@@5) |##AST.Expr_Raw.Bind|))
 :pattern ( (AST.Expr__Raw.Bind_q d@@5))
)))
(assert (forall ((d@@6 T@U) ) (! (= (AST.Expr__Raw.Assign_q d@@6) (= (DatatypeCtorId d@@6) |##AST.Expr_Raw.Assign|))
 :pattern ( (AST.Expr__Raw.Assign_q d@@6))
)))
(assert (forall ((d@@7 T@U) ) (! (= (AST.Expr__Raw.If_q d@@7) (= (DatatypeCtorId d@@7) |##AST.Expr_Raw.If|))
 :pattern ( (AST.Expr__Raw.If_q d@@7))
)))
(assert (forall ((d@@8 T@U) ) (! (= (AST.Expr__Raw.Op_q d@@8) (= (DatatypeCtorId d@@8) |##AST.Expr_Raw.Op|))
 :pattern ( (AST.Expr__Raw.Op_q d@@8))
)))
(assert (forall ((d@@9 T@U) ) (! (= (AST.Expr__Raw.Seq_q d@@9) (= (DatatypeCtorId d@@9) |##AST.Expr_Raw.Seq|))
 :pattern ( (AST.Expr__Raw.Seq_q d@@9))
)))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (= (|Seq#Equal| s0 s1)  (and (= (|Seq#Length| s0) (|Seq#Length| s1)) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 (|Seq#Length| s0))) (= (|Seq#Index| s0 j@@0) (|Seq#Index| s1 j@@0)))
 :pattern ( (|Seq#Index| s0 j@@0))
 :pattern ( (|Seq#Index| s1 j@@0))
))))
 :pattern ( (|Seq#Equal| s0 s1))
)))
(assert (forall ((x@@6 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@6)) x@@6)
 :pattern ( ($Unbox T@@0 x@@6))
)))
(assert (forall ((d@@10 T@U) ) (!  (=> (AST.Expr__Raw.Bind_q d@@10) (exists ((|a#35#0#0| T@U) (|a#35#1#0| T@U) (|a#35#2#0| T@U) ) (= d@@10 (|#AST.Expr_Raw.Bind| |a#35#0#0| |a#35#1#0| |a#35#2#0|))))
 :pattern ( (AST.Expr__Raw.Bind_q d@@10))
)))
(assert (forall ((d@@11 T@U) ) (!  (=> (AST.Expr__Raw.If_q d@@11) (exists ((|a#57#0#0| T@U) (|a#57#1#0| T@U) (|a#57#2#0| T@U) ) (= d@@11 (|#AST.Expr_Raw.If| |a#57#0#0| |a#57#1#0| |a#57#2#0|))))
 :pattern ( (AST.Expr__Raw.If_q d@@11))
)))
(assert (forall ((d@@12 T@U) ) (!  (=> (AST.Expr__Raw.Op_q d@@12) (exists ((|a#67#0#0| T@U) (|a#67#1#0| T@U) (|a#67#2#0| T@U) ) (= d@@12 (|#AST.Expr_Raw.Op| |a#67#0#0| |a#67#1#0| |a#67#2#0|))))
 :pattern ( (AST.Expr__Raw.Op_q d@@12))
)))
(assert (forall ((s@@6 T@U) (i@@5 Int) ) (!  (=> (and (<= 0 i@@5) (< i@@5 (|Seq#Length| s@@6))) (< (|Seq#Rank| (|Seq#Take| s@@6 i@@5)) (|Seq#Rank| s@@6)))
 :pattern ( (|Seq#Rank| (|Seq#Take| s@@6 i@@5)))
)))
(assert (forall ((a@@10 T@U) (b@@10 T@U) ) (! (= (|Set#Disjoint| a@@10 b@@10) (forall ((o@@1 T@U) ) (!  (or (not (|Set#IsMember| a@@10 o@@1)) (not (|Set#IsMember| b@@10 o@@1)))
 :pattern ( (|Set#IsMember| a@@10 o@@1))
 :pattern ( (|Set#IsMember| b@@10 o@@1))
)))
 :pattern ( (|Set#Disjoint| a@@10 b@@10))
)))
(assert (forall ((m@@1 T@U) (bx@@2 T@U) ) (! (= (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx@@2) (U_2_bool (MapType0Select BoxType boolType m@@1 bx@@2)))
 :pattern ( (|Set#IsMember| (|Set#FromBoogieMap| m@@1) bx@@2))
)))
(assert (forall ((d@@13 T@U) ) (!  (=> (AST.Expr__Raw.Assign_q d@@13) (exists ((|a#47#0#0| T@U) (|a#47#1#0| T@U) ) (= d@@13 (|#AST.Expr_Raw.Assign| |a#47#0#0| |a#47#1#0|))))
 :pattern ( (AST.Expr__Raw.Assign_q d@@13))
)))
(assert (forall (($ly@@3 T@U) ($Heap@@0 T@U) (|e#0@@1| T@U) (|p#0| T@U) ) (!  (=> (or (|AST.Expr__Raw.All#canCall| |e#0@@1| |p#0|) (and (and ($IsGoodHeap $Heap@@0) ($Is DatatypeTypeType |e#0@@1| Tclass.AST.Expr__Raw)) ($Is HandleTypeType |p#0| (Tclass._System.___hTotalFunc1 Tclass.AST.Expr__Raw TBool)))) (and (=> (U_2_bool ($Unbox boolType (Apply1 Tclass.AST.Expr__Raw TBool $Heap@@0 |p#0| ($Box DatatypeTypeType |e#0@@1|)))) (=> (not (AST.Expr__Raw.Var_q |e#0@@1|)) (=> (not (AST.Expr__Raw.Literal_q |e#0@@1|)) (and (=> (AST.Expr__Raw.Bind_q |e#0@@1|) (let ((|body#1| (AST.Expr__Raw.body |e#0@@1|)))
(let ((|bvals#1| (AST.Expr__Raw.bvals |e#0@@1|)))
 (and (forall ((|e#4| T@U) ) (!  (=> ($Is DatatypeTypeType |e#4| Tclass.AST.Expr__Raw) (=> (|Seq#Contains| |bvals#1| ($Box DatatypeTypeType |e#4|)) (|AST.Expr__Raw.All#canCall| |e#4| |p#0|)))
 :pattern ( (AST.Expr__Raw.All $ly@@3 |e#4| |p#0|))
 :pattern ( (|Seq#Contains| |bvals#1| ($Box DatatypeTypeType |e#4|)))
)) (=> (forall ((|e#4@@0| T@U) ) (!  (=> (and ($Is DatatypeTypeType |e#4@@0| Tclass.AST.Expr__Raw) (|Seq#Contains| |bvals#1| ($Box DatatypeTypeType |e#4@@0|))) (AST.Expr__Raw.All $ly@@3 |e#4@@0| |p#0|))
 :pattern ( (AST.Expr__Raw.All $ly@@3 |e#4@@0| |p#0|))
 :pattern ( (|Seq#Contains| |bvals#1| ($Box DatatypeTypeType |e#4@@0|)))
)) (|AST.Expr__Raw.All#canCall| |body#1| |p#0|)))))) (=> (not (AST.Expr__Raw.Bind_q |e#0@@1|)) (and (=> (AST.Expr__Raw.Assign_q |e#0@@1|) (let ((|avals#1| (AST.Expr__Raw.avals |e#0@@1|)))
 (=> (U_2_bool (Lit boolType (bool_2_U true))) (forall ((|e#5| T@U) ) (!  (=> ($Is DatatypeTypeType |e#5| Tclass.AST.Expr__Raw) (=> (|Seq#Contains| |avals#1| ($Box DatatypeTypeType |e#5|)) (|AST.Expr__Raw.All#canCall| |e#5| |p#0|)))
 :pattern ( (AST.Expr__Raw.All $ly@@3 |e#5| |p#0|))
 :pattern ( (|Seq#Contains| |avals#1| ($Box DatatypeTypeType |e#5|)))
))))) (=> (not (AST.Expr__Raw.Assign_q |e#0@@1|)) (and (=> (AST.Expr__Raw.If_q |e#0@@1|) (let ((|els#1| (AST.Expr__Raw.els |e#0@@1|)))
(let ((|thn#1| (AST.Expr__Raw.thn |e#0@@1|)))
(let ((|cond#1| (AST.Expr__Raw.cond |e#0@@1|)))
 (and (|AST.Expr__Raw.All#canCall| |cond#1| |p#0|) (=> (AST.Expr__Raw.All $ly@@3 |cond#1| |p#0|) (and (|AST.Expr__Raw.All#canCall| |thn#1| |p#0|) (=> (AST.Expr__Raw.All $ly@@3 |thn#1| |p#0|) (|AST.Expr__Raw.All#canCall| |els#1| |p#0|))))))))) (=> (not (AST.Expr__Raw.If_q |e#0@@1|)) (and (=> (AST.Expr__Raw.Op_q |e#0@@1|) (let ((|oe2#1| (AST.Expr__Raw.oe2 |e#0@@1|)))
(let ((|oe1#1| (AST.Expr__Raw.oe1 |e#0@@1|)))
 (and (|AST.Expr__Raw.All#canCall| |oe1#1| |p#0|) (=> (AST.Expr__Raw.All $ly@@3 |oe1#1| |p#0|) (|AST.Expr__Raw.All#canCall| |oe2#1| |p#0|)))))) (=> (not (AST.Expr__Raw.Op_q |e#0@@1|)) (let ((|es#1| (AST.Expr__Raw.es |e#0@@1|)))
 (=> (U_2_bool (Lit boolType (bool_2_U true))) (forall ((|e#6| T@U) ) (!  (=> ($Is DatatypeTypeType |e#6| Tclass.AST.Expr__Raw) (=> (|Seq#Contains| |es#1| ($Box DatatypeTypeType |e#6|)) (|AST.Expr__Raw.All#canCall| |e#6| |p#0|)))
 :pattern ( (AST.Expr__Raw.All $ly@@3 |e#6| |p#0|))
 :pattern ( (|Seq#Contains| |es#1| ($Box DatatypeTypeType |e#6|)))
))))))))))))))) (= (AST.Expr__Raw.All ($LS $ly@@3) |e#0@@1| |p#0|)  (and (U_2_bool ($Unbox boolType (Apply1 Tclass.AST.Expr__Raw TBool $Heap@@0 |p#0| ($Box DatatypeTypeType |e#0@@1|)))) (ite (AST.Expr__Raw.Var_q |e#0@@1|) (U_2_bool (Lit boolType (bool_2_U true))) (ite (AST.Expr__Raw.Literal_q |e#0@@1|) (U_2_bool (Lit boolType (bool_2_U true))) (ite (AST.Expr__Raw.Bind_q |e#0@@1|) (let ((|body#0| (AST.Expr__Raw.body |e#0@@1|)))
(let ((|bvals#0@@0| (AST.Expr__Raw.bvals |e#0@@1|)))
 (and (forall ((|e#1| T@U) ) (!  (=> (and ($Is DatatypeTypeType |e#1| Tclass.AST.Expr__Raw) (|Seq#Contains| |bvals#0@@0| ($Box DatatypeTypeType |e#1|))) (AST.Expr__Raw.All $ly@@3 |e#1| |p#0|))
 :pattern ( (AST.Expr__Raw.All $ly@@3 |e#1| |p#0|))
 :pattern ( (|Seq#Contains| |bvals#0@@0| ($Box DatatypeTypeType |e#1|)))
)) (AST.Expr__Raw.All $ly@@3 |body#0| |p#0|)))) (ite (AST.Expr__Raw.Assign_q |e#0@@1|) (let ((|avals#0@@0| (AST.Expr__Raw.avals |e#0@@1|)))
 (and true (forall ((|e#2| T@U) ) (!  (=> (and ($Is DatatypeTypeType |e#2| Tclass.AST.Expr__Raw) (|Seq#Contains| |avals#0@@0| ($Box DatatypeTypeType |e#2|))) (AST.Expr__Raw.All $ly@@3 |e#2| |p#0|))
 :pattern ( (AST.Expr__Raw.All $ly@@3 |e#2| |p#0|))
 :pattern ( (|Seq#Contains| |avals#0@@0| ($Box DatatypeTypeType |e#2|)))
)))) (ite (AST.Expr__Raw.If_q |e#0@@1|) (let ((|els#0| (AST.Expr__Raw.els |e#0@@1|)))
(let ((|thn#0| (AST.Expr__Raw.thn |e#0@@1|)))
(let ((|cond#0| (AST.Expr__Raw.cond |e#0@@1|)))
 (and (and (AST.Expr__Raw.All $ly@@3 |cond#0| |p#0|) (AST.Expr__Raw.All $ly@@3 |thn#0| |p#0|)) (AST.Expr__Raw.All $ly@@3 |els#0| |p#0|))))) (ite (AST.Expr__Raw.Op_q |e#0@@1|) (let ((|oe2#0| (AST.Expr__Raw.oe2 |e#0@@1|)))
(let ((|oe1#0| (AST.Expr__Raw.oe1 |e#0@@1|)))
 (and (AST.Expr__Raw.All $ly@@3 |oe1#0| |p#0|) (AST.Expr__Raw.All $ly@@3 |oe2#0| |p#0|)))) (let ((|es#0@@3| (AST.Expr__Raw.es |e#0@@1|)))
 (and true (forall ((|e#3| T@U) ) (!  (=> (and ($Is DatatypeTypeType |e#3| Tclass.AST.Expr__Raw) (|Seq#Contains| |es#0@@3| ($Box DatatypeTypeType |e#3|))) (AST.Expr__Raw.All $ly@@3 |e#3| |p#0|))
 :pattern ( (AST.Expr__Raw.All $ly@@3 |e#3| |p#0|))
 :pattern ( (|Seq#Contains| |es#0@@3| ($Box DatatypeTypeType |e#3|)))
))))))))))))))
 :pattern ( (AST.Expr__Raw.All ($LS $ly@@3) |e#0@@1| |p#0|) ($IsGoodHeap $Heap@@0))
)))
(assert (forall ((d@@14 T@U) ) (!  (=> (AST.BinOp.Add_q d@@14) (= d@@14 |#AST.BinOp.Add|))
 :pattern ( (AST.BinOp.Add_q d@@14))
)))
(assert (forall ((d@@15 T@U) ) (!  (=> (AST.BinOp.Sub_q d@@15) (= d@@15 |#AST.BinOp.Sub|))
 :pattern ( (AST.BinOp.Sub_q d@@15))
)))
(assert (forall ((d@@16 T@U) ) (!  (=> (AST.BinOp.Mul_q d@@16) (= d@@16 |#AST.BinOp.Mul|))
 :pattern ( (AST.BinOp.Mul_q d@@16))
)))
(assert (forall ((v@@1 T@U) (t0@@2 T@U) ) (! (= ($Is SetType v@@1 (TSet t0@@2)) (forall ((bx@@3 T@U) ) (!  (=> (|Set#IsMember| v@@1 bx@@3) ($IsBox bx@@3 t0@@2))
 :pattern ( (|Set#IsMember| v@@1 bx@@3))
)))
 :pattern ( ($Is SetType v@@1 (TSet t0@@2)))
)))
(assert (forall ((s@@7 T@U) (i@@6 Int) ) (!  (=> (and (< 0 i@@6) (<= i@@6 (|Seq#Length| s@@7))) (< (|Seq#Rank| (|Seq#Drop| s@@7 i@@6)) (|Seq#Rank| s@@7)))
 :pattern ( (|Seq#Rank| (|Seq#Drop| s@@7 i@@6)))
)))
(assert (forall ((d@@17 T@U) ) (!  (=> (AST.Expr__Raw.Var_q d@@17) (exists ((|a#23#0#0| T@U) ) (= d@@17 (|#AST.Expr_Raw.Var| |a#23#0#0|))))
 :pattern ( (AST.Expr__Raw.Var_q d@@17))
)))
(assert (forall ((d@@18 T@U) ) (!  (=> (AST.Expr__Raw.Literal_q d@@18) (exists ((|a#30#0#0| Int) ) (= d@@18 (|#AST.Expr_Raw.Literal| |a#30#0#0|))))
 :pattern ( (AST.Expr__Raw.Literal_q d@@18))
)))
(assert (forall ((d@@19 T@U) ) (!  (=> (AST.Expr__Raw.Seq_q d@@19) (exists ((|a#77#0#0| T@U) ) (= d@@19 (|#AST.Expr_Raw.Seq| |a#77#0#0|))))
 :pattern ( (AST.Expr__Raw.Seq_q d@@19))
)))
(assert (forall ((d@@20 T@U) ) (!  (=> ($Is DatatypeTypeType d@@20 Tclass.AST.Expr__Raw) (or (or (or (or (or (or (AST.Expr__Raw.Var_q d@@20) (AST.Expr__Raw.Literal_q d@@20)) (AST.Expr__Raw.Bind_q d@@20)) (AST.Expr__Raw.Assign_q d@@20)) (AST.Expr__Raw.If_q d@@20)) (AST.Expr__Raw.Op_q d@@20)) (AST.Expr__Raw.Seq_q d@@20)))
 :pattern ( (AST.Expr__Raw.Seq_q d@@20) ($Is DatatypeTypeType d@@20 Tclass.AST.Expr__Raw))
 :pattern ( (AST.Expr__Raw.Op_q d@@20) ($Is DatatypeTypeType d@@20 Tclass.AST.Expr__Raw))
 :pattern ( (AST.Expr__Raw.If_q d@@20) ($Is DatatypeTypeType d@@20 Tclass.AST.Expr__Raw))
 :pattern ( (AST.Expr__Raw.Assign_q d@@20) ($Is DatatypeTypeType d@@20 Tclass.AST.Expr__Raw))
 :pattern ( (AST.Expr__Raw.Bind_q d@@20) ($Is DatatypeTypeType d@@20 Tclass.AST.Expr__Raw))
 :pattern ( (AST.Expr__Raw.Literal_q d@@20) ($Is DatatypeTypeType d@@20 Tclass.AST.Expr__Raw))
 :pattern ( (AST.Expr__Raw.Var_q d@@20) ($Is DatatypeTypeType d@@20 Tclass.AST.Expr__Raw))
)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall (($ly@@4 T@U) (|e#0@@2| T@U) (|locals#0@@1| T@U) ) (!  (=> (or (|Pure.__default.IsPure#canCall| |e#0@@2| |locals#0@@1|) (and ($Is DatatypeTypeType |e#0@@2| Tclass.AST.Expr) ($Is SetType |locals#0@@1| (TSet (TSeq TChar))))) (and (=> (not (AST.Expr__Raw.Var_q |e#0@@2|)) (=> (not (AST.Expr__Raw.Literal_q |e#0@@2|)) (and (=> (AST.Expr__Raw.Bind_q |e#0@@2|) (let ((|body#1@@0| (AST.Expr__Raw.body |e#0@@2|)))
(let ((|bvals#1@@0| (AST.Expr__Raw.bvals |e#0@@2|)))
(let ((|bvars#1| (AST.Expr__Raw.bvars |e#0@@2|)))
 (and (|Pure.__default.IsPure__Es#canCall| |bvals#1@@0| |locals#0@@1|) (=> (Pure.__default.IsPure__Es $ly@@4 |bvals#1@@0| |locals#0@@1|) (|Pure.__default.IsPure#canCall| |body#1@@0| (|Set#Union| (|Set#FromBoogieMap| (|lambda#6| (TSeq TChar) |bvars#1|)) |locals#0@@1|)))))))) (=> (not (AST.Expr__Raw.Bind_q |e#0@@2|)) (and (=> (AST.Expr__Raw.Assign_q |e#0@@2|) (let ((|avals#1@@0| (AST.Expr__Raw.avals |e#0@@2|)))
(let ((|avars#1| (AST.Expr__Raw.avars |e#0@@2|)))
 (=> (forall ((|x#2| T@U) ) (!  (=> (and ($Is SeqType |x#2| (TSeq TChar)) (|Seq#Contains| |avars#1| ($Box SeqType |x#2|))) (|Set#IsMember| |locals#0@@1| ($Box SeqType |x#2|)))
 :pattern ( (|Set#IsMember| |locals#0@@1| ($Box SeqType |x#2|)))
 :pattern ( (|Seq#Contains| |avars#1| ($Box SeqType |x#2|)))
)) (|Pure.__default.IsPure__Es#canCall| |avals#1@@0| |locals#0@@1|))))) (=> (not (AST.Expr__Raw.Assign_q |e#0@@2|)) (and (=> (AST.Expr__Raw.If_q |e#0@@2|) (let ((|els#1@@0| (AST.Expr__Raw.els |e#0@@2|)))
(let ((|thn#1@@0| (AST.Expr__Raw.thn |e#0@@2|)))
(let ((|cond#1@@0| (AST.Expr__Raw.cond |e#0@@2|)))
 (and (|Pure.__default.IsPure#canCall| |cond#1@@0| |locals#0@@1|) (=> (Pure.__default.IsPure $ly@@4 |cond#1@@0| |locals#0@@1|) (and (|Pure.__default.IsPure#canCall| |thn#1@@0| |locals#0@@1|) (=> (Pure.__default.IsPure $ly@@4 |thn#1@@0| |locals#0@@1|) (|Pure.__default.IsPure#canCall| |els#1@@0| |locals#0@@1|))))))))) (=> (not (AST.Expr__Raw.If_q |e#0@@2|)) (and (=> (AST.Expr__Raw.Op_q |e#0@@2|) (let ((|oe2#1@@0| (AST.Expr__Raw.oe2 |e#0@@2|)))
(let ((|oe1#1@@0| (AST.Expr__Raw.oe1 |e#0@@2|)))
 (and (|Pure.__default.IsPure#canCall| |oe1#1@@0| |locals#0@@1|) (=> (Pure.__default.IsPure $ly@@4 |oe1#1@@0| |locals#0@@1|) (|Pure.__default.IsPure#canCall| |oe2#1@@0| |locals#0@@1|)))))) (=> (not (AST.Expr__Raw.Op_q |e#0@@2|)) (let ((|es#1@@0| (AST.Expr__Raw.es |e#0@@2|)))
(|Pure.__default.IsPure__Es#canCall| |es#1@@0| |locals#0@@1|)))))))))))) (= (Pure.__default.IsPure ($LS $ly@@4) |e#0@@2| |locals#0@@1|) (ite (AST.Expr__Raw.Var_q |e#0@@2|) (U_2_bool (Lit boolType (bool_2_U true))) (ite (AST.Expr__Raw.Literal_q |e#0@@2|) (U_2_bool (Lit boolType (bool_2_U true))) (ite (AST.Expr__Raw.Bind_q |e#0@@2|) (let ((|body#0@@0| (AST.Expr__Raw.body |e#0@@2|)))
(let ((|bvals#0@@1| (AST.Expr__Raw.bvals |e#0@@2|)))
(let ((|bvars#0@@0| (AST.Expr__Raw.bvars |e#0@@2|)))
 (and (Pure.__default.IsPure__Es $ly@@4 |bvals#0@@1| |locals#0@@1|) (Pure.__default.IsPure $ly@@4 |body#0@@0| (|Set#Union| (|Set#FromBoogieMap| (|lambda#6| (TSeq TChar) |bvars#0@@0|)) |locals#0@@1|)))))) (ite (AST.Expr__Raw.Assign_q |e#0@@2|) (let ((|avals#0@@1| (AST.Expr__Raw.avals |e#0@@2|)))
(let ((|avars#0@@0| (AST.Expr__Raw.avars |e#0@@2|)))
 (and (forall ((|x#0| T@U) ) (!  (=> (and ($Is SeqType |x#0| (TSeq TChar)) (|Seq#Contains| |avars#0@@0| ($Box SeqType |x#0|))) (|Set#IsMember| |locals#0@@1| ($Box SeqType |x#0|)))
 :pattern ( (|Set#IsMember| |locals#0@@1| ($Box SeqType |x#0|)))
 :pattern ( (|Seq#Contains| |avars#0@@0| ($Box SeqType |x#0|)))
)) (Pure.__default.IsPure__Es $ly@@4 |avals#0@@1| |locals#0@@1|)))) (ite (AST.Expr__Raw.If_q |e#0@@2|) (let ((|els#0@@0| (AST.Expr__Raw.els |e#0@@2|)))
(let ((|thn#0@@0| (AST.Expr__Raw.thn |e#0@@2|)))
(let ((|cond#0@@0| (AST.Expr__Raw.cond |e#0@@2|)))
 (and (and (Pure.__default.IsPure $ly@@4 |cond#0@@0| |locals#0@@1|) (Pure.__default.IsPure $ly@@4 |thn#0@@0| |locals#0@@1|)) (Pure.__default.IsPure $ly@@4 |els#0@@0| |locals#0@@1|))))) (ite (AST.Expr__Raw.Op_q |e#0@@2|) (let ((|oe2#0@@0| (AST.Expr__Raw.oe2 |e#0@@2|)))
(let ((|oe1#0@@0| (AST.Expr__Raw.oe1 |e#0@@2|)))
 (and (Pure.__default.IsPure $ly@@4 |oe1#0@@0| |locals#0@@1|) (Pure.__default.IsPure $ly@@4 |oe2#0@@0| |locals#0@@1|)))) (let ((|es#0@@4| (AST.Expr__Raw.es |e#0@@2|)))
(Pure.__default.IsPure__Es $ly@@4 |es#0@@4| |locals#0@@1|)))))))))))
 :pattern ( (Pure.__default.IsPure ($LS $ly@@4) |e#0@@2| |locals#0@@1|))
)))
(assert (forall ((s@@8 T@U) (v@@2 T@U) ) (! (= (|Seq#Length| (|Seq#Build| s@@8 v@@2)) (+ 1 (|Seq#Length| s@@8)))
 :pattern ( (|Seq#Build| s@@8 v@@2))
)))
(assert (forall (($ly@@5 T@U) (|e#0@@3| T@U) (|p#0@@0| T@U) ) (! (= (AST.Expr__Raw.All ($LS $ly@@5) |e#0@@3| |p#0@@0|) (AST.Expr__Raw.All $ly@@5 |e#0@@3| |p#0@@0|))
 :pattern ( (AST.Expr__Raw.All ($LS $ly@@5) |e#0@@3| |p#0@@0|))
)))
(assert (forall (($ly@@6 T@U) (|e#0@@4| T@U) (|locals#0@@2| T@U) ) (! (= (Pure.__default.IsPure ($LS $ly@@6) |e#0@@4| |locals#0@@2|) (Pure.__default.IsPure $ly@@6 |e#0@@4| |locals#0@@2|))
 :pattern ( (Pure.__default.IsPure ($LS $ly@@6) |e#0@@4| |locals#0@@2|))
)))
(assert (forall (($ly@@7 T@U) (|es#0@@5| T@U) (|locals#0@@3| T@U) ) (! (= (Pure.__default.IsPure__Es ($LS $ly@@7) |es#0@@5| |locals#0@@3|) (Pure.__default.IsPure__Es $ly@@7 |es#0@@5| |locals#0@@3|))
 :pattern ( (Pure.__default.IsPure__Es ($LS $ly@@7) |es#0@@5| |locals#0@@3|))
)))
(assert (forall ((v@@3 T@U) (t@@1 T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@3) t@@1 h) ($IsAlloc T@@1 v@@3 t@@1 h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@3) t@@1 h))
)))
(assert  (=> (< 0 $FunctionContextHeight) ($Is DatatypeTypeType EliminateMulZero.__default.ZeroExpr Tclass.AST.Expr)))
(assert (forall ((s@@9 T@U) (n@@4 Int) (j@@1 Int) ) (!  (=> (and (and (<= 0 n@@4) (<= 0 j@@1)) (< j@@1 (- (|Seq#Length| s@@9) n@@4))) (= (|Seq#Index| (|Seq#Drop| s@@9 n@@4) j@@1) (|Seq#Index| s@@9 (+ j@@1 n@@4))))
 :weight 25
 :pattern ( (|Seq#Index| (|Seq#Drop| s@@9 n@@4) j@@1))
)))
(assert (forall ((|e#0@@5| T@U) ) (!  (=> (or (|AST.Expr__Raw.WellFormed__Single#canCall| (Lit DatatypeTypeType |e#0@@5|)) ($Is DatatypeTypeType |e#0@@5| Tclass.AST.Expr__Raw)) (= (AST.Expr__Raw.WellFormed__Single (Lit DatatypeTypeType |e#0@@5|)) (ite (AST.Expr__Raw.Var_q (Lit DatatypeTypeType |e#0@@5|)) (U_2_bool (Lit boolType (bool_2_U true))) (ite (AST.Expr__Raw.Literal_q (Lit DatatypeTypeType |e#0@@5|)) (U_2_bool (Lit boolType (bool_2_U true))) (ite (AST.Expr__Raw.Bind_q (Lit DatatypeTypeType |e#0@@5|)) (let ((|bvals#2| (Lit SeqType (AST.Expr__Raw.bvals (Lit DatatypeTypeType |e#0@@5|)))))
(let ((|bvars#2| (Lit SeqType (AST.Expr__Raw.bvars (Lit DatatypeTypeType |e#0@@5|)))))
(= (|Seq#Length| |bvars#2|) (|Seq#Length| |bvals#2|)))) (ite (AST.Expr__Raw.Assign_q (Lit DatatypeTypeType |e#0@@5|)) (let ((|avals#2| (Lit SeqType (AST.Expr__Raw.avals (Lit DatatypeTypeType |e#0@@5|)))))
(let ((|avars#2| (Lit SeqType (AST.Expr__Raw.avars (Lit DatatypeTypeType |e#0@@5|)))))
(= (|Seq#Length| |avars#2|) (|Seq#Length| |avals#2|)))) (ite (AST.Expr__Raw.If_q (Lit DatatypeTypeType |e#0@@5|)) (U_2_bool (Lit boolType (bool_2_U true))) (ite (AST.Expr__Raw.Op_q (Lit DatatypeTypeType |e#0@@5|)) (U_2_bool (Lit boolType (bool_2_U true))) (U_2_bool (Lit boolType (bool_2_U true)))))))))))
 :weight 3
 :pattern ( (AST.Expr__Raw.WellFormed__Single (Lit DatatypeTypeType |e#0@@5|)))
)))
(assert  (=> (< 0 $FunctionContextHeight) (forall (($h@@0 T@U) ) (!  (=> ($IsGoodHeap $h@@0) ($IsAlloc DatatypeTypeType EliminateMulZero.__default.ZeroExpr Tclass.AST.Expr $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType EliminateMulZero.__default.ZeroExpr Tclass.AST.Expr $h@@0))
))))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) ) (! (= (|Seq#Length| (|Seq#Append| s0@@0 s1@@0)) (+ (|Seq#Length| s0@@0) (|Seq#Length| s1@@0)))
 :pattern ( (|Seq#Length| (|Seq#Append| s0@@0 s1@@0)))
)))
(assert (forall ((|#$T0| T@U) (|#$R| T@U) (|f#0| T@U) ($h@@1 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hPartialFunc1 |#$T0| |#$R|) $h@@1) ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hFunc1 |#$T0| |#$R|) $h@@1))
 :pattern ( ($IsAlloc HandleTypeType |f#0| (Tclass._System.___hPartialFunc1 |#$T0| |#$R|) $h@@1))
)))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) (|f#0@@0| T@U) ($h@@2 T@U) ) (! (= ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hTotalFunc1 |#$T0@@0| |#$R@@0|) $h@@2) ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@0| |#$R@@0|) $h@@2))
 :pattern ( ($IsAlloc HandleTypeType |f#0@@0| (Tclass._System.___hTotalFunc1 |#$T0@@0| |#$R@@0|) $h@@2))
)))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 Tclass.AST.Expr) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@4)) bx@@4) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@4) Tclass.AST.Expr)))
 :pattern ( ($IsBox bx@@4 Tclass.AST.Expr))
)))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 Tclass.AST.Expr__Raw) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@5)) bx@@5) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@5) Tclass.AST.Expr__Raw)))
 :pattern ( ($IsBox bx@@5 Tclass.AST.Expr__Raw))
)))
(assert (forall ((bx@@6 T@U) ) (!  (=> ($IsBox bx@@6 Tclass.AST.BinOp) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@6)) bx@@6) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@6) Tclass.AST.BinOp)))
 :pattern ( ($IsBox bx@@6 Tclass.AST.BinOp))
)))
(assert (forall ((s@@10 T@U) (i@@7 Int) (v@@4 T@U) ) (!  (and (=> (= i@@7 (|Seq#Length| s@@10)) (= (|Seq#Index| (|Seq#Build| s@@10 v@@4) i@@7) v@@4)) (=> (or (not (= i@@7 (|Seq#Length| s@@10))) (not true)) (= (|Seq#Index| (|Seq#Build| s@@10 v@@4) i@@7) (|Seq#Index| s@@10 i@@7))))
 :pattern ( (|Seq#Index| (|Seq#Build| s@@10 v@@4) i@@7))
)))
(assert (forall ((a@@11 T@U) (b@@11 T@U) ) (!  (=> (and (AST.Expr__Raw.Var_q a@@11) (AST.Expr__Raw.Var_q b@@11)) (= (|AST.Expr__Raw#Equal| a@@11 b@@11) (|Seq#Equal| (AST.Expr__Raw.name a@@11) (AST.Expr__Raw.name b@@11))))
 :pattern ( (|AST.Expr__Raw#Equal| a@@11 b@@11) (AST.Expr__Raw.Var_q a@@11))
 :pattern ( (|AST.Expr__Raw#Equal| a@@11 b@@11) (AST.Expr__Raw.Var_q b@@11))
)))
(assert (forall ((a@@12 T@U) (b@@12 T@U) ) (!  (=> (and (AST.Expr__Raw.Seq_q a@@12) (AST.Expr__Raw.Seq_q b@@12)) (= (|AST.Expr__Raw#Equal| a@@12 b@@12) (|Seq#Equal| (AST.Expr__Raw.es a@@12) (AST.Expr__Raw.es b@@12))))
 :pattern ( (|AST.Expr__Raw#Equal| a@@12 b@@12) (AST.Expr__Raw.Seq_q a@@12))
 :pattern ( (|AST.Expr__Raw#Equal| a@@12 b@@12) (AST.Expr__Raw.Seq_q b@@12))
)))
(assert (forall ((a@@13 T@U) (b@@13 T@U) (o@@2 T@U) ) (! (= (|Set#IsMember| (|Set#Union| a@@13 b@@13) o@@2)  (or (|Set#IsMember| a@@13 o@@2) (|Set#IsMember| b@@13 o@@2)))
 :pattern ( (|Set#IsMember| (|Set#Union| a@@13 b@@13) o@@2))
)))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (x@@7 T@U) ) (! (= (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@7)  (or (|Seq#Contains| s0@@1 x@@7) (|Seq#Contains| s1@@1 x@@7)))
 :pattern ( (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@7))
)))
(assert (forall ((s@@11 T@U) (n@@5 Int) (x@@8 T@U) ) (! (= (|Seq#Contains| (|Seq#Take| s@@11 n@@5) x@@8) (exists ((i@@8 Int) ) (!  (and (and (and (<= 0 i@@8) (< i@@8 n@@5)) (< i@@8 (|Seq#Length| s@@11))) (= (|Seq#Index| s@@11 i@@8) x@@8))
 :pattern ( (|Seq#Index| s@@11 i@@8))
)))
 :pattern ( (|Seq#Contains| (|Seq#Take| s@@11 n@@5) x@@8))
)))
(assert (forall ((a@@14 T@U) (b@@14 T@U) ) (!  (=> (|Set#Disjoint| a@@14 b@@14) (and (= (|Set#Difference| (|Set#Union| a@@14 b@@14) a@@14) b@@14) (= (|Set#Difference| (|Set#Union| a@@14 b@@14) b@@14) a@@14)))
 :pattern ( (|Set#Union| a@@14 b@@14))
)))
(assert (forall ((f@@1 T@U) (t0@@3 T@U) (t1@@2 T@U) (h@@0 T@U) ) (!  (=> (and ($IsGoodHeap h@@0) ($IsAlloc HandleTypeType f@@1 (Tclass._System.___hFunc1 t0@@3 t1@@2) h@@0)) (forall ((bx0@@0 T@U) ) (!  (=> (and ($IsAllocBox bx0@@0 t0@@3 h@@0) (Requires1 t0@@3 t1@@2 h@@0 f@@1 bx0@@0)) ($IsAllocBox (Apply1 t0@@3 t1@@2 h@@0 f@@1 bx0@@0) t1@@2 h@@0))
 :pattern ( (Apply1 t0@@3 t1@@2 h@@0 f@@1 bx0@@0))
)))
 :pattern ( ($IsAlloc HandleTypeType f@@1 (Tclass._System.___hFunc1 t0@@3 t1@@2) h@@0))
)))
(assert (forall ((s@@12 T@U) (x@@9 T@U) ) (! (= (|Seq#Contains| s@@12 x@@9) (exists ((i@@9 Int) ) (!  (and (and (<= 0 i@@9) (< i@@9 (|Seq#Length| s@@12))) (= (|Seq#Index| s@@12 i@@9) x@@9))
 :pattern ( (|Seq#Index| s@@12 i@@9))
)))
 :pattern ( (|Seq#Contains| s@@12 x@@9))
)))
(assert (forall (($ly@@8 T@U) (|e#0@@6| T@U) (|locals#0@@4| T@U) ) (!  (=> (or (|Pure.__default.IsPure#canCall| (Lit DatatypeTypeType |e#0@@6|) |locals#0@@4|) (and ($Is DatatypeTypeType |e#0@@6| Tclass.AST.Expr) ($Is SetType |locals#0@@4| (TSet (TSeq TChar))))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Var_q (Lit DatatypeTypeType |e#0@@6|)))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Literal_q (Lit DatatypeTypeType |e#0@@6|)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Bind_q (Lit DatatypeTypeType |e#0@@6|))))) (let ((|body#3| (Lit DatatypeTypeType (AST.Expr__Raw.body (Lit DatatypeTypeType |e#0@@6|)))))
(let ((|bvals#3| (Lit SeqType (AST.Expr__Raw.bvals (Lit DatatypeTypeType |e#0@@6|)))))
(let ((|bvars#3| (Lit SeqType (AST.Expr__Raw.bvars (Lit DatatypeTypeType |e#0@@6|)))))
 (and (|Pure.__default.IsPure__Es#canCall| |bvals#3| |locals#0@@4|) (=> (Pure.__default.IsPure__Es ($LS $ly@@8) |bvals#3| |locals#0@@4|) (|Pure.__default.IsPure#canCall| |body#3| (|Set#Union| (|Set#FromBoogieMap| (|lambda#6| (TSeq TChar) |bvars#3|)) |locals#0@@4|)))))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Bind_q (Lit DatatypeTypeType |e#0@@6|)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Assign_q (Lit DatatypeTypeType |e#0@@6|))))) (let ((|avals#3| (Lit SeqType (AST.Expr__Raw.avals (Lit DatatypeTypeType |e#0@@6|)))))
(let ((|avars#3| (Lit SeqType (AST.Expr__Raw.avars (Lit DatatypeTypeType |e#0@@6|)))))
 (=> (forall ((|x#5| T@U) ) (!  (=> (and ($Is SeqType |x#5| (TSeq TChar)) (|Seq#Contains| |avars#3| ($Box SeqType |x#5|))) (|Set#IsMember| |locals#0@@4| ($Box SeqType |x#5|)))
 :pattern ( (|Set#IsMember| |locals#0@@4| ($Box SeqType |x#5|)))
 :pattern ( (|Seq#Contains| |avars#3| ($Box SeqType |x#5|)))
)) (|Pure.__default.IsPure__Es#canCall| |avals#3| |locals#0@@4|))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Assign_q (Lit DatatypeTypeType |e#0@@6|)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.If_q (Lit DatatypeTypeType |e#0@@6|))))) (let ((|els#3| (Lit DatatypeTypeType (AST.Expr__Raw.els (Lit DatatypeTypeType |e#0@@6|)))))
(let ((|thn#3| (Lit DatatypeTypeType (AST.Expr__Raw.thn (Lit DatatypeTypeType |e#0@@6|)))))
(let ((|cond#3| (Lit DatatypeTypeType (AST.Expr__Raw.cond (Lit DatatypeTypeType |e#0@@6|)))))
 (and (|Pure.__default.IsPure#canCall| |cond#3| |locals#0@@4|) (=> (Pure.__default.IsPure ($LS $ly@@8) |cond#3| |locals#0@@4|) (and (|Pure.__default.IsPure#canCall| |thn#3| |locals#0@@4|) (=> (Pure.__default.IsPure ($LS $ly@@8) |thn#3| |locals#0@@4|) (|Pure.__default.IsPure#canCall| |els#3| |locals#0@@4|))))))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.If_q (Lit DatatypeTypeType |e#0@@6|)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Op_q (Lit DatatypeTypeType |e#0@@6|))))) (let ((|oe2#3| (Lit DatatypeTypeType (AST.Expr__Raw.oe2 (Lit DatatypeTypeType |e#0@@6|)))))
(let ((|oe1#3| (Lit DatatypeTypeType (AST.Expr__Raw.oe1 (Lit DatatypeTypeType |e#0@@6|)))))
 (and (|Pure.__default.IsPure#canCall| |oe1#3| |locals#0@@4|) (=> (Pure.__default.IsPure ($LS $ly@@8) |oe1#3| |locals#0@@4|) (|Pure.__default.IsPure#canCall| |oe2#3| |locals#0@@4|)))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Op_q (Lit DatatypeTypeType |e#0@@6|)))))) (let ((|es#3| (Lit SeqType (AST.Expr__Raw.es (Lit DatatypeTypeType |e#0@@6|)))))
(|Pure.__default.IsPure__Es#canCall| |es#3| |locals#0@@4|)))))))))))) (= (Pure.__default.IsPure ($LS $ly@@8) (Lit DatatypeTypeType |e#0@@6|) |locals#0@@4|) (ite (AST.Expr__Raw.Var_q (Lit DatatypeTypeType |e#0@@6|)) (U_2_bool (Lit boolType (bool_2_U true))) (ite (AST.Expr__Raw.Literal_q (Lit DatatypeTypeType |e#0@@6|)) (U_2_bool (Lit boolType (bool_2_U true))) (ite (AST.Expr__Raw.Bind_q (Lit DatatypeTypeType |e#0@@6|)) (let ((|body#2| (Lit DatatypeTypeType (AST.Expr__Raw.body (Lit DatatypeTypeType |e#0@@6|)))))
(let ((|bvals#2@@0| (Lit SeqType (AST.Expr__Raw.bvals (Lit DatatypeTypeType |e#0@@6|)))))
(let ((|bvars#2@@0| (Lit SeqType (AST.Expr__Raw.bvars (Lit DatatypeTypeType |e#0@@6|)))))
 (and (Pure.__default.IsPure__Es ($LS $ly@@8) |bvals#2@@0| |locals#0@@4|) (Pure.__default.IsPure ($LS $ly@@8) |body#2| (|Set#Union| (|Set#FromBoogieMap| (|lambda#6| (TSeq TChar) |bvars#2@@0|)) |locals#0@@4|)))))) (ite (AST.Expr__Raw.Assign_q (Lit DatatypeTypeType |e#0@@6|)) (let ((|avals#2@@0| (Lit SeqType (AST.Expr__Raw.avals (Lit DatatypeTypeType |e#0@@6|)))))
(let ((|avars#2@@0| (Lit SeqType (AST.Expr__Raw.avars (Lit DatatypeTypeType |e#0@@6|)))))
 (and (forall ((|x#3| T@U) ) (!  (=> (and ($Is SeqType |x#3| (TSeq TChar)) (|Seq#Contains| |avars#2@@0| ($Box SeqType |x#3|))) (|Set#IsMember| |locals#0@@4| ($Box SeqType |x#3|)))
 :pattern ( (|Set#IsMember| |locals#0@@4| ($Box SeqType |x#3|)))
 :pattern ( (|Seq#Contains| |avars#2@@0| ($Box SeqType |x#3|)))
)) (Pure.__default.IsPure__Es ($LS $ly@@8) |avals#2@@0| |locals#0@@4|)))) (ite (AST.Expr__Raw.If_q (Lit DatatypeTypeType |e#0@@6|)) (let ((|els#2| (Lit DatatypeTypeType (AST.Expr__Raw.els (Lit DatatypeTypeType |e#0@@6|)))))
(let ((|thn#2| (Lit DatatypeTypeType (AST.Expr__Raw.thn (Lit DatatypeTypeType |e#0@@6|)))))
(let ((|cond#2| (Lit DatatypeTypeType (AST.Expr__Raw.cond (Lit DatatypeTypeType |e#0@@6|)))))
 (and (and (Pure.__default.IsPure ($LS $ly@@8) |cond#2| |locals#0@@4|) (Pure.__default.IsPure ($LS $ly@@8) |thn#2| |locals#0@@4|)) (Pure.__default.IsPure ($LS $ly@@8) |els#2| |locals#0@@4|))))) (ite (AST.Expr__Raw.Op_q (Lit DatatypeTypeType |e#0@@6|)) (let ((|oe2#2| (Lit DatatypeTypeType (AST.Expr__Raw.oe2 (Lit DatatypeTypeType |e#0@@6|)))))
(let ((|oe1#2| (Lit DatatypeTypeType (AST.Expr__Raw.oe1 (Lit DatatypeTypeType |e#0@@6|)))))
 (and (Pure.__default.IsPure ($LS $ly@@8) |oe1#2| |locals#0@@4|) (Pure.__default.IsPure ($LS $ly@@8) |oe2#2| |locals#0@@4|)))) (let ((|es#2| (Lit SeqType (AST.Expr__Raw.es (Lit DatatypeTypeType |e#0@@6|)))))
(Pure.__default.IsPure__Es ($LS $ly@@8) |es#2| |locals#0@@4|)))))))))))
 :weight 3
 :pattern ( (Pure.__default.IsPure ($LS $ly@@8) (Lit DatatypeTypeType |e#0@@6|) |locals#0@@4|))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@9 T@U) (|e#0@@7| T@U) ) (!  (=> (or (|EliminateMulZero.__default.Eliminate#canCall| (Lit DatatypeTypeType |e#0@@7|)) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |e#0@@7| Tclass.AST.Expr))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Var_q (Lit DatatypeTypeType |e#0@@7|)))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Literal_q (Lit DatatypeTypeType |e#0@@7|)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Bind_q (Lit DatatypeTypeType |e#0@@7|))))) (let ((|body#3@@0| (Lit DatatypeTypeType (AST.Expr__Raw.body (Lit DatatypeTypeType |e#0@@7|)))))
(let ((|bvals#3@@0| (Lit SeqType (AST.Expr__Raw.bvals (Lit DatatypeTypeType |e#0@@7|)))))
 (and (|EliminateMulZero.__default.Eliminate__Es#canCall| |bvals#3@@0|) (|EliminateMulZero.__default.Eliminate#canCall| |body#3@@0|))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Bind_q (Lit DatatypeTypeType |e#0@@7|)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Assign_q (Lit DatatypeTypeType |e#0@@7|))))) (let ((|avals#3@@0| (Lit SeqType (AST.Expr__Raw.avals (Lit DatatypeTypeType |e#0@@7|)))))
(|EliminateMulZero.__default.Eliminate__Es#canCall| |avals#3@@0|))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Assign_q (Lit DatatypeTypeType |e#0@@7|)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.If_q (Lit DatatypeTypeType |e#0@@7|))))) (let ((|els#3@@0| (Lit DatatypeTypeType (AST.Expr__Raw.els (Lit DatatypeTypeType |e#0@@7|)))))
(let ((|thn#3@@0| (Lit DatatypeTypeType (AST.Expr__Raw.thn (Lit DatatypeTypeType |e#0@@7|)))))
(let ((|cond#3@@0| (Lit DatatypeTypeType (AST.Expr__Raw.cond (Lit DatatypeTypeType |e#0@@7|)))))
 (and (|EliminateMulZero.__default.Eliminate#canCall| |cond#3@@0|) (and (|EliminateMulZero.__default.Eliminate#canCall| |thn#3@@0|) (|EliminateMulZero.__default.Eliminate#canCall| |els#3@@0|))))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.If_q (Lit DatatypeTypeType |e#0@@7|)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Op_q (Lit DatatypeTypeType |e#0@@7|))))) (let ((|oe2#3@@0| (Lit DatatypeTypeType (AST.Expr__Raw.oe2 (Lit DatatypeTypeType |e#0@@7|)))))
(let ((|oe1#3@@0| (Lit DatatypeTypeType (AST.Expr__Raw.oe1 (Lit DatatypeTypeType |e#0@@7|)))))
(let ((|op#3| (Lit DatatypeTypeType (AST.Expr__Raw.op (Lit DatatypeTypeType |e#0@@7|)))))
 (and (|EliminateMulZero.__default.Eliminate#canCall| |oe1#3@@0|) (let ((|oe1'#3| (EliminateMulZero.__default.Eliminate ($LS $ly@@9) |oe1#3@@0|)))
 (and (|EliminateMulZero.__default.Eliminate#canCall| |oe2#3@@0|) (let ((|oe2'#3| (EliminateMulZero.__default.Eliminate ($LS $ly@@9) |oe2#3@@0|)))
 (=> (AST.BinOp.Mul_q |op#3|) (and (|EliminateMulZero.__default.IsZeroMulPure#canCall| |oe1'#3| |oe2'#3|) (=> (not (EliminateMulZero.__default.IsZeroMulPure |oe1'#3| |oe2'#3|)) (|EliminateMulZero.__default.IsZeroMulPure#canCall| |oe2'#3| |oe1'#3|)))))))))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Op_q (Lit DatatypeTypeType |e#0@@7|)))))) (let ((|es#3@@0| (Lit SeqType (AST.Expr__Raw.es (Lit DatatypeTypeType |e#0@@7|)))))
(|EliminateMulZero.__default.Eliminate__Es#canCall| |es#3@@0|)))))))))))) (= (EliminateMulZero.__default.Eliminate ($LS $ly@@9) (Lit DatatypeTypeType |e#0@@7|)) (ite (AST.Expr__Raw.Var_q (Lit DatatypeTypeType |e#0@@7|)) (Lit DatatypeTypeType |e#0@@7|) (ite (AST.Expr__Raw.Literal_q (Lit DatatypeTypeType |e#0@@7|)) (Lit DatatypeTypeType |e#0@@7|) (ite (AST.Expr__Raw.Bind_q (Lit DatatypeTypeType |e#0@@7|)) (let ((|body#2@@0| (Lit DatatypeTypeType (AST.Expr__Raw.body (Lit DatatypeTypeType |e#0@@7|)))))
(let ((|bvals#2@@1| (Lit SeqType (AST.Expr__Raw.bvals (Lit DatatypeTypeType |e#0@@7|)))))
(let ((|bvars#2@@1| (Lit SeqType (AST.Expr__Raw.bvars (Lit DatatypeTypeType |e#0@@7|)))))
(let ((|bvals'#2| (Lit SeqType (EliminateMulZero.__default.Eliminate__Es ($LS $ly@@9) |bvals#2@@1|))))
(let ((|body'#2| (Lit DatatypeTypeType (EliminateMulZero.__default.Eliminate ($LS $ly@@9) |body#2@@0|))))
(Lit DatatypeTypeType (|#AST.Expr_Raw.Bind| |bvars#2@@1| |bvals'#2| |body'#2|))))))) (ite (AST.Expr__Raw.Assign_q (Lit DatatypeTypeType |e#0@@7|)) (let ((|avals#2@@1| (Lit SeqType (AST.Expr__Raw.avals (Lit DatatypeTypeType |e#0@@7|)))))
(let ((|avars#2@@1| (Lit SeqType (AST.Expr__Raw.avars (Lit DatatypeTypeType |e#0@@7|)))))
(let ((|avals'#2| (Lit SeqType (EliminateMulZero.__default.Eliminate__Es ($LS $ly@@9) |avals#2@@1|))))
(Lit DatatypeTypeType (|#AST.Expr_Raw.Assign| |avars#2@@1| |avals'#2|))))) (ite (AST.Expr__Raw.If_q (Lit DatatypeTypeType |e#0@@7|)) (let ((|els#2@@0| (Lit DatatypeTypeType (AST.Expr__Raw.els (Lit DatatypeTypeType |e#0@@7|)))))
(let ((|thn#2@@0| (Lit DatatypeTypeType (AST.Expr__Raw.thn (Lit DatatypeTypeType |e#0@@7|)))))
(let ((|cond#2@@0| (Lit DatatypeTypeType (AST.Expr__Raw.cond (Lit DatatypeTypeType |e#0@@7|)))))
(let ((|cond'#2| (Lit DatatypeTypeType (EliminateMulZero.__default.Eliminate ($LS $ly@@9) |cond#2@@0|))))
(let ((|thn'#2| (Lit DatatypeTypeType (EliminateMulZero.__default.Eliminate ($LS $ly@@9) |thn#2@@0|))))
(let ((|els'#2| (Lit DatatypeTypeType (EliminateMulZero.__default.Eliminate ($LS $ly@@9) |els#2@@0|))))
(Lit DatatypeTypeType (|#AST.Expr_Raw.If| |cond'#2| |thn'#2| |els'#2|)))))))) (ite (AST.Expr__Raw.Op_q (Lit DatatypeTypeType |e#0@@7|)) (let ((|oe2#2@@0| (Lit DatatypeTypeType (AST.Expr__Raw.oe2 (Lit DatatypeTypeType |e#0@@7|)))))
(let ((|oe1#2@@0| (Lit DatatypeTypeType (AST.Expr__Raw.oe1 (Lit DatatypeTypeType |e#0@@7|)))))
(let ((|op#2| (Lit DatatypeTypeType (AST.Expr__Raw.op (Lit DatatypeTypeType |e#0@@7|)))))
(let ((|oe1'#2| (Lit DatatypeTypeType (EliminateMulZero.__default.Eliminate ($LS $ly@@9) |oe1#2@@0|))))
(let ((|oe2'#2| (Lit DatatypeTypeType (EliminateMulZero.__default.Eliminate ($LS $ly@@9) |oe2#2@@0|))))
(ite  (and (AST.BinOp.Mul_q |op#2|) (or (EliminateMulZero.__default.IsZeroMulPure |oe1'#2| |oe2'#2|) (EliminateMulZero.__default.IsZeroMulPure |oe2'#2| |oe1'#2|))) EliminateMulZero.__default.ZeroExpr (|#AST.Expr_Raw.Op| |op#2| |oe1'#2| |oe2'#2|))))))) (let ((|es#2@@0| (Lit SeqType (AST.Expr__Raw.es (Lit DatatypeTypeType |e#0@@7|)))))
(let ((|es'#2| (Lit SeqType (EliminateMulZero.__default.Eliminate__Es ($LS $ly@@9) |es#2@@0|))))
(Lit DatatypeTypeType (|#AST.Expr_Raw.Seq| |es'#2|)))))))))))))
 :weight 3
 :pattern ( (EliminateMulZero.__default.Eliminate ($LS $ly@@9) (Lit DatatypeTypeType |e#0@@7|)))
))))
(assert (forall ((|a#78#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#AST.Expr_Raw.Seq| |a#78#0#0|) Tclass.AST.Expr__Raw) ($Is SeqType |a#78#0#0| (TSeq Tclass.AST.Expr__Raw)))
 :pattern ( ($Is DatatypeTypeType (|#AST.Expr_Raw.Seq| |a#78#0#0|) Tclass.AST.Expr__Raw))
)))
(assert (forall ((a@@15 T@U) (b@@15 T@U) ) (!  (=> (|Set#Equal| a@@15 b@@15) (= a@@15 b@@15))
 :pattern ( (|Set#Equal| a@@15 b@@15))
)))
(assert (forall ((a@@16 T@U) (b@@16 T@U) ) (!  (=> (|Seq#Equal| a@@16 b@@16) (= a@@16 b@@16))
 :pattern ( (|Seq#Equal| a@@16 b@@16))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@10 T@U) (|e#0@@8| T@U) ) (!  (=> (or (|EliminateMulZero.__default.Eliminate#canCall| |e#0@@8|) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |e#0@@8| Tclass.AST.Expr))) ($Is DatatypeTypeType (EliminateMulZero.__default.Eliminate $ly@@10 |e#0@@8|) Tclass.AST.Expr))
 :pattern ( (EliminateMulZero.__default.Eliminate $ly@@10 |e#0@@8|))
))))
(assert (forall ((s@@13 T@U) (n@@6 Int) ) (!  (=> (and (<= 0 n@@6) (<= n@@6 (|Seq#Length| s@@13))) (= (|Seq#Length| (|Seq#Take| s@@13 n@@6)) n@@6))
 :pattern ( (|Seq#Length| (|Seq#Take| s@@13 n@@6)))
)))
(assert (forall ((f@@2 T@U) (t0@@4 T@U) (t1@@3 T@U) ) (! (= ($Is HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@4 t1@@3)) (forall ((h@@1 T@U) (bx0@@1 T@U) ) (!  (=> (and (and ($IsGoodHeap h@@1) ($IsBox bx0@@1 t0@@4)) (Requires1 t0@@4 t1@@3 h@@1 f@@2 bx0@@1)) ($IsBox (Apply1 t0@@4 t1@@3 h@@1 f@@2 bx0@@1) t1@@3))
 :pattern ( (Apply1 t0@@4 t1@@3 h@@1 f@@2 bx0@@1))
)))
 :pattern ( ($Is HandleTypeType f@@2 (Tclass._System.___hFunc1 t0@@4 t1@@3)))
)))
(assert (forall ((bx@@7 T@U) ) (!  (=> ($IsBox bx@@7 TInt) (and (= ($Box intType ($Unbox intType bx@@7)) bx@@7) ($Is intType ($Unbox intType bx@@7) TInt)))
 :pattern ( ($IsBox bx@@7 TInt))
)))
(assert (forall ((bx@@8 T@U) ) (!  (=> ($IsBox bx@@8 TBool) (and (= ($Box boolType ($Unbox boolType bx@@8)) bx@@8) ($Is boolType ($Unbox boolType bx@@8) TBool)))
 :pattern ( ($IsBox bx@@8 TBool))
)))
(assert (= (Ctor charType) 8))
(assert (forall ((bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 TChar) (and (= ($Box charType ($Unbox charType bx@@9)) bx@@9) ($Is charType ($Unbox charType bx@@9) TChar)))
 :pattern ( ($IsBox bx@@9 TChar))
)))
(assert (forall ((a@@17 T@U) (b@@17 T@U) ) (!  (=> (and (AST.Expr__Raw.Assign_q a@@17) (AST.Expr__Raw.Assign_q b@@17)) (= (|AST.Expr__Raw#Equal| a@@17 b@@17)  (and (|Seq#Equal| (AST.Expr__Raw.avars a@@17) (AST.Expr__Raw.avars b@@17)) (|Seq#Equal| (AST.Expr__Raw.avals a@@17) (AST.Expr__Raw.avals b@@17)))))
 :pattern ( (|AST.Expr__Raw#Equal| a@@17 b@@17) (AST.Expr__Raw.Assign_q a@@17))
 :pattern ( (|AST.Expr__Raw#Equal| a@@17 b@@17) (AST.Expr__Raw.Assign_q b@@17))
)))
(assert (forall ((v@@5 T@U) (t@@2 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@5) t@@2) ($Is T@@2 v@@5 t@@2))
 :pattern ( ($IsBox ($Box T@@2 v@@5) t@@2))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@11 T@U) (|e#0@@9| T@U) ) (!  (=> (or (|EliminateMulZero.__default.Eliminate#canCall| |e#0@@9|) (and (< 2 $FunctionContextHeight) ($Is DatatypeTypeType |e#0@@9| Tclass.AST.Expr))) (and (=> (not (AST.Expr__Raw.Var_q |e#0@@9|)) (=> (not (AST.Expr__Raw.Literal_q |e#0@@9|)) (and (=> (AST.Expr__Raw.Bind_q |e#0@@9|) (let ((|body#1@@1| (AST.Expr__Raw.body |e#0@@9|)))
(let ((|bvals#1@@1| (AST.Expr__Raw.bvals |e#0@@9|)))
 (and (|EliminateMulZero.__default.Eliminate__Es#canCall| |bvals#1@@1|) (|EliminateMulZero.__default.Eliminate#canCall| |body#1@@1|))))) (=> (not (AST.Expr__Raw.Bind_q |e#0@@9|)) (and (=> (AST.Expr__Raw.Assign_q |e#0@@9|) (let ((|avals#1@@1| (AST.Expr__Raw.avals |e#0@@9|)))
(|EliminateMulZero.__default.Eliminate__Es#canCall| |avals#1@@1|))) (=> (not (AST.Expr__Raw.Assign_q |e#0@@9|)) (and (=> (AST.Expr__Raw.If_q |e#0@@9|) (let ((|els#1@@1| (AST.Expr__Raw.els |e#0@@9|)))
(let ((|thn#1@@1| (AST.Expr__Raw.thn |e#0@@9|)))
(let ((|cond#1@@1| (AST.Expr__Raw.cond |e#0@@9|)))
 (and (|EliminateMulZero.__default.Eliminate#canCall| |cond#1@@1|) (and (|EliminateMulZero.__default.Eliminate#canCall| |thn#1@@1|) (|EliminateMulZero.__default.Eliminate#canCall| |els#1@@1|))))))) (=> (not (AST.Expr__Raw.If_q |e#0@@9|)) (and (=> (AST.Expr__Raw.Op_q |e#0@@9|) (let ((|oe2#1@@1| (AST.Expr__Raw.oe2 |e#0@@9|)))
(let ((|oe1#1@@1| (AST.Expr__Raw.oe1 |e#0@@9|)))
(let ((|op#1| (AST.Expr__Raw.op |e#0@@9|)))
 (and (|EliminateMulZero.__default.Eliminate#canCall| |oe1#1@@1|) (let ((|oe1'#1| (EliminateMulZero.__default.Eliminate $ly@@11 |oe1#1@@1|)))
 (and (|EliminateMulZero.__default.Eliminate#canCall| |oe2#1@@1|) (let ((|oe2'#1| (EliminateMulZero.__default.Eliminate $ly@@11 |oe2#1@@1|)))
 (=> (AST.BinOp.Mul_q |op#1|) (and (|EliminateMulZero.__default.IsZeroMulPure#canCall| |oe1'#1| |oe2'#1|) (=> (not (EliminateMulZero.__default.IsZeroMulPure |oe1'#1| |oe2'#1|)) (|EliminateMulZero.__default.IsZeroMulPure#canCall| |oe2'#1| |oe1'#1|)))))))))))) (=> (not (AST.Expr__Raw.Op_q |e#0@@9|)) (let ((|es#1@@1| (AST.Expr__Raw.es |e#0@@9|)))
(|EliminateMulZero.__default.Eliminate__Es#canCall| |es#1@@1|)))))))))))) (= (EliminateMulZero.__default.Eliminate ($LS $ly@@11) |e#0@@9|) (ite (AST.Expr__Raw.Var_q |e#0@@9|) |e#0@@9| (ite (AST.Expr__Raw.Literal_q |e#0@@9|) |e#0@@9| (ite (AST.Expr__Raw.Bind_q |e#0@@9|) (let ((|body#0@@1| (AST.Expr__Raw.body |e#0@@9|)))
(let ((|bvals#0@@2| (AST.Expr__Raw.bvals |e#0@@9|)))
(let ((|bvars#0@@1| (AST.Expr__Raw.bvars |e#0@@9|)))
(let ((|bvals'#0| (EliminateMulZero.__default.Eliminate__Es $ly@@11 |bvals#0@@2|)))
(let ((|body'#0| (EliminateMulZero.__default.Eliminate $ly@@11 |body#0@@1|)))
(|#AST.Expr_Raw.Bind| |bvars#0@@1| |bvals'#0| |body'#0|)))))) (ite (AST.Expr__Raw.Assign_q |e#0@@9|) (let ((|avals#0@@2| (AST.Expr__Raw.avals |e#0@@9|)))
(let ((|avars#0@@1| (AST.Expr__Raw.avars |e#0@@9|)))
(let ((|avals'#0| (EliminateMulZero.__default.Eliminate__Es $ly@@11 |avals#0@@2|)))
(|#AST.Expr_Raw.Assign| |avars#0@@1| |avals'#0|)))) (ite (AST.Expr__Raw.If_q |e#0@@9|) (let ((|els#0@@1| (AST.Expr__Raw.els |e#0@@9|)))
(let ((|thn#0@@1| (AST.Expr__Raw.thn |e#0@@9|)))
(let ((|cond#0@@1| (AST.Expr__Raw.cond |e#0@@9|)))
(let ((|cond'#0| (EliminateMulZero.__default.Eliminate $ly@@11 |cond#0@@1|)))
(let ((|thn'#0| (EliminateMulZero.__default.Eliminate $ly@@11 |thn#0@@1|)))
(let ((|els'#0| (EliminateMulZero.__default.Eliminate $ly@@11 |els#0@@1|)))
(|#AST.Expr_Raw.If| |cond'#0| |thn'#0| |els'#0|))))))) (ite (AST.Expr__Raw.Op_q |e#0@@9|) (let ((|oe2#0@@1| (AST.Expr__Raw.oe2 |e#0@@9|)))
(let ((|oe1#0@@1| (AST.Expr__Raw.oe1 |e#0@@9|)))
(let ((|op#0| (AST.Expr__Raw.op |e#0@@9|)))
(let ((|oe1'#0| (EliminateMulZero.__default.Eliminate $ly@@11 |oe1#0@@1|)))
(let ((|oe2'#0| (EliminateMulZero.__default.Eliminate $ly@@11 |oe2#0@@1|)))
(ite  (and (AST.BinOp.Mul_q |op#0|) (or (EliminateMulZero.__default.IsZeroMulPure |oe1'#0| |oe2'#0|) (EliminateMulZero.__default.IsZeroMulPure |oe2'#0| |oe1'#0|))) EliminateMulZero.__default.ZeroExpr (|#AST.Expr_Raw.Op| |op#0| |oe1'#0| |oe2'#0|))))))) (let ((|es#0@@6| (AST.Expr__Raw.es |e#0@@9|)))
(let ((|es'#0@@0| (EliminateMulZero.__default.Eliminate__Es $ly@@11 |es#0@@6|)))
(|#AST.Expr_Raw.Seq| |es'#0@@0|))))))))))))
 :pattern ( (EliminateMulZero.__default.Eliminate ($LS $ly@@11) |e#0@@9|))
))))
(assert (forall ((s@@14 T@U) ) (! (<= 0 (|Seq#Length| s@@14))
 :pattern ( (|Seq#Length| s@@14))
)))
(assert (forall ((s@@15 T@U) (i@@10 Int) (j@@2 Int) ) (!  (=> (and (and (<= 0 i@@10) (< i@@10 j@@2)) (<= j@@2 (|Seq#Length| s@@15))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@15 i@@10) (|Seq#Drop| s@@15 j@@2))) (|Seq#Rank| s@@15)))
 :pattern ( (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@15 i@@10) (|Seq#Drop| s@@15 j@@2))))
)))
(assert (forall ((a@@18 T@U) (b@@18 T@U) ) (!  (=> (and (AST.BinOp.Add_q a@@18) (AST.BinOp.Add_q b@@18)) (|AST.BinOp#Equal| a@@18 b@@18))
 :pattern ( (|AST.BinOp#Equal| a@@18 b@@18) (AST.BinOp.Add_q a@@18))
 :pattern ( (|AST.BinOp#Equal| a@@18 b@@18) (AST.BinOp.Add_q b@@18))
)))
(assert (forall ((a@@19 T@U) (b@@19 T@U) ) (!  (=> (and (AST.BinOp.Sub_q a@@19) (AST.BinOp.Sub_q b@@19)) (|AST.BinOp#Equal| a@@19 b@@19))
 :pattern ( (|AST.BinOp#Equal| a@@19 b@@19) (AST.BinOp.Sub_q a@@19))
 :pattern ( (|AST.BinOp#Equal| a@@19 b@@19) (AST.BinOp.Sub_q b@@19))
)))
(assert (forall ((a@@20 T@U) (b@@20 T@U) ) (!  (=> (and (AST.BinOp.Mul_q a@@20) (AST.BinOp.Mul_q b@@20)) (|AST.BinOp#Equal| a@@20 b@@20))
 :pattern ( (|AST.BinOp#Equal| a@@20 b@@20) (AST.BinOp.Mul_q a@@20))
 :pattern ( (|AST.BinOp#Equal| a@@20 b@@20) (AST.BinOp.Mul_q b@@20))
)))
(assert (forall (($heap T@U) (|$fh$0x#0| T@U) ) (! (= (AST.Expr__Raw.WellFormed__Single |$fh$0x#0|) (U_2_bool ($Unbox boolType (Apply1 Tclass.AST.Expr__Raw TBool $heap |AST.Expr__Raw.WellFormed__Single#Handle| ($Box DatatypeTypeType |$fh$0x#0|)))))
 :pattern ( (AST.Expr__Raw.WellFormed__Single |$fh$0x#0|) ($IsGoodHeap $heap))
)))
(assert (forall ((v@@6 T@U) (t0@@5 T@U) (h@@2 T@U) ) (! (= ($IsAlloc SetType v@@6 (TSet t0@@5) h@@2) (forall ((bx@@10 T@U) ) (!  (=> (|Set#IsMember| v@@6 bx@@10) ($IsAllocBox bx@@10 t0@@5 h@@2))
 :pattern ( (|Set#IsMember| v@@6 bx@@10))
)))
 :pattern ( ($IsAlloc SetType v@@6 (TSet t0@@5) h@@2))
)))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) ) (! (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) |#$T0@@1|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|))
)))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) ) (! (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)) |#$R@@2|)
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))
)))
(assert (forall ((|#$T0@@3| T@U) (|#$R@@3| T@U) ) (! (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) |#$T0@@3|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|))
)))
(assert (forall ((|#$T0@@4| T@U) (|#$R@@4| T@U) ) (! (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) |#$R@@4|)
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|))
)))
(assert (forall ((|#$T0@@5| T@U) (|#$R@@5| T@U) ) (! (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@5| |#$R@@5|)) |#$T0@@5|)
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@5| |#$R@@5|))
)))
(assert (forall ((|#$T0@@6| T@U) (|#$R@@6| T@U) ) (! (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@6| |#$R@@6|)) |#$R@@6|)
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@6| |#$R@@6|))
)))
(assert (forall ((|a#46#0#0| T@U) (|a#46#1#0| T@U) ) (! (= (DatatypeCtorId (|#AST.Expr_Raw.Assign| |a#46#0#0| |a#46#1#0|)) |##AST.Expr_Raw.Assign|)
 :pattern ( (|#AST.Expr_Raw.Assign| |a#46#0#0| |a#46#1#0|))
)))
(assert (forall ((|a#50#0#0| T@U) (|a#50#1#0| T@U) ) (! (= (AST.Expr__Raw.avars (|#AST.Expr_Raw.Assign| |a#50#0#0| |a#50#1#0|)) |a#50#0#0|)
 :pattern ( (|#AST.Expr_Raw.Assign| |a#50#0#0| |a#50#1#0|))
)))
(assert (forall ((|a#53#0#0| T@U) (|a#53#1#0| T@U) ) (! (= (AST.Expr__Raw.avals (|#AST.Expr_Raw.Assign| |a#53#0#0| |a#53#1#0|)) |a#53#1#0|)
 :pattern ( (|#AST.Expr_Raw.Assign| |a#53#0#0| |a#53#1#0|))
)))
(assert (forall (($ly@@12 T@U) (|es#0@@7| T@U) (|locals#0@@5| T@U) ) (!  (=> (or (|Pure.__default.IsPure__Es#canCall| (Lit SeqType |es#0@@7|) (Lit SetType |locals#0@@5|)) (and ($Is SeqType |es#0@@7| (TSeq Tclass.AST.Expr)) ($Is SetType |locals#0@@5| (TSet (TSeq TChar))))) (and (=> (not (|Seq#Equal| |es#0@@7| |Seq#Empty|)) (and (|Pure.__default.IsPure#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit SeqType |es#0@@7|) (LitInt 0))) (Lit SetType |locals#0@@5|)) (=> (Pure.__default.IsPure ($LS $ly@@12) ($Unbox DatatypeTypeType (|Seq#Index| (Lit SeqType |es#0@@7|) (LitInt 0))) (Lit SetType |locals#0@@5|)) (|Pure.__default.IsPure__Es#canCall| (Lit SeqType (|Seq#Drop| (Lit SeqType |es#0@@7|) (LitInt 1))) (Lit SetType |locals#0@@5|))))) (= (Pure.__default.IsPure__Es ($LS $ly@@12) (Lit SeqType |es#0@@7|) (Lit SetType |locals#0@@5|)) (ite (|Seq#Equal| |es#0@@7| |Seq#Empty|) true  (and (Pure.__default.IsPure ($LS $ly@@12) ($Unbox DatatypeTypeType (|Seq#Index| (Lit SeqType |es#0@@7|) (LitInt 0))) (Lit SetType |locals#0@@5|)) (Pure.__default.IsPure__Es ($LS $ly@@12) (Lit SeqType (|Seq#Drop| (Lit SeqType |es#0@@7|) (LitInt 1))) (Lit SetType |locals#0@@5|)))))))
 :weight 3
 :pattern ( (Pure.__default.IsPure__Es ($LS $ly@@12) (Lit SeqType |es#0@@7|) (Lit SetType |locals#0@@5|)))
)))
(assert (forall ((|e#0@@10| T@U) ) (!  (=> ($Is DatatypeTypeType |e#0@@10| Tclass.AST.Expr__Raw) (= (|AST.Expr__Raw.WellFormed__Single#requires| |e#0@@10|) true))
 :pattern ( (|AST.Expr__Raw.WellFormed__Single#requires| |e#0@@10|))
)))
(assert (forall ((v@@7 T@U) (t0@@6 T@U) (h@@3 T@U) ) (! (= ($IsAlloc SeqType v@@7 (TSeq t0@@6) h@@3) (forall ((i@@11 Int) ) (!  (=> (and (<= 0 i@@11) (< i@@11 (|Seq#Length| v@@7))) ($IsAllocBox (|Seq#Index| v@@7 i@@11) t0@@6 h@@3))
 :pattern ( (|Seq#Index| v@@7 i@@11))
)))
 :pattern ( ($IsAlloc SeqType v@@7 (TSeq t0@@6) h@@3))
)))
(assert (forall ((|a#37#0#0| T@U) (|a#37#1#0| T@U) (|a#37#2#0| T@U) ) (! (= (|#AST.Expr_Raw.Bind| (Lit SeqType |a#37#0#0|) (Lit SeqType |a#37#1#0|) (Lit DatatypeTypeType |a#37#2#0|)) (Lit DatatypeTypeType (|#AST.Expr_Raw.Bind| |a#37#0#0| |a#37#1#0| |a#37#2#0|)))
 :pattern ( (|#AST.Expr_Raw.Bind| (Lit SeqType |a#37#0#0|) (Lit SeqType |a#37#1#0|) (Lit DatatypeTypeType |a#37#2#0|)))
)))
(assert (forall ((|a#59#0#0| T@U) (|a#59#1#0| T@U) (|a#59#2#0| T@U) ) (! (= (|#AST.Expr_Raw.If| (Lit DatatypeTypeType |a#59#0#0|) (Lit DatatypeTypeType |a#59#1#0|) (Lit DatatypeTypeType |a#59#2#0|)) (Lit DatatypeTypeType (|#AST.Expr_Raw.If| |a#59#0#0| |a#59#1#0| |a#59#2#0|)))
 :pattern ( (|#AST.Expr_Raw.If| (Lit DatatypeTypeType |a#59#0#0|) (Lit DatatypeTypeType |a#59#1#0|) (Lit DatatypeTypeType |a#59#2#0|)))
)))
(assert (forall ((|a#69#0#0| T@U) (|a#69#1#0| T@U) (|a#69#2#0| T@U) ) (! (= (|#AST.Expr_Raw.Op| (Lit DatatypeTypeType |a#69#0#0|) (Lit DatatypeTypeType |a#69#1#0|) (Lit DatatypeTypeType |a#69#2#0|)) (Lit DatatypeTypeType (|#AST.Expr_Raw.Op| |a#69#0#0| |a#69#1#0| |a#69#2#0|)))
 :pattern ( (|#AST.Expr_Raw.Op| (Lit DatatypeTypeType |a#69#0#0|) (Lit DatatypeTypeType |a#69#1#0|) (Lit DatatypeTypeType |a#69#2#0|)))
)))
(assert (forall ((t@@3 T@U) ) (! (= (Inv0_TSet (TSet t@@3)) t@@3)
 :pattern ( (TSet t@@3))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Tag (TSet t@@4)) TagSet)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((t@@5 T@U) ) (! (= (Inv0_TSeq (TSeq t@@5)) t@@5)
 :pattern ( (TSeq t@@5))
)))
(assert (forall ((t@@6 T@U) ) (! (= (Tag (TSeq t@@6)) TagSeq)
 :pattern ( (TSeq t@@6))
)))
(assert (forall ((|a#22#0#0| T@U) ) (! (= (DatatypeCtorId (|#AST.Expr_Raw.Var| |a#22#0#0|)) |##AST.Expr_Raw.Var|)
 :pattern ( (|#AST.Expr_Raw.Var| |a#22#0#0|))
)))
(assert (forall ((|a#26#0#0| T@U) ) (! (= (AST.Expr__Raw.name (|#AST.Expr_Raw.Var| |a#26#0#0|)) |a#26#0#0|)
 :pattern ( (|#AST.Expr_Raw.Var| |a#26#0#0|))
)))
(assert (forall ((|a#29#0#0| Int) ) (! (= (DatatypeCtorId (|#AST.Expr_Raw.Literal| |a#29#0#0|)) |##AST.Expr_Raw.Literal|)
 :pattern ( (|#AST.Expr_Raw.Literal| |a#29#0#0|))
)))
(assert (forall ((|a#33#0#0| Int) ) (! (= (AST.Expr__Raw.n (|#AST.Expr_Raw.Literal| |a#33#0#0|)) |a#33#0#0|)
 :pattern ( (|#AST.Expr_Raw.Literal| |a#33#0#0|))
)))
(assert (forall ((|a#76#0#0| T@U) ) (! (= (DatatypeCtorId (|#AST.Expr_Raw.Seq| |a#76#0#0|)) |##AST.Expr_Raw.Seq|)
 :pattern ( (|#AST.Expr_Raw.Seq| |a#76#0#0|))
)))
(assert (forall ((|a#80#0#0| T@U) ) (! (= (AST.Expr__Raw.es (|#AST.Expr_Raw.Seq| |a#80#0#0|)) |a#80#0#0|)
 :pattern ( (|#AST.Expr_Raw.Seq| |a#80#0#0|))
)))
(assert (forall ((x@@10 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@10)) x@@10)
 :pattern ( ($Box T@@3 x@@10))
)))
(assert (forall ((|a#40#0#0| T@U) (|a#40#1#0| T@U) (|a#40#2#0| T@U) ) (! (< (|Seq#Rank| |a#40#0#0|) (DtRank (|#AST.Expr_Raw.Bind| |a#40#0#0| |a#40#1#0| |a#40#2#0|)))
 :pattern ( (|#AST.Expr_Raw.Bind| |a#40#0#0| |a#40#1#0| |a#40#2#0|))
)))
(assert (forall ((|a#43#0#0| T@U) (|a#43#1#0| T@U) (|a#43#2#0| T@U) ) (! (< (|Seq#Rank| |a#43#1#0|) (DtRank (|#AST.Expr_Raw.Bind| |a#43#0#0| |a#43#1#0| |a#43#2#0|)))
 :pattern ( (|#AST.Expr_Raw.Bind| |a#43#0#0| |a#43#1#0| |a#43#2#0|))
)))
(assert (forall ((|a#45#0#0| T@U) (|a#45#1#0| T@U) (|a#45#2#0| T@U) ) (! (< (DtRank |a#45#2#0|) (DtRank (|#AST.Expr_Raw.Bind| |a#45#0#0| |a#45#1#0| |a#45#2#0|)))
 :pattern ( (|#AST.Expr_Raw.Bind| |a#45#0#0| |a#45#1#0| |a#45#2#0|))
)))
(assert (forall ((|a#61#0#0| T@U) (|a#61#1#0| T@U) (|a#61#2#0| T@U) ) (! (< (DtRank |a#61#0#0|) (DtRank (|#AST.Expr_Raw.If| |a#61#0#0| |a#61#1#0| |a#61#2#0|)))
 :pattern ( (|#AST.Expr_Raw.If| |a#61#0#0| |a#61#1#0| |a#61#2#0|))
)))
(assert (forall ((|a#63#0#0| T@U) (|a#63#1#0| T@U) (|a#63#2#0| T@U) ) (! (< (DtRank |a#63#1#0|) (DtRank (|#AST.Expr_Raw.If| |a#63#0#0| |a#63#1#0| |a#63#2#0|)))
 :pattern ( (|#AST.Expr_Raw.If| |a#63#0#0| |a#63#1#0| |a#63#2#0|))
)))
(assert (forall ((|a#65#0#0| T@U) (|a#65#1#0| T@U) (|a#65#2#0| T@U) ) (! (< (DtRank |a#65#2#0|) (DtRank (|#AST.Expr_Raw.If| |a#65#0#0| |a#65#1#0| |a#65#2#0|)))
 :pattern ( (|#AST.Expr_Raw.If| |a#65#0#0| |a#65#1#0| |a#65#2#0|))
)))
(assert (forall ((|a#71#0#0| T@U) (|a#71#1#0| T@U) (|a#71#2#0| T@U) ) (! (< (DtRank |a#71#0#0|) (DtRank (|#AST.Expr_Raw.Op| |a#71#0#0| |a#71#1#0| |a#71#2#0|)))
 :pattern ( (|#AST.Expr_Raw.Op| |a#71#0#0| |a#71#1#0| |a#71#2#0|))
)))
(assert (forall ((|a#73#0#0| T@U) (|a#73#1#0| T@U) (|a#73#2#0| T@U) ) (! (< (DtRank |a#73#1#0|) (DtRank (|#AST.Expr_Raw.Op| |a#73#0#0| |a#73#1#0| |a#73#2#0|)))
 :pattern ( (|#AST.Expr_Raw.Op| |a#73#0#0| |a#73#1#0| |a#73#2#0|))
)))
(assert (forall ((|a#75#0#0| T@U) (|a#75#1#0| T@U) (|a#75#2#0| T@U) ) (! (< (DtRank |a#75#2#0|) (DtRank (|#AST.Expr_Raw.Op| |a#75#0#0| |a#75#1#0| |a#75#2#0|)))
 :pattern ( (|#AST.Expr_Raw.Op| |a#75#0#0| |a#75#1#0| |a#75#2#0|))
)))
(assert (forall (($heap@@0 T@U) (|$fh$0x#0@@0| T@U) ) (! (= (Requires1 Tclass.AST.Expr__Raw TBool $heap@@0 |AST.Expr__Raw.WellFormed__Single#Handle| |$fh$0x#0@@0|) (|AST.Expr__Raw.WellFormed__Single#requires| ($Unbox DatatypeTypeType |$fh$0x#0@@0|)))
 :pattern ( (Requires1 Tclass.AST.Expr__Raw TBool $heap@@0 |AST.Expr__Raw.WellFormed__Single#Handle| |$fh$0x#0@@0|))
)))
(assert (forall ((|a#52#0#0| T@U) (|a#52#1#0| T@U) ) (! (< (|Seq#Rank| |a#52#0#0|) (DtRank (|#AST.Expr_Raw.Assign| |a#52#0#0| |a#52#1#0|)))
 :pattern ( (|#AST.Expr_Raw.Assign| |a#52#0#0| |a#52#1#0|))
)))
(assert (forall ((|a#55#0#0| T@U) (|a#55#1#0| T@U) ) (! (< (|Seq#Rank| |a#55#1#0|) (DtRank (|#AST.Expr_Raw.Assign| |a#55#0#0| |a#55#1#0|)))
 :pattern ( (|#AST.Expr_Raw.Assign| |a#55#0#0| |a#55#1#0|))
)))
(assert (forall (($ly@@13 T@U) (|e#0@@11| T@U) ) (! (= (EliminateMulZero.__default.Eliminate ($LS $ly@@13) |e#0@@11|) (EliminateMulZero.__default.Eliminate $ly@@13 |e#0@@11|))
 :pattern ( (EliminateMulZero.__default.Eliminate ($LS $ly@@13) |e#0@@11|))
)))
(assert (forall (($ly@@14 T@U) (|es#0@@8| T@U) ) (! (= (EliminateMulZero.__default.Eliminate__Es ($LS $ly@@14) |es#0@@8|) (EliminateMulZero.__default.Eliminate__Es $ly@@14 |es#0@@8|))
 :pattern ( (EliminateMulZero.__default.Eliminate__Es ($LS $ly@@14) |es#0@@8|))
)))
(assert (forall ((a@@21 T@U) (b@@21 T@U) ) (! (= (|Set#Union| a@@21 (|Set#Union| a@@21 b@@21)) (|Set#Union| a@@21 b@@21))
 :pattern ( (|Set#Union| a@@21 (|Set#Union| a@@21 b@@21)))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|e1#0| T@U) (|e2#0| T@U) ) (!  (=> (or (|EliminateMulZero.__default.IsZeroMulPure#canCall| |e1#0| |e2#0|) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType |e1#0| Tclass.AST.Expr) ($Is DatatypeTypeType |e2#0| Tclass.AST.Expr)))) (and (and (and (|$IsA#AST.Expr__Raw| |e1#0|) (|$IsA#AST.Expr__Raw| EliminateMulZero.__default.ZeroExpr)) (=> (|AST.Expr__Raw#Equal| |e1#0| EliminateMulZero.__default.ZeroExpr) (|Pure.__default.IsPure#canCall| |e2#0| (Lit SetType |Set#Empty|)))) (= (EliminateMulZero.__default.IsZeroMulPure |e1#0| |e2#0|)  (and (|AST.Expr__Raw#Equal| |e1#0| EliminateMulZero.__default.ZeroExpr) (Pure.__default.IsPure ($LS $LZ) |e2#0| (Lit SetType |Set#Empty|))))))
 :pattern ( (EliminateMulZero.__default.IsZeroMulPure |e1#0| |e2#0|))
))))
(assert (forall ((|#$T0@@7| T@U) (|#$R@@7| T@U) (|f#0@@1| T@U) ) (! (= ($Is HandleTypeType |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@7| |#$R@@7|))  (and ($Is HandleTypeType |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|)) (forall ((|x0#0| T@U) )  (=> ($IsBox |x0#0| |#$T0@@7|) (Requires1 |#$T0@@7| |#$R@@7| $OneHeap |f#0@@1| |x0#0|)))))
 :pattern ( ($Is HandleTypeType |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@7| |#$R@@7|)))
)))
(assert (forall ((|#$T0@@8| T@U) (|#$R@@8| T@U) (|f#0@@2| T@U) ) (! (= ($Is HandleTypeType |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|))  (and ($Is HandleTypeType |f#0@@2| (Tclass._System.___hFunc1 |#$T0@@8| |#$R@@8|)) (forall ((|x0#0@@0| T@U) )  (=> ($IsBox |x0#0@@0| |#$T0@@8|) (|Set#Equal| (Reads1 |#$T0@@8| |#$R@@8| $OneHeap |f#0@@2| |x0#0@@0|) |Set#Empty|)))))
 :pattern ( ($Is HandleTypeType |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|)))
)))
(assert (forall ((|a#31#0#0| Int) ) (! (= ($Is DatatypeTypeType (|#AST.Expr_Raw.Literal| |a#31#0#0|) Tclass.AST.Expr__Raw) ($Is intType (int_2_U |a#31#0#0|) TInt))
 :pattern ( ($Is DatatypeTypeType (|#AST.Expr_Raw.Literal| |a#31#0#0|) Tclass.AST.Expr__Raw))
)))
(assert  (and (and (and (and (= (Ctor refType) 9) (= (Ctor FieldType) 10)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 11))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((f@@3 T@U) (t0@@7 T@U) (t1@@4 T@U) (h@@4 T@U) ) (!  (=> ($IsGoodHeap h@@4) (= ($IsAlloc HandleTypeType f@@3 (Tclass._System.___hFunc1 t0@@7 t1@@4) h@@4) (forall ((bx0@@2 T@U) ) (!  (=> (and (and ($IsBox bx0@@2 t0@@7) ($IsAllocBox bx0@@2 t0@@7 h@@4)) (Requires1 t0@@7 t1@@4 h@@4 f@@3 bx0@@2)) (forall ((r T@U) ) (!  (=> (and (or (not (= r null)) (not true)) (|Set#IsMember| (Reads1 t0@@7 t1@@4 h@@4 f@@3 bx0@@2) ($Box refType r))) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) h@@4 r) alloc))))
 :pattern ( (|Set#IsMember| (Reads1 t0@@7 t1@@4 h@@4 f@@3 bx0@@2) ($Box refType r)))
)))
 :pattern ( (Apply1 t0@@7 t1@@4 h@@4 f@@3 bx0@@2))
 :pattern ( (Reads1 t0@@7 t1@@4 h@@4 f@@3 bx0@@2))
))))
 :pattern ( ($IsAlloc HandleTypeType f@@3 (Tclass._System.___hFunc1 t0@@7 t1@@4) h@@4))
)))
(assert (forall ((|#$T0@@9| T@U) (|#$R@@9| T@U) (bx@@11 T@U) ) (!  (=> ($IsBox bx@@11 (Tclass._System.___hFunc1 |#$T0@@9| |#$R@@9|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@11)) bx@@11) ($Is HandleTypeType ($Unbox HandleTypeType bx@@11) (Tclass._System.___hFunc1 |#$T0@@9| |#$R@@9|))))
 :pattern ( ($IsBox bx@@11 (Tclass._System.___hFunc1 |#$T0@@9| |#$R@@9|)))
)))
(assert (forall ((|#$T0@@10| T@U) (|#$R@@10| T@U) (bx@@12 T@U) ) (!  (=> ($IsBox bx@@12 (Tclass._System.___hPartialFunc1 |#$T0@@10| |#$R@@10|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@12)) bx@@12) ($Is HandleTypeType ($Unbox HandleTypeType bx@@12) (Tclass._System.___hPartialFunc1 |#$T0@@10| |#$R@@10|))))
 :pattern ( ($IsBox bx@@12 (Tclass._System.___hPartialFunc1 |#$T0@@10| |#$R@@10|)))
)))
(assert (forall ((|#$T0@@11| T@U) (|#$R@@11| T@U) (bx@@13 T@U) ) (!  (=> ($IsBox bx@@13 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) (and (= ($Box HandleTypeType ($Unbox HandleTypeType bx@@13)) bx@@13) ($Is HandleTypeType ($Unbox HandleTypeType bx@@13) (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|))))
 :pattern ( ($IsBox bx@@13 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)))
)))
(assert (forall ((|a#28#0#0| T@U) ) (! (< (|Seq#Rank| |a#28#0#0|) (DtRank (|#AST.Expr_Raw.Var| |a#28#0#0|)))
 :pattern ( (|#AST.Expr_Raw.Var| |a#28#0#0|))
)))
(assert (forall ((|a#82#0#0| T@U) ) (! (< (|Seq#Rank| |a#82#0#0|) (DtRank (|#AST.Expr_Raw.Seq| |a#82#0#0|)))
 :pattern ( (|#AST.Expr_Raw.Seq| |a#82#0#0|))
)))
(assert  (and (forall ((t0@@8 T@T) (t1@@5 T@T) (t2 T@T) (val@@1 T@U) (m@@2 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@8 t1@@5 t2 (MapType1Store t0@@8 t1@@5 t2 m@@2 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@1 T@T) (u1@@1 T@T) (u2 T@T) (val@@2 T@U) (m@@3 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@1 u1@@1 u2 (MapType1Store u0@@1 u1@@1 u2 m@@3 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@1 u1@@1 u2 m@@3 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@2 T@T) (u1@@2 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@4 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@2 u1@@2 u2@@0 (MapType1Store u0@@2 u1@@2 u2@@0 m@@4 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@2 u1@@2 u2@@0 m@@4 y0@@1 y1@@0)))
 :weight 0
)))))
(assert (forall ((|l#0@@0| T@U) (|l#1@@0| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@0| |l#1@@0| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0@@0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@0| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@0| |l#1@@0| |l#2| |l#3|) $o $f))
)))
(assert (forall ((s@@16 T@U) (val@@4 T@U) ) (!  (and (= (|Seq#Build_inv0| (|Seq#Build| s@@16 val@@4)) s@@16) (= (|Seq#Build_inv1| (|Seq#Build| s@@16 val@@4)) val@@4))
 :pattern ( (|Seq#Build| s@@16 val@@4))
)))
(assert (forall ((|#$T0@@12| T@U) (|#$R@@12| T@U) ) (!  (and (= (Tag (Tclass._System.___hFunc1 |#$T0@@12| |#$R@@12|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0@@12| |#$R@@12|)) |tytagFamily$_#Func1|))
 :pattern ( (Tclass._System.___hFunc1 |#$T0@@12| |#$R@@12|))
)))
(assert (forall ((|#$T0@@13| T@U) (|#$R@@13| T@U) ) (!  (and (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|)) Tagclass._System.___hPartialFunc1) (= (TagFamily (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|)) |tytagFamily$_#PartialFunc1|))
 :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|))
)))
(assert (forall ((|#$T0@@14| T@U) (|#$R@@14| T@U) ) (!  (and (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|)) Tagclass._System.___hTotalFunc1) (= (TagFamily (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|)) |tytagFamily$_#TotalFunc1|))
 :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|))
)))
(assert (forall ((d@@21 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (AST.Expr__Raw.Literal_q d@@21) ($IsAlloc DatatypeTypeType d@@21 Tclass.AST.Expr__Raw $h@@3))) ($IsAlloc intType (int_2_U (AST.Expr__Raw.n d@@21)) TInt $h@@3))
 :pattern ( ($IsAlloc intType (int_2_U (AST.Expr__Raw.n d@@21)) TInt $h@@3))
)))
(assert (forall ((d@@22 T@U) ) (!  (=> ($Is DatatypeTypeType d@@22 Tclass.AST.BinOp) (or (or (AST.BinOp.Add_q d@@22) (AST.BinOp.Sub_q d@@22)) (AST.BinOp.Mul_q d@@22)))
 :pattern ( (AST.BinOp.Mul_q d@@22) ($Is DatatypeTypeType d@@22 Tclass.AST.BinOp))
 :pattern ( (AST.BinOp.Sub_q d@@22) ($Is DatatypeTypeType d@@22 Tclass.AST.BinOp))
 :pattern ( (AST.BinOp.Add_q d@@22) ($Is DatatypeTypeType d@@22 Tclass.AST.BinOp))
)))
(assert (forall ((t0@@9 T@U) (t1@@6 T@U) (heap@@0 T@U) (f@@4 T@U) (bx0@@3 T@U) ) (!  (=> (and (and ($IsGoodHeap heap@@0) (and ($IsBox bx0@@3 t0@@9) ($Is HandleTypeType f@@4 (Tclass._System.___hFunc1 t0@@9 t1@@6)))) (|Set#Equal| (Reads1 t0@@9 t1@@6 $OneHeap f@@4 bx0@@3) |Set#Empty|)) (= (Requires1 t0@@9 t1@@6 $OneHeap f@@4 bx0@@3) (Requires1 t0@@9 t1@@6 heap@@0 f@@4 bx0@@3)))
 :pattern ( (Requires1 t0@@9 t1@@6 $OneHeap f@@4 bx0@@3) ($IsGoodHeap heap@@0))
 :pattern ( (Requires1 t0@@9 t1@@6 heap@@0 f@@4 bx0@@3))
)))
(assert (forall ((s@@17 T@U) (n@@7 Int) (x@@11 T@U) ) (! (= (|Seq#Contains| (|Seq#Drop| s@@17 n@@7) x@@11) (exists ((i@@12 Int) ) (!  (and (and (and (<= 0 n@@7) (<= n@@7 i@@12)) (< i@@12 (|Seq#Length| s@@17))) (= (|Seq#Index| s@@17 i@@12) x@@11))
 :pattern ( (|Seq#Index| s@@17 i@@12))
)))
 :pattern ( (|Seq#Contains| (|Seq#Drop| s@@17 n@@7) x@@11))
)))
(assert (forall ((bx@@14 T@U) (t@@7 T@U) ) (!  (=> ($IsBox bx@@14 (TSet t@@7)) (and (= ($Box SetType ($Unbox SetType bx@@14)) bx@@14) ($Is SetType ($Unbox SetType bx@@14) (TSet t@@7))))
 :pattern ( ($IsBox bx@@14 (TSet t@@7)))
)))
(assert (forall ((bx@@15 T@U) (t@@8 T@U) ) (!  (=> ($IsBox bx@@15 (TSeq t@@8)) (and (= ($Box SeqType ($Unbox SeqType bx@@15)) bx@@15) ($Is SeqType ($Unbox SeqType bx@@15) (TSeq t@@8))))
 :pattern ( ($IsBox bx@@15 (TSeq t@@8)))
)))
(assert (forall (($bx T@U) ($heap@@1 T@U) (|$fh$0x#0@@1| T@U) ) (! (= (|Set#IsMember| (Reads1 Tclass.AST.Expr__Raw TBool $heap@@1 |AST.Expr__Raw.WellFormed__Single#Handle| |$fh$0x#0@@1|) $bx) false)
 :pattern ( (|Set#IsMember| (Reads1 Tclass.AST.Expr__Raw TBool $heap@@1 |AST.Expr__Raw.WellFormed__Single#Handle| |$fh$0x#0@@1|) $bx))
)))
(assert (forall ((d@@23 T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) ($Is DatatypeTypeType d@@23 Tclass.AST.BinOp)) ($IsAlloc DatatypeTypeType d@@23 Tclass.AST.BinOp $h@@4))
 :pattern ( ($IsAlloc DatatypeTypeType d@@23 Tclass.AST.BinOp $h@@4))
)))
(assert (forall ((d@@24 T@U) ($h@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) ($Is DatatypeTypeType d@@24 Tclass.AST.Expr__Raw)) ($IsAlloc DatatypeTypeType d@@24 Tclass.AST.Expr__Raw $h@@5))
 :pattern ( ($IsAlloc DatatypeTypeType d@@24 Tclass.AST.Expr__Raw $h@@5))
)))
(assert (= (Tag Tclass.AST.Expr) Tagclass.AST.Expr))
(assert (= (TagFamily Tclass.AST.Expr) tytagFamily$Expr))
(assert (= (Tag Tclass.AST.Expr__Raw) Tagclass.AST.Expr__Raw))
(assert (= (TagFamily Tclass.AST.Expr__Raw) tytagFamily$Expr_Raw))
(assert (= (Tag Tclass.AST.BinOp) Tagclass.AST.BinOp))
(assert (= (TagFamily Tclass.AST.BinOp) tytagFamily$BinOp))
(assert (forall (($ly@@15 T@U) (|e#0@@12| T@U) (|locals#0@@6| T@U) ) (!  (=> (or (|Pure.__default.IsPure#canCall| (Lit DatatypeTypeType |e#0@@12|) (Lit SetType |locals#0@@6|)) (and ($Is DatatypeTypeType |e#0@@12| Tclass.AST.Expr) ($Is SetType |locals#0@@6| (TSet (TSeq TChar))))) (and (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Var_q (Lit DatatypeTypeType |e#0@@12|)))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Literal_q (Lit DatatypeTypeType |e#0@@12|)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Bind_q (Lit DatatypeTypeType |e#0@@12|))))) (let ((|body#5| (Lit DatatypeTypeType (AST.Expr__Raw.body (Lit DatatypeTypeType |e#0@@12|)))))
(let ((|bvals#5| (Lit SeqType (AST.Expr__Raw.bvals (Lit DatatypeTypeType |e#0@@12|)))))
(let ((|bvars#5| (Lit SeqType (AST.Expr__Raw.bvars (Lit DatatypeTypeType |e#0@@12|)))))
 (and (|Pure.__default.IsPure__Es#canCall| |bvals#5| (Lit SetType |locals#0@@6|)) (=> (Pure.__default.IsPure__Es ($LS $ly@@15) |bvals#5| (Lit SetType |locals#0@@6|)) (|Pure.__default.IsPure#canCall| |body#5| (|Set#Union| (|Set#FromBoogieMap| (|lambda#6| (TSeq TChar) |bvars#5|)) |locals#0@@6|)))))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Bind_q (Lit DatatypeTypeType |e#0@@12|)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Assign_q (Lit DatatypeTypeType |e#0@@12|))))) (let ((|avals#5| (Lit SeqType (AST.Expr__Raw.avals (Lit DatatypeTypeType |e#0@@12|)))))
(let ((|avars#5| (Lit SeqType (AST.Expr__Raw.avars (Lit DatatypeTypeType |e#0@@12|)))))
 (=> (forall ((|x#8| T@U) ) (!  (=> (and ($Is SeqType |x#8| (TSeq TChar)) (|Seq#Contains| |avars#5| ($Box SeqType |x#8|))) (|Set#IsMember| (Lit SetType |locals#0@@6|) ($Box SeqType |x#8|)))
 :pattern ( (|Set#IsMember| |locals#0@@6| ($Box SeqType |x#8|)))
 :pattern ( (|Seq#Contains| |avars#5| ($Box SeqType |x#8|)))
)) (|Pure.__default.IsPure__Es#canCall| |avals#5| (Lit SetType |locals#0@@6|)))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Assign_q (Lit DatatypeTypeType |e#0@@12|)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.If_q (Lit DatatypeTypeType |e#0@@12|))))) (let ((|els#5| (Lit DatatypeTypeType (AST.Expr__Raw.els (Lit DatatypeTypeType |e#0@@12|)))))
(let ((|thn#5| (Lit DatatypeTypeType (AST.Expr__Raw.thn (Lit DatatypeTypeType |e#0@@12|)))))
(let ((|cond#5| (Lit DatatypeTypeType (AST.Expr__Raw.cond (Lit DatatypeTypeType |e#0@@12|)))))
 (and (|Pure.__default.IsPure#canCall| |cond#5| (Lit SetType |locals#0@@6|)) (=> (Pure.__default.IsPure ($LS $ly@@15) |cond#5| (Lit SetType |locals#0@@6|)) (and (|Pure.__default.IsPure#canCall| |thn#5| (Lit SetType |locals#0@@6|)) (=> (Pure.__default.IsPure ($LS $ly@@15) |thn#5| (Lit SetType |locals#0@@6|)) (|Pure.__default.IsPure#canCall| |els#5| (Lit SetType |locals#0@@6|)))))))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.If_q (Lit DatatypeTypeType |e#0@@12|)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Op_q (Lit DatatypeTypeType |e#0@@12|))))) (let ((|oe2#5| (Lit DatatypeTypeType (AST.Expr__Raw.oe2 (Lit DatatypeTypeType |e#0@@12|)))))
(let ((|oe1#5| (Lit DatatypeTypeType (AST.Expr__Raw.oe1 (Lit DatatypeTypeType |e#0@@12|)))))
 (and (|Pure.__default.IsPure#canCall| |oe1#5| (Lit SetType |locals#0@@6|)) (=> (Pure.__default.IsPure ($LS $ly@@15) |oe1#5| (Lit SetType |locals#0@@6|)) (|Pure.__default.IsPure#canCall| |oe2#5| (Lit SetType |locals#0@@6|))))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Op_q (Lit DatatypeTypeType |e#0@@12|)))))) (let ((|es#5| (Lit SeqType (AST.Expr__Raw.es (Lit DatatypeTypeType |e#0@@12|)))))
(|Pure.__default.IsPure__Es#canCall| |es#5| (Lit SetType |locals#0@@6|))))))))))))) (= (Pure.__default.IsPure ($LS $ly@@15) (Lit DatatypeTypeType |e#0@@12|) (Lit SetType |locals#0@@6|)) (ite (AST.Expr__Raw.Var_q (Lit DatatypeTypeType |e#0@@12|)) (U_2_bool (Lit boolType (bool_2_U true))) (ite (AST.Expr__Raw.Literal_q (Lit DatatypeTypeType |e#0@@12|)) (U_2_bool (Lit boolType (bool_2_U true))) (ite (AST.Expr__Raw.Bind_q (Lit DatatypeTypeType |e#0@@12|)) (let ((|body#4| (Lit DatatypeTypeType (AST.Expr__Raw.body (Lit DatatypeTypeType |e#0@@12|)))))
(let ((|bvals#4| (Lit SeqType (AST.Expr__Raw.bvals (Lit DatatypeTypeType |e#0@@12|)))))
(let ((|bvars#4| (Lit SeqType (AST.Expr__Raw.bvars (Lit DatatypeTypeType |e#0@@12|)))))
 (and (Pure.__default.IsPure__Es ($LS $ly@@15) |bvals#4| (Lit SetType |locals#0@@6|)) (Pure.__default.IsPure ($LS $ly@@15) |body#4| (|Set#Union| (|Set#FromBoogieMap| (|lambda#6| (TSeq TChar) |bvars#4|)) |locals#0@@6|)))))) (ite (AST.Expr__Raw.Assign_q (Lit DatatypeTypeType |e#0@@12|)) (let ((|avals#4| (Lit SeqType (AST.Expr__Raw.avals (Lit DatatypeTypeType |e#0@@12|)))))
(let ((|avars#4| (Lit SeqType (AST.Expr__Raw.avars (Lit DatatypeTypeType |e#0@@12|)))))
 (and (forall ((|x#6| T@U) ) (!  (=> (and ($Is SeqType |x#6| (TSeq TChar)) (|Seq#Contains| |avars#4| ($Box SeqType |x#6|))) (|Set#IsMember| (Lit SetType |locals#0@@6|) ($Box SeqType |x#6|)))
 :pattern ( (|Set#IsMember| |locals#0@@6| ($Box SeqType |x#6|)))
 :pattern ( (|Seq#Contains| |avars#4| ($Box SeqType |x#6|)))
)) (Pure.__default.IsPure__Es ($LS $ly@@15) |avals#4| (Lit SetType |locals#0@@6|))))) (ite (AST.Expr__Raw.If_q (Lit DatatypeTypeType |e#0@@12|)) (U_2_bool (let ((|els#4| (Lit DatatypeTypeType (AST.Expr__Raw.els (Lit DatatypeTypeType |e#0@@12|)))))
(let ((|thn#4| (Lit DatatypeTypeType (AST.Expr__Raw.thn (Lit DatatypeTypeType |e#0@@12|)))))
(let ((|cond#4| (Lit DatatypeTypeType (AST.Expr__Raw.cond (Lit DatatypeTypeType |e#0@@12|)))))
(Lit boolType (bool_2_U  (and (and (Pure.__default.IsPure ($LS $ly@@15) |cond#4| (Lit SetType |locals#0@@6|)) (Pure.__default.IsPure ($LS $ly@@15) |thn#4| (Lit SetType |locals#0@@6|))) (Pure.__default.IsPure ($LS $ly@@15) |els#4| (Lit SetType |locals#0@@6|))))))))) (ite (AST.Expr__Raw.Op_q (Lit DatatypeTypeType |e#0@@12|)) (U_2_bool (let ((|oe2#4| (Lit DatatypeTypeType (AST.Expr__Raw.oe2 (Lit DatatypeTypeType |e#0@@12|)))))
(let ((|oe1#4| (Lit DatatypeTypeType (AST.Expr__Raw.oe1 (Lit DatatypeTypeType |e#0@@12|)))))
(Lit boolType (bool_2_U  (and (Pure.__default.IsPure ($LS $ly@@15) |oe1#4| (Lit SetType |locals#0@@6|)) (Pure.__default.IsPure ($LS $ly@@15) |oe2#4| (Lit SetType |locals#0@@6|)))))))) (U_2_bool (let ((|es#4| (Lit SeqType (AST.Expr__Raw.es (Lit DatatypeTypeType |e#0@@12|)))))
(Lit boolType (bool_2_U (Pure.__default.IsPure__Es ($LS $ly@@15) |es#4| (Lit SetType |locals#0@@6|)))))))))))))))
 :weight 3
 :pattern ( (Pure.__default.IsPure ($LS $ly@@15) (Lit DatatypeTypeType |e#0@@12|) (Lit SetType |locals#0@@6|)))
)))
(assert (forall ((s@@18 T@U) (n@@8 Int) (k Int) ) (!  (=> (and (and (<= 0 n@@8) (<= n@@8 k)) (< k (|Seq#Length| s@@18))) (= (|Seq#Index| (|Seq#Drop| s@@18 n@@8) (- k n@@8)) (|Seq#Index| s@@18 k)))
 :weight 25
 :pattern ( (|Seq#Index| s@@18 k) (|Seq#Drop| s@@18 n@@8))
)))
(assert (= |#AST.BinOp.Add| (Lit DatatypeTypeType |#AST.BinOp.Add|)))
(assert (= |#AST.BinOp.Sub| (Lit DatatypeTypeType |#AST.BinOp.Sub|)))
(assert (= |#AST.BinOp.Mul| (Lit DatatypeTypeType |#AST.BinOp.Mul|)))
(assert (forall ((|a#24#0#0| T@U) ) (! (= ($Is DatatypeTypeType (|#AST.Expr_Raw.Var| |a#24#0#0|) Tclass.AST.Expr__Raw) ($Is SeqType |a#24#0#0| (TSeq TChar)))
 :pattern ( ($Is DatatypeTypeType (|#AST.Expr_Raw.Var| |a#24#0#0|) Tclass.AST.Expr__Raw))
)))
(assert (forall ((d@@25 T@U) ($h@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (AST.Expr__Raw.Var_q d@@25) ($IsAlloc DatatypeTypeType d@@25 Tclass.AST.Expr__Raw $h@@6))) ($IsAlloc SeqType (AST.Expr__Raw.name d@@25) (TSeq TChar) $h@@6))
 :pattern ( ($IsAlloc SeqType (AST.Expr__Raw.name d@@25) (TSeq TChar) $h@@6))
)))
(assert (forall (($ly@@16 T@U) ($Heap@@1 T@U) (|e#0@@13| T@U) (|p#0@@1| T@U) ) (!  (=> (or (|AST.Expr__Raw.All#canCall| (Lit DatatypeTypeType |e#0@@13|) |p#0@@1|) (and (and ($IsGoodHeap $Heap@@1) ($Is DatatypeTypeType |e#0@@13| Tclass.AST.Expr__Raw)) ($Is HandleTypeType |p#0@@1| (Tclass._System.___hTotalFunc1 Tclass.AST.Expr__Raw TBool)))) (and (=> (U_2_bool ($Unbox boolType (Apply1 Tclass.AST.Expr__Raw TBool $Heap@@1 |p#0@@1| ($Box DatatypeTypeType (Lit DatatypeTypeType |e#0@@13|))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Var_q (Lit DatatypeTypeType |e#0@@13|)))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Literal_q (Lit DatatypeTypeType |e#0@@13|)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Bind_q (Lit DatatypeTypeType |e#0@@13|))))) (let ((|body#3@@1| (Lit DatatypeTypeType (AST.Expr__Raw.body (Lit DatatypeTypeType |e#0@@13|)))))
(let ((|bvals#3@@1| (Lit SeqType (AST.Expr__Raw.bvals (Lit DatatypeTypeType |e#0@@13|)))))
 (and (forall ((|e#10| T@U) ) (!  (=> ($Is DatatypeTypeType |e#10| Tclass.AST.Expr__Raw) (=> (|Seq#Contains| |bvals#3@@1| ($Box DatatypeTypeType |e#10|)) (|AST.Expr__Raw.All#canCall| |e#10| |p#0@@1|)))
 :pattern ( (AST.Expr__Raw.All ($LS $ly@@16) |e#10| |p#0@@1|))
 :pattern ( (|Seq#Contains| |bvals#3@@1| ($Box DatatypeTypeType |e#10|)))
)) (=> (forall ((|e#10@@0| T@U) ) (!  (=> (and ($Is DatatypeTypeType |e#10@@0| Tclass.AST.Expr__Raw) (|Seq#Contains| |bvals#3@@1| ($Box DatatypeTypeType |e#10@@0|))) (AST.Expr__Raw.All ($LS $ly@@16) |e#10@@0| |p#0@@1|))
 :pattern ( (AST.Expr__Raw.All ($LS $ly@@16) |e#10@@0| |p#0@@1|))
 :pattern ( (|Seq#Contains| |bvals#3@@1| ($Box DatatypeTypeType |e#10@@0|)))
)) (|AST.Expr__Raw.All#canCall| |body#3@@1| |p#0@@1|)))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Bind_q (Lit DatatypeTypeType |e#0@@13|)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Assign_q (Lit DatatypeTypeType |e#0@@13|))))) (let ((|avals#3@@1| (Lit SeqType (AST.Expr__Raw.avals (Lit DatatypeTypeType |e#0@@13|)))))
 (=> (U_2_bool (Lit boolType (bool_2_U true))) (forall ((|e#11| T@U) ) (!  (=> ($Is DatatypeTypeType |e#11| Tclass.AST.Expr__Raw) (=> (|Seq#Contains| |avals#3@@1| ($Box DatatypeTypeType |e#11|)) (|AST.Expr__Raw.All#canCall| |e#11| |p#0@@1|)))
 :pattern ( (AST.Expr__Raw.All ($LS $ly@@16) |e#11| |p#0@@1|))
 :pattern ( (|Seq#Contains| |avals#3@@1| ($Box DatatypeTypeType |e#11|)))
))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Assign_q (Lit DatatypeTypeType |e#0@@13|)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.If_q (Lit DatatypeTypeType |e#0@@13|))))) (let ((|els#3@@1| (Lit DatatypeTypeType (AST.Expr__Raw.els (Lit DatatypeTypeType |e#0@@13|)))))
(let ((|thn#3@@1| (Lit DatatypeTypeType (AST.Expr__Raw.thn (Lit DatatypeTypeType |e#0@@13|)))))
(let ((|cond#3@@1| (Lit DatatypeTypeType (AST.Expr__Raw.cond (Lit DatatypeTypeType |e#0@@13|)))))
 (and (|AST.Expr__Raw.All#canCall| |cond#3@@1| |p#0@@1|) (=> (AST.Expr__Raw.All ($LS $ly@@16) |cond#3@@1| |p#0@@1|) (and (|AST.Expr__Raw.All#canCall| |thn#3@@1| |p#0@@1|) (=> (AST.Expr__Raw.All ($LS $ly@@16) |thn#3@@1| |p#0@@1|) (|AST.Expr__Raw.All#canCall| |els#3@@1| |p#0@@1|))))))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.If_q (Lit DatatypeTypeType |e#0@@13|)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Op_q (Lit DatatypeTypeType |e#0@@13|))))) (let ((|oe2#3@@1| (Lit DatatypeTypeType (AST.Expr__Raw.oe2 (Lit DatatypeTypeType |e#0@@13|)))))
(let ((|oe1#3@@1| (Lit DatatypeTypeType (AST.Expr__Raw.oe1 (Lit DatatypeTypeType |e#0@@13|)))))
 (and (|AST.Expr__Raw.All#canCall| |oe1#3@@1| |p#0@@1|) (=> (AST.Expr__Raw.All ($LS $ly@@16) |oe1#3@@1| |p#0@@1|) (|AST.Expr__Raw.All#canCall| |oe2#3@@1| |p#0@@1|)))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Op_q (Lit DatatypeTypeType |e#0@@13|)))))) (let ((|es#3@@1| (Lit SeqType (AST.Expr__Raw.es (Lit DatatypeTypeType |e#0@@13|)))))
 (=> (U_2_bool (Lit boolType (bool_2_U true))) (forall ((|e#12| T@U) ) (!  (=> ($Is DatatypeTypeType |e#12| Tclass.AST.Expr__Raw) (=> (|Seq#Contains| |es#3@@1| ($Box DatatypeTypeType |e#12|)) (|AST.Expr__Raw.All#canCall| |e#12| |p#0@@1|)))
 :pattern ( (AST.Expr__Raw.All ($LS $ly@@16) |e#12| |p#0@@1|))
 :pattern ( (|Seq#Contains| |es#3@@1| ($Box DatatypeTypeType |e#12|)))
))))))))))))))) (= (AST.Expr__Raw.All ($LS $ly@@16) (Lit DatatypeTypeType |e#0@@13|) |p#0@@1|)  (and (U_2_bool ($Unbox boolType (Apply1 Tclass.AST.Expr__Raw TBool $Heap@@1 |p#0@@1| ($Box DatatypeTypeType (Lit DatatypeTypeType |e#0@@13|))))) (ite (AST.Expr__Raw.Var_q (Lit DatatypeTypeType |e#0@@13|)) (U_2_bool (Lit boolType (bool_2_U true))) (ite (AST.Expr__Raw.Literal_q (Lit DatatypeTypeType |e#0@@13|)) (U_2_bool (Lit boolType (bool_2_U true))) (ite (AST.Expr__Raw.Bind_q (Lit DatatypeTypeType |e#0@@13|)) (let ((|body#2@@1| (Lit DatatypeTypeType (AST.Expr__Raw.body (Lit DatatypeTypeType |e#0@@13|)))))
(let ((|bvals#2@@2| (Lit SeqType (AST.Expr__Raw.bvals (Lit DatatypeTypeType |e#0@@13|)))))
 (and (forall ((|e#7| T@U) ) (!  (=> (and ($Is DatatypeTypeType |e#7| Tclass.AST.Expr__Raw) (|Seq#Contains| |bvals#2@@2| ($Box DatatypeTypeType |e#7|))) (AST.Expr__Raw.All ($LS $ly@@16) |e#7| |p#0@@1|))
 :pattern ( (AST.Expr__Raw.All ($LS $ly@@16) |e#7| |p#0@@1|))
 :pattern ( (|Seq#Contains| |bvals#2@@2| ($Box DatatypeTypeType |e#7|)))
)) (AST.Expr__Raw.All ($LS $ly@@16) |body#2@@1| |p#0@@1|)))) (ite (AST.Expr__Raw.Assign_q (Lit DatatypeTypeType |e#0@@13|)) (let ((|avals#2@@2| (Lit SeqType (AST.Expr__Raw.avals (Lit DatatypeTypeType |e#0@@13|)))))
 (and true (forall ((|e#8| T@U) ) (!  (=> (and ($Is DatatypeTypeType |e#8| Tclass.AST.Expr__Raw) (|Seq#Contains| |avals#2@@2| ($Box DatatypeTypeType |e#8|))) (AST.Expr__Raw.All ($LS $ly@@16) |e#8| |p#0@@1|))
 :pattern ( (AST.Expr__Raw.All ($LS $ly@@16) |e#8| |p#0@@1|))
 :pattern ( (|Seq#Contains| |avals#2@@2| ($Box DatatypeTypeType |e#8|)))
)))) (ite (AST.Expr__Raw.If_q (Lit DatatypeTypeType |e#0@@13|)) (let ((|els#2@@1| (Lit DatatypeTypeType (AST.Expr__Raw.els (Lit DatatypeTypeType |e#0@@13|)))))
(let ((|thn#2@@1| (Lit DatatypeTypeType (AST.Expr__Raw.thn (Lit DatatypeTypeType |e#0@@13|)))))
(let ((|cond#2@@1| (Lit DatatypeTypeType (AST.Expr__Raw.cond (Lit DatatypeTypeType |e#0@@13|)))))
 (and (and (AST.Expr__Raw.All ($LS $ly@@16) |cond#2@@1| |p#0@@1|) (AST.Expr__Raw.All ($LS $ly@@16) |thn#2@@1| |p#0@@1|)) (AST.Expr__Raw.All ($LS $ly@@16) |els#2@@1| |p#0@@1|))))) (ite (AST.Expr__Raw.Op_q (Lit DatatypeTypeType |e#0@@13|)) (let ((|oe2#2@@1| (Lit DatatypeTypeType (AST.Expr__Raw.oe2 (Lit DatatypeTypeType |e#0@@13|)))))
(let ((|oe1#2@@1| (Lit DatatypeTypeType (AST.Expr__Raw.oe1 (Lit DatatypeTypeType |e#0@@13|)))))
 (and (AST.Expr__Raw.All ($LS $ly@@16) |oe1#2@@1| |p#0@@1|) (AST.Expr__Raw.All ($LS $ly@@16) |oe2#2@@1| |p#0@@1|)))) (let ((|es#2@@1| (Lit SeqType (AST.Expr__Raw.es (Lit DatatypeTypeType |e#0@@13|)))))
 (and true (forall ((|e#9| T@U) ) (!  (=> (and ($Is DatatypeTypeType |e#9| Tclass.AST.Expr__Raw) (|Seq#Contains| |es#2@@1| ($Box DatatypeTypeType |e#9|))) (AST.Expr__Raw.All ($LS $ly@@16) |e#9| |p#0@@1|))
 :pattern ( (AST.Expr__Raw.All ($LS $ly@@16) |e#9| |p#0@@1|))
 :pattern ( (|Seq#Contains| |es#2@@1| ($Box DatatypeTypeType |e#9|)))
))))))))))))))
 :weight 3
 :pattern ( (AST.Expr__Raw.All ($LS $ly@@16) (Lit DatatypeTypeType |e#0@@13|) |p#0@@1|) ($IsGoodHeap $Heap@@1))
)))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|e1#0@@0| T@U) (|e2#0@@0| T@U) ) (!  (=> (or (|EliminateMulZero.__default.IsZeroMulPure#canCall| (Lit DatatypeTypeType |e1#0@@0|) (Lit DatatypeTypeType |e2#0@@0|)) (and (< 1 $FunctionContextHeight) (and ($Is DatatypeTypeType |e1#0@@0| Tclass.AST.Expr) ($Is DatatypeTypeType |e2#0@@0| Tclass.AST.Expr)))) (and (and (and (|$IsA#AST.Expr__Raw| (Lit DatatypeTypeType |e1#0@@0|)) (|$IsA#AST.Expr__Raw| EliminateMulZero.__default.ZeroExpr)) (=> (|AST.Expr__Raw#Equal| |e1#0@@0| EliminateMulZero.__default.ZeroExpr) (|Pure.__default.IsPure#canCall| (Lit DatatypeTypeType |e2#0@@0|) (Lit SetType |Set#Empty|)))) (= (EliminateMulZero.__default.IsZeroMulPure (Lit DatatypeTypeType |e1#0@@0|) (Lit DatatypeTypeType |e2#0@@0|))  (and (|AST.Expr__Raw#Equal| |e1#0@@0| EliminateMulZero.__default.ZeroExpr) (Pure.__default.IsPure ($LS $LZ) (Lit DatatypeTypeType |e2#0@@0|) (Lit SetType |Set#Empty|))))))
 :weight 3
 :pattern ( (EliminateMulZero.__default.IsZeroMulPure (Lit DatatypeTypeType |e1#0@@0|) (Lit DatatypeTypeType |e2#0@@0|)))
))))
(assert (forall ((a@@22 T@U) (b@@22 T@U) ) (! (= (|Set#Equal| a@@22 b@@22) (forall ((o@@3 T@U) ) (! (= (|Set#IsMember| a@@22 o@@3) (|Set#IsMember| b@@22 o@@3))
 :pattern ( (|Set#IsMember| a@@22 o@@3))
 :pattern ( (|Set#IsMember| b@@22 o@@3))
)))
 :pattern ( (|Set#Equal| a@@22 b@@22))
)))
(assert (forall ((s@@19 T@U) (m@@5 Int) (n@@9 Int) ) (!  (=> (and (and (<= 0 m@@5) (<= 0 n@@9)) (<= (+ m@@5 n@@9) (|Seq#Length| s@@19))) (= (|Seq#Drop| (|Seq#Drop| s@@19 m@@5) n@@9) (|Seq#Drop| s@@19 (+ m@@5 n@@9))))
 :pattern ( (|Seq#Drop| (|Seq#Drop| s@@19 m@@5) n@@9))
)))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) (n@@10 Int) ) (!  (and (=> (< n@@10 (|Seq#Length| s0@@2)) (= (|Seq#Index| (|Seq#Append| s0@@2 s1@@2) n@@10) (|Seq#Index| s0@@2 n@@10))) (=> (<= (|Seq#Length| s0@@2) n@@10) (= (|Seq#Index| (|Seq#Append| s0@@2 s1@@2) n@@10) (|Seq#Index| s1@@2 (- n@@10 (|Seq#Length| s0@@2))))))
 :pattern ( (|Seq#Index| (|Seq#Append| s0@@2 s1@@2) n@@10))
)))
(assert (forall ((d@@26 T@U) ($h@@7 T@U) ) (!  (=> (and ($IsGoodHeap $h@@7) (and (AST.Expr__Raw.Bind_q d@@26) ($IsAlloc DatatypeTypeType d@@26 Tclass.AST.Expr__Raw $h@@7))) ($IsAlloc DatatypeTypeType (AST.Expr__Raw.body d@@26) Tclass.AST.Expr__Raw $h@@7))
 :pattern ( ($IsAlloc DatatypeTypeType (AST.Expr__Raw.body d@@26) Tclass.AST.Expr__Raw $h@@7))
)))
(assert (forall ((d@@27 T@U) ($h@@8 T@U) ) (!  (=> (and ($IsGoodHeap $h@@8) (and (AST.Expr__Raw.If_q d@@27) ($IsAlloc DatatypeTypeType d@@27 Tclass.AST.Expr__Raw $h@@8))) ($IsAlloc DatatypeTypeType (AST.Expr__Raw.cond d@@27) Tclass.AST.Expr__Raw $h@@8))
 :pattern ( ($IsAlloc DatatypeTypeType (AST.Expr__Raw.cond d@@27) Tclass.AST.Expr__Raw $h@@8))
)))
(assert (forall ((d@@28 T@U) ($h@@9 T@U) ) (!  (=> (and ($IsGoodHeap $h@@9) (and (AST.Expr__Raw.If_q d@@28) ($IsAlloc DatatypeTypeType d@@28 Tclass.AST.Expr__Raw $h@@9))) ($IsAlloc DatatypeTypeType (AST.Expr__Raw.thn d@@28) Tclass.AST.Expr__Raw $h@@9))
 :pattern ( ($IsAlloc DatatypeTypeType (AST.Expr__Raw.thn d@@28) Tclass.AST.Expr__Raw $h@@9))
)))
(assert (forall ((d@@29 T@U) ($h@@10 T@U) ) (!  (=> (and ($IsGoodHeap $h@@10) (and (AST.Expr__Raw.If_q d@@29) ($IsAlloc DatatypeTypeType d@@29 Tclass.AST.Expr__Raw $h@@10))) ($IsAlloc DatatypeTypeType (AST.Expr__Raw.els d@@29) Tclass.AST.Expr__Raw $h@@10))
 :pattern ( ($IsAlloc DatatypeTypeType (AST.Expr__Raw.els d@@29) Tclass.AST.Expr__Raw $h@@10))
)))
(assert (forall ((d@@30 T@U) ($h@@11 T@U) ) (!  (=> (and ($IsGoodHeap $h@@11) (and (AST.Expr__Raw.Op_q d@@30) ($IsAlloc DatatypeTypeType d@@30 Tclass.AST.Expr__Raw $h@@11))) ($IsAlloc DatatypeTypeType (AST.Expr__Raw.op d@@30) Tclass.AST.BinOp $h@@11))
 :pattern ( ($IsAlloc DatatypeTypeType (AST.Expr__Raw.op d@@30) Tclass.AST.BinOp $h@@11))
)))
(assert (forall ((d@@31 T@U) ($h@@12 T@U) ) (!  (=> (and ($IsGoodHeap $h@@12) (and (AST.Expr__Raw.Op_q d@@31) ($IsAlloc DatatypeTypeType d@@31 Tclass.AST.Expr__Raw $h@@12))) ($IsAlloc DatatypeTypeType (AST.Expr__Raw.oe1 d@@31) Tclass.AST.Expr__Raw $h@@12))
 :pattern ( ($IsAlloc DatatypeTypeType (AST.Expr__Raw.oe1 d@@31) Tclass.AST.Expr__Raw $h@@12))
)))
(assert (forall ((d@@32 T@U) ($h@@13 T@U) ) (!  (=> (and ($IsGoodHeap $h@@13) (and (AST.Expr__Raw.Op_q d@@32) ($IsAlloc DatatypeTypeType d@@32 Tclass.AST.Expr__Raw $h@@13))) ($IsAlloc DatatypeTypeType (AST.Expr__Raw.oe2 d@@32) Tclass.AST.Expr__Raw $h@@13))
 :pattern ( ($IsAlloc DatatypeTypeType (AST.Expr__Raw.oe2 d@@32) Tclass.AST.Expr__Raw $h@@13))
)))
(assert (forall ((|a#49#0#0| T@U) (|a#49#1#0| T@U) ) (! (= (|#AST.Expr_Raw.Assign| (Lit SeqType |a#49#0#0|) (Lit SeqType |a#49#1#0|)) (Lit DatatypeTypeType (|#AST.Expr_Raw.Assign| |a#49#0#0| |a#49#1#0|)))
 :pattern ( (|#AST.Expr_Raw.Assign| (Lit SeqType |a#49#0#0|) (Lit SeqType |a#49#1#0|)))
)))
(assert (forall (($heap@@2 T@U) (|$fh$0x#0@@2| T@U) ) (! (= (Apply1 Tclass.AST.Expr__Raw TBool $heap@@2 |AST.Expr__Raw.WellFormed__Single#Handle| |$fh$0x#0@@2|) ($Box boolType (bool_2_U (AST.Expr__Raw.WellFormed__Single ($Unbox DatatypeTypeType |$fh$0x#0@@2|)))))
 :pattern ( (Apply1 Tclass.AST.Expr__Raw TBool $heap@@2 |AST.Expr__Raw.WellFormed__Single#Handle| |$fh$0x#0@@2|))
)))
(assert (forall ((|e#0@@14| T@U) ) (! (= ($Is DatatypeTypeType |e#0@@14| Tclass.AST.Expr)  (and ($Is DatatypeTypeType |e#0@@14| Tclass.AST.Expr__Raw) (AST.Expr__Raw.WellFormed |e#0@@14|)))
 :pattern ( ($Is DatatypeTypeType |e#0@@14| Tclass.AST.Expr))
)))
(assert (forall ((x@@12 Int) ) (! (= ($Box intType (int_2_U (LitInt x@@12))) (Lit BoxType ($Box intType (int_2_U x@@12))))
 :pattern ( ($Box intType (int_2_U (LitInt x@@12))))
)))
(assert (forall ((|a#25#0#0| T@U) ) (! (= (|#AST.Expr_Raw.Var| (Lit SeqType |a#25#0#0|)) (Lit DatatypeTypeType (|#AST.Expr_Raw.Var| |a#25#0#0|)))
 :pattern ( (|#AST.Expr_Raw.Var| (Lit SeqType |a#25#0#0|)))
)))
(assert (forall ((|a#32#0#0| Int) ) (! (= (|#AST.Expr_Raw.Literal| (LitInt |a#32#0#0|)) (Lit DatatypeTypeType (|#AST.Expr_Raw.Literal| |a#32#0#0|)))
 :pattern ( (|#AST.Expr_Raw.Literal| (LitInt |a#32#0#0|)))
)))
(assert (forall ((|a#79#0#0| T@U) ) (! (= (|#AST.Expr_Raw.Seq| (Lit SeqType |a#79#0#0|)) (Lit DatatypeTypeType (|#AST.Expr_Raw.Seq| |a#79#0#0|)))
 :pattern ( (|#AST.Expr_Raw.Seq| (Lit SeqType |a#79#0#0|)))
)))
(assert (forall ((x@@13 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@13)) (Lit BoxType ($Box T@@4 x@@13)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@13)))
)))
(assert (forall ((d@@33 T@U) ($h@@14 T@U) ) (!  (=> (and ($IsGoodHeap $h@@14) (and (AST.Expr__Raw.Bind_q d@@33) ($IsAlloc DatatypeTypeType d@@33 Tclass.AST.Expr__Raw $h@@14))) ($IsAlloc SeqType (AST.Expr__Raw.bvars d@@33) (TSeq (TSeq TChar)) $h@@14))
 :pattern ( ($IsAlloc SeqType (AST.Expr__Raw.bvars d@@33) (TSeq (TSeq TChar)) $h@@14))
)))
(assert (forall ((d@@34 T@U) ($h@@15 T@U) ) (!  (=> (and ($IsGoodHeap $h@@15) (and (AST.Expr__Raw.Assign_q d@@34) ($IsAlloc DatatypeTypeType d@@34 Tclass.AST.Expr__Raw $h@@15))) ($IsAlloc SeqType (AST.Expr__Raw.avars d@@34) (TSeq (TSeq TChar)) $h@@15))
 :pattern ( ($IsAlloc SeqType (AST.Expr__Raw.avars d@@34) (TSeq (TSeq TChar)) $h@@15))
)))
(assert (forall ((s@@20 T@U) ) (!  (=> (= (|Seq#Length| s@@20) 0) (= s@@20 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@20))
)))
(assert (forall ((s@@21 T@U) (n@@11 Int) ) (!  (=> (= n@@11 0) (= (|Seq#Take| s@@21 n@@11) |Seq#Empty|))
 :pattern ( (|Seq#Take| s@@21 n@@11))
)))
(assert (= EliminateMulZero.__default.ZeroExpr (Lit DatatypeTypeType (|#AST.Expr_Raw.Literal| (LitInt 0)))))
(assert (forall (($ly@@17 T@U) ($Heap@@2 T@U) (|e#0@@15| T@U) (|p#0@@2| T@U) ) (!  (=> (or (|AST.Expr__Raw.All#canCall| (Lit DatatypeTypeType |e#0@@15|) (Lit HandleTypeType |p#0@@2|)) (and (and ($IsGoodHeap $Heap@@2) ($Is DatatypeTypeType |e#0@@15| Tclass.AST.Expr__Raw)) ($Is HandleTypeType |p#0@@2| (Tclass._System.___hTotalFunc1 Tclass.AST.Expr__Raw TBool)))) (and (=> (U_2_bool ($Unbox boolType (Apply1 Tclass.AST.Expr__Raw TBool $Heap@@2 (Lit HandleTypeType |p#0@@2|) ($Box DatatypeTypeType (Lit DatatypeTypeType |e#0@@15|))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Var_q (Lit DatatypeTypeType |e#0@@15|)))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Literal_q (Lit DatatypeTypeType |e#0@@15|)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Bind_q (Lit DatatypeTypeType |e#0@@15|))))) (let ((|body#5@@0| (Lit DatatypeTypeType (AST.Expr__Raw.body (Lit DatatypeTypeType |e#0@@15|)))))
(let ((|bvals#5@@0| (Lit SeqType (AST.Expr__Raw.bvals (Lit DatatypeTypeType |e#0@@15|)))))
 (and (forall ((|e#16| T@U) ) (!  (=> ($Is DatatypeTypeType |e#16| Tclass.AST.Expr__Raw) (=> (|Seq#Contains| |bvals#5@@0| ($Box DatatypeTypeType |e#16|)) (|AST.Expr__Raw.All#canCall| |e#16| (Lit HandleTypeType |p#0@@2|))))
 :pattern ( (AST.Expr__Raw.All ($LS $ly@@17) |e#16| |p#0@@2|))
 :pattern ( (|Seq#Contains| |bvals#5@@0| ($Box DatatypeTypeType |e#16|)))
)) (=> (forall ((|e#16@@0| T@U) ) (!  (=> (and ($Is DatatypeTypeType |e#16@@0| Tclass.AST.Expr__Raw) (|Seq#Contains| |bvals#5@@0| ($Box DatatypeTypeType |e#16@@0|))) (AST.Expr__Raw.All ($LS $ly@@17) |e#16@@0| (Lit HandleTypeType |p#0@@2|)))
 :pattern ( (AST.Expr__Raw.All ($LS $ly@@17) |e#16@@0| |p#0@@2|))
 :pattern ( (|Seq#Contains| |bvals#5@@0| ($Box DatatypeTypeType |e#16@@0|)))
)) (|AST.Expr__Raw.All#canCall| |body#5@@0| (Lit HandleTypeType |p#0@@2|))))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Bind_q (Lit DatatypeTypeType |e#0@@15|)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Assign_q (Lit DatatypeTypeType |e#0@@15|))))) (let ((|avals#5@@0| (Lit SeqType (AST.Expr__Raw.avals (Lit DatatypeTypeType |e#0@@15|)))))
 (=> (U_2_bool (Lit boolType (bool_2_U true))) (forall ((|e#17| T@U) ) (!  (=> ($Is DatatypeTypeType |e#17| Tclass.AST.Expr__Raw) (=> (|Seq#Contains| |avals#5@@0| ($Box DatatypeTypeType |e#17|)) (|AST.Expr__Raw.All#canCall| |e#17| (Lit HandleTypeType |p#0@@2|))))
 :pattern ( (AST.Expr__Raw.All ($LS $ly@@17) |e#17| |p#0@@2|))
 :pattern ( (|Seq#Contains| |avals#5@@0| ($Box DatatypeTypeType |e#17|)))
))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Assign_q (Lit DatatypeTypeType |e#0@@15|)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.If_q (Lit DatatypeTypeType |e#0@@15|))))) (let ((|els#5@@0| (Lit DatatypeTypeType (AST.Expr__Raw.els (Lit DatatypeTypeType |e#0@@15|)))))
(let ((|thn#5@@0| (Lit DatatypeTypeType (AST.Expr__Raw.thn (Lit DatatypeTypeType |e#0@@15|)))))
(let ((|cond#5@@0| (Lit DatatypeTypeType (AST.Expr__Raw.cond (Lit DatatypeTypeType |e#0@@15|)))))
 (and (|AST.Expr__Raw.All#canCall| |cond#5@@0| (Lit HandleTypeType |p#0@@2|)) (=> (AST.Expr__Raw.All ($LS $ly@@17) |cond#5@@0| (Lit HandleTypeType |p#0@@2|)) (and (|AST.Expr__Raw.All#canCall| |thn#5@@0| (Lit HandleTypeType |p#0@@2|)) (=> (AST.Expr__Raw.All ($LS $ly@@17) |thn#5@@0| (Lit HandleTypeType |p#0@@2|)) (|AST.Expr__Raw.All#canCall| |els#5@@0| (Lit HandleTypeType |p#0@@2|)))))))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.If_q (Lit DatatypeTypeType |e#0@@15|)))))) (and (=> (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Op_q (Lit DatatypeTypeType |e#0@@15|))))) (let ((|oe2#5@@0| (Lit DatatypeTypeType (AST.Expr__Raw.oe2 (Lit DatatypeTypeType |e#0@@15|)))))
(let ((|oe1#5@@0| (Lit DatatypeTypeType (AST.Expr__Raw.oe1 (Lit DatatypeTypeType |e#0@@15|)))))
 (and (|AST.Expr__Raw.All#canCall| |oe1#5@@0| (Lit HandleTypeType |p#0@@2|)) (=> (AST.Expr__Raw.All ($LS $ly@@17) |oe1#5@@0| (Lit HandleTypeType |p#0@@2|)) (|AST.Expr__Raw.All#canCall| |oe2#5@@0| (Lit HandleTypeType |p#0@@2|))))))) (=> (not (U_2_bool (Lit boolType (bool_2_U (AST.Expr__Raw.Op_q (Lit DatatypeTypeType |e#0@@15|)))))) (let ((|es#5@@0| (Lit SeqType (AST.Expr__Raw.es (Lit DatatypeTypeType |e#0@@15|)))))
 (=> (U_2_bool (Lit boolType (bool_2_U true))) (forall ((|e#18| T@U) ) (!  (=> ($Is DatatypeTypeType |e#18| Tclass.AST.Expr__Raw) (=> (|Seq#Contains| |es#5@@0| ($Box DatatypeTypeType |e#18|)) (|AST.Expr__Raw.All#canCall| |e#18| (Lit HandleTypeType |p#0@@2|))))
 :pattern ( (AST.Expr__Raw.All ($LS $ly@@17) |e#18| |p#0@@2|))
 :pattern ( (|Seq#Contains| |es#5@@0| ($Box DatatypeTypeType |e#18|)))
))))))))))))))) (= (AST.Expr__Raw.All ($LS $ly@@17) (Lit DatatypeTypeType |e#0@@15|) (Lit HandleTypeType |p#0@@2|))  (and (U_2_bool ($Unbox boolType (Apply1 Tclass.AST.Expr__Raw TBool $Heap@@2 (Lit HandleTypeType |p#0@@2|) ($Box DatatypeTypeType (Lit DatatypeTypeType |e#0@@15|))))) (ite (AST.Expr__Raw.Var_q (Lit DatatypeTypeType |e#0@@15|)) (U_2_bool (Lit boolType (bool_2_U true))) (ite (AST.Expr__Raw.Literal_q (Lit DatatypeTypeType |e#0@@15|)) (U_2_bool (Lit boolType (bool_2_U true))) (ite (AST.Expr__Raw.Bind_q (Lit DatatypeTypeType |e#0@@15|)) (let ((|body#4@@0| (Lit DatatypeTypeType (AST.Expr__Raw.body (Lit DatatypeTypeType |e#0@@15|)))))
(let ((|bvals#4@@0| (Lit SeqType (AST.Expr__Raw.bvals (Lit DatatypeTypeType |e#0@@15|)))))
 (and (forall ((|e#13| T@U) ) (!  (=> (and ($Is DatatypeTypeType |e#13| Tclass.AST.Expr__Raw) (|Seq#Contains| |bvals#4@@0| ($Box DatatypeTypeType |e#13|))) (AST.Expr__Raw.All ($LS $ly@@17) |e#13| (Lit HandleTypeType |p#0@@2|)))
 :pattern ( (AST.Expr__Raw.All ($LS $ly@@17) |e#13| |p#0@@2|))
 :pattern ( (|Seq#Contains| |bvals#4@@0| ($Box DatatypeTypeType |e#13|)))
)) (AST.Expr__Raw.All ($LS $ly@@17) |body#4@@0| (Lit HandleTypeType |p#0@@2|))))) (ite (AST.Expr__Raw.Assign_q (Lit DatatypeTypeType |e#0@@15|)) (let ((|avals#4@@0| (Lit SeqType (AST.Expr__Raw.avals (Lit DatatypeTypeType |e#0@@15|)))))
 (and true (forall ((|e#14| T@U) ) (!  (=> (and ($Is DatatypeTypeType |e#14| Tclass.AST.Expr__Raw) (|Seq#Contains| |avals#4@@0| ($Box DatatypeTypeType |e#14|))) (AST.Expr__Raw.All ($LS $ly@@17) |e#14| (Lit HandleTypeType |p#0@@2|)))
 :pattern ( (AST.Expr__Raw.All ($LS $ly@@17) |e#14| |p#0@@2|))
 :pattern ( (|Seq#Contains| |avals#4@@0| ($Box DatatypeTypeType |e#14|)))
)))) (ite (AST.Expr__Raw.If_q (Lit DatatypeTypeType |e#0@@15|)) (U_2_bool (let ((|els#4@@0| (Lit DatatypeTypeType (AST.Expr__Raw.els (Lit DatatypeTypeType |e#0@@15|)))))
(let ((|thn#4@@0| (Lit DatatypeTypeType (AST.Expr__Raw.thn (Lit DatatypeTypeType |e#0@@15|)))))
(let ((|cond#4@@0| (Lit DatatypeTypeType (AST.Expr__Raw.cond (Lit DatatypeTypeType |e#0@@15|)))))
(Lit boolType (bool_2_U  (and (and (AST.Expr__Raw.All ($LS $ly@@17) |cond#4@@0| (Lit HandleTypeType |p#0@@2|)) (AST.Expr__Raw.All ($LS $ly@@17) |thn#4@@0| (Lit HandleTypeType |p#0@@2|))) (AST.Expr__Raw.All ($LS $ly@@17) |els#4@@0| (Lit HandleTypeType |p#0@@2|))))))))) (ite (AST.Expr__Raw.Op_q (Lit DatatypeTypeType |e#0@@15|)) (U_2_bool (let ((|oe2#4@@0| (Lit DatatypeTypeType (AST.Expr__Raw.oe2 (Lit DatatypeTypeType |e#0@@15|)))))
(let ((|oe1#4@@0| (Lit DatatypeTypeType (AST.Expr__Raw.oe1 (Lit DatatypeTypeType |e#0@@15|)))))
(Lit boolType (bool_2_U  (and (AST.Expr__Raw.All ($LS $ly@@17) |oe1#4@@0| (Lit HandleTypeType |p#0@@2|)) (AST.Expr__Raw.All ($LS $ly@@17) |oe2#4@@0| (Lit HandleTypeType |p#0@@2|)))))))) (let ((|es#4@@0| (Lit SeqType (AST.Expr__Raw.es (Lit DatatypeTypeType |e#0@@15|)))))
 (and true (forall ((|e#15| T@U) ) (!  (=> (and ($Is DatatypeTypeType |e#15| Tclass.AST.Expr__Raw) (|Seq#Contains| |es#4@@0| ($Box DatatypeTypeType |e#15|))) (AST.Expr__Raw.All ($LS $ly@@17) |e#15| (Lit HandleTypeType |p#0@@2|)))
 :pattern ( (AST.Expr__Raw.All ($LS $ly@@17) |e#15| |p#0@@2|))
 :pattern ( (|Seq#Contains| |es#4@@0| ($Box DatatypeTypeType |e#15|)))
))))))))))))))
 :weight 3
 :pattern ( (AST.Expr__Raw.All ($LS $ly@@17) (Lit DatatypeTypeType |e#0@@15|) (Lit HandleTypeType |p#0@@2|)) ($IsGoodHeap $Heap@@2))
)))
(assert (forall (($Heap@@3 T@U) (this@@0 T@U) ) (!  (=> (or (|AST.Expr__Raw.WellFormed#canCall| this@@0) (and ($IsGoodHeap $Heap@@3) (and ($Is DatatypeTypeType this@@0 Tclass.AST.Expr__Raw) ($IsAlloc DatatypeTypeType this@@0 Tclass.AST.Expr__Raw $Heap@@3)))) (and (|AST.Expr__Raw.All#canCall| this@@0 |AST.Expr__Raw.WellFormed__Single#Handle|) (= (AST.Expr__Raw.WellFormed this@@0) (AST.Expr__Raw.All ($LS $LZ) this@@0 |AST.Expr__Raw.WellFormed__Single#Handle|))))
 :pattern ( (AST.Expr__Raw.WellFormed this@@0) ($IsGoodHeap $Heap@@3))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($ly@@18 T@U) (|es#0@@9| T@U) ) (!  (=> (or (|EliminateMulZero.__default.Eliminate__Es#canCall| |es#0@@9|) (and (< 2 $FunctionContextHeight) ($Is SeqType |es#0@@9| (TSeq Tclass.AST.Expr)))) (and (= (|Seq#Length| (EliminateMulZero.__default.Eliminate__Es $ly@@18 |es#0@@9|)) (|Seq#Length| |es#0@@9|)) ($Is SeqType (EliminateMulZero.__default.Eliminate__Es $ly@@18 |es#0@@9|) (TSeq Tclass.AST.Expr))))
 :pattern ( (EliminateMulZero.__default.Eliminate__Es $ly@@18 |es#0@@9|))
))))
(assert (forall ((d@@35 T@U) ($h@@16 T@U) ) (!  (=> (and ($IsGoodHeap $h@@16) (and (AST.Expr__Raw.Bind_q d@@35) ($IsAlloc DatatypeTypeType d@@35 Tclass.AST.Expr__Raw $h@@16))) ($IsAlloc SeqType (AST.Expr__Raw.bvals d@@35) (TSeq Tclass.AST.Expr__Raw) $h@@16))
 :pattern ( ($IsAlloc SeqType (AST.Expr__Raw.bvals d@@35) (TSeq Tclass.AST.Expr__Raw) $h@@16))
)))
(assert (forall ((d@@36 T@U) ($h@@17 T@U) ) (!  (=> (and ($IsGoodHeap $h@@17) (and (AST.Expr__Raw.Assign_q d@@36) ($IsAlloc DatatypeTypeType d@@36 Tclass.AST.Expr__Raw $h@@17))) ($IsAlloc SeqType (AST.Expr__Raw.avals d@@36) (TSeq Tclass.AST.Expr__Raw) $h@@17))
 :pattern ( ($IsAlloc SeqType (AST.Expr__Raw.avals d@@36) (TSeq Tclass.AST.Expr__Raw) $h@@17))
)))
(assert (forall ((d@@37 T@U) ($h@@18 T@U) ) (!  (=> (and ($IsGoodHeap $h@@18) (and (AST.Expr__Raw.Seq_q d@@37) ($IsAlloc DatatypeTypeType d@@37 Tclass.AST.Expr__Raw $h@@18))) ($IsAlloc SeqType (AST.Expr__Raw.es d@@37) (TSeq Tclass.AST.Expr__Raw) $h@@18))
 :pattern ( ($IsAlloc SeqType (AST.Expr__Raw.es d@@37) (TSeq Tclass.AST.Expr__Raw) $h@@18))
)))
(assert (forall ((h@@5 T@U) (v@@8 T@U) ) (! ($IsAlloc intType v@@8 TInt h@@5)
 :pattern ( ($IsAlloc intType v@@8 TInt h@@5))
)))
(assert (forall ((h@@6 T@U) (v@@9 T@U) ) (! ($IsAlloc boolType v@@9 TBool h@@6)
 :pattern ( ($IsAlloc boolType v@@9 TBool h@@6))
)))
(assert (forall ((h@@7 T@U) (v@@10 T@U) ) (! ($IsAlloc charType v@@10 TChar h@@7)
 :pattern ( ($IsAlloc charType v@@10 TChar h@@7))
)))
(assert (forall ((v@@11 T@U) (t0@@10 T@U) ) (! (= ($Is SeqType v@@11 (TSeq t0@@10)) (forall ((i@@13 Int) ) (!  (=> (and (<= 0 i@@13) (< i@@13 (|Seq#Length| v@@11))) ($IsBox (|Seq#Index| v@@11 i@@13) t0@@10))
 :pattern ( (|Seq#Index| v@@11 i@@13))
)))
 :pattern ( ($Is SeqType v@@11 (TSeq t0@@10)))
)))
(assert (forall ((s@@22 T@U) (i@@14 Int) ) (!  (=> (and (<= 0 i@@14) (< i@@14 (|Seq#Length| s@@22))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@22 i@@14))) (|Seq#Rank| s@@22)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@22 i@@14))))
)))
(assert (forall ((v@@12 T@U) ) (! ($Is intType v@@12 TInt)
 :pattern ( ($Is intType v@@12 TInt))
)))
(assert (forall ((v@@13 T@U) ) (! ($Is boolType v@@13 TBool)
 :pattern ( ($Is boolType v@@13 TBool))
)))
(assert (forall ((v@@14 T@U) ) (! ($Is charType v@@14 TChar)
 :pattern ( ($Is charType v@@14 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |es'#2@@0| () T@U)
(declare-fun |es#0@@10| () T@U)
(declare-fun |##e#0@0| () T@U)
(declare-fun $Heap@@4 () T@U)
(declare-fun |let#0#0#0| () T@U)
(declare-fun |e'#Z#0@0| () T@U)
(declare-fun |##es#0@0| () T@U)
(declare-fun |let#1#0#0| () T@U)
(declare-fun |es'#Z#0@0| () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 13) (let ((GeneratedUnifiedExit_correct  (=> (= (ControlFlow 0 3) (- 0 2)) (= (|Seq#Length| |es'#2@@0|) (|Seq#Length| |es#0@@10|)))))
(let ((anon8_Else_correct  (=> (not (|Seq#Equal| |es#0@@10| |Seq#Empty|)) (and (=> (= (ControlFlow 0 5) (- 0 11)) (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |es#0@@10|)))) (=> (and (<= 0 (LitInt 0)) (< (LitInt 0) (|Seq#Length| |es#0@@10|))) (=> (and (= |##e#0@0| ($Unbox DatatypeTypeType (|Seq#Index| |es#0@@10| (LitInt 0)))) ($IsAlloc DatatypeTypeType |##e#0@0| Tclass.AST.Expr $Heap@@4)) (and (=> (= (ControlFlow 0 5) (- 0 10)) (or (or (<= 0 (LitInt 0)) (< (DtRank |##e#0@0|) (|Seq#Rank| |es#0@@10|))) (= (LitInt 1) (LitInt 0)))) (=> (or (or (<= 0 (LitInt 0)) (< (DtRank |##e#0@0|) (|Seq#Rank| |es#0@@10|))) (= (LitInt 1) (LitInt 0))) (and (=> (= (ControlFlow 0 5) (- 0 9)) (< (DtRank |##e#0@0|) (|Seq#Rank| |es#0@@10|))) (=> (< (DtRank |##e#0@0|) (|Seq#Rank| |es#0@@10|)) (=> (|EliminateMulZero.__default.Eliminate#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |es#0@@10| (LitInt 0)))) (=> (and (and (= |let#0#0#0| (EliminateMulZero.__default.Eliminate ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| |es#0@@10| (LitInt 0))))) (|EliminateMulZero.__default.Eliminate#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |es#0@@10| (LitInt 0))))) (and ($Is DatatypeTypeType |let#0#0#0| Tclass.AST.Expr) (= |e'#Z#0@0| |let#0#0#0|))) (and (=> (= (ControlFlow 0 5) (- 0 8)) (and (<= 0 (LitInt 1)) (<= (LitInt 1) (|Seq#Length| |es#0@@10|)))) (=> (and (<= 0 (LitInt 1)) (<= (LitInt 1) (|Seq#Length| |es#0@@10|))) (=> (and (= |##es#0@0| (|Seq#Drop| |es#0@@10| (LitInt 1))) ($IsAlloc SeqType |##es#0@0| (TSeq Tclass.AST.Expr) $Heap@@4)) (and (=> (= (ControlFlow 0 5) (- 0 7)) (or (or (<= 0 (LitInt 0)) (< (|Seq#Rank| |##es#0@0|) (|Seq#Rank| |es#0@@10|))) (= (LitInt 0) (LitInt 0)))) (=> (or (or (<= 0 (LitInt 0)) (< (|Seq#Rank| |##es#0@0|) (|Seq#Rank| |es#0@@10|))) (= (LitInt 0) (LitInt 0))) (and (=> (= (ControlFlow 0 5) (- 0 6)) (or (< (|Seq#Rank| |##es#0@0|) (|Seq#Rank| |es#0@@10|)) (and (= (|Seq#Rank| |##es#0@0|) (|Seq#Rank| |es#0@@10|)) (< (LitInt 0) (LitInt 0))))) (=> (or (< (|Seq#Rank| |##es#0@0|) (|Seq#Rank| |es#0@@10|)) (and (= (|Seq#Rank| |##es#0@0|) (|Seq#Rank| |es#0@@10|)) (< (LitInt 0) (LitInt 0)))) (=> (|EliminateMulZero.__default.Eliminate__Es#canCall| (|Seq#Drop| |es#0@@10| (LitInt 1))) (=> (and (and (and (= |let#1#0#0| (EliminateMulZero.__default.Eliminate__Es ($LS $LZ) (|Seq#Drop| |es#0@@10| (LitInt 1)))) (|EliminateMulZero.__default.Eliminate__Es#canCall| (|Seq#Drop| |es#0@@10| (LitInt 1)))) (and ($Is SeqType |let#1#0#0| (TSeq Tclass.AST.Expr)) (= |es'#Z#0@0| |let#1#0#0|))) (and (and (= (EliminateMulZero.__default.Eliminate__Es ($LS $LZ) |es#0@@10|) (|Seq#Append| (|Seq#Build| |Seq#Empty| ($Box DatatypeTypeType |e'#Z#0@0|)) |es'#Z#0@0|)) ($Is SeqType (EliminateMulZero.__default.Eliminate__Es ($LS $LZ) |es#0@@10|) (TSeq Tclass.AST.Expr))) (and (= (EliminateMulZero.__default.Eliminate__Es ($LS $LZ) |es#0@@10|) |es'#2@@0|) (= (ControlFlow 0 5) 3)))) GeneratedUnifiedExit_correct)))))))))))))))))))))
(let ((anon8_Then_correct  (=> (|Seq#Equal| |es#0@@10| |Seq#Empty|) (=> (and (and (= (EliminateMulZero.__default.Eliminate__Es ($LS $LZ) |es#0@@10|) (Lit SeqType |Seq#Empty|)) ($Is SeqType (EliminateMulZero.__default.Eliminate__Es ($LS $LZ) |es#0@@10|) (TSeq Tclass.AST.Expr))) (and (= (EliminateMulZero.__default.Eliminate__Es ($LS $LZ) |es#0@@10|) |es'#2@@0|) (= (ControlFlow 0 4) 3))) GeneratedUnifiedExit_correct))))
(let ((anon7_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap@@4 alloc false)) (and (and (=> (= (ControlFlow 0 12) 1) anon7_Then_correct) (=> (= (ControlFlow 0 12) 4) anon8_Then_correct)) (=> (= (ControlFlow 0 12) 5) anon8_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap@@4) ($IsHeapAnchor $Heap@@4)) ($Is SeqType |es#0@@10| (TSeq Tclass.AST.Expr))) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 13) 12))) anon0_correct)))
PreconditionGeneratedEntry_correct)))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
