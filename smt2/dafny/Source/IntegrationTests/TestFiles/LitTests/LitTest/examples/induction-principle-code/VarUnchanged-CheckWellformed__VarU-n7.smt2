(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun alloc () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun Tagclass.VarUnchanged.S () T@U)
(declare-fun Tagclass.Utils.Option () T@U)
(declare-fun Tagclass.VarUnchanged.MState () T@U)
(declare-fun |##VarUnchanged.MState.MState| () T@U)
(declare-fun |##Utils.Option.Some| () T@U)
(declare-fun |##Utils.Option.None| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun tytagFamily$S () T@U)
(declare-fun tytagFamily$Option () T@U)
(declare-fun tytagFamily$MState () T@U)
(declare-fun Ctor (T@T) Int)
(declare-fun boolType () T@T)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun Tag (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun VarUnchanged.__default.BindEndScope (T@U T@U T@U) T@U)
(declare-fun Lit (T@T T@U) T@U)
(declare-fun SeqType () T@T)
(declare-fun |VarUnchanged.__default.BindEndScope#canCall| (T@U T@U T@U) Bool)
(declare-fun $Is (T@T T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun Tclass.VarUnchanged.S () T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun VarUnchanged.MState.ctx (T@U) T@U)
(declare-fun VarUnchanged.MState.x (T@U) T@U)
(declare-fun |Map#Merge| (T@U T@U) T@U)
(declare-fun |Map#Subtract| (T@U T@U) T@U)
(declare-fun |Set#FromBoogieMap| (T@U) T@U)
(declare-fun |lambda#7| (T@U T@U) T@U)
(declare-fun |#VarUnchanged.MState.MState| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#IsMember| (T@U T@U) Bool)
(declare-fun MapType0Select (T@T T@T T@U T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun MapType0Store (T@T T@T T@U T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |Seq#Empty| () T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun |#Utils.Option.None| () T@U)
(declare-fun $IsAlloc (T@T T@U T@U T@U) Bool)
(declare-fun Tclass.VarUnchanged.MState () T@U)
(declare-fun VarUnchanged.MState.MState_q (T@U) Bool)
(declare-fun Tclass.Utils.Option (T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun Utils.Option.Some_q (T@U) Bool)
(declare-fun Utils.Option.None_q (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@T T@U) T@U)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun Utils.Option.value (T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun SetType () T@T)
(declare-fun TSet (T@U) T@U)
(declare-fun |#Utils.Option.Some| (T@U) T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun DtRank (T@U) Int)
(declare-fun MapType () T@T)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun charType () T@T)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun Tclass.Utils.Option_0 (T@U) T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun |Map#Empty| () T@U)
(declare-fun MapType1Select (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun FieldType () T@T)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType1Store (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(assert  (and (and (and (and (and (and (and (and (= (Ctor boolType) 0) (= (Ctor intType) 1)) (= (Ctor realType) 2)) (forall ((arg0 Bool) ) (! (= (U_2_bool (bool_2_U arg0)) arg0)
 :pattern ( (bool_2_U arg0))
))) (forall ((x T@U) ) (! (= (bool_2_U (U_2_bool x)) x)
 :pattern ( (U_2_bool x))
))) (forall ((arg0@@0 Int) ) (! (= (U_2_int (int_2_U arg0@@0)) arg0@@0)
 :pattern ( (int_2_U arg0@@0))
))) (forall ((x@@0 T@U) ) (! (= (int_2_U (U_2_int x@@0)) x@@0)
 :pattern ( (U_2_int x@@0))
))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1)
 :pattern ( (real_2_U arg0@@1))
))) (forall ((x@@1 T@U) ) (! (= (real_2_U (U_2_real x@@1)) x@@1)
 :pattern ( (U_2_real x@@1))
))))
(assert (distinct TChar TInt TagChar TagInt TagSet TagSeq TagMap alloc |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 Tagclass.VarUnchanged.S Tagclass.Utils.Option Tagclass.VarUnchanged.MState |##VarUnchanged.MState.MState| |##Utils.Option.Some| |##Utils.Option.None| |tytagFamily$_tuple#2| tytagFamily$S tytagFamily$Option tytagFamily$MState)
)
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert  (and (= (Ctor SeqType) 3) (= (Ctor DatatypeTypeType) 4)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|st0#0| T@U) (|st#0| T@U) (|vars#0| T@U) ) (!  (=> (or (|VarUnchanged.__default.BindEndScope#canCall| |st0#0| |st#0| (Lit SeqType |vars#0|)) (and (< 2 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |st0#0| Tclass.VarUnchanged.S) ($Is DatatypeTypeType |st#0| Tclass.VarUnchanged.S)) ($Is SeqType |vars#0| (TSeq (TSeq TChar)))))) (= (VarUnchanged.__default.BindEndScope |st0#0| |st#0| (Lit SeqType |vars#0|)) (let ((|ctx0#1| (VarUnchanged.MState.ctx |st0#0|)))
(let ((|x0#1| (VarUnchanged.MState.x |st0#0|)))
(let ((|ctx#1| (VarUnchanged.MState.ctx |st#0|)))
(let ((|ctx1#1| (|Map#Merge| |ctx0#1| (|Map#Subtract| |ctx#1| (|Set#FromBoogieMap| (|lambda#7| (TSeq TChar) |vars#0|))))))
(let ((|st'#1| (|#VarUnchanged.MState.MState| |x0#1| |ctx1#1|)))
|st'#1|)))))))
 :weight 3
 :pattern ( (VarUnchanged.__default.BindEndScope |st0#0| |st#0| (Lit SeqType |vars#0|)))
))))
(assert (forall ((a T@U) (b T@U) (y T@U) ) (!  (=> (|Set#IsMember| a y) (|Set#IsMember| (|Set#Union| a b) y))
 :pattern ( (|Set#Union| a b) (|Set#IsMember| a y))
)))
(assert (forall ((a@@0 T@U) (b@@0 T@U) (y@@0 T@U) ) (!  (=> (|Set#IsMember| b@@0 y@@0) (|Set#IsMember| (|Set#Union| a@@0 b@@0) y@@0))
 :pattern ( (|Set#Union| a@@0 b@@0) (|Set#IsMember| b@@0 y@@0))
)))
(assert  (and (and (forall ((t0 T@T) (t1 T@T) (val T@U) (m T@U) (x0 T@U) ) (! (= (MapType0Select t0 t1 (MapType0Store t0 t1 m x0 val) x0) val)
 :weight 0
)) (forall ((u0 T@T) (u1 T@T) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select u0 u1 (MapType0Store u0 u1 m@@0 x0@@0 val@@0) y0) (MapType0Select u0 u1 m@@0 y0)))
 :weight 0
))) (= (Ctor BoxType) 5)))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|$y#0| T@U) ) (! (= (U_2_bool (MapType0Select BoxType boolType (|lambda#7| |l#0| |l#1|) |$y#0|))  (and ($IsBox |$y#0| |l#0|) (|Seq#Contains| |l#1| |$y#0|)))
 :pattern ( (MapType0Select BoxType boolType (|lambda#7| |l#0| |l#1|) |$y#0|))
)))
(assert (forall ((a@@1 T@U) (b@@1 T@U) (y@@1 T@U) ) (!  (=> (|Set#IsMember| b@@1 y@@1) (not (|Set#IsMember| (|Set#Difference| a@@1 b@@1) y@@1)))
 :pattern ( (|Set#Difference| a@@1 b@@1) (|Set#IsMember| b@@1 y@@1))
)))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) (d T@U) ) (!  (=> ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) (_System.Tuple2.___hMake2_q d))
 :pattern ( (_System.Tuple2.___hMake2_q d) ($Is DatatypeTypeType d (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)))
)))
(assert (forall ((x@@2 T@U) ) (!  (not (|Seq#Contains| |Seq#Empty| x@@2))
 :pattern ( (|Seq#Contains| |Seq#Empty| x@@2))
)))
(assert (= (|Seq#Length| |Seq#Empty|) 0))
(assert (= (DatatypeCtorId |#Utils.Option.None|) |##Utils.Option.None|))
(assert (forall ((a@@2 T@U) (b@@2 T@U) ) (! (= (|Set#Union| (|Set#Union| a@@2 b@@2) b@@2) (|Set#Union| a@@2 b@@2))
 :pattern ( (|Set#Union| (|Set#Union| a@@2 b@@2) b@@2))
)))
(assert (forall ((a@@3 T@U) (b@@3 T@U) (o T@U) ) (! (= (|Set#IsMember| (|Set#Difference| a@@3 b@@3) o)  (and (|Set#IsMember| a@@3 o) (not (|Set#IsMember| b@@3 o))))
 :pattern ( (|Set#IsMember| (|Set#Difference| a@@3 b@@3) o))
)))
(assert (forall ((|st#0@@0| T@U) ($h T@U) ) (! (= ($IsAlloc DatatypeTypeType |st#0@@0| Tclass.VarUnchanged.S $h) ($IsAlloc DatatypeTypeType |st#0@@0| Tclass.VarUnchanged.MState $h))
 :pattern ( ($IsAlloc DatatypeTypeType |st#0@@0| Tclass.VarUnchanged.S $h))
)))
(assert (forall ((d@@0 T@U) ) (!  (=> ($Is DatatypeTypeType d@@0 Tclass.VarUnchanged.MState) (VarUnchanged.MState.MState_q d@@0))
 :pattern ( (VarUnchanged.MState.MState_q d@@0) ($Is DatatypeTypeType d@@0 Tclass.VarUnchanged.MState))
)))
(assert (forall ((Utils.Option$T T@U) ($h@@0 T@U) ) (!  (=> ($IsGoodHeap $h@@0) ($IsAlloc DatatypeTypeType |#Utils.Option.None| (Tclass.Utils.Option Utils.Option$T) $h@@0))
 :pattern ( ($IsAlloc DatatypeTypeType |#Utils.Option.None| (Tclass.Utils.Option Utils.Option$T) $h@@0))
)))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (! (= ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@0|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@0|)))
 :pattern ( ($Is DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)))
)))
(assert (forall ((Utils.Option$T@@0 T@U) ) (! ($Is DatatypeTypeType |#Utils.Option.None| (Tclass.Utils.Option Utils.Option$T@@0))
 :pattern ( ($Is DatatypeTypeType |#Utils.Option.None| (Tclass.Utils.Option Utils.Option$T@@0)))
)))
(assert (forall ((x@@3 T@U) (T T@T) ) (! (= (Lit T x@@3) x@@3)
 :pattern ( (Lit T x@@3))
)))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) (|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ($h@@1 T@U) ) (!  (=> ($IsGoodHeap $h@@1) (= ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@1)  (and ($IsAllocBox |a#2#0#0@@0| |_System._tuple#2$T0@@1| $h@@1) ($IsAllocBox |a#2#1#0@@0| |_System._tuple#2$T1@@1| $h@@1))))
 :pattern ( ($IsAlloc DatatypeTypeType (|#_System._tuple#2._#Make2| |a#2#0#0@@0| |a#2#1#0@@0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|) $h@@1))
)))
(assert (forall ((d@@1 T@U) ) (! (= (_System.Tuple2.___hMake2_q d@@1) (= (DatatypeCtorId d@@1) |##_System._tuple#2._#Make2|))
 :pattern ( (_System.Tuple2.___hMake2_q d@@1))
)))
(assert (forall ((d@@2 T@U) ) (! (= (VarUnchanged.MState.MState_q d@@2) (= (DatatypeCtorId d@@2) |##VarUnchanged.MState.MState|))
 :pattern ( (VarUnchanged.MState.MState_q d@@2))
)))
(assert (forall ((d@@3 T@U) ) (! (= (Utils.Option.Some_q d@@3) (= (DatatypeCtorId d@@3) |##Utils.Option.Some|))
 :pattern ( (Utils.Option.Some_q d@@3))
)))
(assert (forall ((d@@4 T@U) ) (! (= (Utils.Option.None_q d@@4) (= (DatatypeCtorId d@@4) |##Utils.Option.None|))
 :pattern ( (Utils.Option.None_q d@@4))
)))
(assert (forall ((x@@4 T@U) (T@@0 T@T) ) (! (= ($Box T@@0 ($Unbox T@@0 x@@4)) x@@4)
 :pattern ( ($Unbox T@@0 x@@4))
)))
(assert (forall ((m@@1 T@U) (s T@U) (u T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| (|Map#Subtract| m@@1 s)) u) (= (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Subtract| m@@1 s)) u) (MapType0Select BoxType BoxType (|Map#Elements| m@@1) u)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Subtract| m@@1 s)) u))
)))
(assert (forall ((|st#0@@1| T@U) ) (! (= ($Is DatatypeTypeType |st#0@@1| Tclass.VarUnchanged.S)  (and ($Is DatatypeTypeType |st#0@@1| Tclass.VarUnchanged.MState) (=> (Utils.Option.Some_q (VarUnchanged.MState.x |st#0@@1|)) (|Set#IsMember| (|Map#Domain| (VarUnchanged.MState.ctx |st#0@@1|)) (Utils.Option.value (VarUnchanged.MState.x |st#0@@1|))))))
 :pattern ( ($Is DatatypeTypeType |st#0@@1| Tclass.VarUnchanged.S))
)))
(assert (forall ((a@@4 T@U) (b@@4 T@U) ) (! (= (|Set#Disjoint| a@@4 b@@4) (forall ((o@@0 T@U) ) (!  (or (not (|Set#IsMember| a@@4 o@@0)) (not (|Set#IsMember| b@@4 o@@0)))
 :pattern ( (|Set#IsMember| a@@4 o@@0))
 :pattern ( (|Set#IsMember| b@@4 o@@0))
)))
 :pattern ( (|Set#Disjoint| a@@4 b@@4))
)))
(assert (forall ((m@@2 T@U) (bx T@U) ) (! (= (|Set#IsMember| (|Set#FromBoogieMap| m@@2) bx) (U_2_bool (MapType0Select BoxType boolType m@@2 bx)))
 :pattern ( (|Set#IsMember| (|Set#FromBoogieMap| m@@2) bx))
)))
(assert (forall ((d@@5 T@U) ) (!  (=> (_System.Tuple2.___hMake2_q d@@5) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (= d@@5 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))))
 :pattern ( (_System.Tuple2.___hMake2_q d@@5))
)))
(assert (forall ((d@@6 T@U) ) (!  (=> (VarUnchanged.MState.MState_q d@@6) (exists ((|a#1#0#0@@0| T@U) (|a#1#1#0@@0| T@U) ) (= d@@6 (|#VarUnchanged.MState.MState| |a#1#0#0@@0| |a#1#1#0@@0|))))
 :pattern ( (VarUnchanged.MState.MState_q d@@6))
)))
(assert (forall ((d@@7 T@U) ) (!  (=> (Utils.Option.None_q d@@7) (= d@@7 |#Utils.Option.None|))
 :pattern ( (Utils.Option.None_q d@@7))
)))
(assert (= (Ctor SetType) 6))
(assert (forall ((v T@U) (t0@@0 T@U) ) (! (= ($Is SetType v (TSet t0@@0)) (forall ((bx@@0 T@U) ) (!  (=> (|Set#IsMember| v bx@@0) ($IsBox bx@@0 t0@@0))
 :pattern ( (|Set#IsMember| v bx@@0))
)))
 :pattern ( ($Is SetType v (TSet t0@@0)))
)))
(assert (forall ((d@@8 T@U) ) (!  (=> (Utils.Option.Some_q d@@8) (exists ((|a#1#0#0@@1| T@U) ) (= d@@8 (|#Utils.Option.Some| |a#1#0#0@@1|))))
 :pattern ( (Utils.Option.Some_q d@@8))
)))
(assert (forall ((v@@0 T@U) (t T@U) (h T@U) (T@@1 T@T) ) (! (= ($IsAllocBox ($Box T@@1 v@@0) t h) ($IsAlloc T@@1 v@@0 t h))
 :pattern ( ($IsAllocBox ($Box T@@1 v@@0) t h))
)))
(assert (forall ((Utils.Option$T@@1 T@U) ) (!  (and (= (Tag (Tclass.Utils.Option Utils.Option$T@@1)) Tagclass.Utils.Option) (= (TagFamily (Tclass.Utils.Option Utils.Option$T@@1)) tytagFamily$Option))
 :pattern ( (Tclass.Utils.Option Utils.Option$T@@1))
)))
(assert (forall ((m@@3 T@U) (n T@U) (u@@0 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| (|Map#Merge| m@@3 n)) u@@0) (and (=> (not (|Set#IsMember| (|Map#Domain| n) u@@0)) (= (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Merge| m@@3 n)) u@@0) (MapType0Select BoxType BoxType (|Map#Elements| m@@3) u@@0))) (=> (|Set#IsMember| (|Map#Domain| n) u@@0) (= (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Merge| m@@3 n)) u@@0) (MapType0Select BoxType BoxType (|Map#Elements| n) u@@0)))))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| (|Map#Merge| m@@3 n)) u@@0))
)))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) (bx@@1 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| |a#8#1#0|) bx@@1) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select BoxType BoxType (|Map#Elements| |a#8#1#0|) bx@@1))) (DtRank (|#VarUnchanged.MState.MState| |a#8#0#0| |a#8#1#0|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |a#8#1#0|) bx@@1) (|#VarUnchanged.MState.MState| |a#8#0#0| |a#8#1#0|))
)))
(assert (forall ((bx@@2 T@U) ) (!  (=> ($IsBox bx@@2 Tclass.VarUnchanged.S) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@2)) bx@@2) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@2) Tclass.VarUnchanged.S)))
 :pattern ( ($IsBox bx@@2 Tclass.VarUnchanged.S))
)))
(assert (forall ((bx@@3 T@U) ) (!  (=> ($IsBox bx@@3 Tclass.VarUnchanged.MState) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@3)) bx@@3) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@3) Tclass.VarUnchanged.MState)))
 :pattern ( ($IsBox bx@@3 Tclass.VarUnchanged.MState))
)))
(assert (= (Ctor MapType) 7))
(assert (forall ((|a#2#0#0@@1| T@U) (|a#2#1#0@@1| T@U) ) (! (= ($Is DatatypeTypeType (|#VarUnchanged.MState.MState| |a#2#0#0@@1| |a#2#1#0@@1|) Tclass.VarUnchanged.MState)  (and ($Is DatatypeTypeType |a#2#0#0@@1| (Tclass.Utils.Option (TSeq TChar))) ($Is MapType |a#2#1#0@@1| (TMap (TSeq TChar) TInt))))
 :pattern ( ($Is DatatypeTypeType (|#VarUnchanged.MState.MState| |a#2#0#0@@1| |a#2#1#0@@1|) Tclass.VarUnchanged.MState))
)))
(assert (forall ((Utils.Option$T@@2 T@U) (|a#2#0#0@@2| T@U) ($h@@2 T@U) ) (!  (=> ($IsGoodHeap $h@@2) (= ($IsAlloc DatatypeTypeType (|#Utils.Option.Some| |a#2#0#0@@2|) (Tclass.Utils.Option Utils.Option$T@@2) $h@@2) ($IsAllocBox |a#2#0#0@@2| Utils.Option$T@@2 $h@@2)))
 :pattern ( ($IsAlloc DatatypeTypeType (|#Utils.Option.Some| |a#2#0#0@@2|) (Tclass.Utils.Option Utils.Option$T@@2) $h@@2))
)))
(assert (forall ((a@@5 T@U) (b@@5 T@U) (o@@1 T@U) ) (! (= (|Set#IsMember| (|Set#Union| a@@5 b@@5) o@@1)  (or (|Set#IsMember| a@@5 o@@1) (|Set#IsMember| b@@5 o@@1)))
 :pattern ( (|Set#IsMember| (|Set#Union| a@@5 b@@5) o@@1))
)))
(assert (forall ((a@@6 T@U) (b@@6 T@U) ) (!  (=> (|Set#Disjoint| a@@6 b@@6) (and (= (|Set#Difference| (|Set#Union| a@@6 b@@6) a@@6) b@@6) (= (|Set#Difference| (|Set#Union| a@@6 b@@6) b@@6) a@@6)))
 :pattern ( (|Set#Union| a@@6 b@@6))
)))
(assert (forall ((s@@0 T@U) (x@@5 T@U) ) (! (= (|Seq#Contains| s@@0 x@@5) (exists ((i Int) ) (!  (and (and (<= 0 i) (< i (|Seq#Length| s@@0))) (= (|Seq#Index| s@@0 i) x@@5))
 :pattern ( (|Seq#Index| s@@0 i))
)))
 :pattern ( (|Seq#Contains| s@@0 x@@5))
)))
(assert (forall ((Utils.Option$T@@3 T@U) (d@@9 T@U) ) (!  (=> ($Is DatatypeTypeType d@@9 (Tclass.Utils.Option Utils.Option$T@@3)) (or (Utils.Option.Some_q d@@9) (Utils.Option.None_q d@@9)))
 :pattern ( (Utils.Option.None_q d@@9) ($Is DatatypeTypeType d@@9 (Tclass.Utils.Option Utils.Option$T@@3)))
 :pattern ( (Utils.Option.Some_q d@@9) ($Is DatatypeTypeType d@@9 (Tclass.Utils.Option Utils.Option$T@@3)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|st0#0@@0| T@U) (|st#0@@2| T@U) (|vars#0@@0| T@U) ) (!  (=> (or (|VarUnchanged.__default.BindEndScope#canCall| |st0#0@@0| |st#0@@2| |vars#0@@0|) (and (< 2 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |st0#0@@0| Tclass.VarUnchanged.S) ($Is DatatypeTypeType |st#0@@2| Tclass.VarUnchanged.S)) ($Is SeqType |vars#0@@0| (TSeq (TSeq TChar)))))) ($Is DatatypeTypeType (VarUnchanged.__default.BindEndScope |st0#0@@0| |st#0@@2| |vars#0@@0|) Tclass.VarUnchanged.S))
 :pattern ( (VarUnchanged.__default.BindEndScope |st0#0@@0| |st#0@@2| |vars#0@@0|))
))))
(assert (forall ((bx@@4 T@U) ) (!  (=> ($IsBox bx@@4 TInt) (and (= ($Box intType ($Unbox intType bx@@4)) bx@@4) ($Is intType ($Unbox intType bx@@4) TInt)))
 :pattern ( ($IsBox bx@@4 TInt))
)))
(assert (= (Ctor charType) 8))
(assert (forall ((bx@@5 T@U) ) (!  (=> ($IsBox bx@@5 TChar) (and (= ($Box charType ($Unbox charType bx@@5)) bx@@5) ($Is charType ($Unbox charType bx@@5) TChar)))
 :pattern ( ($IsBox bx@@5 TChar))
)))
(assert (forall ((v@@1 T@U) (t@@0 T@U) (T@@2 T@T) ) (! (= ($IsBox ($Box T@@2 v@@1) t@@0) ($Is T@@2 v@@1 t@@0))
 :pattern ( ($IsBox ($Box T@@2 v@@1) t@@0))
)))
(assert (forall ((s@@1 T@U) ) (! (<= 0 (|Seq#Length| s@@1))
 :pattern ( (|Seq#Length| s@@1))
)))
(assert (forall ((v@@2 T@U) (t0@@1 T@U) (h@@0 T@U) ) (! (= ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0) (forall ((bx@@6 T@U) ) (!  (=> (|Set#IsMember| v@@2 bx@@6) ($IsAllocBox bx@@6 t0@@1 h@@0))
 :pattern ( (|Set#IsMember| v@@2 bx@@6))
)))
 :pattern ( ($IsAlloc SetType v@@2 (TSet t0@@1) h@@0))
)))
(assert (forall ((t@@1 T@U) (u@@1 T@U) ) (! (= (Inv0_TMap (TMap t@@1 u@@1)) t@@1)
 :pattern ( (TMap t@@1 u@@1))
)))
(assert (forall ((t@@2 T@U) (u@@2 T@U) ) (! (= (Inv1_TMap (TMap t@@2 u@@2)) u@@2)
 :pattern ( (TMap t@@2 u@@2))
)))
(assert (forall ((t@@3 T@U) (u@@3 T@U) ) (! (= (Tag (TMap t@@3 u@@3)) TagMap)
 :pattern ( (TMap t@@3 u@@3))
)))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (! (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|))
)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) ) (! (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)) |_System._tuple#2$T0@@2|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))
)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) ) (! (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) |_System._tuple#2$T1@@3|)
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))
)))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (! (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)) |a#4#0#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|))
)))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (! (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) |a#6#1#0|)
 :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|))
)))
(assert (forall ((|a#0#0#0@@0| T@U) (|a#0#1#0@@0| T@U) ) (! (= (DatatypeCtorId (|#VarUnchanged.MState.MState| |a#0#0#0@@0| |a#0#1#0@@0|)) |##VarUnchanged.MState.MState|)
 :pattern ( (|#VarUnchanged.MState.MState| |a#0#0#0@@0| |a#0#1#0@@0|))
)))
(assert (forall ((|a#4#0#0@@0| T@U) (|a#4#1#0@@0| T@U) ) (! (= (VarUnchanged.MState.x (|#VarUnchanged.MState.MState| |a#4#0#0@@0| |a#4#1#0@@0|)) |a#4#0#0@@0|)
 :pattern ( (|#VarUnchanged.MState.MState| |a#4#0#0@@0| |a#4#1#0@@0|))
)))
(assert (forall ((|a#6#0#0@@0| T@U) (|a#6#1#0@@0| T@U) ) (! (= (VarUnchanged.MState.ctx (|#VarUnchanged.MState.MState| |a#6#0#0@@0| |a#6#1#0@@0|)) |a#6#1#0@@0|)
 :pattern ( (|#VarUnchanged.MState.MState| |a#6#0#0@@0| |a#6#1#0@@0|))
)))
(assert (forall ((v@@3 T@U) (t0@@2 T@U) (h@@1 T@U) ) (! (= ($IsAlloc SeqType v@@3 (TSeq t0@@2) h@@1) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@3))) ($IsAllocBox (|Seq#Index| v@@3 i@@0) t0@@2 h@@1))
 :pattern ( (|Seq#Index| v@@3 i@@0))
)))
 :pattern ( ($IsAlloc SeqType v@@3 (TSeq t0@@2) h@@1))
)))
(assert (forall ((t@@4 T@U) ) (! (= (Inv0_TSet (TSet t@@4)) t@@4)
 :pattern ( (TSet t@@4))
)))
(assert (forall ((t@@5 T@U) ) (! (= (Tag (TSet t@@5)) TagSet)
 :pattern ( (TSet t@@5))
)))
(assert (forall ((t@@6 T@U) ) (! (= (Inv0_TSeq (TSeq t@@6)) t@@6)
 :pattern ( (TSeq t@@6))
)))
(assert (forall ((t@@7 T@U) ) (! (= (Tag (TSeq t@@7)) TagSeq)
 :pattern ( (TSeq t@@7))
)))
(assert (forall ((Utils.Option$T@@4 T@U) ) (! (= (Tclass.Utils.Option_0 (Tclass.Utils.Option Utils.Option$T@@4)) Utils.Option$T@@4)
 :pattern ( (Tclass.Utils.Option Utils.Option$T@@4))
)))
(assert (forall ((|a#0#0#0@@1| T@U) ) (! (= (DatatypeCtorId (|#Utils.Option.Some| |a#0#0#0@@1|)) |##Utils.Option.Some|)
 :pattern ( (|#Utils.Option.Some| |a#0#0#0@@1|))
)))
(assert (forall ((|a#4#0#0@@1| T@U) ) (! (= (Utils.Option.value (|#Utils.Option.Some| |a#4#0#0@@1|)) |a#4#0#0@@1|)
 :pattern ( (|#Utils.Option.Some| |a#4#0#0@@1|))
)))
(assert (forall ((x@@6 T@U) (T@@3 T@T) ) (! (= ($Unbox T@@3 ($Box T@@3 x@@6)) x@@6)
 :pattern ( ($Box T@@3 x@@6))
)))
(assert (forall ((v@@4 T@U) (t0@@3 T@U) (t1@@0 T@U) (h@@2 T@U) ) (! (= ($IsAlloc MapType v@@4 (TMap t0@@3 t1@@0) h@@2) (forall ((bx@@7 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@4) bx@@7) (and ($IsAllocBox (MapType0Select BoxType BoxType (|Map#Elements| v@@4) bx@@7) t1@@0 h@@2) ($IsAllocBox bx@@7 t0@@3 h@@2)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@4) bx@@7))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@4) bx@@7))
)))
 :pattern ( ($IsAlloc MapType v@@4 (TMap t0@@3 t1@@0) h@@2))
)))
(assert (forall ((Utils.Option$T@@5 T@U) (|a#2#0#0@@3| T@U) ) (! (= ($Is DatatypeTypeType (|#Utils.Option.Some| |a#2#0#0@@3|) (Tclass.Utils.Option Utils.Option$T@@5)) ($IsBox |a#2#0#0@@3| Utils.Option$T@@5))
 :pattern ( ($Is DatatypeTypeType (|#Utils.Option.Some| |a#2#0#0@@3|) (Tclass.Utils.Option Utils.Option$T@@5)))
)))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (! (< (BoxRank |a#5#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|))
)))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (! (< (BoxRank |a#7#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|))
)))
(assert (forall ((|a#5#0#0@@0| T@U) (|a#5#1#0@@0| T@U) ) (! (< (DtRank |a#5#0#0@@0|) (DtRank (|#VarUnchanged.MState.MState| |a#5#0#0@@0| |a#5#1#0@@0|)))
 :pattern ( (|#VarUnchanged.MState.MState| |a#5#0#0@@0| |a#5#1#0@@0|))
)))
(assert (forall ((a@@7 T@U) (b@@7 T@U) ) (! (= (|Set#Union| a@@7 (|Set#Union| a@@7 b@@7)) (|Set#Union| a@@7 b@@7))
 :pattern ( (|Set#Union| a@@7 (|Set#Union| a@@7 b@@7)))
)))
(assert (forall ((u@@4 T@U) ) (!  (not (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@4))
 :pattern ( (|Set#IsMember| (|Map#Domain| |Map#Empty|) u@@4))
)))
(assert (forall ((bx@@8 T@U) (s@@2 T@U) (t@@8 T@U) ) (!  (=> ($IsBox bx@@8 (TMap s@@2 t@@8)) (and (= ($Box MapType ($Unbox MapType bx@@8)) bx@@8) ($Is MapType ($Unbox MapType bx@@8) (TMap s@@2 t@@8))))
 :pattern ( ($IsBox bx@@8 (TMap s@@2 t@@8)))
)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (bx@@9 T@U) ) (!  (=> ($IsBox bx@@9 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@9)) bx@@9) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@9) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|))))
 :pattern ( ($IsBox bx@@9 (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|)))
)))
(assert (forall ((|a#5#0#0@@1| T@U) ) (! (< (BoxRank |a#5#0#0@@1|) (DtRank (|#Utils.Option.Some| |a#5#0#0@@1|)))
 :pattern ( (|#Utils.Option.Some| |a#5#0#0@@1|))
)))
(assert (forall ((d@@10 T@U) (Utils.Option$T@@6 T@U) ($h@@3 T@U) ) (!  (=> (and ($IsGoodHeap $h@@3) (and (Utils.Option.Some_q d@@10) ($IsAlloc DatatypeTypeType d@@10 (Tclass.Utils.Option Utils.Option$T@@6) $h@@3))) ($IsAllocBox (Utils.Option.value d@@10) Utils.Option$T@@6 $h@@3))
 :pattern ( ($IsAllocBox (Utils.Option.value d@@10) Utils.Option$T@@6 $h@@3))
)))
(assert  (and (and (and (and (and (and (forall ((t0@@4 T@T) (t1@@1 T@T) (t2 T@T) (val@@1 T@U) (m@@4 T@U) (x0@@1 T@U) (x1 T@U) ) (! (= (MapType1Select t0@@4 t1@@1 t2 (MapType1Store t0@@4 t1@@1 t2 m@@4 x0@@1 x1 val@@1) x0@@1 x1) val@@1)
 :weight 0
)) (and (forall ((u0@@0 T@T) (u1@@0 T@T) (u2 T@T) (val@@2 T@U) (m@@5 T@U) (x0@@2 T@U) (x1@@0 T@U) (y0@@0 T@U) (y1 T@U) ) (!  (or (= x0@@2 y0@@0) (= (MapType1Select u0@@0 u1@@0 u2 (MapType1Store u0@@0 u1@@0 u2 m@@5 x0@@2 x1@@0 val@@2) y0@@0 y1) (MapType1Select u0@@0 u1@@0 u2 m@@5 y0@@0 y1)))
 :weight 0
)) (forall ((u0@@1 T@T) (u1@@1 T@T) (u2@@0 T@T) (val@@3 T@U) (m@@6 T@U) (x0@@3 T@U) (x1@@1 T@U) (y0@@1 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType1Select u0@@1 u1@@1 u2@@0 (MapType1Store u0@@1 u1@@1 u2@@0 m@@6 x0@@3 x1@@1 val@@3) y0@@1 y1@@0) (MapType1Select u0@@1 u1@@1 u2@@0 m@@6 y0@@1 y1@@0)))
 :weight 0
)))) (= (Ctor refType) 9)) (= (Ctor FieldType) 10)) (forall ((arg0@@2 T@T) (arg1 T@T) ) (= (Ctor (MapType0Type arg0@@2 arg1)) 11))) (forall ((arg0@@3 T@T) (arg1@@0 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@3 arg1@@0)) arg0@@3)
 :pattern ( (MapType0Type arg0@@3 arg1@@0))
))) (forall ((arg0@@4 T@T) (arg1@@1 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@4 arg1@@1)) arg1@@1)
 :pattern ( (MapType0Type arg0@@4 arg1@@1))
))))
(assert (forall ((|l#0@@0| T@U) (|l#1@@0| T@U) (|l#2| T@U) (|l#3| Bool) ($o T@U) ($f T@U) ) (! (= (U_2_bool (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@0| |l#1@@0| |l#2| |l#3|) $o $f))  (=> (and (or (not (= $o |l#0@@0|)) (not true)) (U_2_bool ($Unbox boolType (MapType0Select FieldType BoxType (MapType0Select refType (MapType0Type FieldType BoxType) |l#1@@0| $o) |l#2|)))) |l#3|))
 :pattern ( (MapType1Select refType FieldType boolType (|lambda#0| |l#0@@0| |l#1@@0| |l#2| |l#3|) $o $f))
)))
(assert (forall ((|_System._tuple#2$T0@@5| T@U) (|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|)) |tytagFamily$_tuple#2|))
 :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|))
)))
(assert (forall ((m@@7 T@U) ) (!  (or (= m@@7 |Map#Empty|) (exists ((k T@U) ) (|Set#IsMember| (|Map#Domain| m@@7) k)))
 :pattern ( (|Map#Domain| m@@7))
)))
(assert (forall ((m@@8 T@U) ) (!  (or (= m@@8 |Map#Empty|) (exists ((v@@5 T@U) ) (|Set#IsMember| (|Map#Values| m@@8) v@@5)))
 :pattern ( (|Map#Values| m@@8))
)))
(assert (forall ((m@@9 T@U) (item T@U) ) (! (= (|Set#IsMember| (|Map#Items| m@@9) item)  (and (|Set#IsMember| (|Map#Domain| m@@9) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (= (MapType0Select BoxType BoxType (|Map#Elements| m@@9) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))
 :pattern ( (|Set#IsMember| (|Map#Items| m@@9) item))
)))
(assert (forall ((m@@10 T@U) (v@@6 T@U) ) (! (= (|Set#IsMember| (|Map#Values| m@@10) v@@6) (exists ((u@@5 T@U) ) (!  (and (|Set#IsMember| (|Map#Domain| m@@10) u@@5) (= v@@6 (MapType0Select BoxType BoxType (|Map#Elements| m@@10) u@@5)))
 :pattern ( (|Set#IsMember| (|Map#Domain| m@@10) u@@5))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| m@@10) u@@5))
)))
 :pattern ( (|Set#IsMember| (|Map#Values| m@@10) v@@6))
)))
(assert (forall ((d@@11 T@U) ) (! (= (BoxRank ($Box DatatypeTypeType d@@11)) (DtRank d@@11))
 :pattern ( (BoxRank ($Box DatatypeTypeType d@@11)))
)))
(assert (forall ((bx@@10 T@U) (t@@9 T@U) ) (!  (=> ($IsBox bx@@10 (TSet t@@9)) (and (= ($Box SetType ($Unbox SetType bx@@10)) bx@@10) ($Is SetType ($Unbox SetType bx@@10) (TSet t@@9))))
 :pattern ( ($IsBox bx@@10 (TSet t@@9)))
)))
(assert (forall ((bx@@11 T@U) (t@@10 T@U) ) (!  (=> ($IsBox bx@@11 (TSeq t@@10)) (and (= ($Box SeqType ($Unbox SeqType bx@@11)) bx@@11) ($Is SeqType ($Unbox SeqType bx@@11) (TSeq t@@10))))
 :pattern ( ($IsBox bx@@11 (TSeq t@@10)))
)))
(assert (forall ((Utils.Option$T@@7 T@U) (bx@@12 T@U) ) (!  (=> ($IsBox bx@@12 (Tclass.Utils.Option Utils.Option$T@@7)) (and (= ($Box DatatypeTypeType ($Unbox DatatypeTypeType bx@@12)) bx@@12) ($Is DatatypeTypeType ($Unbox DatatypeTypeType bx@@12) (Tclass.Utils.Option Utils.Option$T@@7))))
 :pattern ( ($IsBox bx@@12 (Tclass.Utils.Option Utils.Option$T@@7)))
)))
(assert (forall ((m@@11 T@U) (s@@3 T@U) ) (! (= (|Map#Domain| (|Map#Subtract| m@@11 s@@3)) (|Set#Difference| (|Map#Domain| m@@11) s@@3))
 :pattern ( (|Map#Domain| (|Map#Subtract| m@@11 s@@3)))
)))
(assert (forall ((v@@7 T@U) (t0@@5 T@U) (t1@@2 T@U) ) (! (= ($Is MapType v@@7 (TMap t0@@5 t1@@2)) (forall ((bx@@13 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| v@@7) bx@@13) (and ($IsBox (MapType0Select BoxType BoxType (|Map#Elements| v@@7) bx@@13) t1@@2) ($IsBox bx@@13 t0@@5)))
 :pattern ( (MapType0Select BoxType BoxType (|Map#Elements| v@@7) bx@@13))
 :pattern ( (|Set#IsMember| (|Map#Domain| v@@7) bx@@13))
)))
 :pattern ( ($Is MapType v@@7 (TMap t0@@5 t1@@2)))
)))
(assert (forall ((d@@12 T@U) ($h@@4 T@U) ) (!  (=> (and ($IsGoodHeap $h@@4) ($Is DatatypeTypeType d@@12 Tclass.VarUnchanged.MState)) ($IsAlloc DatatypeTypeType d@@12 Tclass.VarUnchanged.MState $h@@4))
 :pattern ( ($IsAlloc DatatypeTypeType d@@12 Tclass.VarUnchanged.MState $h@@4))
)))
(assert (= (Tag Tclass.VarUnchanged.S) Tagclass.VarUnchanged.S))
(assert (= (TagFamily Tclass.VarUnchanged.S) tytagFamily$S))
(assert (= (Tag Tclass.VarUnchanged.MState) Tagclass.VarUnchanged.MState))
(assert (= (TagFamily Tclass.VarUnchanged.MState) tytagFamily$MState))
(assert (= |#Utils.Option.None| (Lit DatatypeTypeType |#Utils.Option.None|)))
(assert (forall ((|a#7#0#0@@0| T@U) (|a#7#1#0@@0| T@U) (d@@13 T@U) ) (!  (=> (|Set#IsMember| (|Map#Domain| |a#7#1#0@@0|) ($Box DatatypeTypeType d@@13)) (< (DtRank d@@13) (DtRank (|#VarUnchanged.MState.MState| |a#7#0#0@@0| |a#7#1#0@@0|))))
 :pattern ( (|Set#IsMember| (|Map#Domain| |a#7#1#0@@0|) ($Box DatatypeTypeType d@@13)) (|#VarUnchanged.MState.MState| |a#7#0#0@@0| |a#7#1#0@@0|))
)))
(assert (forall ((d@@14 T@U) ($h@@5 T@U) ) (!  (=> (and ($IsGoodHeap $h@@5) (and (VarUnchanged.MState.MState_q d@@14) ($IsAlloc DatatypeTypeType d@@14 Tclass.VarUnchanged.MState $h@@5))) ($IsAlloc MapType (VarUnchanged.MState.ctx d@@14) (TMap (TSeq TChar) TInt) $h@@5))
 :pattern ( ($IsAlloc MapType (VarUnchanged.MState.ctx d@@14) (TMap (TSeq TChar) TInt) $h@@5))
)))
(assert (forall ((d@@15 T@U) (|_System._tuple#2$T0@@6| T@U) ($h@@6 T@U) ) (!  (=> (and ($IsGoodHeap $h@@6) (and (_System.Tuple2.___hMake2_q d@@15) (exists ((|_System._tuple#2$T1@@6| T@U) ) (! ($IsAlloc DatatypeTypeType d@@15 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@6)
 :pattern ( ($IsAlloc DatatypeTypeType d@@15 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@6))
)))) ($IsAllocBox (_System.Tuple2._0 d@@15) |_System._tuple#2$T0@@6| $h@@6))
 :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@15) |_System._tuple#2$T0@@6| $h@@6))
)))
(assert (forall ((d@@16 T@U) (|_System._tuple#2$T1@@7| T@U) ($h@@7 T@U) ) (!  (=> (and ($IsGoodHeap $h@@7) (and (_System.Tuple2.___hMake2_q d@@16) (exists ((|_System._tuple#2$T0@@7| T@U) ) (! ($IsAlloc DatatypeTypeType d@@16 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@7)
 :pattern ( ($IsAlloc DatatypeTypeType d@@16 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|) $h@@7))
)))) ($IsAllocBox (_System.Tuple2._1 d@@16) |_System._tuple#2$T1@@7| $h@@7))
 :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@16) |_System._tuple#2$T1@@7| $h@@7))
)))
(assert (forall ((|a#3#0#0| T@U) (|a#3#1#0| T@U) ) (! (= (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)) (Lit DatatypeTypeType (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)))
 :pattern ( (|#_System._tuple#2._#Make2| (Lit BoxType |a#3#0#0|) (Lit BoxType |a#3#1#0|)))
)))
(assert (forall ((|a#3#0#0@@0| T@U) (|a#3#1#0@@0| T@U) ) (! (= (|#VarUnchanged.MState.MState| (Lit DatatypeTypeType |a#3#0#0@@0|) (Lit MapType |a#3#1#0@@0|)) (Lit DatatypeTypeType (|#VarUnchanged.MState.MState| |a#3#0#0@@0| |a#3#1#0@@0|)))
 :pattern ( (|#VarUnchanged.MState.MState| (Lit DatatypeTypeType |a#3#0#0@@0|) (Lit MapType |a#3#1#0@@0|)))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|st0#0@@1| T@U) (|st#0@@3| T@U) (|vars#0@@1| T@U) ) (!  (=> (or (|VarUnchanged.__default.BindEndScope#canCall| |st0#0@@1| |st#0@@3| |vars#0@@1|) (and (< 2 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |st0#0@@1| Tclass.VarUnchanged.S) ($Is DatatypeTypeType |st#0@@3| Tclass.VarUnchanged.S)) ($Is SeqType |vars#0@@1| (TSeq (TSeq TChar)))))) (= (VarUnchanged.__default.BindEndScope |st0#0@@1| |st#0@@3| |vars#0@@1|) (let ((|ctx0#0| (VarUnchanged.MState.ctx |st0#0@@1|)))
(let ((|x0#0| (VarUnchanged.MState.x |st0#0@@1|)))
(let ((|ctx#0| (VarUnchanged.MState.ctx |st#0@@3|)))
(let ((|ctx1#0| (|Map#Merge| |ctx0#0| (|Map#Subtract| |ctx#0| (|Set#FromBoogieMap| (|lambda#7| (TSeq TChar) |vars#0@@1|))))))
(let ((|st'#0| (|#VarUnchanged.MState.MState| |x0#0| |ctx1#0|)))
|st'#0|)))))))
 :pattern ( (VarUnchanged.__default.BindEndScope |st0#0@@1| |st#0@@3| |vars#0@@1|))
))))
(assert (forall ((|a#3#0#0@@1| T@U) ) (! (= (|#Utils.Option.Some| (Lit BoxType |a#3#0#0@@1|)) (Lit DatatypeTypeType (|#Utils.Option.Some| |a#3#0#0@@1|)))
 :pattern ( (|#Utils.Option.Some| (Lit BoxType |a#3#0#0@@1|)))
)))
(assert (forall ((x@@7 T@U) (T@@4 T@T) ) (! (= ($Box T@@4 (Lit T@@4 x@@7)) (Lit BoxType ($Box T@@4 x@@7)))
 :pattern ( ($Box T@@4 (Lit T@@4 x@@7)))
)))
(assert (forall ((m@@12 T@U) (n@@0 T@U) ) (! (= (|Map#Domain| (|Map#Merge| m@@12 n@@0)) (|Set#Union| (|Map#Domain| m@@12) (|Map#Domain| n@@0)))
 :pattern ( (|Map#Domain| (|Map#Merge| m@@12 n@@0)))
)))
(assert (forall ((d@@17 T@U) ($h@@8 T@U) ) (!  (=> (and ($IsGoodHeap $h@@8) (and (VarUnchanged.MState.MState_q d@@17) ($IsAlloc DatatypeTypeType d@@17 Tclass.VarUnchanged.MState $h@@8))) ($IsAlloc DatatypeTypeType (VarUnchanged.MState.x d@@17) (Tclass.Utils.Option (TSeq TChar)) $h@@8))
 :pattern ( ($IsAlloc DatatypeTypeType (VarUnchanged.MState.x d@@17) (Tclass.Utils.Option (TSeq TChar)) $h@@8))
)))
(assert (forall ((s@@4 T@U) ) (!  (=> (= (|Seq#Length| s@@4) 0) (= s@@4 |Seq#Empty|))
 :pattern ( (|Seq#Length| s@@4))
)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|st0#0@@2| T@U) (|st#0@@4| T@U) (|vars#0@@2| T@U) ) (!  (=> (or (|VarUnchanged.__default.BindEndScope#canCall| (Lit DatatypeTypeType |st0#0@@2|) (Lit DatatypeTypeType |st#0@@4|) (Lit SeqType |vars#0@@2|)) (and (< 2 $FunctionContextHeight) (and (and ($Is DatatypeTypeType |st0#0@@2| Tclass.VarUnchanged.S) ($Is DatatypeTypeType |st#0@@4| Tclass.VarUnchanged.S)) ($Is SeqType |vars#0@@2| (TSeq (TSeq TChar)))))) (= (VarUnchanged.__default.BindEndScope (Lit DatatypeTypeType |st0#0@@2|) (Lit DatatypeTypeType |st#0@@4|) (Lit SeqType |vars#0@@2|)) (let ((|ctx0#2| (VarUnchanged.MState.ctx (Lit DatatypeTypeType |st0#0@@2|))))
(let ((|x0#2| (VarUnchanged.MState.x (Lit DatatypeTypeType |st0#0@@2|))))
(let ((|ctx#2| (VarUnchanged.MState.ctx (Lit DatatypeTypeType |st#0@@4|))))
(let ((|ctx1#2| (|Map#Merge| |ctx0#2| (|Map#Subtract| |ctx#2| (|Set#FromBoogieMap| (|lambda#7| (TSeq TChar) |vars#0@@2|))))))
(let ((|st'#2| (|#VarUnchanged.MState.MState| |x0#2| |ctx1#2|)))
|st'#2|)))))))
 :weight 3
 :pattern ( (VarUnchanged.__default.BindEndScope (Lit DatatypeTypeType |st0#0@@2|) (Lit DatatypeTypeType |st#0@@4|) (Lit SeqType |vars#0@@2|)))
))))
(assert (forall ((h@@3 T@U) (v@@8 T@U) ) (! ($IsAlloc intType v@@8 TInt h@@3)
 :pattern ( ($IsAlloc intType v@@8 TInt h@@3))
)))
(assert (forall ((h@@4 T@U) (v@@9 T@U) ) (! ($IsAlloc charType v@@9 TChar h@@4)
 :pattern ( ($IsAlloc charType v@@9 TChar h@@4))
)))
(assert (forall ((v@@10 T@U) (t0@@6 T@U) ) (! (= ($Is SeqType v@@10 (TSeq t0@@6)) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@10))) ($IsBox (|Seq#Index| v@@10 i@@1) t0@@6))
 :pattern ( (|Seq#Index| v@@10 i@@1))
)))
 :pattern ( ($Is SeqType v@@10 (TSeq t0@@6)))
)))
(assert (forall ((m@@13 T@U) ) (!  (or (= m@@13 |Map#Empty|) (exists ((k@@0 T@U) (v@@11 T@U) ) (|Set#IsMember| (|Map#Items| m@@13) ($Box DatatypeTypeType (|#_System._tuple#2._#Make2| k@@0 v@@11)))))
 :pattern ( (|Map#Items| m@@13))
)))
(assert (forall ((s@@5 T@U) (i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| s@@5))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@5 i@@2))) (|Seq#Rank| s@@5)))
 :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@5 i@@2))))
)))
(assert (forall ((v@@12 T@U) (t0@@7 T@U) (t1@@3 T@U) ) (!  (=> ($Is MapType v@@12 (TMap t0@@7 t1@@3)) (and (and ($Is SetType (|Map#Domain| v@@12) (TSet t0@@7)) ($Is SetType (|Map#Values| v@@12) (TSet t1@@3))) ($Is SetType (|Map#Items| v@@12) (TSet (Tclass._System.Tuple2 t0@@7 t1@@3)))))
 :pattern ( ($Is MapType v@@12 (TMap t0@@7 t1@@3)))
)))
(assert (forall ((v@@13 T@U) ) (! ($Is intType v@@13 TInt)
 :pattern ( ($Is intType v@@13 TInt))
)))
(assert (forall ((v@@14 T@U) ) (! ($Is charType v@@14 TChar)
 :pattern ( ($Is charType v@@14 TChar))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |let#2#0#0| () T@U)
(declare-fun |ctx0#Z#0@0| () T@U)
(declare-fun |ctx#Z#0@0| () T@U)
(declare-fun |vars#0@@3| () T@U)
(declare-fun |ctx1#Z#0@0| () T@U)
(declare-fun |let#3#0#0| () T@U)
(declare-fun |x0#Z#0@0| () T@U)
(declare-fun |st'#Z#0@0| () T@U)
(declare-fun |x#6@0| () T@U)
(declare-fun $Heap () T@U)
(declare-fun |let#0#0#0| () T@U)
(declare-fun |st0#0@@3| () T@U)
(declare-fun |let#1#0#0| () T@U)
(declare-fun |st#0@@5| () T@U)
(declare-fun |x#Z#0@0| () T@U)
(declare-fun $_ReadsFrame@0 () T@U)
(declare-fun null () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 10) (let ((anon6_correct  (=> (= |let#2#0#0| (|Map#Merge| |ctx0#Z#0@0| (|Map#Subtract| |ctx#Z#0@0| (|Set#FromBoogieMap| (|lambda#7| (TSeq TChar) |vars#0@@3|))))) (=> (and ($Is MapType |let#2#0#0| (TMap (TSeq TChar) TInt)) (= |ctx1#Z#0@0| |let#2#0#0|)) (=> (and (and (= |let#3#0#0| (|#VarUnchanged.MState.MState| |x0#Z#0@0| |ctx1#Z#0@0|)) ($Is DatatypeTypeType |let#3#0#0| Tclass.VarUnchanged.MState)) (and (= |st'#Z#0@0| |let#3#0#0|) (= (ControlFlow 0 3) (- 0 2)))) ($Is DatatypeTypeType |st'#Z#0@0| Tclass.VarUnchanged.S))))))
(let ((anon10_Else_correct  (=> (and (not (|Seq#Contains| |vars#0@@3| ($Box SeqType |x#6@0|))) (= (ControlFlow 0 6) 3)) anon6_correct)))
(let ((anon10_Then_correct  (=> (and (|Seq#Contains| |vars#0@@3| ($Box SeqType |x#6@0|)) (= (ControlFlow 0 5) 3)) anon6_correct)))
(let ((anon9_Then_correct  (=> (and ($Is SeqType |x#6@0| (TSeq TChar)) ($IsAlloc SeqType |x#6@0| (TSeq TChar) $Heap)) (and (=> (= (ControlFlow 0 7) 5) anon10_Then_correct) (=> (= (ControlFlow 0 7) 6) anon10_Else_correct)))))
(let ((anon9_Else_correct  (=> (and (not (and ($Is SeqType |x#6@0| (TSeq TChar)) ($IsAlloc SeqType |x#6@0| (TSeq TChar) $Heap))) (= (ControlFlow 0 4) 3)) anon6_correct)))
(let ((anon8_Else_correct  (=> (and (and (and (= |let#0#0#0| |st0#0@@3|) ($Is DatatypeTypeType |let#0#0#0| Tclass.VarUnchanged.MState)) (and (VarUnchanged.MState.MState_q |let#0#0#0|) (= (|#VarUnchanged.MState.MState| |x0#Z#0@0| |ctx0#Z#0@0|) |let#0#0#0|))) (and (and (= |let#1#0#0| |st#0@@5|) ($Is DatatypeTypeType |let#1#0#0| Tclass.VarUnchanged.MState)) (and (VarUnchanged.MState.MState_q |let#1#0#0|) (= (|#VarUnchanged.MState.MState| |x#Z#0@0| |ctx#Z#0@0|) |let#1#0#0|)))) (and (=> (= (ControlFlow 0 8) 7) anon9_Then_correct) (=> (= (ControlFlow 0 8) 4) anon9_Else_correct)))))
(let ((anon8_Then_correct true))
(let ((anon0_correct  (=> (= $_ReadsFrame@0 (|lambda#0| null $Heap alloc false)) (and (=> (= (ControlFlow 0 9) 1) anon8_Then_correct) (=> (= (ControlFlow 0 9) 8) anon8_Else_correct)))))
(let ((PreconditionGeneratedEntry_correct  (=> (and (and (and ($IsGoodHeap $Heap) ($IsHeapAnchor $Heap)) ($Is DatatypeTypeType |st0#0@@3| Tclass.VarUnchanged.S)) (and (and ($Is DatatypeTypeType |st#0@@5| Tclass.VarUnchanged.S) ($Is SeqType |vars#0@@3| (TSeq (TSeq TChar)))) (and (= 2 $FunctionContextHeight) (= (ControlFlow 0 10) 9)))) anon0_correct)))
PreconditionGeneratedEntry_correct))))))))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
