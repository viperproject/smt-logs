(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
; done setting options


(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun $generated () T@U)
(declare-fun $generated@@0 () T@U)
(declare-fun $generated@@1 () T@U)
(declare-fun $generated@@2 () T@U)
(declare-fun $generated@@3 () T@U)
(declare-fun $generated@@4 () T@U)
(declare-fun $generated@@5 () T@U)
(declare-fun $generated@@6 () T@U)
(declare-fun $generated@@7 () T@U)
(declare-fun $generated@@8 () T@U)
(declare-fun $generated@@9 () T@U)
(declare-fun $generated@@10 () T@U)
(declare-fun $generated@@11 (T@T) Int)
(declare-fun $generated@@12 () T@T)
(declare-fun $generated@@13 () T@T)
(declare-fun $generated@@14 () T@T)
(declare-fun $generated@@15 (Bool) T@U)
(declare-fun $generated@@16 (T@U) Bool)
(declare-fun $generated@@17 (Int) T@U)
(declare-fun $generated@@18 (T@U) Int)
(declare-fun $generated@@19 (Real) T@U)
(declare-fun $generated@@20 (T@U) Real)
(declare-fun $generated@@27 (T@U) T@U)
(declare-fun $generated@@28 (T@U Int) T@U)
(declare-fun $generated@@29 (T@U T@U) T@U)
(declare-fun $generated@@30 (T@U) Int)
(declare-fun $generated@@31 (T@U) Int)
(declare-fun $generated@@32 (T@T T@U) T@U)
(declare-fun $generated@@33 () T@T)
(declare-fun $generated@@40 () T@U)
(declare-fun $generated@@41 (T@U) Bool)
(declare-fun $generated@@42 (T@T T@U T@U) Bool)
(declare-fun $generated@@43 () T@U)
(declare-fun $generated@@45 (Int Int) T@U)
(declare-fun $generated@@46 () T@U)
(declare-fun $generated@@49 (T@U T@U) Bool)
(declare-fun $generated@@52 (T@T T@U) T@U)
(declare-fun $generated@@55 (T@U) T@U)
(declare-fun $generated@@57 (T@U T@U) Bool)
(declare-fun $generated@@61 (T@T T@U) T@U)
(declare-fun $generated@@64 () Int)
(declare-fun $generated@@65 (T@U) T@U)
(declare-fun $generated@@66 (T@U) Bool)
(declare-fun $generated@@67 () T@U)
(declare-fun $generated@@68 () T@U)
(declare-fun $generated@@73 () T@T)
(declare-fun $generated@@74 (T@U) T@U)
(declare-fun $generated@@77 (T@U T@U) Bool)
(declare-fun $generated@@90 (T@U) Int)
(declare-fun $generated@@93 (T@U) Int)
(declare-fun $generated@@98 (T@U) T@U)
(declare-fun $generated@@101 (T@U) T@U)
(declare-fun $generated@@104 (T@U) T@U)
(declare-fun $generated@@112 (T@U) Int)
(declare-fun $generated@@117 (T@T T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@118 () T@T)
(declare-fun $generated@@119 () T@T)
(declare-fun $generated@@120 (T@U T@U T@U Bool) T@U)
(declare-fun $generated@@121 (T@T T@T T@U T@U) T@U)
(declare-fun $generated@@122 () T@T)
(declare-fun $generated@@123 (T@T T@T) T@T)
(declare-fun $generated@@124 (T@T T@T T@T T@U T@U T@U T@U) T@U)
(declare-fun $generated@@125 (T@T T@T T@U T@U T@U) T@U)
(declare-fun $generated@@126 (T@T) T@T)
(declare-fun $generated@@127 (T@T) T@T)
(declare-fun $generated@@179 (T@U) T@U)
(assert  (and (and (and (and (and (and (and (and (= ($generated@@11 $generated@@12) 0) (= ($generated@@11 $generated@@13) 1)) (= ($generated@@11 $generated@@14) 2)) (forall (($generated@@21 Bool) ) (! (= ($generated@@16 ($generated@@15 $generated@@21)) $generated@@21)
 :pattern ( ($generated@@15 $generated@@21))
))) (forall (($generated@@22 T@U) ) (! (= ($generated@@15 ($generated@@16 $generated@@22)) $generated@@22)
 :pattern ( ($generated@@16 $generated@@22))
))) (forall (($generated@@23 Int) ) (! (= ($generated@@18 ($generated@@17 $generated@@23)) $generated@@23)
 :pattern ( ($generated@@17 $generated@@23))
))) (forall (($generated@@24 T@U) ) (! (= ($generated@@17 ($generated@@18 $generated@@24)) $generated@@24)
 :pattern ( ($generated@@18 $generated@@24))
))) (forall (($generated@@25 Real) ) (! (= ($generated@@20 ($generated@@19 $generated@@25)) $generated@@25)
 :pattern ( ($generated@@19 $generated@@25))
))) (forall (($generated@@26 T@U) ) (! (= ($generated@@19 ($generated@@20 $generated@@26)) $generated@@26)
 :pattern ( ($generated@@20 $generated@@26))
))))
(assert (distinct $generated $generated@@0 $generated@@1 $generated@@2 $generated@@3 $generated@@4 $generated@@5 $generated@@6 $generated@@7 $generated@@8 $generated@@9 $generated@@10)
)
(assert (= ($generated@@27 $generated) $generated@@0))
(assert (= ($generated@@11 $generated@@33) 3))
(assert (forall (($generated@@34 T@U) ($generated@@35 T@U) ($generated@@36 Int) ) (!  (=> (and (<= 0 $generated@@36) (< $generated@@36 ($generated@@30 $generated@@34))) (< ($generated@@31 ($generated@@32 $generated@@33 ($generated@@28 $generated@@34 $generated@@36))) ($generated@@31 ($generated@@29 $generated@@34 $generated@@35))))
 :pattern ( ($generated@@28 $generated@@34 $generated@@36) ($generated@@29 $generated@@34 $generated@@35))
)))
(assert (forall (($generated@@37 T@U) ($generated@@38 T@U) ($generated@@39 Int) ) (!  (=> (and (<= 0 $generated@@39) (< $generated@@39 ($generated@@30 $generated@@38))) (< ($generated@@31 ($generated@@32 $generated@@33 ($generated@@28 $generated@@38 $generated@@39))) ($generated@@31 ($generated@@29 $generated@@37 $generated@@38))))
 :pattern ( ($generated@@28 $generated@@38 $generated@@39) ($generated@@29 $generated@@37 $generated@@38))
)))
(assert (= ($generated@@30 $generated@@40) 0))
(assert (forall (($generated@@44 T@U) ) (!  (=> ($generated@@42 $generated@@33 $generated@@44 $generated@@43) ($generated@@41 $generated@@44))
 :pattern ( ($generated@@41 $generated@@44) ($generated@@42 $generated@@33 $generated@@44 $generated@@43))
)))
(assert (forall (($generated@@47 Int) ($generated@@48 Int) ) (! (= ($generated@@42 $generated@@33 ($generated@@45 $generated@@47 $generated@@48) $generated@@46)  (and ($generated@@42 $generated@@13 ($generated@@17 $generated@@47) $generated) ($generated@@42 $generated@@13 ($generated@@17 $generated@@48) $generated)))
 :pattern ( ($generated@@42 $generated@@33 ($generated@@45 $generated@@47 $generated@@48) $generated@@46))
)))
(assert (forall (($generated@@50 T@U) ($generated@@51 T@U) ) (! (= ($generated@@49 $generated@@50 $generated@@51) (= $generated@@50 $generated@@51))
 :pattern ( ($generated@@49 $generated@@50 $generated@@51))
)))
(assert (forall (($generated@@53 T@U) ($generated@@54 T@T) ) (! (= ($generated@@52 $generated@@54 $generated@@53) $generated@@53)
 :pattern ( ($generated@@52 $generated@@54 $generated@@53))
)))
(assert (forall (($generated@@56 T@U) ) (! (= ($generated@@41 $generated@@56) (= ($generated@@55 $generated@@56) $generated@@6))
 :pattern ( ($generated@@41 $generated@@56))
)))
(assert (forall (($generated@@58 T@U) ($generated@@59 T@U) ) (! (= ($generated@@57 $generated@@58 $generated@@59)  (and (= ($generated@@30 $generated@@58) ($generated@@30 $generated@@59)) (forall (($generated@@60 Int) ) (!  (=> (and (<= 0 $generated@@60) (< $generated@@60 ($generated@@30 $generated@@58))) (= ($generated@@28 $generated@@58 $generated@@60) ($generated@@28 $generated@@59 $generated@@60)))
 :pattern ( ($generated@@28 $generated@@58 $generated@@60))
 :pattern ( ($generated@@28 $generated@@59 $generated@@60))
))))
 :pattern ( ($generated@@57 $generated@@58 $generated@@59))
)))
(assert (forall (($generated@@62 T@U) ($generated@@63 T@T) ) (! (= ($generated@@61 $generated@@63 ($generated@@32 $generated@@63 $generated@@62)) $generated@@62)
 :pattern ( ($generated@@32 $generated@@63 $generated@@62))
)))
(assert  (=> (<= 3 $generated@@64) (forall (($generated@@69 T@U) ) (!  (=> (or ($generated@@66 $generated@@69) (and (< 3 $generated@@64) (and ($generated@@42 $generated@@33 $generated@@69 $generated@@67) (not ($generated@@49 $generated@@69 $generated@@68))))) ($generated@@42 $generated@@33 ($generated@@65 $generated@@69) $generated@@46))
 :pattern ( ($generated@@65 $generated@@69))
))))
(assert (forall (($generated@@70 T@U) ) (!  (=> ($generated@@41 $generated@@70) (exists (($generated@@71 T@U) ($generated@@72 T@U) ) (= $generated@@70 ($generated@@29 $generated@@71 $generated@@72))))
 :pattern ( ($generated@@41 $generated@@70))
)))
(assert (= ($generated@@11 $generated@@73) 4))
(assert (forall (($generated@@75 T@U) ($generated@@76 T@U) ) (! (= ($generated@@42 $generated@@33 ($generated@@29 $generated@@75 $generated@@76) $generated@@43)  (and ($generated@@42 $generated@@73 $generated@@75 ($generated@@74 $generated)) ($generated@@42 $generated@@73 $generated@@76 ($generated@@74 $generated))))
 :pattern ( ($generated@@42 $generated@@33 ($generated@@29 $generated@@75 $generated@@76) $generated@@43))
)))
(assert (= $generated@@68 ($generated@@52 $generated@@33 ($generated@@29 ($generated@@52 $generated@@73 $generated@@40) ($generated@@52 $generated@@73 $generated@@40)))))
(assert  (=> (< 2 $generated@@64) ($generated@@42 $generated@@33 $generated@@68 $generated@@67)))
(assert (forall (($generated@@78 T@U) ) (!  (=> ($generated@@77 $generated@@78 $generated@@46) (and (= ($generated@@61 $generated@@33 ($generated@@32 $generated@@33 $generated@@78)) $generated@@78) ($generated@@42 $generated@@33 ($generated@@32 $generated@@33 $generated@@78) $generated@@46)))
 :pattern ( ($generated@@77 $generated@@78 $generated@@46))
)))
(assert (forall (($generated@@79 T@U) ) (!  (=> ($generated@@77 $generated@@79 $generated@@67) (and (= ($generated@@61 $generated@@33 ($generated@@32 $generated@@33 $generated@@79)) $generated@@79) ($generated@@42 $generated@@33 ($generated@@32 $generated@@33 $generated@@79) $generated@@67)))
 :pattern ( ($generated@@77 $generated@@79 $generated@@67))
)))
(assert (forall (($generated@@80 T@U) ) (!  (=> ($generated@@77 $generated@@80 $generated@@43) (and (= ($generated@@61 $generated@@33 ($generated@@32 $generated@@33 $generated@@80)) $generated@@80) ($generated@@42 $generated@@33 ($generated@@32 $generated@@33 $generated@@80) $generated@@43)))
 :pattern ( ($generated@@77 $generated@@80 $generated@@43))
)))
(assert (forall (($generated@@81 T@U) ($generated@@82 T@U) ) (!  (=> ($generated@@57 $generated@@81 $generated@@82) (= $generated@@81 $generated@@82))
 :pattern ( ($generated@@57 $generated@@81 $generated@@82))
)))
(assert (forall (($generated@@83 T@U) ) (!  (=> ($generated@@77 $generated@@83 $generated) (and (= ($generated@@61 $generated@@13 ($generated@@32 $generated@@13 $generated@@83)) $generated@@83) ($generated@@42 $generated@@13 ($generated@@32 $generated@@13 $generated@@83) $generated)))
 :pattern ( ($generated@@77 $generated@@83 $generated))
)))
(assert (forall (($generated@@84 T@U) ($generated@@85 T@U) ($generated@@86 T@T) ) (! (= ($generated@@77 ($generated@@61 $generated@@86 $generated@@84) $generated@@85) ($generated@@42 $generated@@86 $generated@@84 $generated@@85))
 :pattern ( ($generated@@77 ($generated@@61 $generated@@86 $generated@@84) $generated@@85))
)))
(assert (forall (($generated@@87 T@U) ) (! (<= 0 ($generated@@30 $generated@@87))
 :pattern ( ($generated@@30 $generated@@87))
)))
(assert (forall (($generated@@88 Int) ($generated@@89 Int) ) (! (= ($generated@@55 ($generated@@45 $generated@@88 $generated@@89)) $generated@@5)
 :pattern ( ($generated@@45 $generated@@88 $generated@@89))
)))
(assert (forall (($generated@@91 Int) ($generated@@92 Int) ) (! (= ($generated@@90 ($generated@@45 $generated@@91 $generated@@92)) $generated@@91)
 :pattern ( ($generated@@45 $generated@@91 $generated@@92))
)))
(assert (forall (($generated@@94 Int) ($generated@@95 Int) ) (! (= ($generated@@93 ($generated@@45 $generated@@94 $generated@@95)) $generated@@95)
 :pattern ( ($generated@@45 $generated@@94 $generated@@95))
)))
(assert (forall (($generated@@96 T@U) ($generated@@97 T@U) ) (! (= ($generated@@55 ($generated@@29 $generated@@96 $generated@@97)) $generated@@6)
 :pattern ( ($generated@@29 $generated@@96 $generated@@97))
)))
(assert (forall (($generated@@99 T@U) ($generated@@100 T@U) ) (! (= ($generated@@98 ($generated@@29 $generated@@99 $generated@@100)) $generated@@99)
 :pattern ( ($generated@@29 $generated@@99 $generated@@100))
)))
(assert (forall (($generated@@102 T@U) ($generated@@103 T@U) ) (! (= ($generated@@101 ($generated@@29 $generated@@102 $generated@@103)) $generated@@103)
 :pattern ( ($generated@@29 $generated@@102 $generated@@103))
)))
(assert (forall (($generated@@105 T@U) ) (! (= ($generated@@104 ($generated@@74 $generated@@105)) $generated@@105)
 :pattern ( ($generated@@74 $generated@@105))
)))
(assert (forall (($generated@@106 T@U) ) (! (= ($generated@@27 ($generated@@74 $generated@@106)) $generated@@1)
 :pattern ( ($generated@@74 $generated@@106))
)))
(assert (forall (($generated@@107 T@U) ($generated@@108 T@T) ) (! (= ($generated@@32 $generated@@108 ($generated@@61 $generated@@108 $generated@@107)) $generated@@107)
 :pattern ( ($generated@@61 $generated@@108 $generated@@107))
)))
(assert  (=> (<= 3 $generated@@64) (forall (($generated@@109 T@U) ) (!  (=> (or ($generated@@66 $generated@@109) (and (< 3 $generated@@64) (and ($generated@@42 $generated@@33 $generated@@109 $generated@@67) (not ($generated@@49 $generated@@109 $generated@@68))))) (and (and (and ($generated@@41 $generated@@109) ($generated@@41 $generated@@109)) (and ($generated@@41 $generated@@109) ($generated@@41 $generated@@109))) (= ($generated@@65 $generated@@109) (let (($generated@@110 ($generated@@18 ($generated@@32 $generated@@13 ($generated@@28 ($generated@@98 $generated@@109) (- ($generated@@30 ($generated@@98 $generated@@109)) 1))))))
(let (($generated@@111 ($generated@@18 ($generated@@32 $generated@@13 ($generated@@28 ($generated@@101 $generated@@109) (- ($generated@@30 ($generated@@98 $generated@@109)) 1))))))
($generated@@45 $generated@@110 $generated@@111))))))
 :pattern ( ($generated@@65 $generated@@109))
))))
(assert (forall (($generated@@113 T@U) ($generated@@114 T@U) ) (! (< ($generated@@112 $generated@@113) ($generated@@31 ($generated@@29 $generated@@113 $generated@@114)))
 :pattern ( ($generated@@29 $generated@@113 $generated@@114))
)))
(assert (forall (($generated@@115 T@U) ($generated@@116 T@U) ) (! (< ($generated@@112 $generated@@116) ($generated@@31 ($generated@@29 $generated@@115 $generated@@116)))
 :pattern ( ($generated@@29 $generated@@115 $generated@@116))
)))
(assert  (and (and (and (and (and (and (and (and (and (forall (($generated@@128 T@T) ($generated@@129 T@T) ($generated@@130 T@T) ($generated@@131 T@U) ($generated@@132 T@U) ($generated@@133 T@U) ($generated@@134 T@U) ) (! (= ($generated@@117 $generated@@128 $generated@@129 $generated@@130 ($generated@@124 $generated@@128 $generated@@129 $generated@@130 $generated@@132 $generated@@133 $generated@@134 $generated@@131) $generated@@133 $generated@@134) $generated@@131)
 :weight 0
)) (and (forall (($generated@@135 T@T) ($generated@@136 T@T) ($generated@@137 T@T) ($generated@@138 T@U) ($generated@@139 T@U) ($generated@@140 T@U) ($generated@@141 T@U) ($generated@@142 T@U) ($generated@@143 T@U) ) (!  (or (= $generated@@140 $generated@@142) (= ($generated@@117 $generated@@135 $generated@@136 $generated@@137 ($generated@@124 $generated@@135 $generated@@136 $generated@@137 $generated@@139 $generated@@140 $generated@@141 $generated@@138) $generated@@142 $generated@@143) ($generated@@117 $generated@@135 $generated@@136 $generated@@137 $generated@@139 $generated@@142 $generated@@143)))
 :weight 0
)) (forall (($generated@@144 T@T) ($generated@@145 T@T) ($generated@@146 T@T) ($generated@@147 T@U) ($generated@@148 T@U) ($generated@@149 T@U) ($generated@@150 T@U) ($generated@@151 T@U) ($generated@@152 T@U) ) (!  (or (= $generated@@150 $generated@@152) (= ($generated@@117 $generated@@144 $generated@@145 $generated@@146 ($generated@@124 $generated@@144 $generated@@145 $generated@@146 $generated@@148 $generated@@149 $generated@@150 $generated@@147) $generated@@151 $generated@@152) ($generated@@117 $generated@@144 $generated@@145 $generated@@146 $generated@@148 $generated@@151 $generated@@152)))
 :weight 0
)))) (= ($generated@@11 $generated@@118) 5)) (= ($generated@@11 $generated@@119) 6)) (forall (($generated@@153 T@T) ($generated@@154 T@T) ($generated@@155 T@U) ($generated@@156 T@U) ($generated@@157 T@U) ) (! (= ($generated@@121 $generated@@153 $generated@@154 ($generated@@125 $generated@@153 $generated@@154 $generated@@156 $generated@@157 $generated@@155) $generated@@157) $generated@@155)
 :weight 0
))) (forall (($generated@@158 T@T) ($generated@@159 T@T) ($generated@@160 T@U) ($generated@@161 T@U) ($generated@@162 T@U) ($generated@@163 T@U) ) (!  (or (= $generated@@162 $generated@@163) (= ($generated@@121 $generated@@158 $generated@@159 ($generated@@125 $generated@@158 $generated@@159 $generated@@161 $generated@@162 $generated@@160) $generated@@163) ($generated@@121 $generated@@158 $generated@@159 $generated@@161 $generated@@163)))
 :weight 0
))) (= ($generated@@11 $generated@@122) 7)) (forall (($generated@@164 T@T) ($generated@@165 T@T) ) (= ($generated@@11 ($generated@@123 $generated@@164 $generated@@165)) 8))) (forall (($generated@@166 T@T) ($generated@@167 T@T) ) (! (= ($generated@@126 ($generated@@123 $generated@@166 $generated@@167)) $generated@@166)
 :pattern ( ($generated@@123 $generated@@166 $generated@@167))
))) (forall (($generated@@168 T@T) ($generated@@169 T@T) ) (! (= ($generated@@127 ($generated@@123 $generated@@168 $generated@@169)) $generated@@169)
 :pattern ( ($generated@@123 $generated@@168 $generated@@169))
))))
(assert (forall (($generated@@170 T@U) ($generated@@171 T@U) ($generated@@172 T@U) ($generated@@173 Bool) ($generated@@174 T@U) ($generated@@175 T@U) ) (! (= ($generated@@16 ($generated@@117 $generated@@118 $generated@@119 $generated@@12 ($generated@@120 $generated@@170 $generated@@171 $generated@@172 $generated@@173) $generated@@174 $generated@@175))  (=> (and (or (not (= $generated@@174 $generated@@170)) (not true)) ($generated@@16 ($generated@@32 $generated@@12 ($generated@@121 $generated@@119 $generated@@122 ($generated@@121 $generated@@118 ($generated@@123 $generated@@119 $generated@@122) $generated@@171 $generated@@174) $generated@@172)))) $generated@@173))
 :pattern ( ($generated@@117 $generated@@118 $generated@@119 $generated@@12 ($generated@@120 $generated@@170 $generated@@171 $generated@@172 $generated@@173) $generated@@174 $generated@@175))
)))
(assert (forall (($generated@@176 T@U) ) (! (= ($generated@@42 $generated@@33 $generated@@176 $generated@@67)  (and ($generated@@42 $generated@@33 $generated@@176 $generated@@43) (= ($generated@@30 ($generated@@98 $generated@@176)) ($generated@@30 ($generated@@101 $generated@@176)))))
 :pattern ( ($generated@@42 $generated@@33 $generated@@176 $generated@@67))
)))
(assert (forall (($generated@@177 T@U) ($generated@@178 T@U) ) (!  (=> ($generated@@77 $generated@@177 ($generated@@74 $generated@@178)) (and (= ($generated@@61 $generated@@73 ($generated@@32 $generated@@73 $generated@@177)) $generated@@177) ($generated@@42 $generated@@73 ($generated@@32 $generated@@73 $generated@@177) ($generated@@74 $generated@@178))))
 :pattern ( ($generated@@77 $generated@@177 ($generated@@74 $generated@@178)))
)))
(assert (= ($generated@@27 $generated@@46) $generated@@3))
(assert (= ($generated@@179 $generated@@46) $generated@@8))
(assert (= ($generated@@27 $generated@@67) $generated@@4))
(assert (= ($generated@@179 $generated@@67) $generated@@9))
(assert (= ($generated@@27 $generated@@43) $generated@@7))
(assert (= ($generated@@179 $generated@@43) $generated@@10))
(assert  (=> (<= 3 $generated@@64) (forall (($generated@@180 T@U) ) (!  (=> (or ($generated@@66 ($generated@@52 $generated@@33 $generated@@180)) (and (< 3 $generated@@64) (and ($generated@@42 $generated@@33 $generated@@180 $generated@@67) (not ($generated@@49 $generated@@180 $generated@@68))))) (and (and (and ($generated@@41 ($generated@@52 $generated@@33 $generated@@180)) ($generated@@41 ($generated@@52 $generated@@33 $generated@@180))) (and ($generated@@41 ($generated@@52 $generated@@33 $generated@@180)) ($generated@@41 ($generated@@52 $generated@@33 $generated@@180)))) (= ($generated@@65 ($generated@@52 $generated@@33 $generated@@180)) (let (($generated@@181 ($generated@@18 ($generated@@32 $generated@@13 ($generated@@28 ($generated@@52 $generated@@73 ($generated@@98 ($generated@@52 $generated@@33 $generated@@180))) (- ($generated@@30 ($generated@@52 $generated@@73 ($generated@@98 ($generated@@52 $generated@@33 $generated@@180)))) 1))))))
(let (($generated@@182 ($generated@@18 ($generated@@32 $generated@@13 ($generated@@28 ($generated@@52 $generated@@73 ($generated@@101 ($generated@@52 $generated@@33 $generated@@180))) (- ($generated@@30 ($generated@@52 $generated@@73 ($generated@@98 ($generated@@52 $generated@@33 $generated@@180)))) 1))))))
($generated@@45 $generated@@181 $generated@@182))))))
 :weight 3
 :pattern ( ($generated@@65 ($generated@@52 $generated@@33 $generated@@180)))
))))
(assert (forall (($generated@@183 T@U) ($generated@@184 T@U) ) (! (= ($generated@@29 ($generated@@52 $generated@@73 $generated@@183) ($generated@@52 $generated@@73 $generated@@184)) ($generated@@52 $generated@@33 ($generated@@29 $generated@@183 $generated@@184)))
 :pattern ( ($generated@@29 ($generated@@52 $generated@@73 $generated@@183) ($generated@@52 $generated@@73 $generated@@184)))
)))
(assert (forall (($generated@@185 T@U) ($generated@@186 T@T) ) (! (= ($generated@@61 $generated@@186 ($generated@@52 $generated@@186 $generated@@185)) ($generated@@52 $generated@@122 ($generated@@61 $generated@@186 $generated@@185)))
 :pattern ( ($generated@@61 $generated@@186 ($generated@@52 $generated@@186 $generated@@185)))
)))
(assert (forall (($generated@@187 T@U) ) (!  (=> (= ($generated@@30 $generated@@187) 0) (= $generated@@187 $generated@@40))
 :pattern ( ($generated@@30 $generated@@187))
)))
(assert (forall (($generated@@188 T@U) ($generated@@189 T@U) ) (! (= ($generated@@49 $generated@@188 $generated@@189)  (and ($generated@@57 ($generated@@98 $generated@@188) ($generated@@98 $generated@@189)) ($generated@@57 ($generated@@101 $generated@@188) ($generated@@101 $generated@@189))))
 :pattern ( ($generated@@49 $generated@@188 $generated@@189))
)))
(assert (forall (($generated@@190 T@U) ($generated@@191 T@U) ) (! (= ($generated@@42 $generated@@73 $generated@@190 ($generated@@74 $generated@@191)) (forall (($generated@@192 Int) ) (!  (=> (and (<= 0 $generated@@192) (< $generated@@192 ($generated@@30 $generated@@190))) ($generated@@77 ($generated@@28 $generated@@190 $generated@@192) $generated@@191))
 :pattern ( ($generated@@28 $generated@@190 $generated@@192))
)))
 :pattern ( ($generated@@42 $generated@@73 $generated@@190 ($generated@@74 $generated@@191)))
)))
(assert (forall (($generated@@193 T@U) ($generated@@194 Int) ) (!  (=> (and (<= 0 $generated@@194) (< $generated@@194 ($generated@@30 $generated@@193))) (< ($generated@@31 ($generated@@32 $generated@@33 ($generated@@28 $generated@@193 $generated@@194))) ($generated@@112 $generated@@193)))
 :pattern ( ($generated@@31 ($generated@@32 $generated@@33 ($generated@@28 $generated@@193 $generated@@194))))
)))
(assert (forall (($generated@@195 T@U) ) (! ($generated@@42 $generated@@13 $generated@@195 $generated)
 :pattern ( ($generated@@42 $generated@@13 $generated@@195 $generated))
)))
(push 1)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $generated@@196 () T@U)
(declare-fun $generated@@197 () Int)
(declare-fun $generated@@198 () Int)
(declare-fun $generated@@199 () T@U)
(declare-fun $generated@@200 () T@U)
(declare-fun $generated@@201 () T@U)
(declare-fun $generated@@202 (T@U) Bool)
(declare-fun $generated@@203 (T@U) Bool)
(set-option :timeout 10000)
(set-option :rlimit 0)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :model_evaluator.completion true)
(set-option :model.completion true)
(set-option :model.compact false)
(set-option :smt.case_split 3)
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :smt.arith.solver 2)
(assert (not
 (=> (= (ControlFlow 0 0) 6) (let (($generated@@204  (=> (and ($generated@@41 $generated@@196) ($generated@@41 $generated@@196)) (and (=> (= (ControlFlow 0 3) (- 0 4)) (and (<= 0 (- ($generated@@30 ($generated@@98 $generated@@196)) 1)) (< (- ($generated@@30 ($generated@@98 $generated@@196)) 1) ($generated@@30 ($generated@@98 $generated@@196))))) (=> (and (<= 0 (- ($generated@@30 ($generated@@98 $generated@@196)) 1)) (< (- ($generated@@30 ($generated@@98 $generated@@196)) 1) ($generated@@30 ($generated@@98 $generated@@196)))) (=> (= $generated@@197 ($generated@@18 ($generated@@32 $generated@@13 ($generated@@28 ($generated@@98 $generated@@196) (- ($generated@@30 ($generated@@98 $generated@@196)) 1))))) (=> (and (and (and ($generated@@41 $generated@@196) ($generated@@41 $generated@@196)) ($generated@@42 $generated@@13 ($generated@@17 $generated@@197) $generated)) (and (and (= $generated@@198 $generated@@197) ($generated@@41 $generated@@196)) (and ($generated@@41 $generated@@196) (= (ControlFlow 0 3) (- 0 2))))) (and (<= 0 (- ($generated@@30 ($generated@@98 $generated@@196)) 1)) (< (- ($generated@@30 ($generated@@98 $generated@@196)) 1) ($generated@@30 ($generated@@101 $generated@@196)))))))))))
(let (($generated@@205 true))
(let (($generated@@206  (=> (and (= $generated@@199 ($generated@@120 $generated@@200 $generated@@201 $generated@@2 false)) (not ($generated@@49 $generated@@196 $generated@@68))) (and (=> (= (ControlFlow 0 5) 1) $generated@@205) (=> (= (ControlFlow 0 5) 3) $generated@@204)))))
(let (($generated@@207  (=> (and (and (and ($generated@@202 $generated@@201) ($generated@@203 $generated@@201)) ($generated@@42 $generated@@33 $generated@@196 $generated@@67)) (and (= 3 $generated@@64) (= (ControlFlow 0 6) 5))) $generated@@206)))
$generated@@207)))))
))
(check-sat)
(get-info :rlimit)
(pop 1)
; Valid
(reset)
(set-option :rlimit 0)
; did a full reset
(reset)
