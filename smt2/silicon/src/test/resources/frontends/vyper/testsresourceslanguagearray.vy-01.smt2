(get-info :version)
; (:version "4.12.1")
; Started: 2025-01-08 21:11:21
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Seq<Seq<Int>>> 0)
(declare-sort Seq<Seq<Int>> 0)
(declare-sort Seq<Int> 0)
(declare-sort $Array<Seq<Seq<Int>>> 0)
(declare-sort $Struct 0)
(declare-sort $Contract 0)
(declare-sort $Array<Seq<Int>> 0)
(declare-sort $StructOps<$Struct> 0)
(declare-sort $StructOps<Seq<Int>> 0)
(declare-sort $Range 0)
(declare-sort $Int 0)
(declare-sort $StructOps<$Map<Int~_Int>> 0)
(declare-sort s$struct$self 0)
(declare-sort $StructOps<Seq<Seq<Seq<Int>>>> 0)
(declare-sort $Map<Int~_Seq<Int>> 0)
(declare-sort $Math 0)
(declare-sort $StructOps<Int> 0)
(declare-sort $StructOps<$Map<Int~_Seq<Int>>> 0)
(declare-sort s$resource$$creator 0)
(declare-sort $Map<Int~_$Struct> 0)
(declare-sort $StructOps<Bool> 0)
(declare-sort $Blockchain 0)
(declare-sort $Array<Int> 0)
(declare-sort $Convert 0)
(declare-sort $StructOps<Seq<Seq<Int>>> 0)
(declare-sort $MapInt<Int> 0)
(declare-sort $Map<Int~_Int> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Seq<Seq<Int>>>To$Snap (Seq<Seq<Seq<Int>>>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Seq<Seq<Int>>> ($Snap) Seq<Seq<Seq<Int>>>)
(assert (forall ((x Seq<Seq<Seq<Int>>>)) (!
    (= x ($SortWrappers.$SnapToSeq<Seq<Seq<Int>>>($SortWrappers.Seq<Seq<Seq<Int>>>To$Snap x)))
    :pattern (($SortWrappers.Seq<Seq<Seq<Int>>>To$Snap x))
    :qid |$Snap.$SnapToSeq<Seq<Seq<Int>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Seq<Seq<Int>>>To$Snap($SortWrappers.$SnapToSeq<Seq<Seq<Int>>> x)))
    :pattern (($SortWrappers.$SnapToSeq<Seq<Seq<Int>>> x))
    :qid |$Snap.Seq<Seq<Seq<Int>>>To$SnapToSeq<Seq<Seq<Int>>>|
    )))
(declare-fun $SortWrappers.Seq<Seq<Int>>To$Snap (Seq<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Seq<Int>> ($Snap) Seq<Seq<Int>>)
(assert (forall ((x Seq<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSeq<Seq<Int>>($SortWrappers.Seq<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Seq<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSeq<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Seq<Int>>To$Snap($SortWrappers.$SnapToSeq<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSeq<Seq<Int>> x))
    :qid |$Snap.Seq<Seq<Int>>To$SnapToSeq<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$Array<Seq<Seq<Int>>>To$Snap ($Array<Seq<Seq<Int>>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Array<Seq<Seq<Int>>> ($Snap) $Array<Seq<Seq<Int>>>)
(assert (forall ((x $Array<Seq<Seq<Int>>>)) (!
    (= x ($SortWrappers.$SnapTo$Array<Seq<Seq<Int>>>($SortWrappers.$Array<Seq<Seq<Int>>>To$Snap x)))
    :pattern (($SortWrappers.$Array<Seq<Seq<Int>>>To$Snap x))
    :qid |$Snap.$SnapTo$Array<Seq<Seq<Int>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Array<Seq<Seq<Int>>>To$Snap($SortWrappers.$SnapTo$Array<Seq<Seq<Int>>> x)))
    :pattern (($SortWrappers.$SnapTo$Array<Seq<Seq<Int>>> x))
    :qid |$Snap.$Array<Seq<Seq<Int>>>To$SnapTo$Array<Seq<Seq<Int>>>|
    )))
(declare-fun $SortWrappers.$StructTo$Snap ($Struct) $Snap)
(declare-fun $SortWrappers.$SnapTo$Struct ($Snap) $Struct)
(assert (forall ((x $Struct)) (!
    (= x ($SortWrappers.$SnapTo$Struct($SortWrappers.$StructTo$Snap x)))
    :pattern (($SortWrappers.$StructTo$Snap x))
    :qid |$Snap.$SnapTo$StructTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructTo$Snap($SortWrappers.$SnapTo$Struct x)))
    :pattern (($SortWrappers.$SnapTo$Struct x))
    :qid |$Snap.$StructTo$SnapTo$Struct|
    )))
(declare-fun $SortWrappers.$ContractTo$Snap ($Contract) $Snap)
(declare-fun $SortWrappers.$SnapTo$Contract ($Snap) $Contract)
(assert (forall ((x $Contract)) (!
    (= x ($SortWrappers.$SnapTo$Contract($SortWrappers.$ContractTo$Snap x)))
    :pattern (($SortWrappers.$ContractTo$Snap x))
    :qid |$Snap.$SnapTo$ContractTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$ContractTo$Snap($SortWrappers.$SnapTo$Contract x)))
    :pattern (($SortWrappers.$SnapTo$Contract x))
    :qid |$Snap.$ContractTo$SnapTo$Contract|
    )))
(declare-fun $SortWrappers.$Array<Seq<Int>>To$Snap ($Array<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Array<Seq<Int>> ($Snap) $Array<Seq<Int>>)
(assert (forall ((x $Array<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$Array<Seq<Int>>($SortWrappers.$Array<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$Array<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$Array<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Array<Seq<Int>>To$Snap($SortWrappers.$SnapTo$Array<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$Array<Seq<Int>> x))
    :qid |$Snap.$Array<Seq<Int>>To$SnapTo$Array<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$StructOps<$Struct>To$Snap ($StructOps<$Struct>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Struct> ($Snap) $StructOps<$Struct>)
(assert (forall ((x $StructOps<$Struct>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Struct>($SortWrappers.$StructOps<$Struct>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Struct>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Struct>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Struct>To$Snap($SortWrappers.$SnapTo$StructOps<$Struct> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Struct> x))
    :qid |$Snap.$StructOps<$Struct>To$SnapTo$StructOps<$Struct>|
    )))
(declare-fun $SortWrappers.$StructOps<Seq<Int>>To$Snap ($StructOps<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Seq<Int>> ($Snap) $StructOps<Seq<Int>>)
(assert (forall ((x $StructOps<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Seq<Int>>($SortWrappers.$StructOps<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Seq<Int>>To$Snap($SortWrappers.$SnapTo$StructOps<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Seq<Int>> x))
    :qid |$Snap.$StructOps<Seq<Int>>To$SnapTo$StructOps<Seq<Int>>|
    )))
(declare-fun $SortWrappers.$RangeTo$Snap ($Range) $Snap)
(declare-fun $SortWrappers.$SnapTo$Range ($Snap) $Range)
(assert (forall ((x $Range)) (!
    (= x ($SortWrappers.$SnapTo$Range($SortWrappers.$RangeTo$Snap x)))
    :pattern (($SortWrappers.$RangeTo$Snap x))
    :qid |$Snap.$SnapTo$RangeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RangeTo$Snap($SortWrappers.$SnapTo$Range x)))
    :pattern (($SortWrappers.$SnapTo$Range x))
    :qid |$Snap.$RangeTo$SnapTo$Range|
    )))
(declare-fun $SortWrappers.$IntTo$Snap ($Int) $Snap)
(declare-fun $SortWrappers.$SnapTo$Int ($Snap) $Int)
(assert (forall ((x $Int)) (!
    (= x ($SortWrappers.$SnapTo$Int($SortWrappers.$IntTo$Snap x)))
    :pattern (($SortWrappers.$IntTo$Snap x))
    :qid |$Snap.$SnapTo$IntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$IntTo$Snap($SortWrappers.$SnapTo$Int x)))
    :pattern (($SortWrappers.$SnapTo$Int x))
    :qid |$Snap.$IntTo$SnapTo$Int|
    )))
(declare-fun $SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap ($StructOps<$Map<Int~_Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> ($Snap) $StructOps<$Map<Int~_Int>>)
(assert (forall ((x $StructOps<$Map<Int~_Int>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>>($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Map<Int~_Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Map<Int~_Int>>To$Snap($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Map<Int~_Int>> x))
    :qid |$Snap.$StructOps<$Map<Int~_Int>>To$SnapTo$StructOps<$Map<Int~_Int>>|
    )))
(declare-fun $SortWrappers.s$struct$selfTo$Snap (s$struct$self) $Snap)
(declare-fun $SortWrappers.$SnapTos$struct$self ($Snap) s$struct$self)
(assert (forall ((x s$struct$self)) (!
    (= x ($SortWrappers.$SnapTos$struct$self($SortWrappers.s$struct$selfTo$Snap x)))
    :pattern (($SortWrappers.s$struct$selfTo$Snap x))
    :qid |$Snap.$SnapTos$struct$selfTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.s$struct$selfTo$Snap($SortWrappers.$SnapTos$struct$self x)))
    :pattern (($SortWrappers.$SnapTos$struct$self x))
    :qid |$Snap.s$struct$selfTo$SnapTos$struct$self|
    )))
(declare-fun $SortWrappers.$StructOps<Seq<Seq<Seq<Int>>>>To$Snap ($StructOps<Seq<Seq<Seq<Int>>>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Seq<Seq<Seq<Int>>>> ($Snap) $StructOps<Seq<Seq<Seq<Int>>>>)
(assert (forall ((x $StructOps<Seq<Seq<Seq<Int>>>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Seq<Seq<Seq<Int>>>>($SortWrappers.$StructOps<Seq<Seq<Seq<Int>>>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Seq<Seq<Seq<Int>>>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Seq<Seq<Seq<Int>>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Seq<Seq<Seq<Int>>>>To$Snap($SortWrappers.$SnapTo$StructOps<Seq<Seq<Seq<Int>>>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Seq<Seq<Seq<Int>>>> x))
    :qid |$Snap.$StructOps<Seq<Seq<Seq<Int>>>>To$SnapTo$StructOps<Seq<Seq<Seq<Int>>>>|
    )))
(declare-fun $SortWrappers.$Map<Int~_Seq<Int>>To$Snap ($Map<Int~_Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Int~_Seq<Int>> ($Snap) $Map<Int~_Seq<Int>>)
(assert (forall ((x $Map<Int~_Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Int~_Seq<Int>>($SortWrappers.$Map<Int~_Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.$Map<Int~_Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Int~_Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Int~_Seq<Int>>To$Snap($SortWrappers.$SnapTo$Map<Int~_Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Int~_Seq<Int>> x))
    :qid |$Snap.$Map<Int~_Seq<Int>>To$SnapTo$Map<Int~_Seq<Int>>|
    )))
(declare-fun $SortWrappers.$MathTo$Snap ($Math) $Snap)
(declare-fun $SortWrappers.$SnapTo$Math ($Snap) $Math)
(assert (forall ((x $Math)) (!
    (= x ($SortWrappers.$SnapTo$Math($SortWrappers.$MathTo$Snap x)))
    :pattern (($SortWrappers.$MathTo$Snap x))
    :qid |$Snap.$SnapTo$MathTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$MathTo$Snap($SortWrappers.$SnapTo$Math x)))
    :pattern (($SortWrappers.$SnapTo$Math x))
    :qid |$Snap.$MathTo$SnapTo$Math|
    )))
(declare-fun $SortWrappers.$StructOps<Int>To$Snap ($StructOps<Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Int> ($Snap) $StructOps<Int>)
(assert (forall ((x $StructOps<Int>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Int>($SortWrappers.$StructOps<Int>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Int>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Int>To$Snap($SortWrappers.$SnapTo$StructOps<Int> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Int> x))
    :qid |$Snap.$StructOps<Int>To$SnapTo$StructOps<Int>|
    )))
(declare-fun $SortWrappers.$StructOps<$Map<Int~_Seq<Int>>>To$Snap ($StructOps<$Map<Int~_Seq<Int>>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<$Map<Int~_Seq<Int>>> ($Snap) $StructOps<$Map<Int~_Seq<Int>>>)
(assert (forall ((x $StructOps<$Map<Int~_Seq<Int>>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<$Map<Int~_Seq<Int>>>($SortWrappers.$StructOps<$Map<Int~_Seq<Int>>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<$Map<Int~_Seq<Int>>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<$Map<Int~_Seq<Int>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<$Map<Int~_Seq<Int>>>To$Snap($SortWrappers.$SnapTo$StructOps<$Map<Int~_Seq<Int>>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<$Map<Int~_Seq<Int>>> x))
    :qid |$Snap.$StructOps<$Map<Int~_Seq<Int>>>To$SnapTo$StructOps<$Map<Int~_Seq<Int>>>|
    )))
(declare-fun $SortWrappers.s$resource$$creatorTo$Snap (s$resource$$creator) $Snap)
(declare-fun $SortWrappers.$SnapTos$resource$$creator ($Snap) s$resource$$creator)
(assert (forall ((x s$resource$$creator)) (!
    (= x ($SortWrappers.$SnapTos$resource$$creator($SortWrappers.s$resource$$creatorTo$Snap x)))
    :pattern (($SortWrappers.s$resource$$creatorTo$Snap x))
    :qid |$Snap.$SnapTos$resource$$creatorTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.s$resource$$creatorTo$Snap($SortWrappers.$SnapTos$resource$$creator x)))
    :pattern (($SortWrappers.$SnapTos$resource$$creator x))
    :qid |$Snap.s$resource$$creatorTo$SnapTos$resource$$creator|
    )))
(declare-fun $SortWrappers.$Map<Int~_$Struct>To$Snap ($Map<Int~_$Struct>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Int~_$Struct> ($Snap) $Map<Int~_$Struct>)
(assert (forall ((x $Map<Int~_$Struct>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Int~_$Struct>($SortWrappers.$Map<Int~_$Struct>To$Snap x)))
    :pattern (($SortWrappers.$Map<Int~_$Struct>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Int~_$Struct>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Int~_$Struct>To$Snap($SortWrappers.$SnapTo$Map<Int~_$Struct> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Int~_$Struct> x))
    :qid |$Snap.$Map<Int~_$Struct>To$SnapTo$Map<Int~_$Struct>|
    )))
(declare-fun $SortWrappers.$StructOps<Bool>To$Snap ($StructOps<Bool>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Bool> ($Snap) $StructOps<Bool>)
(assert (forall ((x $StructOps<Bool>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Bool>($SortWrappers.$StructOps<Bool>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Bool>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Bool>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Bool>To$Snap($SortWrappers.$SnapTo$StructOps<Bool> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Bool> x))
    :qid |$Snap.$StructOps<Bool>To$SnapTo$StructOps<Bool>|
    )))
(declare-fun $SortWrappers.$BlockchainTo$Snap ($Blockchain) $Snap)
(declare-fun $SortWrappers.$SnapTo$Blockchain ($Snap) $Blockchain)
(assert (forall ((x $Blockchain)) (!
    (= x ($SortWrappers.$SnapTo$Blockchain($SortWrappers.$BlockchainTo$Snap x)))
    :pattern (($SortWrappers.$BlockchainTo$Snap x))
    :qid |$Snap.$SnapTo$BlockchainTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$BlockchainTo$Snap($SortWrappers.$SnapTo$Blockchain x)))
    :pattern (($SortWrappers.$SnapTo$Blockchain x))
    :qid |$Snap.$BlockchainTo$SnapTo$Blockchain|
    )))
(declare-fun $SortWrappers.$Array<Int>To$Snap ($Array<Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Array<Int> ($Snap) $Array<Int>)
(assert (forall ((x $Array<Int>)) (!
    (= x ($SortWrappers.$SnapTo$Array<Int>($SortWrappers.$Array<Int>To$Snap x)))
    :pattern (($SortWrappers.$Array<Int>To$Snap x))
    :qid |$Snap.$SnapTo$Array<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Array<Int>To$Snap($SortWrappers.$SnapTo$Array<Int> x)))
    :pattern (($SortWrappers.$SnapTo$Array<Int> x))
    :qid |$Snap.$Array<Int>To$SnapTo$Array<Int>|
    )))
(declare-fun $SortWrappers.$ConvertTo$Snap ($Convert) $Snap)
(declare-fun $SortWrappers.$SnapTo$Convert ($Snap) $Convert)
(assert (forall ((x $Convert)) (!
    (= x ($SortWrappers.$SnapTo$Convert($SortWrappers.$ConvertTo$Snap x)))
    :pattern (($SortWrappers.$ConvertTo$Snap x))
    :qid |$Snap.$SnapTo$ConvertTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$ConvertTo$Snap($SortWrappers.$SnapTo$Convert x)))
    :pattern (($SortWrappers.$SnapTo$Convert x))
    :qid |$Snap.$ConvertTo$SnapTo$Convert|
    )))
(declare-fun $SortWrappers.$StructOps<Seq<Seq<Int>>>To$Snap ($StructOps<Seq<Seq<Int>>>) $Snap)
(declare-fun $SortWrappers.$SnapTo$StructOps<Seq<Seq<Int>>> ($Snap) $StructOps<Seq<Seq<Int>>>)
(assert (forall ((x $StructOps<Seq<Seq<Int>>>)) (!
    (= x ($SortWrappers.$SnapTo$StructOps<Seq<Seq<Int>>>($SortWrappers.$StructOps<Seq<Seq<Int>>>To$Snap x)))
    :pattern (($SortWrappers.$StructOps<Seq<Seq<Int>>>To$Snap x))
    :qid |$Snap.$SnapTo$StructOps<Seq<Seq<Int>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$StructOps<Seq<Seq<Int>>>To$Snap($SortWrappers.$SnapTo$StructOps<Seq<Seq<Int>>> x)))
    :pattern (($SortWrappers.$SnapTo$StructOps<Seq<Seq<Int>>> x))
    :qid |$Snap.$StructOps<Seq<Seq<Int>>>To$SnapTo$StructOps<Seq<Seq<Int>>>|
    )))
(declare-fun $SortWrappers.$MapInt<Int>To$Snap ($MapInt<Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$MapInt<Int> ($Snap) $MapInt<Int>)
(assert (forall ((x $MapInt<Int>)) (!
    (= x ($SortWrappers.$SnapTo$MapInt<Int>($SortWrappers.$MapInt<Int>To$Snap x)))
    :pattern (($SortWrappers.$MapInt<Int>To$Snap x))
    :qid |$Snap.$SnapTo$MapInt<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$MapInt<Int>To$Snap($SortWrappers.$SnapTo$MapInt<Int> x)))
    :pattern (($SortWrappers.$SnapTo$MapInt<Int> x))
    :qid |$Snap.$MapInt<Int>To$SnapTo$MapInt<Int>|
    )))
(declare-fun $SortWrappers.$Map<Int~_Int>To$Snap ($Map<Int~_Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Map<Int~_Int> ($Snap) $Map<Int~_Int>)
(assert (forall ((x $Map<Int~_Int>)) (!
    (= x ($SortWrappers.$SnapTo$Map<Int~_Int>($SortWrappers.$Map<Int~_Int>To$Snap x)))
    :pattern (($SortWrappers.$Map<Int~_Int>To$Snap x))
    :qid |$Snap.$SnapTo$Map<Int~_Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$Map<Int~_Int>To$Snap($SortWrappers.$SnapTo$Map<Int~_Int> x)))
    :pattern (($SortWrappers.$SnapTo$Map<Int~_Int> x))
    :qid |$Snap.$Map<Int~_Int>To$SnapTo$Map<Int~_Int>|
    )))
; ////////// Symbols
(declare-fun Seq_length (Seq<Seq<Seq<Int>>>) Int)
(declare-const Seq_empty Seq<Seq<Seq<Int>>>)
(declare-fun Seq_singleton (Seq<Seq<Int>>) Seq<Seq<Seq<Int>>>)
(declare-fun Seq_append (Seq<Seq<Seq<Int>>> Seq<Seq<Seq<Int>>>) Seq<Seq<Seq<Int>>>)
(declare-fun Seq_index (Seq<Seq<Seq<Int>>> Int) Seq<Seq<Int>>)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<Seq<Seq<Int>>> Int Seq<Seq<Int>>) Seq<Seq<Seq<Int>>>)
(declare-fun Seq_take (Seq<Seq<Seq<Int>>> Int) Seq<Seq<Seq<Int>>>)
(declare-fun Seq_drop (Seq<Seq<Seq<Int>>> Int) Seq<Seq<Seq<Int>>>)
(declare-fun Seq_contains (Seq<Seq<Seq<Int>>> Seq<Seq<Int>>) Bool)
(declare-fun Seq_contains_trigger (Seq<Seq<Seq<Int>>> Seq<Seq<Int>>) Bool)
(declare-fun Seq_skolem (Seq<Seq<Seq<Int>>> Seq<Seq<Int>>) Int)
(declare-fun Seq_equal (Seq<Seq<Seq<Int>>> Seq<Seq<Seq<Int>>>) Bool)
(declare-fun Seq_skolem_diff (Seq<Seq<Seq<Int>>> Seq<Seq<Seq<Int>>>) Int)
(declare-fun Seq_length (Seq<Seq<Int>>) Int)
(declare-const Seq_empty Seq<Seq<Int>>)
(declare-fun Seq_singleton (Seq<Int>) Seq<Seq<Int>>)
(declare-fun Seq_append (Seq<Seq<Int>> Seq<Seq<Int>>) Seq<Seq<Int>>)
(declare-fun Seq_index (Seq<Seq<Int>> Int) Seq<Int>)
(declare-fun Seq_update (Seq<Seq<Int>> Int Seq<Int>) Seq<Seq<Int>>)
(declare-fun Seq_take (Seq<Seq<Int>> Int) Seq<Seq<Int>>)
(declare-fun Seq_drop (Seq<Seq<Int>> Int) Seq<Seq<Int>>)
(declare-fun Seq_contains (Seq<Seq<Int>> Seq<Int>) Bool)
(declare-fun Seq_contains_trigger (Seq<Seq<Int>> Seq<Int>) Bool)
(declare-fun Seq_skolem (Seq<Seq<Int>> Seq<Int>) Int)
(declare-fun Seq_equal (Seq<Seq<Int>> Seq<Seq<Int>>) Bool)
(declare-fun Seq_skolem_diff (Seq<Seq<Int>> Seq<Seq<Int>>) Int)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_contains_trigger (Seq<Int> Int) Bool)
(declare-fun Seq_skolem (Seq<Int> Int) Int)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_skolem_diff (Seq<Int> Seq<Int>) Int)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun $bytes32_to_signed_int<Int> (Seq<Int>) Int)
(declare-fun $bytes32_to_unsigned_int<Int> (Seq<Int>) Int)
(declare-fun $signed_int_to_bytes32<Seq<Int>> (Int) Seq<Int>)
(declare-fun $unsigned_int_to_bytes32<Seq<Int>> (Int) Seq<Int>)
(declare-fun $pad32<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $struct_get<Int> (Int) Int)
(declare-fun $struct_set<$Struct> ($Struct Int Int) $Struct)
(declare-fun $struct_get<Bool> (Int) Bool)
(declare-fun $struct_set<$Struct> ($Struct Int Bool) $Struct)
(declare-fun $blockhash<Seq<Int>> (Int) Seq<Int>)
(declare-fun $method_id<Seq<Int>> (Seq<Int> Int) Seq<Int>)
(declare-fun $keccak256<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $sha256<Seq<Int>> (Seq<Int>) Seq<Int>)
(declare-fun $ecrecover<Int> (Seq<Int> Int Int Int) Int)
(declare-fun $ecadd<Seq<Int>> (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun $ecmul<Seq<Int>> (Seq<Int> Int) Seq<Int>)
(declare-fun $array_init<Seq<Int>> (Int Int) Seq<Int>)
(declare-fun $wrap<$Int> (Int) $Int)
(declare-fun $unwrap<Int> ($Int) Int)
(declare-fun $w_mul<$Int> ($Int $Int) $Int)
(declare-fun $w_mulI<$Int> ($Int $Int) $Int)
(declare-fun $w_mulL<$Int> ($Int $Int) $Int)
(declare-fun $w_abs<Int> ($Int) Int)
(declare-fun $w_mod<$Int> ($Int $Int) $Int)
(declare-fun $w_modL<$Int> ($Int $Int) $Int)
(declare-fun $w_div<$Int> ($Int $Int) $Int)
(declare-fun $w_div_down<$Int> ($Int $Int) $Int)
(declare-fun $w_div_nat<$Int> ($Int $Int) $Int)
(declare-fun $w_div_natL<$Int> ($Int $Int) $Int)
(declare-fun $struct_get<Seq<Seq<Seq<Int>>>> (Int) Seq<Seq<Seq<Int>>>)
(declare-fun $struct_set<$Struct> ($Struct Int Seq<Seq<Seq<Int>>>) $Struct)
(declare-fun $struct_loc<Int> ($Struct Int) Int)
(declare-fun $struct_get<Seq<Seq<Int>>> (Int) Seq<Seq<Int>>)
(declare-fun $struct_set<$Struct> ($Struct Int Seq<Seq<Int>>) $Struct)
(declare-fun $map_init<$Map<Int~_Int>> (Int) $Map<Int~_Int>)
(declare-fun $map_eq<Bool> ($Map<Int~_Int> $Map<Int~_Int>) Bool)
(declare-fun $map_get<Int> ($Map<Int~_Int> Int) Int)
(declare-fun $map_set<$Map<Int~_Int>> ($Map<Int~_Int> Int Int) $Map<Int~_Int>)
(declare-fun $sign<Int> (Int) Int)
(declare-fun $div<Int> (Int Int Int) Int)
(declare-fun $mod<Int> (Int Int Int) Int)
(declare-fun $pow<Int> (Int Int) Int)
(declare-fun $sqrt<Int> (Int) Int)
(declare-fun $floor<Int> (Int Int) Int)
(declare-fun $ceil<Int> (Int Int) Int)
(declare-fun $shift<Int> (Int Int) Int)
(declare-fun $bitwise_not<Int> (Int) Int)
(declare-fun $bitwise_and<Int> (Int Int) Int)
(declare-fun $bitwise_or<Int> (Int Int) Int)
(declare-fun $bitwise_xor<Int> (Int Int) Int)
(declare-fun $map_init<$Map<Int~_$Struct>> ($Struct) $Map<Int~_$Struct>)
(declare-fun $map_eq<Bool> ($Map<Int~_$Struct> $Map<Int~_$Struct>) Bool)
(declare-fun $map_get<$Struct> ($Map<Int~_$Struct> Int) $Struct)
(declare-fun $map_set<$Map<Int~_$Struct>> ($Map<Int~_$Struct> Int $Struct) $Map<Int~_$Struct>)
(declare-fun $map_init<$Map<Int~_Seq<Int>>> (Seq<Int>) $Map<Int~_Seq<Int>>)
(declare-fun $map_eq<Bool> ($Map<Int~_Seq<Int>> $Map<Int~_Seq<Int>>) Bool)
(declare-fun $map_get<Seq<Int>> ($Map<Int~_Seq<Int>> Int) Seq<Int>)
(declare-fun $map_set<$Map<Int~_Seq<Int>>> ($Map<Int~_Seq<Int>> Int Seq<Int>) $Map<Int~_Seq<Int>>)
(declare-fun $struct_get<$Map<Int~_Int>> (Int) $Map<Int~_Int>)
(declare-fun $struct_set<$Struct> ($Struct Int $Map<Int~_Int>) $Struct)
(declare-fun $struct_get<Seq<Int>> (Int) Seq<Int>)
(declare-fun $struct_set<$Struct> ($Struct Int Seq<Int>) $Struct)
(declare-fun s$resource$$creator$init<$Struct> ($Struct) $Struct)
(declare-fun s$resource$$creator$eq<Bool> ($Struct $Struct) Bool)
(declare-fun $map_sum<Int> ($Map<Int~_Int>) Int)
(declare-const $self_address<Int> Int)
(declare-fun $implements<Bool> (Int Int) Bool)
(declare-fun $struct_get<$Map<Int~_Seq<Int>>> (Int) $Map<Int~_Seq<Int>>)
(declare-fun $struct_set<$Struct> ($Struct Int $Map<Int~_Seq<Int>>) $Struct)
(declare-fun $struct_get<$Struct> (Int) $Struct)
(declare-fun $struct_set<$Struct> ($Struct Int $Struct) $Struct)
(declare-fun $array_init<Seq<Seq<Seq<Int>>>> (Seq<Seq<Int>> Int) Seq<Seq<Seq<Int>>>)
(declare-fun $array_init<Seq<Seq<Int>>> (Seq<Int> Int) Seq<Seq<Int>>)
(declare-fun s$struct$self$init<$Struct> (Seq<Int> Seq<Seq<Int>> Seq<Seq<Seq<Int>>> Seq<Int> $Map<Int~_Seq<Int>> Int Int Bool $Map<Int~_Int> $Map<Int~_Int> Bool) $Struct)
(declare-fun s$struct$self$eq<Bool> ($Struct $Struct) Bool)
(declare-fun $range<Seq<Int>> (Int Int) Seq<Int>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun $pure$success_get ($Snap $Struct) Bool)
(declare-fun $pure$success_get%limited ($Snap $Struct) Bool)
(declare-fun $pure$success_get%stateless ($Struct) Bool)
(declare-fun $pure$success_get%precondition ($Snap $Struct) Bool)
(declare-fun $pure$return_get ($Snap $Struct) Int)
(declare-fun $pure$return_get%limited ($Snap $Struct) Int)
(declare-fun $pure$return_get%stateless ($Struct) Bool)
(declare-fun $pure$return_get%precondition ($Snap $Struct) Bool)
(declare-fun $range_sum ($Snap Int Int) Int)
(declare-fun $range_sum%limited ($Snap Int Int) Int)
(declare-fun $range_sum%stateless (Int Int) Bool)
(declare-fun $range_sum%precondition ($Snap Int Int) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
(declare-fun $failed%trigger ($Snap Int) Bool)
(declare-fun $failed_0%trigger ($Snap Int) Bool)
(declare-fun $allocation%trigger ($Snap $Struct Int) Bool)
(declare-fun $allocation_0%trigger ($Snap $Struct Int) Bool)
(declare-fun $offer%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $offer_0%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $trust%trigger ($Snap Int Int) Bool)
(declare-fun $trust_0%trigger ($Snap Int Int) Bool)
(declare-fun $performs$create%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$create_0%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$destroy%trigger ($Snap $Struct Int Int) Bool)
(declare-fun $performs$destroy_0%trigger ($Snap $Struct Int Int) Bool)
(declare-fun $performs$reallocate%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$reallocate_0%trigger ($Snap $Struct Int Int Int) Bool)
(declare-fun $performs$offer%trigger ($Snap $Struct $Struct Int Int Int Int Int) Bool)
(declare-fun $performs$offer_0%trigger ($Snap $Struct $Struct Int Int Int Int Int) Bool)
(declare-fun $performs$revoke%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $performs$revoke_0%trigger ($Snap $Struct $Struct Int Int Int Int) Bool)
(declare-fun $performs$trust%trigger ($Snap Int Int Bool) Bool)
(declare-fun $performs$trust_0%trigger ($Snap Int Int Bool) Bool)
(declare-fun $accessible$array_read%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$array_read_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$array_write%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$array_write_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$array_write_all%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$array_write_all_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$matrix_write%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$matrix_write_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$matrix_write_fail%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$matrix_write_fail_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$out_of_bounds_read%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$out_of_bounds_read_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$out_of_bounds_write%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$out_of_bounds_write_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$get_zeros_fail%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$get_zeros_fail_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$get_zeros_at_fail%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$get_zeros_at_fail_0%trigger ($Snap Int Int Int Int) Bool)
(declare-fun $accessible$set_zeros_fail%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$set_zeros_fail_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$acc_map%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$acc_map_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$acc_bounds%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$acc_bounds_0%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$index_negative_fail%trigger ($Snap Int Int Int Seq<Int> Int) Bool)
(declare-fun $accessible$index_negative_fail_0%trigger ($Snap Int Int Int Seq<Int> Int) Bool)
(declare-fun $accessible$index_size_fail%trigger ($Snap Int Int Int Seq<Int> Int) Bool)
(declare-fun $accessible$index_size_fail_0%trigger ($Snap Int Int Int Seq<Int> Int) Bool)
(declare-fun $accessible$element_in_array%trigger ($Snap Int Int Int Seq<Int> Int) Bool)
(declare-fun $accessible$element_in_array_0%trigger ($Snap Int Int Int Seq<Int> Int) Bool)
(declare-fun $accessible$element_in_array_fail%trigger ($Snap Int Int Int Seq<Int> Int) Bool)
(declare-fun $accessible$element_in_array_fail_0%trigger ($Snap Int Int Int Seq<Int> Int) Bool)
(declare-fun $accessible$__init__%trigger ($Snap Int Int Int) Bool)
(declare-fun $accessible$__init___0%trigger ($Snap Int Int Int) Bool)
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Seq<Seq<Seq<Int>>>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Seq<Seq<Int>>>)) 0))
(assert (forall ((s Seq<Seq<Seq<Int>>>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Seq<Seq<Int>>>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Seq<Seq<Int>>)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Seq<Seq<Int>>>) (s1 Seq<Seq<Seq<Int>>>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Seq<Seq<Int>>>)))
      (not (= s1 (as Seq_empty  Seq<Seq<Seq<Int>>>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Seq<Seq<Int>>>) (s1 Seq<Seq<Seq<Int>>>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Seq<Seq<Int>>>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Seq<Seq<Int>>>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Seq<Seq<Int>>)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<Seq<Seq<Int>>>) (s1 Seq<Seq<Seq<Int>>>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Seq<Seq<Int>>>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Seq<Seq<Int>>>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Seq<Seq<Int>>>) (s1 Seq<Seq<Seq<Int>>>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Seq<Seq<Int>>>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Seq<Seq<Int>>>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Seq<Seq<Int>>>) (s1 Seq<Seq<Seq<Int>>>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Seq<Seq<Int>>>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Seq<Seq<Int>>>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Seq<Seq<Int>>>) (i Int) (v Seq<Seq<Int>>)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Seq<Seq<Int>>>) (i Int) (v Seq<Seq<Int>>) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Seq<Seq<Int>>>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Seq<Seq<Int>>>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Seq<Seq<Int>>>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Seq<Seq<Int>>>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Seq<Seq<Int>>>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Seq<Seq<Int>>>) (t Seq<Seq<Seq<Int>>>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Seq<Seq<Int>>>) (t Seq<Seq<Seq<Int>>>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Seq<Seq<Int>>>) (t Seq<Seq<Seq<Int>>>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Seq<Seq<Int>>>) (t Seq<Seq<Seq<Int>>>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Seq<Seq<Int>>>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Seq<Seq<Int>>>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Seq<Seq<Int>>>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Seq<Seq<Int>>>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Seq<Seq<Int>>>) (n Int)) (!
  (=>
    (>= n (Seq_length s))
    (= (Seq_drop s n) (as Seq_empty  Seq<Seq<Seq<Int>>>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Seq<Seq<Int>>>) (x Seq<Seq<Int>>)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Seq<Seq<Int>>>) (x Seq<Seq<Int>>) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Seq<Seq<Int>>>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Seq<Seq<Int>>>) (s1 Seq<Seq<Seq<Int>>>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Seq<Seq<Int>>>) (b Seq<Seq<Seq<Int>>>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Seq<Seq<Int>>) (y Seq<Seq<Int>>)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<Seq<Int>>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Seq<Int>>)) 0))
(assert (forall ((s Seq<Seq<Int>>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Seq<Int>>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Seq<Int>)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Seq<Int>>) (s1 Seq<Seq<Int>>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Seq<Int>>)))
      (not (= s1 (as Seq_empty  Seq<Seq<Int>>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Seq<Int>>) (s1 Seq<Seq<Int>>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Seq<Int>>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Seq<Int>>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Seq<Int>)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Seq<Int>>) (s1 Seq<Seq<Int>>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Seq<Int>>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Seq<Int>>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Seq<Int>>) (s1 Seq<Seq<Int>>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Seq<Int>>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Seq<Int>>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Seq<Int>>) (s1 Seq<Seq<Int>>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Seq<Int>>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Seq<Int>>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Seq<Int>>) (i Int) (v Seq<Int>)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Seq<Int>>) (i Int) (v Seq<Int>) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Seq<Int>>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Seq<Int>>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Seq<Int>>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Seq<Int>>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Seq<Int>>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Seq<Int>>) (t Seq<Seq<Int>>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Seq<Int>>) (t Seq<Seq<Int>>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Seq<Int>>) (t Seq<Seq<Int>>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Seq<Int>>) (t Seq<Seq<Int>>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Seq<Int>>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Seq<Int>>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Seq<Int>>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Seq<Int>>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Seq<Int>>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Seq<Int>>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Seq<Int>>) (x Seq<Int>)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Seq<Int>>) (x Seq<Int>) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Seq<Int>>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Seq<Int>>) (s1 Seq<Seq<Int>>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Seq<Int>>) (b Seq<Seq<Int>>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Seq<Int>) (y Seq<Int>)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (not (= s1 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (x Int)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Int>) (x Int) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Int>) (b Seq<Int>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Int) (y Int)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((min_ Int) (max Int)) (!
  (and
    (=> (< min_ max) (= (Seq_length (Seq_range min_ max)) (- max min_)))
    (=> (<= max min_) (= (Seq_length (Seq_range min_ max)) 0)))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (j Int)) (!
  (=>
    (and (<= 0 j) (< j (- max min_)))
    (= (Seq_index (Seq_range min_ max) j) (+ min_ j)))
  :pattern ((Seq_index (Seq_range min_ max) j))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (v Int)) (!
  (= (Seq_contains (Seq_range min_ max) v) (and (<= min_ v) (< v max)))
  :pattern ((Seq_contains (Seq_range min_ max) v))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall (($bb Seq<Int>)) (!
  (=>
    (<= (Seq_length $bb) 32)
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        ($bytes32_to_signed_int<Int> $bb))
      (<=
        ($bytes32_to_signed_int<Int> $bb)
        57896044618658097711785492504343953926634992332820282019728792003956564819967)))
  :pattern (($bytes32_to_signed_int<Int> $bb))
  :qid |prog.$bytes32_to_signed_int_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (=>
    (<= (Seq_length $bb) 32)
    (and
      (<= 0 ($bytes32_to_unsigned_int<Int> $bb))
      (<=
        ($bytes32_to_unsigned_int<Int> $bb)
        115792089237316195423570985008687907853269984665640564039457584007913129639935)))
  :pattern (($bytes32_to_unsigned_int<Int> $bb))
  :qid |prog.$bytes32_to_unsigned_int_ax|)))
(assert (forall (($i Int)) (!
  (=>
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        $i)
      (<=
        $i
        57896044618658097711785492504343953926634992332820282019728792003956564819967))
    (= (Seq_length ($signed_int_to_bytes32<Seq<Int>> $i)) 32))
  :pattern (($signed_int_to_bytes32<Seq<Int>> $i))
  :qid |prog.$signed_int_to_bytes32_ax|)))
(assert (forall (($i Int)) (!
  (=>
    (and
      (<=
        (- 0 57896044618658097711785492504343953926634992332820282019728792003956564819968)
        $i)
      (<=
        $i
        57896044618658097711785492504343953926634992332820282019728792003956564819967))
    (= (Seq_length ($unsigned_int_to_bytes32<Seq<Int>> $i)) 32))
  :pattern (($unsigned_int_to_bytes32<Seq<Int>> $i))
  :qid |prog.$unsigned_int_to_bytes32_ax|)))
(assert (forall (($bb Seq<Int>)) (!
  (= (Seq_length ($pad32<Seq<Int>> $bb)) 32)
  :pattern (($pad32<Seq<Int>> $bb))
  :qid |prog.$pad32_len_ax|)))
(assert (and
  (forall (($bb Seq<Int>) ($i Int)) (!
    (let ((diff (- 32 (Seq_length $bb)))) true)
    :pattern ((Seq_index ($pad32<Seq<Int>> $bb) $i))
    :qid |prog.$pad32_vals_ax|))
  (forall (($bb Seq<Int>) ($i Int)) (!
    (let ((diff (- 32 (Seq_length $bb)))) (=>
      (and (<= 0 $i) (< $i (Seq_length ($pad32<Seq<Int>> $bb))))
      (=
        (Seq_index ($pad32<Seq<Int>> $bb) $i)
        (ite (< $i diff) 0 (Seq_index $bb (- $i diff))))))
    :pattern ((Seq_index ($pad32<Seq<Int>> $bb) $i))
    :qid |prog.$pad32_vals_ax|))))
(assert (forall (($s $Struct) ($m Int) ($t Int)) (!
  (= ($struct_get<Int> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m)) $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Int)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t Bool)) (!
  (=
    ($struct_get<Bool> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Bool)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($no Int)) (!
  (= (Seq_length ($blockhash<Seq<Int>> $no)) 32)
  :pattern (($blockhash<Seq<Int>> $no))
  :qid |prog.$blockhash_ax|)))
(assert (forall (($bb Seq<Int>) ($l Int)) (!
  (= (Seq_length ($method_id<Seq<Int>> $bb $l)) $l)
  :pattern (($method_id<Seq<Int>> $bb $l))
  :qid |prog.$method_id_ax|)))
(assert (forall (($s Seq<Int>)) (!
  (= (Seq_length ($keccak256<Seq<Int>> $s)) 32)
  :pattern (($keccak256<Seq<Int>> $s))
  :qid |prog.$keccak256_ax|)))
(assert (forall (($s Seq<Int>)) (!
  (= (Seq_length ($sha256<Seq<Int>> $s)) 32)
  :pattern (($sha256<Seq<Int>> $s))
  :qid |prog.$sha256_ax|)))
(assert (forall (($p Seq<Int>) ($q Seq<Int>)) (!
  (= (Seq_length ($ecadd<Seq<Int>> $p $q)) 2)
  :pattern (($ecadd<Seq<Int>> $p $q))
  :qid |prog.$ecadd_ax|)))
(assert (forall (($p Seq<Int>) ($s Int)) (!
  (= (Seq_length ($ecmul<Seq<Int>> $p $s)) 2)
  :pattern (($ecmul<Seq<Int>> $p $s))
  :qid |prog.$ecmul_ax|)))
(assert (forall (($e Int) ($c Int)) (!
  (= (Seq_length ($array_init<Seq<Int>> $e $c)) $c)
  :pattern (($array_init<Seq<Int>> $e $c))
  :qid |prog.$array_init_len_ax|)))
(assert (forall (($e Int) ($c Int) ($i Int)) (!
  (=>
    (and (<= 0 $i) (< $i $c))
    (= (Seq_index ($array_init<Seq<Int>> $e $c) $i) $e))
  :pattern ((Seq_index ($array_init<Seq<Int>> $e $c) $i))
  :qid |prog.$array_init_val_ax|)))
(assert (forall ((i Int)) (!
  (= ($unwrap<Int> ($wrap<$Int> i)) i)
  :pattern (($wrap<$Int> i))
  :qid |prog.$wrap_ax|)))
(assert (forall ((i $Int)) (!
  (= ($wrap<$Int> ($unwrap<Int> i)) i)
  :pattern (($wrap<$Int> ($unwrap<Int> i)))
  :qid |prog.$unwrap_ax|)))
(assert (forall ((i $Int)) (!
  (=> (< ($unwrap<Int> i) 0) (= ($w_abs<Int> i) (- 0 ($unwrap<Int> i))))
  :pattern (($w_abs<Int> i))
  :qid |prog.$w_abs_ax_1|)))
(assert (forall ((i $Int)) (!
  (=> (>= ($unwrap<Int> i) 0) (= ($w_abs<Int> i) ($unwrap<Int> i)))
  :pattern (($w_abs<Int> i))
  :qid |prog.$w_abs_ax_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulI<$Int> i j))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_intermediate|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulL<$Int> i j))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mulI<$Int> i j) ($w_mulL<$Int> i j))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_intermediate_to_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mul<$Int> i j) ($w_mulI<$Int> j i))
  :pattern (($w_mul<$Int> i j))
  :qid |prog.$w_mul_commutative|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (= ($w_mulI<$Int> i ($w_mulI<$Int> j k)) ($w_mulL<$Int> ($w_mulL<$Int> i j) k))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j k)))
  :qid |prog.$w_mul_associative|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (= ($unwrap<Int> j) (+ ($unwrap<Int> k) ($unwrap<Int> l)))
    (=
      ($w_mulI<$Int> i j)
      ($wrap<$Int> (+
        ($unwrap<Int> ($w_mulL<$Int> i k))
        ($unwrap<Int> ($w_mulL<$Int> i l))))))
  :pattern (($w_mulI<$Int> i j) ($w_mulI<$Int> i k) ($w_mulI<$Int> i l))
  :qid |prog.$w_mul_distributive|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_mulI<$Int> i j)
    ($w_mulL<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) ($wrap<$Int> (-
      0
      ($unwrap<Int> j)))))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_sign_1|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_mulI<$Int> i j)
    ($wrap<$Int> (-
      0
      ($unwrap<Int> ($w_mulL<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) j)))))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_sign_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> i) 0) (= ($unwrap<Int> j) 0))
    (= ($unwrap<Int> ($w_mulI<$Int> i j)) 0))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_zero_1|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or
      (and (> ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
      (and (< ($unwrap<Int> i) 0) (< ($unwrap<Int> j) 0)))
    (> ($unwrap<Int> ($w_mulI<$Int> i j)) 0))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_zero_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> i) 1) (= ($unwrap<Int> j) 0))
    (= ($w_mulI<$Int> i j) j))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_neutral|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    (>= ($w_abs<Int> ($w_mulI<$Int> i j)) ($w_abs<Int> j))
    (or (>= ($w_abs<Int> i) 1) (= ($unwrap<Int> j) 0)))
  :pattern (($w_mulI<$Int> i j))
  :qid |prog.$w_mul_basic_proportional|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (> ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (> ($unwrap<Int> l) 0))
    (>
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))
      ($unwrap<Int> ($w_mulI<$Int> k l))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (>= ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (> ($unwrap<Int> l) 0))
    (>=
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))
      ($unwrap<Int> ($w_mulI<$Int> k l))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_2|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (> ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (< ($unwrap<Int> l) 0))
    (>
      ($unwrap<Int> ($w_mulI<$Int> k l))
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_3|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (>= ($unwrap<Int> ($w_mulI<$Int> i j)) ($unwrap<Int> k))
      (< ($unwrap<Int> l) 0))
    (>=
      ($unwrap<Int> ($w_mulI<$Int> k l))
      ($unwrap<Int> ($w_mulL<$Int> i ($w_mulL<$Int> j l)))))
  :pattern (($w_mulI<$Int> i ($w_mulI<$Int> j l)) ($w_mulI<$Int> k l))
  :qid |prog.$w_mul_order_4|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (<= ($w_abs<Int> i) ($w_abs<Int> j))
      (<= ($w_abs<Int> k) ($w_abs<Int> l)))
    (<= ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (< ($w_abs<Int> i) ($w_abs<Int> j))
      (and (<= ($w_abs<Int> k) ($w_abs<Int> l)) (not (= ($unwrap<Int> l) 0))))
    (< ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_2|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (<= ($w_abs<Int> i) ($w_abs<Int> j))
      (and (< ($w_abs<Int> k) ($w_abs<Int> l)) (not (= ($unwrap<Int> j) 0))))
    (< ($w_abs<Int> ($w_mulI<$Int> i k)) ($w_abs<Int> ($w_mulI<$Int> j l))))
  :pattern (($w_mulI<$Int> i k) ($w_mulI<$Int> j l))
  :qid |prog.$w_mul_monotonicity_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_mod<$Int> i j) ($w_modL<$Int> i j))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (not (= j ($wrap<$Int> 0))) (or (= i j) (= i ($wrap<$Int> 0))))
    (= ($w_mod<$Int> i j) ($wrap<$Int> 0)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_identity|)))
(assert (forall ((i $Int) (j $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and
        (= ($unwrap<Int> i) (+ ($unwrap<Int> l) ($w_abs<Int> j)))
        (or (>= ($unwrap<Int> l) 0) (< ($unwrap<Int> i) 0))))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> l j)))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_basic_1|)))
(assert (forall ((i $Int) (j $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and
        (= ($unwrap<Int> i) (- ($unwrap<Int> l) ($w_abs<Int> j)))
        (or (<= ($unwrap<Int> l) 0) (> ($unwrap<Int> i) 0))))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> l j)))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_basic_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (and (<= 0 ($w_abs<Int> i)) (< ($w_abs<Int> i) ($w_abs<Int> j))))
    (= ($w_mod<$Int> i j) i))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_basic_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (< ($w_abs<Int> ($w_mod<$Int> i j)) ($w_abs<Int> j)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_basic_4|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (or
      (=
        ($sign<Int> ($unwrap<Int> ($w_mod<$Int> i j)))
        ($sign<Int> ($unwrap<Int> i)))
      (= ($sign<Int> ($unwrap<Int> ($w_mod<$Int> i j))) 0)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_sign_1|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and (not (= j ($wrap<$Int> 0))) (= ($unwrap<Int> i) (- 0 ($unwrap<Int> k))))
    (= ($w_mod<$Int> i j) ($wrap<$Int> (- 0 ($unwrap<Int> ($w_modL<$Int> k j))))))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> k j))
  :qid |prog.$w_mod_sign_2|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> i j) ($w_mod<$Int> i ($wrap<$Int> (- 0 ($unwrap<Int> j))))))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_sign_3|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> i j) ($w_modL<$Int> ($w_modL<$Int> i j) j)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_mod|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (<= ($w_abs<Int> ($w_mod<$Int> i j)) ($w_abs<Int> i)))
  :pattern (($w_mod<$Int> i j))
  :qid |prog.$w_mod_decrease|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (not (= j ($wrap<$Int> 0)))
      (= ($unwrap<Int> i) (+ ($unwrap<Int> k) ($unwrap<Int> l))))
    (and
      (=>
        (or
          (and
            (>= ($unwrap<Int> i) 0)
            (>=
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0))
          (and
            (<= ($unwrap<Int> i) 0)
            (<=
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0)))
        (or
          (and
            (<=
              ($w_abs<Int> j)
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                (* 2 ($w_abs<Int> j)))
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (-
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))
          (or
            (and
              (<
                (- 0 ($w_abs<Int> j))
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j))))
              (and
                (<
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))
                (=
                  ($w_mod<$Int> i j)
                  ($wrap<$Int> (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))))))
            (and
              (<
                (* (- 0 2) ($w_abs<Int> j))
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j))))
              (and
                (<=
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  (- 0 ($w_abs<Int> j)))
                (=
                  ($w_mod<$Int> i j)
                  ($wrap<$Int> (+
                    (+
                      ($unwrap<Int> ($w_modL<$Int> k j))
                      ($unwrap<Int> ($w_modL<$Int> l j)))
                    ($w_abs<Int> j)))))))))
      (=>
        (or
          (and
            (> ($unwrap<Int> i) 0)
            (<
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0))
          (and
            (< ($unwrap<Int> i) 0)
            (>
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j)))
              0)))
        (or
          (and
            (<
              0
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                ($w_abs<Int> j))
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (-
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))
          (and
            (<
              (- 0 ($w_abs<Int> j))
              (+
                ($unwrap<Int> ($w_modL<$Int> k j))
                ($unwrap<Int> ($w_modL<$Int> l j))))
            (and
              (<
                (+
                  ($unwrap<Int> ($w_modL<$Int> k j))
                  ($unwrap<Int> ($w_modL<$Int> l j)))
                0)
              (=
                ($w_mod<$Int> i j)
                ($wrap<$Int> (+
                  (+
                    ($unwrap<Int> ($w_modL<$Int> k j))
                    ($unwrap<Int> ($w_modL<$Int> l j)))
                  ($w_abs<Int> j))))))))))
  :pattern (($w_mod<$Int> i j) ($w_mod<$Int> k j) ($w_mod<$Int> l j))
  :qid |prog.$w_mod_add|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (= ($w_mod<$Int> ($w_mul<$Int> i j) j) ($wrap<$Int> 0)))
  :pattern (($w_mod<$Int> ($w_mul<$Int> i j) j))
  :qid |prog.$w_mod_mul_basic|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (and
      (=
        ($w_mod<$Int> ($w_mulI<$Int> i k) j)
        ($w_modL<$Int> ($w_mulL<$Int> ($w_modL<$Int> i j) k) j))
      (and
        (=
          ($w_mod<$Int> ($w_mulI<$Int> i k) j)
          ($w_modL<$Int> ($w_mulL<$Int> i ($w_modL<$Int> k j)) j))
        (=
          ($w_mod<$Int> ($w_mulI<$Int> i k) j)
          ($w_modL<$Int> ($w_mulL<$Int> ($w_modL<$Int> i j) ($w_modL<$Int> k j)) j)))))
  :pattern (($w_mod<$Int> ($w_mulI<$Int> i k) j))
  :qid |prog.$w_mod_mul_mod_noop|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (not (= j ($wrap<$Int> 0)))
    (=
      ($w_mod<$Int> i j)
      ($w_modL<$Int> ($wrap<$Int> (+
        ($unwrap<Int> ($w_mulL<$Int> k j))
        ($unwrap<Int> i))) j)))
  :pattern (($w_mod<$Int> i j) ($w_mulI<$Int> k j))
  :qid |prog.$w_mod_mul_vanish|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (=
      ($w_div<$Int> i j)
      (ite
        (>= ($unwrap<Int> i) 0)
        ($w_div_down<$Int> i j)
        ($wrap<$Int> (-
          0
          ($unwrap<Int> ($w_div_down<$Int> ($wrap<$Int> (- 0 ($unwrap<Int> i))) j)))))))
  :pattern (($w_div<$Int> i j))
  :qid |prog.$w_div_div_down|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=
    ($w_div_down<$Int> i j)
    (ite
      (>= ($unwrap<Int> j) 0)
      ($w_div_nat<$Int> i j)
      ($wrap<$Int> (-
        0
        ($unwrap<Int> ($w_div_nat<$Int> i ($wrap<$Int> (- 0 ($unwrap<Int> j)))))))))
  :pattern (($w_div_down<$Int> i j))
  :qid |prog.$w_div_down_div_nat|)))
(assert (forall ((i $Int) (j $Int)) (!
  (= ($w_div_nat<$Int> i j) ($w_div_natL<$Int> i j))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_limited|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (or (= ($unwrap<Int> j) 1) (= ($unwrap<Int> i) 0))
    (= ($w_div_nat<$Int> i j) i))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_neutral|)))
(assert (forall ((i $Int)) (!
  (=> (> ($unwrap<Int> i) 0) (= ($w_div_nat<$Int> i i) ($wrap<$Int> 1)))
  :pattern (($w_div_nat<$Int> i i))
  :qid |prog.$w_div_nat_self|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (>= ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
    (=
      (< ($unwrap<Int> i) ($unwrap<Int> j))
      (= ($w_div_nat<$Int> i j) ($wrap<$Int> 0))))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_small|)))
(assert (forall ((i $Int) (j $Int) (k $Int) (l $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and
          (> ($unwrap<Int> j) 0)
          (and (>= ($unwrap<Int> k) 0) (>= ($unwrap<Int> l) 0))))
      (= ($unwrap<Int> i) (+ ($unwrap<Int> k) ($unwrap<Int> l))))
    (or
      (and
        (<=
          0
          (+ ($unwrap<Int> ($w_mod<$Int> k j)) ($unwrap<Int> ($w_mod<$Int> l j))))
        (and
          (<
            (+
              ($unwrap<Int> ($w_mod<$Int> k j))
              ($unwrap<Int> ($w_mod<$Int> l j)))
            ($unwrap<Int> j))
          (=
            ($w_div_nat<$Int> i j)
            ($wrap<$Int> (+
              ($unwrap<Int> ($w_div_natL<$Int> k j))
              ($unwrap<Int> ($w_div_natL<$Int> l j)))))))
      (and
        (<=
          ($unwrap<Int> j)
          (+ ($unwrap<Int> ($w_mod<$Int> k j)) ($unwrap<Int> ($w_mod<$Int> l j))))
        (and
          (<
            (+
              ($unwrap<Int> ($w_mod<$Int> k j))
              ($unwrap<Int> ($w_mod<$Int> l j)))
            (* 2 ($unwrap<Int> j)))
          (=
            ($w_div_nat<$Int> i j)
            ($wrap<$Int> (+
              (+
                ($unwrap<Int> ($w_div_natL<$Int> k j))
                ($unwrap<Int> ($w_div_natL<$Int> l j)))
              1)))))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> k j) ($w_div_nat<$Int> l j))
  :qid |prog.$w_div_nat_dividend_add|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and (> ($unwrap<Int> j) 0) (>= ($unwrap<Int> k) 0)))
      (<= ($unwrap<Int> i) ($unwrap<Int> k)))
    (<=
      ($unwrap<Int> ($w_div_nat<$Int> i j))
      ($unwrap<Int> ($w_div_natL<$Int> k j))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> k j))
  :qid |prog.$w_div_nat_ordered_by_dividend|)))
(assert (forall ((i $Int) (j $Int) (k $Int)) (!
  (=>
    (and
      (and
        (>= ($unwrap<Int> i) 0)
        (and (> ($unwrap<Int> j) 0) (> ($unwrap<Int> k) 0)))
      (<= ($unwrap<Int> j) ($unwrap<Int> k)))
    (>=
      ($unwrap<Int> ($w_div_nat<$Int> i j))
      ($unwrap<Int> ($w_div_natL<$Int> i k))))
  :pattern (($w_div_nat<$Int> i j) ($w_div_nat<$Int> i k))
  :qid |prog.$w_div_nat_ordered_by_divisor|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (> ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 1))
    (< ($unwrap<Int> ($w_div_nat<$Int> i j)) ($unwrap<Int> i)))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_decrease|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (and (>= ($unwrap<Int> i) 0) (> ($unwrap<Int> j) 0))
    (<= ($unwrap<Int> ($w_div_nat<$Int> i j)) ($unwrap<Int> i)))
  :pattern (($w_div_nat<$Int> i j))
  :qid |prog.$w_div_nat_nonincrease|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=> (not (= ($unwrap<Int> j) 0)) (= ($w_div<$Int> ($w_mulI<$Int> i j) j) i))
  :pattern (($w_div<$Int> ($w_mulI<$Int> i j) j))
  :qid |prog.$w_div_mul|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (or
      (=
        ($sign<Int> ($unwrap<Int> ($w_div<$Int> i j)))
        (* ($sign<Int> ($unwrap<Int> i)) ($sign<Int> ($unwrap<Int> j))))
      (= ($sign<Int> ($unwrap<Int> ($w_div<$Int> i j))) 0)))
  :pattern (($w_div<$Int> i j))
  :qid |prog.$w_div_sign|)))
(assert (forall ((i $Int) (j $Int)) (!
  (=>
    (not (= ($unwrap<Int> j) 0))
    (=
      ($unwrap<Int> i)
      (+
        ($unwrap<Int> ($w_mulI<$Int> j ($w_div<$Int> i j)))
        ($unwrap<Int> ($w_mod<$Int> i j)))))
  :pattern (($w_div<$Int> i j) ($w_mod<$Int> i j))
  :qid |prog.$w_div_mod_mul|)))
(assert (forall (($s $Struct) ($m Int) ($t Seq<Seq<Seq<Int>>>)) (!
  (Seq_equal
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Seq<Seq<Seq<Int>>>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t Seq<Seq<Int>>)) (!
  (Seq_equal
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Seq<Seq<Int>>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($v Int) ($k Int)) (!
  (= ($map_get<Int> ($map_init<$Map<Int~_Int>> $v) $k) $v)
  :pattern (($map_get<Int> ($map_init<$Map<Int~_Int>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Int~_Int>) ($n $Map<Int~_Int>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Int)) (!
        (= ($map_get<Int> $m $k) ($map_get<Int> $n $k))
        :pattern (($map_get<Int> $m $k) ($map_get<Int> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Int~_Int>) ($k Int) ($v Int) ($kk Int)) (!
  (=
    ($map_get<Int> ($map_set<$Map<Int~_Int>> $m $k $v) $kk)
    (ite (= $k $kk) $v ($map_get<Int> $m $kk)))
  :pattern (($map_get<Int> ($map_set<$Map<Int~_Int>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
(assert (and
  (= ($sign<Int> 0) 0)
  (forall (($a Int)) (!
    (and
      (=> (> $a 0) (= ($sign<Int> $a) 1))
      (=> (< $a 0) (= ($sign<Int> $a) (- 0 1))))
    :pattern (($sign<Int> $a))
    ))))
(assert (forall (($a Int) ($b Int) ($r Int)) (!
  (=
    ($div<Int> $a $b $r)
    (+ (div $a $b) (ite (or (>= $a 0) (= (mod $a $b) 0)) 0 ($sign<Int> $b))))
  :pattern (($div<Int> $a $b $r))
  :qid |prog.$div_ax|)))
(assert (forall (($a Int) ($b Int) ($r Int)) (!
  (= ($mod<Int> $a $b $r) (- $a (* ($div<Int> $a $b $r) $b)))
  :pattern (($mod<Int> $a $b $r))
  :qid |prog.$mod_ax|)))
(assert (forall (($a Int)) (!
  (=> (not (= $a 0)) (= ($pow<Int> 0 $a) 0))
  :pattern (($pow<Int> 0 $a))
  :qid |prog.$pow0N_ax|)))
(assert (forall (($a Int)) (!
  (=> (not (= $a 0)) (= ($pow<Int> $a 0) 1))
  :pattern (($pow<Int> $a 0))
  :qid |prog.$powN0_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (=> (>= $a 0) (>= ($pow<Int> $a $b) 0))
  :pattern (($pow<Int> $a $b))
  :qid |prog.$pow_non_negative_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (=> (and (> $a 0) (>= $b 0)) (> ($pow<Int> $a $b) 0))
  :pattern (($pow<Int> $a $b))
  :qid |prog.$pow_non_negative_and_non_null_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (=>
    (> $s 0)
    (= ($floor<Int> $a $s) ($div<Int> (ite (< $a 0) (- $a (- $s 1)) $a) $s 0)))
  :pattern (($floor<Int> $a $s))
  :qid |prog.$floor_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (=>
    (> $s 0)
    (= ($ceil<Int> $a $s) ($div<Int> (ite (< $a 0) $a (- (+ $a $s) 1)) $s 0)))
  :pattern (($ceil<Int> $a $s))
  :qid |prog.$ceil_ax|)))
(assert (forall (($a Int) ($s Int)) (!
  (>= ($shift<Int> $a $s) 0)
  :pattern (($shift<Int> $a $s))
  :qid |prog.$shift_ax|)))
(assert (forall (($a Int)) (!
  (>= ($bitwise_not<Int> $a) 0)
  :pattern (($bitwise_not<Int> $a))
  :qid |prog.$bitwise_not_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_and<Int> $a $b) 0)
  :pattern (($bitwise_and<Int> $a $b))
  :qid |prog.$bitwise_and_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_or<Int> $a $b) 0)
  :pattern (($bitwise_or<Int> $a $b))
  :qid |prog.$bitwise_or_ax|)))
(assert (forall (($a Int) ($b Int)) (!
  (>= ($bitwise_xor<Int> $a $b) 0)
  :pattern (($bitwise_xor<Int> $a $b))
  :qid |prog.$bitwise_xor_ax|)))
(assert (forall (($v $Struct) ($k Int)) (!
  (= ($map_get<$Struct> ($map_init<$Map<Int~_$Struct>> $v) $k) $v)
  :pattern (($map_get<$Struct> ($map_init<$Map<Int~_$Struct>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Int~_$Struct>) ($n $Map<Int~_$Struct>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Int)) (!
        (= ($map_get<$Struct> $m $k) ($map_get<$Struct> $n $k))
        :pattern (($map_get<$Struct> $m $k) ($map_get<$Struct> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Int~_$Struct>) ($k Int) ($v $Struct) ($kk Int)) (!
  (=
    ($map_get<$Struct> ($map_set<$Map<Int~_$Struct>> $m $k $v) $kk)
    (ite (= $k $kk) $v ($map_get<$Struct> $m $kk)))
  :pattern (($map_get<$Struct> ($map_set<$Map<Int~_$Struct>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
(assert (forall (($v Seq<Int>) ($k Int)) (!
  (Seq_equal ($map_get<Seq<Int>> ($map_init<$Map<Int~_Seq<Int>>> $v) $k) $v)
  :pattern (($map_get<Seq<Int>> ($map_init<$Map<Int~_Seq<Int>>> $v) $k))
  :qid |prog.$map_init_ax|)))
(assert (forall (($m $Map<Int~_Seq<Int>>) ($n $Map<Int~_Seq<Int>>)) (!
  (and
    (= ($map_eq<Bool> $m $n) (= $m $n))
    (=
      ($map_eq<Bool> $m $n)
      (forall (($k Int)) (!
        (Seq_equal ($map_get<Seq<Int>> $m $k) ($map_get<Seq<Int>> $n $k))
        :pattern (($map_get<Seq<Int>> $m $k) ($map_get<Seq<Int>> $n $k))
        ))))
  :pattern (($map_eq<Bool> $m $n))
  :qid |prog.$map_eq_ax|)))
(assert (forall (($m $Map<Int~_Seq<Int>>) ($k Int) ($v Seq<Int>) ($kk Int)) (!
  (Seq_equal
    ($map_get<Seq<Int>> ($map_set<$Map<Int~_Seq<Int>>> $m $k $v) $kk)
    (ite (= $k $kk) $v ($map_get<Seq<Int>> $m $kk)))
  :pattern (($map_get<Seq<Int>> ($map_set<$Map<Int~_Seq<Int>>> $m $k $v) $kk))
  :qid |prog.$map_set_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t $Map<Int~_Int>)) (!
  (=
    ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Map<Int~_Int>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t Seq<Int>)) (!
  (Seq_equal
    ($struct_get<Seq<Int>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t Seq<Int>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($arg_0 $Struct)) (!
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> (s$resource$$creator$init<$Struct> $arg_0) (- 0 1)))
      2567760667165796382711201132846784524754120562)
    (=
      ($struct_get<$Struct> ($struct_loc<Int> (s$resource$$creator$init<$Struct> $arg_0) 0))
      $arg_0))
  :pattern ((s$resource$$creator$init<$Struct> $arg_0))
  :qid |prog.s$resource$$creator$init$ax|)))
(assert (forall (($l $Struct) ($r $Struct)) (!
  (and
    (= (s$resource$$creator$eq<Bool> $l $r) (= $l $r))
    (=
      (s$resource$$creator$eq<Bool> $l $r)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> $l (- 0 1)))
          ($struct_get<Int> ($struct_loc<Int> $r (- 0 1))))
        (=
          ($struct_get<$Struct> ($struct_loc<Int> $l 0))
          ($struct_get<$Struct> ($struct_loc<Int> $r 0))))))
  :pattern ((s$resource$$creator$eq<Bool> $l $r))
  :qid |prog.s$resource$$creator$eq$ax|)))
(assert (= ($map_sum<Int> ($map_init<$Map<Int~_Int>> 0)) 0))
(assert (forall (($m $Map<Int~_Int>) ($k Int) ($v Int)) (!
  (=
    ($map_sum<Int> ($map_set<$Map<Int~_Int>> $m $k $v))
    (+ (- ($map_sum<Int> $m) ($map_get<Int> $m $k)) $v))
  :pattern (($map_sum<Int> ($map_set<$Map<Int~_Int>> $m $k $v)))
  :qid |prog.$map_sum_set_ax|)))
(assert (not (= (as $self_address<Int>  Int) 0)))
(assert (forall (($s $Struct) ($m Int) ($t $Map<Int~_Seq<Int>>)) (!
  (=
    ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Map<Int~_Seq<Int>>)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($s $Struct) ($m Int) ($t $Struct)) (!
  (=
    ($struct_get<$Struct> ($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
    $t)
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $m $t) $m))
  :qid |prog.$get_set_0_ax|)))
(assert (forall (($s $Struct) ($m Int) ($n Int) ($t $Struct)) (!
  (=>
    (not (= $m $n))
    (=
      ($struct_loc<Int> $s $m)
      ($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m)))
  :pattern (($struct_loc<Int> ($struct_set<$Struct> $s $n $t) $m))
  :qid |prog.$get_set_1_ax|)))
(assert (forall (($e Seq<Seq<Int>>) ($c Int)) (!
  (= (Seq_length ($array_init<Seq<Seq<Seq<Int>>>> $e $c)) $c)
  :pattern (($array_init<Seq<Seq<Seq<Int>>>> $e $c))
  :qid |prog.$array_init_len_ax|)))
(assert (forall (($e Seq<Seq<Int>>) ($c Int) ($i Int)) (!
  (=>
    (and (<= 0 $i) (< $i $c))
    (Seq_equal (Seq_index ($array_init<Seq<Seq<Seq<Int>>>> $e $c) $i) $e))
  :pattern ((Seq_index ($array_init<Seq<Seq<Seq<Int>>>> $e $c) $i))
  :qid |prog.$array_init_val_ax|)))
(assert (forall (($e Seq<Int>) ($c Int)) (!
  (= (Seq_length ($array_init<Seq<Seq<Int>>> $e $c)) $c)
  :pattern (($array_init<Seq<Seq<Int>>> $e $c))
  :qid |prog.$array_init_len_ax|)))
(assert (forall (($e Seq<Int>) ($c Int) ($i Int)) (!
  (=>
    (and (<= 0 $i) (< $i $c))
    (Seq_equal (Seq_index ($array_init<Seq<Seq<Int>>> $e $c) $i) $e))
  :pattern ((Seq_index ($array_init<Seq<Seq<Int>>> $e $c) $i))
  :qid |prog.$array_init_val_ax|)))
(assert (forall (($arg_0 Seq<Int>) ($arg_1 Seq<Seq<Int>>) ($arg_2 Seq<Seq<Seq<Int>>>) ($arg_3 Seq<Int>) ($arg_4 $Map<Int~_Seq<Int>>) ($arg_5 Int) ($arg_6 Int) ($arg_7 Bool) ($arg_8 $Map<Int~_Int>) ($arg_9 $Map<Int~_Int>) ($arg_10 Bool)) (!
  (and
    (=
      ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) (- 0 1)))
      9122519725869122497593506884710)
    (and
      (Seq_equal
        ($struct_get<Seq<Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 0))
        $arg_0)
      (and
        (Seq_equal
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 1))
          $arg_1)
        (and
          (Seq_equal
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 2))
            $arg_2)
          (and
            (Seq_equal
              ($struct_get<Seq<Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 3))
              $arg_3)
            (and
              (=
                ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 4))
                $arg_4)
              (and
                (=
                  ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 5))
                  $arg_5)
                (and
                  (=
                    ($struct_get<Int> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 6))
                    $arg_6)
                  (and
                    (=
                      ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 7))
                      $arg_7)
                    (and
                      (=
                        ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 8))
                        $arg_8)
                      (and
                        (=
                          ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 9))
                          $arg_9)
                        (=
                          ($struct_get<Bool> ($struct_loc<Int> (s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10) 10))
                          $arg_10))))))))))))
  :pattern ((s$struct$self$init<$Struct> $arg_0 $arg_1 $arg_2 $arg_3 $arg_4 $arg_5 $arg_6 $arg_7 $arg_8 $arg_9 $arg_10))
  :qid |prog.s$struct$self$init$ax|)))
(assert (forall (($l $Struct) ($r $Struct)) (!
  (and
    (= (s$struct$self$eq<Bool> $l $r) (= $l $r))
    (=
      (s$struct$self$eq<Bool> $l $r)
      (and
        (=
          ($struct_get<Int> ($struct_loc<Int> $l (- 0 1)))
          ($struct_get<Int> ($struct_loc<Int> $r (- 0 1))))
        (and
          (Seq_equal
            ($struct_get<Seq<Int>> ($struct_loc<Int> $l 0))
            ($struct_get<Seq<Int>> ($struct_loc<Int> $r 0)))
          (and
            (Seq_equal
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $l 1))
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $r 1)))
            (and
              (Seq_equal
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $l 2))
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $r 2)))
              (and
                (Seq_equal
                  ($struct_get<Seq<Int>> ($struct_loc<Int> $l 3))
                  ($struct_get<Seq<Int>> ($struct_loc<Int> $r 3)))
                (and
                  ($map_eq<Bool> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $l 4)) ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $r 4)))
                  (and
                    (=
                      ($struct_get<Int> ($struct_loc<Int> $l 5))
                      ($struct_get<Int> ($struct_loc<Int> $r 5)))
                    (and
                      (=
                        ($struct_get<Int> ($struct_loc<Int> $l 6))
                        ($struct_get<Int> ($struct_loc<Int> $r 6)))
                      (and
                        (=
                          ($struct_get<Bool> ($struct_loc<Int> $l 7))
                          ($struct_get<Bool> ($struct_loc<Int> $r 7)))
                        (and
                          ($map_eq<Bool> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $l 8)) ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $r 8)))
                          (and
                            ($map_eq<Bool> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $l 9)) ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $r 9)))
                            (=
                              ($struct_get<Bool> ($struct_loc<Int> $l 10))
                              ($struct_get<Bool> ($struct_loc<Int> $r 10))))))))))))))))
  :pattern ((s$struct$self$eq<Bool> $l $r))
  :qid |prog.s$struct$self$eq$ax|)))
(assert (forall (($f Int) ($t Int)) (!
  (= (Seq_length ($range<Seq<Int>> $f $t)) (- $t $f))
  :pattern ((Seq_length ($range<Seq<Int>> $f $t)))
  :qid |prog.$range_len_ax|)))
(assert (forall (($f Int) ($t Int) ($i Int)) (!
  (=>
    (and (<= 0 $i) (< $i (Seq_length ($range<Seq<Int>> $f $t))))
    (= (Seq_index ($range<Seq<Int>> $f $t) $i) (+ $f $i)))
  :pattern ((Seq_index ($range<Seq<Int>> $f $t) $i))
  :qid |prog.$range_lookup_ax|)))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun letvar@7@00 ($Snap Int Int) Bool)
(declare-fun letvar@8@00 ($Snap Int Int) Bool)
(declare-fun letvar@9@00 ($Snap Int Int) Int)
(declare-fun letvar@10@00 ($Snap Int Int) Int)
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  (= ($pure$success_get%limited s@$ x@0@00) ($pure$success_get s@$ x@0@00))
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-1496|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  ($pure$success_get%stateless x@0@00)
  :pattern (($pure$success_get%limited s@$ x@0@00))
  :qid |quant-u-1497|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  (=>
    ($pure$success_get%precondition s@$ x@0@00)
    (=
      ($pure$success_get s@$ x@0@00)
      ($struct_get<Bool> ($struct_loc<Int> x@0@00 0))))
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-1502|)))
(assert (forall ((s@$ $Snap) (x@0@00 $Struct)) (!
  true
  :pattern (($pure$success_get s@$ x@0@00))
  :qid |quant-u-1503|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  (= ($pure$return_get%limited s@$ x@2@00) ($pure$return_get s@$ x@2@00))
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-1498|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  ($pure$return_get%stateless x@2@00)
  :pattern (($pure$return_get%limited s@$ x@2@00))
  :qid |quant-u-1499|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  (=>
    ($pure$return_get%precondition s@$ x@2@00)
    (= ($pure$return_get s@$ x@2@00) ($struct_loc<Int> x@2@00 1)))
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-1504|)))
(assert (forall ((s@$ $Snap) (x@2@00 $Struct)) (!
  true
  :pattern (($pure$return_get s@$ x@2@00))
  :qid |quant-u-1505|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (= ($range_sum%limited s@$ $x@4@00 $y@5@00) ($range_sum s@$ $x@4@00 $y@5@00))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1500|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  ($range_sum%stateless $x@4@00 $y@5@00)
  :pattern (($range_sum%limited s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1501|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (=>
    ($range_sum%precondition s@$ $x@4@00 $y@5@00)
    (=
      ($range_sum s@$ $x@4@00 $y@5@00)
      (let (($x_ge_0 (>= $x@4@00 0))) (let (($y_ge_0 (>= $y@5@00 0))) (let (($x_exclusive (ite
        $x_ge_0
        (div (* (- $x@4@00 1) $x@4@00) 2)
        (div (* (- (- 0 $x@4@00) 1) (- 0 $x@4@00)) 2)))) (let (($y_exclusive (ite
        $y_ge_0
        (div (* (- $y@5@00 1) $y@5@00) 2)
        (div (* (- (- 0 $y@5@00) 1) (- 0 $y@5@00)) 2)))) (ite
        (and $x_ge_0 $y_ge_0)
        (- $y_exclusive $x_exclusive)
        (ite
          (and (not $x_ge_0) $y_ge_0)
          (+ (- $y_exclusive $x_exclusive) $x@4@00)
          (+ (- (- $y_exclusive $y@5@00) $x_exclusive) $x@4@00)))))))))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1506|)))
(assert (forall ((s@$ $Snap) ($x@4@00 Int) ($y@5@00 Int)) (!
  (=>
    ($range_sum%precondition s@$ $x@4@00 $y@5@00)
    (let (($x_ge_0 (>= $x@4@00 0))) (let (($y_ge_0 (>= $y@5@00 0))) (let (($x_exclusive (ite
      $x_ge_0
      (div (* (- $x@4@00 1) $x@4@00) 2)
      (div (* (- (- 0 $x@4@00) 1) (- 0 $x@4@00)) 2)))) (let (($y_exclusive (ite
      $y_ge_0
      (div (* (- $y@5@00 1) $y@5@00) 2)
      (div (* (- (- 0 $y@5@00) 1) (- 0 $y@5@00)) 2)))) true)))))
  :pattern (($range_sum s@$ $x@4@00 $y@5@00))
  :qid |quant-u-1507|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- $transitivity_check ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var $self$0: $Struct
(declare-const $self$0@0@01 $Struct)
; [exec]
; var $$contracts$0: $Map[Int, $Struct]
(declare-const $$contracts$0@1@01 $Map<Int~_$Struct>)
; [exec]
; var $self$1: $Struct
(declare-const $self$1@2@01 $Struct)
; [exec]
; var $$contracts$1: $Map[Int, $Struct]
(declare-const $$contracts$1@3@01 $Map<Int~_$Struct>)
; [exec]
; var $self$2: $Struct
(declare-const $self$2@4@01 $Struct)
; [exec]
; var $$contracts$2: $Map[Int, $Struct]
(declare-const $$contracts$2@5@01 $Map<Int~_$Struct>)
; [exec]
; var block: $Struct
(declare-const block@6@01 $Struct)
; [exec]
; var $post: Bool
(declare-const $post@7@01 Bool)
; [exec]
; inhale |($struct_get($struct_loc($self$0, 0)): Seq[Int])| == 12
(declare-const $t@8@01 $Snap)
(assert (= $t@8@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$0, 0)): Seq[Int])| == 12
; [eval] |($struct_get($struct_loc($self$0, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$0, 0)): Seq[Int])
; [eval] $struct_loc($self$0, 0)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 0))) 12))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0] }
;     0 <= $q0 && $q0 < |($struct_get($struct_loc($self$0, 0)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0] &&
;     ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0] <=
;     170141183460469231731687303715884105727)
(declare-const $t@9@01 $Snap)
(assert (= $t@9@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0] } 0 <= $q0 && $q0 < |($struct_get($struct_loc($self$0, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@10@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc($self$0, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc($self$0, 0)): Seq[Int])|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 0 | !(0 <= $q0@10@01) | live]
; [else-branch: 0 | 0 <= $q0@10@01 | live]
(push) ; 5
; [then-branch: 0 | !(0 <= $q0@10@01)]
(assert (not (<= 0 $q0@10@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 0 | 0 <= $q0@10@01]
(assert (<= 0 $q0@10@01))
; [eval] $q0 < |($struct_get($struct_loc($self$0, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc($self$0, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$0, 0)): Seq[Int])
; [eval] $struct_loc($self$0, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@10@01) (not (<= 0 $q0@10@01))))
(push) ; 4
; [then-branch: 1 | 0 <= $q0@10@01 && $q0@10@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$0@0@01, 0))| | live]
; [else-branch: 1 | !(0 <= $q0@10@01 && $q0@10@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$0@0@01, 0))|) | live]
(push) ; 5
; [then-branch: 1 | 0 <= $q0@10@01 && $q0@10@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$0@0@01, 0))|]
(assert (and
  (<= 0 $q0@10@01)
  (<
    $q0@10@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 0))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc($self$0, 0)): Seq[Int])
; [eval] $struct_loc($self$0, 0)
(push) ; 6
(assert (not (>= $q0@10@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 2 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$0@0@01, 0))[$q0@10@01]) | live]
; [else-branch: 2 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$0@0@01, 0))[$q0@10@01] | live]
(push) ; 7
; [then-branch: 2 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$0@0@01, 0))[$q0@10@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 0))
      $q0@10@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 2 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$0@0@01, 0))[$q0@10@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 0)) $q0@10@01)))
; [eval] ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc($self$0, 0)): Seq[Int])
; [eval] $struct_loc($self$0, 0)
(push) ; 8
(assert (not (>= $q0@10@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 0))
      $q0@10@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 0))
        $q0@10@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 1 | !(0 <= $q0@10@01 && $q0@10@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$0@0@01, 0))|)]
(assert (not
  (and
    (<= 0 $q0@10@01)
    (<
      $q0@10@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 0)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q0@10@01)
    (<
      $q0@10@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 0)))))
  (and
    (<= 0 $q0@10@01)
    (<
      $q0@10@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 0))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 0))
          $q0@10@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 0))
            $q0@10@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q0@10@01)
      (<
        $q0@10@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 0))))))
  (and
    (<= 0 $q0@10@01)
    (<
      $q0@10@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 0)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@10@01 Int)) (!
  (and
    (or (<= 0 $q0@10@01) (not (<= 0 $q0@10@01)))
    (=>
      (and
        (<= 0 $q0@10@01)
        (<
          $q0@10@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 0)))))
      (and
        (<= 0 $q0@10@01)
        (<
          $q0@10@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 0))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 0))
              $q0@10@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 0))
                $q0@10@01))))))
    (or
      (not
        (and
          (<= 0 $q0@10@01)
          (<
            $q0@10@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 0))))))
      (and
        (<= 0 $q0@10@01)
        (<
          $q0@10@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 0)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 0))
    $q0@10@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@663@11@663@358-aux|)))
(assert (forall (($q0@10@01 Int)) (!
  (=>
    (and
      (<= 0 $q0@10@01)
      (<
        $q0@10@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 0)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 0))
          $q0@10@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 0))
          $q0@10@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 0))
    $q0@10@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@663@11@663@358|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])| == 12
(declare-const $t@11@01 $Snap)
(assert (= $t@11@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])| == 12
; [eval] |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$0, 1)
(assert (=
  (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1)))
  12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 &&
;     $q1 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])| ==>
;     |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $t@12@01 $Snap)
(assert (= $t@12@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $q1@13@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 3 | !(0 <= $q1@13@01) | live]
; [else-branch: 3 | 0 <= $q1@13@01 | live]
(push) ; 5
; [then-branch: 3 | !(0 <= $q1@13@01)]
(assert (not (<= 0 $q1@13@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 3 | 0 <= $q1@13@01]
(assert (<= 0 $q1@13@01))
; [eval] $q1 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$0, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@13@01) (not (<= 0 $q1@13@01))))
(push) ; 4
; [then-branch: 4 | 0 <= $q1@13@01 && $q1@13@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@0@01, 1))| | live]
; [else-branch: 4 | !(0 <= $q1@13@01 && $q1@13@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@0@01, 1))|) | live]
(push) ; 5
; [then-branch: 4 | 0 <= $q1@13@01 && $q1@13@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@0@01, 1))|]
(assert (and
  (<= 0 $q1@13@01)
  (<
    $q1@13@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))))))
; [eval] |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$0, 1)
(push) ; 6
(assert (not (>= $q1@13@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 4 | !(0 <= $q1@13@01 && $q1@13@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@0@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@13@01)
    (<
      $q1@13@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@13@01)
      (<
        $q1@13@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))))))
  (and
    (<= 0 $q1@13@01)
    (<
      $q1@13@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@13@01 Int)) (!
  (and
    (or (<= 0 $q1@13@01) (not (<= 0 $q1@13@01)))
    (or
      (not
        (and
          (<= 0 $q1@13@01)
          (<
            $q1@13@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))))))
      (and
        (<= 0 $q1@13@01)
        (<
          $q1@13@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
    $q1@13@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@665@11@665@237-aux|)))
(assert (forall (($q1@13@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@13@01)
      (<
        $q1@13@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
          $q1@13@01))
      12))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
    $q1@13@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@665@11@665@237|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 &&
;     $q1 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])| ==>
;     (forall $q2: Int ::
;       { ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] }
;       0 <= $q2 &&
;       $q2 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]| ==>
;       -170141183460469231731687303715884105728 <=
;       ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] &&
;       ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] <=
;       170141183460469231731687303715884105727))
(declare-const $t@14@01 $Snap)
(assert (= $t@14@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727))
(declare-const $q1@15@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 5 | !(0 <= $q1@15@01) | live]
; [else-branch: 5 | 0 <= $q1@15@01 | live]
(push) ; 5
; [then-branch: 5 | !(0 <= $q1@15@01)]
(assert (not (<= 0 $q1@15@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 5 | 0 <= $q1@15@01]
(assert (<= 0 $q1@15@01))
; [eval] $q1 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$0, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@15@01) (not (<= 0 $q1@15@01))))
(push) ; 4
; [then-branch: 6 | 0 <= $q1@15@01 && $q1@15@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@0@01, 1))| | live]
; [else-branch: 6 | !(0 <= $q1@15@01 && $q1@15@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@0@01, 1))|) | live]
(push) ; 5
; [then-branch: 6 | 0 <= $q1@15@01 && $q1@15@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@0@01, 1))|]
(assert (and
  (<= 0 $q1@15@01)
  (<
    $q1@15@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))))))
; [eval] (forall $q2: Int :: { ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
(declare-const $q2@16@01 Int)
(push) ; 6
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]|
; [eval] 0 <= $q2
(push) ; 7
; [then-branch: 7 | !(0 <= $q2@16@01) | live]
; [else-branch: 7 | 0 <= $q2@16@01 | live]
(push) ; 8
; [then-branch: 7 | !(0 <= $q2@16@01)]
(assert (not (<= 0 $q2@16@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 7 | 0 <= $q2@16@01]
(assert (<= 0 $q2@16@01))
; [eval] $q2 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]|
; [eval] |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$0, 1)
(push) ; 9
(assert (not (>= $q1@15@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q2@16@01) (not (<= 0 $q2@16@01))))
(push) ; 7
; [then-branch: 8 | 0 <= $q2@16@01 && $q2@16@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@0@01, 1))[$q1@15@01]| | live]
; [else-branch: 8 | !(0 <= $q2@16@01 && $q2@16@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@0@01, 1))[$q1@15@01]|) | live]
(push) ; 8
; [then-branch: 8 | 0 <= $q2@16@01 && $q2@16@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@0@01, 1))[$q1@15@01]|]
(assert (and
  (<= 0 $q2@16@01)
  (<
    $q2@16@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
        $q1@15@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$0, 1)
(push) ; 9
(assert (not (>= $q1@15@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q2@16@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 9 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@0@01, 1))[$q1@15@01][$q2@16@01]) | live]
; [else-branch: 9 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@0@01, 1))[$q1@15@01][$q2@16@01] | live]
(push) ; 10
; [then-branch: 9 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@0@01, 1))[$q1@15@01][$q2@16@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
        $q1@15@01)
      $q2@16@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 9 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@0@01, 1))[$q1@15@01][$q2@16@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
      $q1@15@01)
    $q2@16@01)))
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$0, 1)
(push) ; 11
(assert (not (>= $q1@15@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= $q2@16@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
        $q1@15@01)
      $q2@16@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
          $q1@15@01)
        $q2@16@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 8 | !(0 <= $q2@16@01 && $q2@16@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@0@01, 1))[$q1@15@01]|)]
(assert (not
  (and
    (<= 0 $q2@16@01)
    (<
      $q2@16@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
          $q1@15@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q2@16@01)
    (<
      $q2@16@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
          $q1@15@01))))
  (and
    (<= 0 $q2@16@01)
    (<
      $q2@16@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
          $q1@15@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
            $q1@15@01)
          $q2@16@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
              $q1@15@01)
            $q2@16@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q2@16@01)
      (<
        $q2@16@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
            $q1@15@01)))))
  (and
    (<= 0 $q2@16@01)
    (<
      $q2@16@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
          $q1@15@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@16@01 Int)) (!
  (and
    (or (<= 0 $q2@16@01) (not (<= 0 $q2@16@01)))
    (=>
      (and
        (<= 0 $q2@16@01)
        (<
          $q2@16@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
              $q1@15@01))))
      (and
        (<= 0 $q2@16@01)
        (<
          $q2@16@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
              $q1@15@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
                $q1@15@01)
              $q2@16@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
                  $q1@15@01)
                $q2@16@01))))))
    (or
      (not
        (and
          (<= 0 $q2@16@01)
          (<
            $q2@16@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
                $q1@15@01)))))
      (and
        (<= 0 $q2@16@01)
        (<
          $q2@16@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
              $q1@15@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
      $q1@15@01)
    $q2@16@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@666@172@666@559-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 6 | !(0 <= $q1@15@01 && $q1@15@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@0@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@15@01)
    (<
      $q1@15@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q1@15@01)
    (<
      $q1@15@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1)))))
  (and
    (<= 0 $q1@15@01)
    (<
      $q1@15@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))))
    (forall (($q2@16@01 Int)) (!
      (and
        (or (<= 0 $q2@16@01) (not (<= 0 $q2@16@01)))
        (=>
          (and
            (<= 0 $q2@16@01)
            (<
              $q2@16@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
                  $q1@15@01))))
          (and
            (<= 0 $q2@16@01)
            (<
              $q2@16@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
                  $q1@15@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
                    $q1@15@01)
                  $q2@16@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
                      $q1@15@01)
                    $q2@16@01))))))
        (or
          (not
            (and
              (<= 0 $q2@16@01)
              (<
                $q2@16@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
                    $q1@15@01)))))
          (and
            (<= 0 $q2@16@01)
            (<
              $q2@16@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
                  $q1@15@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
          $q1@15@01)
        $q2@16@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@666@172@666@559-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@15@01)
      (<
        $q1@15@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))))))
  (and
    (<= 0 $q1@15@01)
    (<
      $q1@15@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@15@01 Int)) (!
  (and
    (or (<= 0 $q1@15@01) (not (<= 0 $q1@15@01)))
    (=>
      (and
        (<= 0 $q1@15@01)
        (<
          $q1@15@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1)))))
      (and
        (<= 0 $q1@15@01)
        (<
          $q1@15@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))))
        (forall (($q2@16@01 Int)) (!
          (and
            (or (<= 0 $q2@16@01) (not (<= 0 $q2@16@01)))
            (=>
              (and
                (<= 0 $q2@16@01)
                (<
                  $q2@16@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
                      $q1@15@01))))
              (and
                (<= 0 $q2@16@01)
                (<
                  $q2@16@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
                      $q1@15@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
                        $q1@15@01)
                      $q2@16@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
                          $q1@15@01)
                        $q2@16@01))))))
            (or
              (not
                (and
                  (<= 0 $q2@16@01)
                  (<
                    $q2@16@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
                        $q1@15@01)))))
              (and
                (<= 0 $q2@16@01)
                (<
                  $q2@16@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
                      $q1@15@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
              $q1@15@01)
            $q2@16@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@666@172@666@559-aux|))))
    (or
      (not
        (and
          (<= 0 $q1@15@01)
          (<
            $q1@15@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))))))
      (and
        (<= 0 $q1@15@01)
        (<
          $q1@15@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
    $q1@15@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@666@11@666@560-aux|)))
(assert (forall (($q1@15@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@15@01)
      (<
        $q1@15@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1)))))
    (forall (($q2@16@01 Int)) (!
      (=>
        (and
          (<= 0 $q2@16@01)
          (<
            $q2@16@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
                $q1@15@01))))
        (and
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
                $q1@15@01)
              $q2@16@01))
          (<=
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
                $q1@15@01)
              $q2@16@01)
            170141183460469231731687303715884105727)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
          $q1@15@01)
        $q2@16@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@666@172@666@559|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@0@01 1))
    $q1@15@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@666@11@666@560|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])| == 2
(declare-const $t@17@01 $Snap)
(assert (= $t@17@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])| == 2
; [eval] |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$0, 2)
(assert (=
  (Seq_length
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2)))
  2))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])| ==>
;     |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $t@18@01 $Snap)
(assert (= $t@18@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $q3@19@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 10 | !(0 <= $q3@19@01) | live]
; [else-branch: 10 | 0 <= $q3@19@01 | live]
(push) ; 5
; [then-branch: 10 | !(0 <= $q3@19@01)]
(assert (not (<= 0 $q3@19@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 10 | 0 <= $q3@19@01]
(assert (<= 0 $q3@19@01))
; [eval] $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$0, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@19@01) (not (<= 0 $q3@19@01))))
(push) ; 4
; [then-branch: 11 | 0 <= $q3@19@01 && $q3@19@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))| | live]
; [else-branch: 11 | !(0 <= $q3@19@01 && $q3@19@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))|) | live]
(push) ; 5
; [then-branch: 11 | 0 <= $q3@19@01 && $q3@19@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))|]
(assert (and
  (<= 0 $q3@19@01)
  (<
    $q3@19@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))))))
; [eval] |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$0, 2)
(push) ; 6
(assert (not (>= $q3@19@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 11 | !(0 <= $q3@19@01 && $q3@19@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@19@01)
    (<
      $q3@19@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@19@01)
      (<
        $q3@19@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))))))
  (and
    (<= 0 $q3@19@01)
    (<
      $q3@19@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@19@01 Int)) (!
  (and
    (or (<= 0 $q3@19@01) (not (<= 0 $q3@19@01)))
    (or
      (not
        (and
          (<= 0 $q3@19@01)
          (<
            $q3@19@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))))))
      (and
        (<= 0 $q3@19@01)
        (<
          $q3@19@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
    $q3@19@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@668@11@668@251-aux|)))
(assert (forall (($q3@19@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@19@01)
      (<
        $q3@19@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
          $q3@19@01))
      2))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
    $q3@19@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@668@11@668@251|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 <
;       |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==
;       2))
(declare-const $t@20@01 $Snap)
(assert (= $t@20@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2))
(declare-const $q3@21@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 12 | !(0 <= $q3@21@01) | live]
; [else-branch: 12 | 0 <= $q3@21@01 | live]
(push) ; 5
; [then-branch: 12 | !(0 <= $q3@21@01)]
(assert (not (<= 0 $q3@21@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 12 | 0 <= $q3@21@01]
(assert (<= 0 $q3@21@01))
; [eval] $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$0, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@21@01) (not (<= 0 $q3@21@01))))
(push) ; 4
; [then-branch: 13 | 0 <= $q3@21@01 && $q3@21@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))| | live]
; [else-branch: 13 | !(0 <= $q3@21@01 && $q3@21@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))|) | live]
(push) ; 5
; [then-branch: 13 | 0 <= $q3@21@01 && $q3@21@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))|]
(assert (and
  (<= 0 $q3@21@01)
  (<
    $q3@21@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
(declare-const $q4@22@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 14 | !(0 <= $q4@22@01) | live]
; [else-branch: 14 | 0 <= $q4@22@01 | live]
(push) ; 8
; [then-branch: 14 | !(0 <= $q4@22@01)]
(assert (not (<= 0 $q4@22@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 14 | 0 <= $q4@22@01]
(assert (<= 0 $q4@22@01))
; [eval] $q4 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$0, 2)
(push) ; 9
(assert (not (>= $q3@21@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@22@01) (not (<= 0 $q4@22@01))))
(push) ; 7
; [then-branch: 15 | 0 <= $q4@22@01 && $q4@22@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))[$q3@21@01]| | live]
; [else-branch: 15 | !(0 <= $q4@22@01 && $q4@22@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))[$q3@21@01]|) | live]
(push) ; 8
; [then-branch: 15 | 0 <= $q4@22@01 && $q4@22@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))[$q3@21@01]|]
(assert (and
  (<= 0 $q4@22@01)
  (<
    $q4@22@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
        $q3@21@01)))))
; [eval] |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$0, 2)
(push) ; 9
(assert (not (>= $q3@21@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q4@22@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 15 | !(0 <= $q4@22@01 && $q4@22@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))[$q3@21@01]|)]
(assert (not
  (and
    (<= 0 $q4@22@01)
    (<
      $q4@22@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
          $q3@21@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@22@01)
      (<
        $q4@22@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
            $q3@21@01)))))
  (and
    (<= 0 $q4@22@01)
    (<
      $q4@22@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
          $q3@21@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@22@01 Int)) (!
  (and
    (or (<= 0 $q4@22@01) (not (<= 0 $q4@22@01)))
    (or
      (not
        (and
          (<= 0 $q4@22@01)
          (<
            $q4@22@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                $q3@21@01)))))
      (and
        (<= 0 $q4@22@01)
        (<
          $q4@22@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
              $q3@21@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
      $q3@21@01)
    $q4@22@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@669@182@669@437-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 13 | !(0 <= $q3@21@01 && $q3@21@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@21@01)
    (<
      $q3@21@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@21@01)
    (<
      $q3@21@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2)))))
  (and
    (<= 0 $q3@21@01)
    (<
      $q3@21@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))))
    (forall (($q4@22@01 Int)) (!
      (and
        (or (<= 0 $q4@22@01) (not (<= 0 $q4@22@01)))
        (or
          (not
            (and
              (<= 0 $q4@22@01)
              (<
                $q4@22@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                    $q3@21@01)))))
          (and
            (<= 0 $q4@22@01)
            (<
              $q4@22@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                  $q3@21@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
          $q3@21@01)
        $q4@22@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@669@182@669@437-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@21@01)
      (<
        $q3@21@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))))))
  (and
    (<= 0 $q3@21@01)
    (<
      $q3@21@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@21@01 Int)) (!
  (and
    (or (<= 0 $q3@21@01) (not (<= 0 $q3@21@01)))
    (=>
      (and
        (<= 0 $q3@21@01)
        (<
          $q3@21@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2)))))
      (and
        (<= 0 $q3@21@01)
        (<
          $q3@21@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))))
        (forall (($q4@22@01 Int)) (!
          (and
            (or (<= 0 $q4@22@01) (not (<= 0 $q4@22@01)))
            (or
              (not
                (and
                  (<= 0 $q4@22@01)
                  (<
                    $q4@22@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                        $q3@21@01)))))
              (and
                (<= 0 $q4@22@01)
                (<
                  $q4@22@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                      $q3@21@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
              $q3@21@01)
            $q4@22@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@669@182@669@437-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@21@01)
          (<
            $q3@21@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))))))
      (and
        (<= 0 $q3@21@01)
        (<
          $q3@21@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
    $q3@21@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@669@11@669@438-aux|)))
(assert (forall (($q3@21@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@21@01)
      (<
        $q3@21@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2)))))
    (forall (($q4@22@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@22@01)
          (<
            $q4@22@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                $q3@21@01))))
        (=
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                $q3@21@01)
              $q4@22@01))
          2))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
          $q3@21@01)
        $q4@22@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@669@182@669@437|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
    $q3@21@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@669@11@669@438|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 <
;       |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       (forall $q5: Int ::
;         { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] }
;         0 <= $q5 &&
;         $q5 <
;         |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==>
;         -170141183460469231731687303715884105728 <=
;         ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] &&
;         ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <=
;         170141183460469231731687303715884105727)))
(declare-const $t@23@01 $Snap)
(assert (= $t@23@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)))
(declare-const $q3@24@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 16 | !(0 <= $q3@24@01) | live]
; [else-branch: 16 | 0 <= $q3@24@01 | live]
(push) ; 5
; [then-branch: 16 | !(0 <= $q3@24@01)]
(assert (not (<= 0 $q3@24@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 16 | 0 <= $q3@24@01]
(assert (<= 0 $q3@24@01))
; [eval] $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$0, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@24@01) (not (<= 0 $q3@24@01))))
(push) ; 4
; [then-branch: 17 | 0 <= $q3@24@01 && $q3@24@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))| | live]
; [else-branch: 17 | !(0 <= $q3@24@01 && $q3@24@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))|) | live]
(push) ; 5
; [then-branch: 17 | 0 <= $q3@24@01 && $q3@24@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))|]
(assert (and
  (<= 0 $q3@24@01)
  (<
    $q3@24@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
(declare-const $q4@25@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 18 | !(0 <= $q4@25@01) | live]
; [else-branch: 18 | 0 <= $q4@25@01 | live]
(push) ; 8
; [then-branch: 18 | !(0 <= $q4@25@01)]
(assert (not (<= 0 $q4@25@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 18 | 0 <= $q4@25@01]
(assert (<= 0 $q4@25@01))
; [eval] $q4 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$0, 2)
(push) ; 9
(assert (not (>= $q3@24@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@25@01) (not (<= 0 $q4@25@01))))
(push) ; 7
; [then-branch: 19 | 0 <= $q4@25@01 && $q4@25@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))[$q3@24@01]| | live]
; [else-branch: 19 | !(0 <= $q4@25@01 && $q4@25@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))[$q3@24@01]|) | live]
(push) ; 8
; [then-branch: 19 | 0 <= $q4@25@01 && $q4@25@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))[$q3@24@01]|]
(assert (and
  (<= 0 $q4@25@01)
  (<
    $q4@25@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
        $q3@24@01)))))
; [eval] (forall $q5: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
(declare-const $q5@26@01 Int)
(push) ; 9
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] 0 <= $q5
(push) ; 10
; [then-branch: 20 | !(0 <= $q5@26@01) | live]
; [else-branch: 20 | 0 <= $q5@26@01 | live]
(push) ; 11
; [then-branch: 20 | !(0 <= $q5@26@01)]
(assert (not (<= 0 $q5@26@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 20 | 0 <= $q5@26@01]
(assert (<= 0 $q5@26@01))
; [eval] $q5 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$0, 2)
(push) ; 12
(assert (not (>= $q3@24@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@25@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q5@26@01) (not (<= 0 $q5@26@01))))
(push) ; 10
; [then-branch: 21 | 0 <= $q5@26@01 && $q5@26@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))[$q3@24@01][$q4@25@01]| | live]
; [else-branch: 21 | !(0 <= $q5@26@01 && $q5@26@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))[$q3@24@01][$q4@25@01]|) | live]
(push) ; 11
; [then-branch: 21 | 0 <= $q5@26@01 && $q5@26@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))[$q3@24@01][$q4@25@01]|]
(assert (and
  (<= 0 $q5@26@01)
  (<
    $q5@26@01
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
          $q3@24@01)
        $q4@25@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$0, 2)
(push) ; 12
(assert (not (>= $q3@24@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@25@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q5@26@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 22 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))[$q3@24@01][$q4@25@01][$q5@26@01]) | live]
; [else-branch: 22 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))[$q3@24@01][$q4@25@01][$q5@26@01] | live]
(push) ; 13
; [then-branch: 22 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))[$q3@24@01][$q4@25@01][$q5@26@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
          $q3@24@01)
        $q4@25@01)
      $q5@26@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 22 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))[$q3@24@01][$q4@25@01][$q5@26@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
        $q3@24@01)
      $q4@25@01)
    $q5@26@01)))
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$0, 2)
(push) ; 14
(assert (not (>= $q3@24@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q4@25@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q5@26@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
          $q3@24@01)
        $q4@25@01)
      $q5@26@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
            $q3@24@01)
          $q4@25@01)
        $q5@26@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 21 | !(0 <= $q5@26@01 && $q5@26@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))[$q3@24@01][$q4@25@01]|)]
(assert (not
  (and
    (<= 0 $q5@26@01)
    (<
      $q5@26@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
            $q3@24@01)
          $q4@25@01))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q5@26@01)
    (<
      $q5@26@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
            $q3@24@01)
          $q4@25@01))))
  (and
    (<= 0 $q5@26@01)
    (<
      $q5@26@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
            $q3@24@01)
          $q4@25@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
              $q3@24@01)
            $q4@25@01)
          $q5@26@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                $q3@24@01)
              $q4@25@01)
            $q5@26@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q5@26@01)
      (<
        $q5@26@01
        (Seq_length
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
              $q3@24@01)
            $q4@25@01)))))
  (and
    (<= 0 $q5@26@01)
    (<
      $q5@26@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
            $q3@24@01)
          $q4@25@01))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@26@01 Int)) (!
  (and
    (or (<= 0 $q5@26@01) (not (<= 0 $q5@26@01)))
    (=>
      (and
        (<= 0 $q5@26@01)
        (<
          $q5@26@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                $q3@24@01)
              $q4@25@01))))
      (and
        (<= 0 $q5@26@01)
        (<
          $q5@26@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                $q3@24@01)
              $q4@25@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                  $q3@24@01)
                $q4@25@01)
              $q5@26@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                    $q3@24@01)
                  $q4@25@01)
                $q5@26@01))))))
    (or
      (not
        (and
          (<= 0 $q5@26@01)
          (<
            $q5@26@01
            (Seq_length
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                  $q3@24@01)
                $q4@25@01)))))
      (and
        (<= 0 $q5@26@01)
        (<
          $q5@26@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                $q3@24@01)
              $q4@25@01))))))
  :pattern ((Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
        $q3@24@01)
      $q4@25@01)
    $q5@26@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@670@363@670@790-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 19 | !(0 <= $q4@25@01 && $q4@25@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))[$q3@24@01]|)]
(assert (not
  (and
    (<= 0 $q4@25@01)
    (<
      $q4@25@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
          $q3@24@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q4@25@01)
    (<
      $q4@25@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
          $q3@24@01))))
  (and
    (<= 0 $q4@25@01)
    (<
      $q4@25@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
          $q3@24@01)))
    (forall (($q5@26@01 Int)) (!
      (and
        (or (<= 0 $q5@26@01) (not (<= 0 $q5@26@01)))
        (=>
          (and
            (<= 0 $q5@26@01)
            (<
              $q5@26@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                    $q3@24@01)
                  $q4@25@01))))
          (and
            (<= 0 $q5@26@01)
            (<
              $q5@26@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                    $q3@24@01)
                  $q4@25@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                      $q3@24@01)
                    $q4@25@01)
                  $q5@26@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                        $q3@24@01)
                      $q4@25@01)
                    $q5@26@01))))))
        (or
          (not
            (and
              (<= 0 $q5@26@01)
              (<
                $q5@26@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                      $q3@24@01)
                    $q4@25@01)))))
          (and
            (<= 0 $q5@26@01)
            (<
              $q5@26@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                    $q3@24@01)
                  $q4@25@01))))))
      :pattern ((Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
            $q3@24@01)
          $q4@25@01)
        $q5@26@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@670@363@670@790-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@25@01)
      (<
        $q4@25@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
            $q3@24@01)))))
  (and
    (<= 0 $q4@25@01)
    (<
      $q4@25@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
          $q3@24@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@25@01 Int)) (!
  (and
    (or (<= 0 $q4@25@01) (not (<= 0 $q4@25@01)))
    (=>
      (and
        (<= 0 $q4@25@01)
        (<
          $q4@25@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
              $q3@24@01))))
      (and
        (<= 0 $q4@25@01)
        (<
          $q4@25@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
              $q3@24@01)))
        (forall (($q5@26@01 Int)) (!
          (and
            (or (<= 0 $q5@26@01) (not (<= 0 $q5@26@01)))
            (=>
              (and
                (<= 0 $q5@26@01)
                (<
                  $q5@26@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                        $q3@24@01)
                      $q4@25@01))))
              (and
                (<= 0 $q5@26@01)
                (<
                  $q5@26@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                        $q3@24@01)
                      $q4@25@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                          $q3@24@01)
                        $q4@25@01)
                      $q5@26@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                            $q3@24@01)
                          $q4@25@01)
                        $q5@26@01))))))
            (or
              (not
                (and
                  (<= 0 $q5@26@01)
                  (<
                    $q5@26@01
                    (Seq_length
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                          $q3@24@01)
                        $q4@25@01)))))
              (and
                (<= 0 $q5@26@01)
                (<
                  $q5@26@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                        $q3@24@01)
                      $q4@25@01))))))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                $q3@24@01)
              $q4@25@01)
            $q5@26@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@670@363@670@790-aux|))))
    (or
      (not
        (and
          (<= 0 $q4@25@01)
          (<
            $q4@25@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                $q3@24@01)))))
      (and
        (<= 0 $q4@25@01)
        (<
          $q4@25@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
              $q3@24@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
      $q3@24@01)
    $q4@25@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@670@182@670@791-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 17 | !(0 <= $q3@24@01 && $q3@24@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@0@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@24@01)
    (<
      $q3@24@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@24@01)
    (<
      $q3@24@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2)))))
  (and
    (<= 0 $q3@24@01)
    (<
      $q3@24@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))))
    (forall (($q4@25@01 Int)) (!
      (and
        (or (<= 0 $q4@25@01) (not (<= 0 $q4@25@01)))
        (=>
          (and
            (<= 0 $q4@25@01)
            (<
              $q4@25@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                  $q3@24@01))))
          (and
            (<= 0 $q4@25@01)
            (<
              $q4@25@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                  $q3@24@01)))
            (forall (($q5@26@01 Int)) (!
              (and
                (or (<= 0 $q5@26@01) (not (<= 0 $q5@26@01)))
                (=>
                  (and
                    (<= 0 $q5@26@01)
                    (<
                      $q5@26@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                            $q3@24@01)
                          $q4@25@01))))
                  (and
                    (<= 0 $q5@26@01)
                    (<
                      $q5@26@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                            $q3@24@01)
                          $q4@25@01)))
                    (or
                      (<=
                        (- 0 170141183460469231731687303715884105728)
                        (Seq_index
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                              $q3@24@01)
                            $q4@25@01)
                          $q5@26@01))
                      (not
                        (<=
                          (- 0 170141183460469231731687303715884105728)
                          (Seq_index
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                                $q3@24@01)
                              $q4@25@01)
                            $q5@26@01))))))
                (or
                  (not
                    (and
                      (<= 0 $q5@26@01)
                      (<
                        $q5@26@01
                        (Seq_length
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                              $q3@24@01)
                            $q4@25@01)))))
                  (and
                    (<= 0 $q5@26@01)
                    (<
                      $q5@26@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                            $q3@24@01)
                          $q4@25@01))))))
              :pattern ((Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                    $q3@24@01)
                  $q4@25@01)
                $q5@26@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@670@363@670@790-aux|))))
        (or
          (not
            (and
              (<= 0 $q4@25@01)
              (<
                $q4@25@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                    $q3@24@01)))))
          (and
            (<= 0 $q4@25@01)
            (<
              $q4@25@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                  $q3@24@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
          $q3@24@01)
        $q4@25@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@670@182@670@791-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@24@01)
      (<
        $q3@24@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))))))
  (and
    (<= 0 $q3@24@01)
    (<
      $q3@24@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@24@01 Int)) (!
  (and
    (or (<= 0 $q3@24@01) (not (<= 0 $q3@24@01)))
    (=>
      (and
        (<= 0 $q3@24@01)
        (<
          $q3@24@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2)))))
      (and
        (<= 0 $q3@24@01)
        (<
          $q3@24@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))))
        (forall (($q4@25@01 Int)) (!
          (and
            (or (<= 0 $q4@25@01) (not (<= 0 $q4@25@01)))
            (=>
              (and
                (<= 0 $q4@25@01)
                (<
                  $q4@25@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                      $q3@24@01))))
              (and
                (<= 0 $q4@25@01)
                (<
                  $q4@25@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                      $q3@24@01)))
                (forall (($q5@26@01 Int)) (!
                  (and
                    (or (<= 0 $q5@26@01) (not (<= 0 $q5@26@01)))
                    (=>
                      (and
                        (<= 0 $q5@26@01)
                        (<
                          $q5@26@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                                $q3@24@01)
                              $q4@25@01))))
                      (and
                        (<= 0 $q5@26@01)
                        (<
                          $q5@26@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                                $q3@24@01)
                              $q4@25@01)))
                        (or
                          (<=
                            (- 0 170141183460469231731687303715884105728)
                            (Seq_index
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                                  $q3@24@01)
                                $q4@25@01)
                              $q5@26@01))
                          (not
                            (<=
                              (- 0 170141183460469231731687303715884105728)
                              (Seq_index
                                (Seq_index
                                  (Seq_index
                                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                                    $q3@24@01)
                                  $q4@25@01)
                                $q5@26@01))))))
                    (or
                      (not
                        (and
                          (<= 0 $q5@26@01)
                          (<
                            $q5@26@01
                            (Seq_length
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                                  $q3@24@01)
                                $q4@25@01)))))
                      (and
                        (<= 0 $q5@26@01)
                        (<
                          $q5@26@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                                $q3@24@01)
                              $q4@25@01))))))
                  :pattern ((Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                        $q3@24@01)
                      $q4@25@01)
                    $q5@26@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@670@363@670@790-aux|))))
            (or
              (not
                (and
                  (<= 0 $q4@25@01)
                  (<
                    $q4@25@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                        $q3@24@01)))))
              (and
                (<= 0 $q4@25@01)
                (<
                  $q4@25@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                      $q3@24@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
              $q3@24@01)
            $q4@25@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@670@182@670@791-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@24@01)
          (<
            $q3@24@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))))))
      (and
        (<= 0 $q3@24@01)
        (<
          $q3@24@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
    $q3@24@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@670@11@670@792-aux|)))
(assert (forall (($q3@24@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@24@01)
      (<
        $q3@24@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2)))))
    (forall (($q4@25@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@25@01)
          (<
            $q4@25@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                $q3@24@01))))
        (forall (($q5@26@01 Int)) (!
          (=>
            (and
              (<= 0 $q5@26@01)
              (<
                $q5@26@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                      $q3@24@01)
                    $q4@25@01))))
            (and
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                      $q3@24@01)
                    $q4@25@01)
                  $q5@26@01))
              (<=
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                      $q3@24@01)
                    $q4@25@01)
                  $q5@26@01)
                170141183460469231731687303715884105727)))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
                $q3@24@01)
              $q4@25@01)
            $q5@26@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@670@363@670@790|)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
          $q3@24@01)
        $q4@25@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@670@182@670@791|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@0@01 2))
    $q3@24@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@670@11@670@792|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$0, 3)): Seq[Int])| == 1000
(declare-const $t@27@01 $Snap)
(assert (= $t@27@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$0, 3)): Seq[Int])| == 1000
; [eval] |($struct_get($struct_loc($self$0, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$0, 3)): Seq[Int])
; [eval] $struct_loc($self$0, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3))) 1000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6] }
;     0 <= $q6 && $q6 < |($struct_get($struct_loc($self$0, 3)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6] &&
;     ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6] <=
;     170141183460469231731687303715884105727)
(declare-const $t@28@01 $Snap)
(assert (= $t@28@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6] } 0 <= $q6 && $q6 < |($struct_get($struct_loc($self$0, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727)
(declare-const $q6@29@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc($self$0, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc($self$0, 3)): Seq[Int])|
; [eval] 0 <= $q6
(push) ; 4
; [then-branch: 23 | !(0 <= $q6@29@01) | live]
; [else-branch: 23 | 0 <= $q6@29@01 | live]
(push) ; 5
; [then-branch: 23 | !(0 <= $q6@29@01)]
(assert (not (<= 0 $q6@29@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 23 | 0 <= $q6@29@01]
(assert (<= 0 $q6@29@01))
; [eval] $q6 < |($struct_get($struct_loc($self$0, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc($self$0, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$0, 3)): Seq[Int])
; [eval] $struct_loc($self$0, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q6@29@01) (not (<= 0 $q6@29@01))))
(push) ; 4
; [then-branch: 24 | 0 <= $q6@29@01 && $q6@29@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$0@0@01, 3))| | live]
; [else-branch: 24 | !(0 <= $q6@29@01 && $q6@29@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$0@0@01, 3))|) | live]
(push) ; 5
; [then-branch: 24 | 0 <= $q6@29@01 && $q6@29@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$0@0@01, 3))|]
(assert (and
  (<= 0 $q6@29@01)
  (<
    $q6@29@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc($self$0, 3)): Seq[Int])
; [eval] $struct_loc($self$0, 3)
(push) ; 6
(assert (not (>= $q6@29@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 25 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$0@0@01, 3))[$q6@29@01]) | live]
; [else-branch: 25 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$0@0@01, 3))[$q6@29@01] | live]
(push) ; 7
; [then-branch: 25 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$0@0@01, 3))[$q6@29@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3))
      $q6@29@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 25 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$0@0@01, 3))[$q6@29@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3)) $q6@29@01)))
; [eval] ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc($self$0, 3)): Seq[Int])
; [eval] $struct_loc($self$0, 3)
(push) ; 8
(assert (not (>= $q6@29@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3))
      $q6@29@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3))
        $q6@29@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 24 | !(0 <= $q6@29@01 && $q6@29@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$0@0@01, 3))|)]
(assert (not
  (and
    (<= 0 $q6@29@01)
    (<
      $q6@29@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q6@29@01)
    (<
      $q6@29@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3)))))
  (and
    (<= 0 $q6@29@01)
    (<
      $q6@29@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3))
          $q6@29@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3))
            $q6@29@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q6@29@01)
      (<
        $q6@29@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3))))))
  (and
    (<= 0 $q6@29@01)
    (<
      $q6@29@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@29@01 Int)) (!
  (and
    (or (<= 0 $q6@29@01) (not (<= 0 $q6@29@01)))
    (=>
      (and
        (<= 0 $q6@29@01)
        (<
          $q6@29@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3)))))
      (and
        (<= 0 $q6@29@01)
        (<
          $q6@29@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3))
              $q6@29@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3))
                $q6@29@01))))))
    (or
      (not
        (and
          (<= 0 $q6@29@01)
          (<
            $q6@29@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3))))))
      (and
        (<= 0 $q6@29@01)
        (<
          $q6@29@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3))
    $q6@29@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@672@11@672@358-aux|)))
(assert (forall (($q6@29@01 Int)) (!
  (=>
    (and
      (<= 0 $q6@29@01)
      (<
        $q6@29@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3))
          $q6@29@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3))
          $q6@29@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3))
    $q6@29@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@672@11@672@358|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]),
;     $q7): Seq[Int]) }
;     |($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]),
;     $q7): Seq[Int])| ==
;     10)
(declare-const $t@30@01 $Snap)
(assert (= $t@30@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } |($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10)
(declare-const $q7@31@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10
; [eval] |($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc($self$0, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@31@01 Int)) (!
  (=
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@31@01))
    10)
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@31@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@673@11@673@215|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]),
;     $q7): Seq[Int]) }
;     (forall $q8: Int ::
;       { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] }
;       0 <= $q8 &&
;       $q8 <
;       |($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])| ==>
;       -170141183460469231731687303715884105728 <=
;       ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] &&
;       ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] <=
;       170141183460469231731687303715884105727))
(declare-const $t@32@01 $Snap)
(assert (= $t@32@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } (forall $q8: Int :: { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727))
(declare-const $q7@33@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q8: Int :: { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727)
(declare-const $q8@34@01 Int)
(push) ; 4
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] 0 <= $q8
(push) ; 5
; [then-branch: 26 | !(0 <= $q8@34@01) | live]
; [else-branch: 26 | 0 <= $q8@34@01 | live]
(push) ; 6
; [then-branch: 26 | !(0 <= $q8@34@01)]
(assert (not (<= 0 $q8@34@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 26 | 0 <= $q8@34@01]
(assert (<= 0 $q8@34@01))
; [eval] $q8 < |($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc($self$0, 4)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q8@34@01) (not (<= 0 $q8@34@01))))
(push) ; 5
; [then-branch: 27 | 0 <= $q8@34@01 && $q8@34@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$0@0@01, 4)), $q7@33@01)| | live]
; [else-branch: 27 | !(0 <= $q8@34@01 && $q8@34@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$0@0@01, 4)), $q7@33@01)|) | live]
(push) ; 6
; [then-branch: 27 | 0 <= $q8@34@01 && $q8@34@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$0@0@01, 4)), $q7@33@01)|]
(assert (and
  (<= 0 $q8@34@01)
  (<
    $q8@34@01
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] -170141183460469231731687303715884105728
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc($self$0, 4)
(push) ; 7
(assert (not (>= $q8@34@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 28 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$0@0@01, 4)), $q7@33@01)[$q8@34@01]) | live]
; [else-branch: 28 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$0@0@01, 4)), $q7@33@01)[$q8@34@01] | live]
(push) ; 8
; [then-branch: 28 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$0@0@01, 4)), $q7@33@01)[$q8@34@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01)
      $q8@34@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 28 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$0@0@01, 4)), $q7@33@01)[$q8@34@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01)
    $q8@34@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc($self$0, 4)
(push) ; 9
(assert (not (>= $q8@34@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01)
      $q8@34@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01)
        $q8@34@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 27 | !(0 <= $q8@34@01 && $q8@34@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$0@0@01, 4)), $q7@33@01)|)]
(assert (not
  (and
    (<= 0 $q8@34@01)
    (<
      $q8@34@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q8@34@01)
    (<
      $q8@34@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01))))
  (and
    (<= 0 $q8@34@01)
    (<
      $q8@34@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01)
          $q8@34@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01)
            $q8@34@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q8@34@01)
      (<
        $q8@34@01
        (Seq_length
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01)))))
  (and
    (<= 0 $q8@34@01)
    (<
      $q8@34@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q8@34@01 Int)) (!
  (and
    (or (<= 0 $q8@34@01) (not (<= 0 $q8@34@01)))
    (=>
      (and
        (<= 0 $q8@34@01)
        (<
          $q8@34@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01))))
      (and
        (<= 0 $q8@34@01)
        (<
          $q8@34@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01)
              $q8@34@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01)
                $q8@34@01))))))
    (or
      (not
        (and
          (<= 0 $q8@34@01)
          (<
            $q8@34@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01)))))
      (and
        (<= 0 $q8@34@01)
        (<
          $q8@34@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01))))))
  :pattern ((Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01)
    $q8@34@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@674@122@674@621-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@33@01 Int)) (!
  (forall (($q8@34@01 Int)) (!
    (and
      (or (<= 0 $q8@34@01) (not (<= 0 $q8@34@01)))
      (=>
        (and
          (<= 0 $q8@34@01)
          (<
            $q8@34@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01))))
        (and
          (<= 0 $q8@34@01)
          (<
            $q8@34@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01)))
          (or
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01)
                $q8@34@01))
            (not
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01)
                  $q8@34@01))))))
      (or
        (not
          (and
            (<= 0 $q8@34@01)
            (<
              $q8@34@01
              (Seq_length
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01)))))
        (and
          (<= 0 $q8@34@01)
          (<
            $q8@34@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01))))))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01)
      $q8@34@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@674@122@674@621-aux|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@674@11@674@622-aux|)))
(assert (forall (($q7@33@01 Int)) (!
  (forall (($q8@34@01 Int)) (!
    (=>
      (and
        (<= 0 $q8@34@01)
        (<
          $q8@34@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01))))
      (and
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01)
            $q8@34@01))
        (<=
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01)
            $q8@34@01)
          170141183460469231731687303715884105727)))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01)
      $q8@34@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@674@122@674@621|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@0@01 4)) $q7@33@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@674@11@674@622|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 5)): Int) &&
;   ($struct_get($struct_loc($self$0, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@35@01 $Snap)
(assert (= $t@35@01 ($Snap.combine ($Snap.first $t@35@01) ($Snap.second $t@35@01))))
(assert (= ($Snap.first $t@35@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 5))))
(assert (= ($Snap.second $t@35@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$0, 6)): Int) &&
;   ($struct_get($struct_loc($self$0, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@36@01 $Snap)
(assert (= $t@36@01 ($Snap.combine ($Snap.first $t@36@01) ($Snap.second $t@36@01))))
(assert (= ($Snap.first $t@36@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 6)): Int)
; [eval] $struct_loc($self$0, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 6))))
(assert (= ($Snap.second $t@36@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 6)): Int)
; [eval] $struct_loc($self$0, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@37@01 $Snap)
(assert (= $t@37@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q9@38@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(push) ; 4
; [then-branch: 29 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q9@38@01)) | live]
; [else-branch: 29 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q9@38@01) | live]
(push) ; 5
; [then-branch: 29 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q9@38@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q9@38@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 29 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 8)), $q9@38@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q9@38@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q9@38@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q9@38@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@38@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q9@38@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q9@38@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q9@38@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@677@11@677@354-aux|)))
(assert (forall (($q9@38@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q9@38@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q9@38@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q9@38@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@677@11@677@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $t@39@01 $Snap)
(assert (= $t@39@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) } ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $q9@40@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@40@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q9@40@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $q9@40@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@678@11@678@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@41@01 $Snap)
(assert (= $t@41@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q10@42@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
(push) ; 4
; [then-branch: 30 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 9)), $q10@42@01)) | live]
; [else-branch: 30 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 9)), $q10@42@01) | live]
(push) ; 5
; [then-branch: 30 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 9)), $q10@42@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q10@42@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 30 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@0@01, 9)), $q10@42@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q10@42@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q10@42@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q10@42@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@42@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q10@42@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q10@42@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q10@42@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@679@11@679@358-aux|)))
(assert (forall (($q10@42@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q10@42@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q10@42@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q10@42@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@679@11@679@358|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])): Int))
(declare-const $t@43@01 $Snap)
(assert (= $t@43@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) } ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])): Int))
(declare-const $q10@44@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@44@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q10@44@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 9)) $q10@44@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@680@11@680@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@45@01 $Snap)
(assert (= $t@45@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$0, -1)): Int)
; [eval] $struct_loc($self$0, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$0@0@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$1, 0)): Seq[Int])| == 12
(declare-const $t@46@01 $Snap)
(assert (= $t@46@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$1, 0)): Seq[Int])| == 12
; [eval] |($struct_get($struct_loc($self$1, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$1, 0)): Seq[Int])
; [eval] $struct_loc($self$1, 0)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 0))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0] }
;     0 <= $q0 && $q0 < |($struct_get($struct_loc($self$1, 0)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0] &&
;     ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0] <=
;     170141183460469231731687303715884105727)
(declare-const $t@47@01 $Snap)
(assert (= $t@47@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0] } 0 <= $q0 && $q0 < |($struct_get($struct_loc($self$1, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@48@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc($self$1, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc($self$1, 0)): Seq[Int])|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 31 | !(0 <= $q0@48@01) | live]
; [else-branch: 31 | 0 <= $q0@48@01 | live]
(push) ; 5
; [then-branch: 31 | !(0 <= $q0@48@01)]
(assert (not (<= 0 $q0@48@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 31 | 0 <= $q0@48@01]
(assert (<= 0 $q0@48@01))
; [eval] $q0 < |($struct_get($struct_loc($self$1, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc($self$1, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$1, 0)): Seq[Int])
; [eval] $struct_loc($self$1, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@48@01) (not (<= 0 $q0@48@01))))
(push) ; 4
; [then-branch: 32 | 0 <= $q0@48@01 && $q0@48@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$1@2@01, 0))| | live]
; [else-branch: 32 | !(0 <= $q0@48@01 && $q0@48@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$1@2@01, 0))|) | live]
(push) ; 5
; [then-branch: 32 | 0 <= $q0@48@01 && $q0@48@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$1@2@01, 0))|]
(assert (and
  (<= 0 $q0@48@01)
  (<
    $q0@48@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 0))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc($self$1, 0)): Seq[Int])
; [eval] $struct_loc($self$1, 0)
(push) ; 6
(assert (not (>= $q0@48@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 33 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$1@2@01, 0))[$q0@48@01]) | live]
; [else-branch: 33 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$1@2@01, 0))[$q0@48@01] | live]
(push) ; 7
; [then-branch: 33 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$1@2@01, 0))[$q0@48@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 0))
      $q0@48@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 33 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$1@2@01, 0))[$q0@48@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 0)) $q0@48@01)))
; [eval] ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc($self$1, 0)): Seq[Int])
; [eval] $struct_loc($self$1, 0)
(push) ; 8
(assert (not (>= $q0@48@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 0))
      $q0@48@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 0))
        $q0@48@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 32 | !(0 <= $q0@48@01 && $q0@48@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$1@2@01, 0))|)]
(assert (not
  (and
    (<= 0 $q0@48@01)
    (<
      $q0@48@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 0)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q0@48@01)
    (<
      $q0@48@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 0)))))
  (and
    (<= 0 $q0@48@01)
    (<
      $q0@48@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 0))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 0))
          $q0@48@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 0))
            $q0@48@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q0@48@01)
      (<
        $q0@48@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 0))))))
  (and
    (<= 0 $q0@48@01)
    (<
      $q0@48@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 0)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@48@01 Int)) (!
  (and
    (or (<= 0 $q0@48@01) (not (<= 0 $q0@48@01)))
    (=>
      (and
        (<= 0 $q0@48@01)
        (<
          $q0@48@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 0)))))
      (and
        (<= 0 $q0@48@01)
        (<
          $q0@48@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 0))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 0))
              $q0@48@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 0))
                $q0@48@01))))))
    (or
      (not
        (and
          (<= 0 $q0@48@01)
          (<
            $q0@48@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 0))))))
      (and
        (<= 0 $q0@48@01)
        (<
          $q0@48@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 0)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 0))
    $q0@48@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@683@11@683@358-aux|)))
(assert (forall (($q0@48@01 Int)) (!
  (=>
    (and
      (<= 0 $q0@48@01)
      (<
        $q0@48@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 0)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 0))
          $q0@48@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 0))
          $q0@48@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 0))
    $q0@48@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@683@11@683@358|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])| == 12
(declare-const $t@49@01 $Snap)
(assert (= $t@49@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])| == 12
; [eval] |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$1, 1)
(assert (=
  (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1)))
  12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 &&
;     $q1 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])| ==>
;     |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $t@50@01 $Snap)
(assert (= $t@50@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $q1@51@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 34 | !(0 <= $q1@51@01) | live]
; [else-branch: 34 | 0 <= $q1@51@01 | live]
(push) ; 5
; [then-branch: 34 | !(0 <= $q1@51@01)]
(assert (not (<= 0 $q1@51@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 34 | 0 <= $q1@51@01]
(assert (<= 0 $q1@51@01))
; [eval] $q1 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$1, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@51@01) (not (<= 0 $q1@51@01))))
(push) ; 4
; [then-branch: 35 | 0 <= $q1@51@01 && $q1@51@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@2@01, 1))| | live]
; [else-branch: 35 | !(0 <= $q1@51@01 && $q1@51@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@2@01, 1))|) | live]
(push) ; 5
; [then-branch: 35 | 0 <= $q1@51@01 && $q1@51@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@2@01, 1))|]
(assert (and
  (<= 0 $q1@51@01)
  (<
    $q1@51@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))))))
; [eval] |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$1, 1)
(push) ; 6
(assert (not (>= $q1@51@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 35 | !(0 <= $q1@51@01 && $q1@51@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@2@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@51@01)
    (<
      $q1@51@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@51@01)
      (<
        $q1@51@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))))))
  (and
    (<= 0 $q1@51@01)
    (<
      $q1@51@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@51@01 Int)) (!
  (and
    (or (<= 0 $q1@51@01) (not (<= 0 $q1@51@01)))
    (or
      (not
        (and
          (<= 0 $q1@51@01)
          (<
            $q1@51@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))))))
      (and
        (<= 0 $q1@51@01)
        (<
          $q1@51@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
    $q1@51@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@685@11@685@237-aux|)))
(assert (forall (($q1@51@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@51@01)
      (<
        $q1@51@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
          $q1@51@01))
      12))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
    $q1@51@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@685@11@685@237|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 &&
;     $q1 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])| ==>
;     (forall $q2: Int ::
;       { ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] }
;       0 <= $q2 &&
;       $q2 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]| ==>
;       -170141183460469231731687303715884105728 <=
;       ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] &&
;       ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] <=
;       170141183460469231731687303715884105727))
(declare-const $t@52@01 $Snap)
(assert (= $t@52@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727))
(declare-const $q1@53@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 36 | !(0 <= $q1@53@01) | live]
; [else-branch: 36 | 0 <= $q1@53@01 | live]
(push) ; 5
; [then-branch: 36 | !(0 <= $q1@53@01)]
(assert (not (<= 0 $q1@53@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 36 | 0 <= $q1@53@01]
(assert (<= 0 $q1@53@01))
; [eval] $q1 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$1, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@53@01) (not (<= 0 $q1@53@01))))
(push) ; 4
; [then-branch: 37 | 0 <= $q1@53@01 && $q1@53@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@2@01, 1))| | live]
; [else-branch: 37 | !(0 <= $q1@53@01 && $q1@53@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@2@01, 1))|) | live]
(push) ; 5
; [then-branch: 37 | 0 <= $q1@53@01 && $q1@53@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@2@01, 1))|]
(assert (and
  (<= 0 $q1@53@01)
  (<
    $q1@53@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))))))
; [eval] (forall $q2: Int :: { ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
(declare-const $q2@54@01 Int)
(push) ; 6
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]|
; [eval] 0 <= $q2
(push) ; 7
; [then-branch: 38 | !(0 <= $q2@54@01) | live]
; [else-branch: 38 | 0 <= $q2@54@01 | live]
(push) ; 8
; [then-branch: 38 | !(0 <= $q2@54@01)]
(assert (not (<= 0 $q2@54@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 38 | 0 <= $q2@54@01]
(assert (<= 0 $q2@54@01))
; [eval] $q2 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]|
; [eval] |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$1, 1)
(push) ; 9
(assert (not (>= $q1@53@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q2@54@01) (not (<= 0 $q2@54@01))))
(push) ; 7
; [then-branch: 39 | 0 <= $q2@54@01 && $q2@54@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@2@01, 1))[$q1@53@01]| | live]
; [else-branch: 39 | !(0 <= $q2@54@01 && $q2@54@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@2@01, 1))[$q1@53@01]|) | live]
(push) ; 8
; [then-branch: 39 | 0 <= $q2@54@01 && $q2@54@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@2@01, 1))[$q1@53@01]|]
(assert (and
  (<= 0 $q2@54@01)
  (<
    $q2@54@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
        $q1@53@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$1, 1)
(push) ; 9
(assert (not (>= $q1@53@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q2@54@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 40 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@2@01, 1))[$q1@53@01][$q2@54@01]) | live]
; [else-branch: 40 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@2@01, 1))[$q1@53@01][$q2@54@01] | live]
(push) ; 10
; [then-branch: 40 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@2@01, 1))[$q1@53@01][$q2@54@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
        $q1@53@01)
      $q2@54@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 40 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@2@01, 1))[$q1@53@01][$q2@54@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
      $q1@53@01)
    $q2@54@01)))
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$1, 1)
(push) ; 11
(assert (not (>= $q1@53@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= $q2@54@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
        $q1@53@01)
      $q2@54@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
          $q1@53@01)
        $q2@54@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 39 | !(0 <= $q2@54@01 && $q2@54@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@2@01, 1))[$q1@53@01]|)]
(assert (not
  (and
    (<= 0 $q2@54@01)
    (<
      $q2@54@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
          $q1@53@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q2@54@01)
    (<
      $q2@54@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
          $q1@53@01))))
  (and
    (<= 0 $q2@54@01)
    (<
      $q2@54@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
          $q1@53@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
            $q1@53@01)
          $q2@54@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
              $q1@53@01)
            $q2@54@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q2@54@01)
      (<
        $q2@54@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
            $q1@53@01)))))
  (and
    (<= 0 $q2@54@01)
    (<
      $q2@54@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
          $q1@53@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@54@01 Int)) (!
  (and
    (or (<= 0 $q2@54@01) (not (<= 0 $q2@54@01)))
    (=>
      (and
        (<= 0 $q2@54@01)
        (<
          $q2@54@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
              $q1@53@01))))
      (and
        (<= 0 $q2@54@01)
        (<
          $q2@54@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
              $q1@53@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
                $q1@53@01)
              $q2@54@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
                  $q1@53@01)
                $q2@54@01))))))
    (or
      (not
        (and
          (<= 0 $q2@54@01)
          (<
            $q2@54@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
                $q1@53@01)))))
      (and
        (<= 0 $q2@54@01)
        (<
          $q2@54@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
              $q1@53@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
      $q1@53@01)
    $q2@54@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@686@172@686@559-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 37 | !(0 <= $q1@53@01 && $q1@53@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@2@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@53@01)
    (<
      $q1@53@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q1@53@01)
    (<
      $q1@53@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1)))))
  (and
    (<= 0 $q1@53@01)
    (<
      $q1@53@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))))
    (forall (($q2@54@01 Int)) (!
      (and
        (or (<= 0 $q2@54@01) (not (<= 0 $q2@54@01)))
        (=>
          (and
            (<= 0 $q2@54@01)
            (<
              $q2@54@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
                  $q1@53@01))))
          (and
            (<= 0 $q2@54@01)
            (<
              $q2@54@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
                  $q1@53@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
                    $q1@53@01)
                  $q2@54@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
                      $q1@53@01)
                    $q2@54@01))))))
        (or
          (not
            (and
              (<= 0 $q2@54@01)
              (<
                $q2@54@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
                    $q1@53@01)))))
          (and
            (<= 0 $q2@54@01)
            (<
              $q2@54@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
                  $q1@53@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
          $q1@53@01)
        $q2@54@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@686@172@686@559-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@53@01)
      (<
        $q1@53@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))))))
  (and
    (<= 0 $q1@53@01)
    (<
      $q1@53@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@53@01 Int)) (!
  (and
    (or (<= 0 $q1@53@01) (not (<= 0 $q1@53@01)))
    (=>
      (and
        (<= 0 $q1@53@01)
        (<
          $q1@53@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1)))))
      (and
        (<= 0 $q1@53@01)
        (<
          $q1@53@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))))
        (forall (($q2@54@01 Int)) (!
          (and
            (or (<= 0 $q2@54@01) (not (<= 0 $q2@54@01)))
            (=>
              (and
                (<= 0 $q2@54@01)
                (<
                  $q2@54@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
                      $q1@53@01))))
              (and
                (<= 0 $q2@54@01)
                (<
                  $q2@54@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
                      $q1@53@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
                        $q1@53@01)
                      $q2@54@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
                          $q1@53@01)
                        $q2@54@01))))))
            (or
              (not
                (and
                  (<= 0 $q2@54@01)
                  (<
                    $q2@54@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
                        $q1@53@01)))))
              (and
                (<= 0 $q2@54@01)
                (<
                  $q2@54@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
                      $q1@53@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
              $q1@53@01)
            $q2@54@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@686@172@686@559-aux|))))
    (or
      (not
        (and
          (<= 0 $q1@53@01)
          (<
            $q1@53@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))))))
      (and
        (<= 0 $q1@53@01)
        (<
          $q1@53@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
    $q1@53@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@686@11@686@560-aux|)))
(assert (forall (($q1@53@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@53@01)
      (<
        $q1@53@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1)))))
    (forall (($q2@54@01 Int)) (!
      (=>
        (and
          (<= 0 $q2@54@01)
          (<
            $q2@54@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
                $q1@53@01))))
        (and
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
                $q1@53@01)
              $q2@54@01))
          (<=
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
                $q1@53@01)
              $q2@54@01)
            170141183460469231731687303715884105727)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
          $q1@53@01)
        $q2@54@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@686@172@686@559|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@2@01 1))
    $q1@53@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@686@11@686@560|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])| == 2
(declare-const $t@55@01 $Snap)
(assert (= $t@55@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])| == 2
; [eval] |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$1, 2)
(assert (=
  (Seq_length
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2)))
  2))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])| ==>
;     |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $t@56@01 $Snap)
(assert (= $t@56@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $q3@57@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 41 | !(0 <= $q3@57@01) | live]
; [else-branch: 41 | 0 <= $q3@57@01 | live]
(push) ; 5
; [then-branch: 41 | !(0 <= $q3@57@01)]
(assert (not (<= 0 $q3@57@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 41 | 0 <= $q3@57@01]
(assert (<= 0 $q3@57@01))
; [eval] $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$1, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@57@01) (not (<= 0 $q3@57@01))))
(push) ; 4
; [then-branch: 42 | 0 <= $q3@57@01 && $q3@57@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))| | live]
; [else-branch: 42 | !(0 <= $q3@57@01 && $q3@57@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))|) | live]
(push) ; 5
; [then-branch: 42 | 0 <= $q3@57@01 && $q3@57@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))|]
(assert (and
  (<= 0 $q3@57@01)
  (<
    $q3@57@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))))))
; [eval] |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$1, 2)
(push) ; 6
(assert (not (>= $q3@57@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 42 | !(0 <= $q3@57@01 && $q3@57@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@57@01)
    (<
      $q3@57@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@57@01)
      (<
        $q3@57@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))))))
  (and
    (<= 0 $q3@57@01)
    (<
      $q3@57@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@57@01 Int)) (!
  (and
    (or (<= 0 $q3@57@01) (not (<= 0 $q3@57@01)))
    (or
      (not
        (and
          (<= 0 $q3@57@01)
          (<
            $q3@57@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))))))
      (and
        (<= 0 $q3@57@01)
        (<
          $q3@57@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
    $q3@57@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@688@11@688@251-aux|)))
(assert (forall (($q3@57@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@57@01)
      (<
        $q3@57@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
          $q3@57@01))
      2))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
    $q3@57@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@688@11@688@251|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 <
;       |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==
;       2))
(declare-const $t@58@01 $Snap)
(assert (= $t@58@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2))
(declare-const $q3@59@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 43 | !(0 <= $q3@59@01) | live]
; [else-branch: 43 | 0 <= $q3@59@01 | live]
(push) ; 5
; [then-branch: 43 | !(0 <= $q3@59@01)]
(assert (not (<= 0 $q3@59@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 43 | 0 <= $q3@59@01]
(assert (<= 0 $q3@59@01))
; [eval] $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$1, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@59@01) (not (<= 0 $q3@59@01))))
(push) ; 4
; [then-branch: 44 | 0 <= $q3@59@01 && $q3@59@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))| | live]
; [else-branch: 44 | !(0 <= $q3@59@01 && $q3@59@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))|) | live]
(push) ; 5
; [then-branch: 44 | 0 <= $q3@59@01 && $q3@59@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))|]
(assert (and
  (<= 0 $q3@59@01)
  (<
    $q3@59@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
(declare-const $q4@60@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 45 | !(0 <= $q4@60@01) | live]
; [else-branch: 45 | 0 <= $q4@60@01 | live]
(push) ; 8
; [then-branch: 45 | !(0 <= $q4@60@01)]
(assert (not (<= 0 $q4@60@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 45 | 0 <= $q4@60@01]
(assert (<= 0 $q4@60@01))
; [eval] $q4 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$1, 2)
(push) ; 9
(assert (not (>= $q3@59@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@60@01) (not (<= 0 $q4@60@01))))
(push) ; 7
; [then-branch: 46 | 0 <= $q4@60@01 && $q4@60@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))[$q3@59@01]| | live]
; [else-branch: 46 | !(0 <= $q4@60@01 && $q4@60@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))[$q3@59@01]|) | live]
(push) ; 8
; [then-branch: 46 | 0 <= $q4@60@01 && $q4@60@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))[$q3@59@01]|]
(assert (and
  (<= 0 $q4@60@01)
  (<
    $q4@60@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
        $q3@59@01)))))
; [eval] |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$1, 2)
(push) ; 9
(assert (not (>= $q3@59@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q4@60@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 46 | !(0 <= $q4@60@01 && $q4@60@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))[$q3@59@01]|)]
(assert (not
  (and
    (<= 0 $q4@60@01)
    (<
      $q4@60@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
          $q3@59@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@60@01)
      (<
        $q4@60@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
            $q3@59@01)))))
  (and
    (<= 0 $q4@60@01)
    (<
      $q4@60@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
          $q3@59@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@60@01 Int)) (!
  (and
    (or (<= 0 $q4@60@01) (not (<= 0 $q4@60@01)))
    (or
      (not
        (and
          (<= 0 $q4@60@01)
          (<
            $q4@60@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                $q3@59@01)))))
      (and
        (<= 0 $q4@60@01)
        (<
          $q4@60@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
              $q3@59@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
      $q3@59@01)
    $q4@60@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@689@182@689@437-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 44 | !(0 <= $q3@59@01 && $q3@59@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@59@01)
    (<
      $q3@59@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@59@01)
    (<
      $q3@59@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2)))))
  (and
    (<= 0 $q3@59@01)
    (<
      $q3@59@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))))
    (forall (($q4@60@01 Int)) (!
      (and
        (or (<= 0 $q4@60@01) (not (<= 0 $q4@60@01)))
        (or
          (not
            (and
              (<= 0 $q4@60@01)
              (<
                $q4@60@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                    $q3@59@01)))))
          (and
            (<= 0 $q4@60@01)
            (<
              $q4@60@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                  $q3@59@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
          $q3@59@01)
        $q4@60@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@689@182@689@437-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@59@01)
      (<
        $q3@59@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))))))
  (and
    (<= 0 $q3@59@01)
    (<
      $q3@59@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@59@01 Int)) (!
  (and
    (or (<= 0 $q3@59@01) (not (<= 0 $q3@59@01)))
    (=>
      (and
        (<= 0 $q3@59@01)
        (<
          $q3@59@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2)))))
      (and
        (<= 0 $q3@59@01)
        (<
          $q3@59@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))))
        (forall (($q4@60@01 Int)) (!
          (and
            (or (<= 0 $q4@60@01) (not (<= 0 $q4@60@01)))
            (or
              (not
                (and
                  (<= 0 $q4@60@01)
                  (<
                    $q4@60@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                        $q3@59@01)))))
              (and
                (<= 0 $q4@60@01)
                (<
                  $q4@60@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                      $q3@59@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
              $q3@59@01)
            $q4@60@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@689@182@689@437-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@59@01)
          (<
            $q3@59@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))))))
      (and
        (<= 0 $q3@59@01)
        (<
          $q3@59@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
    $q3@59@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@689@11@689@438-aux|)))
(assert (forall (($q3@59@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@59@01)
      (<
        $q3@59@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2)))))
    (forall (($q4@60@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@60@01)
          (<
            $q4@60@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                $q3@59@01))))
        (=
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                $q3@59@01)
              $q4@60@01))
          2))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
          $q3@59@01)
        $q4@60@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@689@182@689@437|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
    $q3@59@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@689@11@689@438|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 <
;       |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       (forall $q5: Int ::
;         { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] }
;         0 <= $q5 &&
;         $q5 <
;         |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==>
;         -170141183460469231731687303715884105728 <=
;         ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] &&
;         ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <=
;         170141183460469231731687303715884105727)))
(declare-const $t@61@01 $Snap)
(assert (= $t@61@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)))
(declare-const $q3@62@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 47 | !(0 <= $q3@62@01) | live]
; [else-branch: 47 | 0 <= $q3@62@01 | live]
(push) ; 5
; [then-branch: 47 | !(0 <= $q3@62@01)]
(assert (not (<= 0 $q3@62@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 47 | 0 <= $q3@62@01]
(assert (<= 0 $q3@62@01))
; [eval] $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$1, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@62@01) (not (<= 0 $q3@62@01))))
(push) ; 4
; [then-branch: 48 | 0 <= $q3@62@01 && $q3@62@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))| | live]
; [else-branch: 48 | !(0 <= $q3@62@01 && $q3@62@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))|) | live]
(push) ; 5
; [then-branch: 48 | 0 <= $q3@62@01 && $q3@62@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))|]
(assert (and
  (<= 0 $q3@62@01)
  (<
    $q3@62@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
(declare-const $q4@63@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 49 | !(0 <= $q4@63@01) | live]
; [else-branch: 49 | 0 <= $q4@63@01 | live]
(push) ; 8
; [then-branch: 49 | !(0 <= $q4@63@01)]
(assert (not (<= 0 $q4@63@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 49 | 0 <= $q4@63@01]
(assert (<= 0 $q4@63@01))
; [eval] $q4 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$1, 2)
(push) ; 9
(assert (not (>= $q3@62@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@63@01) (not (<= 0 $q4@63@01))))
(push) ; 7
; [then-branch: 50 | 0 <= $q4@63@01 && $q4@63@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))[$q3@62@01]| | live]
; [else-branch: 50 | !(0 <= $q4@63@01 && $q4@63@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))[$q3@62@01]|) | live]
(push) ; 8
; [then-branch: 50 | 0 <= $q4@63@01 && $q4@63@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))[$q3@62@01]|]
(assert (and
  (<= 0 $q4@63@01)
  (<
    $q4@63@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
        $q3@62@01)))))
; [eval] (forall $q5: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
(declare-const $q5@64@01 Int)
(push) ; 9
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] 0 <= $q5
(push) ; 10
; [then-branch: 51 | !(0 <= $q5@64@01) | live]
; [else-branch: 51 | 0 <= $q5@64@01 | live]
(push) ; 11
; [then-branch: 51 | !(0 <= $q5@64@01)]
(assert (not (<= 0 $q5@64@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 51 | 0 <= $q5@64@01]
(assert (<= 0 $q5@64@01))
; [eval] $q5 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$1, 2)
(push) ; 12
(assert (not (>= $q3@62@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@63@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q5@64@01) (not (<= 0 $q5@64@01))))
(push) ; 10
; [then-branch: 52 | 0 <= $q5@64@01 && $q5@64@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))[$q3@62@01][$q4@63@01]| | live]
; [else-branch: 52 | !(0 <= $q5@64@01 && $q5@64@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))[$q3@62@01][$q4@63@01]|) | live]
(push) ; 11
; [then-branch: 52 | 0 <= $q5@64@01 && $q5@64@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))[$q3@62@01][$q4@63@01]|]
(assert (and
  (<= 0 $q5@64@01)
  (<
    $q5@64@01
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
          $q3@62@01)
        $q4@63@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$1, 2)
(push) ; 12
(assert (not (>= $q3@62@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@63@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q5@64@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 53 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))[$q3@62@01][$q4@63@01][$q5@64@01]) | live]
; [else-branch: 53 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))[$q3@62@01][$q4@63@01][$q5@64@01] | live]
(push) ; 13
; [then-branch: 53 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))[$q3@62@01][$q4@63@01][$q5@64@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
          $q3@62@01)
        $q4@63@01)
      $q5@64@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 53 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))[$q3@62@01][$q4@63@01][$q5@64@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
        $q3@62@01)
      $q4@63@01)
    $q5@64@01)))
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$1, 2)
(push) ; 14
(assert (not (>= $q3@62@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q4@63@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q5@64@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
          $q3@62@01)
        $q4@63@01)
      $q5@64@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
            $q3@62@01)
          $q4@63@01)
        $q5@64@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 52 | !(0 <= $q5@64@01 && $q5@64@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))[$q3@62@01][$q4@63@01]|)]
(assert (not
  (and
    (<= 0 $q5@64@01)
    (<
      $q5@64@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
            $q3@62@01)
          $q4@63@01))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q5@64@01)
    (<
      $q5@64@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
            $q3@62@01)
          $q4@63@01))))
  (and
    (<= 0 $q5@64@01)
    (<
      $q5@64@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
            $q3@62@01)
          $q4@63@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
              $q3@62@01)
            $q4@63@01)
          $q5@64@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                $q3@62@01)
              $q4@63@01)
            $q5@64@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q5@64@01)
      (<
        $q5@64@01
        (Seq_length
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
              $q3@62@01)
            $q4@63@01)))))
  (and
    (<= 0 $q5@64@01)
    (<
      $q5@64@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
            $q3@62@01)
          $q4@63@01))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@64@01 Int)) (!
  (and
    (or (<= 0 $q5@64@01) (not (<= 0 $q5@64@01)))
    (=>
      (and
        (<= 0 $q5@64@01)
        (<
          $q5@64@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                $q3@62@01)
              $q4@63@01))))
      (and
        (<= 0 $q5@64@01)
        (<
          $q5@64@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                $q3@62@01)
              $q4@63@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                  $q3@62@01)
                $q4@63@01)
              $q5@64@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                    $q3@62@01)
                  $q4@63@01)
                $q5@64@01))))))
    (or
      (not
        (and
          (<= 0 $q5@64@01)
          (<
            $q5@64@01
            (Seq_length
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                  $q3@62@01)
                $q4@63@01)))))
      (and
        (<= 0 $q5@64@01)
        (<
          $q5@64@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                $q3@62@01)
              $q4@63@01))))))
  :pattern ((Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
        $q3@62@01)
      $q4@63@01)
    $q5@64@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@690@363@690@790-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 50 | !(0 <= $q4@63@01 && $q4@63@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))[$q3@62@01]|)]
(assert (not
  (and
    (<= 0 $q4@63@01)
    (<
      $q4@63@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
          $q3@62@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q4@63@01)
    (<
      $q4@63@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
          $q3@62@01))))
  (and
    (<= 0 $q4@63@01)
    (<
      $q4@63@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
          $q3@62@01)))
    (forall (($q5@64@01 Int)) (!
      (and
        (or (<= 0 $q5@64@01) (not (<= 0 $q5@64@01)))
        (=>
          (and
            (<= 0 $q5@64@01)
            (<
              $q5@64@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                    $q3@62@01)
                  $q4@63@01))))
          (and
            (<= 0 $q5@64@01)
            (<
              $q5@64@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                    $q3@62@01)
                  $q4@63@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                      $q3@62@01)
                    $q4@63@01)
                  $q5@64@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                        $q3@62@01)
                      $q4@63@01)
                    $q5@64@01))))))
        (or
          (not
            (and
              (<= 0 $q5@64@01)
              (<
                $q5@64@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                      $q3@62@01)
                    $q4@63@01)))))
          (and
            (<= 0 $q5@64@01)
            (<
              $q5@64@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                    $q3@62@01)
                  $q4@63@01))))))
      :pattern ((Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
            $q3@62@01)
          $q4@63@01)
        $q5@64@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@690@363@690@790-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@63@01)
      (<
        $q4@63@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
            $q3@62@01)))))
  (and
    (<= 0 $q4@63@01)
    (<
      $q4@63@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
          $q3@62@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@63@01 Int)) (!
  (and
    (or (<= 0 $q4@63@01) (not (<= 0 $q4@63@01)))
    (=>
      (and
        (<= 0 $q4@63@01)
        (<
          $q4@63@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
              $q3@62@01))))
      (and
        (<= 0 $q4@63@01)
        (<
          $q4@63@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
              $q3@62@01)))
        (forall (($q5@64@01 Int)) (!
          (and
            (or (<= 0 $q5@64@01) (not (<= 0 $q5@64@01)))
            (=>
              (and
                (<= 0 $q5@64@01)
                (<
                  $q5@64@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                        $q3@62@01)
                      $q4@63@01))))
              (and
                (<= 0 $q5@64@01)
                (<
                  $q5@64@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                        $q3@62@01)
                      $q4@63@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                          $q3@62@01)
                        $q4@63@01)
                      $q5@64@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                            $q3@62@01)
                          $q4@63@01)
                        $q5@64@01))))))
            (or
              (not
                (and
                  (<= 0 $q5@64@01)
                  (<
                    $q5@64@01
                    (Seq_length
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                          $q3@62@01)
                        $q4@63@01)))))
              (and
                (<= 0 $q5@64@01)
                (<
                  $q5@64@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                        $q3@62@01)
                      $q4@63@01))))))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                $q3@62@01)
              $q4@63@01)
            $q5@64@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@690@363@690@790-aux|))))
    (or
      (not
        (and
          (<= 0 $q4@63@01)
          (<
            $q4@63@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                $q3@62@01)))))
      (and
        (<= 0 $q4@63@01)
        (<
          $q4@63@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
              $q3@62@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
      $q3@62@01)
    $q4@63@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@690@182@690@791-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 48 | !(0 <= $q3@62@01 && $q3@62@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@2@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@62@01)
    (<
      $q3@62@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@62@01)
    (<
      $q3@62@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2)))))
  (and
    (<= 0 $q3@62@01)
    (<
      $q3@62@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))))
    (forall (($q4@63@01 Int)) (!
      (and
        (or (<= 0 $q4@63@01) (not (<= 0 $q4@63@01)))
        (=>
          (and
            (<= 0 $q4@63@01)
            (<
              $q4@63@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                  $q3@62@01))))
          (and
            (<= 0 $q4@63@01)
            (<
              $q4@63@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                  $q3@62@01)))
            (forall (($q5@64@01 Int)) (!
              (and
                (or (<= 0 $q5@64@01) (not (<= 0 $q5@64@01)))
                (=>
                  (and
                    (<= 0 $q5@64@01)
                    (<
                      $q5@64@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                            $q3@62@01)
                          $q4@63@01))))
                  (and
                    (<= 0 $q5@64@01)
                    (<
                      $q5@64@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                            $q3@62@01)
                          $q4@63@01)))
                    (or
                      (<=
                        (- 0 170141183460469231731687303715884105728)
                        (Seq_index
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                              $q3@62@01)
                            $q4@63@01)
                          $q5@64@01))
                      (not
                        (<=
                          (- 0 170141183460469231731687303715884105728)
                          (Seq_index
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                                $q3@62@01)
                              $q4@63@01)
                            $q5@64@01))))))
                (or
                  (not
                    (and
                      (<= 0 $q5@64@01)
                      (<
                        $q5@64@01
                        (Seq_length
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                              $q3@62@01)
                            $q4@63@01)))))
                  (and
                    (<= 0 $q5@64@01)
                    (<
                      $q5@64@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                            $q3@62@01)
                          $q4@63@01))))))
              :pattern ((Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                    $q3@62@01)
                  $q4@63@01)
                $q5@64@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@690@363@690@790-aux|))))
        (or
          (not
            (and
              (<= 0 $q4@63@01)
              (<
                $q4@63@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                    $q3@62@01)))))
          (and
            (<= 0 $q4@63@01)
            (<
              $q4@63@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                  $q3@62@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
          $q3@62@01)
        $q4@63@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@690@182@690@791-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@62@01)
      (<
        $q3@62@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))))))
  (and
    (<= 0 $q3@62@01)
    (<
      $q3@62@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@62@01 Int)) (!
  (and
    (or (<= 0 $q3@62@01) (not (<= 0 $q3@62@01)))
    (=>
      (and
        (<= 0 $q3@62@01)
        (<
          $q3@62@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2)))))
      (and
        (<= 0 $q3@62@01)
        (<
          $q3@62@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))))
        (forall (($q4@63@01 Int)) (!
          (and
            (or (<= 0 $q4@63@01) (not (<= 0 $q4@63@01)))
            (=>
              (and
                (<= 0 $q4@63@01)
                (<
                  $q4@63@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                      $q3@62@01))))
              (and
                (<= 0 $q4@63@01)
                (<
                  $q4@63@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                      $q3@62@01)))
                (forall (($q5@64@01 Int)) (!
                  (and
                    (or (<= 0 $q5@64@01) (not (<= 0 $q5@64@01)))
                    (=>
                      (and
                        (<= 0 $q5@64@01)
                        (<
                          $q5@64@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                                $q3@62@01)
                              $q4@63@01))))
                      (and
                        (<= 0 $q5@64@01)
                        (<
                          $q5@64@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                                $q3@62@01)
                              $q4@63@01)))
                        (or
                          (<=
                            (- 0 170141183460469231731687303715884105728)
                            (Seq_index
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                                  $q3@62@01)
                                $q4@63@01)
                              $q5@64@01))
                          (not
                            (<=
                              (- 0 170141183460469231731687303715884105728)
                              (Seq_index
                                (Seq_index
                                  (Seq_index
                                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                                    $q3@62@01)
                                  $q4@63@01)
                                $q5@64@01))))))
                    (or
                      (not
                        (and
                          (<= 0 $q5@64@01)
                          (<
                            $q5@64@01
                            (Seq_length
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                                  $q3@62@01)
                                $q4@63@01)))))
                      (and
                        (<= 0 $q5@64@01)
                        (<
                          $q5@64@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                                $q3@62@01)
                              $q4@63@01))))))
                  :pattern ((Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                        $q3@62@01)
                      $q4@63@01)
                    $q5@64@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@690@363@690@790-aux|))))
            (or
              (not
                (and
                  (<= 0 $q4@63@01)
                  (<
                    $q4@63@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                        $q3@62@01)))))
              (and
                (<= 0 $q4@63@01)
                (<
                  $q4@63@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                      $q3@62@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
              $q3@62@01)
            $q4@63@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@690@182@690@791-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@62@01)
          (<
            $q3@62@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))))))
      (and
        (<= 0 $q3@62@01)
        (<
          $q3@62@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
    $q3@62@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@690@11@690@792-aux|)))
(assert (forall (($q3@62@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@62@01)
      (<
        $q3@62@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2)))))
    (forall (($q4@63@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@63@01)
          (<
            $q4@63@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                $q3@62@01))))
        (forall (($q5@64@01 Int)) (!
          (=>
            (and
              (<= 0 $q5@64@01)
              (<
                $q5@64@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                      $q3@62@01)
                    $q4@63@01))))
            (and
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                      $q3@62@01)
                    $q4@63@01)
                  $q5@64@01))
              (<=
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                      $q3@62@01)
                    $q4@63@01)
                  $q5@64@01)
                170141183460469231731687303715884105727)))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
                $q3@62@01)
              $q4@63@01)
            $q5@64@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@690@363@690@790|)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
          $q3@62@01)
        $q4@63@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@690@182@690@791|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@2@01 2))
    $q3@62@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@690@11@690@792|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$1, 3)): Seq[Int])| == 1000
(declare-const $t@65@01 $Snap)
(assert (= $t@65@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$1, 3)): Seq[Int])| == 1000
; [eval] |($struct_get($struct_loc($self$1, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$1, 3)): Seq[Int])
; [eval] $struct_loc($self$1, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3))) 1000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6] }
;     0 <= $q6 && $q6 < |($struct_get($struct_loc($self$1, 3)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6] &&
;     ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6] <=
;     170141183460469231731687303715884105727)
(declare-const $t@66@01 $Snap)
(assert (= $t@66@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6] } 0 <= $q6 && $q6 < |($struct_get($struct_loc($self$1, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727)
(declare-const $q6@67@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc($self$1, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc($self$1, 3)): Seq[Int])|
; [eval] 0 <= $q6
(push) ; 4
; [then-branch: 54 | !(0 <= $q6@67@01) | live]
; [else-branch: 54 | 0 <= $q6@67@01 | live]
(push) ; 5
; [then-branch: 54 | !(0 <= $q6@67@01)]
(assert (not (<= 0 $q6@67@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 54 | 0 <= $q6@67@01]
(assert (<= 0 $q6@67@01))
; [eval] $q6 < |($struct_get($struct_loc($self$1, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc($self$1, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$1, 3)): Seq[Int])
; [eval] $struct_loc($self$1, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q6@67@01) (not (<= 0 $q6@67@01))))
(push) ; 4
; [then-branch: 55 | 0 <= $q6@67@01 && $q6@67@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$1@2@01, 3))| | live]
; [else-branch: 55 | !(0 <= $q6@67@01 && $q6@67@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$1@2@01, 3))|) | live]
(push) ; 5
; [then-branch: 55 | 0 <= $q6@67@01 && $q6@67@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$1@2@01, 3))|]
(assert (and
  (<= 0 $q6@67@01)
  (<
    $q6@67@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc($self$1, 3)): Seq[Int])
; [eval] $struct_loc($self$1, 3)
(push) ; 6
(assert (not (>= $q6@67@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 56 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$1@2@01, 3))[$q6@67@01]) | live]
; [else-branch: 56 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$1@2@01, 3))[$q6@67@01] | live]
(push) ; 7
; [then-branch: 56 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$1@2@01, 3))[$q6@67@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3))
      $q6@67@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 56 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$1@2@01, 3))[$q6@67@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3)) $q6@67@01)))
; [eval] ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc($self$1, 3)): Seq[Int])
; [eval] $struct_loc($self$1, 3)
(push) ; 8
(assert (not (>= $q6@67@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3))
      $q6@67@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3))
        $q6@67@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 55 | !(0 <= $q6@67@01 && $q6@67@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$1@2@01, 3))|)]
(assert (not
  (and
    (<= 0 $q6@67@01)
    (<
      $q6@67@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q6@67@01)
    (<
      $q6@67@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3)))))
  (and
    (<= 0 $q6@67@01)
    (<
      $q6@67@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3))
          $q6@67@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3))
            $q6@67@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q6@67@01)
      (<
        $q6@67@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3))))))
  (and
    (<= 0 $q6@67@01)
    (<
      $q6@67@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@67@01 Int)) (!
  (and
    (or (<= 0 $q6@67@01) (not (<= 0 $q6@67@01)))
    (=>
      (and
        (<= 0 $q6@67@01)
        (<
          $q6@67@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3)))))
      (and
        (<= 0 $q6@67@01)
        (<
          $q6@67@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3))
              $q6@67@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3))
                $q6@67@01))))))
    (or
      (not
        (and
          (<= 0 $q6@67@01)
          (<
            $q6@67@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3))))))
      (and
        (<= 0 $q6@67@01)
        (<
          $q6@67@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3))
    $q6@67@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@692@11@692@358-aux|)))
(assert (forall (($q6@67@01 Int)) (!
  (=>
    (and
      (<= 0 $q6@67@01)
      (<
        $q6@67@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3))
          $q6@67@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3))
          $q6@67@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3))
    $q6@67@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@692@11@692@358|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]),
;     $q7): Seq[Int]) }
;     |($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]),
;     $q7): Seq[Int])| ==
;     10)
(declare-const $t@68@01 $Snap)
(assert (= $t@68@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } |($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10)
(declare-const $q7@69@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10
; [eval] |($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc($self$1, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@69@01 Int)) (!
  (=
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@69@01))
    10)
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@69@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@693@11@693@215|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]),
;     $q7): Seq[Int]) }
;     (forall $q8: Int ::
;       { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] }
;       0 <= $q8 &&
;       $q8 <
;       |($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])| ==>
;       -170141183460469231731687303715884105728 <=
;       ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] &&
;       ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] <=
;       170141183460469231731687303715884105727))
(declare-const $t@70@01 $Snap)
(assert (= $t@70@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } (forall $q8: Int :: { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727))
(declare-const $q7@71@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q8: Int :: { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727)
(declare-const $q8@72@01 Int)
(push) ; 4
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] 0 <= $q8
(push) ; 5
; [then-branch: 57 | !(0 <= $q8@72@01) | live]
; [else-branch: 57 | 0 <= $q8@72@01 | live]
(push) ; 6
; [then-branch: 57 | !(0 <= $q8@72@01)]
(assert (not (<= 0 $q8@72@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 57 | 0 <= $q8@72@01]
(assert (<= 0 $q8@72@01))
; [eval] $q8 < |($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc($self$1, 4)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q8@72@01) (not (<= 0 $q8@72@01))))
(push) ; 5
; [then-branch: 58 | 0 <= $q8@72@01 && $q8@72@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$1@2@01, 4)), $q7@71@01)| | live]
; [else-branch: 58 | !(0 <= $q8@72@01 && $q8@72@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$1@2@01, 4)), $q7@71@01)|) | live]
(push) ; 6
; [then-branch: 58 | 0 <= $q8@72@01 && $q8@72@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$1@2@01, 4)), $q7@71@01)|]
(assert (and
  (<= 0 $q8@72@01)
  (<
    $q8@72@01
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] -170141183460469231731687303715884105728
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc($self$1, 4)
(push) ; 7
(assert (not (>= $q8@72@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 59 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$1@2@01, 4)), $q7@71@01)[$q8@72@01]) | live]
; [else-branch: 59 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$1@2@01, 4)), $q7@71@01)[$q8@72@01] | live]
(push) ; 8
; [then-branch: 59 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$1@2@01, 4)), $q7@71@01)[$q8@72@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01)
      $q8@72@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 59 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$1@2@01, 4)), $q7@71@01)[$q8@72@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01)
    $q8@72@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc($self$1, 4)
(push) ; 9
(assert (not (>= $q8@72@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01)
      $q8@72@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01)
        $q8@72@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 58 | !(0 <= $q8@72@01 && $q8@72@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$1@2@01, 4)), $q7@71@01)|)]
(assert (not
  (and
    (<= 0 $q8@72@01)
    (<
      $q8@72@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q8@72@01)
    (<
      $q8@72@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01))))
  (and
    (<= 0 $q8@72@01)
    (<
      $q8@72@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01)
          $q8@72@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01)
            $q8@72@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q8@72@01)
      (<
        $q8@72@01
        (Seq_length
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01)))))
  (and
    (<= 0 $q8@72@01)
    (<
      $q8@72@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q8@72@01 Int)) (!
  (and
    (or (<= 0 $q8@72@01) (not (<= 0 $q8@72@01)))
    (=>
      (and
        (<= 0 $q8@72@01)
        (<
          $q8@72@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01))))
      (and
        (<= 0 $q8@72@01)
        (<
          $q8@72@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01)
              $q8@72@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01)
                $q8@72@01))))))
    (or
      (not
        (and
          (<= 0 $q8@72@01)
          (<
            $q8@72@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01)))))
      (and
        (<= 0 $q8@72@01)
        (<
          $q8@72@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01))))))
  :pattern ((Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01)
    $q8@72@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@694@122@694@621-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@71@01 Int)) (!
  (forall (($q8@72@01 Int)) (!
    (and
      (or (<= 0 $q8@72@01) (not (<= 0 $q8@72@01)))
      (=>
        (and
          (<= 0 $q8@72@01)
          (<
            $q8@72@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01))))
        (and
          (<= 0 $q8@72@01)
          (<
            $q8@72@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01)))
          (or
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01)
                $q8@72@01))
            (not
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01)
                  $q8@72@01))))))
      (or
        (not
          (and
            (<= 0 $q8@72@01)
            (<
              $q8@72@01
              (Seq_length
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01)))))
        (and
          (<= 0 $q8@72@01)
          (<
            $q8@72@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01))))))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01)
      $q8@72@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@694@122@694@621-aux|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@694@11@694@622-aux|)))
(assert (forall (($q7@71@01 Int)) (!
  (forall (($q8@72@01 Int)) (!
    (=>
      (and
        (<= 0 $q8@72@01)
        (<
          $q8@72@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01))))
      (and
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01)
            $q8@72@01))
        (<=
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01)
            $q8@72@01)
          170141183460469231731687303715884105727)))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01)
      $q8@72@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@694@122@694@621|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@2@01 4)) $q7@71@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@694@11@694@622|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 5)): Int) &&
;   ($struct_get($struct_loc($self$1, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@73@01 $Snap)
(assert (= $t@73@01 ($Snap.combine ($Snap.first $t@73@01) ($Snap.second $t@73@01))))
(assert (= ($Snap.first $t@73@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 5))))
(assert (= ($Snap.second $t@73@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$1, 6)): Int) &&
;   ($struct_get($struct_loc($self$1, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@74@01 $Snap)
(assert (= $t@74@01 ($Snap.combine ($Snap.first $t@74@01) ($Snap.second $t@74@01))))
(assert (= ($Snap.first $t@74@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 6)): Int)
; [eval] $struct_loc($self$1, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 6))))
(assert (= ($Snap.second $t@74@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 6)): Int)
; [eval] $struct_loc($self$1, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@75@01 $Snap)
(assert (= $t@75@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q9@76@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(push) ; 4
; [then-branch: 60 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q9@76@01)) | live]
; [else-branch: 60 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q9@76@01) | live]
(push) ; 5
; [then-branch: 60 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q9@76@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q9@76@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 60 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 8)), $q9@76@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q9@76@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q9@76@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q9@76@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@76@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q9@76@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q9@76@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q9@76@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@697@11@697@354-aux|)))
(assert (forall (($q9@76@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q9@76@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q9@76@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q9@76@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@697@11@697@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $t@77@01 $Snap)
(assert (= $t@77@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) } ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $q9@78@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@78@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q9@78@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $q9@78@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@698@11@698@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@79@01 $Snap)
(assert (= $t@79@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q10@80@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
(push) ; 4
; [then-branch: 61 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 9)), $q10@80@01)) | live]
; [else-branch: 61 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 9)), $q10@80@01) | live]
(push) ; 5
; [then-branch: 61 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 9)), $q10@80@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q10@80@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 61 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@2@01, 9)), $q10@80@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q10@80@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q10@80@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q10@80@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@80@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q10@80@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q10@80@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q10@80@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@699@11@699@358-aux|)))
(assert (forall (($q10@80@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q10@80@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q10@80@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q10@80@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@699@11@699@358|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])): Int))
(declare-const $t@81@01 $Snap)
(assert (= $t@81@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) } ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])): Int))
(declare-const $q10@82@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@82@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q10@82@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 9)) $q10@82@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@700@11@700@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@83@01 $Snap)
(assert (= $t@83@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$1, -1)): Int)
; [eval] $struct_loc($self$1, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@2@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$2, 0)): Seq[Int])| == 12
(declare-const $t@84@01 $Snap)
(assert (= $t@84@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$2, 0)): Seq[Int])| == 12
; [eval] |($struct_get($struct_loc($self$2, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$2, 0)): Seq[Int])
; [eval] $struct_loc($self$2, 0)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 0))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($struct_get($struct_loc($self$2, 0)): Seq[Int])[$q0] }
;     0 <= $q0 && $q0 < |($struct_get($struct_loc($self$2, 0)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc($self$2, 0)): Seq[Int])[$q0] &&
;     ($struct_get($struct_loc($self$2, 0)): Seq[Int])[$q0] <=
;     170141183460469231731687303715884105727)
(declare-const $t@85@01 $Snap)
(assert (= $t@85@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($struct_get($struct_loc($self$2, 0)): Seq[Int])[$q0] } 0 <= $q0 && $q0 < |($struct_get($struct_loc($self$2, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc($self$2, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@86@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc($self$2, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc($self$2, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc($self$2, 0)): Seq[Int])|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 62 | !(0 <= $q0@86@01) | live]
; [else-branch: 62 | 0 <= $q0@86@01 | live]
(push) ; 5
; [then-branch: 62 | !(0 <= $q0@86@01)]
(assert (not (<= 0 $q0@86@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 62 | 0 <= $q0@86@01]
(assert (<= 0 $q0@86@01))
; [eval] $q0 < |($struct_get($struct_loc($self$2, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc($self$2, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$2, 0)): Seq[Int])
; [eval] $struct_loc($self$2, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@86@01) (not (<= 0 $q0@86@01))))
(push) ; 4
; [then-branch: 63 | 0 <= $q0@86@01 && $q0@86@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$2@4@01, 0))| | live]
; [else-branch: 63 | !(0 <= $q0@86@01 && $q0@86@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$2@4@01, 0))|) | live]
(push) ; 5
; [then-branch: 63 | 0 <= $q0@86@01 && $q0@86@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$2@4@01, 0))|]
(assert (and
  (<= 0 $q0@86@01)
  (<
    $q0@86@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 0))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc($self$2, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 0)): Seq[Int])[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$2, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc($self$2, 0)): Seq[Int])
; [eval] $struct_loc($self$2, 0)
(push) ; 6
(assert (not (>= $q0@86@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 64 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$2@4@01, 0))[$q0@86@01]) | live]
; [else-branch: 64 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$2@4@01, 0))[$q0@86@01] | live]
(push) ; 7
; [then-branch: 64 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$2@4@01, 0))[$q0@86@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 0))
      $q0@86@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 64 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$2@4@01, 0))[$q0@86@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 0)) $q0@86@01)))
; [eval] ($struct_get($struct_loc($self$2, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$2, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc($self$2, 0)): Seq[Int])
; [eval] $struct_loc($self$2, 0)
(push) ; 8
(assert (not (>= $q0@86@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 0))
      $q0@86@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 0))
        $q0@86@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 63 | !(0 <= $q0@86@01 && $q0@86@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$2@4@01, 0))|)]
(assert (not
  (and
    (<= 0 $q0@86@01)
    (<
      $q0@86@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 0)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q0@86@01)
    (<
      $q0@86@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 0)))))
  (and
    (<= 0 $q0@86@01)
    (<
      $q0@86@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 0))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 0))
          $q0@86@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 0))
            $q0@86@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q0@86@01)
      (<
        $q0@86@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 0))))))
  (and
    (<= 0 $q0@86@01)
    (<
      $q0@86@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 0)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@86@01 Int)) (!
  (and
    (or (<= 0 $q0@86@01) (not (<= 0 $q0@86@01)))
    (=>
      (and
        (<= 0 $q0@86@01)
        (<
          $q0@86@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 0)))))
      (and
        (<= 0 $q0@86@01)
        (<
          $q0@86@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 0))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 0))
              $q0@86@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 0))
                $q0@86@01))))))
    (or
      (not
        (and
          (<= 0 $q0@86@01)
          (<
            $q0@86@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 0))))))
      (and
        (<= 0 $q0@86@01)
        (<
          $q0@86@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 0)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 0))
    $q0@86@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@703@11@703@358-aux|)))
(assert (forall (($q0@86@01 Int)) (!
  (=>
    (and
      (<= 0 $q0@86@01)
      (<
        $q0@86@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 0)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 0))
          $q0@86@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 0))
          $q0@86@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 0))
    $q0@86@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@703@11@703@358|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])| == 12
(declare-const $t@87@01 $Snap)
(assert (= $t@87@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])| == 12
; [eval] |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$2, 1)
(assert (=
  (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1)))
  12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 &&
;     $q1 < |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])| ==>
;     |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $t@88@01 $Snap)
(assert (= $t@88@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $q1@89@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 65 | !(0 <= $q1@89@01) | live]
; [else-branch: 65 | 0 <= $q1@89@01 | live]
(push) ; 5
; [then-branch: 65 | !(0 <= $q1@89@01)]
(assert (not (<= 0 $q1@89@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 65 | 0 <= $q1@89@01]
(assert (<= 0 $q1@89@01))
; [eval] $q1 < |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$2, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@89@01) (not (<= 0 $q1@89@01))))
(push) ; 4
; [then-branch: 66 | 0 <= $q1@89@01 && $q1@89@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$2@4@01, 1))| | live]
; [else-branch: 66 | !(0 <= $q1@89@01 && $q1@89@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$2@4@01, 1))|) | live]
(push) ; 5
; [then-branch: 66 | 0 <= $q1@89@01 && $q1@89@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$2@4@01, 1))|]
(assert (and
  (<= 0 $q1@89@01)
  (<
    $q1@89@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))))))
; [eval] |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$2, 1)
(push) ; 6
(assert (not (>= $q1@89@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 66 | !(0 <= $q1@89@01 && $q1@89@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$2@4@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@89@01)
    (<
      $q1@89@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@89@01)
      (<
        $q1@89@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))))))
  (and
    (<= 0 $q1@89@01)
    (<
      $q1@89@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@89@01 Int)) (!
  (and
    (or (<= 0 $q1@89@01) (not (<= 0 $q1@89@01)))
    (or
      (not
        (and
          (<= 0 $q1@89@01)
          (<
            $q1@89@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))))))
      (and
        (<= 0 $q1@89@01)
        (<
          $q1@89@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
    $q1@89@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@705@11@705@237-aux|)))
(assert (forall (($q1@89@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@89@01)
      (<
        $q1@89@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
          $q1@89@01))
      12))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
    $q1@89@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@705@11@705@237|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 &&
;     $q1 < |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])| ==>
;     (forall $q2: Int ::
;       { ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1][$q2] }
;       0 <= $q2 &&
;       $q2 < |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1]| ==>
;       -170141183460469231731687303715884105728 <=
;       ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1][$q2] &&
;       ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1][$q2] <=
;       170141183460469231731687303715884105727))
(declare-const $t@90@01 $Snap)
(assert (= $t@90@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727))
(declare-const $q1@91@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 67 | !(0 <= $q1@91@01) | live]
; [else-branch: 67 | 0 <= $q1@91@01 | live]
(push) ; 5
; [then-branch: 67 | !(0 <= $q1@91@01)]
(assert (not (<= 0 $q1@91@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 67 | 0 <= $q1@91@01]
(assert (<= 0 $q1@91@01))
; [eval] $q1 < |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$2, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@91@01) (not (<= 0 $q1@91@01))))
(push) ; 4
; [then-branch: 68 | 0 <= $q1@91@01 && $q1@91@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$2@4@01, 1))| | live]
; [else-branch: 68 | !(0 <= $q1@91@01 && $q1@91@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$2@4@01, 1))|) | live]
(push) ; 5
; [then-branch: 68 | 0 <= $q1@91@01 && $q1@91@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$2@4@01, 1))|]
(assert (and
  (<= 0 $q1@91@01)
  (<
    $q1@91@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))))))
; [eval] (forall $q2: Int :: { ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
(declare-const $q2@92@01 Int)
(push) ; 6
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1]|
; [eval] 0 <= $q2
(push) ; 7
; [then-branch: 69 | !(0 <= $q2@92@01) | live]
; [else-branch: 69 | 0 <= $q2@92@01 | live]
(push) ; 8
; [then-branch: 69 | !(0 <= $q2@92@01)]
(assert (not (<= 0 $q2@92@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 69 | 0 <= $q2@92@01]
(assert (<= 0 $q2@92@01))
; [eval] $q2 < |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1]|
; [eval] |($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$2, 1)
(push) ; 9
(assert (not (>= $q1@91@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q2@92@01) (not (<= 0 $q2@92@01))))
(push) ; 7
; [then-branch: 70 | 0 <= $q2@92@01 && $q2@92@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$2@4@01, 1))[$q1@91@01]| | live]
; [else-branch: 70 | !(0 <= $q2@92@01 && $q2@92@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$2@4@01, 1))[$q1@91@01]|) | live]
(push) ; 8
; [then-branch: 70 | 0 <= $q2@92@01 && $q2@92@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$2@4@01, 1))[$q1@91@01]|]
(assert (and
  (<= 0 $q2@92@01)
  (<
    $q2@92@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
        $q1@91@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$2, 1)
(push) ; 9
(assert (not (>= $q1@91@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q2@92@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 71 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$2@4@01, 1))[$q1@91@01][$q2@92@01]) | live]
; [else-branch: 71 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$2@4@01, 1))[$q1@91@01][$q2@92@01] | live]
(push) ; 10
; [then-branch: 71 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$2@4@01, 1))[$q1@91@01][$q2@92@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
        $q1@91@01)
      $q2@92@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 71 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$2@4@01, 1))[$q1@91@01][$q2@92@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
      $q1@91@01)
    $q2@92@01)))
; [eval] ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc($self$2, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$2, 1)
(push) ; 11
(assert (not (>= $q1@91@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= $q2@92@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
        $q1@91@01)
      $q2@92@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
          $q1@91@01)
        $q2@92@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 70 | !(0 <= $q2@92@01 && $q2@92@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$2@4@01, 1))[$q1@91@01]|)]
(assert (not
  (and
    (<= 0 $q2@92@01)
    (<
      $q2@92@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
          $q1@91@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q2@92@01)
    (<
      $q2@92@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
          $q1@91@01))))
  (and
    (<= 0 $q2@92@01)
    (<
      $q2@92@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
          $q1@91@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
            $q1@91@01)
          $q2@92@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
              $q1@91@01)
            $q2@92@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q2@92@01)
      (<
        $q2@92@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
            $q1@91@01)))))
  (and
    (<= 0 $q2@92@01)
    (<
      $q2@92@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
          $q1@91@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@92@01 Int)) (!
  (and
    (or (<= 0 $q2@92@01) (not (<= 0 $q2@92@01)))
    (=>
      (and
        (<= 0 $q2@92@01)
        (<
          $q2@92@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
              $q1@91@01))))
      (and
        (<= 0 $q2@92@01)
        (<
          $q2@92@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
              $q1@91@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
                $q1@91@01)
              $q2@92@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
                  $q1@91@01)
                $q2@92@01))))))
    (or
      (not
        (and
          (<= 0 $q2@92@01)
          (<
            $q2@92@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
                $q1@91@01)))))
      (and
        (<= 0 $q2@92@01)
        (<
          $q2@92@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
              $q1@91@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
      $q1@91@01)
    $q2@92@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@706@172@706@559-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 68 | !(0 <= $q1@91@01 && $q1@91@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$2@4@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@91@01)
    (<
      $q1@91@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q1@91@01)
    (<
      $q1@91@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1)))))
  (and
    (<= 0 $q1@91@01)
    (<
      $q1@91@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))))
    (forall (($q2@92@01 Int)) (!
      (and
        (or (<= 0 $q2@92@01) (not (<= 0 $q2@92@01)))
        (=>
          (and
            (<= 0 $q2@92@01)
            (<
              $q2@92@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
                  $q1@91@01))))
          (and
            (<= 0 $q2@92@01)
            (<
              $q2@92@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
                  $q1@91@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
                    $q1@91@01)
                  $q2@92@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
                      $q1@91@01)
                    $q2@92@01))))))
        (or
          (not
            (and
              (<= 0 $q2@92@01)
              (<
                $q2@92@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
                    $q1@91@01)))))
          (and
            (<= 0 $q2@92@01)
            (<
              $q2@92@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
                  $q1@91@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
          $q1@91@01)
        $q2@92@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@706@172@706@559-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@91@01)
      (<
        $q1@91@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))))))
  (and
    (<= 0 $q1@91@01)
    (<
      $q1@91@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@91@01 Int)) (!
  (and
    (or (<= 0 $q1@91@01) (not (<= 0 $q1@91@01)))
    (=>
      (and
        (<= 0 $q1@91@01)
        (<
          $q1@91@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1)))))
      (and
        (<= 0 $q1@91@01)
        (<
          $q1@91@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))))
        (forall (($q2@92@01 Int)) (!
          (and
            (or (<= 0 $q2@92@01) (not (<= 0 $q2@92@01)))
            (=>
              (and
                (<= 0 $q2@92@01)
                (<
                  $q2@92@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
                      $q1@91@01))))
              (and
                (<= 0 $q2@92@01)
                (<
                  $q2@92@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
                      $q1@91@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
                        $q1@91@01)
                      $q2@92@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
                          $q1@91@01)
                        $q2@92@01))))))
            (or
              (not
                (and
                  (<= 0 $q2@92@01)
                  (<
                    $q2@92@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
                        $q1@91@01)))))
              (and
                (<= 0 $q2@92@01)
                (<
                  $q2@92@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
                      $q1@91@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
              $q1@91@01)
            $q2@92@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@706@172@706@559-aux|))))
    (or
      (not
        (and
          (<= 0 $q1@91@01)
          (<
            $q1@91@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))))))
      (and
        (<= 0 $q1@91@01)
        (<
          $q1@91@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
    $q1@91@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@706@11@706@560-aux|)))
(assert (forall (($q1@91@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@91@01)
      (<
        $q1@91@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1)))))
    (forall (($q2@92@01 Int)) (!
      (=>
        (and
          (<= 0 $q2@92@01)
          (<
            $q2@92@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
                $q1@91@01))))
        (and
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
                $q1@91@01)
              $q2@92@01))
          (<=
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
                $q1@91@01)
              $q2@92@01)
            170141183460469231731687303715884105727)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
          $q1@91@01)
        $q2@92@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@706@172@706@559|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$2@4@01 1))
    $q1@91@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@706@11@706@560|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])| == 2
(declare-const $t@93@01 $Snap)
(assert (= $t@93@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])| == 2
; [eval] |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$2, 2)
(assert (=
  (Seq_length
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2)))
  2))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])| ==>
;     |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $t@94@01 $Snap)
(assert (= $t@94@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $q3@95@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 72 | !(0 <= $q3@95@01) | live]
; [else-branch: 72 | 0 <= $q3@95@01 | live]
(push) ; 5
; [then-branch: 72 | !(0 <= $q3@95@01)]
(assert (not (<= 0 $q3@95@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 72 | 0 <= $q3@95@01]
(assert (<= 0 $q3@95@01))
; [eval] $q3 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$2, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@95@01) (not (<= 0 $q3@95@01))))
(push) ; 4
; [then-branch: 73 | 0 <= $q3@95@01 && $q3@95@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))| | live]
; [else-branch: 73 | !(0 <= $q3@95@01 && $q3@95@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))|) | live]
(push) ; 5
; [then-branch: 73 | 0 <= $q3@95@01 && $q3@95@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))|]
(assert (and
  (<= 0 $q3@95@01)
  (<
    $q3@95@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))))))
; [eval] |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$2, 2)
(push) ; 6
(assert (not (>= $q3@95@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 73 | !(0 <= $q3@95@01 && $q3@95@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@95@01)
    (<
      $q3@95@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@95@01)
      (<
        $q3@95@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))))))
  (and
    (<= 0 $q3@95@01)
    (<
      $q3@95@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@95@01 Int)) (!
  (and
    (or (<= 0 $q3@95@01) (not (<= 0 $q3@95@01)))
    (or
      (not
        (and
          (<= 0 $q3@95@01)
          (<
            $q3@95@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))))))
      (and
        (<= 0 $q3@95@01)
        (<
          $q3@95@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
    $q3@95@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@708@11@708@251-aux|)))
(assert (forall (($q3@95@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@95@01)
      (<
        $q3@95@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
          $q3@95@01))
      2))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
    $q3@95@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@708@11@708@251|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 <
;       |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==
;       2))
(declare-const $t@96@01 $Snap)
(assert (= $t@96@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2))
(declare-const $q3@97@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 74 | !(0 <= $q3@97@01) | live]
; [else-branch: 74 | 0 <= $q3@97@01 | live]
(push) ; 5
; [then-branch: 74 | !(0 <= $q3@97@01)]
(assert (not (<= 0 $q3@97@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 74 | 0 <= $q3@97@01]
(assert (<= 0 $q3@97@01))
; [eval] $q3 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$2, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@97@01) (not (<= 0 $q3@97@01))))
(push) ; 4
; [then-branch: 75 | 0 <= $q3@97@01 && $q3@97@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))| | live]
; [else-branch: 75 | !(0 <= $q3@97@01 && $q3@97@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))|) | live]
(push) ; 5
; [then-branch: 75 | 0 <= $q3@97@01 && $q3@97@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))|]
(assert (and
  (<= 0 $q3@97@01)
  (<
    $q3@97@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
(declare-const $q4@98@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 76 | !(0 <= $q4@98@01) | live]
; [else-branch: 76 | 0 <= $q4@98@01 | live]
(push) ; 8
; [then-branch: 76 | !(0 <= $q4@98@01)]
(assert (not (<= 0 $q4@98@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 76 | 0 <= $q4@98@01]
(assert (<= 0 $q4@98@01))
; [eval] $q4 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$2, 2)
(push) ; 9
(assert (not (>= $q3@97@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@98@01) (not (<= 0 $q4@98@01))))
(push) ; 7
; [then-branch: 77 | 0 <= $q4@98@01 && $q4@98@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))[$q3@97@01]| | live]
; [else-branch: 77 | !(0 <= $q4@98@01 && $q4@98@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))[$q3@97@01]|) | live]
(push) ; 8
; [then-branch: 77 | 0 <= $q4@98@01 && $q4@98@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))[$q3@97@01]|]
(assert (and
  (<= 0 $q4@98@01)
  (<
    $q4@98@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
        $q3@97@01)))))
; [eval] |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$2, 2)
(push) ; 9
(assert (not (>= $q3@97@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q4@98@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 77 | !(0 <= $q4@98@01 && $q4@98@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))[$q3@97@01]|)]
(assert (not
  (and
    (<= 0 $q4@98@01)
    (<
      $q4@98@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
          $q3@97@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@98@01)
      (<
        $q4@98@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
            $q3@97@01)))))
  (and
    (<= 0 $q4@98@01)
    (<
      $q4@98@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
          $q3@97@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@98@01 Int)) (!
  (and
    (or (<= 0 $q4@98@01) (not (<= 0 $q4@98@01)))
    (or
      (not
        (and
          (<= 0 $q4@98@01)
          (<
            $q4@98@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                $q3@97@01)))))
      (and
        (<= 0 $q4@98@01)
        (<
          $q4@98@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
              $q3@97@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
      $q3@97@01)
    $q4@98@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@709@182@709@437-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 75 | !(0 <= $q3@97@01 && $q3@97@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@97@01)
    (<
      $q3@97@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@97@01)
    (<
      $q3@97@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2)))))
  (and
    (<= 0 $q3@97@01)
    (<
      $q3@97@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))))
    (forall (($q4@98@01 Int)) (!
      (and
        (or (<= 0 $q4@98@01) (not (<= 0 $q4@98@01)))
        (or
          (not
            (and
              (<= 0 $q4@98@01)
              (<
                $q4@98@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                    $q3@97@01)))))
          (and
            (<= 0 $q4@98@01)
            (<
              $q4@98@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                  $q3@97@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
          $q3@97@01)
        $q4@98@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@709@182@709@437-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@97@01)
      (<
        $q3@97@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))))))
  (and
    (<= 0 $q3@97@01)
    (<
      $q3@97@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@97@01 Int)) (!
  (and
    (or (<= 0 $q3@97@01) (not (<= 0 $q3@97@01)))
    (=>
      (and
        (<= 0 $q3@97@01)
        (<
          $q3@97@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2)))))
      (and
        (<= 0 $q3@97@01)
        (<
          $q3@97@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))))
        (forall (($q4@98@01 Int)) (!
          (and
            (or (<= 0 $q4@98@01) (not (<= 0 $q4@98@01)))
            (or
              (not
                (and
                  (<= 0 $q4@98@01)
                  (<
                    $q4@98@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                        $q3@97@01)))))
              (and
                (<= 0 $q4@98@01)
                (<
                  $q4@98@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                      $q3@97@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
              $q3@97@01)
            $q4@98@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@709@182@709@437-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@97@01)
          (<
            $q3@97@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))))))
      (and
        (<= 0 $q3@97@01)
        (<
          $q3@97@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
    $q3@97@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@709@11@709@438-aux|)))
(assert (forall (($q3@97@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@97@01)
      (<
        $q3@97@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2)))))
    (forall (($q4@98@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@98@01)
          (<
            $q4@98@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                $q3@97@01))))
        (=
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                $q3@97@01)
              $q4@98@01))
          2))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
          $q3@97@01)
        $q4@98@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@709@182@709@437|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
    $q3@97@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@709@11@709@438|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 <
;       |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       (forall $q5: Int ::
;         { ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] }
;         0 <= $q5 &&
;         $q5 <
;         |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==>
;         -170141183460469231731687303715884105728 <=
;         ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] &&
;         ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <=
;         170141183460469231731687303715884105727)))
(declare-const $t@99@01 $Snap)
(assert (= $t@99@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)))
(declare-const $q3@100@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 78 | !(0 <= $q3@100@01) | live]
; [else-branch: 78 | 0 <= $q3@100@01 | live]
(push) ; 5
; [then-branch: 78 | !(0 <= $q3@100@01)]
(assert (not (<= 0 $q3@100@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 78 | 0 <= $q3@100@01]
(assert (<= 0 $q3@100@01))
; [eval] $q3 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$2, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@100@01) (not (<= 0 $q3@100@01))))
(push) ; 4
; [then-branch: 79 | 0 <= $q3@100@01 && $q3@100@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))| | live]
; [else-branch: 79 | !(0 <= $q3@100@01 && $q3@100@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))|) | live]
(push) ; 5
; [then-branch: 79 | 0 <= $q3@100@01 && $q3@100@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))|]
(assert (and
  (<= 0 $q3@100@01)
  (<
    $q3@100@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
(declare-const $q4@101@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 80 | !(0 <= $q4@101@01) | live]
; [else-branch: 80 | 0 <= $q4@101@01 | live]
(push) ; 8
; [then-branch: 80 | !(0 <= $q4@101@01)]
(assert (not (<= 0 $q4@101@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 80 | 0 <= $q4@101@01]
(assert (<= 0 $q4@101@01))
; [eval] $q4 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$2, 2)
(push) ; 9
(assert (not (>= $q3@100@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@101@01) (not (<= 0 $q4@101@01))))
(push) ; 7
; [then-branch: 81 | 0 <= $q4@101@01 && $q4@101@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))[$q3@100@01]| | live]
; [else-branch: 81 | !(0 <= $q4@101@01 && $q4@101@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))[$q3@100@01]|) | live]
(push) ; 8
; [then-branch: 81 | 0 <= $q4@101@01 && $q4@101@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))[$q3@100@01]|]
(assert (and
  (<= 0 $q4@101@01)
  (<
    $q4@101@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
        $q3@100@01)))))
; [eval] (forall $q5: Int :: { ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
(declare-const $q5@102@01 Int)
(push) ; 9
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] 0 <= $q5
(push) ; 10
; [then-branch: 82 | !(0 <= $q5@102@01) | live]
; [else-branch: 82 | 0 <= $q5@102@01 | live]
(push) ; 11
; [then-branch: 82 | !(0 <= $q5@102@01)]
(assert (not (<= 0 $q5@102@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 82 | 0 <= $q5@102@01]
(assert (<= 0 $q5@102@01))
; [eval] $q5 < |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] |($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$2, 2)
(push) ; 12
(assert (not (>= $q3@100@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@101@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q5@102@01) (not (<= 0 $q5@102@01))))
(push) ; 10
; [then-branch: 83 | 0 <= $q5@102@01 && $q5@102@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))[$q3@100@01][$q4@101@01]| | live]
; [else-branch: 83 | !(0 <= $q5@102@01 && $q5@102@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))[$q3@100@01][$q4@101@01]|) | live]
(push) ; 11
; [then-branch: 83 | 0 <= $q5@102@01 && $q5@102@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))[$q3@100@01][$q4@101@01]|]
(assert (and
  (<= 0 $q5@102@01)
  (<
    $q5@102@01
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
          $q3@100@01)
        $q4@101@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$2, 2)
(push) ; 12
(assert (not (>= $q3@100@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@101@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q5@102@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 84 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))[$q3@100@01][$q4@101@01][$q5@102@01]) | live]
; [else-branch: 84 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))[$q3@100@01][$q4@101@01][$q5@102@01] | live]
(push) ; 13
; [then-branch: 84 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))[$q3@100@01][$q4@101@01][$q5@102@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
          $q3@100@01)
        $q4@101@01)
      $q5@102@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 84 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))[$q3@100@01][$q4@101@01][$q5@102@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
        $q3@100@01)
      $q4@101@01)
    $q5@102@01)))
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$2, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$2, 2)
(push) ; 14
(assert (not (>= $q3@100@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q4@101@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q5@102@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
          $q3@100@01)
        $q4@101@01)
      $q5@102@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
            $q3@100@01)
          $q4@101@01)
        $q5@102@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 83 | !(0 <= $q5@102@01 && $q5@102@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))[$q3@100@01][$q4@101@01]|)]
(assert (not
  (and
    (<= 0 $q5@102@01)
    (<
      $q5@102@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
            $q3@100@01)
          $q4@101@01))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q5@102@01)
    (<
      $q5@102@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
            $q3@100@01)
          $q4@101@01))))
  (and
    (<= 0 $q5@102@01)
    (<
      $q5@102@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
            $q3@100@01)
          $q4@101@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
              $q3@100@01)
            $q4@101@01)
          $q5@102@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                $q3@100@01)
              $q4@101@01)
            $q5@102@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q5@102@01)
      (<
        $q5@102@01
        (Seq_length
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
              $q3@100@01)
            $q4@101@01)))))
  (and
    (<= 0 $q5@102@01)
    (<
      $q5@102@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
            $q3@100@01)
          $q4@101@01))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@102@01 Int)) (!
  (and
    (or (<= 0 $q5@102@01) (not (<= 0 $q5@102@01)))
    (=>
      (and
        (<= 0 $q5@102@01)
        (<
          $q5@102@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                $q3@100@01)
              $q4@101@01))))
      (and
        (<= 0 $q5@102@01)
        (<
          $q5@102@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                $q3@100@01)
              $q4@101@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                  $q3@100@01)
                $q4@101@01)
              $q5@102@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                    $q3@100@01)
                  $q4@101@01)
                $q5@102@01))))))
    (or
      (not
        (and
          (<= 0 $q5@102@01)
          (<
            $q5@102@01
            (Seq_length
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                  $q3@100@01)
                $q4@101@01)))))
      (and
        (<= 0 $q5@102@01)
        (<
          $q5@102@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                $q3@100@01)
              $q4@101@01))))))
  :pattern ((Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
        $q3@100@01)
      $q4@101@01)
    $q5@102@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@710@363@710@790-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 81 | !(0 <= $q4@101@01 && $q4@101@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))[$q3@100@01]|)]
(assert (not
  (and
    (<= 0 $q4@101@01)
    (<
      $q4@101@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
          $q3@100@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q4@101@01)
    (<
      $q4@101@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
          $q3@100@01))))
  (and
    (<= 0 $q4@101@01)
    (<
      $q4@101@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
          $q3@100@01)))
    (forall (($q5@102@01 Int)) (!
      (and
        (or (<= 0 $q5@102@01) (not (<= 0 $q5@102@01)))
        (=>
          (and
            (<= 0 $q5@102@01)
            (<
              $q5@102@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                    $q3@100@01)
                  $q4@101@01))))
          (and
            (<= 0 $q5@102@01)
            (<
              $q5@102@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                    $q3@100@01)
                  $q4@101@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                      $q3@100@01)
                    $q4@101@01)
                  $q5@102@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                        $q3@100@01)
                      $q4@101@01)
                    $q5@102@01))))))
        (or
          (not
            (and
              (<= 0 $q5@102@01)
              (<
                $q5@102@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                      $q3@100@01)
                    $q4@101@01)))))
          (and
            (<= 0 $q5@102@01)
            (<
              $q5@102@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                    $q3@100@01)
                  $q4@101@01))))))
      :pattern ((Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
            $q3@100@01)
          $q4@101@01)
        $q5@102@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@710@363@710@790-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@101@01)
      (<
        $q4@101@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
            $q3@100@01)))))
  (and
    (<= 0 $q4@101@01)
    (<
      $q4@101@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
          $q3@100@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@101@01 Int)) (!
  (and
    (or (<= 0 $q4@101@01) (not (<= 0 $q4@101@01)))
    (=>
      (and
        (<= 0 $q4@101@01)
        (<
          $q4@101@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
              $q3@100@01))))
      (and
        (<= 0 $q4@101@01)
        (<
          $q4@101@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
              $q3@100@01)))
        (forall (($q5@102@01 Int)) (!
          (and
            (or (<= 0 $q5@102@01) (not (<= 0 $q5@102@01)))
            (=>
              (and
                (<= 0 $q5@102@01)
                (<
                  $q5@102@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                        $q3@100@01)
                      $q4@101@01))))
              (and
                (<= 0 $q5@102@01)
                (<
                  $q5@102@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                        $q3@100@01)
                      $q4@101@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                          $q3@100@01)
                        $q4@101@01)
                      $q5@102@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                            $q3@100@01)
                          $q4@101@01)
                        $q5@102@01))))))
            (or
              (not
                (and
                  (<= 0 $q5@102@01)
                  (<
                    $q5@102@01
                    (Seq_length
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                          $q3@100@01)
                        $q4@101@01)))))
              (and
                (<= 0 $q5@102@01)
                (<
                  $q5@102@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                        $q3@100@01)
                      $q4@101@01))))))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                $q3@100@01)
              $q4@101@01)
            $q5@102@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@710@363@710@790-aux|))))
    (or
      (not
        (and
          (<= 0 $q4@101@01)
          (<
            $q4@101@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                $q3@100@01)))))
      (and
        (<= 0 $q4@101@01)
        (<
          $q4@101@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
              $q3@100@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
      $q3@100@01)
    $q4@101@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@710@182@710@791-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 79 | !(0 <= $q3@100@01 && $q3@100@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$2@4@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@100@01)
    (<
      $q3@100@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@100@01)
    (<
      $q3@100@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2)))))
  (and
    (<= 0 $q3@100@01)
    (<
      $q3@100@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))))
    (forall (($q4@101@01 Int)) (!
      (and
        (or (<= 0 $q4@101@01) (not (<= 0 $q4@101@01)))
        (=>
          (and
            (<= 0 $q4@101@01)
            (<
              $q4@101@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                  $q3@100@01))))
          (and
            (<= 0 $q4@101@01)
            (<
              $q4@101@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                  $q3@100@01)))
            (forall (($q5@102@01 Int)) (!
              (and
                (or (<= 0 $q5@102@01) (not (<= 0 $q5@102@01)))
                (=>
                  (and
                    (<= 0 $q5@102@01)
                    (<
                      $q5@102@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                            $q3@100@01)
                          $q4@101@01))))
                  (and
                    (<= 0 $q5@102@01)
                    (<
                      $q5@102@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                            $q3@100@01)
                          $q4@101@01)))
                    (or
                      (<=
                        (- 0 170141183460469231731687303715884105728)
                        (Seq_index
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                              $q3@100@01)
                            $q4@101@01)
                          $q5@102@01))
                      (not
                        (<=
                          (- 0 170141183460469231731687303715884105728)
                          (Seq_index
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                                $q3@100@01)
                              $q4@101@01)
                            $q5@102@01))))))
                (or
                  (not
                    (and
                      (<= 0 $q5@102@01)
                      (<
                        $q5@102@01
                        (Seq_length
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                              $q3@100@01)
                            $q4@101@01)))))
                  (and
                    (<= 0 $q5@102@01)
                    (<
                      $q5@102@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                            $q3@100@01)
                          $q4@101@01))))))
              :pattern ((Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                    $q3@100@01)
                  $q4@101@01)
                $q5@102@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@710@363@710@790-aux|))))
        (or
          (not
            (and
              (<= 0 $q4@101@01)
              (<
                $q4@101@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                    $q3@100@01)))))
          (and
            (<= 0 $q4@101@01)
            (<
              $q4@101@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                  $q3@100@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
          $q3@100@01)
        $q4@101@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@710@182@710@791-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@100@01)
      (<
        $q3@100@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))))))
  (and
    (<= 0 $q3@100@01)
    (<
      $q3@100@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@100@01 Int)) (!
  (and
    (or (<= 0 $q3@100@01) (not (<= 0 $q3@100@01)))
    (=>
      (and
        (<= 0 $q3@100@01)
        (<
          $q3@100@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2)))))
      (and
        (<= 0 $q3@100@01)
        (<
          $q3@100@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))))
        (forall (($q4@101@01 Int)) (!
          (and
            (or (<= 0 $q4@101@01) (not (<= 0 $q4@101@01)))
            (=>
              (and
                (<= 0 $q4@101@01)
                (<
                  $q4@101@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                      $q3@100@01))))
              (and
                (<= 0 $q4@101@01)
                (<
                  $q4@101@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                      $q3@100@01)))
                (forall (($q5@102@01 Int)) (!
                  (and
                    (or (<= 0 $q5@102@01) (not (<= 0 $q5@102@01)))
                    (=>
                      (and
                        (<= 0 $q5@102@01)
                        (<
                          $q5@102@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                                $q3@100@01)
                              $q4@101@01))))
                      (and
                        (<= 0 $q5@102@01)
                        (<
                          $q5@102@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                                $q3@100@01)
                              $q4@101@01)))
                        (or
                          (<=
                            (- 0 170141183460469231731687303715884105728)
                            (Seq_index
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                                  $q3@100@01)
                                $q4@101@01)
                              $q5@102@01))
                          (not
                            (<=
                              (- 0 170141183460469231731687303715884105728)
                              (Seq_index
                                (Seq_index
                                  (Seq_index
                                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                                    $q3@100@01)
                                  $q4@101@01)
                                $q5@102@01))))))
                    (or
                      (not
                        (and
                          (<= 0 $q5@102@01)
                          (<
                            $q5@102@01
                            (Seq_length
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                                  $q3@100@01)
                                $q4@101@01)))))
                      (and
                        (<= 0 $q5@102@01)
                        (<
                          $q5@102@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                                $q3@100@01)
                              $q4@101@01))))))
                  :pattern ((Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                        $q3@100@01)
                      $q4@101@01)
                    $q5@102@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@710@363@710@790-aux|))))
            (or
              (not
                (and
                  (<= 0 $q4@101@01)
                  (<
                    $q4@101@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                        $q3@100@01)))))
              (and
                (<= 0 $q4@101@01)
                (<
                  $q4@101@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                      $q3@100@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
              $q3@100@01)
            $q4@101@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@710@182@710@791-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@100@01)
          (<
            $q3@100@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))))))
      (and
        (<= 0 $q3@100@01)
        (<
          $q3@100@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
    $q3@100@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@710@11@710@792-aux|)))
(assert (forall (($q3@100@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@100@01)
      (<
        $q3@100@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2)))))
    (forall (($q4@101@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@101@01)
          (<
            $q4@101@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                $q3@100@01))))
        (forall (($q5@102@01 Int)) (!
          (=>
            (and
              (<= 0 $q5@102@01)
              (<
                $q5@102@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                      $q3@100@01)
                    $q4@101@01))))
            (and
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                      $q3@100@01)
                    $q4@101@01)
                  $q5@102@01))
              (<=
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                      $q3@100@01)
                    $q4@101@01)
                  $q5@102@01)
                170141183460469231731687303715884105727)))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
                $q3@100@01)
              $q4@101@01)
            $q5@102@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@710@363@710@790|)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
          $q3@100@01)
        $q4@101@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@710@182@710@791|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$2@4@01 2))
    $q3@100@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@710@11@710@792|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$2, 3)): Seq[Int])| == 1000
(declare-const $t@103@01 $Snap)
(assert (= $t@103@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$2, 3)): Seq[Int])| == 1000
; [eval] |($struct_get($struct_loc($self$2, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$2, 3)): Seq[Int])
; [eval] $struct_loc($self$2, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3))) 1000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($struct_get($struct_loc($self$2, 3)): Seq[Int])[$q6] }
;     0 <= $q6 && $q6 < |($struct_get($struct_loc($self$2, 3)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc($self$2, 3)): Seq[Int])[$q6] &&
;     ($struct_get($struct_loc($self$2, 3)): Seq[Int])[$q6] <=
;     170141183460469231731687303715884105727)
(declare-const $t@104@01 $Snap)
(assert (= $t@104@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($struct_get($struct_loc($self$2, 3)): Seq[Int])[$q6] } 0 <= $q6 && $q6 < |($struct_get($struct_loc($self$2, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc($self$2, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727)
(declare-const $q6@105@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc($self$2, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc($self$2, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc($self$2, 3)): Seq[Int])|
; [eval] 0 <= $q6
(push) ; 4
; [then-branch: 85 | !(0 <= $q6@105@01) | live]
; [else-branch: 85 | 0 <= $q6@105@01 | live]
(push) ; 5
; [then-branch: 85 | !(0 <= $q6@105@01)]
(assert (not (<= 0 $q6@105@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 85 | 0 <= $q6@105@01]
(assert (<= 0 $q6@105@01))
; [eval] $q6 < |($struct_get($struct_loc($self$2, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc($self$2, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$2, 3)): Seq[Int])
; [eval] $struct_loc($self$2, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q6@105@01) (not (<= 0 $q6@105@01))))
(push) ; 4
; [then-branch: 86 | 0 <= $q6@105@01 && $q6@105@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$2@4@01, 3))| | live]
; [else-branch: 86 | !(0 <= $q6@105@01 && $q6@105@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$2@4@01, 3))|) | live]
(push) ; 5
; [then-branch: 86 | 0 <= $q6@105@01 && $q6@105@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$2@4@01, 3))|]
(assert (and
  (<= 0 $q6@105@01)
  (<
    $q6@105@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc($self$2, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 3)): Seq[Int])[$q6]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$2, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc($self$2, 3)): Seq[Int])
; [eval] $struct_loc($self$2, 3)
(push) ; 6
(assert (not (>= $q6@105@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 87 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$2@4@01, 3))[$q6@105@01]) | live]
; [else-branch: 87 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$2@4@01, 3))[$q6@105@01] | live]
(push) ; 7
; [then-branch: 87 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$2@4@01, 3))[$q6@105@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3))
      $q6@105@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 87 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$2@4@01, 3))[$q6@105@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3))
    $q6@105@01)))
; [eval] ($struct_get($struct_loc($self$2, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$2, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc($self$2, 3)): Seq[Int])
; [eval] $struct_loc($self$2, 3)
(push) ; 8
(assert (not (>= $q6@105@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3))
      $q6@105@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3))
        $q6@105@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 86 | !(0 <= $q6@105@01 && $q6@105@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$2@4@01, 3))|)]
(assert (not
  (and
    (<= 0 $q6@105@01)
    (<
      $q6@105@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q6@105@01)
    (<
      $q6@105@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3)))))
  (and
    (<= 0 $q6@105@01)
    (<
      $q6@105@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3))
          $q6@105@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3))
            $q6@105@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q6@105@01)
      (<
        $q6@105@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3))))))
  (and
    (<= 0 $q6@105@01)
    (<
      $q6@105@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@105@01 Int)) (!
  (and
    (or (<= 0 $q6@105@01) (not (<= 0 $q6@105@01)))
    (=>
      (and
        (<= 0 $q6@105@01)
        (<
          $q6@105@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3)))))
      (and
        (<= 0 $q6@105@01)
        (<
          $q6@105@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3))
              $q6@105@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3))
                $q6@105@01))))))
    (or
      (not
        (and
          (<= 0 $q6@105@01)
          (<
            $q6@105@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3))))))
      (and
        (<= 0 $q6@105@01)
        (<
          $q6@105@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3))
    $q6@105@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@712@11@712@358-aux|)))
(assert (forall (($q6@105@01 Int)) (!
  (=>
    (and
      (<= 0 $q6@105@01)
      (<
        $q6@105@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3))
          $q6@105@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3))
          $q6@105@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3))
    $q6@105@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@712@11@712@358|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]),
;     $q7): Seq[Int]) }
;     |($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]),
;     $q7): Seq[Int])| ==
;     10)
(declare-const $t@106@01 $Snap)
(assert (= $t@106@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } |($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10)
(declare-const $q7@107@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10
; [eval] |($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc($self$2, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@107@01 Int)) (!
  (=
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@107@01))
    10)
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@107@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@713@11@713@215|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]),
;     $q7): Seq[Int]) }
;     (forall $q8: Int ::
;       { ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] }
;       0 <= $q8 &&
;       $q8 <
;       |($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])| ==>
;       -170141183460469231731687303715884105728 <=
;       ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] &&
;       ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] <=
;       170141183460469231731687303715884105727))
(declare-const $t@108@01 $Snap)
(assert (= $t@108@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } (forall $q8: Int :: { ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727))
(declare-const $q7@109@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q8: Int :: { ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727)
(declare-const $q8@110@01 Int)
(push) ; 4
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] 0 <= $q8
(push) ; 5
; [then-branch: 88 | !(0 <= $q8@110@01) | live]
; [else-branch: 88 | 0 <= $q8@110@01 | live]
(push) ; 6
; [then-branch: 88 | !(0 <= $q8@110@01)]
(assert (not (<= 0 $q8@110@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 88 | 0 <= $q8@110@01]
(assert (<= 0 $q8@110@01))
; [eval] $q8 < |($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc($self$2, 4)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q8@110@01) (not (<= 0 $q8@110@01))))
(push) ; 5
; [then-branch: 89 | 0 <= $q8@110@01 && $q8@110@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$2@4@01, 4)), $q7@109@01)| | live]
; [else-branch: 89 | !(0 <= $q8@110@01 && $q8@110@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$2@4@01, 4)), $q7@109@01)|) | live]
(push) ; 6
; [then-branch: 89 | 0 <= $q8@110@01 && $q8@110@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$2@4@01, 4)), $q7@109@01)|]
(assert (and
  (<= 0 $q8@110@01)
  (<
    $q8@110@01
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] -170141183460469231731687303715884105728
; [eval] ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc($self$2, 4)
(push) ; 7
(assert (not (>= $q8@110@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 90 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$2@4@01, 4)), $q7@109@01)[$q8@110@01]) | live]
; [else-branch: 90 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$2@4@01, 4)), $q7@109@01)[$q8@110@01] | live]
(push) ; 8
; [then-branch: 90 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$2@4@01, 4)), $q7@109@01)[$q8@110@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01)
      $q8@110@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 90 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$2@4@01, 4)), $q7@109@01)[$q8@110@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01)
    $q8@110@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc($self$2, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc($self$2, 4)
(push) ; 9
(assert (not (>= $q8@110@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01)
      $q8@110@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01)
        $q8@110@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 89 | !(0 <= $q8@110@01 && $q8@110@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$2@4@01, 4)), $q7@109@01)|)]
(assert (not
  (and
    (<= 0 $q8@110@01)
    (<
      $q8@110@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q8@110@01)
    (<
      $q8@110@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01))))
  (and
    (<= 0 $q8@110@01)
    (<
      $q8@110@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01)
          $q8@110@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01)
            $q8@110@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q8@110@01)
      (<
        $q8@110@01
        (Seq_length
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01)))))
  (and
    (<= 0 $q8@110@01)
    (<
      $q8@110@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q8@110@01 Int)) (!
  (and
    (or (<= 0 $q8@110@01) (not (<= 0 $q8@110@01)))
    (=>
      (and
        (<= 0 $q8@110@01)
        (<
          $q8@110@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01))))
      (and
        (<= 0 $q8@110@01)
        (<
          $q8@110@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01)
              $q8@110@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01)
                $q8@110@01))))))
    (or
      (not
        (and
          (<= 0 $q8@110@01)
          (<
            $q8@110@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01)))))
      (and
        (<= 0 $q8@110@01)
        (<
          $q8@110@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01))))))
  :pattern ((Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01)
    $q8@110@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@714@122@714@621-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@109@01 Int)) (!
  (forall (($q8@110@01 Int)) (!
    (and
      (or (<= 0 $q8@110@01) (not (<= 0 $q8@110@01)))
      (=>
        (and
          (<= 0 $q8@110@01)
          (<
            $q8@110@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01))))
        (and
          (<= 0 $q8@110@01)
          (<
            $q8@110@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01)))
          (or
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01)
                $q8@110@01))
            (not
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01)
                  $q8@110@01))))))
      (or
        (not
          (and
            (<= 0 $q8@110@01)
            (<
              $q8@110@01
              (Seq_length
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01)))))
        (and
          (<= 0 $q8@110@01)
          (<
            $q8@110@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01))))))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01)
      $q8@110@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@714@122@714@621-aux|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@714@11@714@622-aux|)))
(assert (forall (($q7@109@01 Int)) (!
  (forall (($q8@110@01 Int)) (!
    (=>
      (and
        (<= 0 $q8@110@01)
        (<
          $q8@110@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01))))
      (and
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01)
            $q8@110@01))
        (<=
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01)
            $q8@110@01)
          170141183460469231731687303715884105727)))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01)
      $q8@110@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@714@122@714@621|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$2@4@01 4)) $q7@109@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@714@11@714@622|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$2, 5)): Int) &&
;   ($struct_get($struct_loc($self$2, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@111@01 $Snap)
(assert (= $t@111@01 ($Snap.combine ($Snap.first $t@111@01) ($Snap.second $t@111@01))))
(assert (= ($Snap.first $t@111@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] $struct_loc($self$2, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 5))))
(assert (= ($Snap.second $t@111@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$2, 5)): Int)
; [eval] $struct_loc($self$2, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$2, 6)): Int) &&
;   ($struct_get($struct_loc($self$2, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@112@01 $Snap)
(assert (= $t@112@01 ($Snap.combine ($Snap.first $t@112@01) ($Snap.second $t@112@01))))
(assert (= ($Snap.first $t@112@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$2, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$2, 6)): Int)
; [eval] $struct_loc($self$2, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 6))))
(assert (= ($Snap.second $t@112@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$2, 6)): Int)
; [eval] $struct_loc($self$2, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q9): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q9): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q9): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@113@01 $Snap)
(assert (= $t@113@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q9): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q9@114@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(push) ; 4
; [then-branch: 91 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q9@114@01)) | live]
; [else-branch: 91 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q9@114@01) | live]
(push) ; 5
; [then-branch: 91 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q9@114@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q9@114@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 91 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 8)), $q9@114@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q9@114@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q9@114@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q9@114@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@114@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q9@114@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q9@114@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q9@114@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@717@11@717@354-aux|)))
(assert (forall (($q9@114@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q9@114@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q9@114@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q9@114@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@717@11@717@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q9): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q9): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int))
(declare-const $t@115@01 $Snap)
(assert (= $t@115@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q9): Int) } ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int))
(declare-const $q9@116@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@116@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q9@116@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $q9@116@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@718@11@718@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q10): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q10): Int) &&
;     ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q10): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@117@01 $Snap)
(assert (= $t@117@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q10): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q10@118@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 9)
(push) ; 4
; [then-branch: 92 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 9)), $q10@118@01)) | live]
; [else-branch: 92 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 9)), $q10@118@01) | live]
(push) ; 5
; [then-branch: 92 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 9)), $q10@118@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q10@118@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 92 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$2@4@01, 9)), $q10@118@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q10@118@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q10@118@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q10@118@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@118@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q10@118@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q10@118@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q10@118@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@719@11@719@358-aux|)))
(assert (forall (($q10@118@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q10@118@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q10@118@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q10@118@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@719@11@719@358|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q10): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q10): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])): Int))
(declare-const $t@119@01 $Snap)
(assert (= $t@119@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q10): Int) } ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])): Int))
(declare-const $q10@120@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 9)
; [eval] ($map_sum(($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$2, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@120@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q10@120@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 9)) $q10@120@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@720@11@720@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@121@01 $Snap)
(assert (= $t@121@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$2, -1)): Int)
; [eval] $struct_loc($self$2, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$2@4@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@122@01 $Snap)
(assert (= $t@122@01 ($Snap.combine ($Snap.first $t@122@01) ($Snap.second $t@122@01))))
(assert (= ($Snap.first $t@122@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 0))))
(assert (= ($Snap.second $t@122@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@123@01 $Snap)
(assert (= $t@123@01 ($Snap.combine ($Snap.first $t@123@01) ($Snap.second $t@123@01))))
(assert (= ($Snap.first $t@123@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 1))))
(assert (= ($Snap.second $t@123@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@124@01 $Snap)
(assert (= $t@124@01 ($Snap.combine ($Snap.first $t@124@01) ($Snap.second $t@124@01))))
(assert (= ($Snap.first $t@124@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 2))))
(assert (= ($Snap.second $t@124@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@125@01 $Snap)
(assert (= $t@125@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@6@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@126@01 $Snap)
(assert (= $t@126@01 ($Snap.combine ($Snap.first $t@126@01) ($Snap.second $t@126@01))))
(assert (= ($Snap.first $t@126@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@6@01 4))))
(assert (= ($Snap.second $t@126@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@127@01 $Snap)
(assert (= $t@127@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@6@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@128@01 $Snap)
(assert (= $t@128@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@129@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($self$0, 3)): Seq[Int])
(declare-const $t@130@01 $Snap)
(assert (= $t@130@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 3)): Seq[Int]) == ($struct_get($struct_loc($self$0, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc($self$0, 3)): Seq[Int])
; [eval] $struct_loc($self$0, 3)
; [eval] ($struct_get($struct_loc($self$0, 3)): Seq[Int])
; [eval] $struct_loc($self$0, 3)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@131@01 $Snap)
(assert (= $t@131@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@132@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@132@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $a@132@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@0@01 8)) $a@132@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $a@132@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@730@11@730@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($self$0, 3)): Seq[Int])
(declare-const $t@133@01 $Snap)
(assert (= $t@133@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 3)): Seq[Int]) == ($struct_get($struct_loc($self$0, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc($self$1, 3)): Seq[Int])
; [eval] $struct_loc($self$1, 3)
; [eval] ($struct_get($struct_loc($self$0, 3)): Seq[Int])
; [eval] $struct_loc($self$0, 3)
(assert (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@134@01 $Snap)
(assert (= $t@134@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@135@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$2, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$2, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$2, 8)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@135@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $a@135@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@2@01 8)) $a@135@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$2@4@01 8)) $a@135@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@732@11@732@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$2, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($self$1, 3)): Seq[Int])
(declare-const $t@136@01 $Snap)
(assert (= $t@136@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$2, 3)): Seq[Int]) == ($struct_get($struct_loc($self$1, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc($self$2, 3)): Seq[Int])
; [eval] $struct_loc($self$2, 3)
; [eval] ($struct_get($struct_loc($self$1, 3)): Seq[Int])
; [eval] $struct_loc($self$1, 3)
(assert (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@2@01 3))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; assert ($struct_get($struct_loc($self$2, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($self$0, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc($self$2, 3)): Seq[Int]) == ($struct_get($struct_loc($self$0, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc($self$2, 3)): Seq[Int])
; [eval] $struct_loc($self$2, 3)
; [eval] ($struct_get($struct_loc($self$0, 3)): Seq[Int])
; [eval] $struct_loc($self$0, 3)
(set-option :timeout 0)
(push) ; 3
(assert (not (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> $self$2@4@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@0@01 3))))
(pop) ; 2
(pop) ; 1
; ---------- $reflexivity_check ----------
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var $self$0: $Struct
(declare-const $self$0@137@01 $Struct)
; [exec]
; var $$contracts$0: $Map[Int, $Struct]
(declare-const $$contracts$0@138@01 $Map<Int~_$Struct>)
; [exec]
; var $self$1: $Struct
(declare-const $self$1@139@01 $Struct)
; [exec]
; var $$contracts$1: $Map[Int, $Struct]
(declare-const $$contracts$1@140@01 $Map<Int~_$Struct>)
; [exec]
; var block: $Struct
(declare-const block@141@01 $Struct)
; [exec]
; var $post: Bool
(declare-const $post@142@01 Bool)
; [exec]
; inhale |($struct_get($struct_loc($self$0, 0)): Seq[Int])| == 12
(declare-const $t@143@01 $Snap)
(assert (= $t@143@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$0, 0)): Seq[Int])| == 12
; [eval] |($struct_get($struct_loc($self$0, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$0, 0)): Seq[Int])
; [eval] $struct_loc($self$0, 0)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 0))) 12))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0] }
;     0 <= $q0 && $q0 < |($struct_get($struct_loc($self$0, 0)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0] &&
;     ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0] <=
;     170141183460469231731687303715884105727)
(declare-const $t@144@01 $Snap)
(assert (= $t@144@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0] } 0 <= $q0 && $q0 < |($struct_get($struct_loc($self$0, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@145@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc($self$0, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc($self$0, 0)): Seq[Int])|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 93 | !(0 <= $q0@145@01) | live]
; [else-branch: 93 | 0 <= $q0@145@01 | live]
(push) ; 5
; [then-branch: 93 | !(0 <= $q0@145@01)]
(assert (not (<= 0 $q0@145@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 93 | 0 <= $q0@145@01]
(assert (<= 0 $q0@145@01))
; [eval] $q0 < |($struct_get($struct_loc($self$0, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc($self$0, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$0, 0)): Seq[Int])
; [eval] $struct_loc($self$0, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@145@01) (not (<= 0 $q0@145@01))))
(push) ; 4
; [then-branch: 94 | 0 <= $q0@145@01 && $q0@145@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$0@137@01, 0))| | live]
; [else-branch: 94 | !(0 <= $q0@145@01 && $q0@145@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$0@137@01, 0))|) | live]
(push) ; 5
; [then-branch: 94 | 0 <= $q0@145@01 && $q0@145@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$0@137@01, 0))|]
(assert (and
  (<= 0 $q0@145@01)
  (<
    $q0@145@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 0))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc($self$0, 0)): Seq[Int])
; [eval] $struct_loc($self$0, 0)
(push) ; 6
(assert (not (>= $q0@145@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 95 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$0@137@01, 0))[$q0@145@01]) | live]
; [else-branch: 95 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$0@137@01, 0))[$q0@145@01] | live]
(push) ; 7
; [then-branch: 95 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$0@137@01, 0))[$q0@145@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 0))
      $q0@145@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 95 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$0@137@01, 0))[$q0@145@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 0))
    $q0@145@01)))
; [eval] ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc($self$0, 0)): Seq[Int])
; [eval] $struct_loc($self$0, 0)
(push) ; 8
(assert (not (>= $q0@145@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 0))
      $q0@145@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 0))
        $q0@145@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 94 | !(0 <= $q0@145@01 && $q0@145@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$0@137@01, 0))|)]
(assert (not
  (and
    (<= 0 $q0@145@01)
    (<
      $q0@145@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 0)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q0@145@01)
    (<
      $q0@145@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 0)))))
  (and
    (<= 0 $q0@145@01)
    (<
      $q0@145@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 0))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 0))
          $q0@145@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 0))
            $q0@145@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q0@145@01)
      (<
        $q0@145@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 0))))))
  (and
    (<= 0 $q0@145@01)
    (<
      $q0@145@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 0)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@145@01 Int)) (!
  (and
    (or (<= 0 $q0@145@01) (not (<= 0 $q0@145@01)))
    (=>
      (and
        (<= 0 $q0@145@01)
        (<
          $q0@145@01
          (Seq_length
            ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 0)))))
      (and
        (<= 0 $q0@145@01)
        (<
          $q0@145@01
          (Seq_length
            ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 0))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 0))
              $q0@145@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 0))
                $q0@145@01))))))
    (or
      (not
        (and
          (<= 0 $q0@145@01)
          (<
            $q0@145@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 0))))))
      (and
        (<= 0 $q0@145@01)
        (<
          $q0@145@01
          (Seq_length
            ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 0)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 0))
    $q0@145@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@746@11@746@358-aux|)))
(assert (forall (($q0@145@01 Int)) (!
  (=>
    (and
      (<= 0 $q0@145@01)
      (<
        $q0@145@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 0)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 0))
          $q0@145@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 0))
          $q0@145@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 0))
    $q0@145@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@746@11@746@358|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])| == 12
(declare-const $t@146@01 $Snap)
(assert (= $t@146@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])| == 12
; [eval] |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$0, 1)
(assert (=
  (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1)))
  12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 &&
;     $q1 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])| ==>
;     |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $t@147@01 $Snap)
(assert (= $t@147@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $q1@148@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 96 | !(0 <= $q1@148@01) | live]
; [else-branch: 96 | 0 <= $q1@148@01 | live]
(push) ; 5
; [then-branch: 96 | !(0 <= $q1@148@01)]
(assert (not (<= 0 $q1@148@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 96 | 0 <= $q1@148@01]
(assert (<= 0 $q1@148@01))
; [eval] $q1 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$0, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@148@01) (not (<= 0 $q1@148@01))))
(push) ; 4
; [then-branch: 97 | 0 <= $q1@148@01 && $q1@148@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@137@01, 1))| | live]
; [else-branch: 97 | !(0 <= $q1@148@01 && $q1@148@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@137@01, 1))|) | live]
(push) ; 5
; [then-branch: 97 | 0 <= $q1@148@01 && $q1@148@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@137@01, 1))|]
(assert (and
  (<= 0 $q1@148@01)
  (<
    $q1@148@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))))))
; [eval] |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$0, 1)
(push) ; 6
(assert (not (>= $q1@148@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 97 | !(0 <= $q1@148@01 && $q1@148@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@137@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@148@01)
    (<
      $q1@148@01
      (Seq_length
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@148@01)
      (<
        $q1@148@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))))))
  (and
    (<= 0 $q1@148@01)
    (<
      $q1@148@01
      (Seq_length
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@148@01 Int)) (!
  (and
    (or (<= 0 $q1@148@01) (not (<= 0 $q1@148@01)))
    (or
      (not
        (and
          (<= 0 $q1@148@01)
          (<
            $q1@148@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))))))
      (and
        (<= 0 $q1@148@01)
        (<
          $q1@148@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
    $q1@148@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@748@11@748@237-aux|)))
(assert (forall (($q1@148@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@148@01)
      (<
        $q1@148@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
          $q1@148@01))
      12))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
    $q1@148@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@748@11@748@237|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 &&
;     $q1 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])| ==>
;     (forall $q2: Int ::
;       { ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] }
;       0 <= $q2 &&
;       $q2 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]| ==>
;       -170141183460469231731687303715884105728 <=
;       ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] &&
;       ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] <=
;       170141183460469231731687303715884105727))
(declare-const $t@149@01 $Snap)
(assert (= $t@149@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727))
(declare-const $q1@150@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 98 | !(0 <= $q1@150@01) | live]
; [else-branch: 98 | 0 <= $q1@150@01 | live]
(push) ; 5
; [then-branch: 98 | !(0 <= $q1@150@01)]
(assert (not (<= 0 $q1@150@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 98 | 0 <= $q1@150@01]
(assert (<= 0 $q1@150@01))
; [eval] $q1 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$0, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@150@01) (not (<= 0 $q1@150@01))))
(push) ; 4
; [then-branch: 99 | 0 <= $q1@150@01 && $q1@150@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@137@01, 1))| | live]
; [else-branch: 99 | !(0 <= $q1@150@01 && $q1@150@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@137@01, 1))|) | live]
(push) ; 5
; [then-branch: 99 | 0 <= $q1@150@01 && $q1@150@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@137@01, 1))|]
(assert (and
  (<= 0 $q1@150@01)
  (<
    $q1@150@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))))))
; [eval] (forall $q2: Int :: { ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
(declare-const $q2@151@01 Int)
(push) ; 6
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]|
; [eval] 0 <= $q2
(push) ; 7
; [then-branch: 100 | !(0 <= $q2@151@01) | live]
; [else-branch: 100 | 0 <= $q2@151@01 | live]
(push) ; 8
; [then-branch: 100 | !(0 <= $q2@151@01)]
(assert (not (<= 0 $q2@151@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 100 | 0 <= $q2@151@01]
(assert (<= 0 $q2@151@01))
; [eval] $q2 < |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]|
; [eval] |($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$0, 1)
(push) ; 9
(assert (not (>= $q1@150@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q2@151@01) (not (<= 0 $q2@151@01))))
(push) ; 7
; [then-branch: 101 | 0 <= $q2@151@01 && $q2@151@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@137@01, 1))[$q1@150@01]| | live]
; [else-branch: 101 | !(0 <= $q2@151@01 && $q2@151@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@137@01, 1))[$q1@150@01]|) | live]
(push) ; 8
; [then-branch: 101 | 0 <= $q2@151@01 && $q2@151@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@137@01, 1))[$q1@150@01]|]
(assert (and
  (<= 0 $q2@151@01)
  (<
    $q2@151@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
        $q1@150@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$0, 1)
(push) ; 9
(assert (not (>= $q1@150@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q2@151@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 102 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@137@01, 1))[$q1@150@01][$q2@151@01]) | live]
; [else-branch: 102 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@137@01, 1))[$q1@150@01][$q2@151@01] | live]
(push) ; 10
; [then-branch: 102 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@137@01, 1))[$q1@150@01][$q2@151@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
        $q1@150@01)
      $q2@151@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 102 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@137@01, 1))[$q1@150@01][$q2@151@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
      $q1@150@01)
    $q2@151@01)))
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc($self$0, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$0, 1)
(push) ; 11
(assert (not (>= $q1@150@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= $q2@151@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
        $q1@150@01)
      $q2@151@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
          $q1@150@01)
        $q2@151@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 101 | !(0 <= $q2@151@01 && $q2@151@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@137@01, 1))[$q1@150@01]|)]
(assert (not
  (and
    (<= 0 $q2@151@01)
    (<
      $q2@151@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
          $q1@150@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q2@151@01)
    (<
      $q2@151@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
          $q1@150@01))))
  (and
    (<= 0 $q2@151@01)
    (<
      $q2@151@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
          $q1@150@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
            $q1@150@01)
          $q2@151@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
              $q1@150@01)
            $q2@151@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q2@151@01)
      (<
        $q2@151@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
            $q1@150@01)))))
  (and
    (<= 0 $q2@151@01)
    (<
      $q2@151@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
          $q1@150@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@151@01 Int)) (!
  (and
    (or (<= 0 $q2@151@01) (not (<= 0 $q2@151@01)))
    (=>
      (and
        (<= 0 $q2@151@01)
        (<
          $q2@151@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
              $q1@150@01))))
      (and
        (<= 0 $q2@151@01)
        (<
          $q2@151@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
              $q1@150@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
                $q1@150@01)
              $q2@151@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
                  $q1@150@01)
                $q2@151@01))))))
    (or
      (not
        (and
          (<= 0 $q2@151@01)
          (<
            $q2@151@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
                $q1@150@01)))))
      (and
        (<= 0 $q2@151@01)
        (<
          $q2@151@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
              $q1@150@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
      $q1@150@01)
    $q2@151@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@749@172@749@559-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 99 | !(0 <= $q1@150@01 && $q1@150@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$0@137@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@150@01)
    (<
      $q1@150@01
      (Seq_length
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q1@150@01)
    (<
      $q1@150@01
      (Seq_length
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1)))))
  (and
    (<= 0 $q1@150@01)
    (<
      $q1@150@01
      (Seq_length
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))))
    (forall (($q2@151@01 Int)) (!
      (and
        (or (<= 0 $q2@151@01) (not (<= 0 $q2@151@01)))
        (=>
          (and
            (<= 0 $q2@151@01)
            (<
              $q2@151@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
                  $q1@150@01))))
          (and
            (<= 0 $q2@151@01)
            (<
              $q2@151@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
                  $q1@150@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
                    $q1@150@01)
                  $q2@151@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
                      $q1@150@01)
                    $q2@151@01))))))
        (or
          (not
            (and
              (<= 0 $q2@151@01)
              (<
                $q2@151@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
                    $q1@150@01)))))
          (and
            (<= 0 $q2@151@01)
            (<
              $q2@151@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
                  $q1@150@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
          $q1@150@01)
        $q2@151@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@749@172@749@559-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@150@01)
      (<
        $q1@150@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))))))
  (and
    (<= 0 $q1@150@01)
    (<
      $q1@150@01
      (Seq_length
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@150@01 Int)) (!
  (and
    (or (<= 0 $q1@150@01) (not (<= 0 $q1@150@01)))
    (=>
      (and
        (<= 0 $q1@150@01)
        (<
          $q1@150@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1)))))
      (and
        (<= 0 $q1@150@01)
        (<
          $q1@150@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))))
        (forall (($q2@151@01 Int)) (!
          (and
            (or (<= 0 $q2@151@01) (not (<= 0 $q2@151@01)))
            (=>
              (and
                (<= 0 $q2@151@01)
                (<
                  $q2@151@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
                      $q1@150@01))))
              (and
                (<= 0 $q2@151@01)
                (<
                  $q2@151@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
                      $q1@150@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
                        $q1@150@01)
                      $q2@151@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
                          $q1@150@01)
                        $q2@151@01))))))
            (or
              (not
                (and
                  (<= 0 $q2@151@01)
                  (<
                    $q2@151@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
                        $q1@150@01)))))
              (and
                (<= 0 $q2@151@01)
                (<
                  $q2@151@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
                      $q1@150@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
              $q1@150@01)
            $q2@151@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@749@172@749@559-aux|))))
    (or
      (not
        (and
          (<= 0 $q1@150@01)
          (<
            $q1@150@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))))))
      (and
        (<= 0 $q1@150@01)
        (<
          $q1@150@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
    $q1@150@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@749@11@749@560-aux|)))
(assert (forall (($q1@150@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@150@01)
      (<
        $q1@150@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1)))))
    (forall (($q2@151@01 Int)) (!
      (=>
        (and
          (<= 0 $q2@151@01)
          (<
            $q2@151@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
                $q1@150@01))))
        (and
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
                $q1@150@01)
              $q2@151@01))
          (<=
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
                $q1@150@01)
              $q2@151@01)
            170141183460469231731687303715884105727)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
          $q1@150@01)
        $q2@151@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@749@172@749@559|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$0@137@01 1))
    $q1@150@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@749@11@749@560|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])| == 2
(declare-const $t@152@01 $Snap)
(assert (= $t@152@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])| == 2
; [eval] |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$0, 2)
(assert (=
  (Seq_length
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2)))
  2))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])| ==>
;     |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $t@153@01 $Snap)
(assert (= $t@153@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $q3@154@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 103 | !(0 <= $q3@154@01) | live]
; [else-branch: 103 | 0 <= $q3@154@01 | live]
(push) ; 5
; [then-branch: 103 | !(0 <= $q3@154@01)]
(assert (not (<= 0 $q3@154@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 103 | 0 <= $q3@154@01]
(assert (<= 0 $q3@154@01))
; [eval] $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$0, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@154@01) (not (<= 0 $q3@154@01))))
(push) ; 4
; [then-branch: 104 | 0 <= $q3@154@01 && $q3@154@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))| | live]
; [else-branch: 104 | !(0 <= $q3@154@01 && $q3@154@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))|) | live]
(push) ; 5
; [then-branch: 104 | 0 <= $q3@154@01 && $q3@154@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))|]
(assert (and
  (<= 0 $q3@154@01)
  (<
    $q3@154@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))))))
; [eval] |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$0, 2)
(push) ; 6
(assert (not (>= $q3@154@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 104 | !(0 <= $q3@154@01 && $q3@154@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@154@01)
    (<
      $q3@154@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@154@01)
      (<
        $q3@154@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))))))
  (and
    (<= 0 $q3@154@01)
    (<
      $q3@154@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@154@01 Int)) (!
  (and
    (or (<= 0 $q3@154@01) (not (<= 0 $q3@154@01)))
    (or
      (not
        (and
          (<= 0 $q3@154@01)
          (<
            $q3@154@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))))))
      (and
        (<= 0 $q3@154@01)
        (<
          $q3@154@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
    $q3@154@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@751@11@751@251-aux|)))
(assert (forall (($q3@154@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@154@01)
      (<
        $q3@154@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
          $q3@154@01))
      2))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
    $q3@154@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@751@11@751@251|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 <
;       |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==
;       2))
(declare-const $t@155@01 $Snap)
(assert (= $t@155@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2))
(declare-const $q3@156@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 105 | !(0 <= $q3@156@01) | live]
; [else-branch: 105 | 0 <= $q3@156@01 | live]
(push) ; 5
; [then-branch: 105 | !(0 <= $q3@156@01)]
(assert (not (<= 0 $q3@156@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 105 | 0 <= $q3@156@01]
(assert (<= 0 $q3@156@01))
; [eval] $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$0, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@156@01) (not (<= 0 $q3@156@01))))
(push) ; 4
; [then-branch: 106 | 0 <= $q3@156@01 && $q3@156@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))| | live]
; [else-branch: 106 | !(0 <= $q3@156@01 && $q3@156@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))|) | live]
(push) ; 5
; [then-branch: 106 | 0 <= $q3@156@01 && $q3@156@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))|]
(assert (and
  (<= 0 $q3@156@01)
  (<
    $q3@156@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
(declare-const $q4@157@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 107 | !(0 <= $q4@157@01) | live]
; [else-branch: 107 | 0 <= $q4@157@01 | live]
(push) ; 8
; [then-branch: 107 | !(0 <= $q4@157@01)]
(assert (not (<= 0 $q4@157@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 107 | 0 <= $q4@157@01]
(assert (<= 0 $q4@157@01))
; [eval] $q4 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$0, 2)
(push) ; 9
(assert (not (>= $q3@156@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@157@01) (not (<= 0 $q4@157@01))))
(push) ; 7
; [then-branch: 108 | 0 <= $q4@157@01 && $q4@157@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))[$q3@156@01]| | live]
; [else-branch: 108 | !(0 <= $q4@157@01 && $q4@157@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))[$q3@156@01]|) | live]
(push) ; 8
; [then-branch: 108 | 0 <= $q4@157@01 && $q4@157@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))[$q3@156@01]|]
(assert (and
  (<= 0 $q4@157@01)
  (<
    $q4@157@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
        $q3@156@01)))))
; [eval] |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$0, 2)
(push) ; 9
(assert (not (>= $q3@156@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q4@157@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 108 | !(0 <= $q4@157@01 && $q4@157@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))[$q3@156@01]|)]
(assert (not
  (and
    (<= 0 $q4@157@01)
    (<
      $q4@157@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
          $q3@156@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@157@01)
      (<
        $q4@157@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
            $q3@156@01)))))
  (and
    (<= 0 $q4@157@01)
    (<
      $q4@157@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
          $q3@156@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@157@01 Int)) (!
  (and
    (or (<= 0 $q4@157@01) (not (<= 0 $q4@157@01)))
    (or
      (not
        (and
          (<= 0 $q4@157@01)
          (<
            $q4@157@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                $q3@156@01)))))
      (and
        (<= 0 $q4@157@01)
        (<
          $q4@157@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
              $q3@156@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
      $q3@156@01)
    $q4@157@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@752@182@752@437-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 106 | !(0 <= $q3@156@01 && $q3@156@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@156@01)
    (<
      $q3@156@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@156@01)
    (<
      $q3@156@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2)))))
  (and
    (<= 0 $q3@156@01)
    (<
      $q3@156@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))))
    (forall (($q4@157@01 Int)) (!
      (and
        (or (<= 0 $q4@157@01) (not (<= 0 $q4@157@01)))
        (or
          (not
            (and
              (<= 0 $q4@157@01)
              (<
                $q4@157@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                    $q3@156@01)))))
          (and
            (<= 0 $q4@157@01)
            (<
              $q4@157@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                  $q3@156@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
          $q3@156@01)
        $q4@157@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@752@182@752@437-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@156@01)
      (<
        $q3@156@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))))))
  (and
    (<= 0 $q3@156@01)
    (<
      $q3@156@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@156@01 Int)) (!
  (and
    (or (<= 0 $q3@156@01) (not (<= 0 $q3@156@01)))
    (=>
      (and
        (<= 0 $q3@156@01)
        (<
          $q3@156@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2)))))
      (and
        (<= 0 $q3@156@01)
        (<
          $q3@156@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))))
        (forall (($q4@157@01 Int)) (!
          (and
            (or (<= 0 $q4@157@01) (not (<= 0 $q4@157@01)))
            (or
              (not
                (and
                  (<= 0 $q4@157@01)
                  (<
                    $q4@157@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                        $q3@156@01)))))
              (and
                (<= 0 $q4@157@01)
                (<
                  $q4@157@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                      $q3@156@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
              $q3@156@01)
            $q4@157@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@752@182@752@437-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@156@01)
          (<
            $q3@156@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))))))
      (and
        (<= 0 $q3@156@01)
        (<
          $q3@156@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
    $q3@156@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@752@11@752@438-aux|)))
(assert (forall (($q3@156@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@156@01)
      (<
        $q3@156@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2)))))
    (forall (($q4@157@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@157@01)
          (<
            $q4@157@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                $q3@156@01))))
        (=
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                $q3@156@01)
              $q4@157@01))
          2))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
          $q3@156@01)
        $q4@157@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@752@182@752@437|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
    $q3@156@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@752@11@752@438|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 <
;       |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       (forall $q5: Int ::
;         { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] }
;         0 <= $q5 &&
;         $q5 <
;         |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==>
;         -170141183460469231731687303715884105728 <=
;         ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] &&
;         ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <=
;         170141183460469231731687303715884105727)))
(declare-const $t@158@01 $Snap)
(assert (= $t@158@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)))
(declare-const $q3@159@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 109 | !(0 <= $q3@159@01) | live]
; [else-branch: 109 | 0 <= $q3@159@01 | live]
(push) ; 5
; [then-branch: 109 | !(0 <= $q3@159@01)]
(assert (not (<= 0 $q3@159@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 109 | 0 <= $q3@159@01]
(assert (<= 0 $q3@159@01))
; [eval] $q3 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$0, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@159@01) (not (<= 0 $q3@159@01))))
(push) ; 4
; [then-branch: 110 | 0 <= $q3@159@01 && $q3@159@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))| | live]
; [else-branch: 110 | !(0 <= $q3@159@01 && $q3@159@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))|) | live]
(push) ; 5
; [then-branch: 110 | 0 <= $q3@159@01 && $q3@159@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))|]
(assert (and
  (<= 0 $q3@159@01)
  (<
    $q3@159@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
(declare-const $q4@160@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 111 | !(0 <= $q4@160@01) | live]
; [else-branch: 111 | 0 <= $q4@160@01 | live]
(push) ; 8
; [then-branch: 111 | !(0 <= $q4@160@01)]
(assert (not (<= 0 $q4@160@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 111 | 0 <= $q4@160@01]
(assert (<= 0 $q4@160@01))
; [eval] $q4 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$0, 2)
(push) ; 9
(assert (not (>= $q3@159@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@160@01) (not (<= 0 $q4@160@01))))
(push) ; 7
; [then-branch: 112 | 0 <= $q4@160@01 && $q4@160@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))[$q3@159@01]| | live]
; [else-branch: 112 | !(0 <= $q4@160@01 && $q4@160@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))[$q3@159@01]|) | live]
(push) ; 8
; [then-branch: 112 | 0 <= $q4@160@01 && $q4@160@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))[$q3@159@01]|]
(assert (and
  (<= 0 $q4@160@01)
  (<
    $q4@160@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
        $q3@159@01)))))
; [eval] (forall $q5: Int :: { ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
(declare-const $q5@161@01 Int)
(push) ; 9
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] 0 <= $q5
(push) ; 10
; [then-branch: 113 | !(0 <= $q5@161@01) | live]
; [else-branch: 113 | 0 <= $q5@161@01 | live]
(push) ; 11
; [then-branch: 113 | !(0 <= $q5@161@01)]
(assert (not (<= 0 $q5@161@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 113 | 0 <= $q5@161@01]
(assert (<= 0 $q5@161@01))
; [eval] $q5 < |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] |($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$0, 2)
(push) ; 12
(assert (not (>= $q3@159@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@160@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q5@161@01) (not (<= 0 $q5@161@01))))
(push) ; 10
; [then-branch: 114 | 0 <= $q5@161@01 && $q5@161@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))[$q3@159@01][$q4@160@01]| | live]
; [else-branch: 114 | !(0 <= $q5@161@01 && $q5@161@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))[$q3@159@01][$q4@160@01]|) | live]
(push) ; 11
; [then-branch: 114 | 0 <= $q5@161@01 && $q5@161@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))[$q3@159@01][$q4@160@01]|]
(assert (and
  (<= 0 $q5@161@01)
  (<
    $q5@161@01
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
          $q3@159@01)
        $q4@160@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$0, 2)
(push) ; 12
(assert (not (>= $q3@159@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@160@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q5@161@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 115 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))[$q3@159@01][$q4@160@01][$q5@161@01]) | live]
; [else-branch: 115 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))[$q3@159@01][$q4@160@01][$q5@161@01] | live]
(push) ; 13
; [then-branch: 115 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))[$q3@159@01][$q4@160@01][$q5@161@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
          $q3@159@01)
        $q4@160@01)
      $q5@161@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 115 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))[$q3@159@01][$q4@160@01][$q5@161@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
        $q3@159@01)
      $q4@160@01)
    $q5@161@01)))
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$0, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$0, 2)
(push) ; 14
(assert (not (>= $q3@159@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q4@160@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q5@161@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
          $q3@159@01)
        $q4@160@01)
      $q5@161@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
            $q3@159@01)
          $q4@160@01)
        $q5@161@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 114 | !(0 <= $q5@161@01 && $q5@161@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))[$q3@159@01][$q4@160@01]|)]
(assert (not
  (and
    (<= 0 $q5@161@01)
    (<
      $q5@161@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
            $q3@159@01)
          $q4@160@01))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q5@161@01)
    (<
      $q5@161@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
            $q3@159@01)
          $q4@160@01))))
  (and
    (<= 0 $q5@161@01)
    (<
      $q5@161@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
            $q3@159@01)
          $q4@160@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
              $q3@159@01)
            $q4@160@01)
          $q5@161@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                $q3@159@01)
              $q4@160@01)
            $q5@161@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q5@161@01)
      (<
        $q5@161@01
        (Seq_length
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
              $q3@159@01)
            $q4@160@01)))))
  (and
    (<= 0 $q5@161@01)
    (<
      $q5@161@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
            $q3@159@01)
          $q4@160@01))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@161@01 Int)) (!
  (and
    (or (<= 0 $q5@161@01) (not (<= 0 $q5@161@01)))
    (=>
      (and
        (<= 0 $q5@161@01)
        (<
          $q5@161@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                $q3@159@01)
              $q4@160@01))))
      (and
        (<= 0 $q5@161@01)
        (<
          $q5@161@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                $q3@159@01)
              $q4@160@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                  $q3@159@01)
                $q4@160@01)
              $q5@161@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                    $q3@159@01)
                  $q4@160@01)
                $q5@161@01))))))
    (or
      (not
        (and
          (<= 0 $q5@161@01)
          (<
            $q5@161@01
            (Seq_length
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                  $q3@159@01)
                $q4@160@01)))))
      (and
        (<= 0 $q5@161@01)
        (<
          $q5@161@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                $q3@159@01)
              $q4@160@01))))))
  :pattern ((Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
        $q3@159@01)
      $q4@160@01)
    $q5@161@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@753@363@753@790-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 112 | !(0 <= $q4@160@01 && $q4@160@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))[$q3@159@01]|)]
(assert (not
  (and
    (<= 0 $q4@160@01)
    (<
      $q4@160@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
          $q3@159@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q4@160@01)
    (<
      $q4@160@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
          $q3@159@01))))
  (and
    (<= 0 $q4@160@01)
    (<
      $q4@160@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
          $q3@159@01)))
    (forall (($q5@161@01 Int)) (!
      (and
        (or (<= 0 $q5@161@01) (not (<= 0 $q5@161@01)))
        (=>
          (and
            (<= 0 $q5@161@01)
            (<
              $q5@161@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                    $q3@159@01)
                  $q4@160@01))))
          (and
            (<= 0 $q5@161@01)
            (<
              $q5@161@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                    $q3@159@01)
                  $q4@160@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                      $q3@159@01)
                    $q4@160@01)
                  $q5@161@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                        $q3@159@01)
                      $q4@160@01)
                    $q5@161@01))))))
        (or
          (not
            (and
              (<= 0 $q5@161@01)
              (<
                $q5@161@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                      $q3@159@01)
                    $q4@160@01)))))
          (and
            (<= 0 $q5@161@01)
            (<
              $q5@161@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                    $q3@159@01)
                  $q4@160@01))))))
      :pattern ((Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
            $q3@159@01)
          $q4@160@01)
        $q5@161@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@753@363@753@790-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@160@01)
      (<
        $q4@160@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
            $q3@159@01)))))
  (and
    (<= 0 $q4@160@01)
    (<
      $q4@160@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
          $q3@159@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@160@01 Int)) (!
  (and
    (or (<= 0 $q4@160@01) (not (<= 0 $q4@160@01)))
    (=>
      (and
        (<= 0 $q4@160@01)
        (<
          $q4@160@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
              $q3@159@01))))
      (and
        (<= 0 $q4@160@01)
        (<
          $q4@160@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
              $q3@159@01)))
        (forall (($q5@161@01 Int)) (!
          (and
            (or (<= 0 $q5@161@01) (not (<= 0 $q5@161@01)))
            (=>
              (and
                (<= 0 $q5@161@01)
                (<
                  $q5@161@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                        $q3@159@01)
                      $q4@160@01))))
              (and
                (<= 0 $q5@161@01)
                (<
                  $q5@161@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                        $q3@159@01)
                      $q4@160@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                          $q3@159@01)
                        $q4@160@01)
                      $q5@161@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                            $q3@159@01)
                          $q4@160@01)
                        $q5@161@01))))))
            (or
              (not
                (and
                  (<= 0 $q5@161@01)
                  (<
                    $q5@161@01
                    (Seq_length
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                          $q3@159@01)
                        $q4@160@01)))))
              (and
                (<= 0 $q5@161@01)
                (<
                  $q5@161@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                        $q3@159@01)
                      $q4@160@01))))))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                $q3@159@01)
              $q4@160@01)
            $q5@161@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@753@363@753@790-aux|))))
    (or
      (not
        (and
          (<= 0 $q4@160@01)
          (<
            $q4@160@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                $q3@159@01)))))
      (and
        (<= 0 $q4@160@01)
        (<
          $q4@160@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
              $q3@159@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
      $q3@159@01)
    $q4@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@753@182@753@791-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 110 | !(0 <= $q3@159@01 && $q3@159@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$0@137@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@159@01)
    (<
      $q3@159@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@159@01)
    (<
      $q3@159@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2)))))
  (and
    (<= 0 $q3@159@01)
    (<
      $q3@159@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))))
    (forall (($q4@160@01 Int)) (!
      (and
        (or (<= 0 $q4@160@01) (not (<= 0 $q4@160@01)))
        (=>
          (and
            (<= 0 $q4@160@01)
            (<
              $q4@160@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                  $q3@159@01))))
          (and
            (<= 0 $q4@160@01)
            (<
              $q4@160@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                  $q3@159@01)))
            (forall (($q5@161@01 Int)) (!
              (and
                (or (<= 0 $q5@161@01) (not (<= 0 $q5@161@01)))
                (=>
                  (and
                    (<= 0 $q5@161@01)
                    (<
                      $q5@161@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                            $q3@159@01)
                          $q4@160@01))))
                  (and
                    (<= 0 $q5@161@01)
                    (<
                      $q5@161@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                            $q3@159@01)
                          $q4@160@01)))
                    (or
                      (<=
                        (- 0 170141183460469231731687303715884105728)
                        (Seq_index
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                              $q3@159@01)
                            $q4@160@01)
                          $q5@161@01))
                      (not
                        (<=
                          (- 0 170141183460469231731687303715884105728)
                          (Seq_index
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                                $q3@159@01)
                              $q4@160@01)
                            $q5@161@01))))))
                (or
                  (not
                    (and
                      (<= 0 $q5@161@01)
                      (<
                        $q5@161@01
                        (Seq_length
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                              $q3@159@01)
                            $q4@160@01)))))
                  (and
                    (<= 0 $q5@161@01)
                    (<
                      $q5@161@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                            $q3@159@01)
                          $q4@160@01))))))
              :pattern ((Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                    $q3@159@01)
                  $q4@160@01)
                $q5@161@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@753@363@753@790-aux|))))
        (or
          (not
            (and
              (<= 0 $q4@160@01)
              (<
                $q4@160@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                    $q3@159@01)))))
          (and
            (<= 0 $q4@160@01)
            (<
              $q4@160@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                  $q3@159@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
          $q3@159@01)
        $q4@160@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@753@182@753@791-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@159@01)
      (<
        $q3@159@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))))))
  (and
    (<= 0 $q3@159@01)
    (<
      $q3@159@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@159@01 Int)) (!
  (and
    (or (<= 0 $q3@159@01) (not (<= 0 $q3@159@01)))
    (=>
      (and
        (<= 0 $q3@159@01)
        (<
          $q3@159@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2)))))
      (and
        (<= 0 $q3@159@01)
        (<
          $q3@159@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))))
        (forall (($q4@160@01 Int)) (!
          (and
            (or (<= 0 $q4@160@01) (not (<= 0 $q4@160@01)))
            (=>
              (and
                (<= 0 $q4@160@01)
                (<
                  $q4@160@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                      $q3@159@01))))
              (and
                (<= 0 $q4@160@01)
                (<
                  $q4@160@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                      $q3@159@01)))
                (forall (($q5@161@01 Int)) (!
                  (and
                    (or (<= 0 $q5@161@01) (not (<= 0 $q5@161@01)))
                    (=>
                      (and
                        (<= 0 $q5@161@01)
                        (<
                          $q5@161@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                                $q3@159@01)
                              $q4@160@01))))
                      (and
                        (<= 0 $q5@161@01)
                        (<
                          $q5@161@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                                $q3@159@01)
                              $q4@160@01)))
                        (or
                          (<=
                            (- 0 170141183460469231731687303715884105728)
                            (Seq_index
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                                  $q3@159@01)
                                $q4@160@01)
                              $q5@161@01))
                          (not
                            (<=
                              (- 0 170141183460469231731687303715884105728)
                              (Seq_index
                                (Seq_index
                                  (Seq_index
                                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                                    $q3@159@01)
                                  $q4@160@01)
                                $q5@161@01))))))
                    (or
                      (not
                        (and
                          (<= 0 $q5@161@01)
                          (<
                            $q5@161@01
                            (Seq_length
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                                  $q3@159@01)
                                $q4@160@01)))))
                      (and
                        (<= 0 $q5@161@01)
                        (<
                          $q5@161@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                                $q3@159@01)
                              $q4@160@01))))))
                  :pattern ((Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                        $q3@159@01)
                      $q4@160@01)
                    $q5@161@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@753@363@753@790-aux|))))
            (or
              (not
                (and
                  (<= 0 $q4@160@01)
                  (<
                    $q4@160@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                        $q3@159@01)))))
              (and
                (<= 0 $q4@160@01)
                (<
                  $q4@160@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                      $q3@159@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
              $q3@159@01)
            $q4@160@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@753@182@753@791-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@159@01)
          (<
            $q3@159@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))))))
      (and
        (<= 0 $q3@159@01)
        (<
          $q3@159@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
    $q3@159@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@753@11@753@792-aux|)))
(assert (forall (($q3@159@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@159@01)
      (<
        $q3@159@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2)))))
    (forall (($q4@160@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@160@01)
          (<
            $q4@160@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                $q3@159@01))))
        (forall (($q5@161@01 Int)) (!
          (=>
            (and
              (<= 0 $q5@161@01)
              (<
                $q5@161@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                      $q3@159@01)
                    $q4@160@01))))
            (and
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                      $q3@159@01)
                    $q4@160@01)
                  $q5@161@01))
              (<=
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                      $q3@159@01)
                    $q4@160@01)
                  $q5@161@01)
                170141183460469231731687303715884105727)))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
                $q3@159@01)
              $q4@160@01)
            $q5@161@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@753@363@753@790|)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
          $q3@159@01)
        $q4@160@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@753@182@753@791|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$0@137@01 2))
    $q3@159@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@753@11@753@792|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$0, 3)): Seq[Int])| == 1000
(declare-const $t@162@01 $Snap)
(assert (= $t@162@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$0, 3)): Seq[Int])| == 1000
; [eval] |($struct_get($struct_loc($self$0, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$0, 3)): Seq[Int])
; [eval] $struct_loc($self$0, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3))) 1000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6] }
;     0 <= $q6 && $q6 < |($struct_get($struct_loc($self$0, 3)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6] &&
;     ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6] <=
;     170141183460469231731687303715884105727)
(declare-const $t@163@01 $Snap)
(assert (= $t@163@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6] } 0 <= $q6 && $q6 < |($struct_get($struct_loc($self$0, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727)
(declare-const $q6@164@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc($self$0, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc($self$0, 3)): Seq[Int])|
; [eval] 0 <= $q6
(push) ; 4
; [then-branch: 116 | !(0 <= $q6@164@01) | live]
; [else-branch: 116 | 0 <= $q6@164@01 | live]
(push) ; 5
; [then-branch: 116 | !(0 <= $q6@164@01)]
(assert (not (<= 0 $q6@164@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 116 | 0 <= $q6@164@01]
(assert (<= 0 $q6@164@01))
; [eval] $q6 < |($struct_get($struct_loc($self$0, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc($self$0, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$0, 3)): Seq[Int])
; [eval] $struct_loc($self$0, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q6@164@01) (not (<= 0 $q6@164@01))))
(push) ; 4
; [then-branch: 117 | 0 <= $q6@164@01 && $q6@164@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$0@137@01, 3))| | live]
; [else-branch: 117 | !(0 <= $q6@164@01 && $q6@164@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$0@137@01, 3))|) | live]
(push) ; 5
; [then-branch: 117 | 0 <= $q6@164@01 && $q6@164@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$0@137@01, 3))|]
(assert (and
  (<= 0 $q6@164@01)
  (<
    $q6@164@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc($self$0, 3)): Seq[Int])
; [eval] $struct_loc($self$0, 3)
(push) ; 6
(assert (not (>= $q6@164@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 118 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$0@137@01, 3))[$q6@164@01]) | live]
; [else-branch: 118 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$0@137@01, 3))[$q6@164@01] | live]
(push) ; 7
; [then-branch: 118 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$0@137@01, 3))[$q6@164@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3))
      $q6@164@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 118 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$0@137@01, 3))[$q6@164@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3))
    $q6@164@01)))
; [eval] ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc($self$0, 3)): Seq[Int])
; [eval] $struct_loc($self$0, 3)
(push) ; 8
(assert (not (>= $q6@164@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3))
      $q6@164@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3))
        $q6@164@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 117 | !(0 <= $q6@164@01 && $q6@164@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$0@137@01, 3))|)]
(assert (not
  (and
    (<= 0 $q6@164@01)
    (<
      $q6@164@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q6@164@01)
    (<
      $q6@164@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3)))))
  (and
    (<= 0 $q6@164@01)
    (<
      $q6@164@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3))
          $q6@164@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3))
            $q6@164@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q6@164@01)
      (<
        $q6@164@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3))))))
  (and
    (<= 0 $q6@164@01)
    (<
      $q6@164@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@164@01 Int)) (!
  (and
    (or (<= 0 $q6@164@01) (not (<= 0 $q6@164@01)))
    (=>
      (and
        (<= 0 $q6@164@01)
        (<
          $q6@164@01
          (Seq_length
            ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3)))))
      (and
        (<= 0 $q6@164@01)
        (<
          $q6@164@01
          (Seq_length
            ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3))
              $q6@164@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3))
                $q6@164@01))))))
    (or
      (not
        (and
          (<= 0 $q6@164@01)
          (<
            $q6@164@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3))))))
      (and
        (<= 0 $q6@164@01)
        (<
          $q6@164@01
          (Seq_length
            ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3))
    $q6@164@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@755@11@755@358-aux|)))
(assert (forall (($q6@164@01 Int)) (!
  (=>
    (and
      (<= 0 $q6@164@01)
      (<
        $q6@164@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3))
          $q6@164@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3))
          $q6@164@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3))
    $q6@164@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@755@11@755@358|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]),
;     $q7): Seq[Int]) }
;     |($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]),
;     $q7): Seq[Int])| ==
;     10)
(declare-const $t@165@01 $Snap)
(assert (= $t@165@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } |($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10)
(declare-const $q7@166@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10
; [eval] |($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc($self$0, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@166@01 Int)) (!
  (=
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@166@01))
    10)
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@166@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@756@11@756@215|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]),
;     $q7): Seq[Int]) }
;     (forall $q8: Int ::
;       { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] }
;       0 <= $q8 &&
;       $q8 <
;       |($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])| ==>
;       -170141183460469231731687303715884105728 <=
;       ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] &&
;       ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] <=
;       170141183460469231731687303715884105727))
(declare-const $t@167@01 $Snap)
(assert (= $t@167@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } (forall $q8: Int :: { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727))
(declare-const $q7@168@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q8: Int :: { ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727)
(declare-const $q8@169@01 Int)
(push) ; 4
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] 0 <= $q8
(push) ; 5
; [then-branch: 119 | !(0 <= $q8@169@01) | live]
; [else-branch: 119 | 0 <= $q8@169@01 | live]
(push) ; 6
; [then-branch: 119 | !(0 <= $q8@169@01)]
(assert (not (<= 0 $q8@169@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 119 | 0 <= $q8@169@01]
(assert (<= 0 $q8@169@01))
; [eval] $q8 < |($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc($self$0, 4)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q8@169@01) (not (<= 0 $q8@169@01))))
(push) ; 5
; [then-branch: 120 | 0 <= $q8@169@01 && $q8@169@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$0@137@01, 4)), $q7@168@01)| | live]
; [else-branch: 120 | !(0 <= $q8@169@01 && $q8@169@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$0@137@01, 4)), $q7@168@01)|) | live]
(push) ; 6
; [then-branch: 120 | 0 <= $q8@169@01 && $q8@169@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$0@137@01, 4)), $q7@168@01)|]
(assert (and
  (<= 0 $q8@169@01)
  (<
    $q8@169@01
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] -170141183460469231731687303715884105728
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc($self$0, 4)
(push) ; 7
(assert (not (>= $q8@169@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 121 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$0@137@01, 4)), $q7@168@01)[$q8@169@01]) | live]
; [else-branch: 121 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$0@137@01, 4)), $q7@168@01)[$q8@169@01] | live]
(push) ; 8
; [then-branch: 121 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$0@137@01, 4)), $q7@168@01)[$q8@169@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01)
      $q8@169@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 121 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$0@137@01, 4)), $q7@168@01)[$q8@169@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01)
    $q8@169@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc($self$0, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc($self$0, 4)
(push) ; 9
(assert (not (>= $q8@169@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01)
      $q8@169@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01)
        $q8@169@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 120 | !(0 <= $q8@169@01 && $q8@169@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$0@137@01, 4)), $q7@168@01)|)]
(assert (not
  (and
    (<= 0 $q8@169@01)
    (<
      $q8@169@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q8@169@01)
    (<
      $q8@169@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01))))
  (and
    (<= 0 $q8@169@01)
    (<
      $q8@169@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01)
          $q8@169@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01)
            $q8@169@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q8@169@01)
      (<
        $q8@169@01
        (Seq_length
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01)))))
  (and
    (<= 0 $q8@169@01)
    (<
      $q8@169@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q8@169@01 Int)) (!
  (and
    (or (<= 0 $q8@169@01) (not (<= 0 $q8@169@01)))
    (=>
      (and
        (<= 0 $q8@169@01)
        (<
          $q8@169@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01))))
      (and
        (<= 0 $q8@169@01)
        (<
          $q8@169@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01)
              $q8@169@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01)
                $q8@169@01))))))
    (or
      (not
        (and
          (<= 0 $q8@169@01)
          (<
            $q8@169@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01)))))
      (and
        (<= 0 $q8@169@01)
        (<
          $q8@169@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01))))))
  :pattern ((Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01)
    $q8@169@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@757@122@757@621-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@168@01 Int)) (!
  (forall (($q8@169@01 Int)) (!
    (and
      (or (<= 0 $q8@169@01) (not (<= 0 $q8@169@01)))
      (=>
        (and
          (<= 0 $q8@169@01)
          (<
            $q8@169@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01))))
        (and
          (<= 0 $q8@169@01)
          (<
            $q8@169@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01)))
          (or
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01)
                $q8@169@01))
            (not
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01)
                  $q8@169@01))))))
      (or
        (not
          (and
            (<= 0 $q8@169@01)
            (<
              $q8@169@01
              (Seq_length
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01)))))
        (and
          (<= 0 $q8@169@01)
          (<
            $q8@169@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01))))))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01)
      $q8@169@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@757@122@757@621-aux|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@757@11@757@622-aux|)))
(assert (forall (($q7@168@01 Int)) (!
  (forall (($q8@169@01 Int)) (!
    (=>
      (and
        (<= 0 $q8@169@01)
        (<
          $q8@169@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01))))
      (and
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01)
            $q8@169@01))
        (<=
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01)
            $q8@169@01)
          170141183460469231731687303715884105727)))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01)
      $q8@169@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@757@122@757@621|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$0@137@01 4)) $q7@168@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@757@11@757@622|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$0, 5)): Int) &&
;   ($struct_get($struct_loc($self$0, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@170@01 $Snap)
(assert (= $t@170@01 ($Snap.combine ($Snap.first $t@170@01) ($Snap.second $t@170@01))))
(assert (= ($Snap.first $t@170@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$0@137@01 5))))
(assert (= ($Snap.second $t@170@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$0, 5)): Int)
; [eval] $struct_loc($self$0, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@137@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$0, 6)): Int) &&
;   ($struct_get($struct_loc($self$0, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@171@01 $Snap)
(assert (= $t@171@01 ($Snap.combine ($Snap.first $t@171@01) ($Snap.second $t@171@01))))
(assert (= ($Snap.first $t@171@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$0, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$0, 6)): Int)
; [eval] $struct_loc($self$0, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$0@137@01 6))))
(assert (= ($Snap.second $t@171@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$0, 6)): Int)
; [eval] $struct_loc($self$0, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$0@137@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@172@01 $Snap)
(assert (= $t@172@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q9@173@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(push) ; 4
; [then-branch: 122 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@137@01, 8)), $q9@173@01)) | live]
; [else-branch: 122 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@137@01, 8)), $q9@173@01) | live]
(push) ; 5
; [then-branch: 122 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@137@01, 8)), $q9@173@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 8)) $q9@173@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 122 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@137@01, 8)), $q9@173@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 8)) $q9@173@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 8)) $q9@173@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 8)) $q9@173@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@173@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 8)) $q9@173@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 8)) $q9@173@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 8)) $q9@173@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@760@11@760@354-aux|)))
(assert (forall (($q9@173@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 8)) $q9@173@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 8)) $q9@173@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 8)) $q9@173@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@760@11@760@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $t@174@01 $Snap)
(assert (= $t@174@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) } ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int))
(declare-const $q9@175@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@175@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 8)) $q9@175@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 8)) $q9@175@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@761@11@761@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) &&
;     ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@176@01 $Snap)
(assert (= $t@176@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q10@177@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
(push) ; 4
; [then-branch: 123 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@137@01, 9)), $q10@177@01)) | live]
; [else-branch: 123 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@137@01, 9)), $q10@177@01) | live]
(push) ; 5
; [then-branch: 123 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@137@01, 9)), $q10@177@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 9)) $q10@177@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 123 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$0@137@01, 9)), $q10@177@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 9)) $q10@177@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 9)) $q10@177@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 9)) $q10@177@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@177@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 9)) $q10@177@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 9)) $q10@177@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 9)) $q10@177@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@762@11@762@358-aux|)))
(assert (forall (($q10@177@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 9)) $q10@177@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 9)) $q10@177@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 9)) $q10@177@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@762@11@762@358|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) }
;     ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])): Int))
(declare-const $t@178@01 $Snap)
(assert (= $t@178@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) } ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])): Int))
(declare-const $q10@179@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
; [eval] ($map_sum(($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$0, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@179@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 9)) $q10@179@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 9)) $q10@179@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@763@11@763@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$0, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@180@01 $Snap)
(assert (= $t@180@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$0, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$0, -1)): Int)
; [eval] $struct_loc($self$0, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$0@137@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$1, 0)): Seq[Int])| == 12
(declare-const $t@181@01 $Snap)
(assert (= $t@181@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$1, 0)): Seq[Int])| == 12
; [eval] |($struct_get($struct_loc($self$1, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$1, 0)): Seq[Int])
; [eval] $struct_loc($self$1, 0)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 0))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0] }
;     0 <= $q0 && $q0 < |($struct_get($struct_loc($self$1, 0)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0] &&
;     ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0] <=
;     170141183460469231731687303715884105727)
(declare-const $t@182@01 $Snap)
(assert (= $t@182@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0] } 0 <= $q0 && $q0 < |($struct_get($struct_loc($self$1, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@183@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc($self$1, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc($self$1, 0)): Seq[Int])|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 124 | !(0 <= $q0@183@01) | live]
; [else-branch: 124 | 0 <= $q0@183@01 | live]
(push) ; 5
; [then-branch: 124 | !(0 <= $q0@183@01)]
(assert (not (<= 0 $q0@183@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 124 | 0 <= $q0@183@01]
(assert (<= 0 $q0@183@01))
; [eval] $q0 < |($struct_get($struct_loc($self$1, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc($self$1, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$1, 0)): Seq[Int])
; [eval] $struct_loc($self$1, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@183@01) (not (<= 0 $q0@183@01))))
(push) ; 4
; [then-branch: 125 | 0 <= $q0@183@01 && $q0@183@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$1@139@01, 0))| | live]
; [else-branch: 125 | !(0 <= $q0@183@01 && $q0@183@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$1@139@01, 0))|) | live]
(push) ; 5
; [then-branch: 125 | 0 <= $q0@183@01 && $q0@183@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$1@139@01, 0))|]
(assert (and
  (<= 0 $q0@183@01)
  (<
    $q0@183@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 0))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc($self$1, 0)): Seq[Int])
; [eval] $struct_loc($self$1, 0)
(push) ; 6
(assert (not (>= $q0@183@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 126 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$1@139@01, 0))[$q0@183@01]) | live]
; [else-branch: 126 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$1@139@01, 0))[$q0@183@01] | live]
(push) ; 7
; [then-branch: 126 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$1@139@01, 0))[$q0@183@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 0))
      $q0@183@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 126 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$1@139@01, 0))[$q0@183@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 0))
    $q0@183@01)))
; [eval] ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc($self$1, 0)): Seq[Int])
; [eval] $struct_loc($self$1, 0)
(push) ; 8
(assert (not (>= $q0@183@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 0))
      $q0@183@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 0))
        $q0@183@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 125 | !(0 <= $q0@183@01 && $q0@183@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$1@139@01, 0))|)]
(assert (not
  (and
    (<= 0 $q0@183@01)
    (<
      $q0@183@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 0)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q0@183@01)
    (<
      $q0@183@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 0)))))
  (and
    (<= 0 $q0@183@01)
    (<
      $q0@183@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 0))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 0))
          $q0@183@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 0))
            $q0@183@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q0@183@01)
      (<
        $q0@183@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 0))))))
  (and
    (<= 0 $q0@183@01)
    (<
      $q0@183@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 0)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@183@01 Int)) (!
  (and
    (or (<= 0 $q0@183@01) (not (<= 0 $q0@183@01)))
    (=>
      (and
        (<= 0 $q0@183@01)
        (<
          $q0@183@01
          (Seq_length
            ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 0)))))
      (and
        (<= 0 $q0@183@01)
        (<
          $q0@183@01
          (Seq_length
            ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 0))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 0))
              $q0@183@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 0))
                $q0@183@01))))))
    (or
      (not
        (and
          (<= 0 $q0@183@01)
          (<
            $q0@183@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 0))))))
      (and
        (<= 0 $q0@183@01)
        (<
          $q0@183@01
          (Seq_length
            ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 0)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 0))
    $q0@183@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@766@11@766@358-aux|)))
(assert (forall (($q0@183@01 Int)) (!
  (=>
    (and
      (<= 0 $q0@183@01)
      (<
        $q0@183@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 0)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 0))
          $q0@183@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 0))
          $q0@183@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 0))
    $q0@183@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@766@11@766@358|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])| == 12
(declare-const $t@184@01 $Snap)
(assert (= $t@184@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])| == 12
; [eval] |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$1, 1)
(assert (=
  (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1)))
  12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 &&
;     $q1 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])| ==>
;     |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $t@185@01 $Snap)
(assert (= $t@185@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $q1@186@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 127 | !(0 <= $q1@186@01) | live]
; [else-branch: 127 | 0 <= $q1@186@01 | live]
(push) ; 5
; [then-branch: 127 | !(0 <= $q1@186@01)]
(assert (not (<= 0 $q1@186@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 127 | 0 <= $q1@186@01]
(assert (<= 0 $q1@186@01))
; [eval] $q1 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$1, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@186@01) (not (<= 0 $q1@186@01))))
(push) ; 4
; [then-branch: 128 | 0 <= $q1@186@01 && $q1@186@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@139@01, 1))| | live]
; [else-branch: 128 | !(0 <= $q1@186@01 && $q1@186@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@139@01, 1))|) | live]
(push) ; 5
; [then-branch: 128 | 0 <= $q1@186@01 && $q1@186@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@139@01, 1))|]
(assert (and
  (<= 0 $q1@186@01)
  (<
    $q1@186@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))))))
; [eval] |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$1, 1)
(push) ; 6
(assert (not (>= $q1@186@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 128 | !(0 <= $q1@186@01 && $q1@186@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@139@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@186@01)
    (<
      $q1@186@01
      (Seq_length
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@186@01)
      (<
        $q1@186@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))))))
  (and
    (<= 0 $q1@186@01)
    (<
      $q1@186@01
      (Seq_length
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@186@01 Int)) (!
  (and
    (or (<= 0 $q1@186@01) (not (<= 0 $q1@186@01)))
    (or
      (not
        (and
          (<= 0 $q1@186@01)
          (<
            $q1@186@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))))))
      (and
        (<= 0 $q1@186@01)
        (<
          $q1@186@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
    $q1@186@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@768@11@768@237-aux|)))
(assert (forall (($q1@186@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@186@01)
      (<
        $q1@186@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
          $q1@186@01))
      12))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
    $q1@186@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@768@11@768@237|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 &&
;     $q1 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])| ==>
;     (forall $q2: Int ::
;       { ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] }
;       0 <= $q2 &&
;       $q2 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]| ==>
;       -170141183460469231731687303715884105728 <=
;       ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] &&
;       ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] <=
;       170141183460469231731687303715884105727))
(declare-const $t@187@01 $Snap)
(assert (= $t@187@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727))
(declare-const $q1@188@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 129 | !(0 <= $q1@188@01) | live]
; [else-branch: 129 | 0 <= $q1@188@01 | live]
(push) ; 5
; [then-branch: 129 | !(0 <= $q1@188@01)]
(assert (not (<= 0 $q1@188@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 129 | 0 <= $q1@188@01]
(assert (<= 0 $q1@188@01))
; [eval] $q1 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$1, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@188@01) (not (<= 0 $q1@188@01))))
(push) ; 4
; [then-branch: 130 | 0 <= $q1@188@01 && $q1@188@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@139@01, 1))| | live]
; [else-branch: 130 | !(0 <= $q1@188@01 && $q1@188@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@139@01, 1))|) | live]
(push) ; 5
; [then-branch: 130 | 0 <= $q1@188@01 && $q1@188@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@139@01, 1))|]
(assert (and
  (<= 0 $q1@188@01)
  (<
    $q1@188@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))))))
; [eval] (forall $q2: Int :: { ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
(declare-const $q2@189@01 Int)
(push) ; 6
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]|
; [eval] 0 <= $q2
(push) ; 7
; [then-branch: 131 | !(0 <= $q2@189@01) | live]
; [else-branch: 131 | 0 <= $q2@189@01 | live]
(push) ; 8
; [then-branch: 131 | !(0 <= $q2@189@01)]
(assert (not (<= 0 $q2@189@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 131 | 0 <= $q2@189@01]
(assert (<= 0 $q2@189@01))
; [eval] $q2 < |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]|
; [eval] |($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$1, 1)
(push) ; 9
(assert (not (>= $q1@188@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q2@189@01) (not (<= 0 $q2@189@01))))
(push) ; 7
; [then-branch: 132 | 0 <= $q2@189@01 && $q2@189@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@139@01, 1))[$q1@188@01]| | live]
; [else-branch: 132 | !(0 <= $q2@189@01 && $q2@189@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@139@01, 1))[$q1@188@01]|) | live]
(push) ; 8
; [then-branch: 132 | 0 <= $q2@189@01 && $q2@189@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@139@01, 1))[$q1@188@01]|]
(assert (and
  (<= 0 $q2@189@01)
  (<
    $q2@189@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
        $q1@188@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$1, 1)
(push) ; 9
(assert (not (>= $q1@188@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q2@189@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 133 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@139@01, 1))[$q1@188@01][$q2@189@01]) | live]
; [else-branch: 133 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@139@01, 1))[$q1@188@01][$q2@189@01] | live]
(push) ; 10
; [then-branch: 133 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@139@01, 1))[$q1@188@01][$q2@189@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
        $q1@188@01)
      $q2@189@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 133 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@139@01, 1))[$q1@188@01][$q2@189@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
      $q1@188@01)
    $q2@189@01)))
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc($self$1, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($self$1, 1)
(push) ; 11
(assert (not (>= $q1@188@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= $q2@189@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
        $q1@188@01)
      $q2@189@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
          $q1@188@01)
        $q2@189@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 132 | !(0 <= $q2@189@01 && $q2@189@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@139@01, 1))[$q1@188@01]|)]
(assert (not
  (and
    (<= 0 $q2@189@01)
    (<
      $q2@189@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
          $q1@188@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q2@189@01)
    (<
      $q2@189@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
          $q1@188@01))))
  (and
    (<= 0 $q2@189@01)
    (<
      $q2@189@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
          $q1@188@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
            $q1@188@01)
          $q2@189@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
              $q1@188@01)
            $q2@189@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q2@189@01)
      (<
        $q2@189@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
            $q1@188@01)))))
  (and
    (<= 0 $q2@189@01)
    (<
      $q2@189@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
          $q1@188@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@189@01 Int)) (!
  (and
    (or (<= 0 $q2@189@01) (not (<= 0 $q2@189@01)))
    (=>
      (and
        (<= 0 $q2@189@01)
        (<
          $q2@189@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
              $q1@188@01))))
      (and
        (<= 0 $q2@189@01)
        (<
          $q2@189@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
              $q1@188@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
                $q1@188@01)
              $q2@189@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
                  $q1@188@01)
                $q2@189@01))))))
    (or
      (not
        (and
          (<= 0 $q2@189@01)
          (<
            $q2@189@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
                $q1@188@01)))))
      (and
        (<= 0 $q2@189@01)
        (<
          $q2@189@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
              $q1@188@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
      $q1@188@01)
    $q2@189@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@769@172@769@559-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 130 | !(0 <= $q1@188@01 && $q1@188@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($self$1@139@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@188@01)
    (<
      $q1@188@01
      (Seq_length
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q1@188@01)
    (<
      $q1@188@01
      (Seq_length
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1)))))
  (and
    (<= 0 $q1@188@01)
    (<
      $q1@188@01
      (Seq_length
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))))
    (forall (($q2@189@01 Int)) (!
      (and
        (or (<= 0 $q2@189@01) (not (<= 0 $q2@189@01)))
        (=>
          (and
            (<= 0 $q2@189@01)
            (<
              $q2@189@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
                  $q1@188@01))))
          (and
            (<= 0 $q2@189@01)
            (<
              $q2@189@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
                  $q1@188@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
                    $q1@188@01)
                  $q2@189@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
                      $q1@188@01)
                    $q2@189@01))))))
        (or
          (not
            (and
              (<= 0 $q2@189@01)
              (<
                $q2@189@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
                    $q1@188@01)))))
          (and
            (<= 0 $q2@189@01)
            (<
              $q2@189@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
                  $q1@188@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
          $q1@188@01)
        $q2@189@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@769@172@769@559-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@188@01)
      (<
        $q1@188@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))))))
  (and
    (<= 0 $q1@188@01)
    (<
      $q1@188@01
      (Seq_length
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@188@01 Int)) (!
  (and
    (or (<= 0 $q1@188@01) (not (<= 0 $q1@188@01)))
    (=>
      (and
        (<= 0 $q1@188@01)
        (<
          $q1@188@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1)))))
      (and
        (<= 0 $q1@188@01)
        (<
          $q1@188@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))))
        (forall (($q2@189@01 Int)) (!
          (and
            (or (<= 0 $q2@189@01) (not (<= 0 $q2@189@01)))
            (=>
              (and
                (<= 0 $q2@189@01)
                (<
                  $q2@189@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
                      $q1@188@01))))
              (and
                (<= 0 $q2@189@01)
                (<
                  $q2@189@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
                      $q1@188@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
                        $q1@188@01)
                      $q2@189@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
                          $q1@188@01)
                        $q2@189@01))))))
            (or
              (not
                (and
                  (<= 0 $q2@189@01)
                  (<
                    $q2@189@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
                        $q1@188@01)))))
              (and
                (<= 0 $q2@189@01)
                (<
                  $q2@189@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
                      $q1@188@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
              $q1@188@01)
            $q2@189@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@769@172@769@559-aux|))))
    (or
      (not
        (and
          (<= 0 $q1@188@01)
          (<
            $q1@188@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))))))
      (and
        (<= 0 $q1@188@01)
        (<
          $q1@188@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
    $q1@188@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@769@11@769@560-aux|)))
(assert (forall (($q1@188@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@188@01)
      (<
        $q1@188@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1)))))
    (forall (($q2@189@01 Int)) (!
      (=>
        (and
          (<= 0 $q2@189@01)
          (<
            $q2@189@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
                $q1@188@01))))
        (and
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
                $q1@188@01)
              $q2@189@01))
          (<=
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
                $q1@188@01)
              $q2@189@01)
            170141183460469231731687303715884105727)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
          $q1@188@01)
        $q2@189@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@769@172@769@559|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $self$1@139@01 1))
    $q1@188@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@769@11@769@560|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])| == 2
(declare-const $t@190@01 $Snap)
(assert (= $t@190@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])| == 2
; [eval] |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$1, 2)
(assert (=
  (Seq_length
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2)))
  2))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])| ==>
;     |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $t@191@01 $Snap)
(assert (= $t@191@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $q3@192@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 134 | !(0 <= $q3@192@01) | live]
; [else-branch: 134 | 0 <= $q3@192@01 | live]
(push) ; 5
; [then-branch: 134 | !(0 <= $q3@192@01)]
(assert (not (<= 0 $q3@192@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 134 | 0 <= $q3@192@01]
(assert (<= 0 $q3@192@01))
; [eval] $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$1, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@192@01) (not (<= 0 $q3@192@01))))
(push) ; 4
; [then-branch: 135 | 0 <= $q3@192@01 && $q3@192@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))| | live]
; [else-branch: 135 | !(0 <= $q3@192@01 && $q3@192@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))|) | live]
(push) ; 5
; [then-branch: 135 | 0 <= $q3@192@01 && $q3@192@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))|]
(assert (and
  (<= 0 $q3@192@01)
  (<
    $q3@192@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))))))
; [eval] |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$1, 2)
(push) ; 6
(assert (not (>= $q3@192@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 135 | !(0 <= $q3@192@01 && $q3@192@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@192@01)
    (<
      $q3@192@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@192@01)
      (<
        $q3@192@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))))))
  (and
    (<= 0 $q3@192@01)
    (<
      $q3@192@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@192@01 Int)) (!
  (and
    (or (<= 0 $q3@192@01) (not (<= 0 $q3@192@01)))
    (or
      (not
        (and
          (<= 0 $q3@192@01)
          (<
            $q3@192@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))))))
      (and
        (<= 0 $q3@192@01)
        (<
          $q3@192@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
    $q3@192@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@771@11@771@251-aux|)))
(assert (forall (($q3@192@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@192@01)
      (<
        $q3@192@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
          $q3@192@01))
      2))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
    $q3@192@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@771@11@771@251|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 <
;       |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==
;       2))
(declare-const $t@193@01 $Snap)
(assert (= $t@193@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2))
(declare-const $q3@194@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 136 | !(0 <= $q3@194@01) | live]
; [else-branch: 136 | 0 <= $q3@194@01 | live]
(push) ; 5
; [then-branch: 136 | !(0 <= $q3@194@01)]
(assert (not (<= 0 $q3@194@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 136 | 0 <= $q3@194@01]
(assert (<= 0 $q3@194@01))
; [eval] $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$1, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@194@01) (not (<= 0 $q3@194@01))))
(push) ; 4
; [then-branch: 137 | 0 <= $q3@194@01 && $q3@194@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))| | live]
; [else-branch: 137 | !(0 <= $q3@194@01 && $q3@194@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))|) | live]
(push) ; 5
; [then-branch: 137 | 0 <= $q3@194@01 && $q3@194@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))|]
(assert (and
  (<= 0 $q3@194@01)
  (<
    $q3@194@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
(declare-const $q4@195@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 138 | !(0 <= $q4@195@01) | live]
; [else-branch: 138 | 0 <= $q4@195@01 | live]
(push) ; 8
; [then-branch: 138 | !(0 <= $q4@195@01)]
(assert (not (<= 0 $q4@195@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 138 | 0 <= $q4@195@01]
(assert (<= 0 $q4@195@01))
; [eval] $q4 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$1, 2)
(push) ; 9
(assert (not (>= $q3@194@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@195@01) (not (<= 0 $q4@195@01))))
(push) ; 7
; [then-branch: 139 | 0 <= $q4@195@01 && $q4@195@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))[$q3@194@01]| | live]
; [else-branch: 139 | !(0 <= $q4@195@01 && $q4@195@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))[$q3@194@01]|) | live]
(push) ; 8
; [then-branch: 139 | 0 <= $q4@195@01 && $q4@195@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))[$q3@194@01]|]
(assert (and
  (<= 0 $q4@195@01)
  (<
    $q4@195@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
        $q3@194@01)))))
; [eval] |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$1, 2)
(push) ; 9
(assert (not (>= $q3@194@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q4@195@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 139 | !(0 <= $q4@195@01 && $q4@195@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))[$q3@194@01]|)]
(assert (not
  (and
    (<= 0 $q4@195@01)
    (<
      $q4@195@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
          $q3@194@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@195@01)
      (<
        $q4@195@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
            $q3@194@01)))))
  (and
    (<= 0 $q4@195@01)
    (<
      $q4@195@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
          $q3@194@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@195@01 Int)) (!
  (and
    (or (<= 0 $q4@195@01) (not (<= 0 $q4@195@01)))
    (or
      (not
        (and
          (<= 0 $q4@195@01)
          (<
            $q4@195@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                $q3@194@01)))))
      (and
        (<= 0 $q4@195@01)
        (<
          $q4@195@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
              $q3@194@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
      $q3@194@01)
    $q4@195@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@772@182@772@437-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 137 | !(0 <= $q3@194@01 && $q3@194@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@194@01)
    (<
      $q3@194@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@194@01)
    (<
      $q3@194@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2)))))
  (and
    (<= 0 $q3@194@01)
    (<
      $q3@194@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))))
    (forall (($q4@195@01 Int)) (!
      (and
        (or (<= 0 $q4@195@01) (not (<= 0 $q4@195@01)))
        (or
          (not
            (and
              (<= 0 $q4@195@01)
              (<
                $q4@195@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                    $q3@194@01)))))
          (and
            (<= 0 $q4@195@01)
            (<
              $q4@195@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                  $q3@194@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
          $q3@194@01)
        $q4@195@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@772@182@772@437-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@194@01)
      (<
        $q3@194@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))))))
  (and
    (<= 0 $q3@194@01)
    (<
      $q3@194@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@194@01 Int)) (!
  (and
    (or (<= 0 $q3@194@01) (not (<= 0 $q3@194@01)))
    (=>
      (and
        (<= 0 $q3@194@01)
        (<
          $q3@194@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2)))))
      (and
        (<= 0 $q3@194@01)
        (<
          $q3@194@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))))
        (forall (($q4@195@01 Int)) (!
          (and
            (or (<= 0 $q4@195@01) (not (<= 0 $q4@195@01)))
            (or
              (not
                (and
                  (<= 0 $q4@195@01)
                  (<
                    $q4@195@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                        $q3@194@01)))))
              (and
                (<= 0 $q4@195@01)
                (<
                  $q4@195@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                      $q3@194@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
              $q3@194@01)
            $q4@195@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@772@182@772@437-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@194@01)
          (<
            $q3@194@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))))))
      (and
        (<= 0 $q3@194@01)
        (<
          $q3@194@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
    $q3@194@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@772@11@772@438-aux|)))
(assert (forall (($q3@194@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@194@01)
      (<
        $q3@194@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2)))))
    (forall (($q4@195@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@195@01)
          (<
            $q4@195@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                $q3@194@01))))
        (=
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                $q3@194@01)
              $q4@195@01))
          2))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
          $q3@194@01)
        $q4@195@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@772@182@772@437|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
    $q3@194@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@772@11@772@438|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 <
;       |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       (forall $q5: Int ::
;         { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] }
;         0 <= $q5 &&
;         $q5 <
;         |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==>
;         -170141183460469231731687303715884105728 <=
;         ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] &&
;         ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <=
;         170141183460469231731687303715884105727)))
(declare-const $t@196@01 $Snap)
(assert (= $t@196@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)))
(declare-const $q3@197@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 140 | !(0 <= $q3@197@01) | live]
; [else-branch: 140 | 0 <= $q3@197@01 | live]
(push) ; 5
; [then-branch: 140 | !(0 <= $q3@197@01)]
(assert (not (<= 0 $q3@197@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 140 | 0 <= $q3@197@01]
(assert (<= 0 $q3@197@01))
; [eval] $q3 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$1, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@197@01) (not (<= 0 $q3@197@01))))
(push) ; 4
; [then-branch: 141 | 0 <= $q3@197@01 && $q3@197@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))| | live]
; [else-branch: 141 | !(0 <= $q3@197@01 && $q3@197@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))|) | live]
(push) ; 5
; [then-branch: 141 | 0 <= $q3@197@01 && $q3@197@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))|]
(assert (and
  (<= 0 $q3@197@01)
  (<
    $q3@197@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
(declare-const $q4@198@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 142 | !(0 <= $q4@198@01) | live]
; [else-branch: 142 | 0 <= $q4@198@01 | live]
(push) ; 8
; [then-branch: 142 | !(0 <= $q4@198@01)]
(assert (not (<= 0 $q4@198@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 142 | 0 <= $q4@198@01]
(assert (<= 0 $q4@198@01))
; [eval] $q4 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$1, 2)
(push) ; 9
(assert (not (>= $q3@197@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@198@01) (not (<= 0 $q4@198@01))))
(push) ; 7
; [then-branch: 143 | 0 <= $q4@198@01 && $q4@198@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))[$q3@197@01]| | live]
; [else-branch: 143 | !(0 <= $q4@198@01 && $q4@198@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))[$q3@197@01]|) | live]
(push) ; 8
; [then-branch: 143 | 0 <= $q4@198@01 && $q4@198@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))[$q3@197@01]|]
(assert (and
  (<= 0 $q4@198@01)
  (<
    $q4@198@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
        $q3@197@01)))))
; [eval] (forall $q5: Int :: { ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
(declare-const $q5@199@01 Int)
(push) ; 9
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] 0 <= $q5
(push) ; 10
; [then-branch: 144 | !(0 <= $q5@199@01) | live]
; [else-branch: 144 | 0 <= $q5@199@01 | live]
(push) ; 11
; [then-branch: 144 | !(0 <= $q5@199@01)]
(assert (not (<= 0 $q5@199@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 144 | 0 <= $q5@199@01]
(assert (<= 0 $q5@199@01))
; [eval] $q5 < |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] |($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$1, 2)
(push) ; 12
(assert (not (>= $q3@197@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@198@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q5@199@01) (not (<= 0 $q5@199@01))))
(push) ; 10
; [then-branch: 145 | 0 <= $q5@199@01 && $q5@199@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))[$q3@197@01][$q4@198@01]| | live]
; [else-branch: 145 | !(0 <= $q5@199@01 && $q5@199@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))[$q3@197@01][$q4@198@01]|) | live]
(push) ; 11
; [then-branch: 145 | 0 <= $q5@199@01 && $q5@199@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))[$q3@197@01][$q4@198@01]|]
(assert (and
  (<= 0 $q5@199@01)
  (<
    $q5@199@01
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
          $q3@197@01)
        $q4@198@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$1, 2)
(push) ; 12
(assert (not (>= $q3@197@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@198@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q5@199@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 146 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))[$q3@197@01][$q4@198@01][$q5@199@01]) | live]
; [else-branch: 146 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))[$q3@197@01][$q4@198@01][$q5@199@01] | live]
(push) ; 13
; [then-branch: 146 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))[$q3@197@01][$q4@198@01][$q5@199@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
          $q3@197@01)
        $q4@198@01)
      $q5@199@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 146 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))[$q3@197@01][$q4@198@01][$q5@199@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
        $q3@197@01)
      $q4@198@01)
    $q5@199@01)))
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($self$1, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($self$1, 2)
(push) ; 14
(assert (not (>= $q3@197@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q4@198@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q5@199@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
          $q3@197@01)
        $q4@198@01)
      $q5@199@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
            $q3@197@01)
          $q4@198@01)
        $q5@199@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 145 | !(0 <= $q5@199@01 && $q5@199@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))[$q3@197@01][$q4@198@01]|)]
(assert (not
  (and
    (<= 0 $q5@199@01)
    (<
      $q5@199@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
            $q3@197@01)
          $q4@198@01))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q5@199@01)
    (<
      $q5@199@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
            $q3@197@01)
          $q4@198@01))))
  (and
    (<= 0 $q5@199@01)
    (<
      $q5@199@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
            $q3@197@01)
          $q4@198@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
              $q3@197@01)
            $q4@198@01)
          $q5@199@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                $q3@197@01)
              $q4@198@01)
            $q5@199@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q5@199@01)
      (<
        $q5@199@01
        (Seq_length
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
              $q3@197@01)
            $q4@198@01)))))
  (and
    (<= 0 $q5@199@01)
    (<
      $q5@199@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
            $q3@197@01)
          $q4@198@01))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@199@01 Int)) (!
  (and
    (or (<= 0 $q5@199@01) (not (<= 0 $q5@199@01)))
    (=>
      (and
        (<= 0 $q5@199@01)
        (<
          $q5@199@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                $q3@197@01)
              $q4@198@01))))
      (and
        (<= 0 $q5@199@01)
        (<
          $q5@199@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                $q3@197@01)
              $q4@198@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                  $q3@197@01)
                $q4@198@01)
              $q5@199@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                    $q3@197@01)
                  $q4@198@01)
                $q5@199@01))))))
    (or
      (not
        (and
          (<= 0 $q5@199@01)
          (<
            $q5@199@01
            (Seq_length
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                  $q3@197@01)
                $q4@198@01)))))
      (and
        (<= 0 $q5@199@01)
        (<
          $q5@199@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                $q3@197@01)
              $q4@198@01))))))
  :pattern ((Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
        $q3@197@01)
      $q4@198@01)
    $q5@199@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@773@363@773@790-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 143 | !(0 <= $q4@198@01 && $q4@198@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))[$q3@197@01]|)]
(assert (not
  (and
    (<= 0 $q4@198@01)
    (<
      $q4@198@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
          $q3@197@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q4@198@01)
    (<
      $q4@198@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
          $q3@197@01))))
  (and
    (<= 0 $q4@198@01)
    (<
      $q4@198@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
          $q3@197@01)))
    (forall (($q5@199@01 Int)) (!
      (and
        (or (<= 0 $q5@199@01) (not (<= 0 $q5@199@01)))
        (=>
          (and
            (<= 0 $q5@199@01)
            (<
              $q5@199@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                    $q3@197@01)
                  $q4@198@01))))
          (and
            (<= 0 $q5@199@01)
            (<
              $q5@199@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                    $q3@197@01)
                  $q4@198@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                      $q3@197@01)
                    $q4@198@01)
                  $q5@199@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                        $q3@197@01)
                      $q4@198@01)
                    $q5@199@01))))))
        (or
          (not
            (and
              (<= 0 $q5@199@01)
              (<
                $q5@199@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                      $q3@197@01)
                    $q4@198@01)))))
          (and
            (<= 0 $q5@199@01)
            (<
              $q5@199@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                    $q3@197@01)
                  $q4@198@01))))))
      :pattern ((Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
            $q3@197@01)
          $q4@198@01)
        $q5@199@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@773@363@773@790-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@198@01)
      (<
        $q4@198@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
            $q3@197@01)))))
  (and
    (<= 0 $q4@198@01)
    (<
      $q4@198@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
          $q3@197@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@198@01 Int)) (!
  (and
    (or (<= 0 $q4@198@01) (not (<= 0 $q4@198@01)))
    (=>
      (and
        (<= 0 $q4@198@01)
        (<
          $q4@198@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
              $q3@197@01))))
      (and
        (<= 0 $q4@198@01)
        (<
          $q4@198@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
              $q3@197@01)))
        (forall (($q5@199@01 Int)) (!
          (and
            (or (<= 0 $q5@199@01) (not (<= 0 $q5@199@01)))
            (=>
              (and
                (<= 0 $q5@199@01)
                (<
                  $q5@199@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                        $q3@197@01)
                      $q4@198@01))))
              (and
                (<= 0 $q5@199@01)
                (<
                  $q5@199@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                        $q3@197@01)
                      $q4@198@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                          $q3@197@01)
                        $q4@198@01)
                      $q5@199@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                            $q3@197@01)
                          $q4@198@01)
                        $q5@199@01))))))
            (or
              (not
                (and
                  (<= 0 $q5@199@01)
                  (<
                    $q5@199@01
                    (Seq_length
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                          $q3@197@01)
                        $q4@198@01)))))
              (and
                (<= 0 $q5@199@01)
                (<
                  $q5@199@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                        $q3@197@01)
                      $q4@198@01))))))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                $q3@197@01)
              $q4@198@01)
            $q5@199@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@773@363@773@790-aux|))))
    (or
      (not
        (and
          (<= 0 $q4@198@01)
          (<
            $q4@198@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                $q3@197@01)))))
      (and
        (<= 0 $q4@198@01)
        (<
          $q4@198@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
              $q3@197@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
      $q3@197@01)
    $q4@198@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@773@182@773@791-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 141 | !(0 <= $q3@197@01 && $q3@197@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($self$1@139@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@197@01)
    (<
      $q3@197@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@197@01)
    (<
      $q3@197@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2)))))
  (and
    (<= 0 $q3@197@01)
    (<
      $q3@197@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))))
    (forall (($q4@198@01 Int)) (!
      (and
        (or (<= 0 $q4@198@01) (not (<= 0 $q4@198@01)))
        (=>
          (and
            (<= 0 $q4@198@01)
            (<
              $q4@198@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                  $q3@197@01))))
          (and
            (<= 0 $q4@198@01)
            (<
              $q4@198@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                  $q3@197@01)))
            (forall (($q5@199@01 Int)) (!
              (and
                (or (<= 0 $q5@199@01) (not (<= 0 $q5@199@01)))
                (=>
                  (and
                    (<= 0 $q5@199@01)
                    (<
                      $q5@199@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                            $q3@197@01)
                          $q4@198@01))))
                  (and
                    (<= 0 $q5@199@01)
                    (<
                      $q5@199@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                            $q3@197@01)
                          $q4@198@01)))
                    (or
                      (<=
                        (- 0 170141183460469231731687303715884105728)
                        (Seq_index
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                              $q3@197@01)
                            $q4@198@01)
                          $q5@199@01))
                      (not
                        (<=
                          (- 0 170141183460469231731687303715884105728)
                          (Seq_index
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                                $q3@197@01)
                              $q4@198@01)
                            $q5@199@01))))))
                (or
                  (not
                    (and
                      (<= 0 $q5@199@01)
                      (<
                        $q5@199@01
                        (Seq_length
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                              $q3@197@01)
                            $q4@198@01)))))
                  (and
                    (<= 0 $q5@199@01)
                    (<
                      $q5@199@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                            $q3@197@01)
                          $q4@198@01))))))
              :pattern ((Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                    $q3@197@01)
                  $q4@198@01)
                $q5@199@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@773@363@773@790-aux|))))
        (or
          (not
            (and
              (<= 0 $q4@198@01)
              (<
                $q4@198@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                    $q3@197@01)))))
          (and
            (<= 0 $q4@198@01)
            (<
              $q4@198@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                  $q3@197@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
          $q3@197@01)
        $q4@198@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@773@182@773@791-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@197@01)
      (<
        $q3@197@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))))))
  (and
    (<= 0 $q3@197@01)
    (<
      $q3@197@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@197@01 Int)) (!
  (and
    (or (<= 0 $q3@197@01) (not (<= 0 $q3@197@01)))
    (=>
      (and
        (<= 0 $q3@197@01)
        (<
          $q3@197@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2)))))
      (and
        (<= 0 $q3@197@01)
        (<
          $q3@197@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))))
        (forall (($q4@198@01 Int)) (!
          (and
            (or (<= 0 $q4@198@01) (not (<= 0 $q4@198@01)))
            (=>
              (and
                (<= 0 $q4@198@01)
                (<
                  $q4@198@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                      $q3@197@01))))
              (and
                (<= 0 $q4@198@01)
                (<
                  $q4@198@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                      $q3@197@01)))
                (forall (($q5@199@01 Int)) (!
                  (and
                    (or (<= 0 $q5@199@01) (not (<= 0 $q5@199@01)))
                    (=>
                      (and
                        (<= 0 $q5@199@01)
                        (<
                          $q5@199@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                                $q3@197@01)
                              $q4@198@01))))
                      (and
                        (<= 0 $q5@199@01)
                        (<
                          $q5@199@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                                $q3@197@01)
                              $q4@198@01)))
                        (or
                          (<=
                            (- 0 170141183460469231731687303715884105728)
                            (Seq_index
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                                  $q3@197@01)
                                $q4@198@01)
                              $q5@199@01))
                          (not
                            (<=
                              (- 0 170141183460469231731687303715884105728)
                              (Seq_index
                                (Seq_index
                                  (Seq_index
                                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                                    $q3@197@01)
                                  $q4@198@01)
                                $q5@199@01))))))
                    (or
                      (not
                        (and
                          (<= 0 $q5@199@01)
                          (<
                            $q5@199@01
                            (Seq_length
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                                  $q3@197@01)
                                $q4@198@01)))))
                      (and
                        (<= 0 $q5@199@01)
                        (<
                          $q5@199@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                                $q3@197@01)
                              $q4@198@01))))))
                  :pattern ((Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                        $q3@197@01)
                      $q4@198@01)
                    $q5@199@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@773@363@773@790-aux|))))
            (or
              (not
                (and
                  (<= 0 $q4@198@01)
                  (<
                    $q4@198@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                        $q3@197@01)))))
              (and
                (<= 0 $q4@198@01)
                (<
                  $q4@198@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                      $q3@197@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
              $q3@197@01)
            $q4@198@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@773@182@773@791-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@197@01)
          (<
            $q3@197@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))))))
      (and
        (<= 0 $q3@197@01)
        (<
          $q3@197@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
    $q3@197@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@773@11@773@792-aux|)))
(assert (forall (($q3@197@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@197@01)
      (<
        $q3@197@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2)))))
    (forall (($q4@198@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@198@01)
          (<
            $q4@198@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                $q3@197@01))))
        (forall (($q5@199@01 Int)) (!
          (=>
            (and
              (<= 0 $q5@199@01)
              (<
                $q5@199@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                      $q3@197@01)
                    $q4@198@01))))
            (and
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                      $q3@197@01)
                    $q4@198@01)
                  $q5@199@01))
              (<=
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                      $q3@197@01)
                    $q4@198@01)
                  $q5@199@01)
                170141183460469231731687303715884105727)))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
                $q3@197@01)
              $q4@198@01)
            $q5@199@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@773@363@773@790|)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
          $q3@197@01)
        $q4@198@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@773@182@773@791|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $self$1@139@01 2))
    $q3@197@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@773@11@773@792|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($self$1, 3)): Seq[Int])| == 1000
(declare-const $t@200@01 $Snap)
(assert (= $t@200@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($self$1, 3)): Seq[Int])| == 1000
; [eval] |($struct_get($struct_loc($self$1, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$1, 3)): Seq[Int])
; [eval] $struct_loc($self$1, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3))) 1000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6] }
;     0 <= $q6 && $q6 < |($struct_get($struct_loc($self$1, 3)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6] &&
;     ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6] <=
;     170141183460469231731687303715884105727)
(declare-const $t@201@01 $Snap)
(assert (= $t@201@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6] } 0 <= $q6 && $q6 < |($struct_get($struct_loc($self$1, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727)
(declare-const $q6@202@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc($self$1, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc($self$1, 3)): Seq[Int])|
; [eval] 0 <= $q6
(push) ; 4
; [then-branch: 147 | !(0 <= $q6@202@01) | live]
; [else-branch: 147 | 0 <= $q6@202@01 | live]
(push) ; 5
; [then-branch: 147 | !(0 <= $q6@202@01)]
(assert (not (<= 0 $q6@202@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 147 | 0 <= $q6@202@01]
(assert (<= 0 $q6@202@01))
; [eval] $q6 < |($struct_get($struct_loc($self$1, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc($self$1, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc($self$1, 3)): Seq[Int])
; [eval] $struct_loc($self$1, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q6@202@01) (not (<= 0 $q6@202@01))))
(push) ; 4
; [then-branch: 148 | 0 <= $q6@202@01 && $q6@202@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$1@139@01, 3))| | live]
; [else-branch: 148 | !(0 <= $q6@202@01 && $q6@202@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$1@139@01, 3))|) | live]
(push) ; 5
; [then-branch: 148 | 0 <= $q6@202@01 && $q6@202@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$1@139@01, 3))|]
(assert (and
  (<= 0 $q6@202@01)
  (<
    $q6@202@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc($self$1, 3)): Seq[Int])
; [eval] $struct_loc($self$1, 3)
(push) ; 6
(assert (not (>= $q6@202@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 149 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$1@139@01, 3))[$q6@202@01]) | live]
; [else-branch: 149 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$1@139@01, 3))[$q6@202@01] | live]
(push) ; 7
; [then-branch: 149 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$1@139@01, 3))[$q6@202@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3))
      $q6@202@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 149 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($self$1@139@01, 3))[$q6@202@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3))
    $q6@202@01)))
; [eval] ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc($self$1, 3)): Seq[Int])
; [eval] $struct_loc($self$1, 3)
(push) ; 8
(assert (not (>= $q6@202@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3))
      $q6@202@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3))
        $q6@202@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 148 | !(0 <= $q6@202@01 && $q6@202@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($self$1@139@01, 3))|)]
(assert (not
  (and
    (<= 0 $q6@202@01)
    (<
      $q6@202@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q6@202@01)
    (<
      $q6@202@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3)))))
  (and
    (<= 0 $q6@202@01)
    (<
      $q6@202@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3))
          $q6@202@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3))
            $q6@202@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q6@202@01)
      (<
        $q6@202@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3))))))
  (and
    (<= 0 $q6@202@01)
    (<
      $q6@202@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@202@01 Int)) (!
  (and
    (or (<= 0 $q6@202@01) (not (<= 0 $q6@202@01)))
    (=>
      (and
        (<= 0 $q6@202@01)
        (<
          $q6@202@01
          (Seq_length
            ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3)))))
      (and
        (<= 0 $q6@202@01)
        (<
          $q6@202@01
          (Seq_length
            ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3))
              $q6@202@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3))
                $q6@202@01))))))
    (or
      (not
        (and
          (<= 0 $q6@202@01)
          (<
            $q6@202@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3))))))
      (and
        (<= 0 $q6@202@01)
        (<
          $q6@202@01
          (Seq_length
            ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3))
    $q6@202@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@775@11@775@358-aux|)))
(assert (forall (($q6@202@01 Int)) (!
  (=>
    (and
      (<= 0 $q6@202@01)
      (<
        $q6@202@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3))
          $q6@202@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3))
          $q6@202@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3))
    $q6@202@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@775@11@775@358|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]),
;     $q7): Seq[Int]) }
;     |($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]),
;     $q7): Seq[Int])| ==
;     10)
(declare-const $t@203@01 $Snap)
(assert (= $t@203@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } |($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10)
(declare-const $q7@204@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10
; [eval] |($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc($self$1, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@204@01 Int)) (!
  (=
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@204@01))
    10)
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@204@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@776@11@776@215|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]),
;     $q7): Seq[Int]) }
;     (forall $q8: Int ::
;       { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] }
;       0 <= $q8 &&
;       $q8 <
;       |($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])| ==>
;       -170141183460469231731687303715884105728 <=
;       ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] &&
;       ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] <=
;       170141183460469231731687303715884105727))
(declare-const $t@205@01 $Snap)
(assert (= $t@205@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } (forall $q8: Int :: { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727))
(declare-const $q7@206@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q8: Int :: { ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727)
(declare-const $q8@207@01 Int)
(push) ; 4
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] 0 <= $q8
(push) ; 5
; [then-branch: 150 | !(0 <= $q8@207@01) | live]
; [else-branch: 150 | 0 <= $q8@207@01 | live]
(push) ; 6
; [then-branch: 150 | !(0 <= $q8@207@01)]
(assert (not (<= 0 $q8@207@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 150 | 0 <= $q8@207@01]
(assert (<= 0 $q8@207@01))
; [eval] $q8 < |($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc($self$1, 4)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q8@207@01) (not (<= 0 $q8@207@01))))
(push) ; 5
; [then-branch: 151 | 0 <= $q8@207@01 && $q8@207@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$1@139@01, 4)), $q7@206@01)| | live]
; [else-branch: 151 | !(0 <= $q8@207@01 && $q8@207@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$1@139@01, 4)), $q7@206@01)|) | live]
(push) ; 6
; [then-branch: 151 | 0 <= $q8@207@01 && $q8@207@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$1@139@01, 4)), $q7@206@01)|]
(assert (and
  (<= 0 $q8@207@01)
  (<
    $q8@207@01
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] -170141183460469231731687303715884105728
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc($self$1, 4)
(push) ; 7
(assert (not (>= $q8@207@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 152 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$1@139@01, 4)), $q7@206@01)[$q8@207@01]) | live]
; [else-branch: 152 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$1@139@01, 4)), $q7@206@01)[$q8@207@01] | live]
(push) ; 8
; [then-branch: 152 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$1@139@01, 4)), $q7@206@01)[$q8@207@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01)
      $q8@207@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 152 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$1@139@01, 4)), $q7@206@01)[$q8@207@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01)
    $q8@207@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc($self$1, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc($self$1, 4)
(push) ; 9
(assert (not (>= $q8@207@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01)
      $q8@207@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01)
        $q8@207@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 151 | !(0 <= $q8@207@01 && $q8@207@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($self$1@139@01, 4)), $q7@206@01)|)]
(assert (not
  (and
    (<= 0 $q8@207@01)
    (<
      $q8@207@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q8@207@01)
    (<
      $q8@207@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01))))
  (and
    (<= 0 $q8@207@01)
    (<
      $q8@207@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01)
          $q8@207@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01)
            $q8@207@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q8@207@01)
      (<
        $q8@207@01
        (Seq_length
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01)))))
  (and
    (<= 0 $q8@207@01)
    (<
      $q8@207@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q8@207@01 Int)) (!
  (and
    (or (<= 0 $q8@207@01) (not (<= 0 $q8@207@01)))
    (=>
      (and
        (<= 0 $q8@207@01)
        (<
          $q8@207@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01))))
      (and
        (<= 0 $q8@207@01)
        (<
          $q8@207@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01)
              $q8@207@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01)
                $q8@207@01))))))
    (or
      (not
        (and
          (<= 0 $q8@207@01)
          (<
            $q8@207@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01)))))
      (and
        (<= 0 $q8@207@01)
        (<
          $q8@207@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01))))))
  :pattern ((Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01)
    $q8@207@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@777@122@777@621-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@206@01 Int)) (!
  (forall (($q8@207@01 Int)) (!
    (and
      (or (<= 0 $q8@207@01) (not (<= 0 $q8@207@01)))
      (=>
        (and
          (<= 0 $q8@207@01)
          (<
            $q8@207@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01))))
        (and
          (<= 0 $q8@207@01)
          (<
            $q8@207@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01)))
          (or
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01)
                $q8@207@01))
            (not
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01)
                  $q8@207@01))))))
      (or
        (not
          (and
            (<= 0 $q8@207@01)
            (<
              $q8@207@01
              (Seq_length
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01)))))
        (and
          (<= 0 $q8@207@01)
          (<
            $q8@207@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01))))))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01)
      $q8@207@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@777@122@777@621-aux|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@777@11@777@622-aux|)))
(assert (forall (($q7@206@01 Int)) (!
  (forall (($q8@207@01 Int)) (!
    (=>
      (and
        (<= 0 $q8@207@01)
        (<
          $q8@207@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01))))
      (and
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01)
            $q8@207@01))
        (<=
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01)
            $q8@207@01)
          170141183460469231731687303715884105727)))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01)
      $q8@207@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@777@122@777@621|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $self$1@139@01 4)) $q7@206@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@777@11@777@622|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($self$1, 5)): Int) &&
;   ($struct_get($struct_loc($self$1, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@208@01 $Snap)
(assert (= $t@208@01 ($Snap.combine ($Snap.first $t@208@01) ($Snap.second $t@208@01))))
(assert (= ($Snap.first $t@208@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $self$1@139@01 5))))
(assert (= ($Snap.second $t@208@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($self$1, 5)): Int)
; [eval] $struct_loc($self$1, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@139@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($self$1, 6)): Int) &&
;   ($struct_get($struct_loc($self$1, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@209@01 $Snap)
(assert (= $t@209@01 ($Snap.combine ($Snap.first $t@209@01) ($Snap.second $t@209@01))))
(assert (= ($Snap.first $t@209@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($self$1, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($self$1, 6)): Int)
; [eval] $struct_loc($self$1, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $self$1@139@01 6))))
(assert (= ($Snap.second $t@209@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($self$1, 6)): Int)
; [eval] $struct_loc($self$1, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $self$1@139@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@210@01 $Snap)
(assert (= $t@210@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q9@211@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(push) ; 4
; [then-branch: 153 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@139@01, 8)), $q9@211@01)) | live]
; [else-branch: 153 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@139@01, 8)), $q9@211@01) | live]
(push) ; 5
; [then-branch: 153 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@139@01, 8)), $q9@211@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 8)) $q9@211@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 153 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@139@01, 8)), $q9@211@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 8)) $q9@211@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 8)) $q9@211@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 8)) $q9@211@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@211@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 8)) $q9@211@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 8)) $q9@211@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 8)) $q9@211@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@780@11@780@354-aux|)))
(assert (forall (($q9@211@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 8)) $q9@211@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 8)) $q9@211@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 8)) $q9@211@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@780@11@780@354|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $t@212@01 $Snap)
(assert (= $t@212@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) } ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int))
(declare-const $q9@213@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@213@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 8)) $q9@213@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 8)) $q9@213@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@781@11@781@262|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) &&
;     ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@214@01 $Snap)
(assert (= $t@214@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) } 0 <= ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q10@215@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
(push) ; 4
; [then-branch: 154 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@139@01, 9)), $q10@215@01)) | live]
; [else-branch: 154 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@139@01, 9)), $q10@215@01) | live]
(push) ; 5
; [then-branch: 154 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@139@01, 9)), $q10@215@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 9)) $q10@215@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 154 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($self$1@139@01, 9)), $q10@215@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 9)) $q10@215@01)))
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 9)) $q10@215@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 9)) $q10@215@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@215@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 9)) $q10@215@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 9)) $q10@215@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 9)) $q10@215@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@782@11@782@358-aux|)))
(assert (forall (($q10@215@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 9)) $q10@215@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 9)) $q10@215@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 9)) $q10@215@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@782@11@782@358|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) <=
;     ($map_sum(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])): Int))
(declare-const $t@216@01 $Snap)
(assert (= $t@216@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) } ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])): Int))
(declare-const $q10@217@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
; [eval] ($map_sum(($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($self$1, 9)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@217@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 9)) $q10@217@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 9)) $q10@217@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@783@11@783@265|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@218@01 $Snap)
(assert (= $t@218@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($self$1, -1)): Int)
; [eval] $struct_loc($self$1, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $self$1@139@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@219@01 $Snap)
(assert (= $t@219@01 ($Snap.combine ($Snap.first $t@219@01) ($Snap.second $t@219@01))))
(assert (= ($Snap.first $t@219@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@141@01 0))))
(assert (= ($Snap.second $t@219@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@141@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@220@01 $Snap)
(assert (= $t@220@01 ($Snap.combine ($Snap.first $t@220@01) ($Snap.second $t@220@01))))
(assert (= ($Snap.first $t@220@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@141@01 1))))
(assert (= ($Snap.second $t@220@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@141@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@221@01 $Snap)
(assert (= $t@221@01 ($Snap.combine ($Snap.first $t@221@01) ($Snap.second $t@221@01))))
(assert (= ($Snap.first $t@221@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@141@01 2))))
(assert (= ($Snap.second $t@221@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@141@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@222@01 $Snap)
(assert (= $t@222@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@141@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@223@01 $Snap)
(assert (= $t@223@01 ($Snap.combine ($Snap.first $t@223@01) ($Snap.second $t@223@01))))
(assert (= ($Snap.first $t@223@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@141@01 4))))
(assert (= ($Snap.second $t@223@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@141@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@224@01 $Snap)
(assert (= $t@224@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@141@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@225@01 $Snap)
(assert (= $t@225@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@226@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc($self$1, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$1, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$1, 8)
; [eval] ($map_get(($struct_get($struct_loc($self$0, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc($self$0, 8)): $Map[Int, Int])
; [eval] $struct_loc($self$0, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($a@226@01 Int)) (!
  (>=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 8)) $a@226@01)
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$0@137@01 8)) $a@226@01))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $self$1@139@01 8)) $a@226@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@791@11@791@263|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($self$1, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($self$0, 3)): Seq[Int])
(declare-const $t@227@01 $Snap)
(assert (= $t@227@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($self$1, 3)): Seq[Int]) == ($struct_get($struct_loc($self$0, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc($self$1, 3)): Seq[Int])
; [eval] $struct_loc($self$1, 3)
; [eval] ($struct_get($struct_loc($self$0, 3)): Seq[Int])
; [eval] $struct_loc($self$0, 3)
(assert (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> $self$1@139@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> $self$0@137@01 3))))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; assert ($struct_get($struct_loc($self$1, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($self$1, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc($self$1, 3)): Seq[Int]) == ($struct_get($struct_loc($self$1, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc($self$1, 3)): Seq[Int])
; [eval] $struct_loc($self$1, 3)
; [eval] ($struct_get($struct_loc($self$1, 3)): Seq[Int])
; [eval] $struct_loc($self$1, 3)
(pop) ; 2
(pop) ; 1
; ---------- $forced_ether_check ----------
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var self: $Struct
(declare-const self@228@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@229@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@230@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@231@01 $Map<Int~_$Struct>)
; [exec]
; var $post: Bool
(declare-const $post@232@01 Bool)
; [exec]
; var $havoc: Int
(declare-const $havoc@233@01 Int)
; [exec]
; var block: $Struct
(declare-const block@234@01 $Struct)
; [exec]
; inhale |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
(declare-const $t@235@01 $Snap)
(assert (= $t@235@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 0))) 12))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] }
;     0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] &&
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <=
;     170141183460469231731687303715884105727)
(declare-const $t@236@01 $Snap)
(assert (= $t@236@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] } 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@237@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 155 | !(0 <= $q0@237@01) | live]
; [else-branch: 155 | 0 <= $q0@237@01 | live]
(push) ; 5
; [then-branch: 155 | !(0 <= $q0@237@01)]
(assert (not (<= 0 $q0@237@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 155 | 0 <= $q0@237@01]
(assert (<= 0 $q0@237@01))
; [eval] $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@237@01) (not (<= 0 $q0@237@01))))
(push) ; 4
; [then-branch: 156 | 0 <= $q0@237@01 && $q0@237@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@228@01, 0))| | live]
; [else-branch: 156 | !(0 <= $q0@237@01 && $q0@237@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@228@01, 0))|) | live]
(push) ; 5
; [then-branch: 156 | 0 <= $q0@237@01 && $q0@237@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@228@01, 0))|]
(assert (and
  (<= 0 $q0@237@01)
  (<
    $q0@237@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 0))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (>= $q0@237@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 157 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@228@01, 0))[$q0@237@01]) | live]
; [else-branch: 157 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@228@01, 0))[$q0@237@01] | live]
(push) ; 7
; [then-branch: 157 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@228@01, 0))[$q0@237@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 0))
      $q0@237@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 157 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@228@01, 0))[$q0@237@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 0)) $q0@237@01)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (>= $q0@237@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 0))
      $q0@237@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 0))
        $q0@237@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 156 | !(0 <= $q0@237@01 && $q0@237@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@228@01, 0))|)]
(assert (not
  (and
    (<= 0 $q0@237@01)
    (<
      $q0@237@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 0)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q0@237@01)
    (<
      $q0@237@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 0)))))
  (and
    (<= 0 $q0@237@01)
    (<
      $q0@237@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 0))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 0))
          $q0@237@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 0))
            $q0@237@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q0@237@01)
      (<
        $q0@237@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 0))))))
  (and
    (<= 0 $q0@237@01)
    (<
      $q0@237@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 0)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@237@01 Int)) (!
  (and
    (or (<= 0 $q0@237@01) (not (<= 0 $q0@237@01)))
    (=>
      (and
        (<= 0 $q0@237@01)
        (<
          $q0@237@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 0)))))
      (and
        (<= 0 $q0@237@01)
        (<
          $q0@237@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 0))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 0))
              $q0@237@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 0))
                $q0@237@01))))))
    (or
      (not
        (and
          (<= 0 $q0@237@01)
          (<
            $q0@237@01
            (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 0))))))
      (and
        (<= 0 $q0@237@01)
        (<
          $q0@237@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 0)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 0))
    $q0@237@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@806@11@806@346-aux|)))
(assert (forall (($q0@237@01 Int)) (!
  (=>
    (and
      (<= 0 $q0@237@01)
      (<
        $q0@237@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 0)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 0))
          $q0@237@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 0))
          $q0@237@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 0))
    $q0@237@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@806@11@806@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
(declare-const $t@238@01 $Snap)
(assert (= $t@238@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(assert (= (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $t@239@01 $Snap)
(assert (= $t@239@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $q1@240@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 158 | !(0 <= $q1@240@01) | live]
; [else-branch: 158 | 0 <= $q1@240@01 | live]
(push) ; 5
; [then-branch: 158 | !(0 <= $q1@240@01)]
(assert (not (<= 0 $q1@240@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 158 | 0 <= $q1@240@01]
(assert (<= 0 $q1@240@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@240@01) (not (<= 0 $q1@240@01))))
(push) ; 4
; [then-branch: 159 | 0 <= $q1@240@01 && $q1@240@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@228@01, 1))| | live]
; [else-branch: 159 | !(0 <= $q1@240@01 && $q1@240@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@228@01, 1))|) | live]
(push) ; 5
; [then-branch: 159 | 0 <= $q1@240@01 && $q1@240@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@228@01, 1))|]
(assert (and
  (<= 0 $q1@240@01)
  (<
    $q1@240@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))))))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 6
(assert (not (>= $q1@240@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 159 | !(0 <= $q1@240@01 && $q1@240@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@228@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@240@01)
    (<
      $q1@240@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@240@01)
      (<
        $q1@240@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))))))
  (and
    (<= 0 $q1@240@01)
    (<
      $q1@240@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@240@01 Int)) (!
  (and
    (or (<= 0 $q1@240@01) (not (<= 0 $q1@240@01)))
    (or
      (not
        (and
          (<= 0 $q1@240@01)
          (<
            $q1@240@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))))))
      (and
        (<= 0 $q1@240@01)
        (<
          $q1@240@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
    $q1@240@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@808@11@808@228-aux|)))
(assert (forall (($q1@240@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@240@01)
      (<
        $q1@240@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
          $q1@240@01))
      12))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
    $q1@240@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@808@11@808@228|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     (forall $q2: Int ::
;       { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] }
;       0 <= $q2 &&
;       $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==>
;       -170141183460469231731687303715884105728 <=
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] &&
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <=
;       170141183460469231731687303715884105727))
(declare-const $t@241@01 $Snap)
(assert (= $t@241@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727))
(declare-const $q1@242@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 160 | !(0 <= $q1@242@01) | live]
; [else-branch: 160 | 0 <= $q1@242@01 | live]
(push) ; 5
; [then-branch: 160 | !(0 <= $q1@242@01)]
(assert (not (<= 0 $q1@242@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 160 | 0 <= $q1@242@01]
(assert (<= 0 $q1@242@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@242@01) (not (<= 0 $q1@242@01))))
(push) ; 4
; [then-branch: 161 | 0 <= $q1@242@01 && $q1@242@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@228@01, 1))| | live]
; [else-branch: 161 | !(0 <= $q1@242@01 && $q1@242@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@228@01, 1))|) | live]
(push) ; 5
; [then-branch: 161 | 0 <= $q1@242@01 && $q1@242@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@228@01, 1))|]
(assert (and
  (<= 0 $q1@242@01)
  (<
    $q1@242@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))))))
; [eval] (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
(declare-const $q2@243@01 Int)
(push) ; 6
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] 0 <= $q2
(push) ; 7
; [then-branch: 162 | !(0 <= $q2@243@01) | live]
; [else-branch: 162 | 0 <= $q2@243@01 | live]
(push) ; 8
; [then-branch: 162 | !(0 <= $q2@243@01)]
(assert (not (<= 0 $q2@243@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 162 | 0 <= $q2@243@01]
(assert (<= 0 $q2@243@01))
; [eval] $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@242@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q2@243@01) (not (<= 0 $q2@243@01))))
(push) ; 7
; [then-branch: 163 | 0 <= $q2@243@01 && $q2@243@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@228@01, 1))[$q1@242@01]| | live]
; [else-branch: 163 | !(0 <= $q2@243@01 && $q2@243@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@228@01, 1))[$q1@242@01]|) | live]
(push) ; 8
; [then-branch: 163 | 0 <= $q2@243@01 && $q2@243@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@228@01, 1))[$q1@242@01]|]
(assert (and
  (<= 0 $q2@243@01)
  (<
    $q2@243@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
        $q1@242@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@242@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q2@243@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 164 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@228@01, 1))[$q1@242@01][$q2@243@01]) | live]
; [else-branch: 164 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@228@01, 1))[$q1@242@01][$q2@243@01] | live]
(push) ; 10
; [then-branch: 164 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@228@01, 1))[$q1@242@01][$q2@243@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
        $q1@242@01)
      $q2@243@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 164 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@228@01, 1))[$q1@242@01][$q2@243@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
      $q1@242@01)
    $q2@243@01)))
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 11
(assert (not (>= $q1@242@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= $q2@243@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
        $q1@242@01)
      $q2@243@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
          $q1@242@01)
        $q2@243@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 163 | !(0 <= $q2@243@01 && $q2@243@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@228@01, 1))[$q1@242@01]|)]
(assert (not
  (and
    (<= 0 $q2@243@01)
    (<
      $q2@243@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
          $q1@242@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q2@243@01)
    (<
      $q2@243@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
          $q1@242@01))))
  (and
    (<= 0 $q2@243@01)
    (<
      $q2@243@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
          $q1@242@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
            $q1@242@01)
          $q2@243@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
              $q1@242@01)
            $q2@243@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q2@243@01)
      (<
        $q2@243@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
            $q1@242@01)))))
  (and
    (<= 0 $q2@243@01)
    (<
      $q2@243@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
          $q1@242@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@243@01 Int)) (!
  (and
    (or (<= 0 $q2@243@01) (not (<= 0 $q2@243@01)))
    (=>
      (and
        (<= 0 $q2@243@01)
        (<
          $q2@243@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
              $q1@242@01))))
      (and
        (<= 0 $q2@243@01)
        (<
          $q2@243@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
              $q1@242@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
                $q1@242@01)
              $q2@243@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
                  $q1@242@01)
                $q2@243@01))))))
    (or
      (not
        (and
          (<= 0 $q2@243@01)
          (<
            $q2@243@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
                $q1@242@01)))))
      (and
        (<= 0 $q2@243@01)
        (<
          $q2@243@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
              $q1@242@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
      $q1@242@01)
    $q2@243@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@809@166@809@541-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 161 | !(0 <= $q1@242@01 && $q1@242@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@228@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@242@01)
    (<
      $q1@242@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q1@242@01)
    (<
      $q1@242@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1)))))
  (and
    (<= 0 $q1@242@01)
    (<
      $q1@242@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))))
    (forall (($q2@243@01 Int)) (!
      (and
        (or (<= 0 $q2@243@01) (not (<= 0 $q2@243@01)))
        (=>
          (and
            (<= 0 $q2@243@01)
            (<
              $q2@243@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
                  $q1@242@01))))
          (and
            (<= 0 $q2@243@01)
            (<
              $q2@243@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
                  $q1@242@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
                    $q1@242@01)
                  $q2@243@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
                      $q1@242@01)
                    $q2@243@01))))))
        (or
          (not
            (and
              (<= 0 $q2@243@01)
              (<
                $q2@243@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
                    $q1@242@01)))))
          (and
            (<= 0 $q2@243@01)
            (<
              $q2@243@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
                  $q1@242@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
          $q1@242@01)
        $q2@243@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@809@166@809@541-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@242@01)
      (<
        $q1@242@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))))))
  (and
    (<= 0 $q1@242@01)
    (<
      $q1@242@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@242@01 Int)) (!
  (and
    (or (<= 0 $q1@242@01) (not (<= 0 $q1@242@01)))
    (=>
      (and
        (<= 0 $q1@242@01)
        (<
          $q1@242@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1)))))
      (and
        (<= 0 $q1@242@01)
        (<
          $q1@242@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))))
        (forall (($q2@243@01 Int)) (!
          (and
            (or (<= 0 $q2@243@01) (not (<= 0 $q2@243@01)))
            (=>
              (and
                (<= 0 $q2@243@01)
                (<
                  $q2@243@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
                      $q1@242@01))))
              (and
                (<= 0 $q2@243@01)
                (<
                  $q2@243@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
                      $q1@242@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
                        $q1@242@01)
                      $q2@243@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
                          $q1@242@01)
                        $q2@243@01))))))
            (or
              (not
                (and
                  (<= 0 $q2@243@01)
                  (<
                    $q2@243@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
                        $q1@242@01)))))
              (and
                (<= 0 $q2@243@01)
                (<
                  $q2@243@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
                      $q1@242@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
              $q1@242@01)
            $q2@243@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@809@166@809@541-aux|))))
    (or
      (not
        (and
          (<= 0 $q1@242@01)
          (<
            $q1@242@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))))))
      (and
        (<= 0 $q1@242@01)
        (<
          $q1@242@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
    $q1@242@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@809@11@809@542-aux|)))
(assert (forall (($q1@242@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@242@01)
      (<
        $q1@242@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1)))))
    (forall (($q2@243@01 Int)) (!
      (=>
        (and
          (<= 0 $q2@243@01)
          (<
            $q2@243@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
                $q1@242@01))))
        (and
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
                $q1@242@01)
              $q2@243@01))
          (<=
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
                $q1@242@01)
              $q2@243@01)
            170141183460469231731687303715884105727)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
          $q1@242@01)
        $q2@243@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@809@166@809@541|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@228@01 1))
    $q1@242@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@809@11@809@542|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
(declare-const $t@244@01 $Snap)
(assert (= $t@244@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(assert (=
  (Seq_length ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2)))
  2))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $t@245@01 $Snap)
(assert (= $t@245@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $q3@246@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 165 | !(0 <= $q3@246@01) | live]
; [else-branch: 165 | 0 <= $q3@246@01 | live]
(push) ; 5
; [then-branch: 165 | !(0 <= $q3@246@01)]
(assert (not (<= 0 $q3@246@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 165 | 0 <= $q3@246@01]
(assert (<= 0 $q3@246@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@246@01) (not (<= 0 $q3@246@01))))
(push) ; 4
; [then-branch: 166 | 0 <= $q3@246@01 && $q3@246@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))| | live]
; [else-branch: 166 | !(0 <= $q3@246@01 && $q3@246@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))|) | live]
(push) ; 5
; [then-branch: 166 | 0 <= $q3@246@01 && $q3@246@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))|]
(assert (and
  (<= 0 $q3@246@01)
  (<
    $q3@246@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 6
(assert (not (>= $q3@246@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 166 | !(0 <= $q3@246@01 && $q3@246@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@246@01)
    (<
      $q3@246@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@246@01)
      (<
        $q3@246@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))))))
  (and
    (<= 0 $q3@246@01)
    (<
      $q3@246@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@246@01 Int)) (!
  (and
    (or (<= 0 $q3@246@01) (not (<= 0 $q3@246@01)))
    (or
      (not
        (and
          (<= 0 $q3@246@01)
          (<
            $q3@246@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))))))
      (and
        (<= 0 $q3@246@01)
        (<
          $q3@246@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
    $q3@246@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@811@11@811@242-aux|)))
(assert (forall (($q3@246@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@246@01)
      (<
        $q3@246@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
          $q3@246@01))
      2))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
    $q3@246@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@811@11@811@242|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==
;       2))
(declare-const $t@247@01 $Snap)
(assert (= $t@247@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2))
(declare-const $q3@248@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 167 | !(0 <= $q3@248@01) | live]
; [else-branch: 167 | 0 <= $q3@248@01 | live]
(push) ; 5
; [then-branch: 167 | !(0 <= $q3@248@01)]
(assert (not (<= 0 $q3@248@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 167 | 0 <= $q3@248@01]
(assert (<= 0 $q3@248@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@248@01) (not (<= 0 $q3@248@01))))
(push) ; 4
; [then-branch: 168 | 0 <= $q3@248@01 && $q3@248@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))| | live]
; [else-branch: 168 | !(0 <= $q3@248@01 && $q3@248@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))|) | live]
(push) ; 5
; [then-branch: 168 | 0 <= $q3@248@01 && $q3@248@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))|]
(assert (and
  (<= 0 $q3@248@01)
  (<
    $q3@248@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
(declare-const $q4@249@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 169 | !(0 <= $q4@249@01) | live]
; [else-branch: 169 | 0 <= $q4@249@01 | live]
(push) ; 8
; [then-branch: 169 | !(0 <= $q4@249@01)]
(assert (not (<= 0 $q4@249@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 169 | 0 <= $q4@249@01]
(assert (<= 0 $q4@249@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@248@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@249@01) (not (<= 0 $q4@249@01))))
(push) ; 7
; [then-branch: 170 | 0 <= $q4@249@01 && $q4@249@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))[$q3@248@01]| | live]
; [else-branch: 170 | !(0 <= $q4@249@01 && $q4@249@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))[$q3@248@01]|) | live]
(push) ; 8
; [then-branch: 170 | 0 <= $q4@249@01 && $q4@249@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))[$q3@248@01]|]
(assert (and
  (<= 0 $q4@249@01)
  (<
    $q4@249@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
        $q3@248@01)))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@248@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q4@249@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 170 | !(0 <= $q4@249@01 && $q4@249@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))[$q3@248@01]|)]
(assert (not
  (and
    (<= 0 $q4@249@01)
    (<
      $q4@249@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
          $q3@248@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@249@01)
      (<
        $q4@249@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
            $q3@248@01)))))
  (and
    (<= 0 $q4@249@01)
    (<
      $q4@249@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
          $q3@248@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@249@01 Int)) (!
  (and
    (or (<= 0 $q4@249@01) (not (<= 0 $q4@249@01)))
    (or
      (not
        (and
          (<= 0 $q4@249@01)
          (<
            $q4@249@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                $q3@248@01)))))
      (and
        (<= 0 $q4@249@01)
        (<
          $q4@249@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
              $q3@248@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
      $q3@248@01)
    $q4@249@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@812@176@812@422-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 168 | !(0 <= $q3@248@01 && $q3@248@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@248@01)
    (<
      $q3@248@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@248@01)
    (<
      $q3@248@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2)))))
  (and
    (<= 0 $q3@248@01)
    (<
      $q3@248@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))))
    (forall (($q4@249@01 Int)) (!
      (and
        (or (<= 0 $q4@249@01) (not (<= 0 $q4@249@01)))
        (or
          (not
            (and
              (<= 0 $q4@249@01)
              (<
                $q4@249@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                    $q3@248@01)))))
          (and
            (<= 0 $q4@249@01)
            (<
              $q4@249@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                  $q3@248@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
          $q3@248@01)
        $q4@249@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@812@176@812@422-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@248@01)
      (<
        $q3@248@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))))))
  (and
    (<= 0 $q3@248@01)
    (<
      $q3@248@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@248@01 Int)) (!
  (and
    (or (<= 0 $q3@248@01) (not (<= 0 $q3@248@01)))
    (=>
      (and
        (<= 0 $q3@248@01)
        (<
          $q3@248@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2)))))
      (and
        (<= 0 $q3@248@01)
        (<
          $q3@248@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))))
        (forall (($q4@249@01 Int)) (!
          (and
            (or (<= 0 $q4@249@01) (not (<= 0 $q4@249@01)))
            (or
              (not
                (and
                  (<= 0 $q4@249@01)
                  (<
                    $q4@249@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                        $q3@248@01)))))
              (and
                (<= 0 $q4@249@01)
                (<
                  $q4@249@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                      $q3@248@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
              $q3@248@01)
            $q4@249@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@812@176@812@422-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@248@01)
          (<
            $q3@248@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))))))
      (and
        (<= 0 $q3@248@01)
        (<
          $q3@248@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
    $q3@248@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@812@11@812@423-aux|)))
(assert (forall (($q3@248@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@248@01)
      (<
        $q3@248@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2)))))
    (forall (($q4@249@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@249@01)
          (<
            $q4@249@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                $q3@248@01))))
        (=
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                $q3@248@01)
              $q4@249@01))
          2))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
          $q3@248@01)
        $q4@249@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@812@176@812@422|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
    $q3@248@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@812@11@812@423|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       (forall $q5: Int ::
;         { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] }
;         0 <= $q5 &&
;         $q5 <
;         |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==>
;         -170141183460469231731687303715884105728 <=
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] &&
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <=
;         170141183460469231731687303715884105727)))
(declare-const $t@250@01 $Snap)
(assert (= $t@250@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)))
(declare-const $q3@251@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 171 | !(0 <= $q3@251@01) | live]
; [else-branch: 171 | 0 <= $q3@251@01 | live]
(push) ; 5
; [then-branch: 171 | !(0 <= $q3@251@01)]
(assert (not (<= 0 $q3@251@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 171 | 0 <= $q3@251@01]
(assert (<= 0 $q3@251@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@251@01) (not (<= 0 $q3@251@01))))
(push) ; 4
; [then-branch: 172 | 0 <= $q3@251@01 && $q3@251@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))| | live]
; [else-branch: 172 | !(0 <= $q3@251@01 && $q3@251@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))|) | live]
(push) ; 5
; [then-branch: 172 | 0 <= $q3@251@01 && $q3@251@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))|]
(assert (and
  (<= 0 $q3@251@01)
  (<
    $q3@251@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
(declare-const $q4@252@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 173 | !(0 <= $q4@252@01) | live]
; [else-branch: 173 | 0 <= $q4@252@01 | live]
(push) ; 8
; [then-branch: 173 | !(0 <= $q4@252@01)]
(assert (not (<= 0 $q4@252@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 173 | 0 <= $q4@252@01]
(assert (<= 0 $q4@252@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@251@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@252@01) (not (<= 0 $q4@252@01))))
(push) ; 7
; [then-branch: 174 | 0 <= $q4@252@01 && $q4@252@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))[$q3@251@01]| | live]
; [else-branch: 174 | !(0 <= $q4@252@01 && $q4@252@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))[$q3@251@01]|) | live]
(push) ; 8
; [then-branch: 174 | 0 <= $q4@252@01 && $q4@252@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))[$q3@251@01]|]
(assert (and
  (<= 0 $q4@252@01)
  (<
    $q4@252@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
        $q3@251@01)))))
; [eval] (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
(declare-const $q5@253@01 Int)
(push) ; 9
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] 0 <= $q5
(push) ; 10
; [then-branch: 175 | !(0 <= $q5@253@01) | live]
; [else-branch: 175 | 0 <= $q5@253@01 | live]
(push) ; 11
; [then-branch: 175 | !(0 <= $q5@253@01)]
(assert (not (<= 0 $q5@253@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 175 | 0 <= $q5@253@01]
(assert (<= 0 $q5@253@01))
; [eval] $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@251@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@252@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q5@253@01) (not (<= 0 $q5@253@01))))
(push) ; 10
; [then-branch: 176 | 0 <= $q5@253@01 && $q5@253@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))[$q3@251@01][$q4@252@01]| | live]
; [else-branch: 176 | !(0 <= $q5@253@01 && $q5@253@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))[$q3@251@01][$q4@252@01]|) | live]
(push) ; 11
; [then-branch: 176 | 0 <= $q5@253@01 && $q5@253@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))[$q3@251@01][$q4@252@01]|]
(assert (and
  (<= 0 $q5@253@01)
  (<
    $q5@253@01
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
          $q3@251@01)
        $q4@252@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@251@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@252@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q5@253@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 177 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))[$q3@251@01][$q4@252@01][$q5@253@01]) | live]
; [else-branch: 177 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))[$q3@251@01][$q4@252@01][$q5@253@01] | live]
(push) ; 13
; [then-branch: 177 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))[$q3@251@01][$q4@252@01][$q5@253@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
          $q3@251@01)
        $q4@252@01)
      $q5@253@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 177 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))[$q3@251@01][$q4@252@01][$q5@253@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
        $q3@251@01)
      $q4@252@01)
    $q5@253@01)))
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 14
(assert (not (>= $q3@251@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q4@252@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q5@253@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
          $q3@251@01)
        $q4@252@01)
      $q5@253@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
            $q3@251@01)
          $q4@252@01)
        $q5@253@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 176 | !(0 <= $q5@253@01 && $q5@253@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))[$q3@251@01][$q4@252@01]|)]
(assert (not
  (and
    (<= 0 $q5@253@01)
    (<
      $q5@253@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
            $q3@251@01)
          $q4@252@01))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q5@253@01)
    (<
      $q5@253@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
            $q3@251@01)
          $q4@252@01))))
  (and
    (<= 0 $q5@253@01)
    (<
      $q5@253@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
            $q3@251@01)
          $q4@252@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
              $q3@251@01)
            $q4@252@01)
          $q5@253@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                $q3@251@01)
              $q4@252@01)
            $q5@253@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q5@253@01)
      (<
        $q5@253@01
        (Seq_length
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
              $q3@251@01)
            $q4@252@01)))))
  (and
    (<= 0 $q5@253@01)
    (<
      $q5@253@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
            $q3@251@01)
          $q4@252@01))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@253@01 Int)) (!
  (and
    (or (<= 0 $q5@253@01) (not (<= 0 $q5@253@01)))
    (=>
      (and
        (<= 0 $q5@253@01)
        (<
          $q5@253@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                $q3@251@01)
              $q4@252@01))))
      (and
        (<= 0 $q5@253@01)
        (<
          $q5@253@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                $q3@251@01)
              $q4@252@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                  $q3@251@01)
                $q4@252@01)
              $q5@253@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                    $q3@251@01)
                  $q4@252@01)
                $q5@253@01))))))
    (or
      (not
        (and
          (<= 0 $q5@253@01)
          (<
            $q5@253@01
            (Seq_length
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                  $q3@251@01)
                $q4@252@01)))))
      (and
        (<= 0 $q5@253@01)
        (<
          $q5@253@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                $q3@251@01)
              $q4@252@01))))))
  :pattern ((Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
        $q3@251@01)
      $q4@252@01)
    $q5@253@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@813@351@813@766-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 174 | !(0 <= $q4@252@01 && $q4@252@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))[$q3@251@01]|)]
(assert (not
  (and
    (<= 0 $q4@252@01)
    (<
      $q4@252@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
          $q3@251@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q4@252@01)
    (<
      $q4@252@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
          $q3@251@01))))
  (and
    (<= 0 $q4@252@01)
    (<
      $q4@252@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
          $q3@251@01)))
    (forall (($q5@253@01 Int)) (!
      (and
        (or (<= 0 $q5@253@01) (not (<= 0 $q5@253@01)))
        (=>
          (and
            (<= 0 $q5@253@01)
            (<
              $q5@253@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                    $q3@251@01)
                  $q4@252@01))))
          (and
            (<= 0 $q5@253@01)
            (<
              $q5@253@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                    $q3@251@01)
                  $q4@252@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                      $q3@251@01)
                    $q4@252@01)
                  $q5@253@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                        $q3@251@01)
                      $q4@252@01)
                    $q5@253@01))))))
        (or
          (not
            (and
              (<= 0 $q5@253@01)
              (<
                $q5@253@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                      $q3@251@01)
                    $q4@252@01)))))
          (and
            (<= 0 $q5@253@01)
            (<
              $q5@253@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                    $q3@251@01)
                  $q4@252@01))))))
      :pattern ((Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
            $q3@251@01)
          $q4@252@01)
        $q5@253@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@813@351@813@766-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@252@01)
      (<
        $q4@252@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
            $q3@251@01)))))
  (and
    (<= 0 $q4@252@01)
    (<
      $q4@252@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
          $q3@251@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@252@01 Int)) (!
  (and
    (or (<= 0 $q4@252@01) (not (<= 0 $q4@252@01)))
    (=>
      (and
        (<= 0 $q4@252@01)
        (<
          $q4@252@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
              $q3@251@01))))
      (and
        (<= 0 $q4@252@01)
        (<
          $q4@252@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
              $q3@251@01)))
        (forall (($q5@253@01 Int)) (!
          (and
            (or (<= 0 $q5@253@01) (not (<= 0 $q5@253@01)))
            (=>
              (and
                (<= 0 $q5@253@01)
                (<
                  $q5@253@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                        $q3@251@01)
                      $q4@252@01))))
              (and
                (<= 0 $q5@253@01)
                (<
                  $q5@253@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                        $q3@251@01)
                      $q4@252@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                          $q3@251@01)
                        $q4@252@01)
                      $q5@253@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                            $q3@251@01)
                          $q4@252@01)
                        $q5@253@01))))))
            (or
              (not
                (and
                  (<= 0 $q5@253@01)
                  (<
                    $q5@253@01
                    (Seq_length
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                          $q3@251@01)
                        $q4@252@01)))))
              (and
                (<= 0 $q5@253@01)
                (<
                  $q5@253@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                        $q3@251@01)
                      $q4@252@01))))))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                $q3@251@01)
              $q4@252@01)
            $q5@253@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@813@351@813@766-aux|))))
    (or
      (not
        (and
          (<= 0 $q4@252@01)
          (<
            $q4@252@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                $q3@251@01)))))
      (and
        (<= 0 $q4@252@01)
        (<
          $q4@252@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
              $q3@251@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
      $q3@251@01)
    $q4@252@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@813@176@813@767-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 172 | !(0 <= $q3@251@01 && $q3@251@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@228@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@251@01)
    (<
      $q3@251@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@251@01)
    (<
      $q3@251@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2)))))
  (and
    (<= 0 $q3@251@01)
    (<
      $q3@251@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))))
    (forall (($q4@252@01 Int)) (!
      (and
        (or (<= 0 $q4@252@01) (not (<= 0 $q4@252@01)))
        (=>
          (and
            (<= 0 $q4@252@01)
            (<
              $q4@252@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                  $q3@251@01))))
          (and
            (<= 0 $q4@252@01)
            (<
              $q4@252@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                  $q3@251@01)))
            (forall (($q5@253@01 Int)) (!
              (and
                (or (<= 0 $q5@253@01) (not (<= 0 $q5@253@01)))
                (=>
                  (and
                    (<= 0 $q5@253@01)
                    (<
                      $q5@253@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                            $q3@251@01)
                          $q4@252@01))))
                  (and
                    (<= 0 $q5@253@01)
                    (<
                      $q5@253@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                            $q3@251@01)
                          $q4@252@01)))
                    (or
                      (<=
                        (- 0 170141183460469231731687303715884105728)
                        (Seq_index
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                              $q3@251@01)
                            $q4@252@01)
                          $q5@253@01))
                      (not
                        (<=
                          (- 0 170141183460469231731687303715884105728)
                          (Seq_index
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                                $q3@251@01)
                              $q4@252@01)
                            $q5@253@01))))))
                (or
                  (not
                    (and
                      (<= 0 $q5@253@01)
                      (<
                        $q5@253@01
                        (Seq_length
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                              $q3@251@01)
                            $q4@252@01)))))
                  (and
                    (<= 0 $q5@253@01)
                    (<
                      $q5@253@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                            $q3@251@01)
                          $q4@252@01))))))
              :pattern ((Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                    $q3@251@01)
                  $q4@252@01)
                $q5@253@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@813@351@813@766-aux|))))
        (or
          (not
            (and
              (<= 0 $q4@252@01)
              (<
                $q4@252@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                    $q3@251@01)))))
          (and
            (<= 0 $q4@252@01)
            (<
              $q4@252@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                  $q3@251@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
          $q3@251@01)
        $q4@252@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@813@176@813@767-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@251@01)
      (<
        $q3@251@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))))))
  (and
    (<= 0 $q3@251@01)
    (<
      $q3@251@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@251@01 Int)) (!
  (and
    (or (<= 0 $q3@251@01) (not (<= 0 $q3@251@01)))
    (=>
      (and
        (<= 0 $q3@251@01)
        (<
          $q3@251@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2)))))
      (and
        (<= 0 $q3@251@01)
        (<
          $q3@251@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))))
        (forall (($q4@252@01 Int)) (!
          (and
            (or (<= 0 $q4@252@01) (not (<= 0 $q4@252@01)))
            (=>
              (and
                (<= 0 $q4@252@01)
                (<
                  $q4@252@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                      $q3@251@01))))
              (and
                (<= 0 $q4@252@01)
                (<
                  $q4@252@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                      $q3@251@01)))
                (forall (($q5@253@01 Int)) (!
                  (and
                    (or (<= 0 $q5@253@01) (not (<= 0 $q5@253@01)))
                    (=>
                      (and
                        (<= 0 $q5@253@01)
                        (<
                          $q5@253@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                                $q3@251@01)
                              $q4@252@01))))
                      (and
                        (<= 0 $q5@253@01)
                        (<
                          $q5@253@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                                $q3@251@01)
                              $q4@252@01)))
                        (or
                          (<=
                            (- 0 170141183460469231731687303715884105728)
                            (Seq_index
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                                  $q3@251@01)
                                $q4@252@01)
                              $q5@253@01))
                          (not
                            (<=
                              (- 0 170141183460469231731687303715884105728)
                              (Seq_index
                                (Seq_index
                                  (Seq_index
                                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                                    $q3@251@01)
                                  $q4@252@01)
                                $q5@253@01))))))
                    (or
                      (not
                        (and
                          (<= 0 $q5@253@01)
                          (<
                            $q5@253@01
                            (Seq_length
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                                  $q3@251@01)
                                $q4@252@01)))))
                      (and
                        (<= 0 $q5@253@01)
                        (<
                          $q5@253@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                                $q3@251@01)
                              $q4@252@01))))))
                  :pattern ((Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                        $q3@251@01)
                      $q4@252@01)
                    $q5@253@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@813@351@813@766-aux|))))
            (or
              (not
                (and
                  (<= 0 $q4@252@01)
                  (<
                    $q4@252@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                        $q3@251@01)))))
              (and
                (<= 0 $q4@252@01)
                (<
                  $q4@252@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                      $q3@251@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
              $q3@251@01)
            $q4@252@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@813@176@813@767-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@251@01)
          (<
            $q3@251@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))))))
      (and
        (<= 0 $q3@251@01)
        (<
          $q3@251@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
    $q3@251@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@813@11@813@768-aux|)))
(assert (forall (($q3@251@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@251@01)
      (<
        $q3@251@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2)))))
    (forall (($q4@252@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@252@01)
          (<
            $q4@252@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                $q3@251@01))))
        (forall (($q5@253@01 Int)) (!
          (=>
            (and
              (<= 0 $q5@253@01)
              (<
                $q5@253@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                      $q3@251@01)
                    $q4@252@01))))
            (and
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                      $q3@251@01)
                    $q4@252@01)
                  $q5@253@01))
              (<=
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                      $q3@251@01)
                    $q4@252@01)
                  $q5@253@01)
                170141183460469231731687303715884105727)))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
                $q3@251@01)
              $q4@252@01)
            $q5@253@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@813@351@813@766|)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
          $q3@251@01)
        $q4@252@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@813@176@813@767|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@228@01 2))
    $q3@251@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@813@11@813@768|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
(declare-const $t@254@01 $Snap)
(assert (= $t@254@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 3))) 1000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] }
;     0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] &&
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <=
;     170141183460469231731687303715884105727)
(declare-const $t@255@01 $Snap)
(assert (= $t@255@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] } 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727)
(declare-const $q6@256@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] 0 <= $q6
(push) ; 4
; [then-branch: 178 | !(0 <= $q6@256@01) | live]
; [else-branch: 178 | 0 <= $q6@256@01 | live]
(push) ; 5
; [then-branch: 178 | !(0 <= $q6@256@01)]
(assert (not (<= 0 $q6@256@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 178 | 0 <= $q6@256@01]
(assert (<= 0 $q6@256@01))
; [eval] $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q6@256@01) (not (<= 0 $q6@256@01))))
(push) ; 4
; [then-branch: 179 | 0 <= $q6@256@01 && $q6@256@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@228@01, 3))| | live]
; [else-branch: 179 | !(0 <= $q6@256@01 && $q6@256@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@228@01, 3))|) | live]
(push) ; 5
; [then-branch: 179 | 0 <= $q6@256@01 && $q6@256@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@228@01, 3))|]
(assert (and
  (<= 0 $q6@256@01)
  (<
    $q6@256@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 3))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (>= $q6@256@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 180 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@228@01, 3))[$q6@256@01]) | live]
; [else-branch: 180 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@228@01, 3))[$q6@256@01] | live]
(push) ; 7
; [then-branch: 180 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@228@01, 3))[$q6@256@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 3))
      $q6@256@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 180 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@228@01, 3))[$q6@256@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 3)) $q6@256@01)))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (>= $q6@256@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 3))
      $q6@256@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 3))
        $q6@256@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 179 | !(0 <= $q6@256@01 && $q6@256@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@228@01, 3))|)]
(assert (not
  (and
    (<= 0 $q6@256@01)
    (<
      $q6@256@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q6@256@01)
    (<
      $q6@256@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 3)))))
  (and
    (<= 0 $q6@256@01)
    (<
      $q6@256@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 3))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 3))
          $q6@256@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 3))
            $q6@256@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q6@256@01)
      (<
        $q6@256@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 3))))))
  (and
    (<= 0 $q6@256@01)
    (<
      $q6@256@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@256@01 Int)) (!
  (and
    (or (<= 0 $q6@256@01) (not (<= 0 $q6@256@01)))
    (=>
      (and
        (<= 0 $q6@256@01)
        (<
          $q6@256@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 3)))))
      (and
        (<= 0 $q6@256@01)
        (<
          $q6@256@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 3))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 3))
              $q6@256@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 3))
                $q6@256@01))))))
    (or
      (not
        (and
          (<= 0 $q6@256@01)
          (<
            $q6@256@01
            (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 3))))))
      (and
        (<= 0 $q6@256@01)
        (<
          $q6@256@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 3)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 3))
    $q6@256@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@815@11@815@346-aux|)))
(assert (forall (($q6@256@01 Int)) (!
  (=>
    (and
      (<= 0 $q6@256@01)
      (<
        $q6@256@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 3)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 3))
          $q6@256@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 3))
          $q6@256@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@228@01 3))
    $q6@256@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@815@11@815@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==
;     10)
(declare-const $t@257@01 $Snap)
(assert (= $t@257@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10)
(declare-const $q7@258@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@258@01 Int)) (!
  (=
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@258@01))
    10)
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@258@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@816@11@816@209|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     (forall $q8: Int ::
;       { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] }
;       0 <= $q8 &&
;       $q8 <
;       |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==>
;       -170141183460469231731687303715884105728 <=
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] &&
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <=
;       170141183460469231731687303715884105727))
(declare-const $t@259@01 $Snap)
(assert (= $t@259@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727))
(declare-const $q7@260@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727)
(declare-const $q8@261@01 Int)
(push) ; 4
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] 0 <= $q8
(push) ; 5
; [then-branch: 181 | !(0 <= $q8@261@01) | live]
; [else-branch: 181 | 0 <= $q8@261@01 | live]
(push) ; 6
; [then-branch: 181 | !(0 <= $q8@261@01)]
(assert (not (<= 0 $q8@261@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 181 | 0 <= $q8@261@01]
(assert (<= 0 $q8@261@01))
; [eval] $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q8@261@01) (not (<= 0 $q8@261@01))))
(push) ; 5
; [then-branch: 182 | 0 <= $q8@261@01 && $q8@261@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@228@01, 4)), $q7@260@01)| | live]
; [else-branch: 182 | !(0 <= $q8@261@01 && $q8@261@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@228@01, 4)), $q7@260@01)|) | live]
(push) ; 6
; [then-branch: 182 | 0 <= $q8@261@01 && $q8@261@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@228@01, 4)), $q7@260@01)|]
(assert (and
  (<= 0 $q8@261@01)
  (<
    $q8@261@01
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] -170141183460469231731687303715884105728
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 7
(assert (not (>= $q8@261@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 183 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@228@01, 4)), $q7@260@01)[$q8@261@01]) | live]
; [else-branch: 183 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@228@01, 4)), $q7@260@01)[$q8@261@01] | live]
(push) ; 8
; [then-branch: 183 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@228@01, 4)), $q7@260@01)[$q8@261@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01)
      $q8@261@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 183 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@228@01, 4)), $q7@260@01)[$q8@261@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01)
    $q8@261@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 9
(assert (not (>= $q8@261@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01)
      $q8@261@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01)
        $q8@261@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 182 | !(0 <= $q8@261@01 && $q8@261@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@228@01, 4)), $q7@260@01)|)]
(assert (not
  (and
    (<= 0 $q8@261@01)
    (<
      $q8@261@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q8@261@01)
    (<
      $q8@261@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01))))
  (and
    (<= 0 $q8@261@01)
    (<
      $q8@261@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01)
          $q8@261@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01)
            $q8@261@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q8@261@01)
      (<
        $q8@261@01
        (Seq_length
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01)))))
  (and
    (<= 0 $q8@261@01)
    (<
      $q8@261@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q8@261@01 Int)) (!
  (and
    (or (<= 0 $q8@261@01) (not (<= 0 $q8@261@01)))
    (=>
      (and
        (<= 0 $q8@261@01)
        (<
          $q8@261@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01))))
      (and
        (<= 0 $q8@261@01)
        (<
          $q8@261@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01)
              $q8@261@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01)
                $q8@261@01))))))
    (or
      (not
        (and
          (<= 0 $q8@261@01)
          (<
            $q8@261@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01)))))
      (and
        (<= 0 $q8@261@01)
        (<
          $q8@261@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01))))))
  :pattern ((Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01)
    $q8@261@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@817@119@817@606-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@260@01 Int)) (!
  (forall (($q8@261@01 Int)) (!
    (and
      (or (<= 0 $q8@261@01) (not (<= 0 $q8@261@01)))
      (=>
        (and
          (<= 0 $q8@261@01)
          (<
            $q8@261@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01))))
        (and
          (<= 0 $q8@261@01)
          (<
            $q8@261@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01)))
          (or
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01)
                $q8@261@01))
            (not
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01)
                  $q8@261@01))))))
      (or
        (not
          (and
            (<= 0 $q8@261@01)
            (<
              $q8@261@01
              (Seq_length
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01)))))
        (and
          (<= 0 $q8@261@01)
          (<
            $q8@261@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01))))))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01)
      $q8@261@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@817@119@817@606-aux|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@817@11@817@607-aux|)))
(assert (forall (($q7@260@01 Int)) (!
  (forall (($q8@261@01 Int)) (!
    (=>
      (and
        (<= 0 $q8@261@01)
        (<
          $q8@261@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01))))
      (and
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01)
            $q8@261@01))
        (<=
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01)
            $q8@261@01)
          170141183460469231731687303715884105727)))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01)
      $q8@261@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@817@119@817@606|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@228@01 4)) $q7@260@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@817@11@817@607|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@262@01 $Snap)
(assert (= $t@262@01 ($Snap.combine ($Snap.first $t@262@01) ($Snap.second $t@262@01))))
(assert (= ($Snap.first $t@262@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@228@01 5))))
(assert (= ($Snap.second $t@262@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@228@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@263@01 $Snap)
(assert (= $t@263@01 ($Snap.combine ($Snap.first $t@263@01) ($Snap.second $t@263@01))))
(assert (= ($Snap.first $t@263@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@228@01 6))))
(assert (= ($Snap.second $t@263@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@228@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@264@01 $Snap)
(assert (= $t@264@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q9@265@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 184 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@228@01, 8)), $q9@265@01)) | live]
; [else-branch: 184 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@228@01, 8)), $q9@265@01) | live]
(push) ; 5
; [then-branch: 184 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@228@01, 8)), $q9@265@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 8)) $q9@265@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 184 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@228@01, 8)), $q9@265@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 8)) $q9@265@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 8)) $q9@265@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 8)) $q9@265@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@265@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 8)) $q9@265@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 8)) $q9@265@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 8)) $q9@265@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@820@11@820@345-aux|)))
(assert (forall (($q9@265@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 8)) $q9@265@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 8)) $q9@265@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 8)) $q9@265@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@820@11@820@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@266@01 $Snap)
(assert (= $t@266@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q9@267@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@267@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 8)) $q9@267@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 8)) $q9@267@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@821@11@821@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@268@01 $Snap)
(assert (= $t@268@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q10@269@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 185 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@228@01, 9)), $q10@269@01)) | live]
; [else-branch: 185 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@228@01, 9)), $q10@269@01) | live]
(push) ; 5
; [then-branch: 185 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@228@01, 9)), $q10@269@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 9)) $q10@269@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 185 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@228@01, 9)), $q10@269@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 9)) $q10@269@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 9)) $q10@269@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 9)) $q10@269@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@269@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 9)) $q10@269@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 9)) $q10@269@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 9)) $q10@269@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@822@11@822@349-aux|)))
(assert (forall (($q10@269@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 9)) $q10@269@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 9)) $q10@269@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 9)) $q10@269@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@822@11@822@349|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@270@01 $Snap)
(assert (= $t@270@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q10@271@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@271@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 9)) $q10@271@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@228@01 9)) $q10@271@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@823@11@823@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@272@01 $Snap)
(assert (= $t@272@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@228@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($pre_self, 0)): Seq[Int])| == 12
(declare-const $t@273@01 $Snap)
(assert (= $t@273@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($pre_self, 0)): Seq[Int])| == 12
; [eval] |($struct_get($struct_loc($pre_self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc($pre_self, 0)): Seq[Int])
; [eval] $struct_loc($pre_self, 0)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 0))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($struct_get($struct_loc($pre_self, 0)): Seq[Int])[$q0] }
;     0 <= $q0 && $q0 < |($struct_get($struct_loc($pre_self, 0)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc($pre_self, 0)): Seq[Int])[$q0] &&
;     ($struct_get($struct_loc($pre_self, 0)): Seq[Int])[$q0] <=
;     170141183460469231731687303715884105727)
(declare-const $t@274@01 $Snap)
(assert (= $t@274@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($struct_get($struct_loc($pre_self, 0)): Seq[Int])[$q0] } 0 <= $q0 && $q0 < |($struct_get($struct_loc($pre_self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc($pre_self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@275@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc($pre_self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc($pre_self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc($pre_self, 0)): Seq[Int])|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 186 | !(0 <= $q0@275@01) | live]
; [else-branch: 186 | 0 <= $q0@275@01 | live]
(push) ; 5
; [then-branch: 186 | !(0 <= $q0@275@01)]
(assert (not (<= 0 $q0@275@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 186 | 0 <= $q0@275@01]
(assert (<= 0 $q0@275@01))
; [eval] $q0 < |($struct_get($struct_loc($pre_self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc($pre_self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc($pre_self, 0)): Seq[Int])
; [eval] $struct_loc($pre_self, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@275@01) (not (<= 0 $q0@275@01))))
(push) ; 4
; [then-branch: 187 | 0 <= $q0@275@01 && $q0@275@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($pre_self@230@01, 0))| | live]
; [else-branch: 187 | !(0 <= $q0@275@01 && $q0@275@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($pre_self@230@01, 0))|) | live]
(push) ; 5
; [then-branch: 187 | 0 <= $q0@275@01 && $q0@275@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($pre_self@230@01, 0))|]
(assert (and
  (<= 0 $q0@275@01)
  (<
    $q0@275@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 0))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc($pre_self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 0)): Seq[Int])[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($pre_self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc($pre_self, 0)): Seq[Int])
; [eval] $struct_loc($pre_self, 0)
(push) ; 6
(assert (not (>= $q0@275@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 188 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($pre_self@230@01, 0))[$q0@275@01]) | live]
; [else-branch: 188 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($pre_self@230@01, 0))[$q0@275@01] | live]
(push) ; 7
; [then-branch: 188 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($pre_self@230@01, 0))[$q0@275@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 0))
      $q0@275@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 188 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($pre_self@230@01, 0))[$q0@275@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 0))
    $q0@275@01)))
; [eval] ($struct_get($struct_loc($pre_self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($pre_self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc($pre_self, 0)): Seq[Int])
; [eval] $struct_loc($pre_self, 0)
(push) ; 8
(assert (not (>= $q0@275@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 0))
      $q0@275@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 0))
        $q0@275@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 187 | !(0 <= $q0@275@01 && $q0@275@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($pre_self@230@01, 0))|)]
(assert (not
  (and
    (<= 0 $q0@275@01)
    (<
      $q0@275@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 0)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q0@275@01)
    (<
      $q0@275@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 0)))))
  (and
    (<= 0 $q0@275@01)
    (<
      $q0@275@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 0))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 0))
          $q0@275@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 0))
            $q0@275@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q0@275@01)
      (<
        $q0@275@01
        (Seq_length
          ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 0))))))
  (and
    (<= 0 $q0@275@01)
    (<
      $q0@275@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 0)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@275@01 Int)) (!
  (and
    (or (<= 0 $q0@275@01) (not (<= 0 $q0@275@01)))
    (=>
      (and
        (<= 0 $q0@275@01)
        (<
          $q0@275@01
          (Seq_length
            ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 0)))))
      (and
        (<= 0 $q0@275@01)
        (<
          $q0@275@01
          (Seq_length
            ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 0))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 0))
              $q0@275@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 0))
                $q0@275@01))))))
    (or
      (not
        (and
          (<= 0 $q0@275@01)
          (<
            $q0@275@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 0))))))
      (and
        (<= 0 $q0@275@01)
        (<
          $q0@275@01
          (Seq_length
            ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 0)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 0))
    $q0@275@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@826@11@826@366-aux|)))
(assert (forall (($q0@275@01 Int)) (!
  (=>
    (and
      (<= 0 $q0@275@01)
      (<
        $q0@275@01
        (Seq_length
          ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 0)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 0))
          $q0@275@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 0))
          $q0@275@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 0))
    $q0@275@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@826@11@826@366|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])| == 12
(declare-const $t@276@01 $Snap)
(assert (= $t@276@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])| == 12
; [eval] |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($pre_self, 1)
(assert (=
  (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1)))
  12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 &&
;     $q1 < |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])| ==>
;     |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $t@277@01 $Snap)
(assert (= $t@277@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $q1@278@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 189 | !(0 <= $q1@278@01) | live]
; [else-branch: 189 | 0 <= $q1@278@01 | live]
(push) ; 5
; [then-branch: 189 | !(0 <= $q1@278@01)]
(assert (not (<= 0 $q1@278@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 189 | 0 <= $q1@278@01]
(assert (<= 0 $q1@278@01))
; [eval] $q1 < |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($pre_self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@278@01) (not (<= 0 $q1@278@01))))
(push) ; 4
; [then-branch: 190 | 0 <= $q1@278@01 && $q1@278@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($pre_self@230@01, 1))| | live]
; [else-branch: 190 | !(0 <= $q1@278@01 && $q1@278@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($pre_self@230@01, 1))|) | live]
(push) ; 5
; [then-branch: 190 | 0 <= $q1@278@01 && $q1@278@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($pre_self@230@01, 1))|]
(assert (and
  (<= 0 $q1@278@01)
  (<
    $q1@278@01
    (Seq_length
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))))))
; [eval] |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($pre_self, 1)
(push) ; 6
(assert (not (>= $q1@278@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 190 | !(0 <= $q1@278@01 && $q1@278@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($pre_self@230@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@278@01)
    (<
      $q1@278@01
      (Seq_length
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@278@01)
      (<
        $q1@278@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))))))
  (and
    (<= 0 $q1@278@01)
    (<
      $q1@278@01
      (Seq_length
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@278@01 Int)) (!
  (and
    (or (<= 0 $q1@278@01) (not (<= 0 $q1@278@01)))
    (or
      (not
        (and
          (<= 0 $q1@278@01)
          (<
            $q1@278@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))))))
      (and
        (<= 0 $q1@278@01)
        (<
          $q1@278@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
    $q1@278@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@828@11@828@243-aux|)))
(assert (forall (($q1@278@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@278@01)
      (<
        $q1@278@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
          $q1@278@01))
      12))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
    $q1@278@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@828@11@828@243|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 &&
;     $q1 < |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])| ==>
;     (forall $q2: Int ::
;       { ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1][$q2] }
;       0 <= $q2 &&
;       $q2 < |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1]| ==>
;       -170141183460469231731687303715884105728 <=
;       ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1][$q2] &&
;       ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1][$q2] <=
;       170141183460469231731687303715884105727))
(declare-const $t@279@01 $Snap)
(assert (= $t@279@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727))
(declare-const $q1@280@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 191 | !(0 <= $q1@280@01) | live]
; [else-branch: 191 | 0 <= $q1@280@01 | live]
(push) ; 5
; [then-branch: 191 | !(0 <= $q1@280@01)]
(assert (not (<= 0 $q1@280@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 191 | 0 <= $q1@280@01]
(assert (<= 0 $q1@280@01))
; [eval] $q1 < |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($pre_self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@280@01) (not (<= 0 $q1@280@01))))
(push) ; 4
; [then-branch: 192 | 0 <= $q1@280@01 && $q1@280@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($pre_self@230@01, 1))| | live]
; [else-branch: 192 | !(0 <= $q1@280@01 && $q1@280@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($pre_self@230@01, 1))|) | live]
(push) ; 5
; [then-branch: 192 | 0 <= $q1@280@01 && $q1@280@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($pre_self@230@01, 1))|]
(assert (and
  (<= 0 $q1@280@01)
  (<
    $q1@280@01
    (Seq_length
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))))))
; [eval] (forall $q2: Int :: { ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
(declare-const $q2@281@01 Int)
(push) ; 6
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] 0 <= $q2
(push) ; 7
; [then-branch: 193 | !(0 <= $q2@281@01) | live]
; [else-branch: 193 | 0 <= $q2@281@01 | live]
(push) ; 8
; [then-branch: 193 | !(0 <= $q2@281@01)]
(assert (not (<= 0 $q2@281@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 193 | 0 <= $q2@281@01]
(assert (<= 0 $q2@281@01))
; [eval] $q2 < |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] |($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($pre_self, 1)
(push) ; 9
(assert (not (>= $q1@280@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q2@281@01) (not (<= 0 $q2@281@01))))
(push) ; 7
; [then-branch: 194 | 0 <= $q2@281@01 && $q2@281@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($pre_self@230@01, 1))[$q1@280@01]| | live]
; [else-branch: 194 | !(0 <= $q2@281@01 && $q2@281@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($pre_self@230@01, 1))[$q1@280@01]|) | live]
(push) ; 8
; [then-branch: 194 | 0 <= $q2@281@01 && $q2@281@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($pre_self@230@01, 1))[$q1@280@01]|]
(assert (and
  (<= 0 $q2@281@01)
  (<
    $q2@281@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
        $q1@280@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($pre_self, 1)
(push) ; 9
(assert (not (>= $q1@280@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q2@281@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 195 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int]($pre_self@230@01, 1))[$q1@280@01][$q2@281@01]) | live]
; [else-branch: 195 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int]($pre_self@230@01, 1))[$q1@280@01][$q2@281@01] | live]
(push) ; 10
; [then-branch: 195 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int]($pre_self@230@01, 1))[$q1@280@01][$q2@281@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
        $q1@280@01)
      $q2@281@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 195 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int]($pre_self@230@01, 1))[$q1@280@01][$q2@281@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
      $q1@280@01)
    $q2@281@01)))
; [eval] ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc($pre_self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc($pre_self, 1)
(push) ; 11
(assert (not (>= $q1@280@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= $q2@281@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
        $q1@280@01)
      $q2@281@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
          $q1@280@01)
        $q2@281@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 194 | !(0 <= $q2@281@01 && $q2@281@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($pre_self@230@01, 1))[$q1@280@01]|)]
(assert (not
  (and
    (<= 0 $q2@281@01)
    (<
      $q2@281@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
          $q1@280@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q2@281@01)
    (<
      $q2@281@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
          $q1@280@01))))
  (and
    (<= 0 $q2@281@01)
    (<
      $q2@281@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
          $q1@280@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
            $q1@280@01)
          $q2@281@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
              $q1@280@01)
            $q2@281@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q2@281@01)
      (<
        $q2@281@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
            $q1@280@01)))))
  (and
    (<= 0 $q2@281@01)
    (<
      $q2@281@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
          $q1@280@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@281@01 Int)) (!
  (and
    (or (<= 0 $q2@281@01) (not (<= 0 $q2@281@01)))
    (=>
      (and
        (<= 0 $q2@281@01)
        (<
          $q2@281@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
              $q1@280@01))))
      (and
        (<= 0 $q2@281@01)
        (<
          $q2@281@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
              $q1@280@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
                $q1@280@01)
              $q2@281@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
                  $q1@280@01)
                $q2@281@01))))))
    (or
      (not
        (and
          (<= 0 $q2@281@01)
          (<
            $q2@281@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
                $q1@280@01)))))
      (and
        (<= 0 $q2@281@01)
        (<
          $q2@281@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
              $q1@280@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
      $q1@280@01)
    $q2@281@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@829@176@829@571-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 192 | !(0 <= $q1@280@01 && $q1@280@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int]($pre_self@230@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@280@01)
    (<
      $q1@280@01
      (Seq_length
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q1@280@01)
    (<
      $q1@280@01
      (Seq_length
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1)))))
  (and
    (<= 0 $q1@280@01)
    (<
      $q1@280@01
      (Seq_length
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))))
    (forall (($q2@281@01 Int)) (!
      (and
        (or (<= 0 $q2@281@01) (not (<= 0 $q2@281@01)))
        (=>
          (and
            (<= 0 $q2@281@01)
            (<
              $q2@281@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
                  $q1@280@01))))
          (and
            (<= 0 $q2@281@01)
            (<
              $q2@281@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
                  $q1@280@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
                    $q1@280@01)
                  $q2@281@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
                      $q1@280@01)
                    $q2@281@01))))))
        (or
          (not
            (and
              (<= 0 $q2@281@01)
              (<
                $q2@281@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
                    $q1@280@01)))))
          (and
            (<= 0 $q2@281@01)
            (<
              $q2@281@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
                  $q1@280@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
          $q1@280@01)
        $q2@281@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@829@176@829@571-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@280@01)
      (<
        $q1@280@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))))))
  (and
    (<= 0 $q1@280@01)
    (<
      $q1@280@01
      (Seq_length
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@280@01 Int)) (!
  (and
    (or (<= 0 $q1@280@01) (not (<= 0 $q1@280@01)))
    (=>
      (and
        (<= 0 $q1@280@01)
        (<
          $q1@280@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1)))))
      (and
        (<= 0 $q1@280@01)
        (<
          $q1@280@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))))
        (forall (($q2@281@01 Int)) (!
          (and
            (or (<= 0 $q2@281@01) (not (<= 0 $q2@281@01)))
            (=>
              (and
                (<= 0 $q2@281@01)
                (<
                  $q2@281@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
                      $q1@280@01))))
              (and
                (<= 0 $q2@281@01)
                (<
                  $q2@281@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
                      $q1@280@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
                        $q1@280@01)
                      $q2@281@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
                          $q1@280@01)
                        $q2@281@01))))))
            (or
              (not
                (and
                  (<= 0 $q2@281@01)
                  (<
                    $q2@281@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
                        $q1@280@01)))))
              (and
                (<= 0 $q2@281@01)
                (<
                  $q2@281@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
                      $q1@280@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
              $q1@280@01)
            $q2@281@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@829@176@829@571-aux|))))
    (or
      (not
        (and
          (<= 0 $q1@280@01)
          (<
            $q1@280@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))))))
      (and
        (<= 0 $q1@280@01)
        (<
          $q1@280@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
    $q1@280@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@829@11@829@572-aux|)))
(assert (forall (($q1@280@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@280@01)
      (<
        $q1@280@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1)))))
    (forall (($q2@281@01 Int)) (!
      (=>
        (and
          (<= 0 $q2@281@01)
          (<
            $q2@281@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
                $q1@280@01))))
        (and
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
                $q1@280@01)
              $q2@281@01))
          (<=
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
                $q1@280@01)
              $q2@281@01)
            170141183460469231731687303715884105727)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
          $q1@280@01)
        $q2@281@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@829@176@829@571|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 1))
    $q1@280@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@829@11@829@572|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])| == 2
(declare-const $t@282@01 $Snap)
(assert (= $t@282@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])| == 2
; [eval] |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($pre_self, 2)
(assert (=
  (Seq_length
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2)))
  2))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==
;     2)
(declare-const $t@283@01 $Snap)
(assert (= $t@283@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $q3@284@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 196 | !(0 <= $q3@284@01) | live]
; [else-branch: 196 | 0 <= $q3@284@01 | live]
(push) ; 5
; [then-branch: 196 | !(0 <= $q3@284@01)]
(assert (not (<= 0 $q3@284@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 196 | 0 <= $q3@284@01]
(assert (<= 0 $q3@284@01))
; [eval] $q3 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($pre_self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@284@01) (not (<= 0 $q3@284@01))))
(push) ; 4
; [then-branch: 197 | 0 <= $q3@284@01 && $q3@284@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))| | live]
; [else-branch: 197 | !(0 <= $q3@284@01 && $q3@284@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))|) | live]
(push) ; 5
; [then-branch: 197 | 0 <= $q3@284@01 && $q3@284@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))|]
(assert (and
  (<= 0 $q3@284@01)
  (<
    $q3@284@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))))))
; [eval] |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($pre_self, 2)
(push) ; 6
(assert (not (>= $q3@284@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 197 | !(0 <= $q3@284@01 && $q3@284@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@284@01)
    (<
      $q3@284@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@284@01)
      (<
        $q3@284@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))))))
  (and
    (<= 0 $q3@284@01)
    (<
      $q3@284@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@284@01 Int)) (!
  (and
    (or (<= 0 $q3@284@01) (not (<= 0 $q3@284@01)))
    (or
      (not
        (and
          (<= 0 $q3@284@01)
          (<
            $q3@284@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))))))
      (and
        (<= 0 $q3@284@01)
        (<
          $q3@284@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
    $q3@284@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@831@11@831@257-aux|)))
(assert (forall (($q3@284@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@284@01)
      (<
        $q3@284@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
          $q3@284@01))
      2))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
    $q3@284@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@831@11@831@257|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 <
;       |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==
;       2))
(declare-const $t@285@01 $Snap)
(assert (= $t@285@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2))
(declare-const $q3@286@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 198 | !(0 <= $q3@286@01) | live]
; [else-branch: 198 | 0 <= $q3@286@01 | live]
(push) ; 5
; [then-branch: 198 | !(0 <= $q3@286@01)]
(assert (not (<= 0 $q3@286@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 198 | 0 <= $q3@286@01]
(assert (<= 0 $q3@286@01))
; [eval] $q3 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($pre_self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@286@01) (not (<= 0 $q3@286@01))))
(push) ; 4
; [then-branch: 199 | 0 <= $q3@286@01 && $q3@286@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))| | live]
; [else-branch: 199 | !(0 <= $q3@286@01 && $q3@286@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))|) | live]
(push) ; 5
; [then-branch: 199 | 0 <= $q3@286@01 && $q3@286@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))|]
(assert (and
  (<= 0 $q3@286@01)
  (<
    $q3@286@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
(declare-const $q4@287@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 200 | !(0 <= $q4@287@01) | live]
; [else-branch: 200 | 0 <= $q4@287@01 | live]
(push) ; 8
; [then-branch: 200 | !(0 <= $q4@287@01)]
(assert (not (<= 0 $q4@287@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 200 | 0 <= $q4@287@01]
(assert (<= 0 $q4@287@01))
; [eval] $q4 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($pre_self, 2)
(push) ; 9
(assert (not (>= $q3@286@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@287@01) (not (<= 0 $q4@287@01))))
(push) ; 7
; [then-branch: 201 | 0 <= $q4@287@01 && $q4@287@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))[$q3@286@01]| | live]
; [else-branch: 201 | !(0 <= $q4@287@01 && $q4@287@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))[$q3@286@01]|) | live]
(push) ; 8
; [then-branch: 201 | 0 <= $q4@287@01 && $q4@287@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))[$q3@286@01]|]
(assert (and
  (<= 0 $q4@287@01)
  (<
    $q4@287@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
        $q3@286@01)))))
; [eval] |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($pre_self, 2)
(push) ; 9
(assert (not (>= $q3@286@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q4@287@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 201 | !(0 <= $q4@287@01 && $q4@287@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))[$q3@286@01]|)]
(assert (not
  (and
    (<= 0 $q4@287@01)
    (<
      $q4@287@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
          $q3@286@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@287@01)
      (<
        $q4@287@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
            $q3@286@01)))))
  (and
    (<= 0 $q4@287@01)
    (<
      $q4@287@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
          $q3@286@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@287@01 Int)) (!
  (and
    (or (<= 0 $q4@287@01) (not (<= 0 $q4@287@01)))
    (or
      (not
        (and
          (<= 0 $q4@287@01)
          (<
            $q4@287@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                $q3@286@01)))))
      (and
        (<= 0 $q4@287@01)
        (<
          $q4@287@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
              $q3@286@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
      $q3@286@01)
    $q4@287@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@832@186@832@447-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 199 | !(0 <= $q3@286@01 && $q3@286@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@286@01)
    (<
      $q3@286@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@286@01)
    (<
      $q3@286@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2)))))
  (and
    (<= 0 $q3@286@01)
    (<
      $q3@286@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))))
    (forall (($q4@287@01 Int)) (!
      (and
        (or (<= 0 $q4@287@01) (not (<= 0 $q4@287@01)))
        (or
          (not
            (and
              (<= 0 $q4@287@01)
              (<
                $q4@287@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                    $q3@286@01)))))
          (and
            (<= 0 $q4@287@01)
            (<
              $q4@287@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                  $q3@286@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
          $q3@286@01)
        $q4@287@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@832@186@832@447-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@286@01)
      (<
        $q3@286@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))))))
  (and
    (<= 0 $q3@286@01)
    (<
      $q3@286@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@286@01 Int)) (!
  (and
    (or (<= 0 $q3@286@01) (not (<= 0 $q3@286@01)))
    (=>
      (and
        (<= 0 $q3@286@01)
        (<
          $q3@286@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2)))))
      (and
        (<= 0 $q3@286@01)
        (<
          $q3@286@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))))
        (forall (($q4@287@01 Int)) (!
          (and
            (or (<= 0 $q4@287@01) (not (<= 0 $q4@287@01)))
            (or
              (not
                (and
                  (<= 0 $q4@287@01)
                  (<
                    $q4@287@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                        $q3@286@01)))))
              (and
                (<= 0 $q4@287@01)
                (<
                  $q4@287@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                      $q3@286@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
              $q3@286@01)
            $q4@287@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@832@186@832@447-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@286@01)
          (<
            $q3@286@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))))))
      (and
        (<= 0 $q3@286@01)
        (<
          $q3@286@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
    $q3@286@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@832@11@832@448-aux|)))
(assert (forall (($q3@286@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@286@01)
      (<
        $q3@286@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2)))))
    (forall (($q4@287@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@287@01)
          (<
            $q4@287@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                $q3@286@01))))
        (=
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                $q3@286@01)
              $q4@287@01))
          2))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
          $q3@286@01)
        $q4@287@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@832@186@832@447|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
    $q3@286@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@832@11@832@448|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 <
;       |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       (forall $q5: Int ::
;         { ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] }
;         0 <= $q5 &&
;         $q5 <
;         |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==>
;         -170141183460469231731687303715884105728 <=
;         ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] &&
;         ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <=
;         170141183460469231731687303715884105727)))
(declare-const $t@288@01 $Snap)
(assert (= $t@288@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)))
(declare-const $q3@289@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 202 | !(0 <= $q3@289@01) | live]
; [else-branch: 202 | 0 <= $q3@289@01 | live]
(push) ; 5
; [then-branch: 202 | !(0 <= $q3@289@01)]
(assert (not (<= 0 $q3@289@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 202 | 0 <= $q3@289@01]
(assert (<= 0 $q3@289@01))
; [eval] $q3 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($pre_self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@289@01) (not (<= 0 $q3@289@01))))
(push) ; 4
; [then-branch: 203 | 0 <= $q3@289@01 && $q3@289@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))| | live]
; [else-branch: 203 | !(0 <= $q3@289@01 && $q3@289@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))|) | live]
(push) ; 5
; [then-branch: 203 | 0 <= $q3@289@01 && $q3@289@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))|]
(assert (and
  (<= 0 $q3@289@01)
  (<
    $q3@289@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
(declare-const $q4@290@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 204 | !(0 <= $q4@290@01) | live]
; [else-branch: 204 | 0 <= $q4@290@01 | live]
(push) ; 8
; [then-branch: 204 | !(0 <= $q4@290@01)]
(assert (not (<= 0 $q4@290@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 204 | 0 <= $q4@290@01]
(assert (<= 0 $q4@290@01))
; [eval] $q4 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($pre_self, 2)
(push) ; 9
(assert (not (>= $q3@289@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@290@01) (not (<= 0 $q4@290@01))))
(push) ; 7
; [then-branch: 205 | 0 <= $q4@290@01 && $q4@290@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))[$q3@289@01]| | live]
; [else-branch: 205 | !(0 <= $q4@290@01 && $q4@290@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))[$q3@289@01]|) | live]
(push) ; 8
; [then-branch: 205 | 0 <= $q4@290@01 && $q4@290@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))[$q3@289@01]|]
(assert (and
  (<= 0 $q4@290@01)
  (<
    $q4@290@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
        $q3@289@01)))))
; [eval] (forall $q5: Int :: { ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
(declare-const $q5@291@01 Int)
(push) ; 9
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] 0 <= $q5
(push) ; 10
; [then-branch: 206 | !(0 <= $q5@291@01) | live]
; [else-branch: 206 | 0 <= $q5@291@01 | live]
(push) ; 11
; [then-branch: 206 | !(0 <= $q5@291@01)]
(assert (not (<= 0 $q5@291@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 206 | 0 <= $q5@291@01]
(assert (<= 0 $q5@291@01))
; [eval] $q5 < |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] |($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($pre_self, 2)
(push) ; 12
(assert (not (>= $q3@289@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@290@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q5@291@01) (not (<= 0 $q5@291@01))))
(push) ; 10
; [then-branch: 207 | 0 <= $q5@291@01 && $q5@291@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))[$q3@289@01][$q4@290@01]| | live]
; [else-branch: 207 | !(0 <= $q5@291@01 && $q5@291@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))[$q3@289@01][$q4@290@01]|) | live]
(push) ; 11
; [then-branch: 207 | 0 <= $q5@291@01 && $q5@291@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))[$q3@289@01][$q4@290@01]|]
(assert (and
  (<= 0 $q5@291@01)
  (<
    $q5@291@01
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
          $q3@289@01)
        $q4@290@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($pre_self, 2)
(push) ; 12
(assert (not (>= $q3@289@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@290@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q5@291@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 208 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))[$q3@289@01][$q4@290@01][$q5@291@01]) | live]
; [else-branch: 208 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))[$q3@289@01][$q4@290@01][$q5@291@01] | live]
(push) ; 13
; [then-branch: 208 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))[$q3@289@01][$q4@290@01][$q5@291@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
          $q3@289@01)
        $q4@290@01)
      $q5@291@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 208 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))[$q3@289@01][$q4@290@01][$q5@291@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
        $q3@289@01)
      $q4@290@01)
    $q5@291@01)))
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc($pre_self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc($pre_self, 2)
(push) ; 14
(assert (not (>= $q3@289@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q4@290@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q5@291@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
          $q3@289@01)
        $q4@290@01)
      $q5@291@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
            $q3@289@01)
          $q4@290@01)
        $q5@291@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 207 | !(0 <= $q5@291@01 && $q5@291@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))[$q3@289@01][$q4@290@01]|)]
(assert (not
  (and
    (<= 0 $q5@291@01)
    (<
      $q5@291@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
            $q3@289@01)
          $q4@290@01))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q5@291@01)
    (<
      $q5@291@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
            $q3@289@01)
          $q4@290@01))))
  (and
    (<= 0 $q5@291@01)
    (<
      $q5@291@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
            $q3@289@01)
          $q4@290@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
              $q3@289@01)
            $q4@290@01)
          $q5@291@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                $q3@289@01)
              $q4@290@01)
            $q5@291@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q5@291@01)
      (<
        $q5@291@01
        (Seq_length
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
              $q3@289@01)
            $q4@290@01)))))
  (and
    (<= 0 $q5@291@01)
    (<
      $q5@291@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
            $q3@289@01)
          $q4@290@01))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@291@01 Int)) (!
  (and
    (or (<= 0 $q5@291@01) (not (<= 0 $q5@291@01)))
    (=>
      (and
        (<= 0 $q5@291@01)
        (<
          $q5@291@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                $q3@289@01)
              $q4@290@01))))
      (and
        (<= 0 $q5@291@01)
        (<
          $q5@291@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                $q3@289@01)
              $q4@290@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                  $q3@289@01)
                $q4@290@01)
              $q5@291@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                    $q3@289@01)
                  $q4@290@01)
                $q5@291@01))))))
    (or
      (not
        (and
          (<= 0 $q5@291@01)
          (<
            $q5@291@01
            (Seq_length
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                  $q3@289@01)
                $q4@290@01)))))
      (and
        (<= 0 $q5@291@01)
        (<
          $q5@291@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                $q3@289@01)
              $q4@290@01))))))
  :pattern ((Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
        $q3@289@01)
      $q4@290@01)
    $q5@291@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@833@371@833@806-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 205 | !(0 <= $q4@290@01 && $q4@290@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))[$q3@289@01]|)]
(assert (not
  (and
    (<= 0 $q4@290@01)
    (<
      $q4@290@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
          $q3@289@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q4@290@01)
    (<
      $q4@290@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
          $q3@289@01))))
  (and
    (<= 0 $q4@290@01)
    (<
      $q4@290@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
          $q3@289@01)))
    (forall (($q5@291@01 Int)) (!
      (and
        (or (<= 0 $q5@291@01) (not (<= 0 $q5@291@01)))
        (=>
          (and
            (<= 0 $q5@291@01)
            (<
              $q5@291@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                    $q3@289@01)
                  $q4@290@01))))
          (and
            (<= 0 $q5@291@01)
            (<
              $q5@291@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                    $q3@289@01)
                  $q4@290@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                      $q3@289@01)
                    $q4@290@01)
                  $q5@291@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                        $q3@289@01)
                      $q4@290@01)
                    $q5@291@01))))))
        (or
          (not
            (and
              (<= 0 $q5@291@01)
              (<
                $q5@291@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                      $q3@289@01)
                    $q4@290@01)))))
          (and
            (<= 0 $q5@291@01)
            (<
              $q5@291@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                    $q3@289@01)
                  $q4@290@01))))))
      :pattern ((Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
            $q3@289@01)
          $q4@290@01)
        $q5@291@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@833@371@833@806-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@290@01)
      (<
        $q4@290@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
            $q3@289@01)))))
  (and
    (<= 0 $q4@290@01)
    (<
      $q4@290@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
          $q3@289@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@290@01 Int)) (!
  (and
    (or (<= 0 $q4@290@01) (not (<= 0 $q4@290@01)))
    (=>
      (and
        (<= 0 $q4@290@01)
        (<
          $q4@290@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
              $q3@289@01))))
      (and
        (<= 0 $q4@290@01)
        (<
          $q4@290@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
              $q3@289@01)))
        (forall (($q5@291@01 Int)) (!
          (and
            (or (<= 0 $q5@291@01) (not (<= 0 $q5@291@01)))
            (=>
              (and
                (<= 0 $q5@291@01)
                (<
                  $q5@291@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                        $q3@289@01)
                      $q4@290@01))))
              (and
                (<= 0 $q5@291@01)
                (<
                  $q5@291@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                        $q3@289@01)
                      $q4@290@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                          $q3@289@01)
                        $q4@290@01)
                      $q5@291@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                            $q3@289@01)
                          $q4@290@01)
                        $q5@291@01))))))
            (or
              (not
                (and
                  (<= 0 $q5@291@01)
                  (<
                    $q5@291@01
                    (Seq_length
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                          $q3@289@01)
                        $q4@290@01)))))
              (and
                (<= 0 $q5@291@01)
                (<
                  $q5@291@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                        $q3@289@01)
                      $q4@290@01))))))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                $q3@289@01)
              $q4@290@01)
            $q5@291@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@833@371@833@806-aux|))))
    (or
      (not
        (and
          (<= 0 $q4@290@01)
          (<
            $q4@290@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                $q3@289@01)))))
      (and
        (<= 0 $q4@290@01)
        (<
          $q4@290@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
              $q3@289@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
      $q3@289@01)
    $q4@290@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@833@186@833@807-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 203 | !(0 <= $q3@289@01 && $q3@289@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int]($pre_self@230@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@289@01)
    (<
      $q3@289@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@289@01)
    (<
      $q3@289@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2)))))
  (and
    (<= 0 $q3@289@01)
    (<
      $q3@289@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))))
    (forall (($q4@290@01 Int)) (!
      (and
        (or (<= 0 $q4@290@01) (not (<= 0 $q4@290@01)))
        (=>
          (and
            (<= 0 $q4@290@01)
            (<
              $q4@290@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                  $q3@289@01))))
          (and
            (<= 0 $q4@290@01)
            (<
              $q4@290@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                  $q3@289@01)))
            (forall (($q5@291@01 Int)) (!
              (and
                (or (<= 0 $q5@291@01) (not (<= 0 $q5@291@01)))
                (=>
                  (and
                    (<= 0 $q5@291@01)
                    (<
                      $q5@291@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                            $q3@289@01)
                          $q4@290@01))))
                  (and
                    (<= 0 $q5@291@01)
                    (<
                      $q5@291@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                            $q3@289@01)
                          $q4@290@01)))
                    (or
                      (<=
                        (- 0 170141183460469231731687303715884105728)
                        (Seq_index
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                              $q3@289@01)
                            $q4@290@01)
                          $q5@291@01))
                      (not
                        (<=
                          (- 0 170141183460469231731687303715884105728)
                          (Seq_index
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                                $q3@289@01)
                              $q4@290@01)
                            $q5@291@01))))))
                (or
                  (not
                    (and
                      (<= 0 $q5@291@01)
                      (<
                        $q5@291@01
                        (Seq_length
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                              $q3@289@01)
                            $q4@290@01)))))
                  (and
                    (<= 0 $q5@291@01)
                    (<
                      $q5@291@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                            $q3@289@01)
                          $q4@290@01))))))
              :pattern ((Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                    $q3@289@01)
                  $q4@290@01)
                $q5@291@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@833@371@833@806-aux|))))
        (or
          (not
            (and
              (<= 0 $q4@290@01)
              (<
                $q4@290@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                    $q3@289@01)))))
          (and
            (<= 0 $q4@290@01)
            (<
              $q4@290@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                  $q3@289@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
          $q3@289@01)
        $q4@290@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@833@186@833@807-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@289@01)
      (<
        $q3@289@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))))))
  (and
    (<= 0 $q3@289@01)
    (<
      $q3@289@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@289@01 Int)) (!
  (and
    (or (<= 0 $q3@289@01) (not (<= 0 $q3@289@01)))
    (=>
      (and
        (<= 0 $q3@289@01)
        (<
          $q3@289@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2)))))
      (and
        (<= 0 $q3@289@01)
        (<
          $q3@289@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))))
        (forall (($q4@290@01 Int)) (!
          (and
            (or (<= 0 $q4@290@01) (not (<= 0 $q4@290@01)))
            (=>
              (and
                (<= 0 $q4@290@01)
                (<
                  $q4@290@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                      $q3@289@01))))
              (and
                (<= 0 $q4@290@01)
                (<
                  $q4@290@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                      $q3@289@01)))
                (forall (($q5@291@01 Int)) (!
                  (and
                    (or (<= 0 $q5@291@01) (not (<= 0 $q5@291@01)))
                    (=>
                      (and
                        (<= 0 $q5@291@01)
                        (<
                          $q5@291@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                                $q3@289@01)
                              $q4@290@01))))
                      (and
                        (<= 0 $q5@291@01)
                        (<
                          $q5@291@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                                $q3@289@01)
                              $q4@290@01)))
                        (or
                          (<=
                            (- 0 170141183460469231731687303715884105728)
                            (Seq_index
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                                  $q3@289@01)
                                $q4@290@01)
                              $q5@291@01))
                          (not
                            (<=
                              (- 0 170141183460469231731687303715884105728)
                              (Seq_index
                                (Seq_index
                                  (Seq_index
                                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                                    $q3@289@01)
                                  $q4@290@01)
                                $q5@291@01))))))
                    (or
                      (not
                        (and
                          (<= 0 $q5@291@01)
                          (<
                            $q5@291@01
                            (Seq_length
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                                  $q3@289@01)
                                $q4@290@01)))))
                      (and
                        (<= 0 $q5@291@01)
                        (<
                          $q5@291@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                                $q3@289@01)
                              $q4@290@01))))))
                  :pattern ((Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                        $q3@289@01)
                      $q4@290@01)
                    $q5@291@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@833@371@833@806-aux|))))
            (or
              (not
                (and
                  (<= 0 $q4@290@01)
                  (<
                    $q4@290@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                        $q3@289@01)))))
              (and
                (<= 0 $q4@290@01)
                (<
                  $q4@290@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                      $q3@289@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
              $q3@289@01)
            $q4@290@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@833@186@833@807-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@289@01)
          (<
            $q3@289@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))))))
      (and
        (<= 0 $q3@289@01)
        (<
          $q3@289@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
    $q3@289@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@833@11@833@808-aux|)))
(assert (forall (($q3@289@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@289@01)
      (<
        $q3@289@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2)))))
    (forall (($q4@290@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@290@01)
          (<
            $q4@290@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                $q3@289@01))))
        (forall (($q5@291@01 Int)) (!
          (=>
            (and
              (<= 0 $q5@291@01)
              (<
                $q5@291@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                      $q3@289@01)
                    $q4@290@01))))
            (and
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                      $q3@289@01)
                    $q4@290@01)
                  $q5@291@01))
              (<=
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                      $q3@289@01)
                    $q4@290@01)
                  $q5@291@01)
                170141183460469231731687303715884105727)))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
                $q3@289@01)
              $q4@290@01)
            $q5@291@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@833@371@833@806|)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
          $q3@289@01)
        $q4@290@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@833@186@833@807|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> $pre_self@230@01 2))
    $q3@289@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@833@11@833@808|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc($pre_self, 3)): Seq[Int])| == 1000
(declare-const $t@292@01 $Snap)
(assert (= $t@292@01 $Snap.unit))
; [eval] |($struct_get($struct_loc($pre_self, 3)): Seq[Int])| == 1000
; [eval] |($struct_get($struct_loc($pre_self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc($pre_self, 3)): Seq[Int])
; [eval] $struct_loc($pre_self, 3)
(assert (=
  (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 3)))
  1000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($struct_get($struct_loc($pre_self, 3)): Seq[Int])[$q6] }
;     0 <= $q6 && $q6 < |($struct_get($struct_loc($pre_self, 3)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc($pre_self, 3)): Seq[Int])[$q6] &&
;     ($struct_get($struct_loc($pre_self, 3)): Seq[Int])[$q6] <=
;     170141183460469231731687303715884105727)
(declare-const $t@293@01 $Snap)
(assert (= $t@293@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($struct_get($struct_loc($pre_self, 3)): Seq[Int])[$q6] } 0 <= $q6 && $q6 < |($struct_get($struct_loc($pre_self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc($pre_self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727)
(declare-const $q6@294@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc($pre_self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc($pre_self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc($pre_self, 3)): Seq[Int])|
; [eval] 0 <= $q6
(push) ; 4
; [then-branch: 209 | !(0 <= $q6@294@01) | live]
; [else-branch: 209 | 0 <= $q6@294@01 | live]
(push) ; 5
; [then-branch: 209 | !(0 <= $q6@294@01)]
(assert (not (<= 0 $q6@294@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 209 | 0 <= $q6@294@01]
(assert (<= 0 $q6@294@01))
; [eval] $q6 < |($struct_get($struct_loc($pre_self, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc($pre_self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc($pre_self, 3)): Seq[Int])
; [eval] $struct_loc($pre_self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q6@294@01) (not (<= 0 $q6@294@01))))
(push) ; 4
; [then-branch: 210 | 0 <= $q6@294@01 && $q6@294@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($pre_self@230@01, 3))| | live]
; [else-branch: 210 | !(0 <= $q6@294@01 && $q6@294@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($pre_self@230@01, 3))|) | live]
(push) ; 5
; [then-branch: 210 | 0 <= $q6@294@01 && $q6@294@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($pre_self@230@01, 3))|]
(assert (and
  (<= 0 $q6@294@01)
  (<
    $q6@294@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 3))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc($pre_self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 3)): Seq[Int])[$q6]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($pre_self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc($pre_self, 3)): Seq[Int])
; [eval] $struct_loc($pre_self, 3)
(push) ; 6
(assert (not (>= $q6@294@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 211 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($pre_self@230@01, 3))[$q6@294@01]) | live]
; [else-branch: 211 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($pre_self@230@01, 3))[$q6@294@01] | live]
(push) ; 7
; [then-branch: 211 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($pre_self@230@01, 3))[$q6@294@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 3))
      $q6@294@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 211 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int]($pre_self@230@01, 3))[$q6@294@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 3))
    $q6@294@01)))
; [eval] ($struct_get($struct_loc($pre_self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($pre_self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc($pre_self, 3)): Seq[Int])
; [eval] $struct_loc($pre_self, 3)
(push) ; 8
(assert (not (>= $q6@294@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 3))
      $q6@294@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 3))
        $q6@294@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 210 | !(0 <= $q6@294@01 && $q6@294@01 < |$struct_get[Seq[Int]]($struct_loc[Int]($pre_self@230@01, 3))|)]
(assert (not
  (and
    (<= 0 $q6@294@01)
    (<
      $q6@294@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q6@294@01)
    (<
      $q6@294@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 3)))))
  (and
    (<= 0 $q6@294@01)
    (<
      $q6@294@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 3))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 3))
          $q6@294@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 3))
            $q6@294@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q6@294@01)
      (<
        $q6@294@01
        (Seq_length
          ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 3))))))
  (and
    (<= 0 $q6@294@01)
    (<
      $q6@294@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@294@01 Int)) (!
  (and
    (or (<= 0 $q6@294@01) (not (<= 0 $q6@294@01)))
    (=>
      (and
        (<= 0 $q6@294@01)
        (<
          $q6@294@01
          (Seq_length
            ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 3)))))
      (and
        (<= 0 $q6@294@01)
        (<
          $q6@294@01
          (Seq_length
            ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 3))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 3))
              $q6@294@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 3))
                $q6@294@01))))))
    (or
      (not
        (and
          (<= 0 $q6@294@01)
          (<
            $q6@294@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 3))))))
      (and
        (<= 0 $q6@294@01)
        (<
          $q6@294@01
          (Seq_length
            ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 3)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 3))
    $q6@294@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@835@11@835@366-aux|)))
(assert (forall (($q6@294@01 Int)) (!
  (=>
    (and
      (<= 0 $q6@294@01)
      (<
        $q6@294@01
        (Seq_length
          ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 3)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 3))
          $q6@294@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 3))
          $q6@294@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> $pre_self@230@01 3))
    $q6@294@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@835@11@835@366|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]),
;     $q7): Seq[Int]) }
;     |($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]),
;     $q7): Seq[Int])| ==
;     10)
(declare-const $t@295@01 $Snap)
(assert (= $t@295@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } |($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10)
(declare-const $q7@296@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10
; [eval] |($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc($pre_self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@296@01 Int)) (!
  (=
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@296@01))
    10)
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@296@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@836@11@836@219|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]),
;     $q7): Seq[Int]) }
;     (forall $q8: Int ::
;       { ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] }
;       0 <= $q8 &&
;       $q8 <
;       |($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])| ==>
;       -170141183460469231731687303715884105728 <=
;       ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] &&
;       ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] <=
;       170141183460469231731687303715884105727))
(declare-const $t@297@01 $Snap)
(assert (= $t@297@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } (forall $q8: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727))
(declare-const $q7@298@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q8: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727)
(declare-const $q8@299@01 Int)
(push) ; 4
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] 0 <= $q8
(push) ; 5
; [then-branch: 212 | !(0 <= $q8@299@01) | live]
; [else-branch: 212 | 0 <= $q8@299@01 | live]
(push) ; 6
; [then-branch: 212 | !(0 <= $q8@299@01)]
(assert (not (<= 0 $q8@299@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 212 | 0 <= $q8@299@01]
(assert (<= 0 $q8@299@01))
; [eval] $q8 < |($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc($pre_self, 4)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q8@299@01) (not (<= 0 $q8@299@01))))
(push) ; 5
; [then-branch: 213 | 0 <= $q8@299@01 && $q8@299@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($pre_self@230@01, 4)), $q7@298@01)| | live]
; [else-branch: 213 | !(0 <= $q8@299@01 && $q8@299@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($pre_self@230@01, 4)), $q7@298@01)|) | live]
(push) ; 6
; [then-branch: 213 | 0 <= $q8@299@01 && $q8@299@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($pre_self@230@01, 4)), $q7@298@01)|]
(assert (and
  (<= 0 $q8@299@01)
  (<
    $q8@299@01
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] -170141183460469231731687303715884105728
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc($pre_self, 4)
(push) ; 7
(assert (not (>= $q8@299@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 214 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($pre_self@230@01, 4)), $q7@298@01)[$q8@299@01]) | live]
; [else-branch: 214 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($pre_self@230@01, 4)), $q7@298@01)[$q8@299@01] | live]
(push) ; 8
; [then-branch: 214 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($pre_self@230@01, 4)), $q7@298@01)[$q8@299@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01)
      $q8@299@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 214 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($pre_self@230@01, 4)), $q7@298@01)[$q8@299@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01)
    $q8@299@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc($pre_self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc($pre_self, 4)
(push) ; 9
(assert (not (>= $q8@299@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01)
      $q8@299@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01)
        $q8@299@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 213 | !(0 <= $q8@299@01 && $q8@299@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int]($pre_self@230@01, 4)), $q7@298@01)|)]
(assert (not
  (and
    (<= 0 $q8@299@01)
    (<
      $q8@299@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q8@299@01)
    (<
      $q8@299@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01))))
  (and
    (<= 0 $q8@299@01)
    (<
      $q8@299@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01)
          $q8@299@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01)
            $q8@299@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q8@299@01)
      (<
        $q8@299@01
        (Seq_length
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01)))))
  (and
    (<= 0 $q8@299@01)
    (<
      $q8@299@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q8@299@01 Int)) (!
  (and
    (or (<= 0 $q8@299@01) (not (<= 0 $q8@299@01)))
    (=>
      (and
        (<= 0 $q8@299@01)
        (<
          $q8@299@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01))))
      (and
        (<= 0 $q8@299@01)
        (<
          $q8@299@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01)
              $q8@299@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01)
                $q8@299@01))))))
    (or
      (not
        (and
          (<= 0 $q8@299@01)
          (<
            $q8@299@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01)))))
      (and
        (<= 0 $q8@299@01)
        (<
          $q8@299@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01))))))
  :pattern ((Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01)
    $q8@299@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@837@124@837@631-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@298@01 Int)) (!
  (forall (($q8@299@01 Int)) (!
    (and
      (or (<= 0 $q8@299@01) (not (<= 0 $q8@299@01)))
      (=>
        (and
          (<= 0 $q8@299@01)
          (<
            $q8@299@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01))))
        (and
          (<= 0 $q8@299@01)
          (<
            $q8@299@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01)))
          (or
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01)
                $q8@299@01))
            (not
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01)
                  $q8@299@01))))))
      (or
        (not
          (and
            (<= 0 $q8@299@01)
            (<
              $q8@299@01
              (Seq_length
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01)))))
        (and
          (<= 0 $q8@299@01)
          (<
            $q8@299@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01))))))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01)
      $q8@299@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@837@124@837@631-aux|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@837@11@837@632-aux|)))
(assert (forall (($q7@298@01 Int)) (!
  (forall (($q8@299@01 Int)) (!
    (=>
      (and
        (<= 0 $q8@299@01)
        (<
          $q8@299@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01))))
      (and
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01)
            $q8@299@01))
        (<=
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01)
            $q8@299@01)
          170141183460469231731687303715884105727)))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01)
      $q8@299@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@837@124@837@631|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> $pre_self@230@01 4)) $q7@298@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@837@11@837@632|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc($pre_self, 5)): Int) &&
;   ($struct_get($struct_loc($pre_self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@300@01 $Snap)
(assert (= $t@300@01 ($Snap.combine ($Snap.first $t@300@01) ($Snap.second $t@300@01))))
(assert (= ($Snap.first $t@300@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc($pre_self, 5)): Int)
; [eval] ($struct_get($struct_loc($pre_self, 5)): Int)
; [eval] $struct_loc($pre_self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> $pre_self@230@01 5))))
(assert (= ($Snap.second $t@300@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc($pre_self, 5)): Int)
; [eval] $struct_loc($pre_self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@230@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc($pre_self, 6)): Int) &&
;   ($struct_get($struct_loc($pre_self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@301@01 $Snap)
(assert (= $t@301@01 ($Snap.combine ($Snap.first $t@301@01) ($Snap.second $t@301@01))))
(assert (= ($Snap.first $t@301@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc($pre_self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc($pre_self, 6)): Int)
; [eval] $struct_loc($pre_self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> $pre_self@230@01 6))))
(assert (= ($Snap.second $t@301@01) $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc($pre_self, 6)): Int)
; [eval] $struct_loc($pre_self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@230@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q9): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q9): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q9): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@302@01 $Snap)
(assert (= $t@302@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q9): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q9@303@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
(push) ; 4
; [then-branch: 215 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@230@01, 8)), $q9@303@01)) | live]
; [else-branch: 215 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@230@01, 8)), $q9@303@01) | live]
(push) ; 5
; [then-branch: 215 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@230@01, 8)), $q9@303@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 8)) $q9@303@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 215 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@230@01, 8)), $q9@303@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 8)) $q9@303@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 8)) $q9@303@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 8)) $q9@303@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@303@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 8)) $q9@303@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 8)) $q9@303@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 8)) $q9@303@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@840@11@840@360-aux|)))
(assert (forall (($q9@303@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 8)) $q9@303@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 8)) $q9@303@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 8)) $q9@303@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@840@11@840@360|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q9): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q9): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int))
(declare-const $t@304@01 $Snap)
(assert (= $t@304@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q9): Int) } ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int))
(declare-const $q9@305@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 8)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@305@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 8)) $q9@305@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 8)) $q9@305@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@841@11@841@268|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q10): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q10): Int) &&
;     ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q10): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@306@01 $Snap)
(assert (= $t@306@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q10): Int) } 0 <= ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q10@307@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 9)
(push) ; 4
; [then-branch: 216 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@230@01, 9)), $q10@307@01)) | live]
; [else-branch: 216 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@230@01, 9)), $q10@307@01) | live]
(push) ; 5
; [then-branch: 216 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@230@01, 9)), $q10@307@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 9)) $q10@307@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 216 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int]($pre_self@230@01, 9)), $q10@307@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 9)) $q10@307@01)))
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 9)) $q10@307@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 9)) $q10@307@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@307@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 9)) $q10@307@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 9)) $q10@307@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 9)) $q10@307@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@842@11@842@364-aux|)))
(assert (forall (($q10@307@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 9)) $q10@307@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 9)) $q10@307@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 9)) $q10@307@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@842@11@842@364|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q10): Int) }
;     ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q10): Int) <=
;     ($map_sum(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int])): Int))
(declare-const $t@308@01 $Snap)
(assert (= $t@308@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q10): Int) } ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int])): Int))
(declare-const $q10@309@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 9)
; [eval] ($map_sum(($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc($pre_self, 9)): $Map[Int, Int])
; [eval] $struct_loc($pre_self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@309@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 9)) $q10@309@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> $pre_self@230@01 9)) $q10@309@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@843@11@843@271|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc($pre_self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@310@01 $Snap)
(assert (= $t@310@01 $Snap.unit))
; [eval] ($struct_get($struct_loc($pre_self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc($pre_self, -1)): Int)
; [eval] $struct_loc($pre_self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> $pre_self@230@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@311@01 $Snap)
(assert (= $t@311@01 ($Snap.combine ($Snap.first $t@311@01) ($Snap.second $t@311@01))))
(assert (= ($Snap.first $t@311@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@234@01 0))))
(assert (= ($Snap.second $t@311@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@234@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@312@01 $Snap)
(assert (= $t@312@01 ($Snap.combine ($Snap.first $t@312@01) ($Snap.second $t@312@01))))
(assert (= ($Snap.first $t@312@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@234@01 1))))
(assert (= ($Snap.second $t@312@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@234@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@313@01 $Snap)
(assert (= $t@313@01 ($Snap.combine ($Snap.first $t@313@01) ($Snap.second $t@313@01))))
(assert (= ($Snap.first $t@313@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@234@01 2))))
(assert (= ($Snap.second $t@313@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@234@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@314@01 $Snap)
(assert (= $t@314@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@234@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@315@01 $Snap)
(assert (= $t@315@01 ($Snap.combine ($Snap.first $t@315@01) ($Snap.second $t@315@01))))
(assert (= ($Snap.first $t@315@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@234@01 4))))
(assert (= ($Snap.second $t@315@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@234@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@316@01 $Snap)
(assert (= $t@316@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@234@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale $havoc >= 0
(declare-const $t@317@01 $Snap)
(assert (= $t@317@01 $Snap.unit))
; [eval] $havoc >= 0
(assert (>= $havoc@233@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@318@01 $Snap)
(assert (= $t@318@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@319@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc(self, 3)): Seq[Int])
(declare-const $t@320@01 $Snap)
(assert (= $t@320@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   $havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + $havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + $havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@321@01 $Struct)
(assert (=
  self@321@01
  ($struct_set<$Struct> self@228@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@228@01 5))
    $havoc@233@01))))
(pop) ; 2
(pop) ; 1
; ---------- f$array_read ----------
(declare-const $succ@322@01 Bool)
(declare-const $res@323@01 Int)
(declare-const $succ@324@01 Bool)
(declare-const $res@325@01 Int)
(set-option :timeout 0)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@326@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@327@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@328@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@329@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@330@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@331@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@332@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@333@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@334@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@335@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@336@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@337@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@338@01 Bool)
; [exec]
; var l$a: $Int
(declare-const l$a@339@01 $Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@340@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@341@01 Int)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@342@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@343@01 $Map<Int~_$Struct>)
; [exec]
; inhale |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
(declare-const $t@344@01 $Snap)
(assert (= $t@344@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0))) 12))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] }
;     0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] &&
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <=
;     170141183460469231731687303715884105727)
(declare-const $t@345@01 $Snap)
(assert (= $t@345@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] } 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@346@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 217 | !(0 <= $q0@346@01) | live]
; [else-branch: 217 | 0 <= $q0@346@01 | live]
(push) ; 5
; [then-branch: 217 | !(0 <= $q0@346@01)]
(assert (not (<= 0 $q0@346@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 217 | 0 <= $q0@346@01]
(assert (<= 0 $q0@346@01))
; [eval] $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@346@01) (not (<= 0 $q0@346@01))))
(push) ; 4
; [then-branch: 218 | 0 <= $q0@346@01 && $q0@346@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@330@01, 0))| | live]
; [else-branch: 218 | !(0 <= $q0@346@01 && $q0@346@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@330@01, 0))|) | live]
(push) ; 5
; [then-branch: 218 | 0 <= $q0@346@01 && $q0@346@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@330@01, 0))|]
(assert (and
  (<= 0 $q0@346@01)
  (<
    $q0@346@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (>= $q0@346@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 219 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@330@01, 0))[$q0@346@01]) | live]
; [else-branch: 219 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@330@01, 0))[$q0@346@01] | live]
(push) ; 7
; [then-branch: 219 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@330@01, 0))[$q0@346@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0))
      $q0@346@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 219 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@330@01, 0))[$q0@346@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0)) $q0@346@01)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (>= $q0@346@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0))
      $q0@346@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0))
        $q0@346@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 218 | !(0 <= $q0@346@01 && $q0@346@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@330@01, 0))|)]
(assert (not
  (and
    (<= 0 $q0@346@01)
    (<
      $q0@346@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q0@346@01)
    (<
      $q0@346@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0)))))
  (and
    (<= 0 $q0@346@01)
    (<
      $q0@346@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0))
          $q0@346@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0))
            $q0@346@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q0@346@01)
      (<
        $q0@346@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0))))))
  (and
    (<= 0 $q0@346@01)
    (<
      $q0@346@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@346@01 Int)) (!
  (and
    (or (<= 0 $q0@346@01) (not (<= 0 $q0@346@01)))
    (=>
      (and
        (<= 0 $q0@346@01)
        (<
          $q0@346@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0)))))
      (and
        (<= 0 $q0@346@01)
        (<
          $q0@346@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0))
              $q0@346@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0))
                $q0@346@01))))))
    (or
      (not
        (and
          (<= 0 $q0@346@01)
          (<
            $q0@346@01
            (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0))))))
      (and
        (<= 0 $q0@346@01)
        (<
          $q0@346@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0))
    $q0@346@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@882@11@882@346-aux|)))
(assert (forall (($q0@346@01 Int)) (!
  (=>
    (and
      (<= 0 $q0@346@01)
      (<
        $q0@346@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0))
          $q0@346@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0))
          $q0@346@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0))
    $q0@346@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@882@11@882@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
(declare-const $t@347@01 $Snap)
(assert (= $t@347@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(assert (= (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $t@348@01 $Snap)
(assert (= $t@348@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $q1@349@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 220 | !(0 <= $q1@349@01) | live]
; [else-branch: 220 | 0 <= $q1@349@01 | live]
(push) ; 5
; [then-branch: 220 | !(0 <= $q1@349@01)]
(assert (not (<= 0 $q1@349@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 220 | 0 <= $q1@349@01]
(assert (<= 0 $q1@349@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@349@01) (not (<= 0 $q1@349@01))))
(push) ; 4
; [then-branch: 221 | 0 <= $q1@349@01 && $q1@349@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))| | live]
; [else-branch: 221 | !(0 <= $q1@349@01 && $q1@349@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))|) | live]
(push) ; 5
; [then-branch: 221 | 0 <= $q1@349@01 && $q1@349@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))|]
(assert (and
  (<= 0 $q1@349@01)
  (<
    $q1@349@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))))))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 6
(assert (not (>= $q1@349@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 221 | !(0 <= $q1@349@01 && $q1@349@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@349@01)
    (<
      $q1@349@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@349@01)
      (<
        $q1@349@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))))))
  (and
    (<= 0 $q1@349@01)
    (<
      $q1@349@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@349@01 Int)) (!
  (and
    (or (<= 0 $q1@349@01) (not (<= 0 $q1@349@01)))
    (or
      (not
        (and
          (<= 0 $q1@349@01)
          (<
            $q1@349@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))))))
      (and
        (<= 0 $q1@349@01)
        (<
          $q1@349@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
    $q1@349@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@884@11@884@228-aux|)))
(assert (forall (($q1@349@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@349@01)
      (<
        $q1@349@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
          $q1@349@01))
      12))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
    $q1@349@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@884@11@884@228|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     (forall $q2: Int ::
;       { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] }
;       0 <= $q2 &&
;       $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==>
;       -170141183460469231731687303715884105728 <=
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] &&
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <=
;       170141183460469231731687303715884105727))
(declare-const $t@350@01 $Snap)
(assert (= $t@350@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727))
(declare-const $q1@351@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 222 | !(0 <= $q1@351@01) | live]
; [else-branch: 222 | 0 <= $q1@351@01 | live]
(push) ; 5
; [then-branch: 222 | !(0 <= $q1@351@01)]
(assert (not (<= 0 $q1@351@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 222 | 0 <= $q1@351@01]
(assert (<= 0 $q1@351@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@351@01) (not (<= 0 $q1@351@01))))
(push) ; 4
; [then-branch: 223 | 0 <= $q1@351@01 && $q1@351@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))| | live]
; [else-branch: 223 | !(0 <= $q1@351@01 && $q1@351@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))|) | live]
(push) ; 5
; [then-branch: 223 | 0 <= $q1@351@01 && $q1@351@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))|]
(assert (and
  (<= 0 $q1@351@01)
  (<
    $q1@351@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))))))
; [eval] (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
(declare-const $q2@352@01 Int)
(push) ; 6
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] 0 <= $q2
(push) ; 7
; [then-branch: 224 | !(0 <= $q2@352@01) | live]
; [else-branch: 224 | 0 <= $q2@352@01 | live]
(push) ; 8
; [then-branch: 224 | !(0 <= $q2@352@01)]
(assert (not (<= 0 $q2@352@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 224 | 0 <= $q2@352@01]
(assert (<= 0 $q2@352@01))
; [eval] $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@351@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q2@352@01) (not (<= 0 $q2@352@01))))
(push) ; 7
; [then-branch: 225 | 0 <= $q2@352@01 && $q2@352@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[$q1@351@01]| | live]
; [else-branch: 225 | !(0 <= $q2@352@01 && $q2@352@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[$q1@351@01]|) | live]
(push) ; 8
; [then-branch: 225 | 0 <= $q2@352@01 && $q2@352@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[$q1@351@01]|]
(assert (and
  (<= 0 $q2@352@01)
  (<
    $q2@352@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
        $q1@351@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@351@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q2@352@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 226 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[$q1@351@01][$q2@352@01]) | live]
; [else-branch: 226 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[$q1@351@01][$q2@352@01] | live]
(push) ; 10
; [then-branch: 226 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[$q1@351@01][$q2@352@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
        $q1@351@01)
      $q2@352@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 226 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[$q1@351@01][$q2@352@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
      $q1@351@01)
    $q2@352@01)))
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 11
(assert (not (>= $q1@351@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= $q2@352@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
        $q1@351@01)
      $q2@352@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
          $q1@351@01)
        $q2@352@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 225 | !(0 <= $q2@352@01 && $q2@352@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[$q1@351@01]|)]
(assert (not
  (and
    (<= 0 $q2@352@01)
    (<
      $q2@352@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
          $q1@351@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q2@352@01)
    (<
      $q2@352@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
          $q1@351@01))))
  (and
    (<= 0 $q2@352@01)
    (<
      $q2@352@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
          $q1@351@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
            $q1@351@01)
          $q2@352@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
              $q1@351@01)
            $q2@352@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q2@352@01)
      (<
        $q2@352@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
            $q1@351@01)))))
  (and
    (<= 0 $q2@352@01)
    (<
      $q2@352@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
          $q1@351@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@352@01 Int)) (!
  (and
    (or (<= 0 $q2@352@01) (not (<= 0 $q2@352@01)))
    (=>
      (and
        (<= 0 $q2@352@01)
        (<
          $q2@352@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
              $q1@351@01))))
      (and
        (<= 0 $q2@352@01)
        (<
          $q2@352@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
              $q1@351@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
                $q1@351@01)
              $q2@352@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
                  $q1@351@01)
                $q2@352@01))))))
    (or
      (not
        (and
          (<= 0 $q2@352@01)
          (<
            $q2@352@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
                $q1@351@01)))))
      (and
        (<= 0 $q2@352@01)
        (<
          $q2@352@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
              $q1@351@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
      $q1@351@01)
    $q2@352@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@885@166@885@541-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 223 | !(0 <= $q1@351@01 && $q1@351@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@351@01)
    (<
      $q1@351@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q1@351@01)
    (<
      $q1@351@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1)))))
  (and
    (<= 0 $q1@351@01)
    (<
      $q1@351@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))))
    (forall (($q2@352@01 Int)) (!
      (and
        (or (<= 0 $q2@352@01) (not (<= 0 $q2@352@01)))
        (=>
          (and
            (<= 0 $q2@352@01)
            (<
              $q2@352@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
                  $q1@351@01))))
          (and
            (<= 0 $q2@352@01)
            (<
              $q2@352@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
                  $q1@351@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
                    $q1@351@01)
                  $q2@352@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
                      $q1@351@01)
                    $q2@352@01))))))
        (or
          (not
            (and
              (<= 0 $q2@352@01)
              (<
                $q2@352@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
                    $q1@351@01)))))
          (and
            (<= 0 $q2@352@01)
            (<
              $q2@352@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
                  $q1@351@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
          $q1@351@01)
        $q2@352@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@885@166@885@541-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@351@01)
      (<
        $q1@351@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))))))
  (and
    (<= 0 $q1@351@01)
    (<
      $q1@351@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@351@01 Int)) (!
  (and
    (or (<= 0 $q1@351@01) (not (<= 0 $q1@351@01)))
    (=>
      (and
        (<= 0 $q1@351@01)
        (<
          $q1@351@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1)))))
      (and
        (<= 0 $q1@351@01)
        (<
          $q1@351@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))))
        (forall (($q2@352@01 Int)) (!
          (and
            (or (<= 0 $q2@352@01) (not (<= 0 $q2@352@01)))
            (=>
              (and
                (<= 0 $q2@352@01)
                (<
                  $q2@352@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
                      $q1@351@01))))
              (and
                (<= 0 $q2@352@01)
                (<
                  $q2@352@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
                      $q1@351@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
                        $q1@351@01)
                      $q2@352@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
                          $q1@351@01)
                        $q2@352@01))))))
            (or
              (not
                (and
                  (<= 0 $q2@352@01)
                  (<
                    $q2@352@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
                        $q1@351@01)))))
              (and
                (<= 0 $q2@352@01)
                (<
                  $q2@352@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
                      $q1@351@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
              $q1@351@01)
            $q2@352@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@885@166@885@541-aux|))))
    (or
      (not
        (and
          (<= 0 $q1@351@01)
          (<
            $q1@351@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))))))
      (and
        (<= 0 $q1@351@01)
        (<
          $q1@351@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
    $q1@351@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@885@11@885@542-aux|)))
(assert (forall (($q1@351@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@351@01)
      (<
        $q1@351@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1)))))
    (forall (($q2@352@01 Int)) (!
      (=>
        (and
          (<= 0 $q2@352@01)
          (<
            $q2@352@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
                $q1@351@01))))
        (and
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
                $q1@351@01)
              $q2@352@01))
          (<=
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
                $q1@351@01)
              $q2@352@01)
            170141183460469231731687303715884105727)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
          $q1@351@01)
        $q2@352@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@885@166@885@541|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
    $q1@351@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@885@11@885@542|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
(declare-const $t@353@01 $Snap)
(assert (= $t@353@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(assert (=
  (Seq_length ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2)))
  2))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $t@354@01 $Snap)
(assert (= $t@354@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $q3@355@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 227 | !(0 <= $q3@355@01) | live]
; [else-branch: 227 | 0 <= $q3@355@01 | live]
(push) ; 5
; [then-branch: 227 | !(0 <= $q3@355@01)]
(assert (not (<= 0 $q3@355@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 227 | 0 <= $q3@355@01]
(assert (<= 0 $q3@355@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@355@01) (not (<= 0 $q3@355@01))))
(push) ; 4
; [then-branch: 228 | 0 <= $q3@355@01 && $q3@355@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))| | live]
; [else-branch: 228 | !(0 <= $q3@355@01 && $q3@355@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))|) | live]
(push) ; 5
; [then-branch: 228 | 0 <= $q3@355@01 && $q3@355@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))|]
(assert (and
  (<= 0 $q3@355@01)
  (<
    $q3@355@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 6
(assert (not (>= $q3@355@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 228 | !(0 <= $q3@355@01 && $q3@355@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@355@01)
    (<
      $q3@355@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@355@01)
      (<
        $q3@355@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))))))
  (and
    (<= 0 $q3@355@01)
    (<
      $q3@355@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@355@01 Int)) (!
  (and
    (or (<= 0 $q3@355@01) (not (<= 0 $q3@355@01)))
    (or
      (not
        (and
          (<= 0 $q3@355@01)
          (<
            $q3@355@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))))))
      (and
        (<= 0 $q3@355@01)
        (<
          $q3@355@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
    $q3@355@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@887@11@887@242-aux|)))
(assert (forall (($q3@355@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@355@01)
      (<
        $q3@355@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
          $q3@355@01))
      2))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
    $q3@355@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@887@11@887@242|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==
;       2))
(declare-const $t@356@01 $Snap)
(assert (= $t@356@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2))
(declare-const $q3@357@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 229 | !(0 <= $q3@357@01) | live]
; [else-branch: 229 | 0 <= $q3@357@01 | live]
(push) ; 5
; [then-branch: 229 | !(0 <= $q3@357@01)]
(assert (not (<= 0 $q3@357@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 229 | 0 <= $q3@357@01]
(assert (<= 0 $q3@357@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@357@01) (not (<= 0 $q3@357@01))))
(push) ; 4
; [then-branch: 230 | 0 <= $q3@357@01 && $q3@357@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))| | live]
; [else-branch: 230 | !(0 <= $q3@357@01 && $q3@357@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))|) | live]
(push) ; 5
; [then-branch: 230 | 0 <= $q3@357@01 && $q3@357@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))|]
(assert (and
  (<= 0 $q3@357@01)
  (<
    $q3@357@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
(declare-const $q4@358@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 231 | !(0 <= $q4@358@01) | live]
; [else-branch: 231 | 0 <= $q4@358@01 | live]
(push) ; 8
; [then-branch: 231 | !(0 <= $q4@358@01)]
(assert (not (<= 0 $q4@358@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 231 | 0 <= $q4@358@01]
(assert (<= 0 $q4@358@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@357@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@358@01) (not (<= 0 $q4@358@01))))
(push) ; 7
; [then-branch: 232 | 0 <= $q4@358@01 && $q4@358@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[$q3@357@01]| | live]
; [else-branch: 232 | !(0 <= $q4@358@01 && $q4@358@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[$q3@357@01]|) | live]
(push) ; 8
; [then-branch: 232 | 0 <= $q4@358@01 && $q4@358@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[$q3@357@01]|]
(assert (and
  (<= 0 $q4@358@01)
  (<
    $q4@358@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
        $q3@357@01)))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@357@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q4@358@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 232 | !(0 <= $q4@358@01 && $q4@358@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[$q3@357@01]|)]
(assert (not
  (and
    (<= 0 $q4@358@01)
    (<
      $q4@358@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
          $q3@357@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@358@01)
      (<
        $q4@358@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
            $q3@357@01)))))
  (and
    (<= 0 $q4@358@01)
    (<
      $q4@358@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
          $q3@357@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@358@01 Int)) (!
  (and
    (or (<= 0 $q4@358@01) (not (<= 0 $q4@358@01)))
    (or
      (not
        (and
          (<= 0 $q4@358@01)
          (<
            $q4@358@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                $q3@357@01)))))
      (and
        (<= 0 $q4@358@01)
        (<
          $q4@358@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
              $q3@357@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
      $q3@357@01)
    $q4@358@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@888@176@888@422-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 230 | !(0 <= $q3@357@01 && $q3@357@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@357@01)
    (<
      $q3@357@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@357@01)
    (<
      $q3@357@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2)))))
  (and
    (<= 0 $q3@357@01)
    (<
      $q3@357@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))))
    (forall (($q4@358@01 Int)) (!
      (and
        (or (<= 0 $q4@358@01) (not (<= 0 $q4@358@01)))
        (or
          (not
            (and
              (<= 0 $q4@358@01)
              (<
                $q4@358@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                    $q3@357@01)))))
          (and
            (<= 0 $q4@358@01)
            (<
              $q4@358@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                  $q3@357@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
          $q3@357@01)
        $q4@358@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@888@176@888@422-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@357@01)
      (<
        $q3@357@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))))))
  (and
    (<= 0 $q3@357@01)
    (<
      $q3@357@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@357@01 Int)) (!
  (and
    (or (<= 0 $q3@357@01) (not (<= 0 $q3@357@01)))
    (=>
      (and
        (<= 0 $q3@357@01)
        (<
          $q3@357@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2)))))
      (and
        (<= 0 $q3@357@01)
        (<
          $q3@357@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))))
        (forall (($q4@358@01 Int)) (!
          (and
            (or (<= 0 $q4@358@01) (not (<= 0 $q4@358@01)))
            (or
              (not
                (and
                  (<= 0 $q4@358@01)
                  (<
                    $q4@358@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                        $q3@357@01)))))
              (and
                (<= 0 $q4@358@01)
                (<
                  $q4@358@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                      $q3@357@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
              $q3@357@01)
            $q4@358@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@888@176@888@422-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@357@01)
          (<
            $q3@357@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))))))
      (and
        (<= 0 $q3@357@01)
        (<
          $q3@357@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
    $q3@357@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@888@11@888@423-aux|)))
(assert (forall (($q3@357@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@357@01)
      (<
        $q3@357@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2)))))
    (forall (($q4@358@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@358@01)
          (<
            $q4@358@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                $q3@357@01))))
        (=
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                $q3@357@01)
              $q4@358@01))
          2))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
          $q3@357@01)
        $q4@358@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@888@176@888@422|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
    $q3@357@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@888@11@888@423|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       (forall $q5: Int ::
;         { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] }
;         0 <= $q5 &&
;         $q5 <
;         |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==>
;         -170141183460469231731687303715884105728 <=
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] &&
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <=
;         170141183460469231731687303715884105727)))
(declare-const $t@359@01 $Snap)
(assert (= $t@359@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)))
(declare-const $q3@360@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 233 | !(0 <= $q3@360@01) | live]
; [else-branch: 233 | 0 <= $q3@360@01 | live]
(push) ; 5
; [then-branch: 233 | !(0 <= $q3@360@01)]
(assert (not (<= 0 $q3@360@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 233 | 0 <= $q3@360@01]
(assert (<= 0 $q3@360@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@360@01) (not (<= 0 $q3@360@01))))
(push) ; 4
; [then-branch: 234 | 0 <= $q3@360@01 && $q3@360@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))| | live]
; [else-branch: 234 | !(0 <= $q3@360@01 && $q3@360@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))|) | live]
(push) ; 5
; [then-branch: 234 | 0 <= $q3@360@01 && $q3@360@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))|]
(assert (and
  (<= 0 $q3@360@01)
  (<
    $q3@360@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
(declare-const $q4@361@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 235 | !(0 <= $q4@361@01) | live]
; [else-branch: 235 | 0 <= $q4@361@01 | live]
(push) ; 8
; [then-branch: 235 | !(0 <= $q4@361@01)]
(assert (not (<= 0 $q4@361@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 235 | 0 <= $q4@361@01]
(assert (<= 0 $q4@361@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@360@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@361@01) (not (<= 0 $q4@361@01))))
(push) ; 7
; [then-branch: 236 | 0 <= $q4@361@01 && $q4@361@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[$q3@360@01]| | live]
; [else-branch: 236 | !(0 <= $q4@361@01 && $q4@361@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[$q3@360@01]|) | live]
(push) ; 8
; [then-branch: 236 | 0 <= $q4@361@01 && $q4@361@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[$q3@360@01]|]
(assert (and
  (<= 0 $q4@361@01)
  (<
    $q4@361@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
        $q3@360@01)))))
; [eval] (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
(declare-const $q5@362@01 Int)
(push) ; 9
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] 0 <= $q5
(push) ; 10
; [then-branch: 237 | !(0 <= $q5@362@01) | live]
; [else-branch: 237 | 0 <= $q5@362@01 | live]
(push) ; 11
; [then-branch: 237 | !(0 <= $q5@362@01)]
(assert (not (<= 0 $q5@362@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 237 | 0 <= $q5@362@01]
(assert (<= 0 $q5@362@01))
; [eval] $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@360@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@361@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q5@362@01) (not (<= 0 $q5@362@01))))
(push) ; 10
; [then-branch: 238 | 0 <= $q5@362@01 && $q5@362@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[$q3@360@01][$q4@361@01]| | live]
; [else-branch: 238 | !(0 <= $q5@362@01 && $q5@362@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[$q3@360@01][$q4@361@01]|) | live]
(push) ; 11
; [then-branch: 238 | 0 <= $q5@362@01 && $q5@362@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[$q3@360@01][$q4@361@01]|]
(assert (and
  (<= 0 $q5@362@01)
  (<
    $q5@362@01
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
          $q3@360@01)
        $q4@361@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@360@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@361@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q5@362@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 239 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[$q3@360@01][$q4@361@01][$q5@362@01]) | live]
; [else-branch: 239 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[$q3@360@01][$q4@361@01][$q5@362@01] | live]
(push) ; 13
; [then-branch: 239 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[$q3@360@01][$q4@361@01][$q5@362@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
          $q3@360@01)
        $q4@361@01)
      $q5@362@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 239 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[$q3@360@01][$q4@361@01][$q5@362@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
        $q3@360@01)
      $q4@361@01)
    $q5@362@01)))
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 14
(assert (not (>= $q3@360@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q4@361@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q5@362@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
          $q3@360@01)
        $q4@361@01)
      $q5@362@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
            $q3@360@01)
          $q4@361@01)
        $q5@362@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 238 | !(0 <= $q5@362@01 && $q5@362@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[$q3@360@01][$q4@361@01]|)]
(assert (not
  (and
    (<= 0 $q5@362@01)
    (<
      $q5@362@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
            $q3@360@01)
          $q4@361@01))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q5@362@01)
    (<
      $q5@362@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
            $q3@360@01)
          $q4@361@01))))
  (and
    (<= 0 $q5@362@01)
    (<
      $q5@362@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
            $q3@360@01)
          $q4@361@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
              $q3@360@01)
            $q4@361@01)
          $q5@362@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                $q3@360@01)
              $q4@361@01)
            $q5@362@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q5@362@01)
      (<
        $q5@362@01
        (Seq_length
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
              $q3@360@01)
            $q4@361@01)))))
  (and
    (<= 0 $q5@362@01)
    (<
      $q5@362@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
            $q3@360@01)
          $q4@361@01))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@362@01 Int)) (!
  (and
    (or (<= 0 $q5@362@01) (not (<= 0 $q5@362@01)))
    (=>
      (and
        (<= 0 $q5@362@01)
        (<
          $q5@362@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                $q3@360@01)
              $q4@361@01))))
      (and
        (<= 0 $q5@362@01)
        (<
          $q5@362@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                $q3@360@01)
              $q4@361@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                  $q3@360@01)
                $q4@361@01)
              $q5@362@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                    $q3@360@01)
                  $q4@361@01)
                $q5@362@01))))))
    (or
      (not
        (and
          (<= 0 $q5@362@01)
          (<
            $q5@362@01
            (Seq_length
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                  $q3@360@01)
                $q4@361@01)))))
      (and
        (<= 0 $q5@362@01)
        (<
          $q5@362@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                $q3@360@01)
              $q4@361@01))))))
  :pattern ((Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
        $q3@360@01)
      $q4@361@01)
    $q5@362@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@889@351@889@766-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 236 | !(0 <= $q4@361@01 && $q4@361@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[$q3@360@01]|)]
(assert (not
  (and
    (<= 0 $q4@361@01)
    (<
      $q4@361@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
          $q3@360@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q4@361@01)
    (<
      $q4@361@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
          $q3@360@01))))
  (and
    (<= 0 $q4@361@01)
    (<
      $q4@361@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
          $q3@360@01)))
    (forall (($q5@362@01 Int)) (!
      (and
        (or (<= 0 $q5@362@01) (not (<= 0 $q5@362@01)))
        (=>
          (and
            (<= 0 $q5@362@01)
            (<
              $q5@362@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                    $q3@360@01)
                  $q4@361@01))))
          (and
            (<= 0 $q5@362@01)
            (<
              $q5@362@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                    $q3@360@01)
                  $q4@361@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                      $q3@360@01)
                    $q4@361@01)
                  $q5@362@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                        $q3@360@01)
                      $q4@361@01)
                    $q5@362@01))))))
        (or
          (not
            (and
              (<= 0 $q5@362@01)
              (<
                $q5@362@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                      $q3@360@01)
                    $q4@361@01)))))
          (and
            (<= 0 $q5@362@01)
            (<
              $q5@362@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                    $q3@360@01)
                  $q4@361@01))))))
      :pattern ((Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
            $q3@360@01)
          $q4@361@01)
        $q5@362@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@889@351@889@766-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@361@01)
      (<
        $q4@361@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
            $q3@360@01)))))
  (and
    (<= 0 $q4@361@01)
    (<
      $q4@361@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
          $q3@360@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@361@01 Int)) (!
  (and
    (or (<= 0 $q4@361@01) (not (<= 0 $q4@361@01)))
    (=>
      (and
        (<= 0 $q4@361@01)
        (<
          $q4@361@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
              $q3@360@01))))
      (and
        (<= 0 $q4@361@01)
        (<
          $q4@361@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
              $q3@360@01)))
        (forall (($q5@362@01 Int)) (!
          (and
            (or (<= 0 $q5@362@01) (not (<= 0 $q5@362@01)))
            (=>
              (and
                (<= 0 $q5@362@01)
                (<
                  $q5@362@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                        $q3@360@01)
                      $q4@361@01))))
              (and
                (<= 0 $q5@362@01)
                (<
                  $q5@362@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                        $q3@360@01)
                      $q4@361@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                          $q3@360@01)
                        $q4@361@01)
                      $q5@362@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                            $q3@360@01)
                          $q4@361@01)
                        $q5@362@01))))))
            (or
              (not
                (and
                  (<= 0 $q5@362@01)
                  (<
                    $q5@362@01
                    (Seq_length
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                          $q3@360@01)
                        $q4@361@01)))))
              (and
                (<= 0 $q5@362@01)
                (<
                  $q5@362@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                        $q3@360@01)
                      $q4@361@01))))))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                $q3@360@01)
              $q4@361@01)
            $q5@362@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@889@351@889@766-aux|))))
    (or
      (not
        (and
          (<= 0 $q4@361@01)
          (<
            $q4@361@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                $q3@360@01)))))
      (and
        (<= 0 $q4@361@01)
        (<
          $q4@361@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
              $q3@360@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
      $q3@360@01)
    $q4@361@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@889@176@889@767-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 234 | !(0 <= $q3@360@01 && $q3@360@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@360@01)
    (<
      $q3@360@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@360@01)
    (<
      $q3@360@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2)))))
  (and
    (<= 0 $q3@360@01)
    (<
      $q3@360@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))))
    (forall (($q4@361@01 Int)) (!
      (and
        (or (<= 0 $q4@361@01) (not (<= 0 $q4@361@01)))
        (=>
          (and
            (<= 0 $q4@361@01)
            (<
              $q4@361@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                  $q3@360@01))))
          (and
            (<= 0 $q4@361@01)
            (<
              $q4@361@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                  $q3@360@01)))
            (forall (($q5@362@01 Int)) (!
              (and
                (or (<= 0 $q5@362@01) (not (<= 0 $q5@362@01)))
                (=>
                  (and
                    (<= 0 $q5@362@01)
                    (<
                      $q5@362@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                            $q3@360@01)
                          $q4@361@01))))
                  (and
                    (<= 0 $q5@362@01)
                    (<
                      $q5@362@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                            $q3@360@01)
                          $q4@361@01)))
                    (or
                      (<=
                        (- 0 170141183460469231731687303715884105728)
                        (Seq_index
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                              $q3@360@01)
                            $q4@361@01)
                          $q5@362@01))
                      (not
                        (<=
                          (- 0 170141183460469231731687303715884105728)
                          (Seq_index
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                                $q3@360@01)
                              $q4@361@01)
                            $q5@362@01))))))
                (or
                  (not
                    (and
                      (<= 0 $q5@362@01)
                      (<
                        $q5@362@01
                        (Seq_length
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                              $q3@360@01)
                            $q4@361@01)))))
                  (and
                    (<= 0 $q5@362@01)
                    (<
                      $q5@362@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                            $q3@360@01)
                          $q4@361@01))))))
              :pattern ((Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                    $q3@360@01)
                  $q4@361@01)
                $q5@362@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@889@351@889@766-aux|))))
        (or
          (not
            (and
              (<= 0 $q4@361@01)
              (<
                $q4@361@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                    $q3@360@01)))))
          (and
            (<= 0 $q4@361@01)
            (<
              $q4@361@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                  $q3@360@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
          $q3@360@01)
        $q4@361@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@889@176@889@767-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@360@01)
      (<
        $q3@360@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))))))
  (and
    (<= 0 $q3@360@01)
    (<
      $q3@360@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@360@01 Int)) (!
  (and
    (or (<= 0 $q3@360@01) (not (<= 0 $q3@360@01)))
    (=>
      (and
        (<= 0 $q3@360@01)
        (<
          $q3@360@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2)))))
      (and
        (<= 0 $q3@360@01)
        (<
          $q3@360@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))))
        (forall (($q4@361@01 Int)) (!
          (and
            (or (<= 0 $q4@361@01) (not (<= 0 $q4@361@01)))
            (=>
              (and
                (<= 0 $q4@361@01)
                (<
                  $q4@361@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                      $q3@360@01))))
              (and
                (<= 0 $q4@361@01)
                (<
                  $q4@361@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                      $q3@360@01)))
                (forall (($q5@362@01 Int)) (!
                  (and
                    (or (<= 0 $q5@362@01) (not (<= 0 $q5@362@01)))
                    (=>
                      (and
                        (<= 0 $q5@362@01)
                        (<
                          $q5@362@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                                $q3@360@01)
                              $q4@361@01))))
                      (and
                        (<= 0 $q5@362@01)
                        (<
                          $q5@362@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                                $q3@360@01)
                              $q4@361@01)))
                        (or
                          (<=
                            (- 0 170141183460469231731687303715884105728)
                            (Seq_index
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                                  $q3@360@01)
                                $q4@361@01)
                              $q5@362@01))
                          (not
                            (<=
                              (- 0 170141183460469231731687303715884105728)
                              (Seq_index
                                (Seq_index
                                  (Seq_index
                                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                                    $q3@360@01)
                                  $q4@361@01)
                                $q5@362@01))))))
                    (or
                      (not
                        (and
                          (<= 0 $q5@362@01)
                          (<
                            $q5@362@01
                            (Seq_length
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                                  $q3@360@01)
                                $q4@361@01)))))
                      (and
                        (<= 0 $q5@362@01)
                        (<
                          $q5@362@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                                $q3@360@01)
                              $q4@361@01))))))
                  :pattern ((Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                        $q3@360@01)
                      $q4@361@01)
                    $q5@362@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@889@351@889@766-aux|))))
            (or
              (not
                (and
                  (<= 0 $q4@361@01)
                  (<
                    $q4@361@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                        $q3@360@01)))))
              (and
                (<= 0 $q4@361@01)
                (<
                  $q4@361@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                      $q3@360@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
              $q3@360@01)
            $q4@361@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@889@176@889@767-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@360@01)
          (<
            $q3@360@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))))))
      (and
        (<= 0 $q3@360@01)
        (<
          $q3@360@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
    $q3@360@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@889@11@889@768-aux|)))
(assert (forall (($q3@360@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@360@01)
      (<
        $q3@360@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2)))))
    (forall (($q4@361@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@361@01)
          (<
            $q4@361@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                $q3@360@01))))
        (forall (($q5@362@01 Int)) (!
          (=>
            (and
              (<= 0 $q5@362@01)
              (<
                $q5@362@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                      $q3@360@01)
                    $q4@361@01))))
            (and
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                      $q3@360@01)
                    $q4@361@01)
                  $q5@362@01))
              (<=
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                      $q3@360@01)
                    $q4@361@01)
                  $q5@362@01)
                170141183460469231731687303715884105727)))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
                $q3@360@01)
              $q4@361@01)
            $q5@362@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@889@351@889@766|)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
          $q3@360@01)
        $q4@361@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@889@176@889@767|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
    $q3@360@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@889@11@889@768|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
(declare-const $t@363@01 $Snap)
(assert (= $t@363@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3))) 1000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] }
;     0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] &&
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <=
;     170141183460469231731687303715884105727)
(declare-const $t@364@01 $Snap)
(assert (= $t@364@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] } 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727)
(declare-const $q6@365@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] 0 <= $q6
(push) ; 4
; [then-branch: 240 | !(0 <= $q6@365@01) | live]
; [else-branch: 240 | 0 <= $q6@365@01 | live]
(push) ; 5
; [then-branch: 240 | !(0 <= $q6@365@01)]
(assert (not (<= 0 $q6@365@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 240 | 0 <= $q6@365@01]
(assert (<= 0 $q6@365@01))
; [eval] $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q6@365@01) (not (<= 0 $q6@365@01))))
(push) ; 4
; [then-branch: 241 | 0 <= $q6@365@01 && $q6@365@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@330@01, 3))| | live]
; [else-branch: 241 | !(0 <= $q6@365@01 && $q6@365@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@330@01, 3))|) | live]
(push) ; 5
; [then-branch: 241 | 0 <= $q6@365@01 && $q6@365@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@330@01, 3))|]
(assert (and
  (<= 0 $q6@365@01)
  (<
    $q6@365@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (>= $q6@365@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 242 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@330@01, 3))[$q6@365@01]) | live]
; [else-branch: 242 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@330@01, 3))[$q6@365@01] | live]
(push) ; 7
; [then-branch: 242 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@330@01, 3))[$q6@365@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3))
      $q6@365@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 242 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@330@01, 3))[$q6@365@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3)) $q6@365@01)))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (>= $q6@365@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3))
      $q6@365@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3))
        $q6@365@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 241 | !(0 <= $q6@365@01 && $q6@365@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@330@01, 3))|)]
(assert (not
  (and
    (<= 0 $q6@365@01)
    (<
      $q6@365@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q6@365@01)
    (<
      $q6@365@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3)))))
  (and
    (<= 0 $q6@365@01)
    (<
      $q6@365@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3))
          $q6@365@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3))
            $q6@365@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q6@365@01)
      (<
        $q6@365@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3))))))
  (and
    (<= 0 $q6@365@01)
    (<
      $q6@365@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@365@01 Int)) (!
  (and
    (or (<= 0 $q6@365@01) (not (<= 0 $q6@365@01)))
    (=>
      (and
        (<= 0 $q6@365@01)
        (<
          $q6@365@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3)))))
      (and
        (<= 0 $q6@365@01)
        (<
          $q6@365@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3))
              $q6@365@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3))
                $q6@365@01))))))
    (or
      (not
        (and
          (<= 0 $q6@365@01)
          (<
            $q6@365@01
            (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3))))))
      (and
        (<= 0 $q6@365@01)
        (<
          $q6@365@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3))
    $q6@365@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@891@11@891@346-aux|)))
(assert (forall (($q6@365@01 Int)) (!
  (=>
    (and
      (<= 0 $q6@365@01)
      (<
        $q6@365@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3))
          $q6@365@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3))
          $q6@365@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3))
    $q6@365@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@891@11@891@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==
;     10)
(declare-const $t@366@01 $Snap)
(assert (= $t@366@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10)
(declare-const $q7@367@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@367@01 Int)) (!
  (=
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@367@01))
    10)
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@367@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@892@11@892@209|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     (forall $q8: Int ::
;       { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] }
;       0 <= $q8 &&
;       $q8 <
;       |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==>
;       -170141183460469231731687303715884105728 <=
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] &&
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <=
;       170141183460469231731687303715884105727))
(declare-const $t@368@01 $Snap)
(assert (= $t@368@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727))
(declare-const $q7@369@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727)
(declare-const $q8@370@01 Int)
(push) ; 4
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] 0 <= $q8
(push) ; 5
; [then-branch: 243 | !(0 <= $q8@370@01) | live]
; [else-branch: 243 | 0 <= $q8@370@01 | live]
(push) ; 6
; [then-branch: 243 | !(0 <= $q8@370@01)]
(assert (not (<= 0 $q8@370@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 243 | 0 <= $q8@370@01]
(assert (<= 0 $q8@370@01))
; [eval] $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q8@370@01) (not (<= 0 $q8@370@01))))
(push) ; 5
; [then-branch: 244 | 0 <= $q8@370@01 && $q8@370@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@330@01, 4)), $q7@369@01)| | live]
; [else-branch: 244 | !(0 <= $q8@370@01 && $q8@370@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@330@01, 4)), $q7@369@01)|) | live]
(push) ; 6
; [then-branch: 244 | 0 <= $q8@370@01 && $q8@370@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@330@01, 4)), $q7@369@01)|]
(assert (and
  (<= 0 $q8@370@01)
  (<
    $q8@370@01
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] -170141183460469231731687303715884105728
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 7
(assert (not (>= $q8@370@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 245 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@330@01, 4)), $q7@369@01)[$q8@370@01]) | live]
; [else-branch: 245 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@330@01, 4)), $q7@369@01)[$q8@370@01] | live]
(push) ; 8
; [then-branch: 245 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@330@01, 4)), $q7@369@01)[$q8@370@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01)
      $q8@370@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 245 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@330@01, 4)), $q7@369@01)[$q8@370@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01)
    $q8@370@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 9
(assert (not (>= $q8@370@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01)
      $q8@370@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01)
        $q8@370@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 244 | !(0 <= $q8@370@01 && $q8@370@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@330@01, 4)), $q7@369@01)|)]
(assert (not
  (and
    (<= 0 $q8@370@01)
    (<
      $q8@370@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q8@370@01)
    (<
      $q8@370@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01))))
  (and
    (<= 0 $q8@370@01)
    (<
      $q8@370@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01)
          $q8@370@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01)
            $q8@370@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q8@370@01)
      (<
        $q8@370@01
        (Seq_length
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01)))))
  (and
    (<= 0 $q8@370@01)
    (<
      $q8@370@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q8@370@01 Int)) (!
  (and
    (or (<= 0 $q8@370@01) (not (<= 0 $q8@370@01)))
    (=>
      (and
        (<= 0 $q8@370@01)
        (<
          $q8@370@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01))))
      (and
        (<= 0 $q8@370@01)
        (<
          $q8@370@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01)
              $q8@370@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01)
                $q8@370@01))))))
    (or
      (not
        (and
          (<= 0 $q8@370@01)
          (<
            $q8@370@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01)))))
      (and
        (<= 0 $q8@370@01)
        (<
          $q8@370@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01))))))
  :pattern ((Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01)
    $q8@370@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@893@119@893@606-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@369@01 Int)) (!
  (forall (($q8@370@01 Int)) (!
    (and
      (or (<= 0 $q8@370@01) (not (<= 0 $q8@370@01)))
      (=>
        (and
          (<= 0 $q8@370@01)
          (<
            $q8@370@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01))))
        (and
          (<= 0 $q8@370@01)
          (<
            $q8@370@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01)))
          (or
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01)
                $q8@370@01))
            (not
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01)
                  $q8@370@01))))))
      (or
        (not
          (and
            (<= 0 $q8@370@01)
            (<
              $q8@370@01
              (Seq_length
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01)))))
        (and
          (<= 0 $q8@370@01)
          (<
            $q8@370@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01))))))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01)
      $q8@370@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@893@119@893@606-aux|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@893@11@893@607-aux|)))
(assert (forall (($q7@369@01 Int)) (!
  (forall (($q8@370@01 Int)) (!
    (=>
      (and
        (<= 0 $q8@370@01)
        (<
          $q8@370@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01))))
      (and
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01)
            $q8@370@01))
        (<=
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01)
            $q8@370@01)
          170141183460469231731687303715884105727)))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01)
      $q8@370@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@893@119@893@606|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@330@01 4)) $q7@369@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@893@11@893@607|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@371@01 $Snap)
(assert (= $t@371@01 ($Snap.combine ($Snap.first $t@371@01) ($Snap.second $t@371@01))))
(assert (= ($Snap.first $t@371@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@330@01 5))))
(assert (= ($Snap.second $t@371@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@330@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@372@01 $Snap)
(assert (= $t@372@01 ($Snap.combine ($Snap.first $t@372@01) ($Snap.second $t@372@01))))
(assert (= ($Snap.first $t@372@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@330@01 6))))
(assert (= ($Snap.second $t@372@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@330@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@373@01 $Snap)
(assert (= $t@373@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q9@374@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 246 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@330@01, 8)), $q9@374@01)) | live]
; [else-branch: 246 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@330@01, 8)), $q9@374@01) | live]
(push) ; 5
; [then-branch: 246 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@330@01, 8)), $q9@374@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 8)) $q9@374@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 246 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@330@01, 8)), $q9@374@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 8)) $q9@374@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 8)) $q9@374@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 8)) $q9@374@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@374@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 8)) $q9@374@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 8)) $q9@374@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 8)) $q9@374@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@896@11@896@345-aux|)))
(assert (forall (($q9@374@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 8)) $q9@374@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 8)) $q9@374@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 8)) $q9@374@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@896@11@896@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@375@01 $Snap)
(assert (= $t@375@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q9@376@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@376@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 8)) $q9@376@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 8)) $q9@376@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@897@11@897@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@377@01 $Snap)
(assert (= $t@377@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q10@378@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 247 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@330@01, 9)), $q10@378@01)) | live]
; [else-branch: 247 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@330@01, 9)), $q10@378@01) | live]
(push) ; 5
; [then-branch: 247 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@330@01, 9)), $q10@378@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 9)) $q10@378@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 247 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@330@01, 9)), $q10@378@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 9)) $q10@378@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 9)) $q10@378@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 9)) $q10@378@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@378@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 9)) $q10@378@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 9)) $q10@378@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 9)) $q10@378@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@898@11@898@349-aux|)))
(assert (forall (($q10@378@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 9)) $q10@378@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 9)) $q10@378@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 9)) $q10@378@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@898@11@898@349|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@379@01 $Snap)
(assert (= $t@379@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q10@380@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@380@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 9)) $q10@380@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@330@01 9)) $q10@380@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@899@11@899@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@381@01 $Snap)
(assert (= $t@381@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@330@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@382@01 $Snap)
(assert (= $t@382@01 ($Snap.combine ($Snap.first $t@382@01) ($Snap.second $t@382@01))))
(assert (= ($Snap.first $t@382@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@382@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@383@01 $Snap)
(assert (= $t@383@01 ($Snap.combine ($Snap.first $t@383@01) ($Snap.second $t@383@01))))
(assert (= ($Snap.first $t@383@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@327@01 0))))
(assert (= ($Snap.second $t@383@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@327@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@384@01 $Snap)
(assert (= $t@384@01 ($Snap.combine ($Snap.first $t@384@01) ($Snap.second $t@384@01))))
(assert (= ($Snap.first $t@384@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@327@01 1))))
(assert (= ($Snap.second $t@384@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@327@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@385@01 $Snap)
(assert (= $t@385@01 ($Snap.combine ($Snap.first $t@385@01) ($Snap.second $t@385@01))))
(assert (= ($Snap.first $t@385@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@327@01 2))))
(assert (= ($Snap.second $t@385@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@327@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@386@01 $Snap)
(assert (= $t@386@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@327@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@387@01 $Snap)
(assert (= $t@387@01 ($Snap.combine ($Snap.first $t@387@01) ($Snap.second $t@387@01))))
(assert (= ($Snap.first $t@387@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@327@01 4))))
(assert (= ($Snap.second $t@387@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@327@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@388@01 $Snap)
(assert (= $t@388@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@327@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@389@01 $Snap)
(assert (= $t@389@01 ($Snap.combine ($Snap.first $t@389@01) ($Snap.second $t@389@01))))
(assert (= ($Snap.first $t@389@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@326@01 0))))
(assert (= ($Snap.second $t@389@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@326@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@390@01 $Snap)
(assert (= $t@390@01 ($Snap.combine ($Snap.first $t@390@01) ($Snap.second $t@390@01))))
(assert (= ($Snap.first $t@390@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@326@01 1))))
(assert (= ($Snap.second $t@390@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@326@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@391@01 $Snap)
(assert (= $t@391@01 ($Snap.combine ($Snap.first $t@391@01) ($Snap.second $t@391@01))))
(assert (= ($Snap.first $t@391@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@326@01 2))))
(assert (= ($Snap.second $t@391@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@326@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@392@01 $Snap)
(assert (= $t@392@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@326@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@393@01 $Snap)
(assert (= $t@393@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@326@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@394@01 $Snap)
(assert (= $t@394@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@395@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc(self, 3)): Seq[Int])
(declare-const $t@396@01 $Snap)
(assert (= $t@396@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@397@01 $Snap)
(assert (= $t@397@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@326@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] !(0 <= 5 && 5 < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= 5 && 5 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= 5
(set-option :timeout 0)
(push) ; 3
; [then-branch: 248 | False | live]
; [else-branch: 248 | True | live]
(push) ; 4
; [then-branch: 248 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 248 | True]
; [eval] 5 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (< 5 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 249 | !(5 < |$struct_get[Seq[Int]]($struct_loc[Int](self@330@01, 0))|) | dead]
; [else-branch: 249 | 5 < |$struct_get[Seq[Int]]($struct_loc[Int](self@330@01, 0))| | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 249 | 5 < |$struct_get[Seq[Int]]($struct_loc[Int](self@330@01, 0))|]
(assert (< 5 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0)))))
(pop) ; 3
; [eval] !!(0 <= 5 && 5 < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] !(0 <= 5 && 5 < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= 5 && 5 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= 5
(push) ; 3
; [then-branch: 250 | False | live]
; [else-branch: 250 | True | live]
(push) ; 4
; [then-branch: 250 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 250 | True]
; [eval] 5 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (not (< 5 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0)))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< 5 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 251 | 5 < |$struct_get[Seq[Int]]($struct_loc[Int](self@330@01, 0))| | live]
; [else-branch: 251 | !(5 < |$struct_get[Seq[Int]]($struct_loc[Int](self@330@01, 0))|) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 251 | 5 < |$struct_get[Seq[Int]]($struct_loc[Int](self@330@01, 0))|]
(assert (< 5 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0)))))
; [exec]
; l$a := $wrap(($struct_get($struct_loc(self, 0)): Seq[Int])[5])
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Seq[Int])[5])
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[5]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(declare-const l$a@398@01 $Int)
(assert (=
  l$a@398@01
  ($wrap<$Int> (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 0))
    5))))
; [eval] !(0 <= 4 && 4 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] 0 <= 4 && 4 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= 4
(push) ; 4
; [then-branch: 252 | False | live]
; [else-branch: 252 | True | live]
(push) ; 5
; [then-branch: 252 | False]
(assert false)
(pop) ; 5
(push) ; 5
; [else-branch: 252 | True]
; [eval] 4 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (< 4 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 253 | !(4 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))|) | dead]
; [else-branch: 253 | 4 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))| | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 253 | 4 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))|]
(assert (< 4 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1)))))
(pop) ; 4
; [eval] !!(0 <= 4 && 4 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] !(0 <= 4 && 4 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] 0 <= 4 && 4 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= 4
(push) ; 4
; [then-branch: 254 | False | live]
; [else-branch: 254 | True | live]
(push) ; 5
; [then-branch: 254 | False]
(assert false)
(pop) ; 5
(push) ; 5
; [else-branch: 254 | True]
; [eval] 4 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (<
    4
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1)))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< 4 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 255 | 4 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))| | live]
; [else-branch: 255 | !(4 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))|) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 255 | 4 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))|]
(assert (< 4 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1)))))
; [eval] !(0 <= 7 && 7 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4]|)
; [eval] 0 <= 7 && 7 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4]|
; [eval] 0 <= 7
(push) ; 5
; [then-branch: 256 | False | live]
; [else-branch: 256 | True | live]
(push) ; 6
; [then-branch: 256 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 256 | True]
; [eval] 7 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  7
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1)) 4)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 257 | !(7 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4]|) | dead]
; [else-branch: 257 | 7 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4]| | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 257 | 7 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4]|]
(assert (<
  7
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1)) 4))))
(pop) ; 5
; [eval] !!(0 <= 7 && 7 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4]|)
; [eval] !(0 <= 7 && 7 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4]|)
; [eval] 0 <= 7 && 7 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4]|
; [eval] 0 <= 7
(push) ; 5
; [then-branch: 258 | False | live]
; [else-branch: 258 | True | live]
(push) ; 6
; [then-branch: 258 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 258 | True]
; [eval] 7 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    7
    (Seq_length
      (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1)) 4))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (<
  7
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1)) 4)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 259 | 7 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4]| | live]
; [else-branch: 259 | !(7 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4]|) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 259 | 7 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4]|]
(assert (<
  7
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1)) 4))))
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] < -170141183460469231731687303715884105728 || $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] > 170141183460469231731687303715884105727
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] < -170141183460469231731687303715884105728
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7]
; [eval] $unwrap(l$a)
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
; [eval] -170141183460469231731687303715884105728
(push) ; 6
; [then-branch: 260 | $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] < -170141183460469231731687303715884105728 | live]
; [else-branch: 260 | !($unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] < -170141183460469231731687303715884105728) | live]
(push) ; 7
; [then-branch: 260 | $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] < -170141183460469231731687303715884105728]
(assert (<
  (+
    ($unwrap<Int> l$a@398@01)
    (Seq_index
      (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1)) 4)
      7))
  (- 0 170141183460469231731687303715884105728)))
(pop) ; 7
(push) ; 7
; [else-branch: 260 | !($unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] < -170141183460469231731687303715884105728)]
(assert (not
  (<
    (+
      ($unwrap<Int> l$a@398@01)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
          4)
        7))
    (- 0 170141183460469231731687303715884105728))))
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] > 170141183460469231731687303715884105727
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7]
; [eval] $unwrap(l$a)
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      (+
        ($unwrap<Int> l$a@398@01)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
            4)
          7))
      (- 0 170141183460469231731687303715884105728)))
  (<
    (+
      ($unwrap<Int> l$a@398@01)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
          4)
        7))
    (- 0 170141183460469231731687303715884105728))))
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      (+
        ($unwrap<Int> l$a@398@01)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
            4)
          7))
      (- 0 170141183460469231731687303715884105728))
    (>
      (+
        ($unwrap<Int> l$a@398@01)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
            4)
          7))
      170141183460469231731687303715884105727)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (or
  (<
    (+
      ($unwrap<Int> l$a@398@01)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
          4)
        7))
    (- 0 170141183460469231731687303715884105728))
  (>
    (+
      ($unwrap<Int> l$a@398@01)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
          4)
        7))
    170141183460469231731687303715884105727))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 261 | $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] < -170141183460469231731687303715884105728 || $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] > 170141183460469231731687303715884105727 | live]
; [else-branch: 261 | !($unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] < -170141183460469231731687303715884105728 || $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] > 170141183460469231731687303715884105727) | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 261 | $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] < -170141183460469231731687303715884105728 || $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] > 170141183460469231731687303715884105727]
(assert (or
  (<
    (+
      ($unwrap<Int> l$a@398@01)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
          4)
        7))
    (- 0 170141183460469231731687303715884105728))
  (>
    (+
      ($unwrap<Int> l$a@398@01)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
          4)
        7))
    170141183460469231731687303715884105727)))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 262 | True | live]
; [else-branch: 262 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 262 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@399@01 $Snap)
(assert (= $t@399@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@342@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@400@01 $Struct)
(assert (=
  self@400@01
  ($struct_set<$Struct> self@330@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@330@01 5))
    l$havoc$1@342@01))))
; [exec]
; $contracts := l$havoc$2
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 8
(assert (not (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@400@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@400@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3))))
(pop) ; 7
; [then-branch: 263 | False | dead]
; [else-branch: 263 | True | live]
(push) ; 7
; [else-branch: 263 | True]
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 261 | !($unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] < -170141183460469231731687303715884105728 || $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] > 170141183460469231731687303715884105727)]
(assert (not
  (or
    (<
      (+
        ($unwrap<Int> l$a@398@01)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
            4)
          7))
      (- 0 170141183460469231731687303715884105728))
    (>
      (+
        ($unwrap<Int> l$a@398@01)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
            4)
          7))
      170141183460469231731687303715884105727))))
(pop) ; 6
; [eval] !($unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] < -170141183460469231731687303715884105728 || $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] > 170141183460469231731687303715884105727)
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] < -170141183460469231731687303715884105728 || $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] > 170141183460469231731687303715884105727
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] < -170141183460469231731687303715884105728
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7]
; [eval] $unwrap(l$a)
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
; [eval] -170141183460469231731687303715884105728
(push) ; 6
; [then-branch: 264 | $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] < -170141183460469231731687303715884105728 | live]
; [else-branch: 264 | !($unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] < -170141183460469231731687303715884105728) | live]
(push) ; 7
; [then-branch: 264 | $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] < -170141183460469231731687303715884105728]
(assert (<
  (+
    ($unwrap<Int> l$a@398@01)
    (Seq_index
      (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1)) 4)
      7))
  (- 0 170141183460469231731687303715884105728)))
(pop) ; 7
(push) ; 7
; [else-branch: 264 | !($unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] < -170141183460469231731687303715884105728)]
(assert (not
  (<
    (+
      ($unwrap<Int> l$a@398@01)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
          4)
        7))
    (- 0 170141183460469231731687303715884105728))))
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] > 170141183460469231731687303715884105727
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7]
; [eval] $unwrap(l$a)
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (or
  (<
    (+
      ($unwrap<Int> l$a@398@01)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
          4)
        7))
    (- 0 170141183460469231731687303715884105728))
  (>
    (+
      ($unwrap<Int> l$a@398@01)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
          4)
        7))
    170141183460469231731687303715884105727))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      (+
        ($unwrap<Int> l$a@398@01)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
            4)
          7))
      (- 0 170141183460469231731687303715884105728))
    (>
      (+
        ($unwrap<Int> l$a@398@01)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
            4)
          7))
      170141183460469231731687303715884105727)))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 265 | !($unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] < -170141183460469231731687303715884105728 || $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] > 170141183460469231731687303715884105727) | live]
; [else-branch: 265 | $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] < -170141183460469231731687303715884105728 || $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] > 170141183460469231731687303715884105727 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 265 | !($unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] < -170141183460469231731687303715884105728 || $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] > 170141183460469231731687303715884105727)]
(assert (not
  (or
    (<
      (+
        ($unwrap<Int> l$a@398@01)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
            4)
          7))
      (- 0 170141183460469231731687303715884105728))
    (>
      (+
        ($unwrap<Int> l$a@398@01)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
            4)
          7))
      170141183460469231731687303715884105727))))
; [eval] !(0 <= 0 && 0 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|)
; [eval] 0 <= 0 && 0 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= 0
(push) ; 7
; [then-branch: 266 | False | live]
; [else-branch: 266 | True | live]
(push) ; 8
; [then-branch: 266 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 266 | True]
; [eval] 0 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  0
  (Seq_length ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 267 | !(0 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))|) | dead]
; [else-branch: 267 | 0 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))| | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 267 | 0 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))|]
(assert (<
  0
  (Seq_length ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2)))))
(pop) ; 7
; [eval] !!(0 <= 0 && 0 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|)
; [eval] !(0 <= 0 && 0 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|)
; [eval] 0 <= 0 && 0 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= 0
(push) ; 7
; [then-branch: 268 | False | live]
; [else-branch: 268 | True | live]
(push) ; 8
; [then-branch: 268 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 268 | True]
; [eval] 0 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (<
    0
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (<
  0
  (Seq_length ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 269 | 0 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))| | live]
; [else-branch: 269 | !(0 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))|) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 269 | 0 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))|]
(assert (<
  0
  (Seq_length ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2)))))
; [eval] !(0 <= 1 && 1 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0]|)
; [eval] 0 <= 1 && 1 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0]|
; [eval] 0 <= 1
(push) ; 8
; [then-branch: 270 | False | live]
; [else-branch: 270 | True | live]
(push) ; 9
; [then-branch: 270 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 270 | True]
; [eval] 1 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (<
  1
  (Seq_length
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
      0)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 271 | !(1 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0]|) | dead]
; [else-branch: 271 | 1 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0]| | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 271 | 1 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0]|]
(assert (<
  1
  (Seq_length
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
      0))))
(pop) ; 8
; [eval] !!(0 <= 1 && 1 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0]|)
; [eval] !(0 <= 1 && 1 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0]|)
; [eval] 0 <= 1 && 1 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0]|
; [eval] 0 <= 1
(push) ; 8
; [then-branch: 272 | False | live]
; [else-branch: 272 | True | live]
(push) ; 9
; [then-branch: 272 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 272 | True]
; [eval] 1 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (<
    1
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
        0))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (<
  1
  (Seq_length
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
      0)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 273 | 1 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0]| | live]
; [else-branch: 273 | !(1 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0]|) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 273 | 1 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0]|]
(assert (<
  1
  (Seq_length
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
      0))))
; [eval] !(0 <= 0 && 0 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1]|)
; [eval] 0 <= 0 && 0 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1]|
; [eval] 0 <= 0
(push) ; 9
; [then-branch: 274 | False | live]
; [else-branch: 274 | True | live]
(push) ; 10
; [then-branch: 274 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 274 | True]
; [eval] 0 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  0
  (Seq_length
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
        0)
      1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 275 | !(0 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1]|) | dead]
; [else-branch: 275 | 0 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1]| | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 275 | 0 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1]|]
(assert (<
  0
  (Seq_length
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
        0)
      1))))
(pop) ; 9
; [eval] !!(0 <= 0 && 0 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1]|)
; [eval] !(0 <= 0 && 0 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1]|)
; [eval] 0 <= 0 && 0 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1]|
; [eval] 0 <= 0
(push) ; 9
; [then-branch: 276 | False | live]
; [else-branch: 276 | True | live]
(push) ; 10
; [then-branch: 276 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 276 | True]
; [eval] 0 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (<
    0
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
          0)
        1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  0
  (Seq_length
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
        0)
      1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 277 | 0 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1]| | live]
; [else-branch: 277 | !(0 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1]|) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 277 | 0 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1]|]
(assert (<
  0
  (Seq_length
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
        0)
      1))))
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] + ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1][0] < -170141183460469231731687303715884105728 || $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] + ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1][0] > 170141183460469231731687303715884105727
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] + ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1][0] < -170141183460469231731687303715884105728
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] + ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1][0]
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7]
; [eval] $unwrap(l$a)
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1][0]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
; [eval] -170141183460469231731687303715884105728
(push) ; 10
; [then-branch: 278 | $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] + $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1][0] < -170141183460469231731687303715884105728 | live]
; [else-branch: 278 | !($unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] + $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1][0] < -170141183460469231731687303715884105728) | live]
(push) ; 11
; [then-branch: 278 | $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] + $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1][0] < -170141183460469231731687303715884105728]
(assert (<
  (+
    (+
      ($unwrap<Int> l$a@398@01)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
          4)
        7))
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
          0)
        1)
      0))
  (- 0 170141183460469231731687303715884105728)))
(pop) ; 11
(push) ; 11
; [else-branch: 278 | !($unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] + $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1][0] < -170141183460469231731687303715884105728)]
(assert (not
  (<
    (+
      (+
        ($unwrap<Int> l$a@398@01)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
            4)
          7))
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
            0)
          1)
        0))
    (- 0 170141183460469231731687303715884105728))))
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] + ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1][0] > 170141183460469231731687303715884105727
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] + ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1][0]
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7]
; [eval] $unwrap(l$a)
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1][0]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (<
      (+
        (+
          ($unwrap<Int> l$a@398@01)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
              4)
            7))
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
              0)
            1)
          0))
      (- 0 170141183460469231731687303715884105728)))
  (<
    (+
      (+
        ($unwrap<Int> l$a@398@01)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
            4)
          7))
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
            0)
          1)
        0))
    (- 0 170141183460469231731687303715884105728))))
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      (+
        (+
          ($unwrap<Int> l$a@398@01)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
              4)
            7))
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
              0)
            1)
          0))
      (- 0 170141183460469231731687303715884105728))
    (>
      (+
        (+
          ($unwrap<Int> l$a@398@01)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
              4)
            7))
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
              0)
            1)
          0))
      170141183460469231731687303715884105727)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (or
  (<
    (+
      (+
        ($unwrap<Int> l$a@398@01)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
            4)
          7))
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
            0)
          1)
        0))
    (- 0 170141183460469231731687303715884105728))
  (>
    (+
      (+
        ($unwrap<Int> l$a@398@01)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
            4)
          7))
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
            0)
          1)
        0))
    170141183460469231731687303715884105727))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 279 | $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] + $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1][0] < -170141183460469231731687303715884105728 || $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] + $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1][0] > 170141183460469231731687303715884105727 | live]
; [else-branch: 279 | !($unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] + $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1][0] < -170141183460469231731687303715884105728 || $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] + $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1][0] > 170141183460469231731687303715884105727) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 279 | $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] + $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1][0] < -170141183460469231731687303715884105728 || $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] + $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1][0] > 170141183460469231731687303715884105727]
(assert (or
  (<
    (+
      (+
        ($unwrap<Int> l$a@398@01)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
            4)
          7))
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
            0)
          1)
        0))
    (- 0 170141183460469231731687303715884105728))
  (>
    (+
      (+
        ($unwrap<Int> l$a@398@01)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
            4)
          7))
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
            0)
          1)
        0))
    170141183460469231731687303715884105727)))
; [exec]
; $overflow := true
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [eval] !$succ
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 280 | True | live]
; [else-branch: 280 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 280 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@401@01 $Snap)
(assert (= $t@401@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@342@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@402@01 $Struct)
(assert (=
  self@402@01
  ($struct_set<$Struct> self@330@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@330@01 5))
    l$havoc$1@342@01))))
; [exec]
; $contracts := l$havoc$2
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 12
(assert (not (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@402@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@402@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3))))
(pop) ; 11
; [then-branch: 281 | False | dead]
; [else-branch: 281 | True | live]
(push) ; 11
; [else-branch: 281 | True]
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 279 | !($unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] + $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1][0] < -170141183460469231731687303715884105728 || $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] + $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1][0] > 170141183460469231731687303715884105727)]
(assert (not
  (or
    (<
      (+
        (+
          ($unwrap<Int> l$a@398@01)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
              4)
            7))
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
              0)
            1)
          0))
      (- 0 170141183460469231731687303715884105728))
    (>
      (+
        (+
          ($unwrap<Int> l$a@398@01)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
              4)
            7))
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
              0)
            1)
          0))
      170141183460469231731687303715884105727))))
(pop) ; 10
; [eval] !($unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] + ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1][0] < -170141183460469231731687303715884105728 || $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] + ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1][0] > 170141183460469231731687303715884105727)
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] + ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1][0] < -170141183460469231731687303715884105728 || $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] + ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1][0] > 170141183460469231731687303715884105727
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] + ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1][0] < -170141183460469231731687303715884105728
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] + ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1][0]
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7]
; [eval] $unwrap(l$a)
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1][0]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
; [eval] -170141183460469231731687303715884105728
(push) ; 10
; [then-branch: 282 | $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] + $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1][0] < -170141183460469231731687303715884105728 | live]
; [else-branch: 282 | !($unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] + $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1][0] < -170141183460469231731687303715884105728) | live]
(push) ; 11
; [then-branch: 282 | $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] + $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1][0] < -170141183460469231731687303715884105728]
(assert (<
  (+
    (+
      ($unwrap<Int> l$a@398@01)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
          4)
        7))
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
          0)
        1)
      0))
  (- 0 170141183460469231731687303715884105728)))
(pop) ; 11
(push) ; 11
; [else-branch: 282 | !($unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] + $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1][0] < -170141183460469231731687303715884105728)]
(assert (not
  (<
    (+
      (+
        ($unwrap<Int> l$a@398@01)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
            4)
          7))
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
            0)
          1)
        0))
    (- 0 170141183460469231731687303715884105728))))
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] + ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1][0] > 170141183460469231731687303715884105727
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] + ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1][0]
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7]
; [eval] $unwrap(l$a)
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1][0]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (or
  (<
    (+
      (+
        ($unwrap<Int> l$a@398@01)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
            4)
          7))
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
            0)
          1)
        0))
    (- 0 170141183460469231731687303715884105728))
  (>
    (+
      (+
        ($unwrap<Int> l$a@398@01)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
            4)
          7))
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
            0)
          1)
        0))
    170141183460469231731687303715884105727))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (or
    (<
      (+
        (+
          ($unwrap<Int> l$a@398@01)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
              4)
            7))
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
              0)
            1)
          0))
      (- 0 170141183460469231731687303715884105728))
    (>
      (+
        (+
          ($unwrap<Int> l$a@398@01)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
              4)
            7))
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
              0)
            1)
          0))
      170141183460469231731687303715884105727)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 283 | !($unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] + $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1][0] < -170141183460469231731687303715884105728 || $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] + $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1][0] > 170141183460469231731687303715884105727) | live]
; [else-branch: 283 | $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] + $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1][0] < -170141183460469231731687303715884105728 || $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] + $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1][0] > 170141183460469231731687303715884105727 | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 283 | !($unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] + $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1][0] < -170141183460469231731687303715884105728 || $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] + $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1][0] > 170141183460469231731687303715884105727)]
(assert (not
  (or
    (<
      (+
        (+
          ($unwrap<Int> l$a@398@01)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
              4)
            7))
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
              0)
            1)
          0))
      (- 0 170141183460469231731687303715884105728))
    (>
      (+
        (+
          ($unwrap<Int> l$a@398@01)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
              4)
            7))
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
              0)
            1)
          0))
      170141183460469231731687303715884105727))))
; [exec]
; $res := $unwrap($wrap($unwrap(l$a) +
;   ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] +
;   ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1][0]))
; [eval] $unwrap($wrap($unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] + ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1][0]))
; [eval] $wrap($unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] + ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1][0])
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7] + ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1][0]
; [eval] $unwrap(l$a) + ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7]
; [eval] $unwrap(l$a)
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4][7]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[4]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1][0]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0][1]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[0]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(declare-const $res@403@01 Int)
(assert (=
  $res@403@01
  ($unwrap<Int> ($wrap<$Int> (+
    (+
      ($unwrap<Int> l$a@398@01)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
          4)
        7))
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
          0)
        1)
      0))))))
; [exec]
; label return
; [exec]
; label end
; [eval] !$succ
; [then-branch: 284 | False | dead]
; [else-branch: 284 | True | live]
(push) ; 11
; [else-branch: 284 | True]
(pop) ; 11
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 285 | True | live]
; [else-branch: 285 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 285 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@404@01 $Snap)
(assert (= $t@404@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@342@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@405@01 $Struct)
(assert (=
  self@405@01
  ($struct_set<$Struct> self@330@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@330@01 5))
    l$havoc$1@342@01))))
; [exec]
; $contracts := l$havoc$2
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 12
(assert (not (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@405@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@405@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@330@01 3))))
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 283 | $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] + $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1][0] < -170141183460469231731687303715884105728 || $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] + $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@330@01, 2))[0][1][0] > 170141183460469231731687303715884105727]
(assert (or
  (<
    (+
      (+
        ($unwrap<Int> l$a@398@01)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
            4)
          7))
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
            0)
          1)
        0))
    (- 0 170141183460469231731687303715884105728))
  (>
    (+
      (+
        ($unwrap<Int> l$a@398@01)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
            4)
          7))
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@330@01 2))
            0)
          1)
        0))
    170141183460469231731687303715884105727)))
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 265 | $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] < -170141183460469231731687303715884105728 || $unwrap[Int](l$a@398@01) + $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@330@01, 1))[4][7] > 170141183460469231731687303715884105727]
(assert (or
  (<
    (+
      ($unwrap<Int> l$a@398@01)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
          4)
        7))
    (- 0 170141183460469231731687303715884105728))
  (>
    (+
      ($unwrap<Int> l$a@398@01)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@330@01 1))
          4)
        7))
    170141183460469231731687303715884105727)))
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$array_write ----------
(declare-const $succ@406@01 Bool)
(declare-const $res@407@01 Int)
(declare-const $succ@408@01 Bool)
(declare-const $res@409@01 Int)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@410@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@411@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@412@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@413@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@414@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@415@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@416@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@417@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@418@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@419@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@420@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@421@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@422@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@423@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@424@01 Int)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@425@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@426@01 $Map<Int~_$Struct>)
; [exec]
; inhale |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
(declare-const $t@427@01 $Snap)
(assert (= $t@427@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0))) 12))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] }
;     0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] &&
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <=
;     170141183460469231731687303715884105727)
(declare-const $t@428@01 $Snap)
(assert (= $t@428@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] } 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@429@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 286 | !(0 <= $q0@429@01) | live]
; [else-branch: 286 | 0 <= $q0@429@01 | live]
(push) ; 5
; [then-branch: 286 | !(0 <= $q0@429@01)]
(assert (not (<= 0 $q0@429@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 286 | 0 <= $q0@429@01]
(assert (<= 0 $q0@429@01))
; [eval] $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@429@01) (not (<= 0 $q0@429@01))))
(push) ; 4
; [then-branch: 287 | 0 <= $q0@429@01 && $q0@429@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@414@01, 0))| | live]
; [else-branch: 287 | !(0 <= $q0@429@01 && $q0@429@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@414@01, 0))|) | live]
(push) ; 5
; [then-branch: 287 | 0 <= $q0@429@01 && $q0@429@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@414@01, 0))|]
(assert (and
  (<= 0 $q0@429@01)
  (<
    $q0@429@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (>= $q0@429@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 288 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@414@01, 0))[$q0@429@01]) | live]
; [else-branch: 288 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@414@01, 0))[$q0@429@01] | live]
(push) ; 7
; [then-branch: 288 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@414@01, 0))[$q0@429@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0))
      $q0@429@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 288 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@414@01, 0))[$q0@429@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0)) $q0@429@01)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (>= $q0@429@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0))
      $q0@429@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0))
        $q0@429@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 287 | !(0 <= $q0@429@01 && $q0@429@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@414@01, 0))|)]
(assert (not
  (and
    (<= 0 $q0@429@01)
    (<
      $q0@429@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q0@429@01)
    (<
      $q0@429@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0)))))
  (and
    (<= 0 $q0@429@01)
    (<
      $q0@429@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0))
          $q0@429@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0))
            $q0@429@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q0@429@01)
      (<
        $q0@429@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0))))))
  (and
    (<= 0 $q0@429@01)
    (<
      $q0@429@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@429@01 Int)) (!
  (and
    (or (<= 0 $q0@429@01) (not (<= 0 $q0@429@01)))
    (=>
      (and
        (<= 0 $q0@429@01)
        (<
          $q0@429@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0)))))
      (and
        (<= 0 $q0@429@01)
        (<
          $q0@429@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0))
              $q0@429@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0))
                $q0@429@01))))))
    (or
      (not
        (and
          (<= 0 $q0@429@01)
          (<
            $q0@429@01
            (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0))))))
      (and
        (<= 0 $q0@429@01)
        (<
          $q0@429@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0))
    $q0@429@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1004@11@1004@346-aux|)))
(assert (forall (($q0@429@01 Int)) (!
  (=>
    (and
      (<= 0 $q0@429@01)
      (<
        $q0@429@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0))
          $q0@429@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0))
          $q0@429@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0))
    $q0@429@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1004@11@1004@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
(declare-const $t@430@01 $Snap)
(assert (= $t@430@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(assert (= (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $t@431@01 $Snap)
(assert (= $t@431@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $q1@432@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 289 | !(0 <= $q1@432@01) | live]
; [else-branch: 289 | 0 <= $q1@432@01 | live]
(push) ; 5
; [then-branch: 289 | !(0 <= $q1@432@01)]
(assert (not (<= 0 $q1@432@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 289 | 0 <= $q1@432@01]
(assert (<= 0 $q1@432@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@432@01) (not (<= 0 $q1@432@01))))
(push) ; 4
; [then-branch: 290 | 0 <= $q1@432@01 && $q1@432@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@414@01, 1))| | live]
; [else-branch: 290 | !(0 <= $q1@432@01 && $q1@432@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@414@01, 1))|) | live]
(push) ; 5
; [then-branch: 290 | 0 <= $q1@432@01 && $q1@432@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@414@01, 1))|]
(assert (and
  (<= 0 $q1@432@01)
  (<
    $q1@432@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))))))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 6
(assert (not (>= $q1@432@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 290 | !(0 <= $q1@432@01 && $q1@432@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@414@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@432@01)
    (<
      $q1@432@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@432@01)
      (<
        $q1@432@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))))))
  (and
    (<= 0 $q1@432@01)
    (<
      $q1@432@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@432@01 Int)) (!
  (and
    (or (<= 0 $q1@432@01) (not (<= 0 $q1@432@01)))
    (or
      (not
        (and
          (<= 0 $q1@432@01)
          (<
            $q1@432@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))))))
      (and
        (<= 0 $q1@432@01)
        (<
          $q1@432@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
    $q1@432@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1006@11@1006@228-aux|)))
(assert (forall (($q1@432@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@432@01)
      (<
        $q1@432@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
          $q1@432@01))
      12))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
    $q1@432@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1006@11@1006@228|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     (forall $q2: Int ::
;       { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] }
;       0 <= $q2 &&
;       $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==>
;       -170141183460469231731687303715884105728 <=
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] &&
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <=
;       170141183460469231731687303715884105727))
(declare-const $t@433@01 $Snap)
(assert (= $t@433@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727))
(declare-const $q1@434@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 291 | !(0 <= $q1@434@01) | live]
; [else-branch: 291 | 0 <= $q1@434@01 | live]
(push) ; 5
; [then-branch: 291 | !(0 <= $q1@434@01)]
(assert (not (<= 0 $q1@434@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 291 | 0 <= $q1@434@01]
(assert (<= 0 $q1@434@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@434@01) (not (<= 0 $q1@434@01))))
(push) ; 4
; [then-branch: 292 | 0 <= $q1@434@01 && $q1@434@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@414@01, 1))| | live]
; [else-branch: 292 | !(0 <= $q1@434@01 && $q1@434@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@414@01, 1))|) | live]
(push) ; 5
; [then-branch: 292 | 0 <= $q1@434@01 && $q1@434@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@414@01, 1))|]
(assert (and
  (<= 0 $q1@434@01)
  (<
    $q1@434@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))))))
; [eval] (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
(declare-const $q2@435@01 Int)
(push) ; 6
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] 0 <= $q2
(push) ; 7
; [then-branch: 293 | !(0 <= $q2@435@01) | live]
; [else-branch: 293 | 0 <= $q2@435@01 | live]
(push) ; 8
; [then-branch: 293 | !(0 <= $q2@435@01)]
(assert (not (<= 0 $q2@435@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 293 | 0 <= $q2@435@01]
(assert (<= 0 $q2@435@01))
; [eval] $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@434@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q2@435@01) (not (<= 0 $q2@435@01))))
(push) ; 7
; [then-branch: 294 | 0 <= $q2@435@01 && $q2@435@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@414@01, 1))[$q1@434@01]| | live]
; [else-branch: 294 | !(0 <= $q2@435@01 && $q2@435@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@414@01, 1))[$q1@434@01]|) | live]
(push) ; 8
; [then-branch: 294 | 0 <= $q2@435@01 && $q2@435@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@414@01, 1))[$q1@434@01]|]
(assert (and
  (<= 0 $q2@435@01)
  (<
    $q2@435@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
        $q1@434@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@434@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q2@435@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 295 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@414@01, 1))[$q1@434@01][$q2@435@01]) | live]
; [else-branch: 295 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@414@01, 1))[$q1@434@01][$q2@435@01] | live]
(push) ; 10
; [then-branch: 295 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@414@01, 1))[$q1@434@01][$q2@435@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
        $q1@434@01)
      $q2@435@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 295 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@414@01, 1))[$q1@434@01][$q2@435@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
      $q1@434@01)
    $q2@435@01)))
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 11
(assert (not (>= $q1@434@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= $q2@435@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
        $q1@434@01)
      $q2@435@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
          $q1@434@01)
        $q2@435@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 294 | !(0 <= $q2@435@01 && $q2@435@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@414@01, 1))[$q1@434@01]|)]
(assert (not
  (and
    (<= 0 $q2@435@01)
    (<
      $q2@435@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
          $q1@434@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q2@435@01)
    (<
      $q2@435@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
          $q1@434@01))))
  (and
    (<= 0 $q2@435@01)
    (<
      $q2@435@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
          $q1@434@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
            $q1@434@01)
          $q2@435@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
              $q1@434@01)
            $q2@435@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q2@435@01)
      (<
        $q2@435@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
            $q1@434@01)))))
  (and
    (<= 0 $q2@435@01)
    (<
      $q2@435@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
          $q1@434@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@435@01 Int)) (!
  (and
    (or (<= 0 $q2@435@01) (not (<= 0 $q2@435@01)))
    (=>
      (and
        (<= 0 $q2@435@01)
        (<
          $q2@435@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
              $q1@434@01))))
      (and
        (<= 0 $q2@435@01)
        (<
          $q2@435@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
              $q1@434@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
                $q1@434@01)
              $q2@435@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
                  $q1@434@01)
                $q2@435@01))))))
    (or
      (not
        (and
          (<= 0 $q2@435@01)
          (<
            $q2@435@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
                $q1@434@01)))))
      (and
        (<= 0 $q2@435@01)
        (<
          $q2@435@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
              $q1@434@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
      $q1@434@01)
    $q2@435@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1007@166@1007@541-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 292 | !(0 <= $q1@434@01 && $q1@434@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@414@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@434@01)
    (<
      $q1@434@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q1@434@01)
    (<
      $q1@434@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1)))))
  (and
    (<= 0 $q1@434@01)
    (<
      $q1@434@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))))
    (forall (($q2@435@01 Int)) (!
      (and
        (or (<= 0 $q2@435@01) (not (<= 0 $q2@435@01)))
        (=>
          (and
            (<= 0 $q2@435@01)
            (<
              $q2@435@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
                  $q1@434@01))))
          (and
            (<= 0 $q2@435@01)
            (<
              $q2@435@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
                  $q1@434@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
                    $q1@434@01)
                  $q2@435@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
                      $q1@434@01)
                    $q2@435@01))))))
        (or
          (not
            (and
              (<= 0 $q2@435@01)
              (<
                $q2@435@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
                    $q1@434@01)))))
          (and
            (<= 0 $q2@435@01)
            (<
              $q2@435@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
                  $q1@434@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
          $q1@434@01)
        $q2@435@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1007@166@1007@541-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@434@01)
      (<
        $q1@434@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))))))
  (and
    (<= 0 $q1@434@01)
    (<
      $q1@434@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@434@01 Int)) (!
  (and
    (or (<= 0 $q1@434@01) (not (<= 0 $q1@434@01)))
    (=>
      (and
        (<= 0 $q1@434@01)
        (<
          $q1@434@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1)))))
      (and
        (<= 0 $q1@434@01)
        (<
          $q1@434@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))))
        (forall (($q2@435@01 Int)) (!
          (and
            (or (<= 0 $q2@435@01) (not (<= 0 $q2@435@01)))
            (=>
              (and
                (<= 0 $q2@435@01)
                (<
                  $q2@435@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
                      $q1@434@01))))
              (and
                (<= 0 $q2@435@01)
                (<
                  $q2@435@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
                      $q1@434@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
                        $q1@434@01)
                      $q2@435@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
                          $q1@434@01)
                        $q2@435@01))))))
            (or
              (not
                (and
                  (<= 0 $q2@435@01)
                  (<
                    $q2@435@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
                        $q1@434@01)))))
              (and
                (<= 0 $q2@435@01)
                (<
                  $q2@435@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
                      $q1@434@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
              $q1@434@01)
            $q2@435@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1007@166@1007@541-aux|))))
    (or
      (not
        (and
          (<= 0 $q1@434@01)
          (<
            $q1@434@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))))))
      (and
        (<= 0 $q1@434@01)
        (<
          $q1@434@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
    $q1@434@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1007@11@1007@542-aux|)))
(assert (forall (($q1@434@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@434@01)
      (<
        $q1@434@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1)))))
    (forall (($q2@435@01 Int)) (!
      (=>
        (and
          (<= 0 $q2@435@01)
          (<
            $q2@435@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
                $q1@434@01))))
        (and
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
                $q1@434@01)
              $q2@435@01))
          (<=
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
                $q1@434@01)
              $q2@435@01)
            170141183460469231731687303715884105727)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
          $q1@434@01)
        $q2@435@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1007@166@1007@541|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@414@01 1))
    $q1@434@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1007@11@1007@542|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
(declare-const $t@436@01 $Snap)
(assert (= $t@436@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(assert (=
  (Seq_length ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2)))
  2))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $t@437@01 $Snap)
(assert (= $t@437@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $q3@438@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 296 | !(0 <= $q3@438@01) | live]
; [else-branch: 296 | 0 <= $q3@438@01 | live]
(push) ; 5
; [then-branch: 296 | !(0 <= $q3@438@01)]
(assert (not (<= 0 $q3@438@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 296 | 0 <= $q3@438@01]
(assert (<= 0 $q3@438@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@438@01) (not (<= 0 $q3@438@01))))
(push) ; 4
; [then-branch: 297 | 0 <= $q3@438@01 && $q3@438@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))| | live]
; [else-branch: 297 | !(0 <= $q3@438@01 && $q3@438@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))|) | live]
(push) ; 5
; [then-branch: 297 | 0 <= $q3@438@01 && $q3@438@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))|]
(assert (and
  (<= 0 $q3@438@01)
  (<
    $q3@438@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 6
(assert (not (>= $q3@438@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 297 | !(0 <= $q3@438@01 && $q3@438@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@438@01)
    (<
      $q3@438@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@438@01)
      (<
        $q3@438@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))))))
  (and
    (<= 0 $q3@438@01)
    (<
      $q3@438@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@438@01 Int)) (!
  (and
    (or (<= 0 $q3@438@01) (not (<= 0 $q3@438@01)))
    (or
      (not
        (and
          (<= 0 $q3@438@01)
          (<
            $q3@438@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))))))
      (and
        (<= 0 $q3@438@01)
        (<
          $q3@438@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
    $q3@438@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1009@11@1009@242-aux|)))
(assert (forall (($q3@438@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@438@01)
      (<
        $q3@438@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
          $q3@438@01))
      2))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
    $q3@438@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1009@11@1009@242|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==
;       2))
(declare-const $t@439@01 $Snap)
(assert (= $t@439@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2))
(declare-const $q3@440@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 298 | !(0 <= $q3@440@01) | live]
; [else-branch: 298 | 0 <= $q3@440@01 | live]
(push) ; 5
; [then-branch: 298 | !(0 <= $q3@440@01)]
(assert (not (<= 0 $q3@440@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 298 | 0 <= $q3@440@01]
(assert (<= 0 $q3@440@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@440@01) (not (<= 0 $q3@440@01))))
(push) ; 4
; [then-branch: 299 | 0 <= $q3@440@01 && $q3@440@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))| | live]
; [else-branch: 299 | !(0 <= $q3@440@01 && $q3@440@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))|) | live]
(push) ; 5
; [then-branch: 299 | 0 <= $q3@440@01 && $q3@440@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))|]
(assert (and
  (<= 0 $q3@440@01)
  (<
    $q3@440@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
(declare-const $q4@441@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 300 | !(0 <= $q4@441@01) | live]
; [else-branch: 300 | 0 <= $q4@441@01 | live]
(push) ; 8
; [then-branch: 300 | !(0 <= $q4@441@01)]
(assert (not (<= 0 $q4@441@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 300 | 0 <= $q4@441@01]
(assert (<= 0 $q4@441@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@440@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@441@01) (not (<= 0 $q4@441@01))))
(push) ; 7
; [then-branch: 301 | 0 <= $q4@441@01 && $q4@441@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))[$q3@440@01]| | live]
; [else-branch: 301 | !(0 <= $q4@441@01 && $q4@441@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))[$q3@440@01]|) | live]
(push) ; 8
; [then-branch: 301 | 0 <= $q4@441@01 && $q4@441@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))[$q3@440@01]|]
(assert (and
  (<= 0 $q4@441@01)
  (<
    $q4@441@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
        $q3@440@01)))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@440@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q4@441@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 301 | !(0 <= $q4@441@01 && $q4@441@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))[$q3@440@01]|)]
(assert (not
  (and
    (<= 0 $q4@441@01)
    (<
      $q4@441@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
          $q3@440@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@441@01)
      (<
        $q4@441@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
            $q3@440@01)))))
  (and
    (<= 0 $q4@441@01)
    (<
      $q4@441@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
          $q3@440@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@441@01 Int)) (!
  (and
    (or (<= 0 $q4@441@01) (not (<= 0 $q4@441@01)))
    (or
      (not
        (and
          (<= 0 $q4@441@01)
          (<
            $q4@441@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                $q3@440@01)))))
      (and
        (<= 0 $q4@441@01)
        (<
          $q4@441@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
              $q3@440@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
      $q3@440@01)
    $q4@441@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1010@176@1010@422-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 299 | !(0 <= $q3@440@01 && $q3@440@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@440@01)
    (<
      $q3@440@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@440@01)
    (<
      $q3@440@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2)))))
  (and
    (<= 0 $q3@440@01)
    (<
      $q3@440@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))))
    (forall (($q4@441@01 Int)) (!
      (and
        (or (<= 0 $q4@441@01) (not (<= 0 $q4@441@01)))
        (or
          (not
            (and
              (<= 0 $q4@441@01)
              (<
                $q4@441@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                    $q3@440@01)))))
          (and
            (<= 0 $q4@441@01)
            (<
              $q4@441@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                  $q3@440@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
          $q3@440@01)
        $q4@441@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1010@176@1010@422-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@440@01)
      (<
        $q3@440@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))))))
  (and
    (<= 0 $q3@440@01)
    (<
      $q3@440@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@440@01 Int)) (!
  (and
    (or (<= 0 $q3@440@01) (not (<= 0 $q3@440@01)))
    (=>
      (and
        (<= 0 $q3@440@01)
        (<
          $q3@440@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2)))))
      (and
        (<= 0 $q3@440@01)
        (<
          $q3@440@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))))
        (forall (($q4@441@01 Int)) (!
          (and
            (or (<= 0 $q4@441@01) (not (<= 0 $q4@441@01)))
            (or
              (not
                (and
                  (<= 0 $q4@441@01)
                  (<
                    $q4@441@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                        $q3@440@01)))))
              (and
                (<= 0 $q4@441@01)
                (<
                  $q4@441@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                      $q3@440@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
              $q3@440@01)
            $q4@441@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1010@176@1010@422-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@440@01)
          (<
            $q3@440@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))))))
      (and
        (<= 0 $q3@440@01)
        (<
          $q3@440@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
    $q3@440@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1010@11@1010@423-aux|)))
(assert (forall (($q3@440@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@440@01)
      (<
        $q3@440@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2)))))
    (forall (($q4@441@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@441@01)
          (<
            $q4@441@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                $q3@440@01))))
        (=
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                $q3@440@01)
              $q4@441@01))
          2))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
          $q3@440@01)
        $q4@441@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1010@176@1010@422|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
    $q3@440@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1010@11@1010@423|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       (forall $q5: Int ::
;         { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] }
;         0 <= $q5 &&
;         $q5 <
;         |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==>
;         -170141183460469231731687303715884105728 <=
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] &&
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <=
;         170141183460469231731687303715884105727)))
(declare-const $t@442@01 $Snap)
(assert (= $t@442@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)))
(declare-const $q3@443@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 302 | !(0 <= $q3@443@01) | live]
; [else-branch: 302 | 0 <= $q3@443@01 | live]
(push) ; 5
; [then-branch: 302 | !(0 <= $q3@443@01)]
(assert (not (<= 0 $q3@443@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 302 | 0 <= $q3@443@01]
(assert (<= 0 $q3@443@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@443@01) (not (<= 0 $q3@443@01))))
(push) ; 4
; [then-branch: 303 | 0 <= $q3@443@01 && $q3@443@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))| | live]
; [else-branch: 303 | !(0 <= $q3@443@01 && $q3@443@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))|) | live]
(push) ; 5
; [then-branch: 303 | 0 <= $q3@443@01 && $q3@443@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))|]
(assert (and
  (<= 0 $q3@443@01)
  (<
    $q3@443@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
(declare-const $q4@444@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 304 | !(0 <= $q4@444@01) | live]
; [else-branch: 304 | 0 <= $q4@444@01 | live]
(push) ; 8
; [then-branch: 304 | !(0 <= $q4@444@01)]
(assert (not (<= 0 $q4@444@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 304 | 0 <= $q4@444@01]
(assert (<= 0 $q4@444@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@443@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@444@01) (not (<= 0 $q4@444@01))))
(push) ; 7
; [then-branch: 305 | 0 <= $q4@444@01 && $q4@444@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))[$q3@443@01]| | live]
; [else-branch: 305 | !(0 <= $q4@444@01 && $q4@444@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))[$q3@443@01]|) | live]
(push) ; 8
; [then-branch: 305 | 0 <= $q4@444@01 && $q4@444@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))[$q3@443@01]|]
(assert (and
  (<= 0 $q4@444@01)
  (<
    $q4@444@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
        $q3@443@01)))))
; [eval] (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
(declare-const $q5@445@01 Int)
(push) ; 9
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] 0 <= $q5
(push) ; 10
; [then-branch: 306 | !(0 <= $q5@445@01) | live]
; [else-branch: 306 | 0 <= $q5@445@01 | live]
(push) ; 11
; [then-branch: 306 | !(0 <= $q5@445@01)]
(assert (not (<= 0 $q5@445@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 306 | 0 <= $q5@445@01]
(assert (<= 0 $q5@445@01))
; [eval] $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@443@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@444@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q5@445@01) (not (<= 0 $q5@445@01))))
(push) ; 10
; [then-branch: 307 | 0 <= $q5@445@01 && $q5@445@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))[$q3@443@01][$q4@444@01]| | live]
; [else-branch: 307 | !(0 <= $q5@445@01 && $q5@445@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))[$q3@443@01][$q4@444@01]|) | live]
(push) ; 11
; [then-branch: 307 | 0 <= $q5@445@01 && $q5@445@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))[$q3@443@01][$q4@444@01]|]
(assert (and
  (<= 0 $q5@445@01)
  (<
    $q5@445@01
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
          $q3@443@01)
        $q4@444@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@443@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@444@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q5@445@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 308 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))[$q3@443@01][$q4@444@01][$q5@445@01]) | live]
; [else-branch: 308 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))[$q3@443@01][$q4@444@01][$q5@445@01] | live]
(push) ; 13
; [then-branch: 308 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))[$q3@443@01][$q4@444@01][$q5@445@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
          $q3@443@01)
        $q4@444@01)
      $q5@445@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 308 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))[$q3@443@01][$q4@444@01][$q5@445@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
        $q3@443@01)
      $q4@444@01)
    $q5@445@01)))
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 14
(assert (not (>= $q3@443@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q4@444@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q5@445@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
          $q3@443@01)
        $q4@444@01)
      $q5@445@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
            $q3@443@01)
          $q4@444@01)
        $q5@445@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 307 | !(0 <= $q5@445@01 && $q5@445@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))[$q3@443@01][$q4@444@01]|)]
(assert (not
  (and
    (<= 0 $q5@445@01)
    (<
      $q5@445@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
            $q3@443@01)
          $q4@444@01))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q5@445@01)
    (<
      $q5@445@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
            $q3@443@01)
          $q4@444@01))))
  (and
    (<= 0 $q5@445@01)
    (<
      $q5@445@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
            $q3@443@01)
          $q4@444@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
              $q3@443@01)
            $q4@444@01)
          $q5@445@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                $q3@443@01)
              $q4@444@01)
            $q5@445@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q5@445@01)
      (<
        $q5@445@01
        (Seq_length
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
              $q3@443@01)
            $q4@444@01)))))
  (and
    (<= 0 $q5@445@01)
    (<
      $q5@445@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
            $q3@443@01)
          $q4@444@01))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@445@01 Int)) (!
  (and
    (or (<= 0 $q5@445@01) (not (<= 0 $q5@445@01)))
    (=>
      (and
        (<= 0 $q5@445@01)
        (<
          $q5@445@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                $q3@443@01)
              $q4@444@01))))
      (and
        (<= 0 $q5@445@01)
        (<
          $q5@445@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                $q3@443@01)
              $q4@444@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                  $q3@443@01)
                $q4@444@01)
              $q5@445@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                    $q3@443@01)
                  $q4@444@01)
                $q5@445@01))))))
    (or
      (not
        (and
          (<= 0 $q5@445@01)
          (<
            $q5@445@01
            (Seq_length
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                  $q3@443@01)
                $q4@444@01)))))
      (and
        (<= 0 $q5@445@01)
        (<
          $q5@445@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                $q3@443@01)
              $q4@444@01))))))
  :pattern ((Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
        $q3@443@01)
      $q4@444@01)
    $q5@445@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1011@351@1011@766-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 305 | !(0 <= $q4@444@01 && $q4@444@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))[$q3@443@01]|)]
(assert (not
  (and
    (<= 0 $q4@444@01)
    (<
      $q4@444@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
          $q3@443@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q4@444@01)
    (<
      $q4@444@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
          $q3@443@01))))
  (and
    (<= 0 $q4@444@01)
    (<
      $q4@444@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
          $q3@443@01)))
    (forall (($q5@445@01 Int)) (!
      (and
        (or (<= 0 $q5@445@01) (not (<= 0 $q5@445@01)))
        (=>
          (and
            (<= 0 $q5@445@01)
            (<
              $q5@445@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                    $q3@443@01)
                  $q4@444@01))))
          (and
            (<= 0 $q5@445@01)
            (<
              $q5@445@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                    $q3@443@01)
                  $q4@444@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                      $q3@443@01)
                    $q4@444@01)
                  $q5@445@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                        $q3@443@01)
                      $q4@444@01)
                    $q5@445@01))))))
        (or
          (not
            (and
              (<= 0 $q5@445@01)
              (<
                $q5@445@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                      $q3@443@01)
                    $q4@444@01)))))
          (and
            (<= 0 $q5@445@01)
            (<
              $q5@445@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                    $q3@443@01)
                  $q4@444@01))))))
      :pattern ((Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
            $q3@443@01)
          $q4@444@01)
        $q5@445@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1011@351@1011@766-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@444@01)
      (<
        $q4@444@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
            $q3@443@01)))))
  (and
    (<= 0 $q4@444@01)
    (<
      $q4@444@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
          $q3@443@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@444@01 Int)) (!
  (and
    (or (<= 0 $q4@444@01) (not (<= 0 $q4@444@01)))
    (=>
      (and
        (<= 0 $q4@444@01)
        (<
          $q4@444@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
              $q3@443@01))))
      (and
        (<= 0 $q4@444@01)
        (<
          $q4@444@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
              $q3@443@01)))
        (forall (($q5@445@01 Int)) (!
          (and
            (or (<= 0 $q5@445@01) (not (<= 0 $q5@445@01)))
            (=>
              (and
                (<= 0 $q5@445@01)
                (<
                  $q5@445@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                        $q3@443@01)
                      $q4@444@01))))
              (and
                (<= 0 $q5@445@01)
                (<
                  $q5@445@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                        $q3@443@01)
                      $q4@444@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                          $q3@443@01)
                        $q4@444@01)
                      $q5@445@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                            $q3@443@01)
                          $q4@444@01)
                        $q5@445@01))))))
            (or
              (not
                (and
                  (<= 0 $q5@445@01)
                  (<
                    $q5@445@01
                    (Seq_length
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                          $q3@443@01)
                        $q4@444@01)))))
              (and
                (<= 0 $q5@445@01)
                (<
                  $q5@445@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                        $q3@443@01)
                      $q4@444@01))))))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                $q3@443@01)
              $q4@444@01)
            $q5@445@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1011@351@1011@766-aux|))))
    (or
      (not
        (and
          (<= 0 $q4@444@01)
          (<
            $q4@444@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                $q3@443@01)))))
      (and
        (<= 0 $q4@444@01)
        (<
          $q4@444@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
              $q3@443@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
      $q3@443@01)
    $q4@444@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1011@176@1011@767-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 303 | !(0 <= $q3@443@01 && $q3@443@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@414@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@443@01)
    (<
      $q3@443@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@443@01)
    (<
      $q3@443@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2)))))
  (and
    (<= 0 $q3@443@01)
    (<
      $q3@443@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))))
    (forall (($q4@444@01 Int)) (!
      (and
        (or (<= 0 $q4@444@01) (not (<= 0 $q4@444@01)))
        (=>
          (and
            (<= 0 $q4@444@01)
            (<
              $q4@444@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                  $q3@443@01))))
          (and
            (<= 0 $q4@444@01)
            (<
              $q4@444@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                  $q3@443@01)))
            (forall (($q5@445@01 Int)) (!
              (and
                (or (<= 0 $q5@445@01) (not (<= 0 $q5@445@01)))
                (=>
                  (and
                    (<= 0 $q5@445@01)
                    (<
                      $q5@445@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                            $q3@443@01)
                          $q4@444@01))))
                  (and
                    (<= 0 $q5@445@01)
                    (<
                      $q5@445@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                            $q3@443@01)
                          $q4@444@01)))
                    (or
                      (<=
                        (- 0 170141183460469231731687303715884105728)
                        (Seq_index
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                              $q3@443@01)
                            $q4@444@01)
                          $q5@445@01))
                      (not
                        (<=
                          (- 0 170141183460469231731687303715884105728)
                          (Seq_index
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                                $q3@443@01)
                              $q4@444@01)
                            $q5@445@01))))))
                (or
                  (not
                    (and
                      (<= 0 $q5@445@01)
                      (<
                        $q5@445@01
                        (Seq_length
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                              $q3@443@01)
                            $q4@444@01)))))
                  (and
                    (<= 0 $q5@445@01)
                    (<
                      $q5@445@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                            $q3@443@01)
                          $q4@444@01))))))
              :pattern ((Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                    $q3@443@01)
                  $q4@444@01)
                $q5@445@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1011@351@1011@766-aux|))))
        (or
          (not
            (and
              (<= 0 $q4@444@01)
              (<
                $q4@444@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                    $q3@443@01)))))
          (and
            (<= 0 $q4@444@01)
            (<
              $q4@444@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                  $q3@443@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
          $q3@443@01)
        $q4@444@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1011@176@1011@767-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@443@01)
      (<
        $q3@443@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))))))
  (and
    (<= 0 $q3@443@01)
    (<
      $q3@443@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@443@01 Int)) (!
  (and
    (or (<= 0 $q3@443@01) (not (<= 0 $q3@443@01)))
    (=>
      (and
        (<= 0 $q3@443@01)
        (<
          $q3@443@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2)))))
      (and
        (<= 0 $q3@443@01)
        (<
          $q3@443@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))))
        (forall (($q4@444@01 Int)) (!
          (and
            (or (<= 0 $q4@444@01) (not (<= 0 $q4@444@01)))
            (=>
              (and
                (<= 0 $q4@444@01)
                (<
                  $q4@444@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                      $q3@443@01))))
              (and
                (<= 0 $q4@444@01)
                (<
                  $q4@444@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                      $q3@443@01)))
                (forall (($q5@445@01 Int)) (!
                  (and
                    (or (<= 0 $q5@445@01) (not (<= 0 $q5@445@01)))
                    (=>
                      (and
                        (<= 0 $q5@445@01)
                        (<
                          $q5@445@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                                $q3@443@01)
                              $q4@444@01))))
                      (and
                        (<= 0 $q5@445@01)
                        (<
                          $q5@445@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                                $q3@443@01)
                              $q4@444@01)))
                        (or
                          (<=
                            (- 0 170141183460469231731687303715884105728)
                            (Seq_index
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                                  $q3@443@01)
                                $q4@444@01)
                              $q5@445@01))
                          (not
                            (<=
                              (- 0 170141183460469231731687303715884105728)
                              (Seq_index
                                (Seq_index
                                  (Seq_index
                                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                                    $q3@443@01)
                                  $q4@444@01)
                                $q5@445@01))))))
                    (or
                      (not
                        (and
                          (<= 0 $q5@445@01)
                          (<
                            $q5@445@01
                            (Seq_length
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                                  $q3@443@01)
                                $q4@444@01)))))
                      (and
                        (<= 0 $q5@445@01)
                        (<
                          $q5@445@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                                $q3@443@01)
                              $q4@444@01))))))
                  :pattern ((Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                        $q3@443@01)
                      $q4@444@01)
                    $q5@445@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1011@351@1011@766-aux|))))
            (or
              (not
                (and
                  (<= 0 $q4@444@01)
                  (<
                    $q4@444@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                        $q3@443@01)))))
              (and
                (<= 0 $q4@444@01)
                (<
                  $q4@444@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                      $q3@443@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
              $q3@443@01)
            $q4@444@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1011@176@1011@767-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@443@01)
          (<
            $q3@443@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))))))
      (and
        (<= 0 $q3@443@01)
        (<
          $q3@443@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
    $q3@443@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1011@11@1011@768-aux|)))
(assert (forall (($q3@443@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@443@01)
      (<
        $q3@443@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2)))))
    (forall (($q4@444@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@444@01)
          (<
            $q4@444@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                $q3@443@01))))
        (forall (($q5@445@01 Int)) (!
          (=>
            (and
              (<= 0 $q5@445@01)
              (<
                $q5@445@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                      $q3@443@01)
                    $q4@444@01))))
            (and
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                      $q3@443@01)
                    $q4@444@01)
                  $q5@445@01))
              (<=
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                      $q3@443@01)
                    $q4@444@01)
                  $q5@445@01)
                170141183460469231731687303715884105727)))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
                $q3@443@01)
              $q4@444@01)
            $q5@445@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1011@351@1011@766|)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
          $q3@443@01)
        $q4@444@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1011@176@1011@767|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@414@01 2))
    $q3@443@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1011@11@1011@768|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
(declare-const $t@446@01 $Snap)
(assert (= $t@446@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3))) 1000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] }
;     0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] &&
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <=
;     170141183460469231731687303715884105727)
(declare-const $t@447@01 $Snap)
(assert (= $t@447@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] } 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727)
(declare-const $q6@448@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] 0 <= $q6
(push) ; 4
; [then-branch: 309 | !(0 <= $q6@448@01) | live]
; [else-branch: 309 | 0 <= $q6@448@01 | live]
(push) ; 5
; [then-branch: 309 | !(0 <= $q6@448@01)]
(assert (not (<= 0 $q6@448@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 309 | 0 <= $q6@448@01]
(assert (<= 0 $q6@448@01))
; [eval] $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q6@448@01) (not (<= 0 $q6@448@01))))
(push) ; 4
; [then-branch: 310 | 0 <= $q6@448@01 && $q6@448@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@414@01, 3))| | live]
; [else-branch: 310 | !(0 <= $q6@448@01 && $q6@448@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@414@01, 3))|) | live]
(push) ; 5
; [then-branch: 310 | 0 <= $q6@448@01 && $q6@448@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@414@01, 3))|]
(assert (and
  (<= 0 $q6@448@01)
  (<
    $q6@448@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (>= $q6@448@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 311 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@414@01, 3))[$q6@448@01]) | live]
; [else-branch: 311 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@414@01, 3))[$q6@448@01] | live]
(push) ; 7
; [then-branch: 311 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@414@01, 3))[$q6@448@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3))
      $q6@448@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 311 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@414@01, 3))[$q6@448@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3)) $q6@448@01)))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (>= $q6@448@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3))
      $q6@448@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3))
        $q6@448@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 310 | !(0 <= $q6@448@01 && $q6@448@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@414@01, 3))|)]
(assert (not
  (and
    (<= 0 $q6@448@01)
    (<
      $q6@448@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q6@448@01)
    (<
      $q6@448@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3)))))
  (and
    (<= 0 $q6@448@01)
    (<
      $q6@448@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3))
          $q6@448@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3))
            $q6@448@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q6@448@01)
      (<
        $q6@448@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3))))))
  (and
    (<= 0 $q6@448@01)
    (<
      $q6@448@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@448@01 Int)) (!
  (and
    (or (<= 0 $q6@448@01) (not (<= 0 $q6@448@01)))
    (=>
      (and
        (<= 0 $q6@448@01)
        (<
          $q6@448@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3)))))
      (and
        (<= 0 $q6@448@01)
        (<
          $q6@448@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3))
              $q6@448@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3))
                $q6@448@01))))))
    (or
      (not
        (and
          (<= 0 $q6@448@01)
          (<
            $q6@448@01
            (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3))))))
      (and
        (<= 0 $q6@448@01)
        (<
          $q6@448@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3))
    $q6@448@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1013@11@1013@346-aux|)))
(assert (forall (($q6@448@01 Int)) (!
  (=>
    (and
      (<= 0 $q6@448@01)
      (<
        $q6@448@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3))
          $q6@448@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3))
          $q6@448@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3))
    $q6@448@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1013@11@1013@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==
;     10)
(declare-const $t@449@01 $Snap)
(assert (= $t@449@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10)
(declare-const $q7@450@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@450@01 Int)) (!
  (=
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@450@01))
    10)
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@450@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1014@11@1014@209|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     (forall $q8: Int ::
;       { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] }
;       0 <= $q8 &&
;       $q8 <
;       |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==>
;       -170141183460469231731687303715884105728 <=
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] &&
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <=
;       170141183460469231731687303715884105727))
(declare-const $t@451@01 $Snap)
(assert (= $t@451@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727))
(declare-const $q7@452@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727)
(declare-const $q8@453@01 Int)
(push) ; 4
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] 0 <= $q8
(push) ; 5
; [then-branch: 312 | !(0 <= $q8@453@01) | live]
; [else-branch: 312 | 0 <= $q8@453@01 | live]
(push) ; 6
; [then-branch: 312 | !(0 <= $q8@453@01)]
(assert (not (<= 0 $q8@453@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 312 | 0 <= $q8@453@01]
(assert (<= 0 $q8@453@01))
; [eval] $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q8@453@01) (not (<= 0 $q8@453@01))))
(push) ; 5
; [then-branch: 313 | 0 <= $q8@453@01 && $q8@453@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@414@01, 4)), $q7@452@01)| | live]
; [else-branch: 313 | !(0 <= $q8@453@01 && $q8@453@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@414@01, 4)), $q7@452@01)|) | live]
(push) ; 6
; [then-branch: 313 | 0 <= $q8@453@01 && $q8@453@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@414@01, 4)), $q7@452@01)|]
(assert (and
  (<= 0 $q8@453@01)
  (<
    $q8@453@01
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] -170141183460469231731687303715884105728
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 7
(assert (not (>= $q8@453@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 314 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@414@01, 4)), $q7@452@01)[$q8@453@01]) | live]
; [else-branch: 314 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@414@01, 4)), $q7@452@01)[$q8@453@01] | live]
(push) ; 8
; [then-branch: 314 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@414@01, 4)), $q7@452@01)[$q8@453@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01)
      $q8@453@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 314 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@414@01, 4)), $q7@452@01)[$q8@453@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01)
    $q8@453@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 9
(assert (not (>= $q8@453@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01)
      $q8@453@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01)
        $q8@453@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 313 | !(0 <= $q8@453@01 && $q8@453@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@414@01, 4)), $q7@452@01)|)]
(assert (not
  (and
    (<= 0 $q8@453@01)
    (<
      $q8@453@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q8@453@01)
    (<
      $q8@453@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01))))
  (and
    (<= 0 $q8@453@01)
    (<
      $q8@453@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01)
          $q8@453@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01)
            $q8@453@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q8@453@01)
      (<
        $q8@453@01
        (Seq_length
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01)))))
  (and
    (<= 0 $q8@453@01)
    (<
      $q8@453@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q8@453@01 Int)) (!
  (and
    (or (<= 0 $q8@453@01) (not (<= 0 $q8@453@01)))
    (=>
      (and
        (<= 0 $q8@453@01)
        (<
          $q8@453@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01))))
      (and
        (<= 0 $q8@453@01)
        (<
          $q8@453@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01)
              $q8@453@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01)
                $q8@453@01))))))
    (or
      (not
        (and
          (<= 0 $q8@453@01)
          (<
            $q8@453@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01)))))
      (and
        (<= 0 $q8@453@01)
        (<
          $q8@453@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01))))))
  :pattern ((Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01)
    $q8@453@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1015@119@1015@606-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@452@01 Int)) (!
  (forall (($q8@453@01 Int)) (!
    (and
      (or (<= 0 $q8@453@01) (not (<= 0 $q8@453@01)))
      (=>
        (and
          (<= 0 $q8@453@01)
          (<
            $q8@453@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01))))
        (and
          (<= 0 $q8@453@01)
          (<
            $q8@453@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01)))
          (or
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01)
                $q8@453@01))
            (not
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01)
                  $q8@453@01))))))
      (or
        (not
          (and
            (<= 0 $q8@453@01)
            (<
              $q8@453@01
              (Seq_length
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01)))))
        (and
          (<= 0 $q8@453@01)
          (<
            $q8@453@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01))))))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01)
      $q8@453@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1015@119@1015@606-aux|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1015@11@1015@607-aux|)))
(assert (forall (($q7@452@01 Int)) (!
  (forall (($q8@453@01 Int)) (!
    (=>
      (and
        (<= 0 $q8@453@01)
        (<
          $q8@453@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01))))
      (and
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01)
            $q8@453@01))
        (<=
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01)
            $q8@453@01)
          170141183460469231731687303715884105727)))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01)
      $q8@453@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1015@119@1015@606|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@414@01 4)) $q7@452@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1015@11@1015@607|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@454@01 $Snap)
(assert (= $t@454@01 ($Snap.combine ($Snap.first $t@454@01) ($Snap.second $t@454@01))))
(assert (= ($Snap.first $t@454@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@414@01 5))))
(assert (= ($Snap.second $t@454@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@414@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@455@01 $Snap)
(assert (= $t@455@01 ($Snap.combine ($Snap.first $t@455@01) ($Snap.second $t@455@01))))
(assert (= ($Snap.first $t@455@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@414@01 6))))
(assert (= ($Snap.second $t@455@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@414@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@456@01 $Snap)
(assert (= $t@456@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q9@457@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 315 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@414@01, 8)), $q9@457@01)) | live]
; [else-branch: 315 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@414@01, 8)), $q9@457@01) | live]
(push) ; 5
; [then-branch: 315 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@414@01, 8)), $q9@457@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 8)) $q9@457@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 315 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@414@01, 8)), $q9@457@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 8)) $q9@457@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 8)) $q9@457@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 8)) $q9@457@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@457@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 8)) $q9@457@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 8)) $q9@457@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 8)) $q9@457@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1018@11@1018@345-aux|)))
(assert (forall (($q9@457@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 8)) $q9@457@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 8)) $q9@457@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 8)) $q9@457@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1018@11@1018@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@458@01 $Snap)
(assert (= $t@458@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q9@459@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@459@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 8)) $q9@459@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 8)) $q9@459@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1019@11@1019@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@460@01 $Snap)
(assert (= $t@460@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q10@461@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 316 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@414@01, 9)), $q10@461@01)) | live]
; [else-branch: 316 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@414@01, 9)), $q10@461@01) | live]
(push) ; 5
; [then-branch: 316 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@414@01, 9)), $q10@461@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 9)) $q10@461@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 316 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@414@01, 9)), $q10@461@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 9)) $q10@461@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 9)) $q10@461@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 9)) $q10@461@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@461@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 9)) $q10@461@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 9)) $q10@461@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 9)) $q10@461@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1020@11@1020@349-aux|)))
(assert (forall (($q10@461@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 9)) $q10@461@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 9)) $q10@461@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 9)) $q10@461@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1020@11@1020@349|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@462@01 $Snap)
(assert (= $t@462@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q10@463@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@463@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 9)) $q10@463@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@414@01 9)) $q10@463@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1021@11@1021@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@464@01 $Snap)
(assert (= $t@464@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@414@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@465@01 $Snap)
(assert (= $t@465@01 ($Snap.combine ($Snap.first $t@465@01) ($Snap.second $t@465@01))))
(assert (= ($Snap.first $t@465@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@465@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@466@01 $Snap)
(assert (= $t@466@01 ($Snap.combine ($Snap.first $t@466@01) ($Snap.second $t@466@01))))
(assert (= ($Snap.first $t@466@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@411@01 0))))
(assert (= ($Snap.second $t@466@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@411@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@467@01 $Snap)
(assert (= $t@467@01 ($Snap.combine ($Snap.first $t@467@01) ($Snap.second $t@467@01))))
(assert (= ($Snap.first $t@467@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@411@01 1))))
(assert (= ($Snap.second $t@467@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@411@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@468@01 $Snap)
(assert (= $t@468@01 ($Snap.combine ($Snap.first $t@468@01) ($Snap.second $t@468@01))))
(assert (= ($Snap.first $t@468@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@411@01 2))))
(assert (= ($Snap.second $t@468@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@411@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@469@01 $Snap)
(assert (= $t@469@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@411@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@470@01 $Snap)
(assert (= $t@470@01 ($Snap.combine ($Snap.first $t@470@01) ($Snap.second $t@470@01))))
(assert (= ($Snap.first $t@470@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@411@01 4))))
(assert (= ($Snap.second $t@470@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@411@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@471@01 $Snap)
(assert (= $t@471@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@411@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@472@01 $Snap)
(assert (= $t@472@01 ($Snap.combine ($Snap.first $t@472@01) ($Snap.second $t@472@01))))
(assert (= ($Snap.first $t@472@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@410@01 0))))
(assert (= ($Snap.second $t@472@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@410@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@473@01 $Snap)
(assert (= $t@473@01 ($Snap.combine ($Snap.first $t@473@01) ($Snap.second $t@473@01))))
(assert (= ($Snap.first $t@473@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@410@01 1))))
(assert (= ($Snap.second $t@473@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@410@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@474@01 $Snap)
(assert (= $t@474@01 ($Snap.combine ($Snap.first $t@474@01) ($Snap.second $t@474@01))))
(assert (= ($Snap.first $t@474@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@410@01 2))))
(assert (= ($Snap.second $t@474@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@410@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@475@01 $Snap)
(assert (= $t@475@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@410@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@476@01 $Snap)
(assert (= $t@476@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@410@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@477@01 $Snap)
(assert (= $t@477@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@478@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc(self, 3)): Seq[Int])
(declare-const $t@479@01 $Snap)
(assert (= $t@479@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@480@01 $Snap)
(assert (= $t@480@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@410@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] !(0 <= 0 && 0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= 0 && 0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= 0
(set-option :timeout 0)
(push) ; 3
; [then-branch: 317 | False | live]
; [else-branch: 317 | True | live]
(push) ; 4
; [then-branch: 317 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 317 | True]
; [eval] 0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (< 0 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 318 | !(0 < |$struct_get[Seq[Int]]($struct_loc[Int](self@414@01, 0))|) | dead]
; [else-branch: 318 | 0 < |$struct_get[Seq[Int]]($struct_loc[Int](self@414@01, 0))| | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 318 | 0 < |$struct_get[Seq[Int]]($struct_loc[Int](self@414@01, 0))|]
(assert (< 0 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0)))))
(pop) ; 3
; [eval] !!(0 <= 0 && 0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] !(0 <= 0 && 0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= 0 && 0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= 0
(push) ; 3
; [then-branch: 319 | False | live]
; [else-branch: 319 | True | live]
(push) ; 4
; [then-branch: 319 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 319 | True]
; [eval] 0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (not (< 0 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0)))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< 0 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 320 | 0 < |$struct_get[Seq[Int]]($struct_loc[Int](self@414@01, 0))| | live]
; [else-branch: 320 | !(0 < |$struct_get[Seq[Int]]($struct_loc[Int](self@414@01, 0))|) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 320 | 0 < |$struct_get[Seq[Int]]($struct_loc[Int](self@414@01, 0))|]
(assert (< 0 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0)))))
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[0 :=
;   10]): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[0 := 10]): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[0 := 10]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(declare-const self@481@01 $Struct)
(assert (=
  self@481@01
  ($struct_set<$Struct> self@414@01 0 (Seq_append
    (Seq_take ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0)) 0)
    (Seq_append
      (Seq_singleton 10)
      (Seq_drop ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 0)) 1))))))
; [eval] !(0 <= 0 && 0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= 0 && 0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= 0
(push) ; 4
; [then-branch: 321 | False | live]
; [else-branch: 321 | True | live]
(push) ; 5
; [then-branch: 321 | False]
(assert false)
(pop) ; 5
(push) ; 5
; [else-branch: 321 | True]
; [eval] 0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (< 0 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@481@01 0))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 322 | !(0 < |$struct_get[Seq[Int]]($struct_loc[Int](self@481@01, 0))|) | dead]
; [else-branch: 322 | 0 < |$struct_get[Seq[Int]]($struct_loc[Int](self@481@01, 0))| | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 322 | 0 < |$struct_get[Seq[Int]]($struct_loc[Int](self@481@01, 0))|]
(assert (< 0 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@481@01 0)))))
(pop) ; 4
; [eval] !!(0 <= 0 && 0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] !(0 <= 0 && 0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= 0 && 0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= 0
(push) ; 4
; [then-branch: 323 | False | live]
; [else-branch: 323 | True | live]
(push) ; 5
; [then-branch: 323 | False]
(assert false)
(pop) ; 5
(push) ; 5
; [else-branch: 323 | True]
; [eval] 0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (not (< 0 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@481@01 0)))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< 0 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@481@01 0))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 324 | 0 < |$struct_get[Seq[Int]]($struct_loc[Int](self@481@01, 0))| | live]
; [else-branch: 324 | !(0 < |$struct_get[Seq[Int]]($struct_loc[Int](self@481@01, 0))|) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 324 | 0 < |$struct_get[Seq[Int]]($struct_loc[Int](self@481@01, 0))|]
(assert (< 0 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@481@01 0)))))
; [exec]
; $res := $unwrap($wrap(($struct_get($struct_loc(self, 0)): Seq[Int])[0]))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 0)): Seq[Int])[0]))
; [eval] $wrap(($struct_get($struct_loc(self, 0)): Seq[Int])[0])
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(declare-const $res@482@01 Int)
(assert (=
  $res@482@01
  ($unwrap<Int> ($wrap<$Int> (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@481@01 0))
    0)))))
; [exec]
; label return
; [exec]
; label end
; [exec]
; exhale $res == 10
; [eval] $res == 10
(push) ; 5
(assert (not (= $res@482@01 10)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (= $res@482@01 10))
; [eval] !$succ
; [then-branch: 325 | False | dead]
; [else-branch: 325 | True | live]
(push) ; 5
; [else-branch: 325 | True]
(pop) ; 5
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 326 | True | live]
; [else-branch: 326 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 326 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@483@01 $Snap)
(assert (= $t@483@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@425@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@484@01 $Struct)
(assert (=
  self@484@01
  ($struct_set<$Struct> self@481@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@481@01 5))
    l$havoc$1@425@01))))
; [exec]
; $contracts := l$havoc$2
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 6
(assert (not (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@484@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@484@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@414@01 3))))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$array_write_all ----------
(declare-const $succ@485@01 Bool)
(declare-const $succ@486@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@487@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@488@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@489@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@490@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@491@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@492@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@493@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@494@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@495@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@496@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@497@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@498@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@499@01 Bool)
; [exec]
; var l$i: $Int
(declare-const l$i@500@01 $Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@501@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@502@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@503@01 $Map<Int~_$Struct>)
; [exec]
; inhale |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
(declare-const $t@504@01 $Snap)
(assert (= $t@504@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))) 12))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] }
;     0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] &&
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <=
;     170141183460469231731687303715884105727)
(declare-const $t@505@01 $Snap)
(assert (= $t@505@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] } 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@506@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 327 | !(0 <= $q0@506@01) | live]
; [else-branch: 327 | 0 <= $q0@506@01 | live]
(push) ; 5
; [then-branch: 327 | !(0 <= $q0@506@01)]
(assert (not (<= 0 $q0@506@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 327 | 0 <= $q0@506@01]
(assert (<= 0 $q0@506@01))
; [eval] $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@506@01) (not (<= 0 $q0@506@01))))
(push) ; 4
; [then-branch: 328 | 0 <= $q0@506@01 && $q0@506@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@491@01, 0))| | live]
; [else-branch: 328 | !(0 <= $q0@506@01 && $q0@506@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@491@01, 0))|) | live]
(push) ; 5
; [then-branch: 328 | 0 <= $q0@506@01 && $q0@506@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@491@01, 0))|]
(assert (and
  (<= 0 $q0@506@01)
  (<
    $q0@506@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (>= $q0@506@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 329 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@491@01, 0))[$q0@506@01]) | live]
; [else-branch: 329 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@491@01, 0))[$q0@506@01] | live]
(push) ; 7
; [then-branch: 329 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@491@01, 0))[$q0@506@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
      $q0@506@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 329 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@491@01, 0))[$q0@506@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0)) $q0@506@01)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (>= $q0@506@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
      $q0@506@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
        $q0@506@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 328 | !(0 <= $q0@506@01 && $q0@506@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@491@01, 0))|)]
(assert (not
  (and
    (<= 0 $q0@506@01)
    (<
      $q0@506@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q0@506@01)
    (<
      $q0@506@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0)))))
  (and
    (<= 0 $q0@506@01)
    (<
      $q0@506@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
          $q0@506@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
            $q0@506@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q0@506@01)
      (<
        $q0@506@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))))))
  (and
    (<= 0 $q0@506@01)
    (<
      $q0@506@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@506@01 Int)) (!
  (and
    (or (<= 0 $q0@506@01) (not (<= 0 $q0@506@01)))
    (=>
      (and
        (<= 0 $q0@506@01)
        (<
          $q0@506@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0)))))
      (and
        (<= 0 $q0@506@01)
        (<
          $q0@506@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
              $q0@506@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
                $q0@506@01))))))
    (or
      (not
        (and
          (<= 0 $q0@506@01)
          (<
            $q0@506@01
            (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))))))
      (and
        (<= 0 $q0@506@01)
        (<
          $q0@506@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
    $q0@506@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1108@11@1108@346-aux|)))
(assert (forall (($q0@506@01 Int)) (!
  (=>
    (and
      (<= 0 $q0@506@01)
      (<
        $q0@506@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
          $q0@506@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
          $q0@506@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
    $q0@506@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1108@11@1108@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
(declare-const $t@507@01 $Snap)
(assert (= $t@507@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(assert (= (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $t@508@01 $Snap)
(assert (= $t@508@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $q1@509@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 330 | !(0 <= $q1@509@01) | live]
; [else-branch: 330 | 0 <= $q1@509@01 | live]
(push) ; 5
; [then-branch: 330 | !(0 <= $q1@509@01)]
(assert (not (<= 0 $q1@509@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 330 | 0 <= $q1@509@01]
(assert (<= 0 $q1@509@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@509@01) (not (<= 0 $q1@509@01))))
(push) ; 4
; [then-branch: 331 | 0 <= $q1@509@01 && $q1@509@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@491@01, 1))| | live]
; [else-branch: 331 | !(0 <= $q1@509@01 && $q1@509@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@491@01, 1))|) | live]
(push) ; 5
; [then-branch: 331 | 0 <= $q1@509@01 && $q1@509@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@491@01, 1))|]
(assert (and
  (<= 0 $q1@509@01)
  (<
    $q1@509@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))))))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 6
(assert (not (>= $q1@509@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 331 | !(0 <= $q1@509@01 && $q1@509@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@491@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@509@01)
    (<
      $q1@509@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@509@01)
      (<
        $q1@509@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))))))
  (and
    (<= 0 $q1@509@01)
    (<
      $q1@509@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@509@01 Int)) (!
  (and
    (or (<= 0 $q1@509@01) (not (<= 0 $q1@509@01)))
    (or
      (not
        (and
          (<= 0 $q1@509@01)
          (<
            $q1@509@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))))))
      (and
        (<= 0 $q1@509@01)
        (<
          $q1@509@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
    $q1@509@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1110@11@1110@228-aux|)))
(assert (forall (($q1@509@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@509@01)
      (<
        $q1@509@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
          $q1@509@01))
      12))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
    $q1@509@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1110@11@1110@228|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     (forall $q2: Int ::
;       { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] }
;       0 <= $q2 &&
;       $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==>
;       -170141183460469231731687303715884105728 <=
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] &&
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <=
;       170141183460469231731687303715884105727))
(declare-const $t@510@01 $Snap)
(assert (= $t@510@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727))
(declare-const $q1@511@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 332 | !(0 <= $q1@511@01) | live]
; [else-branch: 332 | 0 <= $q1@511@01 | live]
(push) ; 5
; [then-branch: 332 | !(0 <= $q1@511@01)]
(assert (not (<= 0 $q1@511@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 332 | 0 <= $q1@511@01]
(assert (<= 0 $q1@511@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@511@01) (not (<= 0 $q1@511@01))))
(push) ; 4
; [then-branch: 333 | 0 <= $q1@511@01 && $q1@511@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@491@01, 1))| | live]
; [else-branch: 333 | !(0 <= $q1@511@01 && $q1@511@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@491@01, 1))|) | live]
(push) ; 5
; [then-branch: 333 | 0 <= $q1@511@01 && $q1@511@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@491@01, 1))|]
(assert (and
  (<= 0 $q1@511@01)
  (<
    $q1@511@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))))))
; [eval] (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
(declare-const $q2@512@01 Int)
(push) ; 6
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] 0 <= $q2
(push) ; 7
; [then-branch: 334 | !(0 <= $q2@512@01) | live]
; [else-branch: 334 | 0 <= $q2@512@01 | live]
(push) ; 8
; [then-branch: 334 | !(0 <= $q2@512@01)]
(assert (not (<= 0 $q2@512@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 334 | 0 <= $q2@512@01]
(assert (<= 0 $q2@512@01))
; [eval] $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@511@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q2@512@01) (not (<= 0 $q2@512@01))))
(push) ; 7
; [then-branch: 335 | 0 <= $q2@512@01 && $q2@512@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@491@01, 1))[$q1@511@01]| | live]
; [else-branch: 335 | !(0 <= $q2@512@01 && $q2@512@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@491@01, 1))[$q1@511@01]|) | live]
(push) ; 8
; [then-branch: 335 | 0 <= $q2@512@01 && $q2@512@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@491@01, 1))[$q1@511@01]|]
(assert (and
  (<= 0 $q2@512@01)
  (<
    $q2@512@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
        $q1@511@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@511@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q2@512@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 336 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@491@01, 1))[$q1@511@01][$q2@512@01]) | live]
; [else-branch: 336 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@491@01, 1))[$q1@511@01][$q2@512@01] | live]
(push) ; 10
; [then-branch: 336 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@491@01, 1))[$q1@511@01][$q2@512@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
        $q1@511@01)
      $q2@512@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 336 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@491@01, 1))[$q1@511@01][$q2@512@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
      $q1@511@01)
    $q2@512@01)))
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 11
(assert (not (>= $q1@511@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= $q2@512@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
        $q1@511@01)
      $q2@512@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
          $q1@511@01)
        $q2@512@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 335 | !(0 <= $q2@512@01 && $q2@512@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@491@01, 1))[$q1@511@01]|)]
(assert (not
  (and
    (<= 0 $q2@512@01)
    (<
      $q2@512@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
          $q1@511@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q2@512@01)
    (<
      $q2@512@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
          $q1@511@01))))
  (and
    (<= 0 $q2@512@01)
    (<
      $q2@512@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
          $q1@511@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
            $q1@511@01)
          $q2@512@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
              $q1@511@01)
            $q2@512@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q2@512@01)
      (<
        $q2@512@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
            $q1@511@01)))))
  (and
    (<= 0 $q2@512@01)
    (<
      $q2@512@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
          $q1@511@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@512@01 Int)) (!
  (and
    (or (<= 0 $q2@512@01) (not (<= 0 $q2@512@01)))
    (=>
      (and
        (<= 0 $q2@512@01)
        (<
          $q2@512@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
              $q1@511@01))))
      (and
        (<= 0 $q2@512@01)
        (<
          $q2@512@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
              $q1@511@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
                $q1@511@01)
              $q2@512@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
                  $q1@511@01)
                $q2@512@01))))))
    (or
      (not
        (and
          (<= 0 $q2@512@01)
          (<
            $q2@512@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
                $q1@511@01)))))
      (and
        (<= 0 $q2@512@01)
        (<
          $q2@512@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
              $q1@511@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
      $q1@511@01)
    $q2@512@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1111@166@1111@541-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 333 | !(0 <= $q1@511@01 && $q1@511@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@491@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@511@01)
    (<
      $q1@511@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q1@511@01)
    (<
      $q1@511@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1)))))
  (and
    (<= 0 $q1@511@01)
    (<
      $q1@511@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))))
    (forall (($q2@512@01 Int)) (!
      (and
        (or (<= 0 $q2@512@01) (not (<= 0 $q2@512@01)))
        (=>
          (and
            (<= 0 $q2@512@01)
            (<
              $q2@512@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
                  $q1@511@01))))
          (and
            (<= 0 $q2@512@01)
            (<
              $q2@512@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
                  $q1@511@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
                    $q1@511@01)
                  $q2@512@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
                      $q1@511@01)
                    $q2@512@01))))))
        (or
          (not
            (and
              (<= 0 $q2@512@01)
              (<
                $q2@512@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
                    $q1@511@01)))))
          (and
            (<= 0 $q2@512@01)
            (<
              $q2@512@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
                  $q1@511@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
          $q1@511@01)
        $q2@512@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1111@166@1111@541-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@511@01)
      (<
        $q1@511@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))))))
  (and
    (<= 0 $q1@511@01)
    (<
      $q1@511@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@511@01 Int)) (!
  (and
    (or (<= 0 $q1@511@01) (not (<= 0 $q1@511@01)))
    (=>
      (and
        (<= 0 $q1@511@01)
        (<
          $q1@511@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1)))))
      (and
        (<= 0 $q1@511@01)
        (<
          $q1@511@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))))
        (forall (($q2@512@01 Int)) (!
          (and
            (or (<= 0 $q2@512@01) (not (<= 0 $q2@512@01)))
            (=>
              (and
                (<= 0 $q2@512@01)
                (<
                  $q2@512@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
                      $q1@511@01))))
              (and
                (<= 0 $q2@512@01)
                (<
                  $q2@512@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
                      $q1@511@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
                        $q1@511@01)
                      $q2@512@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
                          $q1@511@01)
                        $q2@512@01))))))
            (or
              (not
                (and
                  (<= 0 $q2@512@01)
                  (<
                    $q2@512@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
                        $q1@511@01)))))
              (and
                (<= 0 $q2@512@01)
                (<
                  $q2@512@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
                      $q1@511@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
              $q1@511@01)
            $q2@512@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1111@166@1111@541-aux|))))
    (or
      (not
        (and
          (<= 0 $q1@511@01)
          (<
            $q1@511@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))))))
      (and
        (<= 0 $q1@511@01)
        (<
          $q1@511@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
    $q1@511@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1111@11@1111@542-aux|)))
(assert (forall (($q1@511@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@511@01)
      (<
        $q1@511@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1)))))
    (forall (($q2@512@01 Int)) (!
      (=>
        (and
          (<= 0 $q2@512@01)
          (<
            $q2@512@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
                $q1@511@01))))
        (and
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
                $q1@511@01)
              $q2@512@01))
          (<=
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
                $q1@511@01)
              $q2@512@01)
            170141183460469231731687303715884105727)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
          $q1@511@01)
        $q2@512@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1111@166@1111@541|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@491@01 1))
    $q1@511@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1111@11@1111@542|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
(declare-const $t@513@01 $Snap)
(assert (= $t@513@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(assert (=
  (Seq_length ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2)))
  2))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $t@514@01 $Snap)
(assert (= $t@514@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $q3@515@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 337 | !(0 <= $q3@515@01) | live]
; [else-branch: 337 | 0 <= $q3@515@01 | live]
(push) ; 5
; [then-branch: 337 | !(0 <= $q3@515@01)]
(assert (not (<= 0 $q3@515@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 337 | 0 <= $q3@515@01]
(assert (<= 0 $q3@515@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@515@01) (not (<= 0 $q3@515@01))))
(push) ; 4
; [then-branch: 338 | 0 <= $q3@515@01 && $q3@515@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))| | live]
; [else-branch: 338 | !(0 <= $q3@515@01 && $q3@515@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))|) | live]
(push) ; 5
; [then-branch: 338 | 0 <= $q3@515@01 && $q3@515@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))|]
(assert (and
  (<= 0 $q3@515@01)
  (<
    $q3@515@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 6
(assert (not (>= $q3@515@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 338 | !(0 <= $q3@515@01 && $q3@515@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@515@01)
    (<
      $q3@515@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@515@01)
      (<
        $q3@515@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))))))
  (and
    (<= 0 $q3@515@01)
    (<
      $q3@515@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@515@01 Int)) (!
  (and
    (or (<= 0 $q3@515@01) (not (<= 0 $q3@515@01)))
    (or
      (not
        (and
          (<= 0 $q3@515@01)
          (<
            $q3@515@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))))))
      (and
        (<= 0 $q3@515@01)
        (<
          $q3@515@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
    $q3@515@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1113@11@1113@242-aux|)))
(assert (forall (($q3@515@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@515@01)
      (<
        $q3@515@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
          $q3@515@01))
      2))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
    $q3@515@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1113@11@1113@242|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==
;       2))
(declare-const $t@516@01 $Snap)
(assert (= $t@516@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2))
(declare-const $q3@517@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 339 | !(0 <= $q3@517@01) | live]
; [else-branch: 339 | 0 <= $q3@517@01 | live]
(push) ; 5
; [then-branch: 339 | !(0 <= $q3@517@01)]
(assert (not (<= 0 $q3@517@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 339 | 0 <= $q3@517@01]
(assert (<= 0 $q3@517@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@517@01) (not (<= 0 $q3@517@01))))
(push) ; 4
; [then-branch: 340 | 0 <= $q3@517@01 && $q3@517@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))| | live]
; [else-branch: 340 | !(0 <= $q3@517@01 && $q3@517@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))|) | live]
(push) ; 5
; [then-branch: 340 | 0 <= $q3@517@01 && $q3@517@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))|]
(assert (and
  (<= 0 $q3@517@01)
  (<
    $q3@517@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
(declare-const $q4@518@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 341 | !(0 <= $q4@518@01) | live]
; [else-branch: 341 | 0 <= $q4@518@01 | live]
(push) ; 8
; [then-branch: 341 | !(0 <= $q4@518@01)]
(assert (not (<= 0 $q4@518@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 341 | 0 <= $q4@518@01]
(assert (<= 0 $q4@518@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@517@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@518@01) (not (<= 0 $q4@518@01))))
(push) ; 7
; [then-branch: 342 | 0 <= $q4@518@01 && $q4@518@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))[$q3@517@01]| | live]
; [else-branch: 342 | !(0 <= $q4@518@01 && $q4@518@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))[$q3@517@01]|) | live]
(push) ; 8
; [then-branch: 342 | 0 <= $q4@518@01 && $q4@518@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))[$q3@517@01]|]
(assert (and
  (<= 0 $q4@518@01)
  (<
    $q4@518@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
        $q3@517@01)))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@517@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q4@518@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 342 | !(0 <= $q4@518@01 && $q4@518@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))[$q3@517@01]|)]
(assert (not
  (and
    (<= 0 $q4@518@01)
    (<
      $q4@518@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
          $q3@517@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@518@01)
      (<
        $q4@518@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
            $q3@517@01)))))
  (and
    (<= 0 $q4@518@01)
    (<
      $q4@518@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
          $q3@517@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@518@01 Int)) (!
  (and
    (or (<= 0 $q4@518@01) (not (<= 0 $q4@518@01)))
    (or
      (not
        (and
          (<= 0 $q4@518@01)
          (<
            $q4@518@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                $q3@517@01)))))
      (and
        (<= 0 $q4@518@01)
        (<
          $q4@518@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
              $q3@517@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
      $q3@517@01)
    $q4@518@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1114@176@1114@422-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 340 | !(0 <= $q3@517@01 && $q3@517@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@517@01)
    (<
      $q3@517@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@517@01)
    (<
      $q3@517@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2)))))
  (and
    (<= 0 $q3@517@01)
    (<
      $q3@517@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))))
    (forall (($q4@518@01 Int)) (!
      (and
        (or (<= 0 $q4@518@01) (not (<= 0 $q4@518@01)))
        (or
          (not
            (and
              (<= 0 $q4@518@01)
              (<
                $q4@518@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                    $q3@517@01)))))
          (and
            (<= 0 $q4@518@01)
            (<
              $q4@518@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                  $q3@517@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
          $q3@517@01)
        $q4@518@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1114@176@1114@422-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@517@01)
      (<
        $q3@517@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))))))
  (and
    (<= 0 $q3@517@01)
    (<
      $q3@517@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@517@01 Int)) (!
  (and
    (or (<= 0 $q3@517@01) (not (<= 0 $q3@517@01)))
    (=>
      (and
        (<= 0 $q3@517@01)
        (<
          $q3@517@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2)))))
      (and
        (<= 0 $q3@517@01)
        (<
          $q3@517@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))))
        (forall (($q4@518@01 Int)) (!
          (and
            (or (<= 0 $q4@518@01) (not (<= 0 $q4@518@01)))
            (or
              (not
                (and
                  (<= 0 $q4@518@01)
                  (<
                    $q4@518@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                        $q3@517@01)))))
              (and
                (<= 0 $q4@518@01)
                (<
                  $q4@518@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                      $q3@517@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
              $q3@517@01)
            $q4@518@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1114@176@1114@422-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@517@01)
          (<
            $q3@517@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))))))
      (and
        (<= 0 $q3@517@01)
        (<
          $q3@517@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
    $q3@517@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1114@11@1114@423-aux|)))
(assert (forall (($q3@517@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@517@01)
      (<
        $q3@517@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2)))))
    (forall (($q4@518@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@518@01)
          (<
            $q4@518@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                $q3@517@01))))
        (=
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                $q3@517@01)
              $q4@518@01))
          2))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
          $q3@517@01)
        $q4@518@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1114@176@1114@422|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
    $q3@517@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1114@11@1114@423|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       (forall $q5: Int ::
;         { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] }
;         0 <= $q5 &&
;         $q5 <
;         |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==>
;         -170141183460469231731687303715884105728 <=
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] &&
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <=
;         170141183460469231731687303715884105727)))
(declare-const $t@519@01 $Snap)
(assert (= $t@519@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)))
(declare-const $q3@520@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 343 | !(0 <= $q3@520@01) | live]
; [else-branch: 343 | 0 <= $q3@520@01 | live]
(push) ; 5
; [then-branch: 343 | !(0 <= $q3@520@01)]
(assert (not (<= 0 $q3@520@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 343 | 0 <= $q3@520@01]
(assert (<= 0 $q3@520@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@520@01) (not (<= 0 $q3@520@01))))
(push) ; 4
; [then-branch: 344 | 0 <= $q3@520@01 && $q3@520@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))| | live]
; [else-branch: 344 | !(0 <= $q3@520@01 && $q3@520@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))|) | live]
(push) ; 5
; [then-branch: 344 | 0 <= $q3@520@01 && $q3@520@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))|]
(assert (and
  (<= 0 $q3@520@01)
  (<
    $q3@520@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
(declare-const $q4@521@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 345 | !(0 <= $q4@521@01) | live]
; [else-branch: 345 | 0 <= $q4@521@01 | live]
(push) ; 8
; [then-branch: 345 | !(0 <= $q4@521@01)]
(assert (not (<= 0 $q4@521@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 345 | 0 <= $q4@521@01]
(assert (<= 0 $q4@521@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@520@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@521@01) (not (<= 0 $q4@521@01))))
(push) ; 7
; [then-branch: 346 | 0 <= $q4@521@01 && $q4@521@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))[$q3@520@01]| | live]
; [else-branch: 346 | !(0 <= $q4@521@01 && $q4@521@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))[$q3@520@01]|) | live]
(push) ; 8
; [then-branch: 346 | 0 <= $q4@521@01 && $q4@521@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))[$q3@520@01]|]
(assert (and
  (<= 0 $q4@521@01)
  (<
    $q4@521@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
        $q3@520@01)))))
; [eval] (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
(declare-const $q5@522@01 Int)
(push) ; 9
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] 0 <= $q5
(push) ; 10
; [then-branch: 347 | !(0 <= $q5@522@01) | live]
; [else-branch: 347 | 0 <= $q5@522@01 | live]
(push) ; 11
; [then-branch: 347 | !(0 <= $q5@522@01)]
(assert (not (<= 0 $q5@522@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 347 | 0 <= $q5@522@01]
(assert (<= 0 $q5@522@01))
; [eval] $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@520@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@521@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q5@522@01) (not (<= 0 $q5@522@01))))
(push) ; 10
; [then-branch: 348 | 0 <= $q5@522@01 && $q5@522@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))[$q3@520@01][$q4@521@01]| | live]
; [else-branch: 348 | !(0 <= $q5@522@01 && $q5@522@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))[$q3@520@01][$q4@521@01]|) | live]
(push) ; 11
; [then-branch: 348 | 0 <= $q5@522@01 && $q5@522@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))[$q3@520@01][$q4@521@01]|]
(assert (and
  (<= 0 $q5@522@01)
  (<
    $q5@522@01
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
          $q3@520@01)
        $q4@521@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@520@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@521@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q5@522@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 349 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))[$q3@520@01][$q4@521@01][$q5@522@01]) | live]
; [else-branch: 349 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))[$q3@520@01][$q4@521@01][$q5@522@01] | live]
(push) ; 13
; [then-branch: 349 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))[$q3@520@01][$q4@521@01][$q5@522@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
          $q3@520@01)
        $q4@521@01)
      $q5@522@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 349 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))[$q3@520@01][$q4@521@01][$q5@522@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
        $q3@520@01)
      $q4@521@01)
    $q5@522@01)))
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 14
(assert (not (>= $q3@520@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q4@521@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q5@522@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
          $q3@520@01)
        $q4@521@01)
      $q5@522@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
            $q3@520@01)
          $q4@521@01)
        $q5@522@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 348 | !(0 <= $q5@522@01 && $q5@522@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))[$q3@520@01][$q4@521@01]|)]
(assert (not
  (and
    (<= 0 $q5@522@01)
    (<
      $q5@522@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
            $q3@520@01)
          $q4@521@01))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q5@522@01)
    (<
      $q5@522@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
            $q3@520@01)
          $q4@521@01))))
  (and
    (<= 0 $q5@522@01)
    (<
      $q5@522@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
            $q3@520@01)
          $q4@521@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
              $q3@520@01)
            $q4@521@01)
          $q5@522@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                $q3@520@01)
              $q4@521@01)
            $q5@522@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q5@522@01)
      (<
        $q5@522@01
        (Seq_length
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
              $q3@520@01)
            $q4@521@01)))))
  (and
    (<= 0 $q5@522@01)
    (<
      $q5@522@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
            $q3@520@01)
          $q4@521@01))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@522@01 Int)) (!
  (and
    (or (<= 0 $q5@522@01) (not (<= 0 $q5@522@01)))
    (=>
      (and
        (<= 0 $q5@522@01)
        (<
          $q5@522@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                $q3@520@01)
              $q4@521@01))))
      (and
        (<= 0 $q5@522@01)
        (<
          $q5@522@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                $q3@520@01)
              $q4@521@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                  $q3@520@01)
                $q4@521@01)
              $q5@522@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                    $q3@520@01)
                  $q4@521@01)
                $q5@522@01))))))
    (or
      (not
        (and
          (<= 0 $q5@522@01)
          (<
            $q5@522@01
            (Seq_length
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                  $q3@520@01)
                $q4@521@01)))))
      (and
        (<= 0 $q5@522@01)
        (<
          $q5@522@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                $q3@520@01)
              $q4@521@01))))))
  :pattern ((Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
        $q3@520@01)
      $q4@521@01)
    $q5@522@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1115@351@1115@766-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 346 | !(0 <= $q4@521@01 && $q4@521@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))[$q3@520@01]|)]
(assert (not
  (and
    (<= 0 $q4@521@01)
    (<
      $q4@521@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
          $q3@520@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q4@521@01)
    (<
      $q4@521@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
          $q3@520@01))))
  (and
    (<= 0 $q4@521@01)
    (<
      $q4@521@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
          $q3@520@01)))
    (forall (($q5@522@01 Int)) (!
      (and
        (or (<= 0 $q5@522@01) (not (<= 0 $q5@522@01)))
        (=>
          (and
            (<= 0 $q5@522@01)
            (<
              $q5@522@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                    $q3@520@01)
                  $q4@521@01))))
          (and
            (<= 0 $q5@522@01)
            (<
              $q5@522@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                    $q3@520@01)
                  $q4@521@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                      $q3@520@01)
                    $q4@521@01)
                  $q5@522@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                        $q3@520@01)
                      $q4@521@01)
                    $q5@522@01))))))
        (or
          (not
            (and
              (<= 0 $q5@522@01)
              (<
                $q5@522@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                      $q3@520@01)
                    $q4@521@01)))))
          (and
            (<= 0 $q5@522@01)
            (<
              $q5@522@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                    $q3@520@01)
                  $q4@521@01))))))
      :pattern ((Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
            $q3@520@01)
          $q4@521@01)
        $q5@522@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1115@351@1115@766-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@521@01)
      (<
        $q4@521@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
            $q3@520@01)))))
  (and
    (<= 0 $q4@521@01)
    (<
      $q4@521@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
          $q3@520@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@521@01 Int)) (!
  (and
    (or (<= 0 $q4@521@01) (not (<= 0 $q4@521@01)))
    (=>
      (and
        (<= 0 $q4@521@01)
        (<
          $q4@521@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
              $q3@520@01))))
      (and
        (<= 0 $q4@521@01)
        (<
          $q4@521@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
              $q3@520@01)))
        (forall (($q5@522@01 Int)) (!
          (and
            (or (<= 0 $q5@522@01) (not (<= 0 $q5@522@01)))
            (=>
              (and
                (<= 0 $q5@522@01)
                (<
                  $q5@522@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                        $q3@520@01)
                      $q4@521@01))))
              (and
                (<= 0 $q5@522@01)
                (<
                  $q5@522@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                        $q3@520@01)
                      $q4@521@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                          $q3@520@01)
                        $q4@521@01)
                      $q5@522@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                            $q3@520@01)
                          $q4@521@01)
                        $q5@522@01))))))
            (or
              (not
                (and
                  (<= 0 $q5@522@01)
                  (<
                    $q5@522@01
                    (Seq_length
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                          $q3@520@01)
                        $q4@521@01)))))
              (and
                (<= 0 $q5@522@01)
                (<
                  $q5@522@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                        $q3@520@01)
                      $q4@521@01))))))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                $q3@520@01)
              $q4@521@01)
            $q5@522@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1115@351@1115@766-aux|))))
    (or
      (not
        (and
          (<= 0 $q4@521@01)
          (<
            $q4@521@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                $q3@520@01)))))
      (and
        (<= 0 $q4@521@01)
        (<
          $q4@521@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
              $q3@520@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
      $q3@520@01)
    $q4@521@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1115@176@1115@767-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 344 | !(0 <= $q3@520@01 && $q3@520@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@491@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@520@01)
    (<
      $q3@520@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@520@01)
    (<
      $q3@520@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2)))))
  (and
    (<= 0 $q3@520@01)
    (<
      $q3@520@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))))
    (forall (($q4@521@01 Int)) (!
      (and
        (or (<= 0 $q4@521@01) (not (<= 0 $q4@521@01)))
        (=>
          (and
            (<= 0 $q4@521@01)
            (<
              $q4@521@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                  $q3@520@01))))
          (and
            (<= 0 $q4@521@01)
            (<
              $q4@521@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                  $q3@520@01)))
            (forall (($q5@522@01 Int)) (!
              (and
                (or (<= 0 $q5@522@01) (not (<= 0 $q5@522@01)))
                (=>
                  (and
                    (<= 0 $q5@522@01)
                    (<
                      $q5@522@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                            $q3@520@01)
                          $q4@521@01))))
                  (and
                    (<= 0 $q5@522@01)
                    (<
                      $q5@522@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                            $q3@520@01)
                          $q4@521@01)))
                    (or
                      (<=
                        (- 0 170141183460469231731687303715884105728)
                        (Seq_index
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                              $q3@520@01)
                            $q4@521@01)
                          $q5@522@01))
                      (not
                        (<=
                          (- 0 170141183460469231731687303715884105728)
                          (Seq_index
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                                $q3@520@01)
                              $q4@521@01)
                            $q5@522@01))))))
                (or
                  (not
                    (and
                      (<= 0 $q5@522@01)
                      (<
                        $q5@522@01
                        (Seq_length
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                              $q3@520@01)
                            $q4@521@01)))))
                  (and
                    (<= 0 $q5@522@01)
                    (<
                      $q5@522@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                            $q3@520@01)
                          $q4@521@01))))))
              :pattern ((Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                    $q3@520@01)
                  $q4@521@01)
                $q5@522@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1115@351@1115@766-aux|))))
        (or
          (not
            (and
              (<= 0 $q4@521@01)
              (<
                $q4@521@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                    $q3@520@01)))))
          (and
            (<= 0 $q4@521@01)
            (<
              $q4@521@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                  $q3@520@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
          $q3@520@01)
        $q4@521@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1115@176@1115@767-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@520@01)
      (<
        $q3@520@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))))))
  (and
    (<= 0 $q3@520@01)
    (<
      $q3@520@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@520@01 Int)) (!
  (and
    (or (<= 0 $q3@520@01) (not (<= 0 $q3@520@01)))
    (=>
      (and
        (<= 0 $q3@520@01)
        (<
          $q3@520@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2)))))
      (and
        (<= 0 $q3@520@01)
        (<
          $q3@520@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))))
        (forall (($q4@521@01 Int)) (!
          (and
            (or (<= 0 $q4@521@01) (not (<= 0 $q4@521@01)))
            (=>
              (and
                (<= 0 $q4@521@01)
                (<
                  $q4@521@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                      $q3@520@01))))
              (and
                (<= 0 $q4@521@01)
                (<
                  $q4@521@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                      $q3@520@01)))
                (forall (($q5@522@01 Int)) (!
                  (and
                    (or (<= 0 $q5@522@01) (not (<= 0 $q5@522@01)))
                    (=>
                      (and
                        (<= 0 $q5@522@01)
                        (<
                          $q5@522@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                                $q3@520@01)
                              $q4@521@01))))
                      (and
                        (<= 0 $q5@522@01)
                        (<
                          $q5@522@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                                $q3@520@01)
                              $q4@521@01)))
                        (or
                          (<=
                            (- 0 170141183460469231731687303715884105728)
                            (Seq_index
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                                  $q3@520@01)
                                $q4@521@01)
                              $q5@522@01))
                          (not
                            (<=
                              (- 0 170141183460469231731687303715884105728)
                              (Seq_index
                                (Seq_index
                                  (Seq_index
                                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                                    $q3@520@01)
                                  $q4@521@01)
                                $q5@522@01))))))
                    (or
                      (not
                        (and
                          (<= 0 $q5@522@01)
                          (<
                            $q5@522@01
                            (Seq_length
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                                  $q3@520@01)
                                $q4@521@01)))))
                      (and
                        (<= 0 $q5@522@01)
                        (<
                          $q5@522@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                                $q3@520@01)
                              $q4@521@01))))))
                  :pattern ((Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                        $q3@520@01)
                      $q4@521@01)
                    $q5@522@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1115@351@1115@766-aux|))))
            (or
              (not
                (and
                  (<= 0 $q4@521@01)
                  (<
                    $q4@521@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                        $q3@520@01)))))
              (and
                (<= 0 $q4@521@01)
                (<
                  $q4@521@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                      $q3@520@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
              $q3@520@01)
            $q4@521@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1115@176@1115@767-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@520@01)
          (<
            $q3@520@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))))))
      (and
        (<= 0 $q3@520@01)
        (<
          $q3@520@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
    $q3@520@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1115@11@1115@768-aux|)))
(assert (forall (($q3@520@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@520@01)
      (<
        $q3@520@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2)))))
    (forall (($q4@521@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@521@01)
          (<
            $q4@521@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                $q3@520@01))))
        (forall (($q5@522@01 Int)) (!
          (=>
            (and
              (<= 0 $q5@522@01)
              (<
                $q5@522@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                      $q3@520@01)
                    $q4@521@01))))
            (and
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                      $q3@520@01)
                    $q4@521@01)
                  $q5@522@01))
              (<=
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                      $q3@520@01)
                    $q4@521@01)
                  $q5@522@01)
                170141183460469231731687303715884105727)))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
                $q3@520@01)
              $q4@521@01)
            $q5@522@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1115@351@1115@766|)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
          $q3@520@01)
        $q4@521@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1115@176@1115@767|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@491@01 2))
    $q3@520@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1115@11@1115@768|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
(declare-const $t@523@01 $Snap)
(assert (= $t@523@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3))) 1000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] }
;     0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] &&
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <=
;     170141183460469231731687303715884105727)
(declare-const $t@524@01 $Snap)
(assert (= $t@524@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] } 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727)
(declare-const $q6@525@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] 0 <= $q6
(push) ; 4
; [then-branch: 350 | !(0 <= $q6@525@01) | live]
; [else-branch: 350 | 0 <= $q6@525@01 | live]
(push) ; 5
; [then-branch: 350 | !(0 <= $q6@525@01)]
(assert (not (<= 0 $q6@525@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 350 | 0 <= $q6@525@01]
(assert (<= 0 $q6@525@01))
; [eval] $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q6@525@01) (not (<= 0 $q6@525@01))))
(push) ; 4
; [then-branch: 351 | 0 <= $q6@525@01 && $q6@525@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@491@01, 3))| | live]
; [else-branch: 351 | !(0 <= $q6@525@01 && $q6@525@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@491@01, 3))|) | live]
(push) ; 5
; [then-branch: 351 | 0 <= $q6@525@01 && $q6@525@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@491@01, 3))|]
(assert (and
  (<= 0 $q6@525@01)
  (<
    $q6@525@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (>= $q6@525@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 352 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@491@01, 3))[$q6@525@01]) | live]
; [else-branch: 352 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@491@01, 3))[$q6@525@01] | live]
(push) ; 7
; [then-branch: 352 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@491@01, 3))[$q6@525@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3))
      $q6@525@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 352 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@491@01, 3))[$q6@525@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3)) $q6@525@01)))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (>= $q6@525@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3))
      $q6@525@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3))
        $q6@525@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 351 | !(0 <= $q6@525@01 && $q6@525@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@491@01, 3))|)]
(assert (not
  (and
    (<= 0 $q6@525@01)
    (<
      $q6@525@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q6@525@01)
    (<
      $q6@525@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3)))))
  (and
    (<= 0 $q6@525@01)
    (<
      $q6@525@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3))
          $q6@525@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3))
            $q6@525@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q6@525@01)
      (<
        $q6@525@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3))))))
  (and
    (<= 0 $q6@525@01)
    (<
      $q6@525@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@525@01 Int)) (!
  (and
    (or (<= 0 $q6@525@01) (not (<= 0 $q6@525@01)))
    (=>
      (and
        (<= 0 $q6@525@01)
        (<
          $q6@525@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3)))))
      (and
        (<= 0 $q6@525@01)
        (<
          $q6@525@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3))
              $q6@525@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3))
                $q6@525@01))))))
    (or
      (not
        (and
          (<= 0 $q6@525@01)
          (<
            $q6@525@01
            (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3))))))
      (and
        (<= 0 $q6@525@01)
        (<
          $q6@525@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3))
    $q6@525@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1117@11@1117@346-aux|)))
(assert (forall (($q6@525@01 Int)) (!
  (=>
    (and
      (<= 0 $q6@525@01)
      (<
        $q6@525@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3))
          $q6@525@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3))
          $q6@525@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3))
    $q6@525@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1117@11@1117@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==
;     10)
(declare-const $t@526@01 $Snap)
(assert (= $t@526@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10)
(declare-const $q7@527@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@527@01 Int)) (!
  (=
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@527@01))
    10)
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@527@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1118@11@1118@209|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     (forall $q8: Int ::
;       { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] }
;       0 <= $q8 &&
;       $q8 <
;       |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==>
;       -170141183460469231731687303715884105728 <=
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] &&
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <=
;       170141183460469231731687303715884105727))
(declare-const $t@528@01 $Snap)
(assert (= $t@528@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727))
(declare-const $q7@529@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727)
(declare-const $q8@530@01 Int)
(push) ; 4
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] 0 <= $q8
(push) ; 5
; [then-branch: 353 | !(0 <= $q8@530@01) | live]
; [else-branch: 353 | 0 <= $q8@530@01 | live]
(push) ; 6
; [then-branch: 353 | !(0 <= $q8@530@01)]
(assert (not (<= 0 $q8@530@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 353 | 0 <= $q8@530@01]
(assert (<= 0 $q8@530@01))
; [eval] $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q8@530@01) (not (<= 0 $q8@530@01))))
(push) ; 5
; [then-branch: 354 | 0 <= $q8@530@01 && $q8@530@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@491@01, 4)), $q7@529@01)| | live]
; [else-branch: 354 | !(0 <= $q8@530@01 && $q8@530@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@491@01, 4)), $q7@529@01)|) | live]
(push) ; 6
; [then-branch: 354 | 0 <= $q8@530@01 && $q8@530@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@491@01, 4)), $q7@529@01)|]
(assert (and
  (<= 0 $q8@530@01)
  (<
    $q8@530@01
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] -170141183460469231731687303715884105728
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 7
(assert (not (>= $q8@530@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 355 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@491@01, 4)), $q7@529@01)[$q8@530@01]) | live]
; [else-branch: 355 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@491@01, 4)), $q7@529@01)[$q8@530@01] | live]
(push) ; 8
; [then-branch: 355 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@491@01, 4)), $q7@529@01)[$q8@530@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01)
      $q8@530@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 355 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@491@01, 4)), $q7@529@01)[$q8@530@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01)
    $q8@530@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 9
(assert (not (>= $q8@530@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01)
      $q8@530@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01)
        $q8@530@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 354 | !(0 <= $q8@530@01 && $q8@530@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@491@01, 4)), $q7@529@01)|)]
(assert (not
  (and
    (<= 0 $q8@530@01)
    (<
      $q8@530@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q8@530@01)
    (<
      $q8@530@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01))))
  (and
    (<= 0 $q8@530@01)
    (<
      $q8@530@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01)
          $q8@530@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01)
            $q8@530@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q8@530@01)
      (<
        $q8@530@01
        (Seq_length
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01)))))
  (and
    (<= 0 $q8@530@01)
    (<
      $q8@530@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q8@530@01 Int)) (!
  (and
    (or (<= 0 $q8@530@01) (not (<= 0 $q8@530@01)))
    (=>
      (and
        (<= 0 $q8@530@01)
        (<
          $q8@530@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01))))
      (and
        (<= 0 $q8@530@01)
        (<
          $q8@530@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01)
              $q8@530@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01)
                $q8@530@01))))))
    (or
      (not
        (and
          (<= 0 $q8@530@01)
          (<
            $q8@530@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01)))))
      (and
        (<= 0 $q8@530@01)
        (<
          $q8@530@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01))))))
  :pattern ((Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01)
    $q8@530@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1119@119@1119@606-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@529@01 Int)) (!
  (forall (($q8@530@01 Int)) (!
    (and
      (or (<= 0 $q8@530@01) (not (<= 0 $q8@530@01)))
      (=>
        (and
          (<= 0 $q8@530@01)
          (<
            $q8@530@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01))))
        (and
          (<= 0 $q8@530@01)
          (<
            $q8@530@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01)))
          (or
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01)
                $q8@530@01))
            (not
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01)
                  $q8@530@01))))))
      (or
        (not
          (and
            (<= 0 $q8@530@01)
            (<
              $q8@530@01
              (Seq_length
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01)))))
        (and
          (<= 0 $q8@530@01)
          (<
            $q8@530@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01))))))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01)
      $q8@530@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1119@119@1119@606-aux|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1119@11@1119@607-aux|)))
(assert (forall (($q7@529@01 Int)) (!
  (forall (($q8@530@01 Int)) (!
    (=>
      (and
        (<= 0 $q8@530@01)
        (<
          $q8@530@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01))))
      (and
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01)
            $q8@530@01))
        (<=
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01)
            $q8@530@01)
          170141183460469231731687303715884105727)))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01)
      $q8@530@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1119@119@1119@606|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@491@01 4)) $q7@529@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1119@11@1119@607|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@531@01 $Snap)
(assert (= $t@531@01 ($Snap.combine ($Snap.first $t@531@01) ($Snap.second $t@531@01))))
(assert (= ($Snap.first $t@531@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@491@01 5))))
(assert (= ($Snap.second $t@531@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@491@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@532@01 $Snap)
(assert (= $t@532@01 ($Snap.combine ($Snap.first $t@532@01) ($Snap.second $t@532@01))))
(assert (= ($Snap.first $t@532@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@491@01 6))))
(assert (= ($Snap.second $t@532@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@491@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@533@01 $Snap)
(assert (= $t@533@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q9@534@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 356 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@491@01, 8)), $q9@534@01)) | live]
; [else-branch: 356 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@491@01, 8)), $q9@534@01) | live]
(push) ; 5
; [then-branch: 356 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@491@01, 8)), $q9@534@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 8)) $q9@534@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 356 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@491@01, 8)), $q9@534@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 8)) $q9@534@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 8)) $q9@534@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 8)) $q9@534@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@534@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 8)) $q9@534@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 8)) $q9@534@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 8)) $q9@534@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1122@11@1122@345-aux|)))
(assert (forall (($q9@534@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 8)) $q9@534@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 8)) $q9@534@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 8)) $q9@534@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1122@11@1122@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@535@01 $Snap)
(assert (= $t@535@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q9@536@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@536@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 8)) $q9@536@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 8)) $q9@536@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1123@11@1123@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@537@01 $Snap)
(assert (= $t@537@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q10@538@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 357 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@491@01, 9)), $q10@538@01)) | live]
; [else-branch: 357 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@491@01, 9)), $q10@538@01) | live]
(push) ; 5
; [then-branch: 357 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@491@01, 9)), $q10@538@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 9)) $q10@538@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 357 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@491@01, 9)), $q10@538@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 9)) $q10@538@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 9)) $q10@538@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 9)) $q10@538@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@538@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 9)) $q10@538@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 9)) $q10@538@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 9)) $q10@538@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1124@11@1124@349-aux|)))
(assert (forall (($q10@538@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 9)) $q10@538@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 9)) $q10@538@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 9)) $q10@538@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1124@11@1124@349|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@539@01 $Snap)
(assert (= $t@539@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q10@540@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@540@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 9)) $q10@540@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@491@01 9)) $q10@540@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1125@11@1125@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@541@01 $Snap)
(assert (= $t@541@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@491@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@542@01 $Snap)
(assert (= $t@542@01 ($Snap.combine ($Snap.first $t@542@01) ($Snap.second $t@542@01))))
(assert (= ($Snap.first $t@542@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@542@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@543@01 $Snap)
(assert (= $t@543@01 ($Snap.combine ($Snap.first $t@543@01) ($Snap.second $t@543@01))))
(assert (= ($Snap.first $t@543@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@488@01 0))))
(assert (= ($Snap.second $t@543@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@488@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@544@01 $Snap)
(assert (= $t@544@01 ($Snap.combine ($Snap.first $t@544@01) ($Snap.second $t@544@01))))
(assert (= ($Snap.first $t@544@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@488@01 1))))
(assert (= ($Snap.second $t@544@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@488@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@545@01 $Snap)
(assert (= $t@545@01 ($Snap.combine ($Snap.first $t@545@01) ($Snap.second $t@545@01))))
(assert (= ($Snap.first $t@545@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@488@01 2))))
(assert (= ($Snap.second $t@545@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@488@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@546@01 $Snap)
(assert (= $t@546@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@488@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@547@01 $Snap)
(assert (= $t@547@01 ($Snap.combine ($Snap.first $t@547@01) ($Snap.second $t@547@01))))
(assert (= ($Snap.first $t@547@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@488@01 4))))
(assert (= ($Snap.second $t@547@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@488@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@548@01 $Snap)
(assert (= $t@548@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@488@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@549@01 $Snap)
(assert (= $t@549@01 ($Snap.combine ($Snap.first $t@549@01) ($Snap.second $t@549@01))))
(assert (= ($Snap.first $t@549@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@487@01 0))))
(assert (= ($Snap.second $t@549@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@487@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@550@01 $Snap)
(assert (= $t@550@01 ($Snap.combine ($Snap.first $t@550@01) ($Snap.second $t@550@01))))
(assert (= ($Snap.first $t@550@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@487@01 1))))
(assert (= ($Snap.second $t@550@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@487@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@551@01 $Snap)
(assert (= $t@551@01 ($Snap.combine ($Snap.first $t@551@01) ($Snap.second $t@551@01))))
(assert (= ($Snap.first $t@551@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@487@01 2))))
(assert (= ($Snap.second $t@551@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@487@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@552@01 $Snap)
(assert (= $t@552@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@487@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@553@01 $Snap)
(assert (= $t@553@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@487@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@554@01 $Snap)
(assert (= $t@554@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@555@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc(self, 3)): Seq[Int])
(declare-const $t@556@01 $Snap)
(assert (= $t@556@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@557@01 $Snap)
(assert (= $t@557@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@487@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; l$i := $wrap($range(0, 12)[0])
; [eval] $wrap($range(0, 12)[0])
; [eval] $range(0, 12)[0]
; [eval] $range(0, 12)
(set-option :timeout 0)
(push) ; 3
(assert (not (< 0 (Seq_length ($range<Seq<Int>> 0 12)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const l$i@558@01 $Int)
(assert (= l$i@558@01 ($wrap<$Int> (Seq_index ($range<Seq<Int>> 0 12) 0))))
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(push) ; 3
; [then-branch: 358 | !(0 <= $unwrap[Int](l$i@558@01)) | live]
; [else-branch: 358 | 0 <= $unwrap[Int](l$i@558@01) | live]
(push) ; 4
; [then-branch: 358 | !(0 <= $unwrap[Int](l$i@558@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@558@01))))
(pop) ; 4
(push) ; 4
; [else-branch: 358 | 0 <= $unwrap[Int](l$i@558@01)]
(assert (<= 0 ($unwrap<Int> l$i@558@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 ($unwrap<Int> l$i@558@01)) (not (<= 0 ($unwrap<Int> l$i@558@01)))))
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@558@01))
  (<
    ($unwrap<Int> l$i@558@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0)))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 359 | !(0 <= $unwrap[Int](l$i@558@01) && $unwrap[Int](l$i@558@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@491@01, 0))|) | dead]
; [else-branch: 359 | 0 <= $unwrap[Int](l$i@558@01) && $unwrap[Int](l$i@558@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@491@01, 0))| | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 359 | 0 <= $unwrap[Int](l$i@558@01) && $unwrap[Int](l$i@558@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@491@01, 0))|]
(assert (and
  (<= 0 ($unwrap<Int> l$i@558@01))
  (<
    ($unwrap<Int> l$i@558@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))))))
(pop) ; 3
; [eval] !!(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(push) ; 3
; [then-branch: 360 | !(0 <= $unwrap[Int](l$i@558@01)) | live]
; [else-branch: 360 | 0 <= $unwrap[Int](l$i@558@01) | live]
(push) ; 4
; [then-branch: 360 | !(0 <= $unwrap[Int](l$i@558@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@558@01))))
(pop) ; 4
(push) ; 4
; [else-branch: 360 | 0 <= $unwrap[Int](l$i@558@01)]
(assert (<= 0 ($unwrap<Int> l$i@558@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 ($unwrap<Int> l$i@558@01))
    (<
      ($unwrap<Int> l$i@558@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@558@01))
  (<
    ($unwrap<Int> l$i@558@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0)))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 361 | 0 <= $unwrap[Int](l$i@558@01) && $unwrap[Int](l$i@558@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@491@01, 0))| | live]
; [else-branch: 361 | !(0 <= $unwrap[Int](l$i@558@01) && $unwrap[Int](l$i@558@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@491@01, 0))|) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 361 | 0 <= $unwrap[Int](l$i@558@01) && $unwrap[Int](l$i@558@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@491@01, 0))|]
(assert (and
  (<= 0 ($unwrap<Int> l$i@558@01))
  (<
    ($unwrap<Int> l$i@558@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))))))
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) :=
;   42]): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) := 42]): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) := 42]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$i)
(push) ; 4
(assert (not (>= ($unwrap<Int> l$i@558@01) 0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const self@559@01 $Struct)
(assert (=
  self@559@01
  ($struct_set<$Struct> self@491@01 0 (Seq_append
    (Seq_take
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
      ($unwrap<Int> l$i@558@01))
    (Seq_append
      (Seq_singleton 42)
      (Seq_drop
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
        (+ ($unwrap<Int> l$i@558@01) 1)))))))
; [exec]
; label continue_0
; [exec]
; l$i := $wrap($range(0, 12)[1])
; [eval] $wrap($range(0, 12)[1])
; [eval] $range(0, 12)[1]
; [eval] $range(0, 12)
(push) ; 4
(assert (not (< 1 (Seq_length ($range<Seq<Int>> 0 12)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const l$i@560@01 $Int)
(assert (= l$i@560@01 ($wrap<$Int> (Seq_index ($range<Seq<Int>> 0 12) 1))))
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(push) ; 4
; [then-branch: 362 | !(0 <= $unwrap[Int](l$i@560@01)) | live]
; [else-branch: 362 | 0 <= $unwrap[Int](l$i@560@01) | live]
(push) ; 5
; [then-branch: 362 | !(0 <= $unwrap[Int](l$i@560@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@560@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 362 | 0 <= $unwrap[Int](l$i@560@01)]
(assert (<= 0 ($unwrap<Int> l$i@560@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 ($unwrap<Int> l$i@560@01)) (not (<= 0 ($unwrap<Int> l$i@560@01)))))
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@560@01))
  (<
    ($unwrap<Int> l$i@560@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@559@01 0)))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 363 | !(0 <= $unwrap[Int](l$i@560@01) && $unwrap[Int](l$i@560@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@559@01, 0))|) | dead]
; [else-branch: 363 | 0 <= $unwrap[Int](l$i@560@01) && $unwrap[Int](l$i@560@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@559@01, 0))| | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 363 | 0 <= $unwrap[Int](l$i@560@01) && $unwrap[Int](l$i@560@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@559@01, 0))|]
(assert (and
  (<= 0 ($unwrap<Int> l$i@560@01))
  (<
    ($unwrap<Int> l$i@560@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@559@01 0))))))
(pop) ; 4
; [eval] !!(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(push) ; 4
; [then-branch: 364 | !(0 <= $unwrap[Int](l$i@560@01)) | live]
; [else-branch: 364 | 0 <= $unwrap[Int](l$i@560@01) | live]
(push) ; 5
; [then-branch: 364 | !(0 <= $unwrap[Int](l$i@560@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@560@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 364 | 0 <= $unwrap[Int](l$i@560@01)]
(assert (<= 0 ($unwrap<Int> l$i@560@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 ($unwrap<Int> l$i@560@01))
    (<
      ($unwrap<Int> l$i@560@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@559@01 0))))))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@560@01))
  (<
    ($unwrap<Int> l$i@560@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@559@01 0)))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 365 | 0 <= $unwrap[Int](l$i@560@01) && $unwrap[Int](l$i@560@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@559@01, 0))| | live]
; [else-branch: 365 | !(0 <= $unwrap[Int](l$i@560@01) && $unwrap[Int](l$i@560@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@559@01, 0))|) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 365 | 0 <= $unwrap[Int](l$i@560@01) && $unwrap[Int](l$i@560@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@559@01, 0))|]
(assert (and
  (<= 0 ($unwrap<Int> l$i@560@01))
  (<
    ($unwrap<Int> l$i@560@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@559@01 0))))))
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) :=
;   42]): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) := 42]): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) := 42]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$i)
(push) ; 5
(assert (not (>= ($unwrap<Int> l$i@560@01) 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const self@561@01 $Struct)
(assert (=
  self@561@01
  ($struct_set<$Struct> self@559@01 0 (Seq_append
    (Seq_take
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@559@01 0))
      ($unwrap<Int> l$i@560@01))
    (Seq_append
      (Seq_singleton 42)
      (Seq_drop
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@559@01 0))
        (+ ($unwrap<Int> l$i@560@01) 1)))))))
; [exec]
; label continue_1
; [exec]
; l$i := $wrap($range(0, 12)[2])
; [eval] $wrap($range(0, 12)[2])
; [eval] $range(0, 12)[2]
; [eval] $range(0, 12)
(push) ; 5
(assert (not (< 2 (Seq_length ($range<Seq<Int>> 0 12)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const l$i@562@01 $Int)
(assert (= l$i@562@01 ($wrap<$Int> (Seq_index ($range<Seq<Int>> 0 12) 2))))
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(push) ; 5
; [then-branch: 366 | !(0 <= $unwrap[Int](l$i@562@01)) | live]
; [else-branch: 366 | 0 <= $unwrap[Int](l$i@562@01) | live]
(push) ; 6
; [then-branch: 366 | !(0 <= $unwrap[Int](l$i@562@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@562@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 366 | 0 <= $unwrap[Int](l$i@562@01)]
(assert (<= 0 ($unwrap<Int> l$i@562@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 ($unwrap<Int> l$i@562@01)) (not (<= 0 ($unwrap<Int> l$i@562@01)))))
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@562@01))
  (<
    ($unwrap<Int> l$i@562@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@561@01 0)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 367 | !(0 <= $unwrap[Int](l$i@562@01) && $unwrap[Int](l$i@562@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@561@01, 0))|) | dead]
; [else-branch: 367 | 0 <= $unwrap[Int](l$i@562@01) && $unwrap[Int](l$i@562@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@561@01, 0))| | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 367 | 0 <= $unwrap[Int](l$i@562@01) && $unwrap[Int](l$i@562@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@561@01, 0))|]
(assert (and
  (<= 0 ($unwrap<Int> l$i@562@01))
  (<
    ($unwrap<Int> l$i@562@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@561@01 0))))))
(pop) ; 5
; [eval] !!(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(push) ; 5
; [then-branch: 368 | !(0 <= $unwrap[Int](l$i@562@01)) | live]
; [else-branch: 368 | 0 <= $unwrap[Int](l$i@562@01) | live]
(push) ; 6
; [then-branch: 368 | !(0 <= $unwrap[Int](l$i@562@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@562@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 368 | 0 <= $unwrap[Int](l$i@562@01)]
(assert (<= 0 ($unwrap<Int> l$i@562@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 ($unwrap<Int> l$i@562@01))
    (<
      ($unwrap<Int> l$i@562@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@561@01 0))))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@562@01))
  (<
    ($unwrap<Int> l$i@562@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@561@01 0)))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 369 | 0 <= $unwrap[Int](l$i@562@01) && $unwrap[Int](l$i@562@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@561@01, 0))| | live]
; [else-branch: 369 | !(0 <= $unwrap[Int](l$i@562@01) && $unwrap[Int](l$i@562@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@561@01, 0))|) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 369 | 0 <= $unwrap[Int](l$i@562@01) && $unwrap[Int](l$i@562@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@561@01, 0))|]
(assert (and
  (<= 0 ($unwrap<Int> l$i@562@01))
  (<
    ($unwrap<Int> l$i@562@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@561@01 0))))))
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) :=
;   42]): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) := 42]): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) := 42]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$i)
(push) ; 6
(assert (not (>= ($unwrap<Int> l$i@562@01) 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const self@563@01 $Struct)
(assert (=
  self@563@01
  ($struct_set<$Struct> self@561@01 0 (Seq_append
    (Seq_take
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@561@01 0))
      ($unwrap<Int> l$i@562@01))
    (Seq_append
      (Seq_singleton 42)
      (Seq_drop
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@561@01 0))
        (+ ($unwrap<Int> l$i@562@01) 1)))))))
; [exec]
; label continue_2
; [exec]
; l$i := $wrap($range(0, 12)[3])
; [eval] $wrap($range(0, 12)[3])
; [eval] $range(0, 12)[3]
; [eval] $range(0, 12)
(push) ; 6
(assert (not (< 3 (Seq_length ($range<Seq<Int>> 0 12)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const l$i@564@01 $Int)
(assert (= l$i@564@01 ($wrap<$Int> (Seq_index ($range<Seq<Int>> 0 12) 3))))
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(push) ; 6
; [then-branch: 370 | !(0 <= $unwrap[Int](l$i@564@01)) | live]
; [else-branch: 370 | 0 <= $unwrap[Int](l$i@564@01) | live]
(push) ; 7
; [then-branch: 370 | !(0 <= $unwrap[Int](l$i@564@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@564@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 370 | 0 <= $unwrap[Int](l$i@564@01)]
(assert (<= 0 ($unwrap<Int> l$i@564@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 ($unwrap<Int> l$i@564@01)) (not (<= 0 ($unwrap<Int> l$i@564@01)))))
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@564@01))
  (<
    ($unwrap<Int> l$i@564@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@563@01 0)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 371 | !(0 <= $unwrap[Int](l$i@564@01) && $unwrap[Int](l$i@564@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@563@01, 0))|) | dead]
; [else-branch: 371 | 0 <= $unwrap[Int](l$i@564@01) && $unwrap[Int](l$i@564@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@563@01, 0))| | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 371 | 0 <= $unwrap[Int](l$i@564@01) && $unwrap[Int](l$i@564@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@563@01, 0))|]
(assert (and
  (<= 0 ($unwrap<Int> l$i@564@01))
  (<
    ($unwrap<Int> l$i@564@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@563@01 0))))))
(pop) ; 6
; [eval] !!(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(push) ; 6
; [then-branch: 372 | !(0 <= $unwrap[Int](l$i@564@01)) | live]
; [else-branch: 372 | 0 <= $unwrap[Int](l$i@564@01) | live]
(push) ; 7
; [then-branch: 372 | !(0 <= $unwrap[Int](l$i@564@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@564@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 372 | 0 <= $unwrap[Int](l$i@564@01)]
(assert (<= 0 ($unwrap<Int> l$i@564@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 ($unwrap<Int> l$i@564@01))
    (<
      ($unwrap<Int> l$i@564@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@563@01 0))))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@564@01))
  (<
    ($unwrap<Int> l$i@564@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@563@01 0)))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 373 | 0 <= $unwrap[Int](l$i@564@01) && $unwrap[Int](l$i@564@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@563@01, 0))| | live]
; [else-branch: 373 | !(0 <= $unwrap[Int](l$i@564@01) && $unwrap[Int](l$i@564@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@563@01, 0))|) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 373 | 0 <= $unwrap[Int](l$i@564@01) && $unwrap[Int](l$i@564@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@563@01, 0))|]
(assert (and
  (<= 0 ($unwrap<Int> l$i@564@01))
  (<
    ($unwrap<Int> l$i@564@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@563@01 0))))))
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) :=
;   42]): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) := 42]): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) := 42]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$i)
(push) ; 7
(assert (not (>= ($unwrap<Int> l$i@564@01) 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const self@565@01 $Struct)
(assert (=
  self@565@01
  ($struct_set<$Struct> self@563@01 0 (Seq_append
    (Seq_take
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@563@01 0))
      ($unwrap<Int> l$i@564@01))
    (Seq_append
      (Seq_singleton 42)
      (Seq_drop
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@563@01 0))
        (+ ($unwrap<Int> l$i@564@01) 1)))))))
; [exec]
; label continue_3
; [exec]
; l$i := $wrap($range(0, 12)[4])
; [eval] $wrap($range(0, 12)[4])
; [eval] $range(0, 12)[4]
; [eval] $range(0, 12)
(push) ; 7
(assert (not (< 4 (Seq_length ($range<Seq<Int>> 0 12)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const l$i@566@01 $Int)
(assert (= l$i@566@01 ($wrap<$Int> (Seq_index ($range<Seq<Int>> 0 12) 4))))
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(push) ; 7
; [then-branch: 374 | !(0 <= $unwrap[Int](l$i@566@01)) | live]
; [else-branch: 374 | 0 <= $unwrap[Int](l$i@566@01) | live]
(push) ; 8
; [then-branch: 374 | !(0 <= $unwrap[Int](l$i@566@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@566@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 374 | 0 <= $unwrap[Int](l$i@566@01)]
(assert (<= 0 ($unwrap<Int> l$i@566@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 ($unwrap<Int> l$i@566@01)) (not (<= 0 ($unwrap<Int> l$i@566@01)))))
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@566@01))
  (<
    ($unwrap<Int> l$i@566@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@565@01 0)))))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
; [then-branch: 375 | !(0 <= $unwrap[Int](l$i@566@01) && $unwrap[Int](l$i@566@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@565@01, 0))|) | dead]
; [else-branch: 375 | 0 <= $unwrap[Int](l$i@566@01) && $unwrap[Int](l$i@566@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@565@01, 0))| | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 375 | 0 <= $unwrap[Int](l$i@566@01) && $unwrap[Int](l$i@566@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@565@01, 0))|]
(assert (and
  (<= 0 ($unwrap<Int> l$i@566@01))
  (<
    ($unwrap<Int> l$i@566@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@565@01 0))))))
(pop) ; 7
; [eval] !!(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(push) ; 7
; [then-branch: 376 | !(0 <= $unwrap[Int](l$i@566@01)) | live]
; [else-branch: 376 | 0 <= $unwrap[Int](l$i@566@01) | live]
(push) ; 8
; [then-branch: 376 | !(0 <= $unwrap[Int](l$i@566@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@566@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 376 | 0 <= $unwrap[Int](l$i@566@01)]
(assert (<= 0 ($unwrap<Int> l$i@566@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 ($unwrap<Int> l$i@566@01))
    (<
      ($unwrap<Int> l$i@566@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@565@01 0))))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@566@01))
  (<
    ($unwrap<Int> l$i@566@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@565@01 0)))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 377 | 0 <= $unwrap[Int](l$i@566@01) && $unwrap[Int](l$i@566@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@565@01, 0))| | live]
; [else-branch: 377 | !(0 <= $unwrap[Int](l$i@566@01) && $unwrap[Int](l$i@566@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@565@01, 0))|) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 377 | 0 <= $unwrap[Int](l$i@566@01) && $unwrap[Int](l$i@566@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@565@01, 0))|]
(assert (and
  (<= 0 ($unwrap<Int> l$i@566@01))
  (<
    ($unwrap<Int> l$i@566@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@565@01 0))))))
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) :=
;   42]): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) := 42]): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) := 42]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$i)
(push) ; 8
(assert (not (>= ($unwrap<Int> l$i@566@01) 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(declare-const self@567@01 $Struct)
(assert (=
  self@567@01
  ($struct_set<$Struct> self@565@01 0 (Seq_append
    (Seq_take
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@565@01 0))
      ($unwrap<Int> l$i@566@01))
    (Seq_append
      (Seq_singleton 42)
      (Seq_drop
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@565@01 0))
        (+ ($unwrap<Int> l$i@566@01) 1)))))))
; [exec]
; label continue_4
; [exec]
; l$i := $wrap($range(0, 12)[5])
; [eval] $wrap($range(0, 12)[5])
; [eval] $range(0, 12)[5]
; [eval] $range(0, 12)
(push) ; 8
(assert (not (< 5 (Seq_length ($range<Seq<Int>> 0 12)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(declare-const l$i@568@01 $Int)
(assert (= l$i@568@01 ($wrap<$Int> (Seq_index ($range<Seq<Int>> 0 12) 5))))
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(push) ; 8
; [then-branch: 378 | !(0 <= $unwrap[Int](l$i@568@01)) | live]
; [else-branch: 378 | 0 <= $unwrap[Int](l$i@568@01) | live]
(push) ; 9
; [then-branch: 378 | !(0 <= $unwrap[Int](l$i@568@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@568@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 378 | 0 <= $unwrap[Int](l$i@568@01)]
(assert (<= 0 ($unwrap<Int> l$i@568@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 ($unwrap<Int> l$i@568@01)) (not (<= 0 ($unwrap<Int> l$i@568@01)))))
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@568@01))
  (<
    ($unwrap<Int> l$i@568@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@567@01 0)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 ($unwrap<Int> l$i@568@01))
    (<
      ($unwrap<Int> l$i@568@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@567@01 0))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 379 | !(0 <= $unwrap[Int](l$i@568@01) && $unwrap[Int](l$i@568@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@567@01, 0))|) | live]
; [else-branch: 379 | 0 <= $unwrap[Int](l$i@568@01) && $unwrap[Int](l$i@568@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@567@01, 0))| | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 379 | !(0 <= $unwrap[Int](l$i@568@01) && $unwrap[Int](l$i@568@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@567@01, 0))|)]
(assert (not
  (and
    (<= 0 ($unwrap<Int> l$i@568@01))
    (<
      ($unwrap<Int> l$i@568@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@567@01 0)))))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale (forall q$i: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] }
;     -170141183460469231731687303715884105728 <= q$i &&
;     q$i <= 170141183460469231731687303715884105727 ==>
;     0 <= q$i && q$i < 12 ==>
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42)
; [eval] (forall q$i: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] } -170141183460469231731687303715884105728 <= q$i && q$i <= 170141183460469231731687303715884105727 ==> 0 <= q$i && q$i < 12 ==> ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42)
(declare-const q$i@569@01 Int)
(push) ; 9
; [eval] -170141183460469231731687303715884105728 <= q$i && q$i <= 170141183460469231731687303715884105727 ==> 0 <= q$i && q$i < 12 ==> ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42
; [eval] -170141183460469231731687303715884105728 <= q$i && q$i <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= q$i
; [eval] -170141183460469231731687303715884105728
(push) ; 10
; [then-branch: 380 | !(-170141183460469231731687303715884105728 <= q$i@569@01) | live]
; [else-branch: 380 | -170141183460469231731687303715884105728 <= q$i@569@01 | live]
(push) ; 11
; [then-branch: 380 | !(-170141183460469231731687303715884105728 <= q$i@569@01)]
(assert (not (<= (- 0 170141183460469231731687303715884105728) q$i@569@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 380 | -170141183460469231731687303715884105728 <= q$i@569@01]
(assert (<= (- 0 170141183460469231731687303715884105728) q$i@569@01))
; [eval] q$i <= 170141183460469231731687303715884105727
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or
  (<= (- 0 170141183460469231731687303715884105728) q$i@569@01)
  (not (<= (- 0 170141183460469231731687303715884105728) q$i@569@01))))
(push) ; 10
; [then-branch: 381 | -170141183460469231731687303715884105728 <= q$i@569@01 && q$i@569@01 <= 170141183460469231731687303715884105727 | live]
; [else-branch: 381 | !(-170141183460469231731687303715884105728 <= q$i@569@01 && q$i@569@01 <= 170141183460469231731687303715884105727) | live]
(push) ; 11
; [then-branch: 381 | -170141183460469231731687303715884105728 <= q$i@569@01 && q$i@569@01 <= 170141183460469231731687303715884105727]
(assert (and
  (<= (- 0 170141183460469231731687303715884105728) q$i@569@01)
  (<= q$i@569@01 170141183460469231731687303715884105727)))
; [eval] 0 <= q$i && q$i < 12 ==> ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42
; [eval] 0 <= q$i && q$i < 12
; [eval] 0 <= q$i
(push) ; 12
; [then-branch: 382 | !(0 <= q$i@569@01) | live]
; [else-branch: 382 | 0 <= q$i@569@01 | live]
(push) ; 13
; [then-branch: 382 | !(0 <= q$i@569@01)]
(assert (not (<= 0 q$i@569@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 382 | 0 <= q$i@569@01]
(assert (<= 0 q$i@569@01))
; [eval] q$i < 12
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@569@01) (not (<= 0 q$i@569@01))))
(push) ; 12
; [then-branch: 383 | 0 <= q$i@569@01 && q$i@569@01 < 12 | live]
; [else-branch: 383 | !(0 <= q$i@569@01 && q$i@569@01 < 12) | live]
(push) ; 13
; [then-branch: 383 | 0 <= q$i@569@01 && q$i@569@01 < 12]
(assert (and (<= 0 q$i@569@01) (< q$i@569@01 12)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 14
(assert (not (>= q$i@569@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (<
  q$i@569@01
  (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(push) ; 13
; [else-branch: 383 | !(0 <= q$i@569@01 && q$i@569@01 < 12)]
(assert (not (and (<= 0 q$i@569@01) (< q$i@569@01 12))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (not (and (<= 0 q$i@569@01) (< q$i@569@01 12)))
  (and (<= 0 q$i@569@01) (< q$i@569@01 12))))
(pop) ; 11
(push) ; 11
; [else-branch: 381 | !(-170141183460469231731687303715884105728 <= q$i@569@01 && q$i@569@01 <= 170141183460469231731687303715884105727)]
(assert (not
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@569@01)
    (<= q$i@569@01 170141183460469231731687303715884105727))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@569@01)
    (<= q$i@569@01 170141183460469231731687303715884105727))
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@569@01)
    (<= q$i@569@01 170141183460469231731687303715884105727)
    (or (<= 0 q$i@569@01) (not (<= 0 q$i@569@01)))
    (or
      (not (and (<= 0 q$i@569@01) (< q$i@569@01 12)))
      (and (<= 0 q$i@569@01) (< q$i@569@01 12))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= (- 0 170141183460469231731687303715884105728) q$i@569@01)
      (<= q$i@569@01 170141183460469231731687303715884105727)))
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@569@01)
    (<= q$i@569@01 170141183460469231731687303715884105727))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@569@01 Int)) (!
  (and
    (or
      (<= (- 0 170141183460469231731687303715884105728) q$i@569@01)
      (not (<= (- 0 170141183460469231731687303715884105728) q$i@569@01)))
    (=>
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@569@01)
        (<= q$i@569@01 170141183460469231731687303715884105727))
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@569@01)
        (<= q$i@569@01 170141183460469231731687303715884105727)
        (or (<= 0 q$i@569@01) (not (<= 0 q$i@569@01)))
        (or
          (not (and (<= 0 q$i@569@01) (< q$i@569@01 12)))
          (and (<= 0 q$i@569@01) (< q$i@569@01 12)))))
    (or
      (not
        (and
          (<= (- 0 170141183460469231731687303715884105728) q$i@569@01)
          (<= q$i@569@01 170141183460469231731687303715884105727)))
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@569@01)
        (<= q$i@569@01 170141183460469231731687303715884105727))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
    q$i@569@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1266@11@1266@268-aux|)))
(push) ; 9
(assert (not (forall ((q$i@569@01 Int)) (!
  (=>
    (and
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@569@01)
        (<= q$i@569@01 170141183460469231731687303715884105727))
      (and (<= 0 q$i@569@01) (< q$i@569@01 12)))
    (=
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
        q$i@569@01)
      42))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
    q$i@569@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1266@11@1266@268|))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(assert (forall ((q$i@569@01 Int)) (!
  (=>
    (and
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@569@01)
        (<= q$i@569@01 170141183460469231731687303715884105727))
      (and (<= 0 q$i@569@01) (< q$i@569@01 12)))
    (=
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
        q$i@569@01)
      42))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
    q$i@569@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1266@11@1266@268|)))
; [eval] !$succ
(push) ; 9
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 384 | True | dead]
; [else-branch: 384 | False | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 384 | False]
(assert false)
(pop) ; 9
; [then-branch: 385 | False | dead]
; [else-branch: 385 | True | live]
(push) ; 9
; [else-branch: 385 | True]
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 379 | 0 <= $unwrap[Int](l$i@568@01) && $unwrap[Int](l$i@568@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@567@01, 0))|]
(assert (and
  (<= 0 ($unwrap<Int> l$i@568@01))
  (<
    ($unwrap<Int> l$i@568@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@567@01 0))))))
(pop) ; 8
; [eval] !!(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(push) ; 8
; [then-branch: 386 | !(0 <= $unwrap[Int](l$i@568@01)) | live]
; [else-branch: 386 | 0 <= $unwrap[Int](l$i@568@01) | live]
(push) ; 9
; [then-branch: 386 | !(0 <= $unwrap[Int](l$i@568@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@568@01))))
(pop) ; 9
(push) ; 9
; [else-branch: 386 | 0 <= $unwrap[Int](l$i@568@01)]
(assert (<= 0 ($unwrap<Int> l$i@568@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 ($unwrap<Int> l$i@568@01))
    (<
      ($unwrap<Int> l$i@568@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@567@01 0))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@568@01))
  (<
    ($unwrap<Int> l$i@568@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@567@01 0)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.01s
; (get-info :all-statistics)
; [then-branch: 387 | 0 <= $unwrap[Int](l$i@568@01) && $unwrap[Int](l$i@568@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@567@01, 0))| | live]
; [else-branch: 387 | !(0 <= $unwrap[Int](l$i@568@01) && $unwrap[Int](l$i@568@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@567@01, 0))|) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 387 | 0 <= $unwrap[Int](l$i@568@01) && $unwrap[Int](l$i@568@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@567@01, 0))|]
(assert (and
  (<= 0 ($unwrap<Int> l$i@568@01))
  (<
    ($unwrap<Int> l$i@568@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@567@01 0))))))
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) :=
;   42]): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) := 42]): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) := 42]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$i)
(push) ; 9
(assert (not (>= ($unwrap<Int> l$i@568@01) 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const self@570@01 $Struct)
(assert (=
  self@570@01
  ($struct_set<$Struct> self@567@01 0 (Seq_append
    (Seq_take
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@567@01 0))
      ($unwrap<Int> l$i@568@01))
    (Seq_append
      (Seq_singleton 42)
      (Seq_drop
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@567@01 0))
        (+ ($unwrap<Int> l$i@568@01) 1)))))))
; [exec]
; label continue_5
; [exec]
; l$i := $wrap($range(0, 12)[6])
; [eval] $wrap($range(0, 12)[6])
; [eval] $range(0, 12)[6]
; [eval] $range(0, 12)
(push) ; 9
(assert (not (< 6 (Seq_length ($range<Seq<Int>> 0 12)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const l$i@571@01 $Int)
(assert (= l$i@571@01 ($wrap<$Int> (Seq_index ($range<Seq<Int>> 0 12) 6))))
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(push) ; 9
; [then-branch: 388 | !(0 <= $unwrap[Int](l$i@571@01)) | live]
; [else-branch: 388 | 0 <= $unwrap[Int](l$i@571@01) | live]
(push) ; 10
; [then-branch: 388 | !(0 <= $unwrap[Int](l$i@571@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@571@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 388 | 0 <= $unwrap[Int](l$i@571@01)]
(assert (<= 0 ($unwrap<Int> l$i@571@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 ($unwrap<Int> l$i@571@01)) (not (<= 0 ($unwrap<Int> l$i@571@01)))))
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@571@01))
  (<
    ($unwrap<Int> l$i@571@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@570@01 0)))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 ($unwrap<Int> l$i@571@01))
    (<
      ($unwrap<Int> l$i@571@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@570@01 0))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 389 | !(0 <= $unwrap[Int](l$i@571@01) && $unwrap[Int](l$i@571@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@570@01, 0))|) | live]
; [else-branch: 389 | 0 <= $unwrap[Int](l$i@571@01) && $unwrap[Int](l$i@571@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@570@01, 0))| | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 389 | !(0 <= $unwrap[Int](l$i@571@01) && $unwrap[Int](l$i@571@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@570@01, 0))|)]
(assert (not
  (and
    (<= 0 ($unwrap<Int> l$i@571@01))
    (<
      ($unwrap<Int> l$i@571@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@570@01 0)))))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale (forall q$i: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] }
;     -170141183460469231731687303715884105728 <= q$i &&
;     q$i <= 170141183460469231731687303715884105727 ==>
;     0 <= q$i && q$i < 12 ==>
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42)
; [eval] (forall q$i: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] } -170141183460469231731687303715884105728 <= q$i && q$i <= 170141183460469231731687303715884105727 ==> 0 <= q$i && q$i < 12 ==> ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42)
(declare-const q$i@572@01 Int)
(push) ; 10
; [eval] -170141183460469231731687303715884105728 <= q$i && q$i <= 170141183460469231731687303715884105727 ==> 0 <= q$i && q$i < 12 ==> ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42
; [eval] -170141183460469231731687303715884105728 <= q$i && q$i <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= q$i
; [eval] -170141183460469231731687303715884105728
(push) ; 11
; [then-branch: 390 | !(-170141183460469231731687303715884105728 <= q$i@572@01) | live]
; [else-branch: 390 | -170141183460469231731687303715884105728 <= q$i@572@01 | live]
(push) ; 12
; [then-branch: 390 | !(-170141183460469231731687303715884105728 <= q$i@572@01)]
(assert (not (<= (- 0 170141183460469231731687303715884105728) q$i@572@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 390 | -170141183460469231731687303715884105728 <= q$i@572@01]
(assert (<= (- 0 170141183460469231731687303715884105728) q$i@572@01))
; [eval] q$i <= 170141183460469231731687303715884105727
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or
  (<= (- 0 170141183460469231731687303715884105728) q$i@572@01)
  (not (<= (- 0 170141183460469231731687303715884105728) q$i@572@01))))
(push) ; 11
; [then-branch: 391 | -170141183460469231731687303715884105728 <= q$i@572@01 && q$i@572@01 <= 170141183460469231731687303715884105727 | live]
; [else-branch: 391 | !(-170141183460469231731687303715884105728 <= q$i@572@01 && q$i@572@01 <= 170141183460469231731687303715884105727) | live]
(push) ; 12
; [then-branch: 391 | -170141183460469231731687303715884105728 <= q$i@572@01 && q$i@572@01 <= 170141183460469231731687303715884105727]
(assert (and
  (<= (- 0 170141183460469231731687303715884105728) q$i@572@01)
  (<= q$i@572@01 170141183460469231731687303715884105727)))
; [eval] 0 <= q$i && q$i < 12 ==> ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42
; [eval] 0 <= q$i && q$i < 12
; [eval] 0 <= q$i
(push) ; 13
; [then-branch: 392 | !(0 <= q$i@572@01) | live]
; [else-branch: 392 | 0 <= q$i@572@01 | live]
(push) ; 14
; [then-branch: 392 | !(0 <= q$i@572@01)]
(assert (not (<= 0 q$i@572@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 392 | 0 <= q$i@572@01]
(assert (<= 0 q$i@572@01))
; [eval] q$i < 12
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@572@01) (not (<= 0 q$i@572@01))))
(push) ; 13
; [then-branch: 393 | 0 <= q$i@572@01 && q$i@572@01 < 12 | live]
; [else-branch: 393 | !(0 <= q$i@572@01 && q$i@572@01 < 12) | live]
(push) ; 14
; [then-branch: 393 | 0 <= q$i@572@01 && q$i@572@01 < 12]
(assert (and (<= 0 q$i@572@01) (< q$i@572@01 12)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 15
(assert (not (>= q$i@572@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(assert (not (<
  q$i@572@01
  (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
(push) ; 14
; [else-branch: 393 | !(0 <= q$i@572@01 && q$i@572@01 < 12)]
(assert (not (and (<= 0 q$i@572@01) (< q$i@572@01 12))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (not (and (<= 0 q$i@572@01) (< q$i@572@01 12)))
  (and (<= 0 q$i@572@01) (< q$i@572@01 12))))
(pop) ; 12
(push) ; 12
; [else-branch: 391 | !(-170141183460469231731687303715884105728 <= q$i@572@01 && q$i@572@01 <= 170141183460469231731687303715884105727)]
(assert (not
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@572@01)
    (<= q$i@572@01 170141183460469231731687303715884105727))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=>
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@572@01)
    (<= q$i@572@01 170141183460469231731687303715884105727))
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@572@01)
    (<= q$i@572@01 170141183460469231731687303715884105727)
    (or (<= 0 q$i@572@01) (not (<= 0 q$i@572@01)))
    (or
      (not (and (<= 0 q$i@572@01) (< q$i@572@01 12)))
      (and (<= 0 q$i@572@01) (< q$i@572@01 12))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= (- 0 170141183460469231731687303715884105728) q$i@572@01)
      (<= q$i@572@01 170141183460469231731687303715884105727)))
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@572@01)
    (<= q$i@572@01 170141183460469231731687303715884105727))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@572@01 Int)) (!
  (and
    (or
      (<= (- 0 170141183460469231731687303715884105728) q$i@572@01)
      (not (<= (- 0 170141183460469231731687303715884105728) q$i@572@01)))
    (=>
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@572@01)
        (<= q$i@572@01 170141183460469231731687303715884105727))
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@572@01)
        (<= q$i@572@01 170141183460469231731687303715884105727)
        (or (<= 0 q$i@572@01) (not (<= 0 q$i@572@01)))
        (or
          (not (and (<= 0 q$i@572@01) (< q$i@572@01 12)))
          (and (<= 0 q$i@572@01) (< q$i@572@01 12)))))
    (or
      (not
        (and
          (<= (- 0 170141183460469231731687303715884105728) q$i@572@01)
          (<= q$i@572@01 170141183460469231731687303715884105727)))
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@572@01)
        (<= q$i@572@01 170141183460469231731687303715884105727))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
    q$i@572@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1266@11@1266@268-aux|)))
(push) ; 10
(assert (not (forall ((q$i@572@01 Int)) (!
  (=>
    (and
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@572@01)
        (<= q$i@572@01 170141183460469231731687303715884105727))
      (and (<= 0 q$i@572@01) (< q$i@572@01 12)))
    (=
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
        q$i@572@01)
      42))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
    q$i@572@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1266@11@1266@268|))))
(check-sat)
; unsat
(pop) ; 10
; 0.02s
; (get-info :all-statistics)
(assert (forall ((q$i@572@01 Int)) (!
  (=>
    (and
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@572@01)
        (<= q$i@572@01 170141183460469231731687303715884105727))
      (and (<= 0 q$i@572@01) (< q$i@572@01 12)))
    (=
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
        q$i@572@01)
      42))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
    q$i@572@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1266@11@1266@268|)))
; [eval] !$succ
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 394 | True | live]
; [else-branch: 394 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 394 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@573@01 $Snap)
(assert (= $t@573@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@502@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unsat
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@574@01 $Struct)
(assert (=
  self@574@01
  ($struct_set<$Struct> self@491@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@491@01 5))
    l$havoc@502@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 11
(assert (not (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@574@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@574@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3))))
(pop) ; 10
; [then-branch: 395 | False | dead]
; [else-branch: 395 | True | live]
(push) ; 10
; [else-branch: 395 | True]
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 389 | 0 <= $unwrap[Int](l$i@571@01) && $unwrap[Int](l$i@571@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@570@01, 0))|]
(assert (and
  (<= 0 ($unwrap<Int> l$i@571@01))
  (<
    ($unwrap<Int> l$i@571@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@570@01 0))))))
(pop) ; 9
; [eval] !!(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(push) ; 9
; [then-branch: 396 | !(0 <= $unwrap[Int](l$i@571@01)) | live]
; [else-branch: 396 | 0 <= $unwrap[Int](l$i@571@01) | live]
(push) ; 10
; [then-branch: 396 | !(0 <= $unwrap[Int](l$i@571@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@571@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 396 | 0 <= $unwrap[Int](l$i@571@01)]
(assert (<= 0 ($unwrap<Int> l$i@571@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 ($unwrap<Int> l$i@571@01))
    (<
      ($unwrap<Int> l$i@571@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@570@01 0))))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@571@01))
  (<
    ($unwrap<Int> l$i@571@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@570@01 0)))))))
(check-sat)
; unknown
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
; [then-branch: 397 | 0 <= $unwrap[Int](l$i@571@01) && $unwrap[Int](l$i@571@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@570@01, 0))| | live]
; [else-branch: 397 | !(0 <= $unwrap[Int](l$i@571@01) && $unwrap[Int](l$i@571@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@570@01, 0))|) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 397 | 0 <= $unwrap[Int](l$i@571@01) && $unwrap[Int](l$i@571@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@570@01, 0))|]
(assert (and
  (<= 0 ($unwrap<Int> l$i@571@01))
  (<
    ($unwrap<Int> l$i@571@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@570@01 0))))))
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) :=
;   42]): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) := 42]): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) := 42]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$i)
(push) ; 10
(assert (not (>= ($unwrap<Int> l$i@571@01) 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const self@575@01 $Struct)
(assert (=
  self@575@01
  ($struct_set<$Struct> self@570@01 0 (Seq_append
    (Seq_take
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@570@01 0))
      ($unwrap<Int> l$i@571@01))
    (Seq_append
      (Seq_singleton 42)
      (Seq_drop
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@570@01 0))
        (+ ($unwrap<Int> l$i@571@01) 1)))))))
; [exec]
; label continue_6
; [exec]
; l$i := $wrap($range(0, 12)[7])
; [eval] $wrap($range(0, 12)[7])
; [eval] $range(0, 12)[7]
; [eval] $range(0, 12)
(push) ; 10
(assert (not (< 7 (Seq_length ($range<Seq<Int>> 0 12)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const l$i@576@01 $Int)
(assert (= l$i@576@01 ($wrap<$Int> (Seq_index ($range<Seq<Int>> 0 12) 7))))
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(push) ; 10
; [then-branch: 398 | !(0 <= $unwrap[Int](l$i@576@01)) | live]
; [else-branch: 398 | 0 <= $unwrap[Int](l$i@576@01) | live]
(push) ; 11
; [then-branch: 398 | !(0 <= $unwrap[Int](l$i@576@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@576@01))))
(pop) ; 11
(push) ; 11
; [else-branch: 398 | 0 <= $unwrap[Int](l$i@576@01)]
(assert (<= 0 ($unwrap<Int> l$i@576@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 ($unwrap<Int> l$i@576@01)) (not (<= 0 ($unwrap<Int> l$i@576@01)))))
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@576@01))
  (<
    ($unwrap<Int> l$i@576@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@575@01 0)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 ($unwrap<Int> l$i@576@01))
    (<
      ($unwrap<Int> l$i@576@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@575@01 0))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 399 | !(0 <= $unwrap[Int](l$i@576@01) && $unwrap[Int](l$i@576@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@575@01, 0))|) | live]
; [else-branch: 399 | 0 <= $unwrap[Int](l$i@576@01) && $unwrap[Int](l$i@576@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@575@01, 0))| | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 399 | !(0 <= $unwrap[Int](l$i@576@01) && $unwrap[Int](l$i@576@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@575@01, 0))|)]
(assert (not
  (and
    (<= 0 ($unwrap<Int> l$i@576@01))
    (<
      ($unwrap<Int> l$i@576@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@575@01 0)))))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale (forall q$i: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] }
;     -170141183460469231731687303715884105728 <= q$i &&
;     q$i <= 170141183460469231731687303715884105727 ==>
;     0 <= q$i && q$i < 12 ==>
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42)
; [eval] (forall q$i: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] } -170141183460469231731687303715884105728 <= q$i && q$i <= 170141183460469231731687303715884105727 ==> 0 <= q$i && q$i < 12 ==> ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42)
(declare-const q$i@577@01 Int)
(push) ; 11
; [eval] -170141183460469231731687303715884105728 <= q$i && q$i <= 170141183460469231731687303715884105727 ==> 0 <= q$i && q$i < 12 ==> ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42
; [eval] -170141183460469231731687303715884105728 <= q$i && q$i <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= q$i
; [eval] -170141183460469231731687303715884105728
(push) ; 12
; [then-branch: 400 | !(-170141183460469231731687303715884105728 <= q$i@577@01) | live]
; [else-branch: 400 | -170141183460469231731687303715884105728 <= q$i@577@01 | live]
(push) ; 13
; [then-branch: 400 | !(-170141183460469231731687303715884105728 <= q$i@577@01)]
(assert (not (<= (- 0 170141183460469231731687303715884105728) q$i@577@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 400 | -170141183460469231731687303715884105728 <= q$i@577@01]
(assert (<= (- 0 170141183460469231731687303715884105728) q$i@577@01))
; [eval] q$i <= 170141183460469231731687303715884105727
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<= (- 0 170141183460469231731687303715884105728) q$i@577@01)
  (not (<= (- 0 170141183460469231731687303715884105728) q$i@577@01))))
(push) ; 12
; [then-branch: 401 | -170141183460469231731687303715884105728 <= q$i@577@01 && q$i@577@01 <= 170141183460469231731687303715884105727 | live]
; [else-branch: 401 | !(-170141183460469231731687303715884105728 <= q$i@577@01 && q$i@577@01 <= 170141183460469231731687303715884105727) | live]
(push) ; 13
; [then-branch: 401 | -170141183460469231731687303715884105728 <= q$i@577@01 && q$i@577@01 <= 170141183460469231731687303715884105727]
(assert (and
  (<= (- 0 170141183460469231731687303715884105728) q$i@577@01)
  (<= q$i@577@01 170141183460469231731687303715884105727)))
; [eval] 0 <= q$i && q$i < 12 ==> ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42
; [eval] 0 <= q$i && q$i < 12
; [eval] 0 <= q$i
(push) ; 14
; [then-branch: 402 | !(0 <= q$i@577@01) | live]
; [else-branch: 402 | 0 <= q$i@577@01 | live]
(push) ; 15
; [then-branch: 402 | !(0 <= q$i@577@01)]
(assert (not (<= 0 q$i@577@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 402 | 0 <= q$i@577@01]
(assert (<= 0 q$i@577@01))
; [eval] q$i < 12
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@577@01) (not (<= 0 q$i@577@01))))
(push) ; 14
; [then-branch: 403 | 0 <= q$i@577@01 && q$i@577@01 < 12 | live]
; [else-branch: 403 | !(0 <= q$i@577@01 && q$i@577@01 < 12) | live]
(push) ; 15
; [then-branch: 403 | 0 <= q$i@577@01 && q$i@577@01 < 12]
(assert (and (<= 0 q$i@577@01) (< q$i@577@01 12)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 16
(assert (not (>= q$i@577@01 0)))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(push) ; 16
(assert (not (<
  q$i@577@01
  (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
(push) ; 15
; [else-branch: 403 | !(0 <= q$i@577@01 && q$i@577@01 < 12)]
(assert (not (and (<= 0 q$i@577@01) (< q$i@577@01 12))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (not (and (<= 0 q$i@577@01) (< q$i@577@01 12)))
  (and (<= 0 q$i@577@01) (< q$i@577@01 12))))
(pop) ; 13
(push) ; 13
; [else-branch: 401 | !(-170141183460469231731687303715884105728 <= q$i@577@01 && q$i@577@01 <= 170141183460469231731687303715884105727)]
(assert (not
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@577@01)
    (<= q$i@577@01 170141183460469231731687303715884105727))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@577@01)
    (<= q$i@577@01 170141183460469231731687303715884105727))
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@577@01)
    (<= q$i@577@01 170141183460469231731687303715884105727)
    (or (<= 0 q$i@577@01) (not (<= 0 q$i@577@01)))
    (or
      (not (and (<= 0 q$i@577@01) (< q$i@577@01 12)))
      (and (<= 0 q$i@577@01) (< q$i@577@01 12))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= (- 0 170141183460469231731687303715884105728) q$i@577@01)
      (<= q$i@577@01 170141183460469231731687303715884105727)))
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@577@01)
    (<= q$i@577@01 170141183460469231731687303715884105727))))
(pop) ; 11
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@577@01 Int)) (!
  (and
    (or
      (<= (- 0 170141183460469231731687303715884105728) q$i@577@01)
      (not (<= (- 0 170141183460469231731687303715884105728) q$i@577@01)))
    (=>
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@577@01)
        (<= q$i@577@01 170141183460469231731687303715884105727))
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@577@01)
        (<= q$i@577@01 170141183460469231731687303715884105727)
        (or (<= 0 q$i@577@01) (not (<= 0 q$i@577@01)))
        (or
          (not (and (<= 0 q$i@577@01) (< q$i@577@01 12)))
          (and (<= 0 q$i@577@01) (< q$i@577@01 12)))))
    (or
      (not
        (and
          (<= (- 0 170141183460469231731687303715884105728) q$i@577@01)
          (<= q$i@577@01 170141183460469231731687303715884105727)))
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@577@01)
        (<= q$i@577@01 170141183460469231731687303715884105727))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
    q$i@577@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1266@11@1266@268-aux|)))
(push) ; 11
(assert (not (forall ((q$i@577@01 Int)) (!
  (=>
    (and
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@577@01)
        (<= q$i@577@01 170141183460469231731687303715884105727))
      (and (<= 0 q$i@577@01) (< q$i@577@01 12)))
    (=
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
        q$i@577@01)
      42))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
    q$i@577@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1266@11@1266@268|))))
(check-sat)
; unsat
(pop) ; 11
; 0.03s
; (get-info :all-statistics)
(assert (forall ((q$i@577@01 Int)) (!
  (=>
    (and
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@577@01)
        (<= q$i@577@01 170141183460469231731687303715884105727))
      (and (<= 0 q$i@577@01) (< q$i@577@01 12)))
    (=
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
        q$i@577@01)
      42))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
    q$i@577@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1266@11@1266@268|)))
; [eval] !$succ
(push) ; 11
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 404 | True | live]
; [else-branch: 404 | False | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 404 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@578@01 $Snap)
(assert (= $t@578@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@502@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@579@01 $Struct)
(assert (=
  self@579@01
  ($struct_set<$Struct> self@491@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@491@01 5))
    l$havoc@502@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 12
(assert (not (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@579@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@579@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3))))
(pop) ; 11
; [then-branch: 405 | False | dead]
; [else-branch: 405 | True | live]
(push) ; 11
; [else-branch: 405 | True]
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 399 | 0 <= $unwrap[Int](l$i@576@01) && $unwrap[Int](l$i@576@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@575@01, 0))|]
(assert (and
  (<= 0 ($unwrap<Int> l$i@576@01))
  (<
    ($unwrap<Int> l$i@576@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@575@01 0))))))
(pop) ; 10
; [eval] !!(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(push) ; 10
; [then-branch: 406 | !(0 <= $unwrap[Int](l$i@576@01)) | live]
; [else-branch: 406 | 0 <= $unwrap[Int](l$i@576@01) | live]
(push) ; 11
; [then-branch: 406 | !(0 <= $unwrap[Int](l$i@576@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@576@01))))
(pop) ; 11
(push) ; 11
; [else-branch: 406 | 0 <= $unwrap[Int](l$i@576@01)]
(assert (<= 0 ($unwrap<Int> l$i@576@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 ($unwrap<Int> l$i@576@01))
    (<
      ($unwrap<Int> l$i@576@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@575@01 0))))))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@576@01))
  (<
    ($unwrap<Int> l$i@576@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@575@01 0)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.01s
; (get-info :all-statistics)
; [then-branch: 407 | 0 <= $unwrap[Int](l$i@576@01) && $unwrap[Int](l$i@576@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@575@01, 0))| | live]
; [else-branch: 407 | !(0 <= $unwrap[Int](l$i@576@01) && $unwrap[Int](l$i@576@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@575@01, 0))|) | live]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 407 | 0 <= $unwrap[Int](l$i@576@01) && $unwrap[Int](l$i@576@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@575@01, 0))|]
(assert (and
  (<= 0 ($unwrap<Int> l$i@576@01))
  (<
    ($unwrap<Int> l$i@576@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@575@01 0))))))
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) :=
;   42]): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) := 42]): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) := 42]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$i)
(push) ; 11
(assert (not (>= ($unwrap<Int> l$i@576@01) 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const self@580@01 $Struct)
(assert (=
  self@580@01
  ($struct_set<$Struct> self@575@01 0 (Seq_append
    (Seq_take
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@575@01 0))
      ($unwrap<Int> l$i@576@01))
    (Seq_append
      (Seq_singleton 42)
      (Seq_drop
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@575@01 0))
        (+ ($unwrap<Int> l$i@576@01) 1)))))))
; [exec]
; label continue_7
; [exec]
; l$i := $wrap($range(0, 12)[8])
; [eval] $wrap($range(0, 12)[8])
; [eval] $range(0, 12)[8]
; [eval] $range(0, 12)
(push) ; 11
(assert (not (< 8 (Seq_length ($range<Seq<Int>> 0 12)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(declare-const l$i@581@01 $Int)
(assert (= l$i@581@01 ($wrap<$Int> (Seq_index ($range<Seq<Int>> 0 12) 8))))
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(push) ; 11
; [then-branch: 408 | !(0 <= $unwrap[Int](l$i@581@01)) | live]
; [else-branch: 408 | 0 <= $unwrap[Int](l$i@581@01) | live]
(push) ; 12
; [then-branch: 408 | !(0 <= $unwrap[Int](l$i@581@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@581@01))))
(pop) ; 12
(push) ; 12
; [else-branch: 408 | 0 <= $unwrap[Int](l$i@581@01)]
(assert (<= 0 ($unwrap<Int> l$i@581@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 ($unwrap<Int> l$i@581@01)) (not (<= 0 ($unwrap<Int> l$i@581@01)))))
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@581@01))
  (<
    ($unwrap<Int> l$i@581@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@580@01 0)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 ($unwrap<Int> l$i@581@01))
    (<
      ($unwrap<Int> l$i@581@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@580@01 0))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 409 | !(0 <= $unwrap[Int](l$i@581@01) && $unwrap[Int](l$i@581@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@580@01, 0))|) | live]
; [else-branch: 409 | 0 <= $unwrap[Int](l$i@581@01) && $unwrap[Int](l$i@581@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@580@01, 0))| | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 409 | !(0 <= $unwrap[Int](l$i@581@01) && $unwrap[Int](l$i@581@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@580@01, 0))|)]
(assert (not
  (and
    (<= 0 ($unwrap<Int> l$i@581@01))
    (<
      ($unwrap<Int> l$i@581@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@580@01 0)))))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale (forall q$i: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] }
;     -170141183460469231731687303715884105728 <= q$i &&
;     q$i <= 170141183460469231731687303715884105727 ==>
;     0 <= q$i && q$i < 12 ==>
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42)
; [eval] (forall q$i: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] } -170141183460469231731687303715884105728 <= q$i && q$i <= 170141183460469231731687303715884105727 ==> 0 <= q$i && q$i < 12 ==> ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42)
(declare-const q$i@582@01 Int)
(push) ; 12
; [eval] -170141183460469231731687303715884105728 <= q$i && q$i <= 170141183460469231731687303715884105727 ==> 0 <= q$i && q$i < 12 ==> ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42
; [eval] -170141183460469231731687303715884105728 <= q$i && q$i <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= q$i
; [eval] -170141183460469231731687303715884105728
(push) ; 13
; [then-branch: 410 | !(-170141183460469231731687303715884105728 <= q$i@582@01) | live]
; [else-branch: 410 | -170141183460469231731687303715884105728 <= q$i@582@01 | live]
(push) ; 14
; [then-branch: 410 | !(-170141183460469231731687303715884105728 <= q$i@582@01)]
(assert (not (<= (- 0 170141183460469231731687303715884105728) q$i@582@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 410 | -170141183460469231731687303715884105728 <= q$i@582@01]
(assert (<= (- 0 170141183460469231731687303715884105728) q$i@582@01))
; [eval] q$i <= 170141183460469231731687303715884105727
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or
  (<= (- 0 170141183460469231731687303715884105728) q$i@582@01)
  (not (<= (- 0 170141183460469231731687303715884105728) q$i@582@01))))
(push) ; 13
; [then-branch: 411 | -170141183460469231731687303715884105728 <= q$i@582@01 && q$i@582@01 <= 170141183460469231731687303715884105727 | live]
; [else-branch: 411 | !(-170141183460469231731687303715884105728 <= q$i@582@01 && q$i@582@01 <= 170141183460469231731687303715884105727) | live]
(push) ; 14
; [then-branch: 411 | -170141183460469231731687303715884105728 <= q$i@582@01 && q$i@582@01 <= 170141183460469231731687303715884105727]
(assert (and
  (<= (- 0 170141183460469231731687303715884105728) q$i@582@01)
  (<= q$i@582@01 170141183460469231731687303715884105727)))
; [eval] 0 <= q$i && q$i < 12 ==> ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42
; [eval] 0 <= q$i && q$i < 12
; [eval] 0 <= q$i
(push) ; 15
; [then-branch: 412 | !(0 <= q$i@582@01) | live]
; [else-branch: 412 | 0 <= q$i@582@01 | live]
(push) ; 16
; [then-branch: 412 | !(0 <= q$i@582@01)]
(assert (not (<= 0 q$i@582@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 412 | 0 <= q$i@582@01]
(assert (<= 0 q$i@582@01))
; [eval] q$i < 12
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@582@01) (not (<= 0 q$i@582@01))))
(push) ; 15
; [then-branch: 413 | 0 <= q$i@582@01 && q$i@582@01 < 12 | live]
; [else-branch: 413 | !(0 <= q$i@582@01 && q$i@582@01 < 12) | live]
(push) ; 16
; [then-branch: 413 | 0 <= q$i@582@01 && q$i@582@01 < 12]
(assert (and (<= 0 q$i@582@01) (< q$i@582@01 12)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 17
(assert (not (>= q$i@582@01 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(assert (not (<
  q$i@582@01
  (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(pop) ; 16
(push) ; 16
; [else-branch: 413 | !(0 <= q$i@582@01 && q$i@582@01 < 12)]
(assert (not (and (<= 0 q$i@582@01) (< q$i@582@01 12))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (not (and (<= 0 q$i@582@01) (< q$i@582@01 12)))
  (and (<= 0 q$i@582@01) (< q$i@582@01 12))))
(pop) ; 14
(push) ; 14
; [else-branch: 411 | !(-170141183460469231731687303715884105728 <= q$i@582@01 && q$i@582@01 <= 170141183460469231731687303715884105727)]
(assert (not
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@582@01)
    (<= q$i@582@01 170141183460469231731687303715884105727))))
(pop) ; 14
(pop) ; 13
; Joined path conditions
(assert (=>
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@582@01)
    (<= q$i@582@01 170141183460469231731687303715884105727))
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@582@01)
    (<= q$i@582@01 170141183460469231731687303715884105727)
    (or (<= 0 q$i@582@01) (not (<= 0 q$i@582@01)))
    (or
      (not (and (<= 0 q$i@582@01) (< q$i@582@01 12)))
      (and (<= 0 q$i@582@01) (< q$i@582@01 12))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= (- 0 170141183460469231731687303715884105728) q$i@582@01)
      (<= q$i@582@01 170141183460469231731687303715884105727)))
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@582@01)
    (<= q$i@582@01 170141183460469231731687303715884105727))))
(pop) ; 12
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@582@01 Int)) (!
  (and
    (or
      (<= (- 0 170141183460469231731687303715884105728) q$i@582@01)
      (not (<= (- 0 170141183460469231731687303715884105728) q$i@582@01)))
    (=>
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@582@01)
        (<= q$i@582@01 170141183460469231731687303715884105727))
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@582@01)
        (<= q$i@582@01 170141183460469231731687303715884105727)
        (or (<= 0 q$i@582@01) (not (<= 0 q$i@582@01)))
        (or
          (not (and (<= 0 q$i@582@01) (< q$i@582@01 12)))
          (and (<= 0 q$i@582@01) (< q$i@582@01 12)))))
    (or
      (not
        (and
          (<= (- 0 170141183460469231731687303715884105728) q$i@582@01)
          (<= q$i@582@01 170141183460469231731687303715884105727)))
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@582@01)
        (<= q$i@582@01 170141183460469231731687303715884105727))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
    q$i@582@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1266@11@1266@268-aux|)))
(push) ; 12
(assert (not (forall ((q$i@582@01 Int)) (!
  (=>
    (and
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@582@01)
        (<= q$i@582@01 170141183460469231731687303715884105727))
      (and (<= 0 q$i@582@01) (< q$i@582@01 12)))
    (=
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
        q$i@582@01)
      42))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
    q$i@582@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1266@11@1266@268|))))
(check-sat)
; unsat
(pop) ; 12
; 0.02s
; (get-info :all-statistics)
(assert (forall ((q$i@582@01 Int)) (!
  (=>
    (and
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@582@01)
        (<= q$i@582@01 170141183460469231731687303715884105727))
      (and (<= 0 q$i@582@01) (< q$i@582@01 12)))
    (=
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
        q$i@582@01)
      42))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
    q$i@582@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1266@11@1266@268|)))
; [eval] !$succ
(push) ; 12
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 414 | True | live]
; [else-branch: 414 | False | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 414 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@583@01 $Snap)
(assert (= $t@583@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@502@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@584@01 $Struct)
(assert (=
  self@584@01
  ($struct_set<$Struct> self@491@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@491@01 5))
    l$havoc@502@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 13
(assert (not (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@584@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@584@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3))))
(pop) ; 12
; [then-branch: 415 | False | dead]
; [else-branch: 415 | True | live]
(push) ; 12
; [else-branch: 415 | True]
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 409 | 0 <= $unwrap[Int](l$i@581@01) && $unwrap[Int](l$i@581@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@580@01, 0))|]
(assert (and
  (<= 0 ($unwrap<Int> l$i@581@01))
  (<
    ($unwrap<Int> l$i@581@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@580@01 0))))))
(pop) ; 11
; [eval] !!(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(push) ; 11
; [then-branch: 416 | !(0 <= $unwrap[Int](l$i@581@01)) | live]
; [else-branch: 416 | 0 <= $unwrap[Int](l$i@581@01) | live]
(push) ; 12
; [then-branch: 416 | !(0 <= $unwrap[Int](l$i@581@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@581@01))))
(pop) ; 12
(push) ; 12
; [else-branch: 416 | 0 <= $unwrap[Int](l$i@581@01)]
(assert (<= 0 ($unwrap<Int> l$i@581@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 ($unwrap<Int> l$i@581@01))
    (<
      ($unwrap<Int> l$i@581@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@580@01 0))))))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@581@01))
  (<
    ($unwrap<Int> l$i@581@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@580@01 0)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.01s
; (get-info :all-statistics)
; [then-branch: 417 | 0 <= $unwrap[Int](l$i@581@01) && $unwrap[Int](l$i@581@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@580@01, 0))| | live]
; [else-branch: 417 | !(0 <= $unwrap[Int](l$i@581@01) && $unwrap[Int](l$i@581@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@580@01, 0))|) | live]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 417 | 0 <= $unwrap[Int](l$i@581@01) && $unwrap[Int](l$i@581@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@580@01, 0))|]
(assert (and
  (<= 0 ($unwrap<Int> l$i@581@01))
  (<
    ($unwrap<Int> l$i@581@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@580@01 0))))))
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) :=
;   42]): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) := 42]): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) := 42]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$i)
(push) ; 12
(assert (not (>= ($unwrap<Int> l$i@581@01) 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const self@585@01 $Struct)
(assert (=
  self@585@01
  ($struct_set<$Struct> self@580@01 0 (Seq_append
    (Seq_take
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@580@01 0))
      ($unwrap<Int> l$i@581@01))
    (Seq_append
      (Seq_singleton 42)
      (Seq_drop
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@580@01 0))
        (+ ($unwrap<Int> l$i@581@01) 1)))))))
; [exec]
; label continue_8
; [exec]
; l$i := $wrap($range(0, 12)[9])
; [eval] $wrap($range(0, 12)[9])
; [eval] $range(0, 12)[9]
; [eval] $range(0, 12)
(push) ; 12
(assert (not (< 9 (Seq_length ($range<Seq<Int>> 0 12)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(declare-const l$i@586@01 $Int)
(assert (= l$i@586@01 ($wrap<$Int> (Seq_index ($range<Seq<Int>> 0 12) 9))))
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(push) ; 12
; [then-branch: 418 | !(0 <= $unwrap[Int](l$i@586@01)) | live]
; [else-branch: 418 | 0 <= $unwrap[Int](l$i@586@01) | live]
(push) ; 13
; [then-branch: 418 | !(0 <= $unwrap[Int](l$i@586@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@586@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 418 | 0 <= $unwrap[Int](l$i@586@01)]
(assert (<= 0 ($unwrap<Int> l$i@586@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 ($unwrap<Int> l$i@586@01)) (not (<= 0 ($unwrap<Int> l$i@586@01)))))
(push) ; 12
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@586@01))
  (<
    ($unwrap<Int> l$i@586@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@585@01 0)))))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 ($unwrap<Int> l$i@586@01))
    (<
      ($unwrap<Int> l$i@586@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@585@01 0))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 419 | !(0 <= $unwrap[Int](l$i@586@01) && $unwrap[Int](l$i@586@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@585@01, 0))|) | live]
; [else-branch: 419 | 0 <= $unwrap[Int](l$i@586@01) && $unwrap[Int](l$i@586@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@585@01, 0))| | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 419 | !(0 <= $unwrap[Int](l$i@586@01) && $unwrap[Int](l$i@586@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@585@01, 0))|)]
(assert (not
  (and
    (<= 0 ($unwrap<Int> l$i@586@01))
    (<
      ($unwrap<Int> l$i@586@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@585@01 0)))))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale (forall q$i: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] }
;     -170141183460469231731687303715884105728 <= q$i &&
;     q$i <= 170141183460469231731687303715884105727 ==>
;     0 <= q$i && q$i < 12 ==>
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42)
; [eval] (forall q$i: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] } -170141183460469231731687303715884105728 <= q$i && q$i <= 170141183460469231731687303715884105727 ==> 0 <= q$i && q$i < 12 ==> ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42)
(declare-const q$i@587@01 Int)
(push) ; 13
; [eval] -170141183460469231731687303715884105728 <= q$i && q$i <= 170141183460469231731687303715884105727 ==> 0 <= q$i && q$i < 12 ==> ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42
; [eval] -170141183460469231731687303715884105728 <= q$i && q$i <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= q$i
; [eval] -170141183460469231731687303715884105728
(push) ; 14
; [then-branch: 420 | !(-170141183460469231731687303715884105728 <= q$i@587@01) | live]
; [else-branch: 420 | -170141183460469231731687303715884105728 <= q$i@587@01 | live]
(push) ; 15
; [then-branch: 420 | !(-170141183460469231731687303715884105728 <= q$i@587@01)]
(assert (not (<= (- 0 170141183460469231731687303715884105728) q$i@587@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 420 | -170141183460469231731687303715884105728 <= q$i@587@01]
(assert (<= (- 0 170141183460469231731687303715884105728) q$i@587@01))
; [eval] q$i <= 170141183460469231731687303715884105727
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or
  (<= (- 0 170141183460469231731687303715884105728) q$i@587@01)
  (not (<= (- 0 170141183460469231731687303715884105728) q$i@587@01))))
(push) ; 14
; [then-branch: 421 | -170141183460469231731687303715884105728 <= q$i@587@01 && q$i@587@01 <= 170141183460469231731687303715884105727 | live]
; [else-branch: 421 | !(-170141183460469231731687303715884105728 <= q$i@587@01 && q$i@587@01 <= 170141183460469231731687303715884105727) | live]
(push) ; 15
; [then-branch: 421 | -170141183460469231731687303715884105728 <= q$i@587@01 && q$i@587@01 <= 170141183460469231731687303715884105727]
(assert (and
  (<= (- 0 170141183460469231731687303715884105728) q$i@587@01)
  (<= q$i@587@01 170141183460469231731687303715884105727)))
; [eval] 0 <= q$i && q$i < 12 ==> ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42
; [eval] 0 <= q$i && q$i < 12
; [eval] 0 <= q$i
(push) ; 16
; [then-branch: 422 | !(0 <= q$i@587@01) | live]
; [else-branch: 422 | 0 <= q$i@587@01 | live]
(push) ; 17
; [then-branch: 422 | !(0 <= q$i@587@01)]
(assert (not (<= 0 q$i@587@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 422 | 0 <= q$i@587@01]
(assert (<= 0 q$i@587@01))
; [eval] q$i < 12
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@587@01) (not (<= 0 q$i@587@01))))
(push) ; 16
; [then-branch: 423 | 0 <= q$i@587@01 && q$i@587@01 < 12 | live]
; [else-branch: 423 | !(0 <= q$i@587@01 && q$i@587@01 < 12) | live]
(push) ; 17
; [then-branch: 423 | 0 <= q$i@587@01 && q$i@587@01 < 12]
(assert (and (<= 0 q$i@587@01) (< q$i@587@01 12)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 18
(assert (not (>= q$i@587@01 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (<
  q$i@587@01
  (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(pop) ; 17
(push) ; 17
; [else-branch: 423 | !(0 <= q$i@587@01 && q$i@587@01 < 12)]
(assert (not (and (<= 0 q$i@587@01) (< q$i@587@01 12))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (not (and (<= 0 q$i@587@01) (< q$i@587@01 12)))
  (and (<= 0 q$i@587@01) (< q$i@587@01 12))))
(pop) ; 15
(push) ; 15
; [else-branch: 421 | !(-170141183460469231731687303715884105728 <= q$i@587@01 && q$i@587@01 <= 170141183460469231731687303715884105727)]
(assert (not
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@587@01)
    (<= q$i@587@01 170141183460469231731687303715884105727))))
(pop) ; 15
(pop) ; 14
; Joined path conditions
(assert (=>
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@587@01)
    (<= q$i@587@01 170141183460469231731687303715884105727))
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@587@01)
    (<= q$i@587@01 170141183460469231731687303715884105727)
    (or (<= 0 q$i@587@01) (not (<= 0 q$i@587@01)))
    (or
      (not (and (<= 0 q$i@587@01) (< q$i@587@01 12)))
      (and (<= 0 q$i@587@01) (< q$i@587@01 12))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= (- 0 170141183460469231731687303715884105728) q$i@587@01)
      (<= q$i@587@01 170141183460469231731687303715884105727)))
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@587@01)
    (<= q$i@587@01 170141183460469231731687303715884105727))))
(pop) ; 13
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@587@01 Int)) (!
  (and
    (or
      (<= (- 0 170141183460469231731687303715884105728) q$i@587@01)
      (not (<= (- 0 170141183460469231731687303715884105728) q$i@587@01)))
    (=>
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@587@01)
        (<= q$i@587@01 170141183460469231731687303715884105727))
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@587@01)
        (<= q$i@587@01 170141183460469231731687303715884105727)
        (or (<= 0 q$i@587@01) (not (<= 0 q$i@587@01)))
        (or
          (not (and (<= 0 q$i@587@01) (< q$i@587@01 12)))
          (and (<= 0 q$i@587@01) (< q$i@587@01 12)))))
    (or
      (not
        (and
          (<= (- 0 170141183460469231731687303715884105728) q$i@587@01)
          (<= q$i@587@01 170141183460469231731687303715884105727)))
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@587@01)
        (<= q$i@587@01 170141183460469231731687303715884105727))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
    q$i@587@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1266@11@1266@268-aux|)))
(push) ; 13
(assert (not (forall ((q$i@587@01 Int)) (!
  (=>
    (and
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@587@01)
        (<= q$i@587@01 170141183460469231731687303715884105727))
      (and (<= 0 q$i@587@01) (< q$i@587@01 12)))
    (=
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
        q$i@587@01)
      42))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
    q$i@587@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1266@11@1266@268|))))
(check-sat)
; unsat
(pop) ; 13
; 0.05s
; (get-info :all-statistics)
(assert (forall ((q$i@587@01 Int)) (!
  (=>
    (and
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@587@01)
        (<= q$i@587@01 170141183460469231731687303715884105727))
      (and (<= 0 q$i@587@01) (< q$i@587@01 12)))
    (=
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
        q$i@587@01)
      42))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
    q$i@587@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1266@11@1266@268|)))
; [eval] !$succ
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 424 | True | live]
; [else-branch: 424 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 424 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@588@01 $Snap)
(assert (= $t@588@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@502@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@589@01 $Struct)
(assert (=
  self@589@01
  ($struct_set<$Struct> self@491@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@491@01 5))
    l$havoc@502@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 14
(assert (not (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@589@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@589@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3))))
(pop) ; 13
; [then-branch: 425 | False | dead]
; [else-branch: 425 | True | live]
(push) ; 13
; [else-branch: 425 | True]
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 419 | 0 <= $unwrap[Int](l$i@586@01) && $unwrap[Int](l$i@586@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@585@01, 0))|]
(assert (and
  (<= 0 ($unwrap<Int> l$i@586@01))
  (<
    ($unwrap<Int> l$i@586@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@585@01 0))))))
(pop) ; 12
; [eval] !!(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(push) ; 12
; [then-branch: 426 | !(0 <= $unwrap[Int](l$i@586@01)) | live]
; [else-branch: 426 | 0 <= $unwrap[Int](l$i@586@01) | live]
(push) ; 13
; [then-branch: 426 | !(0 <= $unwrap[Int](l$i@586@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@586@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 426 | 0 <= $unwrap[Int](l$i@586@01)]
(assert (<= 0 ($unwrap<Int> l$i@586@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 ($unwrap<Int> l$i@586@01))
    (<
      ($unwrap<Int> l$i@586@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@585@01 0))))))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@586@01))
  (<
    ($unwrap<Int> l$i@586@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@585@01 0)))))))
(check-sat)
; unknown
(pop) ; 12
; 0.01s
; (get-info :all-statistics)
; [then-branch: 427 | 0 <= $unwrap[Int](l$i@586@01) && $unwrap[Int](l$i@586@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@585@01, 0))| | live]
; [else-branch: 427 | !(0 <= $unwrap[Int](l$i@586@01) && $unwrap[Int](l$i@586@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@585@01, 0))|) | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 427 | 0 <= $unwrap[Int](l$i@586@01) && $unwrap[Int](l$i@586@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@585@01, 0))|]
(assert (and
  (<= 0 ($unwrap<Int> l$i@586@01))
  (<
    ($unwrap<Int> l$i@586@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@585@01 0))))))
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) :=
;   42]): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) := 42]): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) := 42]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$i)
(push) ; 13
(assert (not (>= ($unwrap<Int> l$i@586@01) 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(declare-const self@590@01 $Struct)
(assert (=
  self@590@01
  ($struct_set<$Struct> self@585@01 0 (Seq_append
    (Seq_take
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@585@01 0))
      ($unwrap<Int> l$i@586@01))
    (Seq_append
      (Seq_singleton 42)
      (Seq_drop
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@585@01 0))
        (+ ($unwrap<Int> l$i@586@01) 1)))))))
; [exec]
; label continue_9
; [exec]
; l$i := $wrap($range(0, 12)[10])
; [eval] $wrap($range(0, 12)[10])
; [eval] $range(0, 12)[10]
; [eval] $range(0, 12)
(push) ; 13
(assert (not (< 10 (Seq_length ($range<Seq<Int>> 0 12)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(declare-const l$i@591@01 $Int)
(assert (= l$i@591@01 ($wrap<$Int> (Seq_index ($range<Seq<Int>> 0 12) 10))))
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(push) ; 13
; [then-branch: 428 | !(0 <= $unwrap[Int](l$i@591@01)) | live]
; [else-branch: 428 | 0 <= $unwrap[Int](l$i@591@01) | live]
(push) ; 14
; [then-branch: 428 | !(0 <= $unwrap[Int](l$i@591@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@591@01))))
(pop) ; 14
(push) ; 14
; [else-branch: 428 | 0 <= $unwrap[Int](l$i@591@01)]
(assert (<= 0 ($unwrap<Int> l$i@591@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 ($unwrap<Int> l$i@591@01)) (not (<= 0 ($unwrap<Int> l$i@591@01)))))
(push) ; 13
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@591@01))
  (<
    ($unwrap<Int> l$i@591@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@590@01 0)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 ($unwrap<Int> l$i@591@01))
    (<
      ($unwrap<Int> l$i@591@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@590@01 0))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 429 | !(0 <= $unwrap[Int](l$i@591@01) && $unwrap[Int](l$i@591@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@590@01, 0))|) | live]
; [else-branch: 429 | 0 <= $unwrap[Int](l$i@591@01) && $unwrap[Int](l$i@591@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@590@01, 0))| | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 429 | !(0 <= $unwrap[Int](l$i@591@01) && $unwrap[Int](l$i@591@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@590@01, 0))|)]
(assert (not
  (and
    (<= 0 ($unwrap<Int> l$i@591@01))
    (<
      ($unwrap<Int> l$i@591@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@590@01 0)))))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale (forall q$i: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] }
;     -170141183460469231731687303715884105728 <= q$i &&
;     q$i <= 170141183460469231731687303715884105727 ==>
;     0 <= q$i && q$i < 12 ==>
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42)
; [eval] (forall q$i: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] } -170141183460469231731687303715884105728 <= q$i && q$i <= 170141183460469231731687303715884105727 ==> 0 <= q$i && q$i < 12 ==> ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42)
(declare-const q$i@592@01 Int)
(push) ; 14
; [eval] -170141183460469231731687303715884105728 <= q$i && q$i <= 170141183460469231731687303715884105727 ==> 0 <= q$i && q$i < 12 ==> ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42
; [eval] -170141183460469231731687303715884105728 <= q$i && q$i <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= q$i
; [eval] -170141183460469231731687303715884105728
(push) ; 15
; [then-branch: 430 | !(-170141183460469231731687303715884105728 <= q$i@592@01) | live]
; [else-branch: 430 | -170141183460469231731687303715884105728 <= q$i@592@01 | live]
(push) ; 16
; [then-branch: 430 | !(-170141183460469231731687303715884105728 <= q$i@592@01)]
(assert (not (<= (- 0 170141183460469231731687303715884105728) q$i@592@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 430 | -170141183460469231731687303715884105728 <= q$i@592@01]
(assert (<= (- 0 170141183460469231731687303715884105728) q$i@592@01))
; [eval] q$i <= 170141183460469231731687303715884105727
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or
  (<= (- 0 170141183460469231731687303715884105728) q$i@592@01)
  (not (<= (- 0 170141183460469231731687303715884105728) q$i@592@01))))
(push) ; 15
; [then-branch: 431 | -170141183460469231731687303715884105728 <= q$i@592@01 && q$i@592@01 <= 170141183460469231731687303715884105727 | live]
; [else-branch: 431 | !(-170141183460469231731687303715884105728 <= q$i@592@01 && q$i@592@01 <= 170141183460469231731687303715884105727) | live]
(push) ; 16
; [then-branch: 431 | -170141183460469231731687303715884105728 <= q$i@592@01 && q$i@592@01 <= 170141183460469231731687303715884105727]
(assert (and
  (<= (- 0 170141183460469231731687303715884105728) q$i@592@01)
  (<= q$i@592@01 170141183460469231731687303715884105727)))
; [eval] 0 <= q$i && q$i < 12 ==> ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42
; [eval] 0 <= q$i && q$i < 12
; [eval] 0 <= q$i
(push) ; 17
; [then-branch: 432 | !(0 <= q$i@592@01) | live]
; [else-branch: 432 | 0 <= q$i@592@01 | live]
(push) ; 18
; [then-branch: 432 | !(0 <= q$i@592@01)]
(assert (not (<= 0 q$i@592@01)))
(pop) ; 18
(push) ; 18
; [else-branch: 432 | 0 <= q$i@592@01]
(assert (<= 0 q$i@592@01))
; [eval] q$i < 12
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@592@01) (not (<= 0 q$i@592@01))))
(push) ; 17
; [then-branch: 433 | 0 <= q$i@592@01 && q$i@592@01 < 12 | live]
; [else-branch: 433 | !(0 <= q$i@592@01 && q$i@592@01 < 12) | live]
(push) ; 18
; [then-branch: 433 | 0 <= q$i@592@01 && q$i@592@01 < 12]
(assert (and (<= 0 q$i@592@01) (< q$i@592@01 12)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 19
(assert (not (>= q$i@592@01 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(assert (not (<
  q$i@592@01
  (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(pop) ; 18
(push) ; 18
; [else-branch: 433 | !(0 <= q$i@592@01 && q$i@592@01 < 12)]
(assert (not (and (<= 0 q$i@592@01) (< q$i@592@01 12))))
(pop) ; 18
(pop) ; 17
; Joined path conditions
; Joined path conditions
(assert (or
  (not (and (<= 0 q$i@592@01) (< q$i@592@01 12)))
  (and (<= 0 q$i@592@01) (< q$i@592@01 12))))
(pop) ; 16
(push) ; 16
; [else-branch: 431 | !(-170141183460469231731687303715884105728 <= q$i@592@01 && q$i@592@01 <= 170141183460469231731687303715884105727)]
(assert (not
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@592@01)
    (<= q$i@592@01 170141183460469231731687303715884105727))))
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=>
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@592@01)
    (<= q$i@592@01 170141183460469231731687303715884105727))
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@592@01)
    (<= q$i@592@01 170141183460469231731687303715884105727)
    (or (<= 0 q$i@592@01) (not (<= 0 q$i@592@01)))
    (or
      (not (and (<= 0 q$i@592@01) (< q$i@592@01 12)))
      (and (<= 0 q$i@592@01) (< q$i@592@01 12))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= (- 0 170141183460469231731687303715884105728) q$i@592@01)
      (<= q$i@592@01 170141183460469231731687303715884105727)))
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@592@01)
    (<= q$i@592@01 170141183460469231731687303715884105727))))
(pop) ; 14
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@592@01 Int)) (!
  (and
    (or
      (<= (- 0 170141183460469231731687303715884105728) q$i@592@01)
      (not (<= (- 0 170141183460469231731687303715884105728) q$i@592@01)))
    (=>
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@592@01)
        (<= q$i@592@01 170141183460469231731687303715884105727))
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@592@01)
        (<= q$i@592@01 170141183460469231731687303715884105727)
        (or (<= 0 q$i@592@01) (not (<= 0 q$i@592@01)))
        (or
          (not (and (<= 0 q$i@592@01) (< q$i@592@01 12)))
          (and (<= 0 q$i@592@01) (< q$i@592@01 12)))))
    (or
      (not
        (and
          (<= (- 0 170141183460469231731687303715884105728) q$i@592@01)
          (<= q$i@592@01 170141183460469231731687303715884105727)))
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@592@01)
        (<= q$i@592@01 170141183460469231731687303715884105727))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
    q$i@592@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1266@11@1266@268-aux|)))
(push) ; 14
(assert (not (forall ((q$i@592@01 Int)) (!
  (=>
    (and
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@592@01)
        (<= q$i@592@01 170141183460469231731687303715884105727))
      (and (<= 0 q$i@592@01) (< q$i@592@01 12)))
    (=
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
        q$i@592@01)
      42))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
    q$i@592@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1266@11@1266@268|))))
(check-sat)
; unsat
(pop) ; 14
; 0.04s
; (get-info :all-statistics)
(assert (forall ((q$i@592@01 Int)) (!
  (=>
    (and
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@592@01)
        (<= q$i@592@01 170141183460469231731687303715884105727))
      (and (<= 0 q$i@592@01) (< q$i@592@01 12)))
    (=
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
        q$i@592@01)
      42))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
    q$i@592@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1266@11@1266@268|)))
; [eval] !$succ
(push) ; 14
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 434 | True | live]
; [else-branch: 434 | False | dead]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 434 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@593@01 $Snap)
(assert (= $t@593@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@502@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@594@01 $Struct)
(assert (=
  self@594@01
  ($struct_set<$Struct> self@491@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@491@01 5))
    l$havoc@502@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 15
(assert (not (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@594@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@594@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3))))
(pop) ; 14
; [then-branch: 435 | False | dead]
; [else-branch: 435 | True | live]
(push) ; 14
; [else-branch: 435 | True]
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 429 | 0 <= $unwrap[Int](l$i@591@01) && $unwrap[Int](l$i@591@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@590@01, 0))|]
(assert (and
  (<= 0 ($unwrap<Int> l$i@591@01))
  (<
    ($unwrap<Int> l$i@591@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@590@01 0))))))
(pop) ; 13
; [eval] !!(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(push) ; 13
; [then-branch: 436 | !(0 <= $unwrap[Int](l$i@591@01)) | live]
; [else-branch: 436 | 0 <= $unwrap[Int](l$i@591@01) | live]
(push) ; 14
; [then-branch: 436 | !(0 <= $unwrap[Int](l$i@591@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@591@01))))
(pop) ; 14
(push) ; 14
; [else-branch: 436 | 0 <= $unwrap[Int](l$i@591@01)]
(assert (<= 0 ($unwrap<Int> l$i@591@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(push) ; 13
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 ($unwrap<Int> l$i@591@01))
    (<
      ($unwrap<Int> l$i@591@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@590@01 0))))))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@591@01))
  (<
    ($unwrap<Int> l$i@591@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@590@01 0)))))))
(check-sat)
; unknown
(pop) ; 13
; 0.01s
; (get-info :all-statistics)
; [then-branch: 437 | 0 <= $unwrap[Int](l$i@591@01) && $unwrap[Int](l$i@591@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@590@01, 0))| | live]
; [else-branch: 437 | !(0 <= $unwrap[Int](l$i@591@01) && $unwrap[Int](l$i@591@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@590@01, 0))|) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 437 | 0 <= $unwrap[Int](l$i@591@01) && $unwrap[Int](l$i@591@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@590@01, 0))|]
(assert (and
  (<= 0 ($unwrap<Int> l$i@591@01))
  (<
    ($unwrap<Int> l$i@591@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@590@01 0))))))
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) :=
;   42]): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) := 42]): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) := 42]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$i)
(push) ; 14
(assert (not (>= ($unwrap<Int> l$i@591@01) 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(declare-const self@595@01 $Struct)
(assert (=
  self@595@01
  ($struct_set<$Struct> self@590@01 0 (Seq_append
    (Seq_take
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@590@01 0))
      ($unwrap<Int> l$i@591@01))
    (Seq_append
      (Seq_singleton 42)
      (Seq_drop
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@590@01 0))
        (+ ($unwrap<Int> l$i@591@01) 1)))))))
; [exec]
; label continue_10
; [exec]
; l$i := $wrap($range(0, 12)[11])
; [eval] $wrap($range(0, 12)[11])
; [eval] $range(0, 12)[11]
; [eval] $range(0, 12)
(push) ; 14
(assert (not (< 11 (Seq_length ($range<Seq<Int>> 0 12)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(declare-const l$i@596@01 $Int)
(assert (= l$i@596@01 ($wrap<$Int> (Seq_index ($range<Seq<Int>> 0 12) 11))))
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(push) ; 14
; [then-branch: 438 | !(0 <= $unwrap[Int](l$i@596@01)) | live]
; [else-branch: 438 | 0 <= $unwrap[Int](l$i@596@01) | live]
(push) ; 15
; [then-branch: 438 | !(0 <= $unwrap[Int](l$i@596@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@596@01))))
(pop) ; 15
(push) ; 15
; [else-branch: 438 | 0 <= $unwrap[Int](l$i@596@01)]
(assert (<= 0 ($unwrap<Int> l$i@596@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 ($unwrap<Int> l$i@596@01)) (not (<= 0 ($unwrap<Int> l$i@596@01)))))
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@596@01))
  (<
    ($unwrap<Int> l$i@596@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@595@01 0)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 ($unwrap<Int> l$i@596@01))
    (<
      ($unwrap<Int> l$i@596@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@595@01 0))))))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 439 | !(0 <= $unwrap[Int](l$i@596@01) && $unwrap[Int](l$i@596@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@595@01, 0))|) | live]
; [else-branch: 439 | 0 <= $unwrap[Int](l$i@596@01) && $unwrap[Int](l$i@596@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@595@01, 0))| | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 439 | !(0 <= $unwrap[Int](l$i@596@01) && $unwrap[Int](l$i@596@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@595@01, 0))|)]
(assert (not
  (and
    (<= 0 ($unwrap<Int> l$i@596@01))
    (<
      ($unwrap<Int> l$i@596@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@595@01 0)))))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale (forall q$i: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] }
;     -170141183460469231731687303715884105728 <= q$i &&
;     q$i <= 170141183460469231731687303715884105727 ==>
;     0 <= q$i && q$i < 12 ==>
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42)
; [eval] (forall q$i: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] } -170141183460469231731687303715884105728 <= q$i && q$i <= 170141183460469231731687303715884105727 ==> 0 <= q$i && q$i < 12 ==> ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42)
(declare-const q$i@597@01 Int)
(push) ; 15
; [eval] -170141183460469231731687303715884105728 <= q$i && q$i <= 170141183460469231731687303715884105727 ==> 0 <= q$i && q$i < 12 ==> ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42
; [eval] -170141183460469231731687303715884105728 <= q$i && q$i <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= q$i
; [eval] -170141183460469231731687303715884105728
(push) ; 16
; [then-branch: 440 | !(-170141183460469231731687303715884105728 <= q$i@597@01) | live]
; [else-branch: 440 | -170141183460469231731687303715884105728 <= q$i@597@01 | live]
(push) ; 17
; [then-branch: 440 | !(-170141183460469231731687303715884105728 <= q$i@597@01)]
(assert (not (<= (- 0 170141183460469231731687303715884105728) q$i@597@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 440 | -170141183460469231731687303715884105728 <= q$i@597@01]
(assert (<= (- 0 170141183460469231731687303715884105728) q$i@597@01))
; [eval] q$i <= 170141183460469231731687303715884105727
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (<= (- 0 170141183460469231731687303715884105728) q$i@597@01)
  (not (<= (- 0 170141183460469231731687303715884105728) q$i@597@01))))
(push) ; 16
; [then-branch: 441 | -170141183460469231731687303715884105728 <= q$i@597@01 && q$i@597@01 <= 170141183460469231731687303715884105727 | live]
; [else-branch: 441 | !(-170141183460469231731687303715884105728 <= q$i@597@01 && q$i@597@01 <= 170141183460469231731687303715884105727) | live]
(push) ; 17
; [then-branch: 441 | -170141183460469231731687303715884105728 <= q$i@597@01 && q$i@597@01 <= 170141183460469231731687303715884105727]
(assert (and
  (<= (- 0 170141183460469231731687303715884105728) q$i@597@01)
  (<= q$i@597@01 170141183460469231731687303715884105727)))
; [eval] 0 <= q$i && q$i < 12 ==> ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42
; [eval] 0 <= q$i && q$i < 12
; [eval] 0 <= q$i
(push) ; 18
; [then-branch: 442 | !(0 <= q$i@597@01) | live]
; [else-branch: 442 | 0 <= q$i@597@01 | live]
(push) ; 19
; [then-branch: 442 | !(0 <= q$i@597@01)]
(assert (not (<= 0 q$i@597@01)))
(pop) ; 19
(push) ; 19
; [else-branch: 442 | 0 <= q$i@597@01]
(assert (<= 0 q$i@597@01))
; [eval] q$i < 12
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@597@01) (not (<= 0 q$i@597@01))))
(push) ; 18
; [then-branch: 443 | 0 <= q$i@597@01 && q$i@597@01 < 12 | live]
; [else-branch: 443 | !(0 <= q$i@597@01 && q$i@597@01 < 12) | live]
(push) ; 19
; [then-branch: 443 | 0 <= q$i@597@01 && q$i@597@01 < 12]
(assert (and (<= 0 q$i@597@01) (< q$i@597@01 12)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 20
(assert (not (>= q$i@597@01 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(assert (not (<
  q$i@597@01
  (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(pop) ; 19
(push) ; 19
; [else-branch: 443 | !(0 <= q$i@597@01 && q$i@597@01 < 12)]
(assert (not (and (<= 0 q$i@597@01) (< q$i@597@01 12))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or
  (not (and (<= 0 q$i@597@01) (< q$i@597@01 12)))
  (and (<= 0 q$i@597@01) (< q$i@597@01 12))))
(pop) ; 17
(push) ; 17
; [else-branch: 441 | !(-170141183460469231731687303715884105728 <= q$i@597@01 && q$i@597@01 <= 170141183460469231731687303715884105727)]
(assert (not
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@597@01)
    (<= q$i@597@01 170141183460469231731687303715884105727))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@597@01)
    (<= q$i@597@01 170141183460469231731687303715884105727))
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@597@01)
    (<= q$i@597@01 170141183460469231731687303715884105727)
    (or (<= 0 q$i@597@01) (not (<= 0 q$i@597@01)))
    (or
      (not (and (<= 0 q$i@597@01) (< q$i@597@01 12)))
      (and (<= 0 q$i@597@01) (< q$i@597@01 12))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= (- 0 170141183460469231731687303715884105728) q$i@597@01)
      (<= q$i@597@01 170141183460469231731687303715884105727)))
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@597@01)
    (<= q$i@597@01 170141183460469231731687303715884105727))))
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@597@01 Int)) (!
  (and
    (or
      (<= (- 0 170141183460469231731687303715884105728) q$i@597@01)
      (not (<= (- 0 170141183460469231731687303715884105728) q$i@597@01)))
    (=>
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@597@01)
        (<= q$i@597@01 170141183460469231731687303715884105727))
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@597@01)
        (<= q$i@597@01 170141183460469231731687303715884105727)
        (or (<= 0 q$i@597@01) (not (<= 0 q$i@597@01)))
        (or
          (not (and (<= 0 q$i@597@01) (< q$i@597@01 12)))
          (and (<= 0 q$i@597@01) (< q$i@597@01 12)))))
    (or
      (not
        (and
          (<= (- 0 170141183460469231731687303715884105728) q$i@597@01)
          (<= q$i@597@01 170141183460469231731687303715884105727)))
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@597@01)
        (<= q$i@597@01 170141183460469231731687303715884105727))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
    q$i@597@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1266@11@1266@268-aux|)))
(push) ; 15
(assert (not (forall ((q$i@597@01 Int)) (!
  (=>
    (and
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@597@01)
        (<= q$i@597@01 170141183460469231731687303715884105727))
      (and (<= 0 q$i@597@01) (< q$i@597@01 12)))
    (=
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
        q$i@597@01)
      42))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
    q$i@597@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1266@11@1266@268|))))
(check-sat)
; unsat
(pop) ; 15
; 0.04s
; (get-info :all-statistics)
(assert (forall ((q$i@597@01 Int)) (!
  (=>
    (and
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@597@01)
        (<= q$i@597@01 170141183460469231731687303715884105727))
      (and (<= 0 q$i@597@01) (< q$i@597@01 12)))
    (=
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
        q$i@597@01)
      42))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 0))
    q$i@597@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1266@11@1266@268|)))
; [eval] !$succ
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
; [then-branch: 444 | True | live]
; [else-branch: 444 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 444 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@598@01 $Snap)
(assert (= $t@598@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@502@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@599@01 $Struct)
(assert (=
  self@599@01
  ($struct_set<$Struct> self@491@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@491@01 5))
    l$havoc@502@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 16
(assert (not (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@599@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@599@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3))))
(pop) ; 15
; [then-branch: 445 | False | dead]
; [else-branch: 445 | True | live]
(push) ; 15
; [else-branch: 445 | True]
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 439 | 0 <= $unwrap[Int](l$i@596@01) && $unwrap[Int](l$i@596@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@595@01, 0))|]
(assert (and
  (<= 0 ($unwrap<Int> l$i@596@01))
  (<
    ($unwrap<Int> l$i@596@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@595@01 0))))))
(pop) ; 14
; [eval] !!(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(push) ; 14
; [then-branch: 446 | !(0 <= $unwrap[Int](l$i@596@01)) | live]
; [else-branch: 446 | 0 <= $unwrap[Int](l$i@596@01) | live]
(push) ; 15
; [then-branch: 446 | !(0 <= $unwrap[Int](l$i@596@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@596@01))))
(pop) ; 15
(push) ; 15
; [else-branch: 446 | 0 <= $unwrap[Int](l$i@596@01)]
(assert (<= 0 ($unwrap<Int> l$i@596@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(push) ; 14
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 ($unwrap<Int> l$i@596@01))
    (<
      ($unwrap<Int> l$i@596@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@595@01 0))))))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@596@01))
  (<
    ($unwrap<Int> l$i@596@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@595@01 0)))))))
(check-sat)
; unknown
(pop) ; 14
; 0.01s
; (get-info :all-statistics)
; [then-branch: 447 | 0 <= $unwrap[Int](l$i@596@01) && $unwrap[Int](l$i@596@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@595@01, 0))| | live]
; [else-branch: 447 | !(0 <= $unwrap[Int](l$i@596@01) && $unwrap[Int](l$i@596@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@595@01, 0))|) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 447 | 0 <= $unwrap[Int](l$i@596@01) && $unwrap[Int](l$i@596@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@595@01, 0))|]
(assert (and
  (<= 0 ($unwrap<Int> l$i@596@01))
  (<
    ($unwrap<Int> l$i@596@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@595@01 0))))))
; [exec]
; self := ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) :=
;   42]): $Struct)
; [eval] ($struct_set(self, 0, ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) := 42]): $Struct)
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$unwrap(l$i) := 42]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
; [eval] $unwrap(l$i)
(push) ; 15
(assert (not (>= ($unwrap<Int> l$i@596@01) 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(declare-const self@600@01 $Struct)
(assert (=
  self@600@01
  ($struct_set<$Struct> self@595@01 0 (Seq_append
    (Seq_take
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@595@01 0))
      ($unwrap<Int> l$i@596@01))
    (Seq_append
      (Seq_singleton 42)
      (Seq_drop
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@595@01 0))
        (+ ($unwrap<Int> l$i@596@01) 1)))))))
; [exec]
; label continue_11
; [exec]
; label break_0
; [exec]
; label return
; [exec]
; label end
; [exec]
; exhale (forall q$i: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] }
;     -170141183460469231731687303715884105728 <= q$i &&
;     q$i <= 170141183460469231731687303715884105727 ==>
;     0 <= q$i && q$i < 12 ==>
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42)
; [eval] (forall q$i: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] } -170141183460469231731687303715884105728 <= q$i && q$i <= 170141183460469231731687303715884105727 ==> 0 <= q$i && q$i < 12 ==> ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42)
(declare-const q$i@601@01 Int)
(push) ; 15
; [eval] -170141183460469231731687303715884105728 <= q$i && q$i <= 170141183460469231731687303715884105727 ==> 0 <= q$i && q$i < 12 ==> ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42
; [eval] -170141183460469231731687303715884105728 <= q$i && q$i <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= q$i
; [eval] -170141183460469231731687303715884105728
(push) ; 16
; [then-branch: 448 | !(-170141183460469231731687303715884105728 <= q$i@601@01) | live]
; [else-branch: 448 | -170141183460469231731687303715884105728 <= q$i@601@01 | live]
(push) ; 17
; [then-branch: 448 | !(-170141183460469231731687303715884105728 <= q$i@601@01)]
(assert (not (<= (- 0 170141183460469231731687303715884105728) q$i@601@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 448 | -170141183460469231731687303715884105728 <= q$i@601@01]
(assert (<= (- 0 170141183460469231731687303715884105728) q$i@601@01))
; [eval] q$i <= 170141183460469231731687303715884105727
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(assert (or
  (<= (- 0 170141183460469231731687303715884105728) q$i@601@01)
  (not (<= (- 0 170141183460469231731687303715884105728) q$i@601@01))))
(push) ; 16
; [then-branch: 449 | -170141183460469231731687303715884105728 <= q$i@601@01 && q$i@601@01 <= 170141183460469231731687303715884105727 | live]
; [else-branch: 449 | !(-170141183460469231731687303715884105728 <= q$i@601@01 && q$i@601@01 <= 170141183460469231731687303715884105727) | live]
(push) ; 17
; [then-branch: 449 | -170141183460469231731687303715884105728 <= q$i@601@01 && q$i@601@01 <= 170141183460469231731687303715884105727]
(assert (and
  (<= (- 0 170141183460469231731687303715884105728) q$i@601@01)
  (<= q$i@601@01 170141183460469231731687303715884105727)))
; [eval] 0 <= q$i && q$i < 12 ==> ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42
; [eval] 0 <= q$i && q$i < 12
; [eval] 0 <= q$i
(push) ; 18
; [then-branch: 450 | !(0 <= q$i@601@01) | live]
; [else-branch: 450 | 0 <= q$i@601@01 | live]
(push) ; 19
; [then-branch: 450 | !(0 <= q$i@601@01)]
(assert (not (<= 0 q$i@601@01)))
(pop) ; 19
(push) ; 19
; [else-branch: 450 | 0 <= q$i@601@01]
(assert (<= 0 q$i@601@01))
; [eval] q$i < 12
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 q$i@601@01) (not (<= 0 q$i@601@01))))
(push) ; 18
; [then-branch: 451 | 0 <= q$i@601@01 && q$i@601@01 < 12 | live]
; [else-branch: 451 | !(0 <= q$i@601@01 && q$i@601@01 < 12) | live]
(push) ; 19
; [then-branch: 451 | 0 <= q$i@601@01 && q$i@601@01 < 12]
(assert (and (<= 0 q$i@601@01) (< q$i@601@01 12)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i] == 42
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[q$i]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 20
(assert (not (>= q$i@601@01 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(assert (not (<
  q$i@601@01
  (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@600@01 0))))))
(check-sat)
; unsat
(pop) ; 20
; 0.02s
; (get-info :all-statistics)
(pop) ; 19
(push) ; 19
; [else-branch: 451 | !(0 <= q$i@601@01 && q$i@601@01 < 12)]
(assert (not (and (<= 0 q$i@601@01) (< q$i@601@01 12))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or
  (not (and (<= 0 q$i@601@01) (< q$i@601@01 12)))
  (and (<= 0 q$i@601@01) (< q$i@601@01 12))))
(pop) ; 17
(push) ; 17
; [else-branch: 449 | !(-170141183460469231731687303715884105728 <= q$i@601@01 && q$i@601@01 <= 170141183460469231731687303715884105727)]
(assert (not
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@601@01)
    (<= q$i@601@01 170141183460469231731687303715884105727))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=>
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@601@01)
    (<= q$i@601@01 170141183460469231731687303715884105727))
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@601@01)
    (<= q$i@601@01 170141183460469231731687303715884105727)
    (or (<= 0 q$i@601@01) (not (<= 0 q$i@601@01)))
    (or
      (not (and (<= 0 q$i@601@01) (< q$i@601@01 12)))
      (and (<= 0 q$i@601@01) (< q$i@601@01 12))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= (- 0 170141183460469231731687303715884105728) q$i@601@01)
      (<= q$i@601@01 170141183460469231731687303715884105727)))
  (and
    (<= (- 0 170141183460469231731687303715884105728) q$i@601@01)
    (<= q$i@601@01 170141183460469231731687303715884105727))))
(pop) ; 15
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((q$i@601@01 Int)) (!
  (and
    (or
      (<= (- 0 170141183460469231731687303715884105728) q$i@601@01)
      (not (<= (- 0 170141183460469231731687303715884105728) q$i@601@01)))
    (=>
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@601@01)
        (<= q$i@601@01 170141183460469231731687303715884105727))
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@601@01)
        (<= q$i@601@01 170141183460469231731687303715884105727)
        (or (<= 0 q$i@601@01) (not (<= 0 q$i@601@01)))
        (or
          (not (and (<= 0 q$i@601@01) (< q$i@601@01 12)))
          (and (<= 0 q$i@601@01) (< q$i@601@01 12)))))
    (or
      (not
        (and
          (<= (- 0 170141183460469231731687303715884105728) q$i@601@01)
          (<= q$i@601@01 170141183460469231731687303715884105727)))
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@601@01)
        (<= q$i@601@01 170141183460469231731687303715884105727))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@600@01 0))
    q$i@601@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1266@11@1266@268-aux|)))
(push) ; 15
(assert (not (forall ((q$i@601@01 Int)) (!
  (=>
    (and
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@601@01)
        (<= q$i@601@01 170141183460469231731687303715884105727))
      (and (<= 0 q$i@601@01) (< q$i@601@01 12)))
    (=
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@600@01 0))
        q$i@601@01)
      42))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@600@01 0))
    q$i@601@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1266@11@1266@268|))))
(check-sat)
; unsat
(pop) ; 15
; 0.88s
; (get-info :all-statistics)
(assert (forall ((q$i@601@01 Int)) (!
  (=>
    (and
      (and
        (<= (- 0 170141183460469231731687303715884105728) q$i@601@01)
        (<= q$i@601@01 170141183460469231731687303715884105727))
      (and (<= 0 q$i@601@01) (< q$i@601@01 12)))
    (=
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@600@01 0))
        q$i@601@01)
      42))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@600@01 0))
    q$i@601@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1266@11@1266@268|)))
; [eval] !$succ
; [then-branch: 452 | False | dead]
; [else-branch: 452 | True | live]
(push) ; 15
; [else-branch: 452 | True]
(pop) ; 15
(push) ; 15
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 15
; 0.01s
; (get-info :all-statistics)
; [then-branch: 453 | True | live]
; [else-branch: 453 | False | dead]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 453 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@602@01 $Snap)
(assert (= $t@602@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@502@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@603@01 $Struct)
(assert (=
  self@603@01
  ($struct_set<$Struct> self@600@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@600@01 5))
    l$havoc@502@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 16
(assert (not (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@603@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@603@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@491@01 3))))
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 447 | !(0 <= $unwrap[Int](l$i@596@01) && $unwrap[Int](l$i@596@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@595@01, 0))|)]
(assert (not
  (and
    (<= 0 ($unwrap<Int> l$i@596@01))
    (<
      ($unwrap<Int> l$i@596@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@595@01 0)))))))
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 437 | !(0 <= $unwrap[Int](l$i@591@01) && $unwrap[Int](l$i@591@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@590@01, 0))|)]
(assert (not
  (and
    (<= 0 ($unwrap<Int> l$i@591@01))
    (<
      ($unwrap<Int> l$i@591@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@590@01 0)))))))
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 427 | !(0 <= $unwrap[Int](l$i@586@01) && $unwrap[Int](l$i@586@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@585@01, 0))|)]
(assert (not
  (and
    (<= 0 ($unwrap<Int> l$i@586@01))
    (<
      ($unwrap<Int> l$i@586@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@585@01 0)))))))
(pop) ; 12
(pop) ; 11
(push) ; 11
; [else-branch: 417 | !(0 <= $unwrap[Int](l$i@581@01) && $unwrap[Int](l$i@581@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@580@01, 0))|)]
(assert (not
  (and
    (<= 0 ($unwrap<Int> l$i@581@01))
    (<
      ($unwrap<Int> l$i@581@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@580@01 0)))))))
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch: 407 | !(0 <= $unwrap[Int](l$i@576@01) && $unwrap[Int](l$i@576@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@575@01, 0))|)]
(assert (not
  (and
    (<= 0 ($unwrap<Int> l$i@576@01))
    (<
      ($unwrap<Int> l$i@576@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@575@01 0)))))))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch: 397 | !(0 <= $unwrap[Int](l$i@571@01) && $unwrap[Int](l$i@571@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@570@01, 0))|)]
(assert (not
  (and
    (<= 0 ($unwrap<Int> l$i@571@01))
    (<
      ($unwrap<Int> l$i@571@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@570@01 0)))))))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 387 | !(0 <= $unwrap[Int](l$i@568@01) && $unwrap[Int](l$i@568@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@567@01, 0))|)]
(assert (not
  (and
    (<= 0 ($unwrap<Int> l$i@568@01))
    (<
      ($unwrap<Int> l$i@568@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@567@01 0)))))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$matrix_write ----------
(declare-const $succ@604@01 Bool)
(declare-const $res@605@01 Int)
(declare-const $succ@606@01 Bool)
(declare-const $res@607@01 Int)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@608@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@609@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@610@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@611@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@612@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@613@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@614@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@615@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@616@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@617@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@618@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@619@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@620@01 Bool)
; [exec]
; var l$a: Seq[Int]
(declare-const l$a@621@01 Seq<Int>)
; [exec]
; var l$i: $Int
(declare-const l$i@622@01 $Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@623@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@624@01 Int)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@625@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@626@01 $Map<Int~_$Struct>)
; [exec]
; inhale |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
(declare-const $t@627@01 $Snap)
(assert (= $t@627@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0))) 12))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] }
;     0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] &&
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <=
;     170141183460469231731687303715884105727)
(declare-const $t@628@01 $Snap)
(assert (= $t@628@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] } 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@629@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 454 | !(0 <= $q0@629@01) | live]
; [else-branch: 454 | 0 <= $q0@629@01 | live]
(push) ; 5
; [then-branch: 454 | !(0 <= $q0@629@01)]
(assert (not (<= 0 $q0@629@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 454 | 0 <= $q0@629@01]
(assert (<= 0 $q0@629@01))
; [eval] $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@629@01) (not (<= 0 $q0@629@01))))
(push) ; 4
; [then-branch: 455 | 0 <= $q0@629@01 && $q0@629@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@612@01, 0))| | live]
; [else-branch: 455 | !(0 <= $q0@629@01 && $q0@629@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@612@01, 0))|) | live]
(push) ; 5
; [then-branch: 455 | 0 <= $q0@629@01 && $q0@629@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@612@01, 0))|]
(assert (and
  (<= 0 $q0@629@01)
  (<
    $q0@629@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (>= $q0@629@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 456 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@612@01, 0))[$q0@629@01]) | live]
; [else-branch: 456 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@612@01, 0))[$q0@629@01] | live]
(push) ; 7
; [then-branch: 456 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@612@01, 0))[$q0@629@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0))
      $q0@629@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 456 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@612@01, 0))[$q0@629@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0)) $q0@629@01)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (>= $q0@629@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0))
      $q0@629@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0))
        $q0@629@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 455 | !(0 <= $q0@629@01 && $q0@629@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@612@01, 0))|)]
(assert (not
  (and
    (<= 0 $q0@629@01)
    (<
      $q0@629@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q0@629@01)
    (<
      $q0@629@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0)))))
  (and
    (<= 0 $q0@629@01)
    (<
      $q0@629@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0))
          $q0@629@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0))
            $q0@629@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q0@629@01)
      (<
        $q0@629@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0))))))
  (and
    (<= 0 $q0@629@01)
    (<
      $q0@629@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@629@01 Int)) (!
  (and
    (or (<= 0 $q0@629@01) (not (<= 0 $q0@629@01)))
    (=>
      (and
        (<= 0 $q0@629@01)
        (<
          $q0@629@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0)))))
      (and
        (<= 0 $q0@629@01)
        (<
          $q0@629@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0))
              $q0@629@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0))
                $q0@629@01))))))
    (or
      (not
        (and
          (<= 0 $q0@629@01)
          (<
            $q0@629@01
            (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0))))))
      (and
        (<= 0 $q0@629@01)
        (<
          $q0@629@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0))
    $q0@629@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1302@11@1302@346-aux|)))
(assert (forall (($q0@629@01 Int)) (!
  (=>
    (and
      (<= 0 $q0@629@01)
      (<
        $q0@629@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0))
          $q0@629@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0))
          $q0@629@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0))
    $q0@629@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1302@11@1302@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
(declare-const $t@630@01 $Snap)
(assert (= $t@630@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(assert (= (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $t@631@01 $Snap)
(assert (= $t@631@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $q1@632@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 457 | !(0 <= $q1@632@01) | live]
; [else-branch: 457 | 0 <= $q1@632@01 | live]
(push) ; 5
; [then-branch: 457 | !(0 <= $q1@632@01)]
(assert (not (<= 0 $q1@632@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 457 | 0 <= $q1@632@01]
(assert (<= 0 $q1@632@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@632@01) (not (<= 0 $q1@632@01))))
(push) ; 4
; [then-branch: 458 | 0 <= $q1@632@01 && $q1@632@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))| | live]
; [else-branch: 458 | !(0 <= $q1@632@01 && $q1@632@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))|) | live]
(push) ; 5
; [then-branch: 458 | 0 <= $q1@632@01 && $q1@632@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))|]
(assert (and
  (<= 0 $q1@632@01)
  (<
    $q1@632@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))))))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 6
(assert (not (>= $q1@632@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 458 | !(0 <= $q1@632@01 && $q1@632@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@632@01)
    (<
      $q1@632@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@632@01)
      (<
        $q1@632@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))))))
  (and
    (<= 0 $q1@632@01)
    (<
      $q1@632@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@632@01 Int)) (!
  (and
    (or (<= 0 $q1@632@01) (not (<= 0 $q1@632@01)))
    (or
      (not
        (and
          (<= 0 $q1@632@01)
          (<
            $q1@632@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))))))
      (and
        (<= 0 $q1@632@01)
        (<
          $q1@632@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
    $q1@632@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1304@11@1304@228-aux|)))
(assert (forall (($q1@632@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@632@01)
      (<
        $q1@632@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
          $q1@632@01))
      12))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
    $q1@632@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1304@11@1304@228|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     (forall $q2: Int ::
;       { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] }
;       0 <= $q2 &&
;       $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==>
;       -170141183460469231731687303715884105728 <=
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] &&
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <=
;       170141183460469231731687303715884105727))
(declare-const $t@633@01 $Snap)
(assert (= $t@633@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727))
(declare-const $q1@634@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 459 | !(0 <= $q1@634@01) | live]
; [else-branch: 459 | 0 <= $q1@634@01 | live]
(push) ; 5
; [then-branch: 459 | !(0 <= $q1@634@01)]
(assert (not (<= 0 $q1@634@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 459 | 0 <= $q1@634@01]
(assert (<= 0 $q1@634@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@634@01) (not (<= 0 $q1@634@01))))
(push) ; 4
; [then-branch: 460 | 0 <= $q1@634@01 && $q1@634@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))| | live]
; [else-branch: 460 | !(0 <= $q1@634@01 && $q1@634@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))|) | live]
(push) ; 5
; [then-branch: 460 | 0 <= $q1@634@01 && $q1@634@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))|]
(assert (and
  (<= 0 $q1@634@01)
  (<
    $q1@634@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))))))
; [eval] (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
(declare-const $q2@635@01 Int)
(push) ; 6
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] 0 <= $q2
(push) ; 7
; [then-branch: 461 | !(0 <= $q2@635@01) | live]
; [else-branch: 461 | 0 <= $q2@635@01 | live]
(push) ; 8
; [then-branch: 461 | !(0 <= $q2@635@01)]
(assert (not (<= 0 $q2@635@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 461 | 0 <= $q2@635@01]
(assert (<= 0 $q2@635@01))
; [eval] $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@634@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q2@635@01) (not (<= 0 $q2@635@01))))
(push) ; 7
; [then-branch: 462 | 0 <= $q2@635@01 && $q2@635@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))[$q1@634@01]| | live]
; [else-branch: 462 | !(0 <= $q2@635@01 && $q2@635@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))[$q1@634@01]|) | live]
(push) ; 8
; [then-branch: 462 | 0 <= $q2@635@01 && $q2@635@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))[$q1@634@01]|]
(assert (and
  (<= 0 $q2@635@01)
  (<
    $q2@635@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
        $q1@634@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@634@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q2@635@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 463 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))[$q1@634@01][$q2@635@01]) | live]
; [else-branch: 463 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))[$q1@634@01][$q2@635@01] | live]
(push) ; 10
; [then-branch: 463 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))[$q1@634@01][$q2@635@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
        $q1@634@01)
      $q2@635@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 463 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))[$q1@634@01][$q2@635@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
      $q1@634@01)
    $q2@635@01)))
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 11
(assert (not (>= $q1@634@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= $q2@635@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
        $q1@634@01)
      $q2@635@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
          $q1@634@01)
        $q2@635@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 462 | !(0 <= $q2@635@01 && $q2@635@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))[$q1@634@01]|)]
(assert (not
  (and
    (<= 0 $q2@635@01)
    (<
      $q2@635@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
          $q1@634@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q2@635@01)
    (<
      $q2@635@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
          $q1@634@01))))
  (and
    (<= 0 $q2@635@01)
    (<
      $q2@635@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
          $q1@634@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
            $q1@634@01)
          $q2@635@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
              $q1@634@01)
            $q2@635@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q2@635@01)
      (<
        $q2@635@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
            $q1@634@01)))))
  (and
    (<= 0 $q2@635@01)
    (<
      $q2@635@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
          $q1@634@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@635@01 Int)) (!
  (and
    (or (<= 0 $q2@635@01) (not (<= 0 $q2@635@01)))
    (=>
      (and
        (<= 0 $q2@635@01)
        (<
          $q2@635@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
              $q1@634@01))))
      (and
        (<= 0 $q2@635@01)
        (<
          $q2@635@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
              $q1@634@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
                $q1@634@01)
              $q2@635@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
                  $q1@634@01)
                $q2@635@01))))))
    (or
      (not
        (and
          (<= 0 $q2@635@01)
          (<
            $q2@635@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
                $q1@634@01)))))
      (and
        (<= 0 $q2@635@01)
        (<
          $q2@635@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
              $q1@634@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
      $q1@634@01)
    $q2@635@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1305@166@1305@541-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 460 | !(0 <= $q1@634@01 && $q1@634@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@634@01)
    (<
      $q1@634@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q1@634@01)
    (<
      $q1@634@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1)))))
  (and
    (<= 0 $q1@634@01)
    (<
      $q1@634@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))))
    (forall (($q2@635@01 Int)) (!
      (and
        (or (<= 0 $q2@635@01) (not (<= 0 $q2@635@01)))
        (=>
          (and
            (<= 0 $q2@635@01)
            (<
              $q2@635@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
                  $q1@634@01))))
          (and
            (<= 0 $q2@635@01)
            (<
              $q2@635@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
                  $q1@634@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
                    $q1@634@01)
                  $q2@635@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
                      $q1@634@01)
                    $q2@635@01))))))
        (or
          (not
            (and
              (<= 0 $q2@635@01)
              (<
                $q2@635@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
                    $q1@634@01)))))
          (and
            (<= 0 $q2@635@01)
            (<
              $q2@635@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
                  $q1@634@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
          $q1@634@01)
        $q2@635@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1305@166@1305@541-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@634@01)
      (<
        $q1@634@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))))))
  (and
    (<= 0 $q1@634@01)
    (<
      $q1@634@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@634@01 Int)) (!
  (and
    (or (<= 0 $q1@634@01) (not (<= 0 $q1@634@01)))
    (=>
      (and
        (<= 0 $q1@634@01)
        (<
          $q1@634@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1)))))
      (and
        (<= 0 $q1@634@01)
        (<
          $q1@634@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))))
        (forall (($q2@635@01 Int)) (!
          (and
            (or (<= 0 $q2@635@01) (not (<= 0 $q2@635@01)))
            (=>
              (and
                (<= 0 $q2@635@01)
                (<
                  $q2@635@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
                      $q1@634@01))))
              (and
                (<= 0 $q2@635@01)
                (<
                  $q2@635@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
                      $q1@634@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
                        $q1@634@01)
                      $q2@635@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
                          $q1@634@01)
                        $q2@635@01))))))
            (or
              (not
                (and
                  (<= 0 $q2@635@01)
                  (<
                    $q2@635@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
                        $q1@634@01)))))
              (and
                (<= 0 $q2@635@01)
                (<
                  $q2@635@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
                      $q1@634@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
              $q1@634@01)
            $q2@635@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1305@166@1305@541-aux|))))
    (or
      (not
        (and
          (<= 0 $q1@634@01)
          (<
            $q1@634@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))))))
      (and
        (<= 0 $q1@634@01)
        (<
          $q1@634@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
    $q1@634@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1305@11@1305@542-aux|)))
(assert (forall (($q1@634@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@634@01)
      (<
        $q1@634@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1)))))
    (forall (($q2@635@01 Int)) (!
      (=>
        (and
          (<= 0 $q2@635@01)
          (<
            $q2@635@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
                $q1@634@01))))
        (and
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
                $q1@634@01)
              $q2@635@01))
          (<=
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
                $q1@634@01)
              $q2@635@01)
            170141183460469231731687303715884105727)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
          $q1@634@01)
        $q2@635@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1305@166@1305@541|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
    $q1@634@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1305@11@1305@542|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
(declare-const $t@636@01 $Snap)
(assert (= $t@636@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(assert (=
  (Seq_length ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2)))
  2))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $t@637@01 $Snap)
(assert (= $t@637@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $q3@638@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 464 | !(0 <= $q3@638@01) | live]
; [else-branch: 464 | 0 <= $q3@638@01 | live]
(push) ; 5
; [then-branch: 464 | !(0 <= $q3@638@01)]
(assert (not (<= 0 $q3@638@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 464 | 0 <= $q3@638@01]
(assert (<= 0 $q3@638@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@638@01) (not (<= 0 $q3@638@01))))
(push) ; 4
; [then-branch: 465 | 0 <= $q3@638@01 && $q3@638@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))| | live]
; [else-branch: 465 | !(0 <= $q3@638@01 && $q3@638@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))|) | live]
(push) ; 5
; [then-branch: 465 | 0 <= $q3@638@01 && $q3@638@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))|]
(assert (and
  (<= 0 $q3@638@01)
  (<
    $q3@638@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 6
(assert (not (>= $q3@638@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 465 | !(0 <= $q3@638@01 && $q3@638@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@638@01)
    (<
      $q3@638@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@638@01)
      (<
        $q3@638@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))))))
  (and
    (<= 0 $q3@638@01)
    (<
      $q3@638@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@638@01 Int)) (!
  (and
    (or (<= 0 $q3@638@01) (not (<= 0 $q3@638@01)))
    (or
      (not
        (and
          (<= 0 $q3@638@01)
          (<
            $q3@638@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))))))
      (and
        (<= 0 $q3@638@01)
        (<
          $q3@638@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
    $q3@638@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1307@11@1307@242-aux|)))
(assert (forall (($q3@638@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@638@01)
      (<
        $q3@638@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
          $q3@638@01))
      2))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
    $q3@638@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1307@11@1307@242|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==
;       2))
(declare-const $t@639@01 $Snap)
(assert (= $t@639@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2))
(declare-const $q3@640@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 466 | !(0 <= $q3@640@01) | live]
; [else-branch: 466 | 0 <= $q3@640@01 | live]
(push) ; 5
; [then-branch: 466 | !(0 <= $q3@640@01)]
(assert (not (<= 0 $q3@640@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 466 | 0 <= $q3@640@01]
(assert (<= 0 $q3@640@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@640@01) (not (<= 0 $q3@640@01))))
(push) ; 4
; [then-branch: 467 | 0 <= $q3@640@01 && $q3@640@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))| | live]
; [else-branch: 467 | !(0 <= $q3@640@01 && $q3@640@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))|) | live]
(push) ; 5
; [then-branch: 467 | 0 <= $q3@640@01 && $q3@640@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))|]
(assert (and
  (<= 0 $q3@640@01)
  (<
    $q3@640@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
(declare-const $q4@641@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 468 | !(0 <= $q4@641@01) | live]
; [else-branch: 468 | 0 <= $q4@641@01 | live]
(push) ; 8
; [then-branch: 468 | !(0 <= $q4@641@01)]
(assert (not (<= 0 $q4@641@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 468 | 0 <= $q4@641@01]
(assert (<= 0 $q4@641@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@640@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@641@01) (not (<= 0 $q4@641@01))))
(push) ; 7
; [then-branch: 469 | 0 <= $q4@641@01 && $q4@641@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))[$q3@640@01]| | live]
; [else-branch: 469 | !(0 <= $q4@641@01 && $q4@641@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))[$q3@640@01]|) | live]
(push) ; 8
; [then-branch: 469 | 0 <= $q4@641@01 && $q4@641@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))[$q3@640@01]|]
(assert (and
  (<= 0 $q4@641@01)
  (<
    $q4@641@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
        $q3@640@01)))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@640@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q4@641@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 469 | !(0 <= $q4@641@01 && $q4@641@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))[$q3@640@01]|)]
(assert (not
  (and
    (<= 0 $q4@641@01)
    (<
      $q4@641@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
          $q3@640@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@641@01)
      (<
        $q4@641@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
            $q3@640@01)))))
  (and
    (<= 0 $q4@641@01)
    (<
      $q4@641@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
          $q3@640@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@641@01 Int)) (!
  (and
    (or (<= 0 $q4@641@01) (not (<= 0 $q4@641@01)))
    (or
      (not
        (and
          (<= 0 $q4@641@01)
          (<
            $q4@641@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                $q3@640@01)))))
      (and
        (<= 0 $q4@641@01)
        (<
          $q4@641@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
              $q3@640@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
      $q3@640@01)
    $q4@641@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1308@176@1308@422-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 467 | !(0 <= $q3@640@01 && $q3@640@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@640@01)
    (<
      $q3@640@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@640@01)
    (<
      $q3@640@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2)))))
  (and
    (<= 0 $q3@640@01)
    (<
      $q3@640@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))))
    (forall (($q4@641@01 Int)) (!
      (and
        (or (<= 0 $q4@641@01) (not (<= 0 $q4@641@01)))
        (or
          (not
            (and
              (<= 0 $q4@641@01)
              (<
                $q4@641@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                    $q3@640@01)))))
          (and
            (<= 0 $q4@641@01)
            (<
              $q4@641@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                  $q3@640@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
          $q3@640@01)
        $q4@641@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1308@176@1308@422-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@640@01)
      (<
        $q3@640@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))))))
  (and
    (<= 0 $q3@640@01)
    (<
      $q3@640@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@640@01 Int)) (!
  (and
    (or (<= 0 $q3@640@01) (not (<= 0 $q3@640@01)))
    (=>
      (and
        (<= 0 $q3@640@01)
        (<
          $q3@640@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2)))))
      (and
        (<= 0 $q3@640@01)
        (<
          $q3@640@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))))
        (forall (($q4@641@01 Int)) (!
          (and
            (or (<= 0 $q4@641@01) (not (<= 0 $q4@641@01)))
            (or
              (not
                (and
                  (<= 0 $q4@641@01)
                  (<
                    $q4@641@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                        $q3@640@01)))))
              (and
                (<= 0 $q4@641@01)
                (<
                  $q4@641@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                      $q3@640@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
              $q3@640@01)
            $q4@641@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1308@176@1308@422-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@640@01)
          (<
            $q3@640@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))))))
      (and
        (<= 0 $q3@640@01)
        (<
          $q3@640@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
    $q3@640@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1308@11@1308@423-aux|)))
(assert (forall (($q3@640@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@640@01)
      (<
        $q3@640@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2)))))
    (forall (($q4@641@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@641@01)
          (<
            $q4@641@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                $q3@640@01))))
        (=
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                $q3@640@01)
              $q4@641@01))
          2))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
          $q3@640@01)
        $q4@641@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1308@176@1308@422|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
    $q3@640@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1308@11@1308@423|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       (forall $q5: Int ::
;         { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] }
;         0 <= $q5 &&
;         $q5 <
;         |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==>
;         -170141183460469231731687303715884105728 <=
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] &&
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <=
;         170141183460469231731687303715884105727)))
(declare-const $t@642@01 $Snap)
(assert (= $t@642@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)))
(declare-const $q3@643@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 470 | !(0 <= $q3@643@01) | live]
; [else-branch: 470 | 0 <= $q3@643@01 | live]
(push) ; 5
; [then-branch: 470 | !(0 <= $q3@643@01)]
(assert (not (<= 0 $q3@643@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 470 | 0 <= $q3@643@01]
(assert (<= 0 $q3@643@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@643@01) (not (<= 0 $q3@643@01))))
(push) ; 4
; [then-branch: 471 | 0 <= $q3@643@01 && $q3@643@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))| | live]
; [else-branch: 471 | !(0 <= $q3@643@01 && $q3@643@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))|) | live]
(push) ; 5
; [then-branch: 471 | 0 <= $q3@643@01 && $q3@643@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))|]
(assert (and
  (<= 0 $q3@643@01)
  (<
    $q3@643@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
(declare-const $q4@644@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 472 | !(0 <= $q4@644@01) | live]
; [else-branch: 472 | 0 <= $q4@644@01 | live]
(push) ; 8
; [then-branch: 472 | !(0 <= $q4@644@01)]
(assert (not (<= 0 $q4@644@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 472 | 0 <= $q4@644@01]
(assert (<= 0 $q4@644@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@643@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@644@01) (not (<= 0 $q4@644@01))))
(push) ; 7
; [then-branch: 473 | 0 <= $q4@644@01 && $q4@644@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))[$q3@643@01]| | live]
; [else-branch: 473 | !(0 <= $q4@644@01 && $q4@644@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))[$q3@643@01]|) | live]
(push) ; 8
; [then-branch: 473 | 0 <= $q4@644@01 && $q4@644@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))[$q3@643@01]|]
(assert (and
  (<= 0 $q4@644@01)
  (<
    $q4@644@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
        $q3@643@01)))))
; [eval] (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
(declare-const $q5@645@01 Int)
(push) ; 9
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] 0 <= $q5
(push) ; 10
; [then-branch: 474 | !(0 <= $q5@645@01) | live]
; [else-branch: 474 | 0 <= $q5@645@01 | live]
(push) ; 11
; [then-branch: 474 | !(0 <= $q5@645@01)]
(assert (not (<= 0 $q5@645@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 474 | 0 <= $q5@645@01]
(assert (<= 0 $q5@645@01))
; [eval] $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@643@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@644@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q5@645@01) (not (<= 0 $q5@645@01))))
(push) ; 10
; [then-branch: 475 | 0 <= $q5@645@01 && $q5@645@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))[$q3@643@01][$q4@644@01]| | live]
; [else-branch: 475 | !(0 <= $q5@645@01 && $q5@645@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))[$q3@643@01][$q4@644@01]|) | live]
(push) ; 11
; [then-branch: 475 | 0 <= $q5@645@01 && $q5@645@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))[$q3@643@01][$q4@644@01]|]
(assert (and
  (<= 0 $q5@645@01)
  (<
    $q5@645@01
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
          $q3@643@01)
        $q4@644@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@643@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@644@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q5@645@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 476 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))[$q3@643@01][$q4@644@01][$q5@645@01]) | live]
; [else-branch: 476 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))[$q3@643@01][$q4@644@01][$q5@645@01] | live]
(push) ; 13
; [then-branch: 476 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))[$q3@643@01][$q4@644@01][$q5@645@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
          $q3@643@01)
        $q4@644@01)
      $q5@645@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 476 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))[$q3@643@01][$q4@644@01][$q5@645@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
        $q3@643@01)
      $q4@644@01)
    $q5@645@01)))
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 14
(assert (not (>= $q3@643@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q4@644@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q5@645@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
          $q3@643@01)
        $q4@644@01)
      $q5@645@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
            $q3@643@01)
          $q4@644@01)
        $q5@645@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 475 | !(0 <= $q5@645@01 && $q5@645@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))[$q3@643@01][$q4@644@01]|)]
(assert (not
  (and
    (<= 0 $q5@645@01)
    (<
      $q5@645@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
            $q3@643@01)
          $q4@644@01))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q5@645@01)
    (<
      $q5@645@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
            $q3@643@01)
          $q4@644@01))))
  (and
    (<= 0 $q5@645@01)
    (<
      $q5@645@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
            $q3@643@01)
          $q4@644@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
              $q3@643@01)
            $q4@644@01)
          $q5@645@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                $q3@643@01)
              $q4@644@01)
            $q5@645@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q5@645@01)
      (<
        $q5@645@01
        (Seq_length
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
              $q3@643@01)
            $q4@644@01)))))
  (and
    (<= 0 $q5@645@01)
    (<
      $q5@645@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
            $q3@643@01)
          $q4@644@01))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@645@01 Int)) (!
  (and
    (or (<= 0 $q5@645@01) (not (<= 0 $q5@645@01)))
    (=>
      (and
        (<= 0 $q5@645@01)
        (<
          $q5@645@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                $q3@643@01)
              $q4@644@01))))
      (and
        (<= 0 $q5@645@01)
        (<
          $q5@645@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                $q3@643@01)
              $q4@644@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                  $q3@643@01)
                $q4@644@01)
              $q5@645@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                    $q3@643@01)
                  $q4@644@01)
                $q5@645@01))))))
    (or
      (not
        (and
          (<= 0 $q5@645@01)
          (<
            $q5@645@01
            (Seq_length
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                  $q3@643@01)
                $q4@644@01)))))
      (and
        (<= 0 $q5@645@01)
        (<
          $q5@645@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                $q3@643@01)
              $q4@644@01))))))
  :pattern ((Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
        $q3@643@01)
      $q4@644@01)
    $q5@645@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1309@351@1309@766-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 473 | !(0 <= $q4@644@01 && $q4@644@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))[$q3@643@01]|)]
(assert (not
  (and
    (<= 0 $q4@644@01)
    (<
      $q4@644@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
          $q3@643@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q4@644@01)
    (<
      $q4@644@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
          $q3@643@01))))
  (and
    (<= 0 $q4@644@01)
    (<
      $q4@644@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
          $q3@643@01)))
    (forall (($q5@645@01 Int)) (!
      (and
        (or (<= 0 $q5@645@01) (not (<= 0 $q5@645@01)))
        (=>
          (and
            (<= 0 $q5@645@01)
            (<
              $q5@645@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                    $q3@643@01)
                  $q4@644@01))))
          (and
            (<= 0 $q5@645@01)
            (<
              $q5@645@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                    $q3@643@01)
                  $q4@644@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                      $q3@643@01)
                    $q4@644@01)
                  $q5@645@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                        $q3@643@01)
                      $q4@644@01)
                    $q5@645@01))))))
        (or
          (not
            (and
              (<= 0 $q5@645@01)
              (<
                $q5@645@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                      $q3@643@01)
                    $q4@644@01)))))
          (and
            (<= 0 $q5@645@01)
            (<
              $q5@645@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                    $q3@643@01)
                  $q4@644@01))))))
      :pattern ((Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
            $q3@643@01)
          $q4@644@01)
        $q5@645@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1309@351@1309@766-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@644@01)
      (<
        $q4@644@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
            $q3@643@01)))))
  (and
    (<= 0 $q4@644@01)
    (<
      $q4@644@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
          $q3@643@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@644@01 Int)) (!
  (and
    (or (<= 0 $q4@644@01) (not (<= 0 $q4@644@01)))
    (=>
      (and
        (<= 0 $q4@644@01)
        (<
          $q4@644@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
              $q3@643@01))))
      (and
        (<= 0 $q4@644@01)
        (<
          $q4@644@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
              $q3@643@01)))
        (forall (($q5@645@01 Int)) (!
          (and
            (or (<= 0 $q5@645@01) (not (<= 0 $q5@645@01)))
            (=>
              (and
                (<= 0 $q5@645@01)
                (<
                  $q5@645@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                        $q3@643@01)
                      $q4@644@01))))
              (and
                (<= 0 $q5@645@01)
                (<
                  $q5@645@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                        $q3@643@01)
                      $q4@644@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                          $q3@643@01)
                        $q4@644@01)
                      $q5@645@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                            $q3@643@01)
                          $q4@644@01)
                        $q5@645@01))))))
            (or
              (not
                (and
                  (<= 0 $q5@645@01)
                  (<
                    $q5@645@01
                    (Seq_length
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                          $q3@643@01)
                        $q4@644@01)))))
              (and
                (<= 0 $q5@645@01)
                (<
                  $q5@645@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                        $q3@643@01)
                      $q4@644@01))))))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                $q3@643@01)
              $q4@644@01)
            $q5@645@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1309@351@1309@766-aux|))))
    (or
      (not
        (and
          (<= 0 $q4@644@01)
          (<
            $q4@644@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                $q3@643@01)))))
      (and
        (<= 0 $q4@644@01)
        (<
          $q4@644@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
              $q3@643@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
      $q3@643@01)
    $q4@644@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1309@176@1309@767-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 471 | !(0 <= $q3@643@01 && $q3@643@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@612@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@643@01)
    (<
      $q3@643@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@643@01)
    (<
      $q3@643@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2)))))
  (and
    (<= 0 $q3@643@01)
    (<
      $q3@643@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))))
    (forall (($q4@644@01 Int)) (!
      (and
        (or (<= 0 $q4@644@01) (not (<= 0 $q4@644@01)))
        (=>
          (and
            (<= 0 $q4@644@01)
            (<
              $q4@644@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                  $q3@643@01))))
          (and
            (<= 0 $q4@644@01)
            (<
              $q4@644@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                  $q3@643@01)))
            (forall (($q5@645@01 Int)) (!
              (and
                (or (<= 0 $q5@645@01) (not (<= 0 $q5@645@01)))
                (=>
                  (and
                    (<= 0 $q5@645@01)
                    (<
                      $q5@645@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                            $q3@643@01)
                          $q4@644@01))))
                  (and
                    (<= 0 $q5@645@01)
                    (<
                      $q5@645@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                            $q3@643@01)
                          $q4@644@01)))
                    (or
                      (<=
                        (- 0 170141183460469231731687303715884105728)
                        (Seq_index
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                              $q3@643@01)
                            $q4@644@01)
                          $q5@645@01))
                      (not
                        (<=
                          (- 0 170141183460469231731687303715884105728)
                          (Seq_index
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                                $q3@643@01)
                              $q4@644@01)
                            $q5@645@01))))))
                (or
                  (not
                    (and
                      (<= 0 $q5@645@01)
                      (<
                        $q5@645@01
                        (Seq_length
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                              $q3@643@01)
                            $q4@644@01)))))
                  (and
                    (<= 0 $q5@645@01)
                    (<
                      $q5@645@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                            $q3@643@01)
                          $q4@644@01))))))
              :pattern ((Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                    $q3@643@01)
                  $q4@644@01)
                $q5@645@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1309@351@1309@766-aux|))))
        (or
          (not
            (and
              (<= 0 $q4@644@01)
              (<
                $q4@644@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                    $q3@643@01)))))
          (and
            (<= 0 $q4@644@01)
            (<
              $q4@644@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                  $q3@643@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
          $q3@643@01)
        $q4@644@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1309@176@1309@767-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@643@01)
      (<
        $q3@643@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))))))
  (and
    (<= 0 $q3@643@01)
    (<
      $q3@643@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@643@01 Int)) (!
  (and
    (or (<= 0 $q3@643@01) (not (<= 0 $q3@643@01)))
    (=>
      (and
        (<= 0 $q3@643@01)
        (<
          $q3@643@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2)))))
      (and
        (<= 0 $q3@643@01)
        (<
          $q3@643@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))))
        (forall (($q4@644@01 Int)) (!
          (and
            (or (<= 0 $q4@644@01) (not (<= 0 $q4@644@01)))
            (=>
              (and
                (<= 0 $q4@644@01)
                (<
                  $q4@644@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                      $q3@643@01))))
              (and
                (<= 0 $q4@644@01)
                (<
                  $q4@644@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                      $q3@643@01)))
                (forall (($q5@645@01 Int)) (!
                  (and
                    (or (<= 0 $q5@645@01) (not (<= 0 $q5@645@01)))
                    (=>
                      (and
                        (<= 0 $q5@645@01)
                        (<
                          $q5@645@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                                $q3@643@01)
                              $q4@644@01))))
                      (and
                        (<= 0 $q5@645@01)
                        (<
                          $q5@645@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                                $q3@643@01)
                              $q4@644@01)))
                        (or
                          (<=
                            (- 0 170141183460469231731687303715884105728)
                            (Seq_index
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                                  $q3@643@01)
                                $q4@644@01)
                              $q5@645@01))
                          (not
                            (<=
                              (- 0 170141183460469231731687303715884105728)
                              (Seq_index
                                (Seq_index
                                  (Seq_index
                                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                                    $q3@643@01)
                                  $q4@644@01)
                                $q5@645@01))))))
                    (or
                      (not
                        (and
                          (<= 0 $q5@645@01)
                          (<
                            $q5@645@01
                            (Seq_length
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                                  $q3@643@01)
                                $q4@644@01)))))
                      (and
                        (<= 0 $q5@645@01)
                        (<
                          $q5@645@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                                $q3@643@01)
                              $q4@644@01))))))
                  :pattern ((Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                        $q3@643@01)
                      $q4@644@01)
                    $q5@645@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1309@351@1309@766-aux|))))
            (or
              (not
                (and
                  (<= 0 $q4@644@01)
                  (<
                    $q4@644@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                        $q3@643@01)))))
              (and
                (<= 0 $q4@644@01)
                (<
                  $q4@644@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                      $q3@643@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
              $q3@643@01)
            $q4@644@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1309@176@1309@767-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@643@01)
          (<
            $q3@643@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))))))
      (and
        (<= 0 $q3@643@01)
        (<
          $q3@643@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
    $q3@643@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1309@11@1309@768-aux|)))
(assert (forall (($q3@643@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@643@01)
      (<
        $q3@643@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2)))))
    (forall (($q4@644@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@644@01)
          (<
            $q4@644@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                $q3@643@01))))
        (forall (($q5@645@01 Int)) (!
          (=>
            (and
              (<= 0 $q5@645@01)
              (<
                $q5@645@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                      $q3@643@01)
                    $q4@644@01))))
            (and
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                      $q3@643@01)
                    $q4@644@01)
                  $q5@645@01))
              (<=
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                      $q3@643@01)
                    $q4@644@01)
                  $q5@645@01)
                170141183460469231731687303715884105727)))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
                $q3@643@01)
              $q4@644@01)
            $q5@645@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1309@351@1309@766|)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
          $q3@643@01)
        $q4@644@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1309@176@1309@767|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@612@01 2))
    $q3@643@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1309@11@1309@768|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
(declare-const $t@646@01 $Snap)
(assert (= $t@646@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3))) 1000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] }
;     0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] &&
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <=
;     170141183460469231731687303715884105727)
(declare-const $t@647@01 $Snap)
(assert (= $t@647@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] } 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727)
(declare-const $q6@648@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] 0 <= $q6
(push) ; 4
; [then-branch: 477 | !(0 <= $q6@648@01) | live]
; [else-branch: 477 | 0 <= $q6@648@01 | live]
(push) ; 5
; [then-branch: 477 | !(0 <= $q6@648@01)]
(assert (not (<= 0 $q6@648@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 477 | 0 <= $q6@648@01]
(assert (<= 0 $q6@648@01))
; [eval] $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q6@648@01) (not (<= 0 $q6@648@01))))
(push) ; 4
; [then-branch: 478 | 0 <= $q6@648@01 && $q6@648@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@612@01, 3))| | live]
; [else-branch: 478 | !(0 <= $q6@648@01 && $q6@648@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@612@01, 3))|) | live]
(push) ; 5
; [then-branch: 478 | 0 <= $q6@648@01 && $q6@648@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@612@01, 3))|]
(assert (and
  (<= 0 $q6@648@01)
  (<
    $q6@648@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (>= $q6@648@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 479 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@612@01, 3))[$q6@648@01]) | live]
; [else-branch: 479 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@612@01, 3))[$q6@648@01] | live]
(push) ; 7
; [then-branch: 479 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@612@01, 3))[$q6@648@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3))
      $q6@648@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 479 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@612@01, 3))[$q6@648@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3)) $q6@648@01)))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (>= $q6@648@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3))
      $q6@648@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3))
        $q6@648@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 478 | !(0 <= $q6@648@01 && $q6@648@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@612@01, 3))|)]
(assert (not
  (and
    (<= 0 $q6@648@01)
    (<
      $q6@648@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q6@648@01)
    (<
      $q6@648@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3)))))
  (and
    (<= 0 $q6@648@01)
    (<
      $q6@648@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3))
          $q6@648@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3))
            $q6@648@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q6@648@01)
      (<
        $q6@648@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3))))))
  (and
    (<= 0 $q6@648@01)
    (<
      $q6@648@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@648@01 Int)) (!
  (and
    (or (<= 0 $q6@648@01) (not (<= 0 $q6@648@01)))
    (=>
      (and
        (<= 0 $q6@648@01)
        (<
          $q6@648@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3)))))
      (and
        (<= 0 $q6@648@01)
        (<
          $q6@648@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3))
              $q6@648@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3))
                $q6@648@01))))))
    (or
      (not
        (and
          (<= 0 $q6@648@01)
          (<
            $q6@648@01
            (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3))))))
      (and
        (<= 0 $q6@648@01)
        (<
          $q6@648@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3))
    $q6@648@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1311@11@1311@346-aux|)))
(assert (forall (($q6@648@01 Int)) (!
  (=>
    (and
      (<= 0 $q6@648@01)
      (<
        $q6@648@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3))
          $q6@648@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3))
          $q6@648@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3))
    $q6@648@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1311@11@1311@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==
;     10)
(declare-const $t@649@01 $Snap)
(assert (= $t@649@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10)
(declare-const $q7@650@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@650@01 Int)) (!
  (=
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@650@01))
    10)
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@650@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1312@11@1312@209|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     (forall $q8: Int ::
;       { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] }
;       0 <= $q8 &&
;       $q8 <
;       |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==>
;       -170141183460469231731687303715884105728 <=
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] &&
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <=
;       170141183460469231731687303715884105727))
(declare-const $t@651@01 $Snap)
(assert (= $t@651@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727))
(declare-const $q7@652@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727)
(declare-const $q8@653@01 Int)
(push) ; 4
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] 0 <= $q8
(push) ; 5
; [then-branch: 480 | !(0 <= $q8@653@01) | live]
; [else-branch: 480 | 0 <= $q8@653@01 | live]
(push) ; 6
; [then-branch: 480 | !(0 <= $q8@653@01)]
(assert (not (<= 0 $q8@653@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 480 | 0 <= $q8@653@01]
(assert (<= 0 $q8@653@01))
; [eval] $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q8@653@01) (not (<= 0 $q8@653@01))))
(push) ; 5
; [then-branch: 481 | 0 <= $q8@653@01 && $q8@653@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@612@01, 4)), $q7@652@01)| | live]
; [else-branch: 481 | !(0 <= $q8@653@01 && $q8@653@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@612@01, 4)), $q7@652@01)|) | live]
(push) ; 6
; [then-branch: 481 | 0 <= $q8@653@01 && $q8@653@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@612@01, 4)), $q7@652@01)|]
(assert (and
  (<= 0 $q8@653@01)
  (<
    $q8@653@01
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] -170141183460469231731687303715884105728
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 7
(assert (not (>= $q8@653@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 482 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@612@01, 4)), $q7@652@01)[$q8@653@01]) | live]
; [else-branch: 482 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@612@01, 4)), $q7@652@01)[$q8@653@01] | live]
(push) ; 8
; [then-branch: 482 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@612@01, 4)), $q7@652@01)[$q8@653@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01)
      $q8@653@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 482 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@612@01, 4)), $q7@652@01)[$q8@653@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01)
    $q8@653@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 9
(assert (not (>= $q8@653@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01)
      $q8@653@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01)
        $q8@653@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 481 | !(0 <= $q8@653@01 && $q8@653@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@612@01, 4)), $q7@652@01)|)]
(assert (not
  (and
    (<= 0 $q8@653@01)
    (<
      $q8@653@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q8@653@01)
    (<
      $q8@653@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01))))
  (and
    (<= 0 $q8@653@01)
    (<
      $q8@653@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01)
          $q8@653@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01)
            $q8@653@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q8@653@01)
      (<
        $q8@653@01
        (Seq_length
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01)))))
  (and
    (<= 0 $q8@653@01)
    (<
      $q8@653@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q8@653@01 Int)) (!
  (and
    (or (<= 0 $q8@653@01) (not (<= 0 $q8@653@01)))
    (=>
      (and
        (<= 0 $q8@653@01)
        (<
          $q8@653@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01))))
      (and
        (<= 0 $q8@653@01)
        (<
          $q8@653@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01)
              $q8@653@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01)
                $q8@653@01))))))
    (or
      (not
        (and
          (<= 0 $q8@653@01)
          (<
            $q8@653@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01)))))
      (and
        (<= 0 $q8@653@01)
        (<
          $q8@653@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01))))))
  :pattern ((Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01)
    $q8@653@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1313@119@1313@606-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@652@01 Int)) (!
  (forall (($q8@653@01 Int)) (!
    (and
      (or (<= 0 $q8@653@01) (not (<= 0 $q8@653@01)))
      (=>
        (and
          (<= 0 $q8@653@01)
          (<
            $q8@653@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01))))
        (and
          (<= 0 $q8@653@01)
          (<
            $q8@653@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01)))
          (or
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01)
                $q8@653@01))
            (not
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01)
                  $q8@653@01))))))
      (or
        (not
          (and
            (<= 0 $q8@653@01)
            (<
              $q8@653@01
              (Seq_length
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01)))))
        (and
          (<= 0 $q8@653@01)
          (<
            $q8@653@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01))))))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01)
      $q8@653@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1313@119@1313@606-aux|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1313@11@1313@607-aux|)))
(assert (forall (($q7@652@01 Int)) (!
  (forall (($q8@653@01 Int)) (!
    (=>
      (and
        (<= 0 $q8@653@01)
        (<
          $q8@653@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01))))
      (and
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01)
            $q8@653@01))
        (<=
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01)
            $q8@653@01)
          170141183460469231731687303715884105727)))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01)
      $q8@653@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1313@119@1313@606|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@612@01 4)) $q7@652@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1313@11@1313@607|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@654@01 $Snap)
(assert (= $t@654@01 ($Snap.combine ($Snap.first $t@654@01) ($Snap.second $t@654@01))))
(assert (= ($Snap.first $t@654@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@612@01 5))))
(assert (= ($Snap.second $t@654@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@612@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@655@01 $Snap)
(assert (= $t@655@01 ($Snap.combine ($Snap.first $t@655@01) ($Snap.second $t@655@01))))
(assert (= ($Snap.first $t@655@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@612@01 6))))
(assert (= ($Snap.second $t@655@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@612@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@656@01 $Snap)
(assert (= $t@656@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q9@657@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 483 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@612@01, 8)), $q9@657@01)) | live]
; [else-branch: 483 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@612@01, 8)), $q9@657@01) | live]
(push) ; 5
; [then-branch: 483 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@612@01, 8)), $q9@657@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 8)) $q9@657@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 483 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@612@01, 8)), $q9@657@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 8)) $q9@657@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 8)) $q9@657@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 8)) $q9@657@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@657@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 8)) $q9@657@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 8)) $q9@657@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 8)) $q9@657@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1316@11@1316@345-aux|)))
(assert (forall (($q9@657@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 8)) $q9@657@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 8)) $q9@657@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 8)) $q9@657@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1316@11@1316@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@658@01 $Snap)
(assert (= $t@658@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q9@659@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@659@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 8)) $q9@659@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 8)) $q9@659@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1317@11@1317@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@660@01 $Snap)
(assert (= $t@660@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q10@661@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 484 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@612@01, 9)), $q10@661@01)) | live]
; [else-branch: 484 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@612@01, 9)), $q10@661@01) | live]
(push) ; 5
; [then-branch: 484 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@612@01, 9)), $q10@661@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 9)) $q10@661@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 484 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@612@01, 9)), $q10@661@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 9)) $q10@661@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 9)) $q10@661@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 9)) $q10@661@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@661@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 9)) $q10@661@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 9)) $q10@661@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 9)) $q10@661@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1318@11@1318@349-aux|)))
(assert (forall (($q10@661@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 9)) $q10@661@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 9)) $q10@661@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 9)) $q10@661@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1318@11@1318@349|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@662@01 $Snap)
(assert (= $t@662@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q10@663@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@663@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 9)) $q10@663@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@612@01 9)) $q10@663@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1319@11@1319@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@664@01 $Snap)
(assert (= $t@664@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@612@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@665@01 $Snap)
(assert (= $t@665@01 ($Snap.combine ($Snap.first $t@665@01) ($Snap.second $t@665@01))))
(assert (= ($Snap.first $t@665@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@665@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@666@01 $Snap)
(assert (= $t@666@01 ($Snap.combine ($Snap.first $t@666@01) ($Snap.second $t@666@01))))
(assert (= ($Snap.first $t@666@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@609@01 0))))
(assert (= ($Snap.second $t@666@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@609@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@667@01 $Snap)
(assert (= $t@667@01 ($Snap.combine ($Snap.first $t@667@01) ($Snap.second $t@667@01))))
(assert (= ($Snap.first $t@667@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@609@01 1))))
(assert (= ($Snap.second $t@667@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@609@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@668@01 $Snap)
(assert (= $t@668@01 ($Snap.combine ($Snap.first $t@668@01) ($Snap.second $t@668@01))))
(assert (= ($Snap.first $t@668@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@609@01 2))))
(assert (= ($Snap.second $t@668@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@609@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@669@01 $Snap)
(assert (= $t@669@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@609@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@670@01 $Snap)
(assert (= $t@670@01 ($Snap.combine ($Snap.first $t@670@01) ($Snap.second $t@670@01))))
(assert (= ($Snap.first $t@670@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@609@01 4))))
(assert (= ($Snap.second $t@670@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@609@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@671@01 $Snap)
(assert (= $t@671@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@609@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@672@01 $Snap)
(assert (= $t@672@01 ($Snap.combine ($Snap.first $t@672@01) ($Snap.second $t@672@01))))
(assert (= ($Snap.first $t@672@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@608@01 0))))
(assert (= ($Snap.second $t@672@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@608@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@673@01 $Snap)
(assert (= $t@673@01 ($Snap.combine ($Snap.first $t@673@01) ($Snap.second $t@673@01))))
(assert (= ($Snap.first $t@673@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@608@01 1))))
(assert (= ($Snap.second $t@673@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@608@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@674@01 $Snap)
(assert (= $t@674@01 ($Snap.combine ($Snap.first $t@674@01) ($Snap.second $t@674@01))))
(assert (= ($Snap.first $t@674@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@608@01 2))))
(assert (= ($Snap.second $t@674@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@608@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@675@01 $Snap)
(assert (= $t@675@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@608@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@676@01 $Snap)
(assert (= $t@676@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@608@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@677@01 $Snap)
(assert (= $t@677@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@678@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc(self, 3)): Seq[Int])
(declare-const $t@679@01 $Snap)
(assert (= $t@679@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@680@01 $Snap)
(assert (= $t@680@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@608@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; l$a := ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(declare-const l$a@681@01 Seq<Int>)
(assert (= l$a@681@01 ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 0))))
; [eval] !(0 <= 11 && 11 < |l$a|)
; [eval] 0 <= 11 && 11 < |l$a|
; [eval] 0 <= 11
(set-option :timeout 0)
(push) ; 3
; [then-branch: 485 | False | live]
; [else-branch: 485 | True | live]
(push) ; 4
; [then-branch: 485 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 485 | True]
; [eval] 11 < |l$a|
; [eval] |l$a|
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (< 11 (Seq_length l$a@681@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 486 | !(11 < |l$a@681@01|) | dead]
; [else-branch: 486 | 11 < |l$a@681@01| | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 486 | 11 < |l$a@681@01|]
(assert (< 11 (Seq_length l$a@681@01)))
(pop) ; 3
; [eval] !!(0 <= 11 && 11 < |l$a|)
; [eval] !(0 <= 11 && 11 < |l$a|)
; [eval] 0 <= 11 && 11 < |l$a|
; [eval] 0 <= 11
(push) ; 3
; [then-branch: 487 | False | live]
; [else-branch: 487 | True | live]
(push) ; 4
; [then-branch: 487 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 487 | True]
; [eval] 11 < |l$a|
; [eval] |l$a|
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (not (< 11 (Seq_length l$a@681@01)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< 11 (Seq_length l$a@681@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 488 | 11 < |l$a@681@01| | live]
; [else-branch: 488 | !(11 < |l$a@681@01|) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 488 | 11 < |l$a@681@01|]
(assert (< 11 (Seq_length l$a@681@01)))
; [exec]
; l$a := l$a[11 := 10]
; [eval] l$a[11 := 10]
(declare-const l$a@682@01 Seq<Int>)
(assert (=
  l$a@682@01
  (Seq_append
    (Seq_take l$a@681@01 11)
    (Seq_append (Seq_singleton 10) (Seq_drop l$a@681@01 12)))))
; [eval] !(0 <= 11 && 11 < |l$a|)
; [eval] 0 <= 11 && 11 < |l$a|
; [eval] 0 <= 11
(push) ; 4
; [then-branch: 489 | False | live]
; [else-branch: 489 | True | live]
(push) ; 5
; [then-branch: 489 | False]
(assert false)
(pop) ; 5
(push) ; 5
; [else-branch: 489 | True]
; [eval] 11 < |l$a|
; [eval] |l$a|
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (< 11 (Seq_length l$a@682@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 490 | !(11 < |l$a@682@01|) | dead]
; [else-branch: 490 | 11 < |l$a@682@01| | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 490 | 11 < |l$a@682@01|]
(assert (< 11 (Seq_length l$a@682@01)))
(pop) ; 4
; [eval] !!(0 <= 11 && 11 < |l$a|)
; [eval] !(0 <= 11 && 11 < |l$a|)
; [eval] 0 <= 11 && 11 < |l$a|
; [eval] 0 <= 11
(push) ; 4
; [then-branch: 491 | False | live]
; [else-branch: 491 | True | live]
(push) ; 5
; [then-branch: 491 | False]
(assert false)
(pop) ; 5
(push) ; 5
; [else-branch: 491 | True]
; [eval] 11 < |l$a|
; [eval] |l$a|
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (not (< 11 (Seq_length l$a@682@01)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< 11 (Seq_length l$a@682@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 492 | 11 < |l$a@682@01| | live]
; [else-branch: 492 | !(11 < |l$a@682@01|) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 492 | 11 < |l$a@682@01|]
(assert (< 11 (Seq_length l$a@682@01)))
; [exec]
; l$i := $wrap(l$a[11])
; [eval] $wrap(l$a[11])
; [eval] l$a[11]
(declare-const l$i@683@01 $Int)
(assert (= l$i@683@01 ($wrap<$Int> (Seq_index l$a@682@01 11))))
; [eval] !(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] 0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= 1
(push) ; 5
; [then-branch: 493 | False | live]
; [else-branch: 493 | True | live]
(push) ; 6
; [then-branch: 493 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 493 | True]
; [eval] 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (< 1 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 494 | !(1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))|) | dead]
; [else-branch: 494 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))| | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 494 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))|]
(assert (< 1 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1)))))
(pop) ; 5
; [eval] !!(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] !(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] 0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= 1
(push) ; 5
; [then-branch: 495 | False | live]
; [else-branch: 495 | True | live]
(push) ; 6
; [then-branch: 495 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 495 | True]
; [eval] 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    1
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< 1 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 496 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))| | live]
; [else-branch: 496 | !(1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))|) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 496 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))|]
(assert (< 1 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1)))))
; [eval] !(0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|)
; [eval] 0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] 0 <= 2
(push) ; 6
; [then-branch: 497 | False | live]
; [else-branch: 497 | True | live]
(push) ; 7
; [then-branch: 497 | False]
(assert false)
(pop) ; 7
(push) ; 7
; [else-branch: 497 | True]
; [eval] 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (<
  2
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1)) 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 498 | !(2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))[1]|) | dead]
; [else-branch: 498 | 2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))[1]| | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 498 | 2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))[1]|]
(assert (<
  2
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1)) 1))))
(pop) ; 6
; [eval] !!(0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|)
; [eval] !(0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|)
; [eval] 0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] 0 <= 2
(push) ; 6
; [then-branch: 499 | False | live]
; [else-branch: 499 | True | live]
(push) ; 7
; [then-branch: 499 | False]
(assert false)
(pop) ; 7
(push) ; 7
; [else-branch: 499 | True]
; [eval] 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (<
    2
    (Seq_length
      (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1)) 1))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (<
  2
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1)) 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 500 | 2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))[1]| | live]
; [else-branch: 500 | !(2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))[1]|) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 500 | 2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))[1]|]
(assert (<
  2
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1)) 1))))
; [eval] !(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] 0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= 1
(push) ; 7
; [then-branch: 501 | False | live]
; [else-branch: 501 | True | live]
(push) ; 8
; [then-branch: 501 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 501 | True]
; [eval] 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 502 | !(1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))|) | dead]
; [else-branch: 502 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))| | live]
(push) ; 7
; [else-branch: 502 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))|]
(pop) ; 7
; [eval] !!(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] !(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] 0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= 1
(push) ; 7
; [then-branch: 503 | False | live]
; [else-branch: 503 | True | live]
(push) ; 8
; [then-branch: 503 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 503 | True]
; [eval] 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (<
    1
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 504 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))| | live]
; [else-branch: 504 | !(1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))|) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 504 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@612@01, 1))|]
; [exec]
; self := ($struct_set(self, 1, ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1 :=
;   ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1][2 := $unwrap(l$i)]]): $Struct)
; [eval] ($struct_set(self, 1, ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1 := ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1][2 := $unwrap(l$i)]]): $Struct)
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1 := ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1][2 := $unwrap(l$i)]]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1][2 := $unwrap(l$i)]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
; [eval] $unwrap(l$i)
(declare-const self@684@01 $Struct)
(assert (=
  self@684@01
  ($struct_set<$Struct> self@612@01 1 (Seq_append
    (Seq_take ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1)) 1)
    (Seq_append
      (Seq_singleton (Seq_append
        (Seq_take
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
            1)
          2)
        (Seq_append
          (Seq_singleton ($unwrap<Int> l$i@683@01))
          (Seq_drop
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1))
              1)
            3))))
      (Seq_drop ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@612@01 1)) 2))))))
; [eval] !(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] 0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= 1
(push) ; 8
; [then-branch: 505 | False | live]
; [else-branch: 505 | True | live]
(push) ; 9
; [then-branch: 505 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 505 | True]
; [eval] 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (< 1 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@684@01 1))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 506 | !(1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@684@01, 1))|) | dead]
; [else-branch: 506 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@684@01, 1))| | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 506 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@684@01, 1))|]
(assert (< 1 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@684@01 1)))))
(pop) ; 8
; [eval] !!(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] !(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] 0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= 1
(push) ; 8
; [then-branch: 507 | False | live]
; [else-branch: 507 | True | live]
(push) ; 9
; [then-branch: 507 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 507 | True]
; [eval] 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (<
    1
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@684@01 1)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< 1 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@684@01 1))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 508 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@684@01, 1))| | live]
; [else-branch: 508 | !(1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@684@01, 1))|) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 508 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@684@01, 1))|]
(assert (< 1 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@684@01 1)))))
; [eval] !(0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|)
; [eval] 0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] 0 <= 2
(push) ; 9
; [then-branch: 509 | False | live]
; [else-branch: 509 | True | live]
(push) ; 10
; [then-branch: 509 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 509 | True]
; [eval] 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  2
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@684@01 1)) 1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 510 | !(2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@684@01, 1))[1]|) | dead]
; [else-branch: 510 | 2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@684@01, 1))[1]| | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 510 | 2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@684@01, 1))[1]|]
(assert (<
  2
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@684@01 1)) 1))))
(pop) ; 9
; [eval] !!(0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|)
; [eval] !(0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|)
; [eval] 0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] 0 <= 2
(push) ; 9
; [then-branch: 511 | False | live]
; [else-branch: 511 | True | live]
(push) ; 10
; [then-branch: 511 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 511 | True]
; [eval] 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (<
    2
    (Seq_length
      (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@684@01 1)) 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  2
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@684@01 1)) 1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 512 | 2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@684@01, 1))[1]| | live]
; [else-branch: 512 | !(2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@684@01, 1))[1]|) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 512 | 2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@684@01, 1))[1]|]
(assert (<
  2
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@684@01 1)) 1))))
; [eval] !(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] 0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= 1
(push) ; 10
; [then-branch: 513 | False | live]
; [else-branch: 513 | True | live]
(push) ; 11
; [then-branch: 513 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 513 | True]
; [eval] 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 514 | !(1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@684@01, 1))|) | dead]
; [else-branch: 514 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@684@01, 1))| | live]
(push) ; 10
; [else-branch: 514 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@684@01, 1))|]
(pop) ; 10
; [eval] !!(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] !(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] 0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= 1
(push) ; 10
; [then-branch: 515 | False | live]
; [else-branch: 515 | True | live]
(push) ; 11
; [then-branch: 515 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 515 | True]
; [eval] 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (<
    1
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@684@01 1)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 516 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@684@01, 1))| | live]
; [else-branch: 516 | !(1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@684@01, 1))|) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 516 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@684@01, 1))|]
; [exec]
; self := ($struct_set(self, 1, ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1 :=
;   ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1][2 := 100]]): $Struct)
; [eval] ($struct_set(self, 1, ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1 := ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1][2 := 100]]): $Struct)
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1 := ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1][2 := 100]]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1][2 := 100]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(declare-const self@685@01 $Struct)
(assert (=
  self@685@01
  ($struct_set<$Struct> self@684@01 1 (Seq_append
    (Seq_take ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@684@01 1)) 1)
    (Seq_append
      (Seq_singleton (Seq_append
        (Seq_take
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@684@01 1))
            1)
          2)
        (Seq_append
          (Seq_singleton 100)
          (Seq_drop
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@684@01 1))
              1)
            3))))
      (Seq_drop ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@684@01 1)) 2))))))
; [eval] !(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] 0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= 1
(push) ; 11
; [then-branch: 517 | False | live]
; [else-branch: 517 | True | live]
(push) ; 12
; [then-branch: 517 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 517 | True]
; [eval] 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (< 1 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@685@01 1))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 518 | !(1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@685@01, 1))|) | dead]
; [else-branch: 518 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@685@01, 1))| | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 518 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@685@01, 1))|]
(assert (< 1 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@685@01 1)))))
(pop) ; 11
; [eval] !!(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] !(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] 0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= 1
(push) ; 11
; [then-branch: 519 | False | live]
; [else-branch: 519 | True | live]
(push) ; 12
; [then-branch: 519 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 519 | True]
; [eval] 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (<
    1
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@685@01 1)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< 1 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@685@01 1))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 520 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@685@01, 1))| | live]
; [else-branch: 520 | !(1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@685@01, 1))|) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 520 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@685@01, 1))|]
(assert (< 1 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@685@01 1)))))
; [eval] !(0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|)
; [eval] 0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] 0 <= 2
(push) ; 12
; [then-branch: 521 | False | live]
; [else-branch: 521 | True | live]
(push) ; 13
; [then-branch: 521 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 521 | True]
; [eval] 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (<
  2
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@685@01 1)) 1)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 522 | !(2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@685@01, 1))[1]|) | dead]
; [else-branch: 522 | 2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@685@01, 1))[1]| | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 522 | 2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@685@01, 1))[1]|]
(assert (<
  2
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@685@01 1)) 1))))
(pop) ; 12
; [eval] !!(0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|)
; [eval] !(0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|)
; [eval] 0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] 0 <= 2
(push) ; 12
; [then-branch: 523 | False | live]
; [else-branch: 523 | True | live]
(push) ; 13
; [then-branch: 523 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 523 | True]
; [eval] 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (<
    2
    (Seq_length
      (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@685@01 1)) 1))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (<
  2
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@685@01 1)) 1)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 524 | 2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@685@01, 1))[1]| | live]
; [else-branch: 524 | !(2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@685@01, 1))[1]|) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 524 | 2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@685@01, 1))[1]|]
(assert (<
  2
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@685@01 1)) 1))))
; [exec]
; $res := $unwrap($wrap(($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1][2]))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1][2]))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1][2])
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1][2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(declare-const $res@686@01 Int)
(assert (=
  $res@686@01
  ($unwrap<Int> ($wrap<$Int> (Seq_index
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@685@01 1)) 1)
    2)))))
; [exec]
; label return
; [exec]
; label end
; [exec]
; exhale $res == 100
; [eval] $res == 100
(push) ; 13
(assert (not (= $res@686@01 100)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (= $res@686@01 100))
; [eval] !$succ
; [then-branch: 525 | False | dead]
; [else-branch: 525 | True | live]
(push) ; 13
; [else-branch: 525 | True]
(pop) ; 13
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 526 | True | live]
; [else-branch: 526 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 526 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@687@01 $Snap)
(assert (= $t@687@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@625@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@688@01 $Struct)
(assert (=
  self@688@01
  ($struct_set<$Struct> self@685@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@685@01 5))
    l$havoc$1@625@01))))
; [exec]
; $contracts := l$havoc$2
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 14
(assert (not (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@688@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3)))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@688@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@612@01 3))))
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$matrix_write_fail ----------
(declare-const $succ@689@01 Bool)
(declare-const $res@690@01 Int)
(declare-const $succ@691@01 Bool)
(declare-const $res@692@01 Int)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@693@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@694@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@695@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@696@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@697@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@698@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@699@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@700@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@701@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@702@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@703@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@704@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@705@01 Bool)
; [exec]
; var l$a: Seq[Int]
(declare-const l$a@706@01 Seq<Int>)
; [exec]
; var l$i: $Int
(declare-const l$i@707@01 $Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@708@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@709@01 Int)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@710@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@711@01 $Map<Int~_$Struct>)
; [exec]
; inhale |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
(declare-const $t@712@01 $Snap)
(assert (= $t@712@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0))) 12))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] }
;     0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] &&
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <=
;     170141183460469231731687303715884105727)
(declare-const $t@713@01 $Snap)
(assert (= $t@713@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] } 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@714@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 527 | !(0 <= $q0@714@01) | live]
; [else-branch: 527 | 0 <= $q0@714@01 | live]
(push) ; 5
; [then-branch: 527 | !(0 <= $q0@714@01)]
(assert (not (<= 0 $q0@714@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 527 | 0 <= $q0@714@01]
(assert (<= 0 $q0@714@01))
; [eval] $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@714@01) (not (<= 0 $q0@714@01))))
(push) ; 4
; [then-branch: 528 | 0 <= $q0@714@01 && $q0@714@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@697@01, 0))| | live]
; [else-branch: 528 | !(0 <= $q0@714@01 && $q0@714@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@697@01, 0))|) | live]
(push) ; 5
; [then-branch: 528 | 0 <= $q0@714@01 && $q0@714@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@697@01, 0))|]
(assert (and
  (<= 0 $q0@714@01)
  (<
    $q0@714@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (>= $q0@714@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 529 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@697@01, 0))[$q0@714@01]) | live]
; [else-branch: 529 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@697@01, 0))[$q0@714@01] | live]
(push) ; 7
; [then-branch: 529 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@697@01, 0))[$q0@714@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0))
      $q0@714@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 529 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@697@01, 0))[$q0@714@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0)) $q0@714@01)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (>= $q0@714@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0))
      $q0@714@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0))
        $q0@714@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 528 | !(0 <= $q0@714@01 && $q0@714@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@697@01, 0))|)]
(assert (not
  (and
    (<= 0 $q0@714@01)
    (<
      $q0@714@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q0@714@01)
    (<
      $q0@714@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0)))))
  (and
    (<= 0 $q0@714@01)
    (<
      $q0@714@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0))
          $q0@714@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0))
            $q0@714@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q0@714@01)
      (<
        $q0@714@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0))))))
  (and
    (<= 0 $q0@714@01)
    (<
      $q0@714@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@714@01 Int)) (!
  (and
    (or (<= 0 $q0@714@01) (not (<= 0 $q0@714@01)))
    (=>
      (and
        (<= 0 $q0@714@01)
        (<
          $q0@714@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0)))))
      (and
        (<= 0 $q0@714@01)
        (<
          $q0@714@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0))
              $q0@714@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0))
                $q0@714@01))))))
    (or
      (not
        (and
          (<= 0 $q0@714@01)
          (<
            $q0@714@01
            (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0))))))
      (and
        (<= 0 $q0@714@01)
        (<
          $q0@714@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0))
    $q0@714@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1436@11@1436@346-aux|)))
(assert (forall (($q0@714@01 Int)) (!
  (=>
    (and
      (<= 0 $q0@714@01)
      (<
        $q0@714@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0))
          $q0@714@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0))
          $q0@714@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0))
    $q0@714@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1436@11@1436@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
(declare-const $t@715@01 $Snap)
(assert (= $t@715@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(assert (= (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $t@716@01 $Snap)
(assert (= $t@716@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $q1@717@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 530 | !(0 <= $q1@717@01) | live]
; [else-branch: 530 | 0 <= $q1@717@01 | live]
(push) ; 5
; [then-branch: 530 | !(0 <= $q1@717@01)]
(assert (not (<= 0 $q1@717@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 530 | 0 <= $q1@717@01]
(assert (<= 0 $q1@717@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@717@01) (not (<= 0 $q1@717@01))))
(push) ; 4
; [then-branch: 531 | 0 <= $q1@717@01 && $q1@717@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))| | live]
; [else-branch: 531 | !(0 <= $q1@717@01 && $q1@717@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))|) | live]
(push) ; 5
; [then-branch: 531 | 0 <= $q1@717@01 && $q1@717@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))|]
(assert (and
  (<= 0 $q1@717@01)
  (<
    $q1@717@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))))))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 6
(assert (not (>= $q1@717@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 531 | !(0 <= $q1@717@01 && $q1@717@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@717@01)
    (<
      $q1@717@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@717@01)
      (<
        $q1@717@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))))))
  (and
    (<= 0 $q1@717@01)
    (<
      $q1@717@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@717@01 Int)) (!
  (and
    (or (<= 0 $q1@717@01) (not (<= 0 $q1@717@01)))
    (or
      (not
        (and
          (<= 0 $q1@717@01)
          (<
            $q1@717@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))))))
      (and
        (<= 0 $q1@717@01)
        (<
          $q1@717@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
    $q1@717@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1438@11@1438@228-aux|)))
(assert (forall (($q1@717@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@717@01)
      (<
        $q1@717@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
          $q1@717@01))
      12))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
    $q1@717@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1438@11@1438@228|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     (forall $q2: Int ::
;       { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] }
;       0 <= $q2 &&
;       $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==>
;       -170141183460469231731687303715884105728 <=
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] &&
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <=
;       170141183460469231731687303715884105727))
(declare-const $t@718@01 $Snap)
(assert (= $t@718@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727))
(declare-const $q1@719@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 532 | !(0 <= $q1@719@01) | live]
; [else-branch: 532 | 0 <= $q1@719@01 | live]
(push) ; 5
; [then-branch: 532 | !(0 <= $q1@719@01)]
(assert (not (<= 0 $q1@719@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 532 | 0 <= $q1@719@01]
(assert (<= 0 $q1@719@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@719@01) (not (<= 0 $q1@719@01))))
(push) ; 4
; [then-branch: 533 | 0 <= $q1@719@01 && $q1@719@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))| | live]
; [else-branch: 533 | !(0 <= $q1@719@01 && $q1@719@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))|) | live]
(push) ; 5
; [then-branch: 533 | 0 <= $q1@719@01 && $q1@719@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))|]
(assert (and
  (<= 0 $q1@719@01)
  (<
    $q1@719@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))))))
; [eval] (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
(declare-const $q2@720@01 Int)
(push) ; 6
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] 0 <= $q2
(push) ; 7
; [then-branch: 534 | !(0 <= $q2@720@01) | live]
; [else-branch: 534 | 0 <= $q2@720@01 | live]
(push) ; 8
; [then-branch: 534 | !(0 <= $q2@720@01)]
(assert (not (<= 0 $q2@720@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 534 | 0 <= $q2@720@01]
(assert (<= 0 $q2@720@01))
; [eval] $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@719@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q2@720@01) (not (<= 0 $q2@720@01))))
(push) ; 7
; [then-branch: 535 | 0 <= $q2@720@01 && $q2@720@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))[$q1@719@01]| | live]
; [else-branch: 535 | !(0 <= $q2@720@01 && $q2@720@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))[$q1@719@01]|) | live]
(push) ; 8
; [then-branch: 535 | 0 <= $q2@720@01 && $q2@720@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))[$q1@719@01]|]
(assert (and
  (<= 0 $q2@720@01)
  (<
    $q2@720@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
        $q1@719@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@719@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q2@720@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 536 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))[$q1@719@01][$q2@720@01]) | live]
; [else-branch: 536 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))[$q1@719@01][$q2@720@01] | live]
(push) ; 10
; [then-branch: 536 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))[$q1@719@01][$q2@720@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
        $q1@719@01)
      $q2@720@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 536 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))[$q1@719@01][$q2@720@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
      $q1@719@01)
    $q2@720@01)))
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 11
(assert (not (>= $q1@719@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= $q2@720@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
        $q1@719@01)
      $q2@720@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
          $q1@719@01)
        $q2@720@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 535 | !(0 <= $q2@720@01 && $q2@720@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))[$q1@719@01]|)]
(assert (not
  (and
    (<= 0 $q2@720@01)
    (<
      $q2@720@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
          $q1@719@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q2@720@01)
    (<
      $q2@720@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
          $q1@719@01))))
  (and
    (<= 0 $q2@720@01)
    (<
      $q2@720@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
          $q1@719@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
            $q1@719@01)
          $q2@720@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
              $q1@719@01)
            $q2@720@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q2@720@01)
      (<
        $q2@720@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
            $q1@719@01)))))
  (and
    (<= 0 $q2@720@01)
    (<
      $q2@720@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
          $q1@719@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@720@01 Int)) (!
  (and
    (or (<= 0 $q2@720@01) (not (<= 0 $q2@720@01)))
    (=>
      (and
        (<= 0 $q2@720@01)
        (<
          $q2@720@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
              $q1@719@01))))
      (and
        (<= 0 $q2@720@01)
        (<
          $q2@720@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
              $q1@719@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
                $q1@719@01)
              $q2@720@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
                  $q1@719@01)
                $q2@720@01))))))
    (or
      (not
        (and
          (<= 0 $q2@720@01)
          (<
            $q2@720@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
                $q1@719@01)))))
      (and
        (<= 0 $q2@720@01)
        (<
          $q2@720@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
              $q1@719@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
      $q1@719@01)
    $q2@720@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1439@166@1439@541-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 533 | !(0 <= $q1@719@01 && $q1@719@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@719@01)
    (<
      $q1@719@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q1@719@01)
    (<
      $q1@719@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1)))))
  (and
    (<= 0 $q1@719@01)
    (<
      $q1@719@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))))
    (forall (($q2@720@01 Int)) (!
      (and
        (or (<= 0 $q2@720@01) (not (<= 0 $q2@720@01)))
        (=>
          (and
            (<= 0 $q2@720@01)
            (<
              $q2@720@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
                  $q1@719@01))))
          (and
            (<= 0 $q2@720@01)
            (<
              $q2@720@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
                  $q1@719@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
                    $q1@719@01)
                  $q2@720@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
                      $q1@719@01)
                    $q2@720@01))))))
        (or
          (not
            (and
              (<= 0 $q2@720@01)
              (<
                $q2@720@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
                    $q1@719@01)))))
          (and
            (<= 0 $q2@720@01)
            (<
              $q2@720@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
                  $q1@719@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
          $q1@719@01)
        $q2@720@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1439@166@1439@541-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@719@01)
      (<
        $q1@719@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))))))
  (and
    (<= 0 $q1@719@01)
    (<
      $q1@719@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@719@01 Int)) (!
  (and
    (or (<= 0 $q1@719@01) (not (<= 0 $q1@719@01)))
    (=>
      (and
        (<= 0 $q1@719@01)
        (<
          $q1@719@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1)))))
      (and
        (<= 0 $q1@719@01)
        (<
          $q1@719@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))))
        (forall (($q2@720@01 Int)) (!
          (and
            (or (<= 0 $q2@720@01) (not (<= 0 $q2@720@01)))
            (=>
              (and
                (<= 0 $q2@720@01)
                (<
                  $q2@720@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
                      $q1@719@01))))
              (and
                (<= 0 $q2@720@01)
                (<
                  $q2@720@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
                      $q1@719@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
                        $q1@719@01)
                      $q2@720@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
                          $q1@719@01)
                        $q2@720@01))))))
            (or
              (not
                (and
                  (<= 0 $q2@720@01)
                  (<
                    $q2@720@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
                        $q1@719@01)))))
              (and
                (<= 0 $q2@720@01)
                (<
                  $q2@720@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
                      $q1@719@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
              $q1@719@01)
            $q2@720@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1439@166@1439@541-aux|))))
    (or
      (not
        (and
          (<= 0 $q1@719@01)
          (<
            $q1@719@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))))))
      (and
        (<= 0 $q1@719@01)
        (<
          $q1@719@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
    $q1@719@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1439@11@1439@542-aux|)))
(assert (forall (($q1@719@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@719@01)
      (<
        $q1@719@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1)))))
    (forall (($q2@720@01 Int)) (!
      (=>
        (and
          (<= 0 $q2@720@01)
          (<
            $q2@720@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
                $q1@719@01))))
        (and
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
                $q1@719@01)
              $q2@720@01))
          (<=
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
                $q1@719@01)
              $q2@720@01)
            170141183460469231731687303715884105727)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
          $q1@719@01)
        $q2@720@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1439@166@1439@541|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
    $q1@719@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1439@11@1439@542|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
(declare-const $t@721@01 $Snap)
(assert (= $t@721@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(assert (=
  (Seq_length ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2)))
  2))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $t@722@01 $Snap)
(assert (= $t@722@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $q3@723@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 537 | !(0 <= $q3@723@01) | live]
; [else-branch: 537 | 0 <= $q3@723@01 | live]
(push) ; 5
; [then-branch: 537 | !(0 <= $q3@723@01)]
(assert (not (<= 0 $q3@723@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 537 | 0 <= $q3@723@01]
(assert (<= 0 $q3@723@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@723@01) (not (<= 0 $q3@723@01))))
(push) ; 4
; [then-branch: 538 | 0 <= $q3@723@01 && $q3@723@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))| | live]
; [else-branch: 538 | !(0 <= $q3@723@01 && $q3@723@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))|) | live]
(push) ; 5
; [then-branch: 538 | 0 <= $q3@723@01 && $q3@723@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))|]
(assert (and
  (<= 0 $q3@723@01)
  (<
    $q3@723@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 6
(assert (not (>= $q3@723@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 538 | !(0 <= $q3@723@01 && $q3@723@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@723@01)
    (<
      $q3@723@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@723@01)
      (<
        $q3@723@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))))))
  (and
    (<= 0 $q3@723@01)
    (<
      $q3@723@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@723@01 Int)) (!
  (and
    (or (<= 0 $q3@723@01) (not (<= 0 $q3@723@01)))
    (or
      (not
        (and
          (<= 0 $q3@723@01)
          (<
            $q3@723@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))))))
      (and
        (<= 0 $q3@723@01)
        (<
          $q3@723@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
    $q3@723@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1441@11@1441@242-aux|)))
(assert (forall (($q3@723@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@723@01)
      (<
        $q3@723@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
          $q3@723@01))
      2))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
    $q3@723@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1441@11@1441@242|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==
;       2))
(declare-const $t@724@01 $Snap)
(assert (= $t@724@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2))
(declare-const $q3@725@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 539 | !(0 <= $q3@725@01) | live]
; [else-branch: 539 | 0 <= $q3@725@01 | live]
(push) ; 5
; [then-branch: 539 | !(0 <= $q3@725@01)]
(assert (not (<= 0 $q3@725@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 539 | 0 <= $q3@725@01]
(assert (<= 0 $q3@725@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@725@01) (not (<= 0 $q3@725@01))))
(push) ; 4
; [then-branch: 540 | 0 <= $q3@725@01 && $q3@725@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))| | live]
; [else-branch: 540 | !(0 <= $q3@725@01 && $q3@725@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))|) | live]
(push) ; 5
; [then-branch: 540 | 0 <= $q3@725@01 && $q3@725@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))|]
(assert (and
  (<= 0 $q3@725@01)
  (<
    $q3@725@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
(declare-const $q4@726@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 541 | !(0 <= $q4@726@01) | live]
; [else-branch: 541 | 0 <= $q4@726@01 | live]
(push) ; 8
; [then-branch: 541 | !(0 <= $q4@726@01)]
(assert (not (<= 0 $q4@726@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 541 | 0 <= $q4@726@01]
(assert (<= 0 $q4@726@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@725@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@726@01) (not (<= 0 $q4@726@01))))
(push) ; 7
; [then-branch: 542 | 0 <= $q4@726@01 && $q4@726@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))[$q3@725@01]| | live]
; [else-branch: 542 | !(0 <= $q4@726@01 && $q4@726@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))[$q3@725@01]|) | live]
(push) ; 8
; [then-branch: 542 | 0 <= $q4@726@01 && $q4@726@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))[$q3@725@01]|]
(assert (and
  (<= 0 $q4@726@01)
  (<
    $q4@726@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
        $q3@725@01)))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@725@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q4@726@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 542 | !(0 <= $q4@726@01 && $q4@726@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))[$q3@725@01]|)]
(assert (not
  (and
    (<= 0 $q4@726@01)
    (<
      $q4@726@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
          $q3@725@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@726@01)
      (<
        $q4@726@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
            $q3@725@01)))))
  (and
    (<= 0 $q4@726@01)
    (<
      $q4@726@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
          $q3@725@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@726@01 Int)) (!
  (and
    (or (<= 0 $q4@726@01) (not (<= 0 $q4@726@01)))
    (or
      (not
        (and
          (<= 0 $q4@726@01)
          (<
            $q4@726@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                $q3@725@01)))))
      (and
        (<= 0 $q4@726@01)
        (<
          $q4@726@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
              $q3@725@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
      $q3@725@01)
    $q4@726@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1442@176@1442@422-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 540 | !(0 <= $q3@725@01 && $q3@725@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@725@01)
    (<
      $q3@725@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@725@01)
    (<
      $q3@725@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2)))))
  (and
    (<= 0 $q3@725@01)
    (<
      $q3@725@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))))
    (forall (($q4@726@01 Int)) (!
      (and
        (or (<= 0 $q4@726@01) (not (<= 0 $q4@726@01)))
        (or
          (not
            (and
              (<= 0 $q4@726@01)
              (<
                $q4@726@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                    $q3@725@01)))))
          (and
            (<= 0 $q4@726@01)
            (<
              $q4@726@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                  $q3@725@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
          $q3@725@01)
        $q4@726@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1442@176@1442@422-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@725@01)
      (<
        $q3@725@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))))))
  (and
    (<= 0 $q3@725@01)
    (<
      $q3@725@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@725@01 Int)) (!
  (and
    (or (<= 0 $q3@725@01) (not (<= 0 $q3@725@01)))
    (=>
      (and
        (<= 0 $q3@725@01)
        (<
          $q3@725@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2)))))
      (and
        (<= 0 $q3@725@01)
        (<
          $q3@725@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))))
        (forall (($q4@726@01 Int)) (!
          (and
            (or (<= 0 $q4@726@01) (not (<= 0 $q4@726@01)))
            (or
              (not
                (and
                  (<= 0 $q4@726@01)
                  (<
                    $q4@726@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                        $q3@725@01)))))
              (and
                (<= 0 $q4@726@01)
                (<
                  $q4@726@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                      $q3@725@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
              $q3@725@01)
            $q4@726@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1442@176@1442@422-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@725@01)
          (<
            $q3@725@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))))))
      (and
        (<= 0 $q3@725@01)
        (<
          $q3@725@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
    $q3@725@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1442@11@1442@423-aux|)))
(assert (forall (($q3@725@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@725@01)
      (<
        $q3@725@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2)))))
    (forall (($q4@726@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@726@01)
          (<
            $q4@726@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                $q3@725@01))))
        (=
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                $q3@725@01)
              $q4@726@01))
          2))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
          $q3@725@01)
        $q4@726@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1442@176@1442@422|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
    $q3@725@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1442@11@1442@423|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       (forall $q5: Int ::
;         { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] }
;         0 <= $q5 &&
;         $q5 <
;         |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==>
;         -170141183460469231731687303715884105728 <=
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] &&
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <=
;         170141183460469231731687303715884105727)))
(declare-const $t@727@01 $Snap)
(assert (= $t@727@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)))
(declare-const $q3@728@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 543 | !(0 <= $q3@728@01) | live]
; [else-branch: 543 | 0 <= $q3@728@01 | live]
(push) ; 5
; [then-branch: 543 | !(0 <= $q3@728@01)]
(assert (not (<= 0 $q3@728@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 543 | 0 <= $q3@728@01]
(assert (<= 0 $q3@728@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@728@01) (not (<= 0 $q3@728@01))))
(push) ; 4
; [then-branch: 544 | 0 <= $q3@728@01 && $q3@728@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))| | live]
; [else-branch: 544 | !(0 <= $q3@728@01 && $q3@728@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))|) | live]
(push) ; 5
; [then-branch: 544 | 0 <= $q3@728@01 && $q3@728@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))|]
(assert (and
  (<= 0 $q3@728@01)
  (<
    $q3@728@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
(declare-const $q4@729@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 545 | !(0 <= $q4@729@01) | live]
; [else-branch: 545 | 0 <= $q4@729@01 | live]
(push) ; 8
; [then-branch: 545 | !(0 <= $q4@729@01)]
(assert (not (<= 0 $q4@729@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 545 | 0 <= $q4@729@01]
(assert (<= 0 $q4@729@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@728@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@729@01) (not (<= 0 $q4@729@01))))
(push) ; 7
; [then-branch: 546 | 0 <= $q4@729@01 && $q4@729@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))[$q3@728@01]| | live]
; [else-branch: 546 | !(0 <= $q4@729@01 && $q4@729@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))[$q3@728@01]|) | live]
(push) ; 8
; [then-branch: 546 | 0 <= $q4@729@01 && $q4@729@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))[$q3@728@01]|]
(assert (and
  (<= 0 $q4@729@01)
  (<
    $q4@729@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
        $q3@728@01)))))
; [eval] (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
(declare-const $q5@730@01 Int)
(push) ; 9
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] 0 <= $q5
(push) ; 10
; [then-branch: 547 | !(0 <= $q5@730@01) | live]
; [else-branch: 547 | 0 <= $q5@730@01 | live]
(push) ; 11
; [then-branch: 547 | !(0 <= $q5@730@01)]
(assert (not (<= 0 $q5@730@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 547 | 0 <= $q5@730@01]
(assert (<= 0 $q5@730@01))
; [eval] $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@728@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@729@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q5@730@01) (not (<= 0 $q5@730@01))))
(push) ; 10
; [then-branch: 548 | 0 <= $q5@730@01 && $q5@730@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))[$q3@728@01][$q4@729@01]| | live]
; [else-branch: 548 | !(0 <= $q5@730@01 && $q5@730@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))[$q3@728@01][$q4@729@01]|) | live]
(push) ; 11
; [then-branch: 548 | 0 <= $q5@730@01 && $q5@730@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))[$q3@728@01][$q4@729@01]|]
(assert (and
  (<= 0 $q5@730@01)
  (<
    $q5@730@01
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
          $q3@728@01)
        $q4@729@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@728@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@729@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q5@730@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 549 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))[$q3@728@01][$q4@729@01][$q5@730@01]) | live]
; [else-branch: 549 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))[$q3@728@01][$q4@729@01][$q5@730@01] | live]
(push) ; 13
; [then-branch: 549 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))[$q3@728@01][$q4@729@01][$q5@730@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
          $q3@728@01)
        $q4@729@01)
      $q5@730@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 549 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))[$q3@728@01][$q4@729@01][$q5@730@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
        $q3@728@01)
      $q4@729@01)
    $q5@730@01)))
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 14
(assert (not (>= $q3@728@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q4@729@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q5@730@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
          $q3@728@01)
        $q4@729@01)
      $q5@730@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
            $q3@728@01)
          $q4@729@01)
        $q5@730@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 548 | !(0 <= $q5@730@01 && $q5@730@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))[$q3@728@01][$q4@729@01]|)]
(assert (not
  (and
    (<= 0 $q5@730@01)
    (<
      $q5@730@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
            $q3@728@01)
          $q4@729@01))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q5@730@01)
    (<
      $q5@730@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
            $q3@728@01)
          $q4@729@01))))
  (and
    (<= 0 $q5@730@01)
    (<
      $q5@730@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
            $q3@728@01)
          $q4@729@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
              $q3@728@01)
            $q4@729@01)
          $q5@730@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                $q3@728@01)
              $q4@729@01)
            $q5@730@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q5@730@01)
      (<
        $q5@730@01
        (Seq_length
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
              $q3@728@01)
            $q4@729@01)))))
  (and
    (<= 0 $q5@730@01)
    (<
      $q5@730@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
            $q3@728@01)
          $q4@729@01))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@730@01 Int)) (!
  (and
    (or (<= 0 $q5@730@01) (not (<= 0 $q5@730@01)))
    (=>
      (and
        (<= 0 $q5@730@01)
        (<
          $q5@730@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                $q3@728@01)
              $q4@729@01))))
      (and
        (<= 0 $q5@730@01)
        (<
          $q5@730@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                $q3@728@01)
              $q4@729@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                  $q3@728@01)
                $q4@729@01)
              $q5@730@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                    $q3@728@01)
                  $q4@729@01)
                $q5@730@01))))))
    (or
      (not
        (and
          (<= 0 $q5@730@01)
          (<
            $q5@730@01
            (Seq_length
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                  $q3@728@01)
                $q4@729@01)))))
      (and
        (<= 0 $q5@730@01)
        (<
          $q5@730@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                $q3@728@01)
              $q4@729@01))))))
  :pattern ((Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
        $q3@728@01)
      $q4@729@01)
    $q5@730@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1443@351@1443@766-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 546 | !(0 <= $q4@729@01 && $q4@729@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))[$q3@728@01]|)]
(assert (not
  (and
    (<= 0 $q4@729@01)
    (<
      $q4@729@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
          $q3@728@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q4@729@01)
    (<
      $q4@729@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
          $q3@728@01))))
  (and
    (<= 0 $q4@729@01)
    (<
      $q4@729@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
          $q3@728@01)))
    (forall (($q5@730@01 Int)) (!
      (and
        (or (<= 0 $q5@730@01) (not (<= 0 $q5@730@01)))
        (=>
          (and
            (<= 0 $q5@730@01)
            (<
              $q5@730@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                    $q3@728@01)
                  $q4@729@01))))
          (and
            (<= 0 $q5@730@01)
            (<
              $q5@730@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                    $q3@728@01)
                  $q4@729@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                      $q3@728@01)
                    $q4@729@01)
                  $q5@730@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                        $q3@728@01)
                      $q4@729@01)
                    $q5@730@01))))))
        (or
          (not
            (and
              (<= 0 $q5@730@01)
              (<
                $q5@730@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                      $q3@728@01)
                    $q4@729@01)))))
          (and
            (<= 0 $q5@730@01)
            (<
              $q5@730@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                    $q3@728@01)
                  $q4@729@01))))))
      :pattern ((Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
            $q3@728@01)
          $q4@729@01)
        $q5@730@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1443@351@1443@766-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@729@01)
      (<
        $q4@729@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
            $q3@728@01)))))
  (and
    (<= 0 $q4@729@01)
    (<
      $q4@729@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
          $q3@728@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@729@01 Int)) (!
  (and
    (or (<= 0 $q4@729@01) (not (<= 0 $q4@729@01)))
    (=>
      (and
        (<= 0 $q4@729@01)
        (<
          $q4@729@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
              $q3@728@01))))
      (and
        (<= 0 $q4@729@01)
        (<
          $q4@729@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
              $q3@728@01)))
        (forall (($q5@730@01 Int)) (!
          (and
            (or (<= 0 $q5@730@01) (not (<= 0 $q5@730@01)))
            (=>
              (and
                (<= 0 $q5@730@01)
                (<
                  $q5@730@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                        $q3@728@01)
                      $q4@729@01))))
              (and
                (<= 0 $q5@730@01)
                (<
                  $q5@730@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                        $q3@728@01)
                      $q4@729@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                          $q3@728@01)
                        $q4@729@01)
                      $q5@730@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                            $q3@728@01)
                          $q4@729@01)
                        $q5@730@01))))))
            (or
              (not
                (and
                  (<= 0 $q5@730@01)
                  (<
                    $q5@730@01
                    (Seq_length
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                          $q3@728@01)
                        $q4@729@01)))))
              (and
                (<= 0 $q5@730@01)
                (<
                  $q5@730@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                        $q3@728@01)
                      $q4@729@01))))))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                $q3@728@01)
              $q4@729@01)
            $q5@730@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1443@351@1443@766-aux|))))
    (or
      (not
        (and
          (<= 0 $q4@729@01)
          (<
            $q4@729@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                $q3@728@01)))))
      (and
        (<= 0 $q4@729@01)
        (<
          $q4@729@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
              $q3@728@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
      $q3@728@01)
    $q4@729@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1443@176@1443@767-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 544 | !(0 <= $q3@728@01 && $q3@728@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@697@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@728@01)
    (<
      $q3@728@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@728@01)
    (<
      $q3@728@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2)))))
  (and
    (<= 0 $q3@728@01)
    (<
      $q3@728@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))))
    (forall (($q4@729@01 Int)) (!
      (and
        (or (<= 0 $q4@729@01) (not (<= 0 $q4@729@01)))
        (=>
          (and
            (<= 0 $q4@729@01)
            (<
              $q4@729@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                  $q3@728@01))))
          (and
            (<= 0 $q4@729@01)
            (<
              $q4@729@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                  $q3@728@01)))
            (forall (($q5@730@01 Int)) (!
              (and
                (or (<= 0 $q5@730@01) (not (<= 0 $q5@730@01)))
                (=>
                  (and
                    (<= 0 $q5@730@01)
                    (<
                      $q5@730@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                            $q3@728@01)
                          $q4@729@01))))
                  (and
                    (<= 0 $q5@730@01)
                    (<
                      $q5@730@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                            $q3@728@01)
                          $q4@729@01)))
                    (or
                      (<=
                        (- 0 170141183460469231731687303715884105728)
                        (Seq_index
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                              $q3@728@01)
                            $q4@729@01)
                          $q5@730@01))
                      (not
                        (<=
                          (- 0 170141183460469231731687303715884105728)
                          (Seq_index
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                                $q3@728@01)
                              $q4@729@01)
                            $q5@730@01))))))
                (or
                  (not
                    (and
                      (<= 0 $q5@730@01)
                      (<
                        $q5@730@01
                        (Seq_length
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                              $q3@728@01)
                            $q4@729@01)))))
                  (and
                    (<= 0 $q5@730@01)
                    (<
                      $q5@730@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                            $q3@728@01)
                          $q4@729@01))))))
              :pattern ((Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                    $q3@728@01)
                  $q4@729@01)
                $q5@730@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1443@351@1443@766-aux|))))
        (or
          (not
            (and
              (<= 0 $q4@729@01)
              (<
                $q4@729@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                    $q3@728@01)))))
          (and
            (<= 0 $q4@729@01)
            (<
              $q4@729@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                  $q3@728@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
          $q3@728@01)
        $q4@729@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1443@176@1443@767-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@728@01)
      (<
        $q3@728@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))))))
  (and
    (<= 0 $q3@728@01)
    (<
      $q3@728@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@728@01 Int)) (!
  (and
    (or (<= 0 $q3@728@01) (not (<= 0 $q3@728@01)))
    (=>
      (and
        (<= 0 $q3@728@01)
        (<
          $q3@728@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2)))))
      (and
        (<= 0 $q3@728@01)
        (<
          $q3@728@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))))
        (forall (($q4@729@01 Int)) (!
          (and
            (or (<= 0 $q4@729@01) (not (<= 0 $q4@729@01)))
            (=>
              (and
                (<= 0 $q4@729@01)
                (<
                  $q4@729@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                      $q3@728@01))))
              (and
                (<= 0 $q4@729@01)
                (<
                  $q4@729@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                      $q3@728@01)))
                (forall (($q5@730@01 Int)) (!
                  (and
                    (or (<= 0 $q5@730@01) (not (<= 0 $q5@730@01)))
                    (=>
                      (and
                        (<= 0 $q5@730@01)
                        (<
                          $q5@730@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                                $q3@728@01)
                              $q4@729@01))))
                      (and
                        (<= 0 $q5@730@01)
                        (<
                          $q5@730@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                                $q3@728@01)
                              $q4@729@01)))
                        (or
                          (<=
                            (- 0 170141183460469231731687303715884105728)
                            (Seq_index
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                                  $q3@728@01)
                                $q4@729@01)
                              $q5@730@01))
                          (not
                            (<=
                              (- 0 170141183460469231731687303715884105728)
                              (Seq_index
                                (Seq_index
                                  (Seq_index
                                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                                    $q3@728@01)
                                  $q4@729@01)
                                $q5@730@01))))))
                    (or
                      (not
                        (and
                          (<= 0 $q5@730@01)
                          (<
                            $q5@730@01
                            (Seq_length
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                                  $q3@728@01)
                                $q4@729@01)))))
                      (and
                        (<= 0 $q5@730@01)
                        (<
                          $q5@730@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                                $q3@728@01)
                              $q4@729@01))))))
                  :pattern ((Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                        $q3@728@01)
                      $q4@729@01)
                    $q5@730@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1443@351@1443@766-aux|))))
            (or
              (not
                (and
                  (<= 0 $q4@729@01)
                  (<
                    $q4@729@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                        $q3@728@01)))))
              (and
                (<= 0 $q4@729@01)
                (<
                  $q4@729@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                      $q3@728@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
              $q3@728@01)
            $q4@729@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1443@176@1443@767-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@728@01)
          (<
            $q3@728@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))))))
      (and
        (<= 0 $q3@728@01)
        (<
          $q3@728@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
    $q3@728@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1443@11@1443@768-aux|)))
(assert (forall (($q3@728@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@728@01)
      (<
        $q3@728@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2)))))
    (forall (($q4@729@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@729@01)
          (<
            $q4@729@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                $q3@728@01))))
        (forall (($q5@730@01 Int)) (!
          (=>
            (and
              (<= 0 $q5@730@01)
              (<
                $q5@730@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                      $q3@728@01)
                    $q4@729@01))))
            (and
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                      $q3@728@01)
                    $q4@729@01)
                  $q5@730@01))
              (<=
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                      $q3@728@01)
                    $q4@729@01)
                  $q5@730@01)
                170141183460469231731687303715884105727)))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
                $q3@728@01)
              $q4@729@01)
            $q5@730@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1443@351@1443@766|)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
          $q3@728@01)
        $q4@729@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1443@176@1443@767|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@697@01 2))
    $q3@728@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1443@11@1443@768|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
(declare-const $t@731@01 $Snap)
(assert (= $t@731@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 3))) 1000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] }
;     0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] &&
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <=
;     170141183460469231731687303715884105727)
(declare-const $t@732@01 $Snap)
(assert (= $t@732@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] } 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727)
(declare-const $q6@733@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] 0 <= $q6
(push) ; 4
; [then-branch: 550 | !(0 <= $q6@733@01) | live]
; [else-branch: 550 | 0 <= $q6@733@01 | live]
(push) ; 5
; [then-branch: 550 | !(0 <= $q6@733@01)]
(assert (not (<= 0 $q6@733@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 550 | 0 <= $q6@733@01]
(assert (<= 0 $q6@733@01))
; [eval] $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q6@733@01) (not (<= 0 $q6@733@01))))
(push) ; 4
; [then-branch: 551 | 0 <= $q6@733@01 && $q6@733@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@697@01, 3))| | live]
; [else-branch: 551 | !(0 <= $q6@733@01 && $q6@733@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@697@01, 3))|) | live]
(push) ; 5
; [then-branch: 551 | 0 <= $q6@733@01 && $q6@733@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@697@01, 3))|]
(assert (and
  (<= 0 $q6@733@01)
  (<
    $q6@733@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 3))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (>= $q6@733@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 552 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@697@01, 3))[$q6@733@01]) | live]
; [else-branch: 552 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@697@01, 3))[$q6@733@01] | live]
(push) ; 7
; [then-branch: 552 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@697@01, 3))[$q6@733@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 3))
      $q6@733@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 552 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@697@01, 3))[$q6@733@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 3)) $q6@733@01)))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (>= $q6@733@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 3))
      $q6@733@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 3))
        $q6@733@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 551 | !(0 <= $q6@733@01 && $q6@733@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@697@01, 3))|)]
(assert (not
  (and
    (<= 0 $q6@733@01)
    (<
      $q6@733@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q6@733@01)
    (<
      $q6@733@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 3)))))
  (and
    (<= 0 $q6@733@01)
    (<
      $q6@733@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 3))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 3))
          $q6@733@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 3))
            $q6@733@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q6@733@01)
      (<
        $q6@733@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 3))))))
  (and
    (<= 0 $q6@733@01)
    (<
      $q6@733@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@733@01 Int)) (!
  (and
    (or (<= 0 $q6@733@01) (not (<= 0 $q6@733@01)))
    (=>
      (and
        (<= 0 $q6@733@01)
        (<
          $q6@733@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 3)))))
      (and
        (<= 0 $q6@733@01)
        (<
          $q6@733@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 3))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 3))
              $q6@733@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 3))
                $q6@733@01))))))
    (or
      (not
        (and
          (<= 0 $q6@733@01)
          (<
            $q6@733@01
            (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 3))))))
      (and
        (<= 0 $q6@733@01)
        (<
          $q6@733@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 3)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 3))
    $q6@733@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1445@11@1445@346-aux|)))
(assert (forall (($q6@733@01 Int)) (!
  (=>
    (and
      (<= 0 $q6@733@01)
      (<
        $q6@733@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 3)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 3))
          $q6@733@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 3))
          $q6@733@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 3))
    $q6@733@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1445@11@1445@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==
;     10)
(declare-const $t@734@01 $Snap)
(assert (= $t@734@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10)
(declare-const $q7@735@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@735@01 Int)) (!
  (=
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@735@01))
    10)
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@735@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1446@11@1446@209|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     (forall $q8: Int ::
;       { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] }
;       0 <= $q8 &&
;       $q8 <
;       |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==>
;       -170141183460469231731687303715884105728 <=
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] &&
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <=
;       170141183460469231731687303715884105727))
(declare-const $t@736@01 $Snap)
(assert (= $t@736@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727))
(declare-const $q7@737@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727)
(declare-const $q8@738@01 Int)
(push) ; 4
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] 0 <= $q8
(push) ; 5
; [then-branch: 553 | !(0 <= $q8@738@01) | live]
; [else-branch: 553 | 0 <= $q8@738@01 | live]
(push) ; 6
; [then-branch: 553 | !(0 <= $q8@738@01)]
(assert (not (<= 0 $q8@738@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 553 | 0 <= $q8@738@01]
(assert (<= 0 $q8@738@01))
; [eval] $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q8@738@01) (not (<= 0 $q8@738@01))))
(push) ; 5
; [then-branch: 554 | 0 <= $q8@738@01 && $q8@738@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@697@01, 4)), $q7@737@01)| | live]
; [else-branch: 554 | !(0 <= $q8@738@01 && $q8@738@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@697@01, 4)), $q7@737@01)|) | live]
(push) ; 6
; [then-branch: 554 | 0 <= $q8@738@01 && $q8@738@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@697@01, 4)), $q7@737@01)|]
(assert (and
  (<= 0 $q8@738@01)
  (<
    $q8@738@01
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] -170141183460469231731687303715884105728
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 7
(assert (not (>= $q8@738@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 555 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@697@01, 4)), $q7@737@01)[$q8@738@01]) | live]
; [else-branch: 555 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@697@01, 4)), $q7@737@01)[$q8@738@01] | live]
(push) ; 8
; [then-branch: 555 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@697@01, 4)), $q7@737@01)[$q8@738@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01)
      $q8@738@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 555 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@697@01, 4)), $q7@737@01)[$q8@738@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01)
    $q8@738@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 9
(assert (not (>= $q8@738@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01)
      $q8@738@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01)
        $q8@738@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 554 | !(0 <= $q8@738@01 && $q8@738@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@697@01, 4)), $q7@737@01)|)]
(assert (not
  (and
    (<= 0 $q8@738@01)
    (<
      $q8@738@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q8@738@01)
    (<
      $q8@738@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01))))
  (and
    (<= 0 $q8@738@01)
    (<
      $q8@738@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01)
          $q8@738@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01)
            $q8@738@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q8@738@01)
      (<
        $q8@738@01
        (Seq_length
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01)))))
  (and
    (<= 0 $q8@738@01)
    (<
      $q8@738@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q8@738@01 Int)) (!
  (and
    (or (<= 0 $q8@738@01) (not (<= 0 $q8@738@01)))
    (=>
      (and
        (<= 0 $q8@738@01)
        (<
          $q8@738@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01))))
      (and
        (<= 0 $q8@738@01)
        (<
          $q8@738@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01)
              $q8@738@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01)
                $q8@738@01))))))
    (or
      (not
        (and
          (<= 0 $q8@738@01)
          (<
            $q8@738@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01)))))
      (and
        (<= 0 $q8@738@01)
        (<
          $q8@738@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01))))))
  :pattern ((Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01)
    $q8@738@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1447@119@1447@606-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@737@01 Int)) (!
  (forall (($q8@738@01 Int)) (!
    (and
      (or (<= 0 $q8@738@01) (not (<= 0 $q8@738@01)))
      (=>
        (and
          (<= 0 $q8@738@01)
          (<
            $q8@738@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01))))
        (and
          (<= 0 $q8@738@01)
          (<
            $q8@738@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01)))
          (or
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01)
                $q8@738@01))
            (not
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01)
                  $q8@738@01))))))
      (or
        (not
          (and
            (<= 0 $q8@738@01)
            (<
              $q8@738@01
              (Seq_length
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01)))))
        (and
          (<= 0 $q8@738@01)
          (<
            $q8@738@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01))))))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01)
      $q8@738@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1447@119@1447@606-aux|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1447@11@1447@607-aux|)))
(assert (forall (($q7@737@01 Int)) (!
  (forall (($q8@738@01 Int)) (!
    (=>
      (and
        (<= 0 $q8@738@01)
        (<
          $q8@738@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01))))
      (and
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01)
            $q8@738@01))
        (<=
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01)
            $q8@738@01)
          170141183460469231731687303715884105727)))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01)
      $q8@738@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1447@119@1447@606|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@697@01 4)) $q7@737@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1447@11@1447@607|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@739@01 $Snap)
(assert (= $t@739@01 ($Snap.combine ($Snap.first $t@739@01) ($Snap.second $t@739@01))))
(assert (= ($Snap.first $t@739@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@697@01 5))))
(assert (= ($Snap.second $t@739@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@697@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@740@01 $Snap)
(assert (= $t@740@01 ($Snap.combine ($Snap.first $t@740@01) ($Snap.second $t@740@01))))
(assert (= ($Snap.first $t@740@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@697@01 6))))
(assert (= ($Snap.second $t@740@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@697@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@741@01 $Snap)
(assert (= $t@741@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q9@742@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 556 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@697@01, 8)), $q9@742@01)) | live]
; [else-branch: 556 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@697@01, 8)), $q9@742@01) | live]
(push) ; 5
; [then-branch: 556 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@697@01, 8)), $q9@742@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 8)) $q9@742@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 556 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@697@01, 8)), $q9@742@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 8)) $q9@742@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 8)) $q9@742@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 8)) $q9@742@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@742@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 8)) $q9@742@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 8)) $q9@742@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 8)) $q9@742@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1450@11@1450@345-aux|)))
(assert (forall (($q9@742@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 8)) $q9@742@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 8)) $q9@742@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 8)) $q9@742@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1450@11@1450@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@743@01 $Snap)
(assert (= $t@743@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q9@744@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@744@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 8)) $q9@744@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 8)) $q9@744@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1451@11@1451@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@745@01 $Snap)
(assert (= $t@745@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q10@746@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 557 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@697@01, 9)), $q10@746@01)) | live]
; [else-branch: 557 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@697@01, 9)), $q10@746@01) | live]
(push) ; 5
; [then-branch: 557 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@697@01, 9)), $q10@746@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 9)) $q10@746@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 557 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@697@01, 9)), $q10@746@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 9)) $q10@746@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 9)) $q10@746@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 9)) $q10@746@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@746@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 9)) $q10@746@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 9)) $q10@746@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 9)) $q10@746@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1452@11@1452@349-aux|)))
(assert (forall (($q10@746@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 9)) $q10@746@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 9)) $q10@746@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 9)) $q10@746@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1452@11@1452@349|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@747@01 $Snap)
(assert (= $t@747@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q10@748@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@748@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 9)) $q10@748@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@697@01 9)) $q10@748@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1453@11@1453@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@749@01 $Snap)
(assert (= $t@749@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@697@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@750@01 $Snap)
(assert (= $t@750@01 ($Snap.combine ($Snap.first $t@750@01) ($Snap.second $t@750@01))))
(assert (= ($Snap.first $t@750@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@750@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@751@01 $Snap)
(assert (= $t@751@01 ($Snap.combine ($Snap.first $t@751@01) ($Snap.second $t@751@01))))
(assert (= ($Snap.first $t@751@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@694@01 0))))
(assert (= ($Snap.second $t@751@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@694@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@752@01 $Snap)
(assert (= $t@752@01 ($Snap.combine ($Snap.first $t@752@01) ($Snap.second $t@752@01))))
(assert (= ($Snap.first $t@752@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@694@01 1))))
(assert (= ($Snap.second $t@752@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@694@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@753@01 $Snap)
(assert (= $t@753@01 ($Snap.combine ($Snap.first $t@753@01) ($Snap.second $t@753@01))))
(assert (= ($Snap.first $t@753@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@694@01 2))))
(assert (= ($Snap.second $t@753@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@694@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@754@01 $Snap)
(assert (= $t@754@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@694@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@755@01 $Snap)
(assert (= $t@755@01 ($Snap.combine ($Snap.first $t@755@01) ($Snap.second $t@755@01))))
(assert (= ($Snap.first $t@755@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@694@01 4))))
(assert (= ($Snap.second $t@755@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@694@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@756@01 $Snap)
(assert (= $t@756@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@694@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@757@01 $Snap)
(assert (= $t@757@01 ($Snap.combine ($Snap.first $t@757@01) ($Snap.second $t@757@01))))
(assert (= ($Snap.first $t@757@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@693@01 0))))
(assert (= ($Snap.second $t@757@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@693@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@758@01 $Snap)
(assert (= $t@758@01 ($Snap.combine ($Snap.first $t@758@01) ($Snap.second $t@758@01))))
(assert (= ($Snap.first $t@758@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@693@01 1))))
(assert (= ($Snap.second $t@758@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@693@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@759@01 $Snap)
(assert (= $t@759@01 ($Snap.combine ($Snap.first $t@759@01) ($Snap.second $t@759@01))))
(assert (= ($Snap.first $t@759@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@693@01 2))))
(assert (= ($Snap.second $t@759@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@693@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@760@01 $Snap)
(assert (= $t@760@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@693@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@761@01 $Snap)
(assert (= $t@761@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@693@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@762@01 $Snap)
(assert (= $t@762@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@763@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc(self, 3)): Seq[Int])
(declare-const $t@764@01 $Snap)
(assert (= $t@764@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@765@01 $Snap)
(assert (= $t@765@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@693@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; l$a := ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(declare-const l$a@766@01 Seq<Int>)
(assert (= l$a@766@01 ($struct_get<Seq<Int>> ($struct_loc<Int> self@697@01 0))))
; [eval] !(0 <= 11 && 11 < |l$a|)
; [eval] 0 <= 11 && 11 < |l$a|
; [eval] 0 <= 11
(set-option :timeout 0)
(push) ; 3
; [then-branch: 558 | False | live]
; [else-branch: 558 | True | live]
(push) ; 4
; [then-branch: 558 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 558 | True]
; [eval] 11 < |l$a|
; [eval] |l$a|
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (< 11 (Seq_length l$a@766@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 559 | !(11 < |l$a@766@01|) | dead]
; [else-branch: 559 | 11 < |l$a@766@01| | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 559 | 11 < |l$a@766@01|]
(assert (< 11 (Seq_length l$a@766@01)))
(pop) ; 3
; [eval] !!(0 <= 11 && 11 < |l$a|)
; [eval] !(0 <= 11 && 11 < |l$a|)
; [eval] 0 <= 11 && 11 < |l$a|
; [eval] 0 <= 11
(push) ; 3
; [then-branch: 560 | False | live]
; [else-branch: 560 | True | live]
(push) ; 4
; [then-branch: 560 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 560 | True]
; [eval] 11 < |l$a|
; [eval] |l$a|
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (not (< 11 (Seq_length l$a@766@01)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< 11 (Seq_length l$a@766@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 561 | 11 < |l$a@766@01| | live]
; [else-branch: 561 | !(11 < |l$a@766@01|) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 561 | 11 < |l$a@766@01|]
(assert (< 11 (Seq_length l$a@766@01)))
; [exec]
; l$a := l$a[11 := 10]
; [eval] l$a[11 := 10]
(declare-const l$a@767@01 Seq<Int>)
(assert (=
  l$a@767@01
  (Seq_append
    (Seq_take l$a@766@01 11)
    (Seq_append (Seq_singleton 10) (Seq_drop l$a@766@01 12)))))
; [eval] !(0 <= 11 && 11 < |l$a|)
; [eval] 0 <= 11 && 11 < |l$a|
; [eval] 0 <= 11
(push) ; 4
; [then-branch: 562 | False | live]
; [else-branch: 562 | True | live]
(push) ; 5
; [then-branch: 562 | False]
(assert false)
(pop) ; 5
(push) ; 5
; [else-branch: 562 | True]
; [eval] 11 < |l$a|
; [eval] |l$a|
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (< 11 (Seq_length l$a@767@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 563 | !(11 < |l$a@767@01|) | dead]
; [else-branch: 563 | 11 < |l$a@767@01| | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 563 | 11 < |l$a@767@01|]
(assert (< 11 (Seq_length l$a@767@01)))
(pop) ; 4
; [eval] !!(0 <= 11 && 11 < |l$a|)
; [eval] !(0 <= 11 && 11 < |l$a|)
; [eval] 0 <= 11 && 11 < |l$a|
; [eval] 0 <= 11
(push) ; 4
; [then-branch: 564 | False | live]
; [else-branch: 564 | True | live]
(push) ; 5
; [then-branch: 564 | False]
(assert false)
(pop) ; 5
(push) ; 5
; [else-branch: 564 | True]
; [eval] 11 < |l$a|
; [eval] |l$a|
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(push) ; 4
(set-option :timeout 10)
(assert (not (not (< 11 (Seq_length l$a@767@01)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< 11 (Seq_length l$a@767@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 565 | 11 < |l$a@767@01| | live]
; [else-branch: 565 | !(11 < |l$a@767@01|) | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 565 | 11 < |l$a@767@01|]
(assert (< 11 (Seq_length l$a@767@01)))
; [exec]
; l$i := $wrap(l$a[11])
; [eval] $wrap(l$a[11])
; [eval] l$a[11]
(declare-const l$i@768@01 $Int)
(assert (= l$i@768@01 ($wrap<$Int> (Seq_index l$a@767@01 11))))
; [eval] !(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] 0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= 1
(push) ; 5
; [then-branch: 566 | False | live]
; [else-branch: 566 | True | live]
(push) ; 6
; [then-branch: 566 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 566 | True]
; [eval] 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (< 1 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 567 | !(1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))|) | dead]
; [else-branch: 567 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))| | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 567 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))|]
(assert (< 1 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1)))))
(pop) ; 5
; [eval] !!(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] !(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] 0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= 1
(push) ; 5
; [then-branch: 568 | False | live]
; [else-branch: 568 | True | live]
(push) ; 6
; [then-branch: 568 | False]
(assert false)
(pop) ; 6
(push) ; 6
; [else-branch: 568 | True]
; [eval] 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(push) ; 5
(set-option :timeout 10)
(assert (not (not
  (<
    1
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1)))))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< 1 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 569 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))| | live]
; [else-branch: 569 | !(1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))|) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 569 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))|]
(assert (< 1 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1)))))
; [eval] !(0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|)
; [eval] 0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] 0 <= 2
(push) ; 6
; [then-branch: 570 | False | live]
; [else-branch: 570 | True | live]
(push) ; 7
; [then-branch: 570 | False]
(assert false)
(pop) ; 7
(push) ; 7
; [else-branch: 570 | True]
; [eval] 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (<
  2
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1)) 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 571 | !(2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))[1]|) | dead]
; [else-branch: 571 | 2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))[1]| | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 571 | 2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))[1]|]
(assert (<
  2
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1)) 1))))
(pop) ; 6
; [eval] !!(0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|)
; [eval] !(0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|)
; [eval] 0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] 0 <= 2
(push) ; 6
; [then-branch: 572 | False | live]
; [else-branch: 572 | True | live]
(push) ; 7
; [then-branch: 572 | False]
(assert false)
(pop) ; 7
(push) ; 7
; [else-branch: 572 | True]
; [eval] 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(push) ; 6
(set-option :timeout 10)
(assert (not (not
  (<
    2
    (Seq_length
      (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1)) 1))))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (<
  2
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1)) 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 573 | 2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))[1]| | live]
; [else-branch: 573 | !(2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))[1]|) | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 573 | 2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))[1]|]
(assert (<
  2
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1)) 1))))
; [eval] !(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] 0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= 1
(push) ; 7
; [then-branch: 574 | False | live]
; [else-branch: 574 | True | live]
(push) ; 8
; [then-branch: 574 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 574 | True]
; [eval] 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
; [then-branch: 575 | !(1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))|) | dead]
; [else-branch: 575 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))| | live]
(push) ; 7
; [else-branch: 575 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))|]
(pop) ; 7
; [eval] !!(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] !(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] 0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= 1
(push) ; 7
; [then-branch: 576 | False | live]
; [else-branch: 576 | True | live]
(push) ; 8
; [then-branch: 576 | False]
(assert false)
(pop) ; 8
(push) ; 8
; [else-branch: 576 | True]
; [eval] 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(push) ; 7
(set-option :timeout 10)
(assert (not (not
  (<
    1
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1)))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 577 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))| | live]
; [else-branch: 577 | !(1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))|) | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 577 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@697@01, 1))|]
; [exec]
; self := ($struct_set(self, 1, ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1 :=
;   ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1][2 := $unwrap(l$i)]]): $Struct)
; [eval] ($struct_set(self, 1, ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1 := ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1][2 := $unwrap(l$i)]]): $Struct)
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1 := ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1][2 := $unwrap(l$i)]]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1][2 := $unwrap(l$i)]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
; [eval] $unwrap(l$i)
(declare-const self@769@01 $Struct)
(assert (=
  self@769@01
  ($struct_set<$Struct> self@697@01 1 (Seq_append
    (Seq_take ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1)) 1)
    (Seq_append
      (Seq_singleton (Seq_append
        (Seq_take
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
            1)
          2)
        (Seq_append
          (Seq_singleton ($unwrap<Int> l$i@768@01))
          (Seq_drop
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1))
              1)
            3))))
      (Seq_drop ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@697@01 1)) 2))))))
; [eval] !(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] 0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= 1
(push) ; 8
; [then-branch: 578 | False | live]
; [else-branch: 578 | True | live]
(push) ; 9
; [then-branch: 578 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 578 | True]
; [eval] 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (< 1 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@769@01 1))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 579 | !(1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@769@01, 1))|) | dead]
; [else-branch: 579 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@769@01, 1))| | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 579 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@769@01, 1))|]
(assert (< 1 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@769@01 1)))))
(pop) ; 8
; [eval] !!(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] !(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] 0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= 1
(push) ; 8
; [then-branch: 580 | False | live]
; [else-branch: 580 | True | live]
(push) ; 9
; [then-branch: 580 | False]
(assert false)
(pop) ; 9
(push) ; 9
; [else-branch: 580 | True]
; [eval] 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (<
    1
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@769@01 1)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< 1 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@769@01 1))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 581 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@769@01, 1))| | live]
; [else-branch: 581 | !(1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@769@01, 1))|) | dead]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 581 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@769@01, 1))|]
(assert (< 1 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@769@01 1)))))
; [eval] !(0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|)
; [eval] 0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] 0 <= 2
(push) ; 9
; [then-branch: 582 | False | live]
; [else-branch: 582 | True | live]
(push) ; 10
; [then-branch: 582 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 582 | True]
; [eval] 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  2
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@769@01 1)) 1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 583 | !(2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@769@01, 1))[1]|) | dead]
; [else-branch: 583 | 2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@769@01, 1))[1]| | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 583 | 2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@769@01, 1))[1]|]
(assert (<
  2
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@769@01 1)) 1))))
(pop) ; 9
; [eval] !!(0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|)
; [eval] !(0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|)
; [eval] 0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] 0 <= 2
(push) ; 9
; [then-branch: 584 | False | live]
; [else-branch: 584 | True | live]
(push) ; 10
; [then-branch: 584 | False]
(assert false)
(pop) ; 10
(push) ; 10
; [else-branch: 584 | True]
; [eval] 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(push) ; 9
(set-option :timeout 10)
(assert (not (not
  (<
    2
    (Seq_length
      (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@769@01 1)) 1))))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (<
  2
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@769@01 1)) 1)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 585 | 2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@769@01, 1))[1]| | live]
; [else-branch: 585 | !(2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@769@01, 1))[1]|) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 585 | 2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@769@01, 1))[1]|]
(assert (<
  2
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@769@01 1)) 1))))
; [eval] !(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] 0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= 1
(push) ; 10
; [then-branch: 586 | False | live]
; [else-branch: 586 | True | live]
(push) ; 11
; [then-branch: 586 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 586 | True]
; [eval] 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
; [then-branch: 587 | !(1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@769@01, 1))|) | dead]
; [else-branch: 587 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@769@01, 1))| | live]
(push) ; 10
; [else-branch: 587 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@769@01, 1))|]
(pop) ; 10
; [eval] !!(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] !(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] 0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= 1
(push) ; 10
; [then-branch: 588 | False | live]
; [else-branch: 588 | True | live]
(push) ; 11
; [then-branch: 588 | False]
(assert false)
(pop) ; 11
(push) ; 11
; [else-branch: 588 | True]
; [eval] 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(push) ; 10
(set-option :timeout 10)
(assert (not (not
  (<
    1
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@769@01 1)))))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 589 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@769@01, 1))| | live]
; [else-branch: 589 | !(1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@769@01, 1))|) | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 589 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@769@01, 1))|]
; [exec]
; self := ($struct_set(self, 1, ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1 :=
;   ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1][2 := 100]]): $Struct)
; [eval] ($struct_set(self, 1, ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1 := ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1][2 := 100]]): $Struct)
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1 := ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1][2 := 100]]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1][2 := 100]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(declare-const self@770@01 $Struct)
(assert (=
  self@770@01
  ($struct_set<$Struct> self@769@01 1 (Seq_append
    (Seq_take ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@769@01 1)) 1)
    (Seq_append
      (Seq_singleton (Seq_append
        (Seq_take
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@769@01 1))
            1)
          2)
        (Seq_append
          (Seq_singleton 100)
          (Seq_drop
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@769@01 1))
              1)
            3))))
      (Seq_drop ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@769@01 1)) 2))))))
; [eval] !(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] 0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= 1
(push) ; 11
; [then-branch: 590 | False | live]
; [else-branch: 590 | True | live]
(push) ; 12
; [then-branch: 590 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 590 | True]
; [eval] 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (< 1 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@770@01 1))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 591 | !(1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@770@01, 1))|) | dead]
; [else-branch: 591 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@770@01, 1))| | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 591 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@770@01, 1))|]
(assert (< 1 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@770@01 1)))))
(pop) ; 11
; [eval] !!(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] !(0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|)
; [eval] 0 <= 1 && 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= 1
(push) ; 11
; [then-branch: 592 | False | live]
; [else-branch: 592 | True | live]
(push) ; 12
; [then-branch: 592 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 592 | True]
; [eval] 1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(push) ; 11
(set-option :timeout 10)
(assert (not (not
  (<
    1
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@770@01 1)))))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (< 1 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@770@01 1))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 593 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@770@01, 1))| | live]
; [else-branch: 593 | !(1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@770@01, 1))|) | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 593 | 1 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@770@01, 1))|]
(assert (< 1 (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@770@01 1)))))
; [eval] !(0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|)
; [eval] 0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] 0 <= 2
(push) ; 12
; [then-branch: 594 | False | live]
; [else-branch: 594 | True | live]
(push) ; 13
; [then-branch: 594 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 594 | True]
; [eval] 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (<
  2
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@770@01 1)) 1)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 595 | !(2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@770@01, 1))[1]|) | dead]
; [else-branch: 595 | 2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@770@01, 1))[1]| | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 595 | 2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@770@01, 1))[1]|]
(assert (<
  2
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@770@01 1)) 1))))
(pop) ; 12
; [eval] !!(0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|)
; [eval] !(0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|)
; [eval] 0 <= 2 && 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] 0 <= 2
(push) ; 12
; [then-branch: 596 | False | live]
; [else-branch: 596 | True | live]
(push) ; 13
; [then-branch: 596 | False]
(assert false)
(pop) ; 13
(push) ; 13
; [else-branch: 596 | True]
; [eval] 2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(push) ; 12
(set-option :timeout 10)
(assert (not (not
  (<
    2
    (Seq_length
      (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@770@01 1)) 1))))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (<
  2
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@770@01 1)) 1)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 597 | 2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@770@01, 1))[1]| | live]
; [else-branch: 597 | !(2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@770@01, 1))[1]|) | dead]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 597 | 2 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@770@01, 1))[1]|]
(assert (<
  2
  (Seq_length
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@770@01 1)) 1))))
; [exec]
; $res := $unwrap($wrap(($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1][2]))
; [eval] $unwrap($wrap(($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1][2]))
; [eval] $wrap(($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1][2])
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1][2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(declare-const $res@771@01 Int)
(assert (=
  $res@771@01
  ($unwrap<Int> ($wrap<$Int> (Seq_index
    (Seq_index ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@770@01 1)) 1)
    2)))))
; [exec]
; label return
; [exec]
; label end
; [exec]
; exhale $res == 101
; [eval] $res == 101
(push) ; 13
(assert (not (= $res@771@01 101)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $res == 101
(set-option :timeout 0)
(push) ; 13
(assert (not (= $res@771@01 101)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $res == 101
(set-option :timeout 0)
(push) ; 13
(assert (not (= $res@771@01 101)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $res == 101
(set-option :timeout 0)
(push) ; 13
(assert (not (= $res@771@01 101)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$out_of_bounds_read ----------
(declare-const $succ@772@01 Bool)
(declare-const $succ@773@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@774@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@775@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@776@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@777@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@778@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@779@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@780@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@781@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@782@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@783@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@784@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@785@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@786@01 Bool)
; [exec]
; var l$i: Int
(declare-const l$i@787@01 Int)
; [exec]
; var l$a: $Int
(declare-const l$a@788@01 $Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@789@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@790@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@791@01 $Map<Int~_$Struct>)
; [exec]
; inhale |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
(declare-const $t@792@01 $Snap)
(assert (= $t@792@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0))) 12))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] }
;     0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] &&
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <=
;     170141183460469231731687303715884105727)
(declare-const $t@793@01 $Snap)
(assert (= $t@793@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] } 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@794@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 598 | !(0 <= $q0@794@01) | live]
; [else-branch: 598 | 0 <= $q0@794@01 | live]
(push) ; 5
; [then-branch: 598 | !(0 <= $q0@794@01)]
(assert (not (<= 0 $q0@794@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 598 | 0 <= $q0@794@01]
(assert (<= 0 $q0@794@01))
; [eval] $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@794@01) (not (<= 0 $q0@794@01))))
(push) ; 4
; [then-branch: 599 | 0 <= $q0@794@01 && $q0@794@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@778@01, 0))| | live]
; [else-branch: 599 | !(0 <= $q0@794@01 && $q0@794@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@778@01, 0))|) | live]
(push) ; 5
; [then-branch: 599 | 0 <= $q0@794@01 && $q0@794@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@778@01, 0))|]
(assert (and
  (<= 0 $q0@794@01)
  (<
    $q0@794@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (>= $q0@794@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 600 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@778@01, 0))[$q0@794@01]) | live]
; [else-branch: 600 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@778@01, 0))[$q0@794@01] | live]
(push) ; 7
; [then-branch: 600 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@778@01, 0))[$q0@794@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0))
      $q0@794@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 600 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@778@01, 0))[$q0@794@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0)) $q0@794@01)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (>= $q0@794@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0))
      $q0@794@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0))
        $q0@794@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 599 | !(0 <= $q0@794@01 && $q0@794@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@778@01, 0))|)]
(assert (not
  (and
    (<= 0 $q0@794@01)
    (<
      $q0@794@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q0@794@01)
    (<
      $q0@794@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0)))))
  (and
    (<= 0 $q0@794@01)
    (<
      $q0@794@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0))
          $q0@794@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0))
            $q0@794@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q0@794@01)
      (<
        $q0@794@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0))))))
  (and
    (<= 0 $q0@794@01)
    (<
      $q0@794@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@794@01 Int)) (!
  (and
    (or (<= 0 $q0@794@01) (not (<= 0 $q0@794@01)))
    (=>
      (and
        (<= 0 $q0@794@01)
        (<
          $q0@794@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0)))))
      (and
        (<= 0 $q0@794@01)
        (<
          $q0@794@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0))
              $q0@794@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0))
                $q0@794@01))))))
    (or
      (not
        (and
          (<= 0 $q0@794@01)
          (<
            $q0@794@01
            (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0))))))
      (and
        (<= 0 $q0@794@01)
        (<
          $q0@794@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0))
    $q0@794@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1569@11@1569@346-aux|)))
(assert (forall (($q0@794@01 Int)) (!
  (=>
    (and
      (<= 0 $q0@794@01)
      (<
        $q0@794@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0))
          $q0@794@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0))
          $q0@794@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0))
    $q0@794@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1569@11@1569@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
(declare-const $t@795@01 $Snap)
(assert (= $t@795@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(assert (= (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $t@796@01 $Snap)
(assert (= $t@796@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $q1@797@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 601 | !(0 <= $q1@797@01) | live]
; [else-branch: 601 | 0 <= $q1@797@01 | live]
(push) ; 5
; [then-branch: 601 | !(0 <= $q1@797@01)]
(assert (not (<= 0 $q1@797@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 601 | 0 <= $q1@797@01]
(assert (<= 0 $q1@797@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@797@01) (not (<= 0 $q1@797@01))))
(push) ; 4
; [then-branch: 602 | 0 <= $q1@797@01 && $q1@797@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@778@01, 1))| | live]
; [else-branch: 602 | !(0 <= $q1@797@01 && $q1@797@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@778@01, 1))|) | live]
(push) ; 5
; [then-branch: 602 | 0 <= $q1@797@01 && $q1@797@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@778@01, 1))|]
(assert (and
  (<= 0 $q1@797@01)
  (<
    $q1@797@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))))))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 6
(assert (not (>= $q1@797@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 602 | !(0 <= $q1@797@01 && $q1@797@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@778@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@797@01)
    (<
      $q1@797@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@797@01)
      (<
        $q1@797@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))))))
  (and
    (<= 0 $q1@797@01)
    (<
      $q1@797@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@797@01 Int)) (!
  (and
    (or (<= 0 $q1@797@01) (not (<= 0 $q1@797@01)))
    (or
      (not
        (and
          (<= 0 $q1@797@01)
          (<
            $q1@797@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))))))
      (and
        (<= 0 $q1@797@01)
        (<
          $q1@797@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
    $q1@797@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1571@11@1571@228-aux|)))
(assert (forall (($q1@797@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@797@01)
      (<
        $q1@797@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
          $q1@797@01))
      12))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
    $q1@797@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1571@11@1571@228|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     (forall $q2: Int ::
;       { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] }
;       0 <= $q2 &&
;       $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==>
;       -170141183460469231731687303715884105728 <=
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] &&
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <=
;       170141183460469231731687303715884105727))
(declare-const $t@798@01 $Snap)
(assert (= $t@798@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727))
(declare-const $q1@799@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 603 | !(0 <= $q1@799@01) | live]
; [else-branch: 603 | 0 <= $q1@799@01 | live]
(push) ; 5
; [then-branch: 603 | !(0 <= $q1@799@01)]
(assert (not (<= 0 $q1@799@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 603 | 0 <= $q1@799@01]
(assert (<= 0 $q1@799@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@799@01) (not (<= 0 $q1@799@01))))
(push) ; 4
; [then-branch: 604 | 0 <= $q1@799@01 && $q1@799@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@778@01, 1))| | live]
; [else-branch: 604 | !(0 <= $q1@799@01 && $q1@799@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@778@01, 1))|) | live]
(push) ; 5
; [then-branch: 604 | 0 <= $q1@799@01 && $q1@799@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@778@01, 1))|]
(assert (and
  (<= 0 $q1@799@01)
  (<
    $q1@799@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))))))
; [eval] (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
(declare-const $q2@800@01 Int)
(push) ; 6
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] 0 <= $q2
(push) ; 7
; [then-branch: 605 | !(0 <= $q2@800@01) | live]
; [else-branch: 605 | 0 <= $q2@800@01 | live]
(push) ; 8
; [then-branch: 605 | !(0 <= $q2@800@01)]
(assert (not (<= 0 $q2@800@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 605 | 0 <= $q2@800@01]
(assert (<= 0 $q2@800@01))
; [eval] $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@799@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q2@800@01) (not (<= 0 $q2@800@01))))
(push) ; 7
; [then-branch: 606 | 0 <= $q2@800@01 && $q2@800@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@778@01, 1))[$q1@799@01]| | live]
; [else-branch: 606 | !(0 <= $q2@800@01 && $q2@800@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@778@01, 1))[$q1@799@01]|) | live]
(push) ; 8
; [then-branch: 606 | 0 <= $q2@800@01 && $q2@800@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@778@01, 1))[$q1@799@01]|]
(assert (and
  (<= 0 $q2@800@01)
  (<
    $q2@800@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
        $q1@799@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@799@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q2@800@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 607 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@778@01, 1))[$q1@799@01][$q2@800@01]) | live]
; [else-branch: 607 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@778@01, 1))[$q1@799@01][$q2@800@01] | live]
(push) ; 10
; [then-branch: 607 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@778@01, 1))[$q1@799@01][$q2@800@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
        $q1@799@01)
      $q2@800@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 607 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@778@01, 1))[$q1@799@01][$q2@800@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
      $q1@799@01)
    $q2@800@01)))
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 11
(assert (not (>= $q1@799@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= $q2@800@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
        $q1@799@01)
      $q2@800@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
          $q1@799@01)
        $q2@800@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 606 | !(0 <= $q2@800@01 && $q2@800@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@778@01, 1))[$q1@799@01]|)]
(assert (not
  (and
    (<= 0 $q2@800@01)
    (<
      $q2@800@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
          $q1@799@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q2@800@01)
    (<
      $q2@800@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
          $q1@799@01))))
  (and
    (<= 0 $q2@800@01)
    (<
      $q2@800@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
          $q1@799@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
            $q1@799@01)
          $q2@800@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
              $q1@799@01)
            $q2@800@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q2@800@01)
      (<
        $q2@800@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
            $q1@799@01)))))
  (and
    (<= 0 $q2@800@01)
    (<
      $q2@800@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
          $q1@799@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@800@01 Int)) (!
  (and
    (or (<= 0 $q2@800@01) (not (<= 0 $q2@800@01)))
    (=>
      (and
        (<= 0 $q2@800@01)
        (<
          $q2@800@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
              $q1@799@01))))
      (and
        (<= 0 $q2@800@01)
        (<
          $q2@800@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
              $q1@799@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
                $q1@799@01)
              $q2@800@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
                  $q1@799@01)
                $q2@800@01))))))
    (or
      (not
        (and
          (<= 0 $q2@800@01)
          (<
            $q2@800@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
                $q1@799@01)))))
      (and
        (<= 0 $q2@800@01)
        (<
          $q2@800@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
              $q1@799@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
      $q1@799@01)
    $q2@800@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1572@166@1572@541-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 604 | !(0 <= $q1@799@01 && $q1@799@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@778@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@799@01)
    (<
      $q1@799@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q1@799@01)
    (<
      $q1@799@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1)))))
  (and
    (<= 0 $q1@799@01)
    (<
      $q1@799@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))))
    (forall (($q2@800@01 Int)) (!
      (and
        (or (<= 0 $q2@800@01) (not (<= 0 $q2@800@01)))
        (=>
          (and
            (<= 0 $q2@800@01)
            (<
              $q2@800@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
                  $q1@799@01))))
          (and
            (<= 0 $q2@800@01)
            (<
              $q2@800@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
                  $q1@799@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
                    $q1@799@01)
                  $q2@800@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
                      $q1@799@01)
                    $q2@800@01))))))
        (or
          (not
            (and
              (<= 0 $q2@800@01)
              (<
                $q2@800@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
                    $q1@799@01)))))
          (and
            (<= 0 $q2@800@01)
            (<
              $q2@800@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
                  $q1@799@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
          $q1@799@01)
        $q2@800@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1572@166@1572@541-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@799@01)
      (<
        $q1@799@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))))))
  (and
    (<= 0 $q1@799@01)
    (<
      $q1@799@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@799@01 Int)) (!
  (and
    (or (<= 0 $q1@799@01) (not (<= 0 $q1@799@01)))
    (=>
      (and
        (<= 0 $q1@799@01)
        (<
          $q1@799@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1)))))
      (and
        (<= 0 $q1@799@01)
        (<
          $q1@799@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))))
        (forall (($q2@800@01 Int)) (!
          (and
            (or (<= 0 $q2@800@01) (not (<= 0 $q2@800@01)))
            (=>
              (and
                (<= 0 $q2@800@01)
                (<
                  $q2@800@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
                      $q1@799@01))))
              (and
                (<= 0 $q2@800@01)
                (<
                  $q2@800@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
                      $q1@799@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
                        $q1@799@01)
                      $q2@800@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
                          $q1@799@01)
                        $q2@800@01))))))
            (or
              (not
                (and
                  (<= 0 $q2@800@01)
                  (<
                    $q2@800@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
                        $q1@799@01)))))
              (and
                (<= 0 $q2@800@01)
                (<
                  $q2@800@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
                      $q1@799@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
              $q1@799@01)
            $q2@800@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1572@166@1572@541-aux|))))
    (or
      (not
        (and
          (<= 0 $q1@799@01)
          (<
            $q1@799@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))))))
      (and
        (<= 0 $q1@799@01)
        (<
          $q1@799@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
    $q1@799@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1572@11@1572@542-aux|)))
(assert (forall (($q1@799@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@799@01)
      (<
        $q1@799@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1)))))
    (forall (($q2@800@01 Int)) (!
      (=>
        (and
          (<= 0 $q2@800@01)
          (<
            $q2@800@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
                $q1@799@01))))
        (and
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
                $q1@799@01)
              $q2@800@01))
          (<=
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
                $q1@799@01)
              $q2@800@01)
            170141183460469231731687303715884105727)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
          $q1@799@01)
        $q2@800@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1572@166@1572@541|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@778@01 1))
    $q1@799@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1572@11@1572@542|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
(declare-const $t@801@01 $Snap)
(assert (= $t@801@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(assert (=
  (Seq_length ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2)))
  2))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $t@802@01 $Snap)
(assert (= $t@802@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $q3@803@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 608 | !(0 <= $q3@803@01) | live]
; [else-branch: 608 | 0 <= $q3@803@01 | live]
(push) ; 5
; [then-branch: 608 | !(0 <= $q3@803@01)]
(assert (not (<= 0 $q3@803@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 608 | 0 <= $q3@803@01]
(assert (<= 0 $q3@803@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@803@01) (not (<= 0 $q3@803@01))))
(push) ; 4
; [then-branch: 609 | 0 <= $q3@803@01 && $q3@803@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))| | live]
; [else-branch: 609 | !(0 <= $q3@803@01 && $q3@803@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))|) | live]
(push) ; 5
; [then-branch: 609 | 0 <= $q3@803@01 && $q3@803@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))|]
(assert (and
  (<= 0 $q3@803@01)
  (<
    $q3@803@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 6
(assert (not (>= $q3@803@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 609 | !(0 <= $q3@803@01 && $q3@803@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@803@01)
    (<
      $q3@803@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@803@01)
      (<
        $q3@803@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))))))
  (and
    (<= 0 $q3@803@01)
    (<
      $q3@803@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@803@01 Int)) (!
  (and
    (or (<= 0 $q3@803@01) (not (<= 0 $q3@803@01)))
    (or
      (not
        (and
          (<= 0 $q3@803@01)
          (<
            $q3@803@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))))))
      (and
        (<= 0 $q3@803@01)
        (<
          $q3@803@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
    $q3@803@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1574@11@1574@242-aux|)))
(assert (forall (($q3@803@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@803@01)
      (<
        $q3@803@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
          $q3@803@01))
      2))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
    $q3@803@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1574@11@1574@242|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==
;       2))
(declare-const $t@804@01 $Snap)
(assert (= $t@804@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2))
(declare-const $q3@805@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 610 | !(0 <= $q3@805@01) | live]
; [else-branch: 610 | 0 <= $q3@805@01 | live]
(push) ; 5
; [then-branch: 610 | !(0 <= $q3@805@01)]
(assert (not (<= 0 $q3@805@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 610 | 0 <= $q3@805@01]
(assert (<= 0 $q3@805@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@805@01) (not (<= 0 $q3@805@01))))
(push) ; 4
; [then-branch: 611 | 0 <= $q3@805@01 && $q3@805@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))| | live]
; [else-branch: 611 | !(0 <= $q3@805@01 && $q3@805@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))|) | live]
(push) ; 5
; [then-branch: 611 | 0 <= $q3@805@01 && $q3@805@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))|]
(assert (and
  (<= 0 $q3@805@01)
  (<
    $q3@805@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
(declare-const $q4@806@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 612 | !(0 <= $q4@806@01) | live]
; [else-branch: 612 | 0 <= $q4@806@01 | live]
(push) ; 8
; [then-branch: 612 | !(0 <= $q4@806@01)]
(assert (not (<= 0 $q4@806@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 612 | 0 <= $q4@806@01]
(assert (<= 0 $q4@806@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@805@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@806@01) (not (<= 0 $q4@806@01))))
(push) ; 7
; [then-branch: 613 | 0 <= $q4@806@01 && $q4@806@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))[$q3@805@01]| | live]
; [else-branch: 613 | !(0 <= $q4@806@01 && $q4@806@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))[$q3@805@01]|) | live]
(push) ; 8
; [then-branch: 613 | 0 <= $q4@806@01 && $q4@806@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))[$q3@805@01]|]
(assert (and
  (<= 0 $q4@806@01)
  (<
    $q4@806@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
        $q3@805@01)))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@805@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q4@806@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 613 | !(0 <= $q4@806@01 && $q4@806@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))[$q3@805@01]|)]
(assert (not
  (and
    (<= 0 $q4@806@01)
    (<
      $q4@806@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
          $q3@805@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@806@01)
      (<
        $q4@806@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
            $q3@805@01)))))
  (and
    (<= 0 $q4@806@01)
    (<
      $q4@806@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
          $q3@805@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@806@01 Int)) (!
  (and
    (or (<= 0 $q4@806@01) (not (<= 0 $q4@806@01)))
    (or
      (not
        (and
          (<= 0 $q4@806@01)
          (<
            $q4@806@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                $q3@805@01)))))
      (and
        (<= 0 $q4@806@01)
        (<
          $q4@806@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
              $q3@805@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
      $q3@805@01)
    $q4@806@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1575@176@1575@422-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 611 | !(0 <= $q3@805@01 && $q3@805@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@805@01)
    (<
      $q3@805@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@805@01)
    (<
      $q3@805@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2)))))
  (and
    (<= 0 $q3@805@01)
    (<
      $q3@805@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))))
    (forall (($q4@806@01 Int)) (!
      (and
        (or (<= 0 $q4@806@01) (not (<= 0 $q4@806@01)))
        (or
          (not
            (and
              (<= 0 $q4@806@01)
              (<
                $q4@806@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                    $q3@805@01)))))
          (and
            (<= 0 $q4@806@01)
            (<
              $q4@806@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                  $q3@805@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
          $q3@805@01)
        $q4@806@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1575@176@1575@422-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@805@01)
      (<
        $q3@805@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))))))
  (and
    (<= 0 $q3@805@01)
    (<
      $q3@805@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@805@01 Int)) (!
  (and
    (or (<= 0 $q3@805@01) (not (<= 0 $q3@805@01)))
    (=>
      (and
        (<= 0 $q3@805@01)
        (<
          $q3@805@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2)))))
      (and
        (<= 0 $q3@805@01)
        (<
          $q3@805@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))))
        (forall (($q4@806@01 Int)) (!
          (and
            (or (<= 0 $q4@806@01) (not (<= 0 $q4@806@01)))
            (or
              (not
                (and
                  (<= 0 $q4@806@01)
                  (<
                    $q4@806@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                        $q3@805@01)))))
              (and
                (<= 0 $q4@806@01)
                (<
                  $q4@806@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                      $q3@805@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
              $q3@805@01)
            $q4@806@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1575@176@1575@422-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@805@01)
          (<
            $q3@805@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))))))
      (and
        (<= 0 $q3@805@01)
        (<
          $q3@805@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
    $q3@805@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1575@11@1575@423-aux|)))
(assert (forall (($q3@805@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@805@01)
      (<
        $q3@805@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2)))))
    (forall (($q4@806@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@806@01)
          (<
            $q4@806@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                $q3@805@01))))
        (=
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                $q3@805@01)
              $q4@806@01))
          2))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
          $q3@805@01)
        $q4@806@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1575@176@1575@422|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
    $q3@805@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1575@11@1575@423|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       (forall $q5: Int ::
;         { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] }
;         0 <= $q5 &&
;         $q5 <
;         |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==>
;         -170141183460469231731687303715884105728 <=
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] &&
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <=
;         170141183460469231731687303715884105727)))
(declare-const $t@807@01 $Snap)
(assert (= $t@807@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)))
(declare-const $q3@808@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 614 | !(0 <= $q3@808@01) | live]
; [else-branch: 614 | 0 <= $q3@808@01 | live]
(push) ; 5
; [then-branch: 614 | !(0 <= $q3@808@01)]
(assert (not (<= 0 $q3@808@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 614 | 0 <= $q3@808@01]
(assert (<= 0 $q3@808@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@808@01) (not (<= 0 $q3@808@01))))
(push) ; 4
; [then-branch: 615 | 0 <= $q3@808@01 && $q3@808@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))| | live]
; [else-branch: 615 | !(0 <= $q3@808@01 && $q3@808@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))|) | live]
(push) ; 5
; [then-branch: 615 | 0 <= $q3@808@01 && $q3@808@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))|]
(assert (and
  (<= 0 $q3@808@01)
  (<
    $q3@808@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
(declare-const $q4@809@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 616 | !(0 <= $q4@809@01) | live]
; [else-branch: 616 | 0 <= $q4@809@01 | live]
(push) ; 8
; [then-branch: 616 | !(0 <= $q4@809@01)]
(assert (not (<= 0 $q4@809@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 616 | 0 <= $q4@809@01]
(assert (<= 0 $q4@809@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@808@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@809@01) (not (<= 0 $q4@809@01))))
(push) ; 7
; [then-branch: 617 | 0 <= $q4@809@01 && $q4@809@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))[$q3@808@01]| | live]
; [else-branch: 617 | !(0 <= $q4@809@01 && $q4@809@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))[$q3@808@01]|) | live]
(push) ; 8
; [then-branch: 617 | 0 <= $q4@809@01 && $q4@809@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))[$q3@808@01]|]
(assert (and
  (<= 0 $q4@809@01)
  (<
    $q4@809@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
        $q3@808@01)))))
; [eval] (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
(declare-const $q5@810@01 Int)
(push) ; 9
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] 0 <= $q5
(push) ; 10
; [then-branch: 618 | !(0 <= $q5@810@01) | live]
; [else-branch: 618 | 0 <= $q5@810@01 | live]
(push) ; 11
; [then-branch: 618 | !(0 <= $q5@810@01)]
(assert (not (<= 0 $q5@810@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 618 | 0 <= $q5@810@01]
(assert (<= 0 $q5@810@01))
; [eval] $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@808@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@809@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q5@810@01) (not (<= 0 $q5@810@01))))
(push) ; 10
; [then-branch: 619 | 0 <= $q5@810@01 && $q5@810@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))[$q3@808@01][$q4@809@01]| | live]
; [else-branch: 619 | !(0 <= $q5@810@01 && $q5@810@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))[$q3@808@01][$q4@809@01]|) | live]
(push) ; 11
; [then-branch: 619 | 0 <= $q5@810@01 && $q5@810@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))[$q3@808@01][$q4@809@01]|]
(assert (and
  (<= 0 $q5@810@01)
  (<
    $q5@810@01
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
          $q3@808@01)
        $q4@809@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@808@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@809@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q5@810@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 620 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))[$q3@808@01][$q4@809@01][$q5@810@01]) | live]
; [else-branch: 620 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))[$q3@808@01][$q4@809@01][$q5@810@01] | live]
(push) ; 13
; [then-branch: 620 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))[$q3@808@01][$q4@809@01][$q5@810@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
          $q3@808@01)
        $q4@809@01)
      $q5@810@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 620 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))[$q3@808@01][$q4@809@01][$q5@810@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
        $q3@808@01)
      $q4@809@01)
    $q5@810@01)))
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 14
(assert (not (>= $q3@808@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q4@809@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q5@810@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
          $q3@808@01)
        $q4@809@01)
      $q5@810@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
            $q3@808@01)
          $q4@809@01)
        $q5@810@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 619 | !(0 <= $q5@810@01 && $q5@810@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))[$q3@808@01][$q4@809@01]|)]
(assert (not
  (and
    (<= 0 $q5@810@01)
    (<
      $q5@810@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
            $q3@808@01)
          $q4@809@01))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q5@810@01)
    (<
      $q5@810@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
            $q3@808@01)
          $q4@809@01))))
  (and
    (<= 0 $q5@810@01)
    (<
      $q5@810@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
            $q3@808@01)
          $q4@809@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
              $q3@808@01)
            $q4@809@01)
          $q5@810@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                $q3@808@01)
              $q4@809@01)
            $q5@810@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q5@810@01)
      (<
        $q5@810@01
        (Seq_length
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
              $q3@808@01)
            $q4@809@01)))))
  (and
    (<= 0 $q5@810@01)
    (<
      $q5@810@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
            $q3@808@01)
          $q4@809@01))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@810@01 Int)) (!
  (and
    (or (<= 0 $q5@810@01) (not (<= 0 $q5@810@01)))
    (=>
      (and
        (<= 0 $q5@810@01)
        (<
          $q5@810@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                $q3@808@01)
              $q4@809@01))))
      (and
        (<= 0 $q5@810@01)
        (<
          $q5@810@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                $q3@808@01)
              $q4@809@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                  $q3@808@01)
                $q4@809@01)
              $q5@810@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                    $q3@808@01)
                  $q4@809@01)
                $q5@810@01))))))
    (or
      (not
        (and
          (<= 0 $q5@810@01)
          (<
            $q5@810@01
            (Seq_length
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                  $q3@808@01)
                $q4@809@01)))))
      (and
        (<= 0 $q5@810@01)
        (<
          $q5@810@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                $q3@808@01)
              $q4@809@01))))))
  :pattern ((Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
        $q3@808@01)
      $q4@809@01)
    $q5@810@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1576@351@1576@766-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 617 | !(0 <= $q4@809@01 && $q4@809@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))[$q3@808@01]|)]
(assert (not
  (and
    (<= 0 $q4@809@01)
    (<
      $q4@809@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
          $q3@808@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q4@809@01)
    (<
      $q4@809@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
          $q3@808@01))))
  (and
    (<= 0 $q4@809@01)
    (<
      $q4@809@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
          $q3@808@01)))
    (forall (($q5@810@01 Int)) (!
      (and
        (or (<= 0 $q5@810@01) (not (<= 0 $q5@810@01)))
        (=>
          (and
            (<= 0 $q5@810@01)
            (<
              $q5@810@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                    $q3@808@01)
                  $q4@809@01))))
          (and
            (<= 0 $q5@810@01)
            (<
              $q5@810@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                    $q3@808@01)
                  $q4@809@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                      $q3@808@01)
                    $q4@809@01)
                  $q5@810@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                        $q3@808@01)
                      $q4@809@01)
                    $q5@810@01))))))
        (or
          (not
            (and
              (<= 0 $q5@810@01)
              (<
                $q5@810@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                      $q3@808@01)
                    $q4@809@01)))))
          (and
            (<= 0 $q5@810@01)
            (<
              $q5@810@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                    $q3@808@01)
                  $q4@809@01))))))
      :pattern ((Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
            $q3@808@01)
          $q4@809@01)
        $q5@810@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1576@351@1576@766-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@809@01)
      (<
        $q4@809@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
            $q3@808@01)))))
  (and
    (<= 0 $q4@809@01)
    (<
      $q4@809@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
          $q3@808@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@809@01 Int)) (!
  (and
    (or (<= 0 $q4@809@01) (not (<= 0 $q4@809@01)))
    (=>
      (and
        (<= 0 $q4@809@01)
        (<
          $q4@809@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
              $q3@808@01))))
      (and
        (<= 0 $q4@809@01)
        (<
          $q4@809@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
              $q3@808@01)))
        (forall (($q5@810@01 Int)) (!
          (and
            (or (<= 0 $q5@810@01) (not (<= 0 $q5@810@01)))
            (=>
              (and
                (<= 0 $q5@810@01)
                (<
                  $q5@810@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                        $q3@808@01)
                      $q4@809@01))))
              (and
                (<= 0 $q5@810@01)
                (<
                  $q5@810@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                        $q3@808@01)
                      $q4@809@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                          $q3@808@01)
                        $q4@809@01)
                      $q5@810@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                            $q3@808@01)
                          $q4@809@01)
                        $q5@810@01))))))
            (or
              (not
                (and
                  (<= 0 $q5@810@01)
                  (<
                    $q5@810@01
                    (Seq_length
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                          $q3@808@01)
                        $q4@809@01)))))
              (and
                (<= 0 $q5@810@01)
                (<
                  $q5@810@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                        $q3@808@01)
                      $q4@809@01))))))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                $q3@808@01)
              $q4@809@01)
            $q5@810@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1576@351@1576@766-aux|))))
    (or
      (not
        (and
          (<= 0 $q4@809@01)
          (<
            $q4@809@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                $q3@808@01)))))
      (and
        (<= 0 $q4@809@01)
        (<
          $q4@809@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
              $q3@808@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
      $q3@808@01)
    $q4@809@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1576@176@1576@767-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 615 | !(0 <= $q3@808@01 && $q3@808@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@778@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@808@01)
    (<
      $q3@808@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@808@01)
    (<
      $q3@808@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2)))))
  (and
    (<= 0 $q3@808@01)
    (<
      $q3@808@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))))
    (forall (($q4@809@01 Int)) (!
      (and
        (or (<= 0 $q4@809@01) (not (<= 0 $q4@809@01)))
        (=>
          (and
            (<= 0 $q4@809@01)
            (<
              $q4@809@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                  $q3@808@01))))
          (and
            (<= 0 $q4@809@01)
            (<
              $q4@809@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                  $q3@808@01)))
            (forall (($q5@810@01 Int)) (!
              (and
                (or (<= 0 $q5@810@01) (not (<= 0 $q5@810@01)))
                (=>
                  (and
                    (<= 0 $q5@810@01)
                    (<
                      $q5@810@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                            $q3@808@01)
                          $q4@809@01))))
                  (and
                    (<= 0 $q5@810@01)
                    (<
                      $q5@810@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                            $q3@808@01)
                          $q4@809@01)))
                    (or
                      (<=
                        (- 0 170141183460469231731687303715884105728)
                        (Seq_index
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                              $q3@808@01)
                            $q4@809@01)
                          $q5@810@01))
                      (not
                        (<=
                          (- 0 170141183460469231731687303715884105728)
                          (Seq_index
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                                $q3@808@01)
                              $q4@809@01)
                            $q5@810@01))))))
                (or
                  (not
                    (and
                      (<= 0 $q5@810@01)
                      (<
                        $q5@810@01
                        (Seq_length
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                              $q3@808@01)
                            $q4@809@01)))))
                  (and
                    (<= 0 $q5@810@01)
                    (<
                      $q5@810@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                            $q3@808@01)
                          $q4@809@01))))))
              :pattern ((Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                    $q3@808@01)
                  $q4@809@01)
                $q5@810@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1576@351@1576@766-aux|))))
        (or
          (not
            (and
              (<= 0 $q4@809@01)
              (<
                $q4@809@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                    $q3@808@01)))))
          (and
            (<= 0 $q4@809@01)
            (<
              $q4@809@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                  $q3@808@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
          $q3@808@01)
        $q4@809@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1576@176@1576@767-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@808@01)
      (<
        $q3@808@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))))))
  (and
    (<= 0 $q3@808@01)
    (<
      $q3@808@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@808@01 Int)) (!
  (and
    (or (<= 0 $q3@808@01) (not (<= 0 $q3@808@01)))
    (=>
      (and
        (<= 0 $q3@808@01)
        (<
          $q3@808@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2)))))
      (and
        (<= 0 $q3@808@01)
        (<
          $q3@808@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))))
        (forall (($q4@809@01 Int)) (!
          (and
            (or (<= 0 $q4@809@01) (not (<= 0 $q4@809@01)))
            (=>
              (and
                (<= 0 $q4@809@01)
                (<
                  $q4@809@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                      $q3@808@01))))
              (and
                (<= 0 $q4@809@01)
                (<
                  $q4@809@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                      $q3@808@01)))
                (forall (($q5@810@01 Int)) (!
                  (and
                    (or (<= 0 $q5@810@01) (not (<= 0 $q5@810@01)))
                    (=>
                      (and
                        (<= 0 $q5@810@01)
                        (<
                          $q5@810@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                                $q3@808@01)
                              $q4@809@01))))
                      (and
                        (<= 0 $q5@810@01)
                        (<
                          $q5@810@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                                $q3@808@01)
                              $q4@809@01)))
                        (or
                          (<=
                            (- 0 170141183460469231731687303715884105728)
                            (Seq_index
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                                  $q3@808@01)
                                $q4@809@01)
                              $q5@810@01))
                          (not
                            (<=
                              (- 0 170141183460469231731687303715884105728)
                              (Seq_index
                                (Seq_index
                                  (Seq_index
                                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                                    $q3@808@01)
                                  $q4@809@01)
                                $q5@810@01))))))
                    (or
                      (not
                        (and
                          (<= 0 $q5@810@01)
                          (<
                            $q5@810@01
                            (Seq_length
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                                  $q3@808@01)
                                $q4@809@01)))))
                      (and
                        (<= 0 $q5@810@01)
                        (<
                          $q5@810@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                                $q3@808@01)
                              $q4@809@01))))))
                  :pattern ((Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                        $q3@808@01)
                      $q4@809@01)
                    $q5@810@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1576@351@1576@766-aux|))))
            (or
              (not
                (and
                  (<= 0 $q4@809@01)
                  (<
                    $q4@809@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                        $q3@808@01)))))
              (and
                (<= 0 $q4@809@01)
                (<
                  $q4@809@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                      $q3@808@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
              $q3@808@01)
            $q4@809@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1576@176@1576@767-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@808@01)
          (<
            $q3@808@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))))))
      (and
        (<= 0 $q3@808@01)
        (<
          $q3@808@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
    $q3@808@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1576@11@1576@768-aux|)))
(assert (forall (($q3@808@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@808@01)
      (<
        $q3@808@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2)))))
    (forall (($q4@809@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@809@01)
          (<
            $q4@809@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                $q3@808@01))))
        (forall (($q5@810@01 Int)) (!
          (=>
            (and
              (<= 0 $q5@810@01)
              (<
                $q5@810@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                      $q3@808@01)
                    $q4@809@01))))
            (and
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                      $q3@808@01)
                    $q4@809@01)
                  $q5@810@01))
              (<=
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                      $q3@808@01)
                    $q4@809@01)
                  $q5@810@01)
                170141183460469231731687303715884105727)))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
                $q3@808@01)
              $q4@809@01)
            $q5@810@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1576@351@1576@766|)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
          $q3@808@01)
        $q4@809@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1576@176@1576@767|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@778@01 2))
    $q3@808@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1576@11@1576@768|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
(declare-const $t@811@01 $Snap)
(assert (= $t@811@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3))) 1000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] }
;     0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] &&
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <=
;     170141183460469231731687303715884105727)
(declare-const $t@812@01 $Snap)
(assert (= $t@812@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] } 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727)
(declare-const $q6@813@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] 0 <= $q6
(push) ; 4
; [then-branch: 621 | !(0 <= $q6@813@01) | live]
; [else-branch: 621 | 0 <= $q6@813@01 | live]
(push) ; 5
; [then-branch: 621 | !(0 <= $q6@813@01)]
(assert (not (<= 0 $q6@813@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 621 | 0 <= $q6@813@01]
(assert (<= 0 $q6@813@01))
; [eval] $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q6@813@01) (not (<= 0 $q6@813@01))))
(push) ; 4
; [then-branch: 622 | 0 <= $q6@813@01 && $q6@813@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@778@01, 3))| | live]
; [else-branch: 622 | !(0 <= $q6@813@01 && $q6@813@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@778@01, 3))|) | live]
(push) ; 5
; [then-branch: 622 | 0 <= $q6@813@01 && $q6@813@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@778@01, 3))|]
(assert (and
  (<= 0 $q6@813@01)
  (<
    $q6@813@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (>= $q6@813@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 623 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@778@01, 3))[$q6@813@01]) | live]
; [else-branch: 623 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@778@01, 3))[$q6@813@01] | live]
(push) ; 7
; [then-branch: 623 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@778@01, 3))[$q6@813@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3))
      $q6@813@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 623 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@778@01, 3))[$q6@813@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3)) $q6@813@01)))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (>= $q6@813@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3))
      $q6@813@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3))
        $q6@813@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 622 | !(0 <= $q6@813@01 && $q6@813@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@778@01, 3))|)]
(assert (not
  (and
    (<= 0 $q6@813@01)
    (<
      $q6@813@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q6@813@01)
    (<
      $q6@813@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3)))))
  (and
    (<= 0 $q6@813@01)
    (<
      $q6@813@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3))
          $q6@813@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3))
            $q6@813@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q6@813@01)
      (<
        $q6@813@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3))))))
  (and
    (<= 0 $q6@813@01)
    (<
      $q6@813@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@813@01 Int)) (!
  (and
    (or (<= 0 $q6@813@01) (not (<= 0 $q6@813@01)))
    (=>
      (and
        (<= 0 $q6@813@01)
        (<
          $q6@813@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3)))))
      (and
        (<= 0 $q6@813@01)
        (<
          $q6@813@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3))
              $q6@813@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3))
                $q6@813@01))))))
    (or
      (not
        (and
          (<= 0 $q6@813@01)
          (<
            $q6@813@01
            (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3))))))
      (and
        (<= 0 $q6@813@01)
        (<
          $q6@813@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3))
    $q6@813@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1578@11@1578@346-aux|)))
(assert (forall (($q6@813@01 Int)) (!
  (=>
    (and
      (<= 0 $q6@813@01)
      (<
        $q6@813@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3))
          $q6@813@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3))
          $q6@813@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3))
    $q6@813@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1578@11@1578@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==
;     10)
(declare-const $t@814@01 $Snap)
(assert (= $t@814@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10)
(declare-const $q7@815@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@815@01 Int)) (!
  (=
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@815@01))
    10)
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@815@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1579@11@1579@209|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     (forall $q8: Int ::
;       { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] }
;       0 <= $q8 &&
;       $q8 <
;       |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==>
;       -170141183460469231731687303715884105728 <=
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] &&
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <=
;       170141183460469231731687303715884105727))
(declare-const $t@816@01 $Snap)
(assert (= $t@816@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727))
(declare-const $q7@817@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727)
(declare-const $q8@818@01 Int)
(push) ; 4
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] 0 <= $q8
(push) ; 5
; [then-branch: 624 | !(0 <= $q8@818@01) | live]
; [else-branch: 624 | 0 <= $q8@818@01 | live]
(push) ; 6
; [then-branch: 624 | !(0 <= $q8@818@01)]
(assert (not (<= 0 $q8@818@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 624 | 0 <= $q8@818@01]
(assert (<= 0 $q8@818@01))
; [eval] $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q8@818@01) (not (<= 0 $q8@818@01))))
(push) ; 5
; [then-branch: 625 | 0 <= $q8@818@01 && $q8@818@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@778@01, 4)), $q7@817@01)| | live]
; [else-branch: 625 | !(0 <= $q8@818@01 && $q8@818@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@778@01, 4)), $q7@817@01)|) | live]
(push) ; 6
; [then-branch: 625 | 0 <= $q8@818@01 && $q8@818@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@778@01, 4)), $q7@817@01)|]
(assert (and
  (<= 0 $q8@818@01)
  (<
    $q8@818@01
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] -170141183460469231731687303715884105728
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 7
(assert (not (>= $q8@818@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 626 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@778@01, 4)), $q7@817@01)[$q8@818@01]) | live]
; [else-branch: 626 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@778@01, 4)), $q7@817@01)[$q8@818@01] | live]
(push) ; 8
; [then-branch: 626 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@778@01, 4)), $q7@817@01)[$q8@818@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01)
      $q8@818@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 626 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@778@01, 4)), $q7@817@01)[$q8@818@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01)
    $q8@818@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 9
(assert (not (>= $q8@818@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01)
      $q8@818@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01)
        $q8@818@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 625 | !(0 <= $q8@818@01 && $q8@818@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@778@01, 4)), $q7@817@01)|)]
(assert (not
  (and
    (<= 0 $q8@818@01)
    (<
      $q8@818@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q8@818@01)
    (<
      $q8@818@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01))))
  (and
    (<= 0 $q8@818@01)
    (<
      $q8@818@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01)
          $q8@818@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01)
            $q8@818@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q8@818@01)
      (<
        $q8@818@01
        (Seq_length
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01)))))
  (and
    (<= 0 $q8@818@01)
    (<
      $q8@818@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q8@818@01 Int)) (!
  (and
    (or (<= 0 $q8@818@01) (not (<= 0 $q8@818@01)))
    (=>
      (and
        (<= 0 $q8@818@01)
        (<
          $q8@818@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01))))
      (and
        (<= 0 $q8@818@01)
        (<
          $q8@818@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01)
              $q8@818@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01)
                $q8@818@01))))))
    (or
      (not
        (and
          (<= 0 $q8@818@01)
          (<
            $q8@818@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01)))))
      (and
        (<= 0 $q8@818@01)
        (<
          $q8@818@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01))))))
  :pattern ((Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01)
    $q8@818@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1580@119@1580@606-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@817@01 Int)) (!
  (forall (($q8@818@01 Int)) (!
    (and
      (or (<= 0 $q8@818@01) (not (<= 0 $q8@818@01)))
      (=>
        (and
          (<= 0 $q8@818@01)
          (<
            $q8@818@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01))))
        (and
          (<= 0 $q8@818@01)
          (<
            $q8@818@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01)))
          (or
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01)
                $q8@818@01))
            (not
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01)
                  $q8@818@01))))))
      (or
        (not
          (and
            (<= 0 $q8@818@01)
            (<
              $q8@818@01
              (Seq_length
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01)))))
        (and
          (<= 0 $q8@818@01)
          (<
            $q8@818@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01))))))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01)
      $q8@818@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1580@119@1580@606-aux|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1580@11@1580@607-aux|)))
(assert (forall (($q7@817@01 Int)) (!
  (forall (($q8@818@01 Int)) (!
    (=>
      (and
        (<= 0 $q8@818@01)
        (<
          $q8@818@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01))))
      (and
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01)
            $q8@818@01))
        (<=
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01)
            $q8@818@01)
          170141183460469231731687303715884105727)))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01)
      $q8@818@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1580@119@1580@606|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@778@01 4)) $q7@817@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1580@11@1580@607|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@819@01 $Snap)
(assert (= $t@819@01 ($Snap.combine ($Snap.first $t@819@01) ($Snap.second $t@819@01))))
(assert (= ($Snap.first $t@819@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@778@01 5))))
(assert (= ($Snap.second $t@819@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@778@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@820@01 $Snap)
(assert (= $t@820@01 ($Snap.combine ($Snap.first $t@820@01) ($Snap.second $t@820@01))))
(assert (= ($Snap.first $t@820@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@778@01 6))))
(assert (= ($Snap.second $t@820@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@778@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@821@01 $Snap)
(assert (= $t@821@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q9@822@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 627 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@778@01, 8)), $q9@822@01)) | live]
; [else-branch: 627 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@778@01, 8)), $q9@822@01) | live]
(push) ; 5
; [then-branch: 627 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@778@01, 8)), $q9@822@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 8)) $q9@822@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 627 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@778@01, 8)), $q9@822@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 8)) $q9@822@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 8)) $q9@822@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 8)) $q9@822@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@822@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 8)) $q9@822@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 8)) $q9@822@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 8)) $q9@822@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1583@11@1583@345-aux|)))
(assert (forall (($q9@822@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 8)) $q9@822@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 8)) $q9@822@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 8)) $q9@822@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1583@11@1583@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@823@01 $Snap)
(assert (= $t@823@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q9@824@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@824@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 8)) $q9@824@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 8)) $q9@824@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1584@11@1584@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@825@01 $Snap)
(assert (= $t@825@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q10@826@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 628 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@778@01, 9)), $q10@826@01)) | live]
; [else-branch: 628 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@778@01, 9)), $q10@826@01) | live]
(push) ; 5
; [then-branch: 628 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@778@01, 9)), $q10@826@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 9)) $q10@826@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 628 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@778@01, 9)), $q10@826@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 9)) $q10@826@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 9)) $q10@826@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 9)) $q10@826@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@826@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 9)) $q10@826@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 9)) $q10@826@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 9)) $q10@826@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1585@11@1585@349-aux|)))
(assert (forall (($q10@826@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 9)) $q10@826@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 9)) $q10@826@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 9)) $q10@826@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1585@11@1585@349|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@827@01 $Snap)
(assert (= $t@827@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q10@828@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@828@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 9)) $q10@828@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@778@01 9)) $q10@828@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1586@11@1586@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@829@01 $Snap)
(assert (= $t@829@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@778@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@830@01 $Snap)
(assert (= $t@830@01 ($Snap.combine ($Snap.first $t@830@01) ($Snap.second $t@830@01))))
(assert (= ($Snap.first $t@830@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@830@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@831@01 $Snap)
(assert (= $t@831@01 ($Snap.combine ($Snap.first $t@831@01) ($Snap.second $t@831@01))))
(assert (= ($Snap.first $t@831@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@775@01 0))))
(assert (= ($Snap.second $t@831@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@775@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@832@01 $Snap)
(assert (= $t@832@01 ($Snap.combine ($Snap.first $t@832@01) ($Snap.second $t@832@01))))
(assert (= ($Snap.first $t@832@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@775@01 1))))
(assert (= ($Snap.second $t@832@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@775@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@833@01 $Snap)
(assert (= $t@833@01 ($Snap.combine ($Snap.first $t@833@01) ($Snap.second $t@833@01))))
(assert (= ($Snap.first $t@833@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@775@01 2))))
(assert (= ($Snap.second $t@833@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@775@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@834@01 $Snap)
(assert (= $t@834@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@775@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@835@01 $Snap)
(assert (= $t@835@01 ($Snap.combine ($Snap.first $t@835@01) ($Snap.second $t@835@01))))
(assert (= ($Snap.first $t@835@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@775@01 4))))
(assert (= ($Snap.second $t@835@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@775@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@836@01 $Snap)
(assert (= $t@836@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@775@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@837@01 $Snap)
(assert (= $t@837@01 ($Snap.combine ($Snap.first $t@837@01) ($Snap.second $t@837@01))))
(assert (= ($Snap.first $t@837@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@774@01 0))))
(assert (= ($Snap.second $t@837@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@774@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@838@01 $Snap)
(assert (= $t@838@01 ($Snap.combine ($Snap.first $t@838@01) ($Snap.second $t@838@01))))
(assert (= ($Snap.first $t@838@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@774@01 1))))
(assert (= ($Snap.second $t@838@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@774@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@839@01 $Snap)
(assert (= $t@839@01 ($Snap.combine ($Snap.first $t@839@01) ($Snap.second $t@839@01))))
(assert (= ($Snap.first $t@839@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@774@01 2))))
(assert (= ($Snap.second $t@839@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@774@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@840@01 $Snap)
(assert (= $t@840@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@774@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@841@01 $Snap)
(assert (= $t@841@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@774@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@842@01 $Snap)
(assert (= $t@842@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@843@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc(self, 3)): Seq[Int])
(declare-const $t@844@01 $Snap)
(assert (= $t@844@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@845@01 $Snap)
(assert (= $t@845@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@774@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; l$i := 42
; [eval] !(0 <= l$i && l$i < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= l$i && l$i < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= l$i
(set-option :timeout 0)
(push) ; 3
; [then-branch: 629 | False | live]
; [else-branch: 629 | True | live]
(push) ; 4
; [then-branch: 629 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 629 | True]
; [eval] l$i < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (< 42 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (< 42 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0)))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 630 | !(42 < |$struct_get[Seq[Int]]($struct_loc[Int](self@778@01, 0))|) | live]
; [else-branch: 630 | 42 < |$struct_get[Seq[Int]]($struct_loc[Int](self@778@01, 0))| | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 630 | !(42 < |$struct_get[Seq[Int]]($struct_loc[Int](self@778@01, 0))|)]
(assert (not
  (< 42 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0))))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale !$succ
; [eval] !$succ
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 631 | True | live]
; [else-branch: 631 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 631 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@846@01 $Snap)
(assert (= $t@846@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@790@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@847@01 $Struct)
(assert (=
  self@847@01
  ($struct_set<$Struct> self@778@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@778@01 5))
    l$havoc@790@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 5
(assert (not (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@847@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@847@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 3))))
(pop) ; 4
; [then-branch: 632 | False | dead]
; [else-branch: 632 | True | live]
(push) ; 4
; [else-branch: 632 | True]
(pop) ; 4
(pop) ; 3
; [eval] !!(0 <= l$i && l$i < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] !(0 <= l$i && l$i < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= l$i && l$i < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= l$i
(push) ; 3
; [then-branch: 633 | False | live]
; [else-branch: 633 | True | live]
(push) ; 4
; [then-branch: 633 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 633 | True]
; [eval] l$i < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (< 42 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0)))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 634 | 42 < |$struct_get[Seq[Int]]($struct_loc[Int](self@778@01, 0))| | dead]
; [else-branch: 634 | !(42 < |$struct_get[Seq[Int]]($struct_loc[Int](self@778@01, 0))|) | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 634 | !(42 < |$struct_get[Seq[Int]]($struct_loc[Int](self@778@01, 0))|)]
(assert (not
  (< 42 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@778@01 0))))))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$out_of_bounds_write ----------
(declare-const $succ@848@01 Bool)
(declare-const $succ@849@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@850@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@851@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@852@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@853@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@854@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@855@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@856@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@857@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@858@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@859@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@860@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@861@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@862@01 Bool)
; [exec]
; var l$i: Int
(declare-const l$i@863@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@864@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@865@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@866@01 $Map<Int~_$Struct>)
; [exec]
; inhale |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
(declare-const $t@867@01 $Snap)
(assert (= $t@867@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0))) 12))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] }
;     0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] &&
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <=
;     170141183460469231731687303715884105727)
(declare-const $t@868@01 $Snap)
(assert (= $t@868@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] } 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@869@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 635 | !(0 <= $q0@869@01) | live]
; [else-branch: 635 | 0 <= $q0@869@01 | live]
(push) ; 5
; [then-branch: 635 | !(0 <= $q0@869@01)]
(assert (not (<= 0 $q0@869@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 635 | 0 <= $q0@869@01]
(assert (<= 0 $q0@869@01))
; [eval] $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@869@01) (not (<= 0 $q0@869@01))))
(push) ; 4
; [then-branch: 636 | 0 <= $q0@869@01 && $q0@869@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@854@01, 0))| | live]
; [else-branch: 636 | !(0 <= $q0@869@01 && $q0@869@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@854@01, 0))|) | live]
(push) ; 5
; [then-branch: 636 | 0 <= $q0@869@01 && $q0@869@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@854@01, 0))|]
(assert (and
  (<= 0 $q0@869@01)
  (<
    $q0@869@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (>= $q0@869@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 637 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@854@01, 0))[$q0@869@01]) | live]
; [else-branch: 637 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@854@01, 0))[$q0@869@01] | live]
(push) ; 7
; [then-branch: 637 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@854@01, 0))[$q0@869@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0))
      $q0@869@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 637 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@854@01, 0))[$q0@869@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0)) $q0@869@01)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (>= $q0@869@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0))
      $q0@869@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0))
        $q0@869@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 636 | !(0 <= $q0@869@01 && $q0@869@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@854@01, 0))|)]
(assert (not
  (and
    (<= 0 $q0@869@01)
    (<
      $q0@869@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q0@869@01)
    (<
      $q0@869@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0)))))
  (and
    (<= 0 $q0@869@01)
    (<
      $q0@869@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0))
          $q0@869@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0))
            $q0@869@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q0@869@01)
      (<
        $q0@869@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0))))))
  (and
    (<= 0 $q0@869@01)
    (<
      $q0@869@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@869@01 Int)) (!
  (and
    (or (<= 0 $q0@869@01) (not (<= 0 $q0@869@01)))
    (=>
      (and
        (<= 0 $q0@869@01)
        (<
          $q0@869@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0)))))
      (and
        (<= 0 $q0@869@01)
        (<
          $q0@869@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0))
              $q0@869@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0))
                $q0@869@01))))))
    (or
      (not
        (and
          (<= 0 $q0@869@01)
          (<
            $q0@869@01
            (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0))))))
      (and
        (<= 0 $q0@869@01)
        (<
          $q0@869@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0))
    $q0@869@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1668@11@1668@346-aux|)))
(assert (forall (($q0@869@01 Int)) (!
  (=>
    (and
      (<= 0 $q0@869@01)
      (<
        $q0@869@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0))
          $q0@869@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0))
          $q0@869@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0))
    $q0@869@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1668@11@1668@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
(declare-const $t@870@01 $Snap)
(assert (= $t@870@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(assert (= (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $t@871@01 $Snap)
(assert (= $t@871@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $q1@872@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 638 | !(0 <= $q1@872@01) | live]
; [else-branch: 638 | 0 <= $q1@872@01 | live]
(push) ; 5
; [then-branch: 638 | !(0 <= $q1@872@01)]
(assert (not (<= 0 $q1@872@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 638 | 0 <= $q1@872@01]
(assert (<= 0 $q1@872@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@872@01) (not (<= 0 $q1@872@01))))
(push) ; 4
; [then-branch: 639 | 0 <= $q1@872@01 && $q1@872@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@854@01, 1))| | live]
; [else-branch: 639 | !(0 <= $q1@872@01 && $q1@872@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@854@01, 1))|) | live]
(push) ; 5
; [then-branch: 639 | 0 <= $q1@872@01 && $q1@872@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@854@01, 1))|]
(assert (and
  (<= 0 $q1@872@01)
  (<
    $q1@872@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))))))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 6
(assert (not (>= $q1@872@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 639 | !(0 <= $q1@872@01 && $q1@872@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@854@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@872@01)
    (<
      $q1@872@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@872@01)
      (<
        $q1@872@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))))))
  (and
    (<= 0 $q1@872@01)
    (<
      $q1@872@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@872@01 Int)) (!
  (and
    (or (<= 0 $q1@872@01) (not (<= 0 $q1@872@01)))
    (or
      (not
        (and
          (<= 0 $q1@872@01)
          (<
            $q1@872@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))))))
      (and
        (<= 0 $q1@872@01)
        (<
          $q1@872@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
    $q1@872@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1670@11@1670@228-aux|)))
(assert (forall (($q1@872@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@872@01)
      (<
        $q1@872@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
          $q1@872@01))
      12))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
    $q1@872@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1670@11@1670@228|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     (forall $q2: Int ::
;       { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] }
;       0 <= $q2 &&
;       $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==>
;       -170141183460469231731687303715884105728 <=
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] &&
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <=
;       170141183460469231731687303715884105727))
(declare-const $t@873@01 $Snap)
(assert (= $t@873@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727))
(declare-const $q1@874@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 640 | !(0 <= $q1@874@01) | live]
; [else-branch: 640 | 0 <= $q1@874@01 | live]
(push) ; 5
; [then-branch: 640 | !(0 <= $q1@874@01)]
(assert (not (<= 0 $q1@874@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 640 | 0 <= $q1@874@01]
(assert (<= 0 $q1@874@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@874@01) (not (<= 0 $q1@874@01))))
(push) ; 4
; [then-branch: 641 | 0 <= $q1@874@01 && $q1@874@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@854@01, 1))| | live]
; [else-branch: 641 | !(0 <= $q1@874@01 && $q1@874@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@854@01, 1))|) | live]
(push) ; 5
; [then-branch: 641 | 0 <= $q1@874@01 && $q1@874@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@854@01, 1))|]
(assert (and
  (<= 0 $q1@874@01)
  (<
    $q1@874@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))))))
; [eval] (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
(declare-const $q2@875@01 Int)
(push) ; 6
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] 0 <= $q2
(push) ; 7
; [then-branch: 642 | !(0 <= $q2@875@01) | live]
; [else-branch: 642 | 0 <= $q2@875@01 | live]
(push) ; 8
; [then-branch: 642 | !(0 <= $q2@875@01)]
(assert (not (<= 0 $q2@875@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 642 | 0 <= $q2@875@01]
(assert (<= 0 $q2@875@01))
; [eval] $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@874@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q2@875@01) (not (<= 0 $q2@875@01))))
(push) ; 7
; [then-branch: 643 | 0 <= $q2@875@01 && $q2@875@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@854@01, 1))[$q1@874@01]| | live]
; [else-branch: 643 | !(0 <= $q2@875@01 && $q2@875@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@854@01, 1))[$q1@874@01]|) | live]
(push) ; 8
; [then-branch: 643 | 0 <= $q2@875@01 && $q2@875@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@854@01, 1))[$q1@874@01]|]
(assert (and
  (<= 0 $q2@875@01)
  (<
    $q2@875@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
        $q1@874@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@874@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q2@875@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 644 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@854@01, 1))[$q1@874@01][$q2@875@01]) | live]
; [else-branch: 644 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@854@01, 1))[$q1@874@01][$q2@875@01] | live]
(push) ; 10
; [then-branch: 644 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@854@01, 1))[$q1@874@01][$q2@875@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
        $q1@874@01)
      $q2@875@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 644 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@854@01, 1))[$q1@874@01][$q2@875@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
      $q1@874@01)
    $q2@875@01)))
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 11
(assert (not (>= $q1@874@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= $q2@875@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
        $q1@874@01)
      $q2@875@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
          $q1@874@01)
        $q2@875@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 643 | !(0 <= $q2@875@01 && $q2@875@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@854@01, 1))[$q1@874@01]|)]
(assert (not
  (and
    (<= 0 $q2@875@01)
    (<
      $q2@875@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
          $q1@874@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q2@875@01)
    (<
      $q2@875@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
          $q1@874@01))))
  (and
    (<= 0 $q2@875@01)
    (<
      $q2@875@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
          $q1@874@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
            $q1@874@01)
          $q2@875@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
              $q1@874@01)
            $q2@875@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q2@875@01)
      (<
        $q2@875@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
            $q1@874@01)))))
  (and
    (<= 0 $q2@875@01)
    (<
      $q2@875@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
          $q1@874@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@875@01 Int)) (!
  (and
    (or (<= 0 $q2@875@01) (not (<= 0 $q2@875@01)))
    (=>
      (and
        (<= 0 $q2@875@01)
        (<
          $q2@875@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
              $q1@874@01))))
      (and
        (<= 0 $q2@875@01)
        (<
          $q2@875@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
              $q1@874@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
                $q1@874@01)
              $q2@875@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
                  $q1@874@01)
                $q2@875@01))))))
    (or
      (not
        (and
          (<= 0 $q2@875@01)
          (<
            $q2@875@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
                $q1@874@01)))))
      (and
        (<= 0 $q2@875@01)
        (<
          $q2@875@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
              $q1@874@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
      $q1@874@01)
    $q2@875@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1671@166@1671@541-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 641 | !(0 <= $q1@874@01 && $q1@874@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@854@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@874@01)
    (<
      $q1@874@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q1@874@01)
    (<
      $q1@874@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1)))))
  (and
    (<= 0 $q1@874@01)
    (<
      $q1@874@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))))
    (forall (($q2@875@01 Int)) (!
      (and
        (or (<= 0 $q2@875@01) (not (<= 0 $q2@875@01)))
        (=>
          (and
            (<= 0 $q2@875@01)
            (<
              $q2@875@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
                  $q1@874@01))))
          (and
            (<= 0 $q2@875@01)
            (<
              $q2@875@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
                  $q1@874@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
                    $q1@874@01)
                  $q2@875@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
                      $q1@874@01)
                    $q2@875@01))))))
        (or
          (not
            (and
              (<= 0 $q2@875@01)
              (<
                $q2@875@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
                    $q1@874@01)))))
          (and
            (<= 0 $q2@875@01)
            (<
              $q2@875@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
                  $q1@874@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
          $q1@874@01)
        $q2@875@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1671@166@1671@541-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@874@01)
      (<
        $q1@874@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))))))
  (and
    (<= 0 $q1@874@01)
    (<
      $q1@874@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@874@01 Int)) (!
  (and
    (or (<= 0 $q1@874@01) (not (<= 0 $q1@874@01)))
    (=>
      (and
        (<= 0 $q1@874@01)
        (<
          $q1@874@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1)))))
      (and
        (<= 0 $q1@874@01)
        (<
          $q1@874@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))))
        (forall (($q2@875@01 Int)) (!
          (and
            (or (<= 0 $q2@875@01) (not (<= 0 $q2@875@01)))
            (=>
              (and
                (<= 0 $q2@875@01)
                (<
                  $q2@875@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
                      $q1@874@01))))
              (and
                (<= 0 $q2@875@01)
                (<
                  $q2@875@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
                      $q1@874@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
                        $q1@874@01)
                      $q2@875@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
                          $q1@874@01)
                        $q2@875@01))))))
            (or
              (not
                (and
                  (<= 0 $q2@875@01)
                  (<
                    $q2@875@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
                        $q1@874@01)))))
              (and
                (<= 0 $q2@875@01)
                (<
                  $q2@875@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
                      $q1@874@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
              $q1@874@01)
            $q2@875@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1671@166@1671@541-aux|))))
    (or
      (not
        (and
          (<= 0 $q1@874@01)
          (<
            $q1@874@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))))))
      (and
        (<= 0 $q1@874@01)
        (<
          $q1@874@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
    $q1@874@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1671@11@1671@542-aux|)))
(assert (forall (($q1@874@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@874@01)
      (<
        $q1@874@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1)))))
    (forall (($q2@875@01 Int)) (!
      (=>
        (and
          (<= 0 $q2@875@01)
          (<
            $q2@875@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
                $q1@874@01))))
        (and
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
                $q1@874@01)
              $q2@875@01))
          (<=
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
                $q1@874@01)
              $q2@875@01)
            170141183460469231731687303715884105727)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
          $q1@874@01)
        $q2@875@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1671@166@1671@541|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@854@01 1))
    $q1@874@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1671@11@1671@542|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
(declare-const $t@876@01 $Snap)
(assert (= $t@876@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(assert (=
  (Seq_length ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2)))
  2))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $t@877@01 $Snap)
(assert (= $t@877@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $q3@878@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 645 | !(0 <= $q3@878@01) | live]
; [else-branch: 645 | 0 <= $q3@878@01 | live]
(push) ; 5
; [then-branch: 645 | !(0 <= $q3@878@01)]
(assert (not (<= 0 $q3@878@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 645 | 0 <= $q3@878@01]
(assert (<= 0 $q3@878@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@878@01) (not (<= 0 $q3@878@01))))
(push) ; 4
; [then-branch: 646 | 0 <= $q3@878@01 && $q3@878@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))| | live]
; [else-branch: 646 | !(0 <= $q3@878@01 && $q3@878@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))|) | live]
(push) ; 5
; [then-branch: 646 | 0 <= $q3@878@01 && $q3@878@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))|]
(assert (and
  (<= 0 $q3@878@01)
  (<
    $q3@878@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 6
(assert (not (>= $q3@878@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 646 | !(0 <= $q3@878@01 && $q3@878@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@878@01)
    (<
      $q3@878@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@878@01)
      (<
        $q3@878@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))))))
  (and
    (<= 0 $q3@878@01)
    (<
      $q3@878@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@878@01 Int)) (!
  (and
    (or (<= 0 $q3@878@01) (not (<= 0 $q3@878@01)))
    (or
      (not
        (and
          (<= 0 $q3@878@01)
          (<
            $q3@878@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))))))
      (and
        (<= 0 $q3@878@01)
        (<
          $q3@878@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
    $q3@878@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1673@11@1673@242-aux|)))
(assert (forall (($q3@878@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@878@01)
      (<
        $q3@878@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
          $q3@878@01))
      2))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
    $q3@878@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1673@11@1673@242|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==
;       2))
(declare-const $t@879@01 $Snap)
(assert (= $t@879@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2))
(declare-const $q3@880@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 647 | !(0 <= $q3@880@01) | live]
; [else-branch: 647 | 0 <= $q3@880@01 | live]
(push) ; 5
; [then-branch: 647 | !(0 <= $q3@880@01)]
(assert (not (<= 0 $q3@880@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 647 | 0 <= $q3@880@01]
(assert (<= 0 $q3@880@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@880@01) (not (<= 0 $q3@880@01))))
(push) ; 4
; [then-branch: 648 | 0 <= $q3@880@01 && $q3@880@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))| | live]
; [else-branch: 648 | !(0 <= $q3@880@01 && $q3@880@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))|) | live]
(push) ; 5
; [then-branch: 648 | 0 <= $q3@880@01 && $q3@880@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))|]
(assert (and
  (<= 0 $q3@880@01)
  (<
    $q3@880@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
(declare-const $q4@881@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 649 | !(0 <= $q4@881@01) | live]
; [else-branch: 649 | 0 <= $q4@881@01 | live]
(push) ; 8
; [then-branch: 649 | !(0 <= $q4@881@01)]
(assert (not (<= 0 $q4@881@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 649 | 0 <= $q4@881@01]
(assert (<= 0 $q4@881@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@880@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@881@01) (not (<= 0 $q4@881@01))))
(push) ; 7
; [then-branch: 650 | 0 <= $q4@881@01 && $q4@881@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))[$q3@880@01]| | live]
; [else-branch: 650 | !(0 <= $q4@881@01 && $q4@881@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))[$q3@880@01]|) | live]
(push) ; 8
; [then-branch: 650 | 0 <= $q4@881@01 && $q4@881@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))[$q3@880@01]|]
(assert (and
  (<= 0 $q4@881@01)
  (<
    $q4@881@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
        $q3@880@01)))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@880@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q4@881@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 650 | !(0 <= $q4@881@01 && $q4@881@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))[$q3@880@01]|)]
(assert (not
  (and
    (<= 0 $q4@881@01)
    (<
      $q4@881@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
          $q3@880@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@881@01)
      (<
        $q4@881@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
            $q3@880@01)))))
  (and
    (<= 0 $q4@881@01)
    (<
      $q4@881@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
          $q3@880@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@881@01 Int)) (!
  (and
    (or (<= 0 $q4@881@01) (not (<= 0 $q4@881@01)))
    (or
      (not
        (and
          (<= 0 $q4@881@01)
          (<
            $q4@881@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                $q3@880@01)))))
      (and
        (<= 0 $q4@881@01)
        (<
          $q4@881@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
              $q3@880@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
      $q3@880@01)
    $q4@881@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1674@176@1674@422-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 648 | !(0 <= $q3@880@01 && $q3@880@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@880@01)
    (<
      $q3@880@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@880@01)
    (<
      $q3@880@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2)))))
  (and
    (<= 0 $q3@880@01)
    (<
      $q3@880@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))))
    (forall (($q4@881@01 Int)) (!
      (and
        (or (<= 0 $q4@881@01) (not (<= 0 $q4@881@01)))
        (or
          (not
            (and
              (<= 0 $q4@881@01)
              (<
                $q4@881@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                    $q3@880@01)))))
          (and
            (<= 0 $q4@881@01)
            (<
              $q4@881@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                  $q3@880@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
          $q3@880@01)
        $q4@881@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1674@176@1674@422-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@880@01)
      (<
        $q3@880@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))))))
  (and
    (<= 0 $q3@880@01)
    (<
      $q3@880@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@880@01 Int)) (!
  (and
    (or (<= 0 $q3@880@01) (not (<= 0 $q3@880@01)))
    (=>
      (and
        (<= 0 $q3@880@01)
        (<
          $q3@880@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2)))))
      (and
        (<= 0 $q3@880@01)
        (<
          $q3@880@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))))
        (forall (($q4@881@01 Int)) (!
          (and
            (or (<= 0 $q4@881@01) (not (<= 0 $q4@881@01)))
            (or
              (not
                (and
                  (<= 0 $q4@881@01)
                  (<
                    $q4@881@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                        $q3@880@01)))))
              (and
                (<= 0 $q4@881@01)
                (<
                  $q4@881@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                      $q3@880@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
              $q3@880@01)
            $q4@881@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1674@176@1674@422-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@880@01)
          (<
            $q3@880@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))))))
      (and
        (<= 0 $q3@880@01)
        (<
          $q3@880@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
    $q3@880@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1674@11@1674@423-aux|)))
(assert (forall (($q3@880@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@880@01)
      (<
        $q3@880@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2)))))
    (forall (($q4@881@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@881@01)
          (<
            $q4@881@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                $q3@880@01))))
        (=
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                $q3@880@01)
              $q4@881@01))
          2))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
          $q3@880@01)
        $q4@881@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1674@176@1674@422|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
    $q3@880@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1674@11@1674@423|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       (forall $q5: Int ::
;         { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] }
;         0 <= $q5 &&
;         $q5 <
;         |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==>
;         -170141183460469231731687303715884105728 <=
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] &&
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <=
;         170141183460469231731687303715884105727)))
(declare-const $t@882@01 $Snap)
(assert (= $t@882@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)))
(declare-const $q3@883@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 651 | !(0 <= $q3@883@01) | live]
; [else-branch: 651 | 0 <= $q3@883@01 | live]
(push) ; 5
; [then-branch: 651 | !(0 <= $q3@883@01)]
(assert (not (<= 0 $q3@883@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 651 | 0 <= $q3@883@01]
(assert (<= 0 $q3@883@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@883@01) (not (<= 0 $q3@883@01))))
(push) ; 4
; [then-branch: 652 | 0 <= $q3@883@01 && $q3@883@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))| | live]
; [else-branch: 652 | !(0 <= $q3@883@01 && $q3@883@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))|) | live]
(push) ; 5
; [then-branch: 652 | 0 <= $q3@883@01 && $q3@883@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))|]
(assert (and
  (<= 0 $q3@883@01)
  (<
    $q3@883@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
(declare-const $q4@884@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 653 | !(0 <= $q4@884@01) | live]
; [else-branch: 653 | 0 <= $q4@884@01 | live]
(push) ; 8
; [then-branch: 653 | !(0 <= $q4@884@01)]
(assert (not (<= 0 $q4@884@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 653 | 0 <= $q4@884@01]
(assert (<= 0 $q4@884@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@883@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@884@01) (not (<= 0 $q4@884@01))))
(push) ; 7
; [then-branch: 654 | 0 <= $q4@884@01 && $q4@884@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))[$q3@883@01]| | live]
; [else-branch: 654 | !(0 <= $q4@884@01 && $q4@884@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))[$q3@883@01]|) | live]
(push) ; 8
; [then-branch: 654 | 0 <= $q4@884@01 && $q4@884@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))[$q3@883@01]|]
(assert (and
  (<= 0 $q4@884@01)
  (<
    $q4@884@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
        $q3@883@01)))))
; [eval] (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
(declare-const $q5@885@01 Int)
(push) ; 9
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] 0 <= $q5
(push) ; 10
; [then-branch: 655 | !(0 <= $q5@885@01) | live]
; [else-branch: 655 | 0 <= $q5@885@01 | live]
(push) ; 11
; [then-branch: 655 | !(0 <= $q5@885@01)]
(assert (not (<= 0 $q5@885@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 655 | 0 <= $q5@885@01]
(assert (<= 0 $q5@885@01))
; [eval] $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@883@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@884@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q5@885@01) (not (<= 0 $q5@885@01))))
(push) ; 10
; [then-branch: 656 | 0 <= $q5@885@01 && $q5@885@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))[$q3@883@01][$q4@884@01]| | live]
; [else-branch: 656 | !(0 <= $q5@885@01 && $q5@885@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))[$q3@883@01][$q4@884@01]|) | live]
(push) ; 11
; [then-branch: 656 | 0 <= $q5@885@01 && $q5@885@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))[$q3@883@01][$q4@884@01]|]
(assert (and
  (<= 0 $q5@885@01)
  (<
    $q5@885@01
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
          $q3@883@01)
        $q4@884@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@883@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@884@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q5@885@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 657 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))[$q3@883@01][$q4@884@01][$q5@885@01]) | live]
; [else-branch: 657 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))[$q3@883@01][$q4@884@01][$q5@885@01] | live]
(push) ; 13
; [then-branch: 657 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))[$q3@883@01][$q4@884@01][$q5@885@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
          $q3@883@01)
        $q4@884@01)
      $q5@885@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 657 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))[$q3@883@01][$q4@884@01][$q5@885@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
        $q3@883@01)
      $q4@884@01)
    $q5@885@01)))
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 14
(assert (not (>= $q3@883@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q4@884@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q5@885@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
          $q3@883@01)
        $q4@884@01)
      $q5@885@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
            $q3@883@01)
          $q4@884@01)
        $q5@885@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 656 | !(0 <= $q5@885@01 && $q5@885@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))[$q3@883@01][$q4@884@01]|)]
(assert (not
  (and
    (<= 0 $q5@885@01)
    (<
      $q5@885@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
            $q3@883@01)
          $q4@884@01))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q5@885@01)
    (<
      $q5@885@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
            $q3@883@01)
          $q4@884@01))))
  (and
    (<= 0 $q5@885@01)
    (<
      $q5@885@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
            $q3@883@01)
          $q4@884@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
              $q3@883@01)
            $q4@884@01)
          $q5@885@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                $q3@883@01)
              $q4@884@01)
            $q5@885@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q5@885@01)
      (<
        $q5@885@01
        (Seq_length
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
              $q3@883@01)
            $q4@884@01)))))
  (and
    (<= 0 $q5@885@01)
    (<
      $q5@885@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
            $q3@883@01)
          $q4@884@01))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@885@01 Int)) (!
  (and
    (or (<= 0 $q5@885@01) (not (<= 0 $q5@885@01)))
    (=>
      (and
        (<= 0 $q5@885@01)
        (<
          $q5@885@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                $q3@883@01)
              $q4@884@01))))
      (and
        (<= 0 $q5@885@01)
        (<
          $q5@885@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                $q3@883@01)
              $q4@884@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                  $q3@883@01)
                $q4@884@01)
              $q5@885@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                    $q3@883@01)
                  $q4@884@01)
                $q5@885@01))))))
    (or
      (not
        (and
          (<= 0 $q5@885@01)
          (<
            $q5@885@01
            (Seq_length
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                  $q3@883@01)
                $q4@884@01)))))
      (and
        (<= 0 $q5@885@01)
        (<
          $q5@885@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                $q3@883@01)
              $q4@884@01))))))
  :pattern ((Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
        $q3@883@01)
      $q4@884@01)
    $q5@885@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1675@351@1675@766-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 654 | !(0 <= $q4@884@01 && $q4@884@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))[$q3@883@01]|)]
(assert (not
  (and
    (<= 0 $q4@884@01)
    (<
      $q4@884@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
          $q3@883@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q4@884@01)
    (<
      $q4@884@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
          $q3@883@01))))
  (and
    (<= 0 $q4@884@01)
    (<
      $q4@884@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
          $q3@883@01)))
    (forall (($q5@885@01 Int)) (!
      (and
        (or (<= 0 $q5@885@01) (not (<= 0 $q5@885@01)))
        (=>
          (and
            (<= 0 $q5@885@01)
            (<
              $q5@885@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                    $q3@883@01)
                  $q4@884@01))))
          (and
            (<= 0 $q5@885@01)
            (<
              $q5@885@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                    $q3@883@01)
                  $q4@884@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                      $q3@883@01)
                    $q4@884@01)
                  $q5@885@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                        $q3@883@01)
                      $q4@884@01)
                    $q5@885@01))))))
        (or
          (not
            (and
              (<= 0 $q5@885@01)
              (<
                $q5@885@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                      $q3@883@01)
                    $q4@884@01)))))
          (and
            (<= 0 $q5@885@01)
            (<
              $q5@885@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                    $q3@883@01)
                  $q4@884@01))))))
      :pattern ((Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
            $q3@883@01)
          $q4@884@01)
        $q5@885@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1675@351@1675@766-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@884@01)
      (<
        $q4@884@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
            $q3@883@01)))))
  (and
    (<= 0 $q4@884@01)
    (<
      $q4@884@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
          $q3@883@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@884@01 Int)) (!
  (and
    (or (<= 0 $q4@884@01) (not (<= 0 $q4@884@01)))
    (=>
      (and
        (<= 0 $q4@884@01)
        (<
          $q4@884@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
              $q3@883@01))))
      (and
        (<= 0 $q4@884@01)
        (<
          $q4@884@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
              $q3@883@01)))
        (forall (($q5@885@01 Int)) (!
          (and
            (or (<= 0 $q5@885@01) (not (<= 0 $q5@885@01)))
            (=>
              (and
                (<= 0 $q5@885@01)
                (<
                  $q5@885@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                        $q3@883@01)
                      $q4@884@01))))
              (and
                (<= 0 $q5@885@01)
                (<
                  $q5@885@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                        $q3@883@01)
                      $q4@884@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                          $q3@883@01)
                        $q4@884@01)
                      $q5@885@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                            $q3@883@01)
                          $q4@884@01)
                        $q5@885@01))))))
            (or
              (not
                (and
                  (<= 0 $q5@885@01)
                  (<
                    $q5@885@01
                    (Seq_length
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                          $q3@883@01)
                        $q4@884@01)))))
              (and
                (<= 0 $q5@885@01)
                (<
                  $q5@885@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                        $q3@883@01)
                      $q4@884@01))))))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                $q3@883@01)
              $q4@884@01)
            $q5@885@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1675@351@1675@766-aux|))))
    (or
      (not
        (and
          (<= 0 $q4@884@01)
          (<
            $q4@884@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                $q3@883@01)))))
      (and
        (<= 0 $q4@884@01)
        (<
          $q4@884@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
              $q3@883@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
      $q3@883@01)
    $q4@884@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1675@176@1675@767-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 652 | !(0 <= $q3@883@01 && $q3@883@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@854@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@883@01)
    (<
      $q3@883@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@883@01)
    (<
      $q3@883@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2)))))
  (and
    (<= 0 $q3@883@01)
    (<
      $q3@883@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))))
    (forall (($q4@884@01 Int)) (!
      (and
        (or (<= 0 $q4@884@01) (not (<= 0 $q4@884@01)))
        (=>
          (and
            (<= 0 $q4@884@01)
            (<
              $q4@884@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                  $q3@883@01))))
          (and
            (<= 0 $q4@884@01)
            (<
              $q4@884@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                  $q3@883@01)))
            (forall (($q5@885@01 Int)) (!
              (and
                (or (<= 0 $q5@885@01) (not (<= 0 $q5@885@01)))
                (=>
                  (and
                    (<= 0 $q5@885@01)
                    (<
                      $q5@885@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                            $q3@883@01)
                          $q4@884@01))))
                  (and
                    (<= 0 $q5@885@01)
                    (<
                      $q5@885@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                            $q3@883@01)
                          $q4@884@01)))
                    (or
                      (<=
                        (- 0 170141183460469231731687303715884105728)
                        (Seq_index
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                              $q3@883@01)
                            $q4@884@01)
                          $q5@885@01))
                      (not
                        (<=
                          (- 0 170141183460469231731687303715884105728)
                          (Seq_index
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                                $q3@883@01)
                              $q4@884@01)
                            $q5@885@01))))))
                (or
                  (not
                    (and
                      (<= 0 $q5@885@01)
                      (<
                        $q5@885@01
                        (Seq_length
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                              $q3@883@01)
                            $q4@884@01)))))
                  (and
                    (<= 0 $q5@885@01)
                    (<
                      $q5@885@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                            $q3@883@01)
                          $q4@884@01))))))
              :pattern ((Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                    $q3@883@01)
                  $q4@884@01)
                $q5@885@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1675@351@1675@766-aux|))))
        (or
          (not
            (and
              (<= 0 $q4@884@01)
              (<
                $q4@884@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                    $q3@883@01)))))
          (and
            (<= 0 $q4@884@01)
            (<
              $q4@884@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                  $q3@883@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
          $q3@883@01)
        $q4@884@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1675@176@1675@767-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@883@01)
      (<
        $q3@883@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))))))
  (and
    (<= 0 $q3@883@01)
    (<
      $q3@883@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@883@01 Int)) (!
  (and
    (or (<= 0 $q3@883@01) (not (<= 0 $q3@883@01)))
    (=>
      (and
        (<= 0 $q3@883@01)
        (<
          $q3@883@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2)))))
      (and
        (<= 0 $q3@883@01)
        (<
          $q3@883@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))))
        (forall (($q4@884@01 Int)) (!
          (and
            (or (<= 0 $q4@884@01) (not (<= 0 $q4@884@01)))
            (=>
              (and
                (<= 0 $q4@884@01)
                (<
                  $q4@884@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                      $q3@883@01))))
              (and
                (<= 0 $q4@884@01)
                (<
                  $q4@884@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                      $q3@883@01)))
                (forall (($q5@885@01 Int)) (!
                  (and
                    (or (<= 0 $q5@885@01) (not (<= 0 $q5@885@01)))
                    (=>
                      (and
                        (<= 0 $q5@885@01)
                        (<
                          $q5@885@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                                $q3@883@01)
                              $q4@884@01))))
                      (and
                        (<= 0 $q5@885@01)
                        (<
                          $q5@885@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                                $q3@883@01)
                              $q4@884@01)))
                        (or
                          (<=
                            (- 0 170141183460469231731687303715884105728)
                            (Seq_index
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                                  $q3@883@01)
                                $q4@884@01)
                              $q5@885@01))
                          (not
                            (<=
                              (- 0 170141183460469231731687303715884105728)
                              (Seq_index
                                (Seq_index
                                  (Seq_index
                                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                                    $q3@883@01)
                                  $q4@884@01)
                                $q5@885@01))))))
                    (or
                      (not
                        (and
                          (<= 0 $q5@885@01)
                          (<
                            $q5@885@01
                            (Seq_length
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                                  $q3@883@01)
                                $q4@884@01)))))
                      (and
                        (<= 0 $q5@885@01)
                        (<
                          $q5@885@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                                $q3@883@01)
                              $q4@884@01))))))
                  :pattern ((Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                        $q3@883@01)
                      $q4@884@01)
                    $q5@885@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1675@351@1675@766-aux|))))
            (or
              (not
                (and
                  (<= 0 $q4@884@01)
                  (<
                    $q4@884@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                        $q3@883@01)))))
              (and
                (<= 0 $q4@884@01)
                (<
                  $q4@884@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                      $q3@883@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
              $q3@883@01)
            $q4@884@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1675@176@1675@767-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@883@01)
          (<
            $q3@883@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))))))
      (and
        (<= 0 $q3@883@01)
        (<
          $q3@883@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
    $q3@883@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1675@11@1675@768-aux|)))
(assert (forall (($q3@883@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@883@01)
      (<
        $q3@883@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2)))))
    (forall (($q4@884@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@884@01)
          (<
            $q4@884@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                $q3@883@01))))
        (forall (($q5@885@01 Int)) (!
          (=>
            (and
              (<= 0 $q5@885@01)
              (<
                $q5@885@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                      $q3@883@01)
                    $q4@884@01))))
            (and
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                      $q3@883@01)
                    $q4@884@01)
                  $q5@885@01))
              (<=
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                      $q3@883@01)
                    $q4@884@01)
                  $q5@885@01)
                170141183460469231731687303715884105727)))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
                $q3@883@01)
              $q4@884@01)
            $q5@885@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1675@351@1675@766|)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
          $q3@883@01)
        $q4@884@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1675@176@1675@767|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@854@01 2))
    $q3@883@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1675@11@1675@768|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
(declare-const $t@886@01 $Snap)
(assert (= $t@886@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3))) 1000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] }
;     0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] &&
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <=
;     170141183460469231731687303715884105727)
(declare-const $t@887@01 $Snap)
(assert (= $t@887@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] } 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727)
(declare-const $q6@888@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] 0 <= $q6
(push) ; 4
; [then-branch: 658 | !(0 <= $q6@888@01) | live]
; [else-branch: 658 | 0 <= $q6@888@01 | live]
(push) ; 5
; [then-branch: 658 | !(0 <= $q6@888@01)]
(assert (not (<= 0 $q6@888@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 658 | 0 <= $q6@888@01]
(assert (<= 0 $q6@888@01))
; [eval] $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q6@888@01) (not (<= 0 $q6@888@01))))
(push) ; 4
; [then-branch: 659 | 0 <= $q6@888@01 && $q6@888@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@854@01, 3))| | live]
; [else-branch: 659 | !(0 <= $q6@888@01 && $q6@888@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@854@01, 3))|) | live]
(push) ; 5
; [then-branch: 659 | 0 <= $q6@888@01 && $q6@888@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@854@01, 3))|]
(assert (and
  (<= 0 $q6@888@01)
  (<
    $q6@888@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (>= $q6@888@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 660 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@854@01, 3))[$q6@888@01]) | live]
; [else-branch: 660 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@854@01, 3))[$q6@888@01] | live]
(push) ; 7
; [then-branch: 660 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@854@01, 3))[$q6@888@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3))
      $q6@888@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 660 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@854@01, 3))[$q6@888@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3)) $q6@888@01)))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (>= $q6@888@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3))
      $q6@888@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3))
        $q6@888@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 659 | !(0 <= $q6@888@01 && $q6@888@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@854@01, 3))|)]
(assert (not
  (and
    (<= 0 $q6@888@01)
    (<
      $q6@888@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q6@888@01)
    (<
      $q6@888@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3)))))
  (and
    (<= 0 $q6@888@01)
    (<
      $q6@888@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3))
          $q6@888@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3))
            $q6@888@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q6@888@01)
      (<
        $q6@888@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3))))))
  (and
    (<= 0 $q6@888@01)
    (<
      $q6@888@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@888@01 Int)) (!
  (and
    (or (<= 0 $q6@888@01) (not (<= 0 $q6@888@01)))
    (=>
      (and
        (<= 0 $q6@888@01)
        (<
          $q6@888@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3)))))
      (and
        (<= 0 $q6@888@01)
        (<
          $q6@888@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3))
              $q6@888@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3))
                $q6@888@01))))))
    (or
      (not
        (and
          (<= 0 $q6@888@01)
          (<
            $q6@888@01
            (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3))))))
      (and
        (<= 0 $q6@888@01)
        (<
          $q6@888@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3))
    $q6@888@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1677@11@1677@346-aux|)))
(assert (forall (($q6@888@01 Int)) (!
  (=>
    (and
      (<= 0 $q6@888@01)
      (<
        $q6@888@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3))
          $q6@888@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3))
          $q6@888@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3))
    $q6@888@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1677@11@1677@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==
;     10)
(declare-const $t@889@01 $Snap)
(assert (= $t@889@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10)
(declare-const $q7@890@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@890@01 Int)) (!
  (=
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@890@01))
    10)
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@890@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1678@11@1678@209|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     (forall $q8: Int ::
;       { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] }
;       0 <= $q8 &&
;       $q8 <
;       |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==>
;       -170141183460469231731687303715884105728 <=
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] &&
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <=
;       170141183460469231731687303715884105727))
(declare-const $t@891@01 $Snap)
(assert (= $t@891@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727))
(declare-const $q7@892@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727)
(declare-const $q8@893@01 Int)
(push) ; 4
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] 0 <= $q8
(push) ; 5
; [then-branch: 661 | !(0 <= $q8@893@01) | live]
; [else-branch: 661 | 0 <= $q8@893@01 | live]
(push) ; 6
; [then-branch: 661 | !(0 <= $q8@893@01)]
(assert (not (<= 0 $q8@893@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 661 | 0 <= $q8@893@01]
(assert (<= 0 $q8@893@01))
; [eval] $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q8@893@01) (not (<= 0 $q8@893@01))))
(push) ; 5
; [then-branch: 662 | 0 <= $q8@893@01 && $q8@893@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@854@01, 4)), $q7@892@01)| | live]
; [else-branch: 662 | !(0 <= $q8@893@01 && $q8@893@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@854@01, 4)), $q7@892@01)|) | live]
(push) ; 6
; [then-branch: 662 | 0 <= $q8@893@01 && $q8@893@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@854@01, 4)), $q7@892@01)|]
(assert (and
  (<= 0 $q8@893@01)
  (<
    $q8@893@01
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] -170141183460469231731687303715884105728
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 7
(assert (not (>= $q8@893@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 663 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@854@01, 4)), $q7@892@01)[$q8@893@01]) | live]
; [else-branch: 663 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@854@01, 4)), $q7@892@01)[$q8@893@01] | live]
(push) ; 8
; [then-branch: 663 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@854@01, 4)), $q7@892@01)[$q8@893@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01)
      $q8@893@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 663 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@854@01, 4)), $q7@892@01)[$q8@893@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01)
    $q8@893@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 9
(assert (not (>= $q8@893@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01)
      $q8@893@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01)
        $q8@893@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 662 | !(0 <= $q8@893@01 && $q8@893@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@854@01, 4)), $q7@892@01)|)]
(assert (not
  (and
    (<= 0 $q8@893@01)
    (<
      $q8@893@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q8@893@01)
    (<
      $q8@893@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01))))
  (and
    (<= 0 $q8@893@01)
    (<
      $q8@893@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01)
          $q8@893@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01)
            $q8@893@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q8@893@01)
      (<
        $q8@893@01
        (Seq_length
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01)))))
  (and
    (<= 0 $q8@893@01)
    (<
      $q8@893@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q8@893@01 Int)) (!
  (and
    (or (<= 0 $q8@893@01) (not (<= 0 $q8@893@01)))
    (=>
      (and
        (<= 0 $q8@893@01)
        (<
          $q8@893@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01))))
      (and
        (<= 0 $q8@893@01)
        (<
          $q8@893@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01)
              $q8@893@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01)
                $q8@893@01))))))
    (or
      (not
        (and
          (<= 0 $q8@893@01)
          (<
            $q8@893@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01)))))
      (and
        (<= 0 $q8@893@01)
        (<
          $q8@893@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01))))))
  :pattern ((Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01)
    $q8@893@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1679@119@1679@606-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@892@01 Int)) (!
  (forall (($q8@893@01 Int)) (!
    (and
      (or (<= 0 $q8@893@01) (not (<= 0 $q8@893@01)))
      (=>
        (and
          (<= 0 $q8@893@01)
          (<
            $q8@893@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01))))
        (and
          (<= 0 $q8@893@01)
          (<
            $q8@893@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01)))
          (or
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01)
                $q8@893@01))
            (not
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01)
                  $q8@893@01))))))
      (or
        (not
          (and
            (<= 0 $q8@893@01)
            (<
              $q8@893@01
              (Seq_length
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01)))))
        (and
          (<= 0 $q8@893@01)
          (<
            $q8@893@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01))))))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01)
      $q8@893@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1679@119@1679@606-aux|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1679@11@1679@607-aux|)))
(assert (forall (($q7@892@01 Int)) (!
  (forall (($q8@893@01 Int)) (!
    (=>
      (and
        (<= 0 $q8@893@01)
        (<
          $q8@893@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01))))
      (and
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01)
            $q8@893@01))
        (<=
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01)
            $q8@893@01)
          170141183460469231731687303715884105727)))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01)
      $q8@893@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1679@119@1679@606|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@854@01 4)) $q7@892@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1679@11@1679@607|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@894@01 $Snap)
(assert (= $t@894@01 ($Snap.combine ($Snap.first $t@894@01) ($Snap.second $t@894@01))))
(assert (= ($Snap.first $t@894@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@854@01 5))))
(assert (= ($Snap.second $t@894@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@854@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@895@01 $Snap)
(assert (= $t@895@01 ($Snap.combine ($Snap.first $t@895@01) ($Snap.second $t@895@01))))
(assert (= ($Snap.first $t@895@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@854@01 6))))
(assert (= ($Snap.second $t@895@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@854@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@896@01 $Snap)
(assert (= $t@896@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q9@897@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 664 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@854@01, 8)), $q9@897@01)) | live]
; [else-branch: 664 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@854@01, 8)), $q9@897@01) | live]
(push) ; 5
; [then-branch: 664 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@854@01, 8)), $q9@897@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 8)) $q9@897@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 664 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@854@01, 8)), $q9@897@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 8)) $q9@897@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 8)) $q9@897@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 8)) $q9@897@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@897@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 8)) $q9@897@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 8)) $q9@897@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 8)) $q9@897@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1682@11@1682@345-aux|)))
(assert (forall (($q9@897@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 8)) $q9@897@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 8)) $q9@897@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 8)) $q9@897@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1682@11@1682@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@898@01 $Snap)
(assert (= $t@898@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q9@899@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@899@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 8)) $q9@899@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 8)) $q9@899@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1683@11@1683@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@900@01 $Snap)
(assert (= $t@900@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q10@901@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 665 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@854@01, 9)), $q10@901@01)) | live]
; [else-branch: 665 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@854@01, 9)), $q10@901@01) | live]
(push) ; 5
; [then-branch: 665 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@854@01, 9)), $q10@901@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 9)) $q10@901@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 665 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@854@01, 9)), $q10@901@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 9)) $q10@901@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 9)) $q10@901@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 9)) $q10@901@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@901@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 9)) $q10@901@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 9)) $q10@901@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 9)) $q10@901@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1684@11@1684@349-aux|)))
(assert (forall (($q10@901@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 9)) $q10@901@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 9)) $q10@901@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 9)) $q10@901@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1684@11@1684@349|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@902@01 $Snap)
(assert (= $t@902@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q10@903@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@903@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 9)) $q10@903@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@854@01 9)) $q10@903@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1685@11@1685@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@904@01 $Snap)
(assert (= $t@904@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@854@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@905@01 $Snap)
(assert (= $t@905@01 ($Snap.combine ($Snap.first $t@905@01) ($Snap.second $t@905@01))))
(assert (= ($Snap.first $t@905@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@905@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@906@01 $Snap)
(assert (= $t@906@01 ($Snap.combine ($Snap.first $t@906@01) ($Snap.second $t@906@01))))
(assert (= ($Snap.first $t@906@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@851@01 0))))
(assert (= ($Snap.second $t@906@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@851@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@907@01 $Snap)
(assert (= $t@907@01 ($Snap.combine ($Snap.first $t@907@01) ($Snap.second $t@907@01))))
(assert (= ($Snap.first $t@907@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@851@01 1))))
(assert (= ($Snap.second $t@907@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@851@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@908@01 $Snap)
(assert (= $t@908@01 ($Snap.combine ($Snap.first $t@908@01) ($Snap.second $t@908@01))))
(assert (= ($Snap.first $t@908@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@851@01 2))))
(assert (= ($Snap.second $t@908@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@851@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@909@01 $Snap)
(assert (= $t@909@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@851@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@910@01 $Snap)
(assert (= $t@910@01 ($Snap.combine ($Snap.first $t@910@01) ($Snap.second $t@910@01))))
(assert (= ($Snap.first $t@910@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@851@01 4))))
(assert (= ($Snap.second $t@910@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@851@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@911@01 $Snap)
(assert (= $t@911@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@851@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@912@01 $Snap)
(assert (= $t@912@01 ($Snap.combine ($Snap.first $t@912@01) ($Snap.second $t@912@01))))
(assert (= ($Snap.first $t@912@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@850@01 0))))
(assert (= ($Snap.second $t@912@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@850@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@913@01 $Snap)
(assert (= $t@913@01 ($Snap.combine ($Snap.first $t@913@01) ($Snap.second $t@913@01))))
(assert (= ($Snap.first $t@913@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@850@01 1))))
(assert (= ($Snap.second $t@913@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@850@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@914@01 $Snap)
(assert (= $t@914@01 ($Snap.combine ($Snap.first $t@914@01) ($Snap.second $t@914@01))))
(assert (= ($Snap.first $t@914@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@850@01 2))))
(assert (= ($Snap.second $t@914@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@850@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@915@01 $Snap)
(assert (= $t@915@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@850@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@916@01 $Snap)
(assert (= $t@916@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@850@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@917@01 $Snap)
(assert (= $t@917@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@918@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc(self, 3)): Seq[Int])
(declare-const $t@919@01 $Snap)
(assert (= $t@919@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@920@01 $Snap)
(assert (= $t@920@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@850@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; l$i := 42
; [eval] !(0 <= l$i && l$i < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= l$i && l$i < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= l$i
(set-option :timeout 0)
(push) ; 3
; [then-branch: 666 | False | live]
; [else-branch: 666 | True | live]
(push) ; 4
; [then-branch: 666 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 666 | True]
; [eval] l$i < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (< 42 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (< 42 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0)))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 667 | !(42 < |$struct_get[Seq[Int]]($struct_loc[Int](self@854@01, 0))|) | live]
; [else-branch: 667 | 42 < |$struct_get[Seq[Int]]($struct_loc[Int](self@854@01, 0))| | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 667 | !(42 < |$struct_get[Seq[Int]]($struct_loc[Int](self@854@01, 0))|)]
(assert (not
  (< 42 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0))))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale !$succ
; [eval] !$succ
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 668 | True | live]
; [else-branch: 668 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 668 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@921@01 $Snap)
(assert (= $t@921@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@865@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@922@01 $Struct)
(assert (=
  self@922@01
  ($struct_set<$Struct> self@854@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@854@01 5))
    l$havoc@865@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 5
(assert (not (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@922@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@922@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 3))))
(pop) ; 4
; [then-branch: 669 | False | dead]
; [else-branch: 669 | True | live]
(push) ; 4
; [else-branch: 669 | True]
(pop) ; 4
(pop) ; 3
; [eval] !!(0 <= l$i && l$i < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] !(0 <= l$i && l$i < |($struct_get($struct_loc(self, 0)): Seq[Int])|)
; [eval] 0 <= l$i && l$i < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= l$i
(push) ; 3
; [then-branch: 670 | False | live]
; [else-branch: 670 | True | live]
(push) ; 4
; [then-branch: 670 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 670 | True]
; [eval] l$i < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (< 42 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0)))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 671 | 42 < |$struct_get[Seq[Int]]($struct_loc[Int](self@854@01, 0))| | dead]
; [else-branch: 671 | !(42 < |$struct_get[Seq[Int]]($struct_loc[Int](self@854@01, 0))|) | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 671 | !(42 < |$struct_get[Seq[Int]]($struct_loc[Int](self@854@01, 0))|)]
(assert (not
  (< 42 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@854@01 0))))))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$get_zeros_fail ----------
(declare-const $succ@923@01 Bool)
(declare-const $res@924@01 Int)
(declare-const $succ@925@01 Bool)
(declare-const $res@926@01 Int)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@927@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@928@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@929@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@930@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@931@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@932@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@933@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@934@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@935@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@936@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@937@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@938@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@939@01 Bool)
; [exec]
; var l$i: Int
(declare-const l$i@940@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@941@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@942@01 Int)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@943@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@944@01 $Map<Int~_$Struct>)
; [exec]
; inhale |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
(declare-const $t@945@01 $Snap)
(assert (= $t@945@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 0))) 12))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] }
;     0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] &&
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <=
;     170141183460469231731687303715884105727)
(declare-const $t@946@01 $Snap)
(assert (= $t@946@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] } 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@947@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 672 | !(0 <= $q0@947@01) | live]
; [else-branch: 672 | 0 <= $q0@947@01 | live]
(push) ; 5
; [then-branch: 672 | !(0 <= $q0@947@01)]
(assert (not (<= 0 $q0@947@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 672 | 0 <= $q0@947@01]
(assert (<= 0 $q0@947@01))
; [eval] $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@947@01) (not (<= 0 $q0@947@01))))
(push) ; 4
; [then-branch: 673 | 0 <= $q0@947@01 && $q0@947@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@931@01, 0))| | live]
; [else-branch: 673 | !(0 <= $q0@947@01 && $q0@947@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@931@01, 0))|) | live]
(push) ; 5
; [then-branch: 673 | 0 <= $q0@947@01 && $q0@947@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@931@01, 0))|]
(assert (and
  (<= 0 $q0@947@01)
  (<
    $q0@947@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 0))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (>= $q0@947@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 674 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@931@01, 0))[$q0@947@01]) | live]
; [else-branch: 674 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@931@01, 0))[$q0@947@01] | live]
(push) ; 7
; [then-branch: 674 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@931@01, 0))[$q0@947@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 0))
      $q0@947@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 674 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@931@01, 0))[$q0@947@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 0)) $q0@947@01)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (>= $q0@947@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 0))
      $q0@947@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 0))
        $q0@947@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 673 | !(0 <= $q0@947@01 && $q0@947@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@931@01, 0))|)]
(assert (not
  (and
    (<= 0 $q0@947@01)
    (<
      $q0@947@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 0)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q0@947@01)
    (<
      $q0@947@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 0)))))
  (and
    (<= 0 $q0@947@01)
    (<
      $q0@947@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 0))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 0))
          $q0@947@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 0))
            $q0@947@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q0@947@01)
      (<
        $q0@947@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 0))))))
  (and
    (<= 0 $q0@947@01)
    (<
      $q0@947@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 0)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@947@01 Int)) (!
  (and
    (or (<= 0 $q0@947@01) (not (<= 0 $q0@947@01)))
    (=>
      (and
        (<= 0 $q0@947@01)
        (<
          $q0@947@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 0)))))
      (and
        (<= 0 $q0@947@01)
        (<
          $q0@947@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 0))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 0))
              $q0@947@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 0))
                $q0@947@01))))))
    (or
      (not
        (and
          (<= 0 $q0@947@01)
          (<
            $q0@947@01
            (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 0))))))
      (and
        (<= 0 $q0@947@01)
        (<
          $q0@947@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 0)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 0))
    $q0@947@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1768@11@1768@346-aux|)))
(assert (forall (($q0@947@01 Int)) (!
  (=>
    (and
      (<= 0 $q0@947@01)
      (<
        $q0@947@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 0)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 0))
          $q0@947@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 0))
          $q0@947@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 0))
    $q0@947@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1768@11@1768@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
(declare-const $t@948@01 $Snap)
(assert (= $t@948@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(assert (= (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))) 12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $t@949@01 $Snap)
(assert (= $t@949@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $q1@950@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 675 | !(0 <= $q1@950@01) | live]
; [else-branch: 675 | 0 <= $q1@950@01 | live]
(push) ; 5
; [then-branch: 675 | !(0 <= $q1@950@01)]
(assert (not (<= 0 $q1@950@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 675 | 0 <= $q1@950@01]
(assert (<= 0 $q1@950@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@950@01) (not (<= 0 $q1@950@01))))
(push) ; 4
; [then-branch: 676 | 0 <= $q1@950@01 && $q1@950@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@931@01, 1))| | live]
; [else-branch: 676 | !(0 <= $q1@950@01 && $q1@950@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@931@01, 1))|) | live]
(push) ; 5
; [then-branch: 676 | 0 <= $q1@950@01 && $q1@950@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@931@01, 1))|]
(assert (and
  (<= 0 $q1@950@01)
  (<
    $q1@950@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))))))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 6
(assert (not (>= $q1@950@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 676 | !(0 <= $q1@950@01 && $q1@950@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@931@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@950@01)
    (<
      $q1@950@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@950@01)
      (<
        $q1@950@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))))))
  (and
    (<= 0 $q1@950@01)
    (<
      $q1@950@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@950@01 Int)) (!
  (and
    (or (<= 0 $q1@950@01) (not (<= 0 $q1@950@01)))
    (or
      (not
        (and
          (<= 0 $q1@950@01)
          (<
            $q1@950@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))))))
      (and
        (<= 0 $q1@950@01)
        (<
          $q1@950@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
    $q1@950@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1770@11@1770@228-aux|)))
(assert (forall (($q1@950@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@950@01)
      (<
        $q1@950@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
          $q1@950@01))
      12))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
    $q1@950@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1770@11@1770@228|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     (forall $q2: Int ::
;       { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] }
;       0 <= $q2 &&
;       $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==>
;       -170141183460469231731687303715884105728 <=
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] &&
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <=
;       170141183460469231731687303715884105727))
(declare-const $t@951@01 $Snap)
(assert (= $t@951@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727))
(declare-const $q1@952@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 677 | !(0 <= $q1@952@01) | live]
; [else-branch: 677 | 0 <= $q1@952@01 | live]
(push) ; 5
; [then-branch: 677 | !(0 <= $q1@952@01)]
(assert (not (<= 0 $q1@952@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 677 | 0 <= $q1@952@01]
(assert (<= 0 $q1@952@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@952@01) (not (<= 0 $q1@952@01))))
(push) ; 4
; [then-branch: 678 | 0 <= $q1@952@01 && $q1@952@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@931@01, 1))| | live]
; [else-branch: 678 | !(0 <= $q1@952@01 && $q1@952@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@931@01, 1))|) | live]
(push) ; 5
; [then-branch: 678 | 0 <= $q1@952@01 && $q1@952@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@931@01, 1))|]
(assert (and
  (<= 0 $q1@952@01)
  (<
    $q1@952@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))))))
; [eval] (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
(declare-const $q2@953@01 Int)
(push) ; 6
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] 0 <= $q2
(push) ; 7
; [then-branch: 679 | !(0 <= $q2@953@01) | live]
; [else-branch: 679 | 0 <= $q2@953@01 | live]
(push) ; 8
; [then-branch: 679 | !(0 <= $q2@953@01)]
(assert (not (<= 0 $q2@953@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 679 | 0 <= $q2@953@01]
(assert (<= 0 $q2@953@01))
; [eval] $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@952@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q2@953@01) (not (<= 0 $q2@953@01))))
(push) ; 7
; [then-branch: 680 | 0 <= $q2@953@01 && $q2@953@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@931@01, 1))[$q1@952@01]| | live]
; [else-branch: 680 | !(0 <= $q2@953@01 && $q2@953@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@931@01, 1))[$q1@952@01]|) | live]
(push) ; 8
; [then-branch: 680 | 0 <= $q2@953@01 && $q2@953@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@931@01, 1))[$q1@952@01]|]
(assert (and
  (<= 0 $q2@953@01)
  (<
    $q2@953@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
        $q1@952@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@952@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q2@953@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 681 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@931@01, 1))[$q1@952@01][$q2@953@01]) | live]
; [else-branch: 681 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@931@01, 1))[$q1@952@01][$q2@953@01] | live]
(push) ; 10
; [then-branch: 681 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@931@01, 1))[$q1@952@01][$q2@953@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
        $q1@952@01)
      $q2@953@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 681 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@931@01, 1))[$q1@952@01][$q2@953@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
      $q1@952@01)
    $q2@953@01)))
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 11
(assert (not (>= $q1@952@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= $q2@953@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
        $q1@952@01)
      $q2@953@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
          $q1@952@01)
        $q2@953@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 680 | !(0 <= $q2@953@01 && $q2@953@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@931@01, 1))[$q1@952@01]|)]
(assert (not
  (and
    (<= 0 $q2@953@01)
    (<
      $q2@953@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
          $q1@952@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q2@953@01)
    (<
      $q2@953@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
          $q1@952@01))))
  (and
    (<= 0 $q2@953@01)
    (<
      $q2@953@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
          $q1@952@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
            $q1@952@01)
          $q2@953@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
              $q1@952@01)
            $q2@953@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q2@953@01)
      (<
        $q2@953@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
            $q1@952@01)))))
  (and
    (<= 0 $q2@953@01)
    (<
      $q2@953@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
          $q1@952@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@953@01 Int)) (!
  (and
    (or (<= 0 $q2@953@01) (not (<= 0 $q2@953@01)))
    (=>
      (and
        (<= 0 $q2@953@01)
        (<
          $q2@953@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
              $q1@952@01))))
      (and
        (<= 0 $q2@953@01)
        (<
          $q2@953@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
              $q1@952@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
                $q1@952@01)
              $q2@953@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
                  $q1@952@01)
                $q2@953@01))))))
    (or
      (not
        (and
          (<= 0 $q2@953@01)
          (<
            $q2@953@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
                $q1@952@01)))))
      (and
        (<= 0 $q2@953@01)
        (<
          $q2@953@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
              $q1@952@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
      $q1@952@01)
    $q2@953@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1771@166@1771@541-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 678 | !(0 <= $q1@952@01 && $q1@952@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@931@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@952@01)
    (<
      $q1@952@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q1@952@01)
    (<
      $q1@952@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1)))))
  (and
    (<= 0 $q1@952@01)
    (<
      $q1@952@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))))
    (forall (($q2@953@01 Int)) (!
      (and
        (or (<= 0 $q2@953@01) (not (<= 0 $q2@953@01)))
        (=>
          (and
            (<= 0 $q2@953@01)
            (<
              $q2@953@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
                  $q1@952@01))))
          (and
            (<= 0 $q2@953@01)
            (<
              $q2@953@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
                  $q1@952@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
                    $q1@952@01)
                  $q2@953@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
                      $q1@952@01)
                    $q2@953@01))))))
        (or
          (not
            (and
              (<= 0 $q2@953@01)
              (<
                $q2@953@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
                    $q1@952@01)))))
          (and
            (<= 0 $q2@953@01)
            (<
              $q2@953@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
                  $q1@952@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
          $q1@952@01)
        $q2@953@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1771@166@1771@541-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@952@01)
      (<
        $q1@952@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))))))
  (and
    (<= 0 $q1@952@01)
    (<
      $q1@952@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@952@01 Int)) (!
  (and
    (or (<= 0 $q1@952@01) (not (<= 0 $q1@952@01)))
    (=>
      (and
        (<= 0 $q1@952@01)
        (<
          $q1@952@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1)))))
      (and
        (<= 0 $q1@952@01)
        (<
          $q1@952@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))))
        (forall (($q2@953@01 Int)) (!
          (and
            (or (<= 0 $q2@953@01) (not (<= 0 $q2@953@01)))
            (=>
              (and
                (<= 0 $q2@953@01)
                (<
                  $q2@953@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
                      $q1@952@01))))
              (and
                (<= 0 $q2@953@01)
                (<
                  $q2@953@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
                      $q1@952@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
                        $q1@952@01)
                      $q2@953@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
                          $q1@952@01)
                        $q2@953@01))))))
            (or
              (not
                (and
                  (<= 0 $q2@953@01)
                  (<
                    $q2@953@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
                        $q1@952@01)))))
              (and
                (<= 0 $q2@953@01)
                (<
                  $q2@953@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
                      $q1@952@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
              $q1@952@01)
            $q2@953@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1771@166@1771@541-aux|))))
    (or
      (not
        (and
          (<= 0 $q1@952@01)
          (<
            $q1@952@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))))))
      (and
        (<= 0 $q1@952@01)
        (<
          $q1@952@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
    $q1@952@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1771@11@1771@542-aux|)))
(assert (forall (($q1@952@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@952@01)
      (<
        $q1@952@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1)))))
    (forall (($q2@953@01 Int)) (!
      (=>
        (and
          (<= 0 $q2@953@01)
          (<
            $q2@953@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
                $q1@952@01))))
        (and
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
                $q1@952@01)
              $q2@953@01))
          (<=
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
                $q1@952@01)
              $q2@953@01)
            170141183460469231731687303715884105727)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
          $q1@952@01)
        $q2@953@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1771@166@1771@541|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@931@01 1))
    $q1@952@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1771@11@1771@542|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
(declare-const $t@954@01 $Snap)
(assert (= $t@954@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(assert (=
  (Seq_length ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2)))
  2))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $t@955@01 $Snap)
(assert (= $t@955@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $q3@956@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 682 | !(0 <= $q3@956@01) | live]
; [else-branch: 682 | 0 <= $q3@956@01 | live]
(push) ; 5
; [then-branch: 682 | !(0 <= $q3@956@01)]
(assert (not (<= 0 $q3@956@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 682 | 0 <= $q3@956@01]
(assert (<= 0 $q3@956@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@956@01) (not (<= 0 $q3@956@01))))
(push) ; 4
; [then-branch: 683 | 0 <= $q3@956@01 && $q3@956@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))| | live]
; [else-branch: 683 | !(0 <= $q3@956@01 && $q3@956@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))|) | live]
(push) ; 5
; [then-branch: 683 | 0 <= $q3@956@01 && $q3@956@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))|]
(assert (and
  (<= 0 $q3@956@01)
  (<
    $q3@956@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 6
(assert (not (>= $q3@956@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 683 | !(0 <= $q3@956@01 && $q3@956@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@956@01)
    (<
      $q3@956@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@956@01)
      (<
        $q3@956@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))))))
  (and
    (<= 0 $q3@956@01)
    (<
      $q3@956@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@956@01 Int)) (!
  (and
    (or (<= 0 $q3@956@01) (not (<= 0 $q3@956@01)))
    (or
      (not
        (and
          (<= 0 $q3@956@01)
          (<
            $q3@956@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))))))
      (and
        (<= 0 $q3@956@01)
        (<
          $q3@956@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
    $q3@956@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1773@11@1773@242-aux|)))
(assert (forall (($q3@956@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@956@01)
      (<
        $q3@956@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
          $q3@956@01))
      2))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
    $q3@956@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1773@11@1773@242|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==
;       2))
(declare-const $t@957@01 $Snap)
(assert (= $t@957@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2))
(declare-const $q3@958@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 684 | !(0 <= $q3@958@01) | live]
; [else-branch: 684 | 0 <= $q3@958@01 | live]
(push) ; 5
; [then-branch: 684 | !(0 <= $q3@958@01)]
(assert (not (<= 0 $q3@958@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 684 | 0 <= $q3@958@01]
(assert (<= 0 $q3@958@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@958@01) (not (<= 0 $q3@958@01))))
(push) ; 4
; [then-branch: 685 | 0 <= $q3@958@01 && $q3@958@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))| | live]
; [else-branch: 685 | !(0 <= $q3@958@01 && $q3@958@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))|) | live]
(push) ; 5
; [then-branch: 685 | 0 <= $q3@958@01 && $q3@958@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))|]
(assert (and
  (<= 0 $q3@958@01)
  (<
    $q3@958@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
(declare-const $q4@959@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 686 | !(0 <= $q4@959@01) | live]
; [else-branch: 686 | 0 <= $q4@959@01 | live]
(push) ; 8
; [then-branch: 686 | !(0 <= $q4@959@01)]
(assert (not (<= 0 $q4@959@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 686 | 0 <= $q4@959@01]
(assert (<= 0 $q4@959@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@958@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@959@01) (not (<= 0 $q4@959@01))))
(push) ; 7
; [then-branch: 687 | 0 <= $q4@959@01 && $q4@959@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))[$q3@958@01]| | live]
; [else-branch: 687 | !(0 <= $q4@959@01 && $q4@959@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))[$q3@958@01]|) | live]
(push) ; 8
; [then-branch: 687 | 0 <= $q4@959@01 && $q4@959@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))[$q3@958@01]|]
(assert (and
  (<= 0 $q4@959@01)
  (<
    $q4@959@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
        $q3@958@01)))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@958@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q4@959@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 687 | !(0 <= $q4@959@01 && $q4@959@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))[$q3@958@01]|)]
(assert (not
  (and
    (<= 0 $q4@959@01)
    (<
      $q4@959@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
          $q3@958@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@959@01)
      (<
        $q4@959@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
            $q3@958@01)))))
  (and
    (<= 0 $q4@959@01)
    (<
      $q4@959@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
          $q3@958@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@959@01 Int)) (!
  (and
    (or (<= 0 $q4@959@01) (not (<= 0 $q4@959@01)))
    (or
      (not
        (and
          (<= 0 $q4@959@01)
          (<
            $q4@959@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                $q3@958@01)))))
      (and
        (<= 0 $q4@959@01)
        (<
          $q4@959@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
              $q3@958@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
      $q3@958@01)
    $q4@959@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1774@176@1774@422-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 685 | !(0 <= $q3@958@01 && $q3@958@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@958@01)
    (<
      $q3@958@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@958@01)
    (<
      $q3@958@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2)))))
  (and
    (<= 0 $q3@958@01)
    (<
      $q3@958@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))))
    (forall (($q4@959@01 Int)) (!
      (and
        (or (<= 0 $q4@959@01) (not (<= 0 $q4@959@01)))
        (or
          (not
            (and
              (<= 0 $q4@959@01)
              (<
                $q4@959@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                    $q3@958@01)))))
          (and
            (<= 0 $q4@959@01)
            (<
              $q4@959@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                  $q3@958@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
          $q3@958@01)
        $q4@959@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1774@176@1774@422-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@958@01)
      (<
        $q3@958@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))))))
  (and
    (<= 0 $q3@958@01)
    (<
      $q3@958@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@958@01 Int)) (!
  (and
    (or (<= 0 $q3@958@01) (not (<= 0 $q3@958@01)))
    (=>
      (and
        (<= 0 $q3@958@01)
        (<
          $q3@958@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2)))))
      (and
        (<= 0 $q3@958@01)
        (<
          $q3@958@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))))
        (forall (($q4@959@01 Int)) (!
          (and
            (or (<= 0 $q4@959@01) (not (<= 0 $q4@959@01)))
            (or
              (not
                (and
                  (<= 0 $q4@959@01)
                  (<
                    $q4@959@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                        $q3@958@01)))))
              (and
                (<= 0 $q4@959@01)
                (<
                  $q4@959@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                      $q3@958@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
              $q3@958@01)
            $q4@959@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1774@176@1774@422-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@958@01)
          (<
            $q3@958@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))))))
      (and
        (<= 0 $q3@958@01)
        (<
          $q3@958@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
    $q3@958@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1774@11@1774@423-aux|)))
(assert (forall (($q3@958@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@958@01)
      (<
        $q3@958@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2)))))
    (forall (($q4@959@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@959@01)
          (<
            $q4@959@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                $q3@958@01))))
        (=
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                $q3@958@01)
              $q4@959@01))
          2))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
          $q3@958@01)
        $q4@959@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1774@176@1774@422|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
    $q3@958@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1774@11@1774@423|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       (forall $q5: Int ::
;         { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] }
;         0 <= $q5 &&
;         $q5 <
;         |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==>
;         -170141183460469231731687303715884105728 <=
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] &&
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <=
;         170141183460469231731687303715884105727)))
(declare-const $t@960@01 $Snap)
(assert (= $t@960@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)))
(declare-const $q3@961@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 688 | !(0 <= $q3@961@01) | live]
; [else-branch: 688 | 0 <= $q3@961@01 | live]
(push) ; 5
; [then-branch: 688 | !(0 <= $q3@961@01)]
(assert (not (<= 0 $q3@961@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 688 | 0 <= $q3@961@01]
(assert (<= 0 $q3@961@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@961@01) (not (<= 0 $q3@961@01))))
(push) ; 4
; [then-branch: 689 | 0 <= $q3@961@01 && $q3@961@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))| | live]
; [else-branch: 689 | !(0 <= $q3@961@01 && $q3@961@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))|) | live]
(push) ; 5
; [then-branch: 689 | 0 <= $q3@961@01 && $q3@961@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))|]
(assert (and
  (<= 0 $q3@961@01)
  (<
    $q3@961@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
(declare-const $q4@962@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 690 | !(0 <= $q4@962@01) | live]
; [else-branch: 690 | 0 <= $q4@962@01 | live]
(push) ; 8
; [then-branch: 690 | !(0 <= $q4@962@01)]
(assert (not (<= 0 $q4@962@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 690 | 0 <= $q4@962@01]
(assert (<= 0 $q4@962@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@961@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@962@01) (not (<= 0 $q4@962@01))))
(push) ; 7
; [then-branch: 691 | 0 <= $q4@962@01 && $q4@962@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))[$q3@961@01]| | live]
; [else-branch: 691 | !(0 <= $q4@962@01 && $q4@962@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))[$q3@961@01]|) | live]
(push) ; 8
; [then-branch: 691 | 0 <= $q4@962@01 && $q4@962@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))[$q3@961@01]|]
(assert (and
  (<= 0 $q4@962@01)
  (<
    $q4@962@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
        $q3@961@01)))))
; [eval] (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
(declare-const $q5@963@01 Int)
(push) ; 9
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] 0 <= $q5
(push) ; 10
; [then-branch: 692 | !(0 <= $q5@963@01) | live]
; [else-branch: 692 | 0 <= $q5@963@01 | live]
(push) ; 11
; [then-branch: 692 | !(0 <= $q5@963@01)]
(assert (not (<= 0 $q5@963@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 692 | 0 <= $q5@963@01]
(assert (<= 0 $q5@963@01))
; [eval] $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@961@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@962@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q5@963@01) (not (<= 0 $q5@963@01))))
(push) ; 10
; [then-branch: 693 | 0 <= $q5@963@01 && $q5@963@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))[$q3@961@01][$q4@962@01]| | live]
; [else-branch: 693 | !(0 <= $q5@963@01 && $q5@963@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))[$q3@961@01][$q4@962@01]|) | live]
(push) ; 11
; [then-branch: 693 | 0 <= $q5@963@01 && $q5@963@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))[$q3@961@01][$q4@962@01]|]
(assert (and
  (<= 0 $q5@963@01)
  (<
    $q5@963@01
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
          $q3@961@01)
        $q4@962@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@961@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@962@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q5@963@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 694 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))[$q3@961@01][$q4@962@01][$q5@963@01]) | live]
; [else-branch: 694 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))[$q3@961@01][$q4@962@01][$q5@963@01] | live]
(push) ; 13
; [then-branch: 694 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))[$q3@961@01][$q4@962@01][$q5@963@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
          $q3@961@01)
        $q4@962@01)
      $q5@963@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 694 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))[$q3@961@01][$q4@962@01][$q5@963@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
        $q3@961@01)
      $q4@962@01)
    $q5@963@01)))
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 14
(assert (not (>= $q3@961@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q4@962@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q5@963@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
          $q3@961@01)
        $q4@962@01)
      $q5@963@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
            $q3@961@01)
          $q4@962@01)
        $q5@963@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 693 | !(0 <= $q5@963@01 && $q5@963@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))[$q3@961@01][$q4@962@01]|)]
(assert (not
  (and
    (<= 0 $q5@963@01)
    (<
      $q5@963@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
            $q3@961@01)
          $q4@962@01))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q5@963@01)
    (<
      $q5@963@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
            $q3@961@01)
          $q4@962@01))))
  (and
    (<= 0 $q5@963@01)
    (<
      $q5@963@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
            $q3@961@01)
          $q4@962@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
              $q3@961@01)
            $q4@962@01)
          $q5@963@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                $q3@961@01)
              $q4@962@01)
            $q5@963@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q5@963@01)
      (<
        $q5@963@01
        (Seq_length
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
              $q3@961@01)
            $q4@962@01)))))
  (and
    (<= 0 $q5@963@01)
    (<
      $q5@963@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
            $q3@961@01)
          $q4@962@01))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@963@01 Int)) (!
  (and
    (or (<= 0 $q5@963@01) (not (<= 0 $q5@963@01)))
    (=>
      (and
        (<= 0 $q5@963@01)
        (<
          $q5@963@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                $q3@961@01)
              $q4@962@01))))
      (and
        (<= 0 $q5@963@01)
        (<
          $q5@963@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                $q3@961@01)
              $q4@962@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                  $q3@961@01)
                $q4@962@01)
              $q5@963@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                    $q3@961@01)
                  $q4@962@01)
                $q5@963@01))))))
    (or
      (not
        (and
          (<= 0 $q5@963@01)
          (<
            $q5@963@01
            (Seq_length
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                  $q3@961@01)
                $q4@962@01)))))
      (and
        (<= 0 $q5@963@01)
        (<
          $q5@963@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                $q3@961@01)
              $q4@962@01))))))
  :pattern ((Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
        $q3@961@01)
      $q4@962@01)
    $q5@963@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1775@351@1775@766-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 691 | !(0 <= $q4@962@01 && $q4@962@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))[$q3@961@01]|)]
(assert (not
  (and
    (<= 0 $q4@962@01)
    (<
      $q4@962@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
          $q3@961@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q4@962@01)
    (<
      $q4@962@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
          $q3@961@01))))
  (and
    (<= 0 $q4@962@01)
    (<
      $q4@962@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
          $q3@961@01)))
    (forall (($q5@963@01 Int)) (!
      (and
        (or (<= 0 $q5@963@01) (not (<= 0 $q5@963@01)))
        (=>
          (and
            (<= 0 $q5@963@01)
            (<
              $q5@963@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                    $q3@961@01)
                  $q4@962@01))))
          (and
            (<= 0 $q5@963@01)
            (<
              $q5@963@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                    $q3@961@01)
                  $q4@962@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                      $q3@961@01)
                    $q4@962@01)
                  $q5@963@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                        $q3@961@01)
                      $q4@962@01)
                    $q5@963@01))))))
        (or
          (not
            (and
              (<= 0 $q5@963@01)
              (<
                $q5@963@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                      $q3@961@01)
                    $q4@962@01)))))
          (and
            (<= 0 $q5@963@01)
            (<
              $q5@963@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                    $q3@961@01)
                  $q4@962@01))))))
      :pattern ((Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
            $q3@961@01)
          $q4@962@01)
        $q5@963@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1775@351@1775@766-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@962@01)
      (<
        $q4@962@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
            $q3@961@01)))))
  (and
    (<= 0 $q4@962@01)
    (<
      $q4@962@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
          $q3@961@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@962@01 Int)) (!
  (and
    (or (<= 0 $q4@962@01) (not (<= 0 $q4@962@01)))
    (=>
      (and
        (<= 0 $q4@962@01)
        (<
          $q4@962@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
              $q3@961@01))))
      (and
        (<= 0 $q4@962@01)
        (<
          $q4@962@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
              $q3@961@01)))
        (forall (($q5@963@01 Int)) (!
          (and
            (or (<= 0 $q5@963@01) (not (<= 0 $q5@963@01)))
            (=>
              (and
                (<= 0 $q5@963@01)
                (<
                  $q5@963@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                        $q3@961@01)
                      $q4@962@01))))
              (and
                (<= 0 $q5@963@01)
                (<
                  $q5@963@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                        $q3@961@01)
                      $q4@962@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                          $q3@961@01)
                        $q4@962@01)
                      $q5@963@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                            $q3@961@01)
                          $q4@962@01)
                        $q5@963@01))))))
            (or
              (not
                (and
                  (<= 0 $q5@963@01)
                  (<
                    $q5@963@01
                    (Seq_length
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                          $q3@961@01)
                        $q4@962@01)))))
              (and
                (<= 0 $q5@963@01)
                (<
                  $q5@963@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                        $q3@961@01)
                      $q4@962@01))))))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                $q3@961@01)
              $q4@962@01)
            $q5@963@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1775@351@1775@766-aux|))))
    (or
      (not
        (and
          (<= 0 $q4@962@01)
          (<
            $q4@962@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                $q3@961@01)))))
      (and
        (<= 0 $q4@962@01)
        (<
          $q4@962@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
              $q3@961@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
      $q3@961@01)
    $q4@962@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1775@176@1775@767-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 689 | !(0 <= $q3@961@01 && $q3@961@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@931@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@961@01)
    (<
      $q3@961@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@961@01)
    (<
      $q3@961@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2)))))
  (and
    (<= 0 $q3@961@01)
    (<
      $q3@961@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))))
    (forall (($q4@962@01 Int)) (!
      (and
        (or (<= 0 $q4@962@01) (not (<= 0 $q4@962@01)))
        (=>
          (and
            (<= 0 $q4@962@01)
            (<
              $q4@962@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                  $q3@961@01))))
          (and
            (<= 0 $q4@962@01)
            (<
              $q4@962@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                  $q3@961@01)))
            (forall (($q5@963@01 Int)) (!
              (and
                (or (<= 0 $q5@963@01) (not (<= 0 $q5@963@01)))
                (=>
                  (and
                    (<= 0 $q5@963@01)
                    (<
                      $q5@963@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                            $q3@961@01)
                          $q4@962@01))))
                  (and
                    (<= 0 $q5@963@01)
                    (<
                      $q5@963@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                            $q3@961@01)
                          $q4@962@01)))
                    (or
                      (<=
                        (- 0 170141183460469231731687303715884105728)
                        (Seq_index
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                              $q3@961@01)
                            $q4@962@01)
                          $q5@963@01))
                      (not
                        (<=
                          (- 0 170141183460469231731687303715884105728)
                          (Seq_index
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                                $q3@961@01)
                              $q4@962@01)
                            $q5@963@01))))))
                (or
                  (not
                    (and
                      (<= 0 $q5@963@01)
                      (<
                        $q5@963@01
                        (Seq_length
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                              $q3@961@01)
                            $q4@962@01)))))
                  (and
                    (<= 0 $q5@963@01)
                    (<
                      $q5@963@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                            $q3@961@01)
                          $q4@962@01))))))
              :pattern ((Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                    $q3@961@01)
                  $q4@962@01)
                $q5@963@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1775@351@1775@766-aux|))))
        (or
          (not
            (and
              (<= 0 $q4@962@01)
              (<
                $q4@962@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                    $q3@961@01)))))
          (and
            (<= 0 $q4@962@01)
            (<
              $q4@962@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                  $q3@961@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
          $q3@961@01)
        $q4@962@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1775@176@1775@767-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@961@01)
      (<
        $q3@961@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))))))
  (and
    (<= 0 $q3@961@01)
    (<
      $q3@961@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@961@01 Int)) (!
  (and
    (or (<= 0 $q3@961@01) (not (<= 0 $q3@961@01)))
    (=>
      (and
        (<= 0 $q3@961@01)
        (<
          $q3@961@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2)))))
      (and
        (<= 0 $q3@961@01)
        (<
          $q3@961@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))))
        (forall (($q4@962@01 Int)) (!
          (and
            (or (<= 0 $q4@962@01) (not (<= 0 $q4@962@01)))
            (=>
              (and
                (<= 0 $q4@962@01)
                (<
                  $q4@962@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                      $q3@961@01))))
              (and
                (<= 0 $q4@962@01)
                (<
                  $q4@962@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                      $q3@961@01)))
                (forall (($q5@963@01 Int)) (!
                  (and
                    (or (<= 0 $q5@963@01) (not (<= 0 $q5@963@01)))
                    (=>
                      (and
                        (<= 0 $q5@963@01)
                        (<
                          $q5@963@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                                $q3@961@01)
                              $q4@962@01))))
                      (and
                        (<= 0 $q5@963@01)
                        (<
                          $q5@963@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                                $q3@961@01)
                              $q4@962@01)))
                        (or
                          (<=
                            (- 0 170141183460469231731687303715884105728)
                            (Seq_index
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                                  $q3@961@01)
                                $q4@962@01)
                              $q5@963@01))
                          (not
                            (<=
                              (- 0 170141183460469231731687303715884105728)
                              (Seq_index
                                (Seq_index
                                  (Seq_index
                                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                                    $q3@961@01)
                                  $q4@962@01)
                                $q5@963@01))))))
                    (or
                      (not
                        (and
                          (<= 0 $q5@963@01)
                          (<
                            $q5@963@01
                            (Seq_length
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                                  $q3@961@01)
                                $q4@962@01)))))
                      (and
                        (<= 0 $q5@963@01)
                        (<
                          $q5@963@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                                $q3@961@01)
                              $q4@962@01))))))
                  :pattern ((Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                        $q3@961@01)
                      $q4@962@01)
                    $q5@963@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1775@351@1775@766-aux|))))
            (or
              (not
                (and
                  (<= 0 $q4@962@01)
                  (<
                    $q4@962@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                        $q3@961@01)))))
              (and
                (<= 0 $q4@962@01)
                (<
                  $q4@962@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                      $q3@961@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
              $q3@961@01)
            $q4@962@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1775@176@1775@767-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@961@01)
          (<
            $q3@961@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))))))
      (and
        (<= 0 $q3@961@01)
        (<
          $q3@961@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
    $q3@961@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1775@11@1775@768-aux|)))
(assert (forall (($q3@961@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@961@01)
      (<
        $q3@961@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2)))))
    (forall (($q4@962@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@962@01)
          (<
            $q4@962@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                $q3@961@01))))
        (forall (($q5@963@01 Int)) (!
          (=>
            (and
              (<= 0 $q5@963@01)
              (<
                $q5@963@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                      $q3@961@01)
                    $q4@962@01))))
            (and
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                      $q3@961@01)
                    $q4@962@01)
                  $q5@963@01))
              (<=
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                      $q3@961@01)
                    $q4@962@01)
                  $q5@963@01)
                170141183460469231731687303715884105727)))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
                $q3@961@01)
              $q4@962@01)
            $q5@963@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1775@351@1775@766|)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
          $q3@961@01)
        $q4@962@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1775@176@1775@767|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@931@01 2))
    $q3@961@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1775@11@1775@768|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
(declare-const $t@964@01 $Snap)
(assert (= $t@964@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3))) 1000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] }
;     0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] &&
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <=
;     170141183460469231731687303715884105727)
(declare-const $t@965@01 $Snap)
(assert (= $t@965@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] } 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727)
(declare-const $q6@966@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] 0 <= $q6
(push) ; 4
; [then-branch: 695 | !(0 <= $q6@966@01) | live]
; [else-branch: 695 | 0 <= $q6@966@01 | live]
(push) ; 5
; [then-branch: 695 | !(0 <= $q6@966@01)]
(assert (not (<= 0 $q6@966@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 695 | 0 <= $q6@966@01]
(assert (<= 0 $q6@966@01))
; [eval] $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q6@966@01) (not (<= 0 $q6@966@01))))
(push) ; 4
; [then-branch: 696 | 0 <= $q6@966@01 && $q6@966@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@931@01, 3))| | live]
; [else-branch: 696 | !(0 <= $q6@966@01 && $q6@966@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@931@01, 3))|) | live]
(push) ; 5
; [then-branch: 696 | 0 <= $q6@966@01 && $q6@966@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@931@01, 3))|]
(assert (and
  (<= 0 $q6@966@01)
  (<
    $q6@966@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (>= $q6@966@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 697 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@931@01, 3))[$q6@966@01]) | live]
; [else-branch: 697 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@931@01, 3))[$q6@966@01] | live]
(push) ; 7
; [then-branch: 697 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@931@01, 3))[$q6@966@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3))
      $q6@966@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 697 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@931@01, 3))[$q6@966@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3)) $q6@966@01)))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (>= $q6@966@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3))
      $q6@966@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3))
        $q6@966@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 696 | !(0 <= $q6@966@01 && $q6@966@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@931@01, 3))|)]
(assert (not
  (and
    (<= 0 $q6@966@01)
    (<
      $q6@966@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q6@966@01)
    (<
      $q6@966@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3)))))
  (and
    (<= 0 $q6@966@01)
    (<
      $q6@966@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3))
          $q6@966@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3))
            $q6@966@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q6@966@01)
      (<
        $q6@966@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3))))))
  (and
    (<= 0 $q6@966@01)
    (<
      $q6@966@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@966@01 Int)) (!
  (and
    (or (<= 0 $q6@966@01) (not (<= 0 $q6@966@01)))
    (=>
      (and
        (<= 0 $q6@966@01)
        (<
          $q6@966@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3)))))
      (and
        (<= 0 $q6@966@01)
        (<
          $q6@966@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3))
              $q6@966@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3))
                $q6@966@01))))))
    (or
      (not
        (and
          (<= 0 $q6@966@01)
          (<
            $q6@966@01
            (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3))))))
      (and
        (<= 0 $q6@966@01)
        (<
          $q6@966@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3))
    $q6@966@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1777@11@1777@346-aux|)))
(assert (forall (($q6@966@01 Int)) (!
  (=>
    (and
      (<= 0 $q6@966@01)
      (<
        $q6@966@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3))
          $q6@966@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3))
          $q6@966@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3))
    $q6@966@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1777@11@1777@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==
;     10)
(declare-const $t@967@01 $Snap)
(assert (= $t@967@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10)
(declare-const $q7@968@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@968@01 Int)) (!
  (=
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@968@01))
    10)
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@968@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1778@11@1778@209|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     (forall $q8: Int ::
;       { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] }
;       0 <= $q8 &&
;       $q8 <
;       |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==>
;       -170141183460469231731687303715884105728 <=
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] &&
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <=
;       170141183460469231731687303715884105727))
(declare-const $t@969@01 $Snap)
(assert (= $t@969@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727))
(declare-const $q7@970@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727)
(declare-const $q8@971@01 Int)
(push) ; 4
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] 0 <= $q8
(push) ; 5
; [then-branch: 698 | !(0 <= $q8@971@01) | live]
; [else-branch: 698 | 0 <= $q8@971@01 | live]
(push) ; 6
; [then-branch: 698 | !(0 <= $q8@971@01)]
(assert (not (<= 0 $q8@971@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 698 | 0 <= $q8@971@01]
(assert (<= 0 $q8@971@01))
; [eval] $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q8@971@01) (not (<= 0 $q8@971@01))))
(push) ; 5
; [then-branch: 699 | 0 <= $q8@971@01 && $q8@971@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@931@01, 4)), $q7@970@01)| | live]
; [else-branch: 699 | !(0 <= $q8@971@01 && $q8@971@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@931@01, 4)), $q7@970@01)|) | live]
(push) ; 6
; [then-branch: 699 | 0 <= $q8@971@01 && $q8@971@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@931@01, 4)), $q7@970@01)|]
(assert (and
  (<= 0 $q8@971@01)
  (<
    $q8@971@01
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] -170141183460469231731687303715884105728
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 7
(assert (not (>= $q8@971@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 700 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@931@01, 4)), $q7@970@01)[$q8@971@01]) | live]
; [else-branch: 700 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@931@01, 4)), $q7@970@01)[$q8@971@01] | live]
(push) ; 8
; [then-branch: 700 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@931@01, 4)), $q7@970@01)[$q8@971@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01)
      $q8@971@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 700 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@931@01, 4)), $q7@970@01)[$q8@971@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01)
    $q8@971@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 9
(assert (not (>= $q8@971@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01)
      $q8@971@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01)
        $q8@971@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 699 | !(0 <= $q8@971@01 && $q8@971@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@931@01, 4)), $q7@970@01)|)]
(assert (not
  (and
    (<= 0 $q8@971@01)
    (<
      $q8@971@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q8@971@01)
    (<
      $q8@971@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01))))
  (and
    (<= 0 $q8@971@01)
    (<
      $q8@971@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01)
          $q8@971@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01)
            $q8@971@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q8@971@01)
      (<
        $q8@971@01
        (Seq_length
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01)))))
  (and
    (<= 0 $q8@971@01)
    (<
      $q8@971@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q8@971@01 Int)) (!
  (and
    (or (<= 0 $q8@971@01) (not (<= 0 $q8@971@01)))
    (=>
      (and
        (<= 0 $q8@971@01)
        (<
          $q8@971@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01))))
      (and
        (<= 0 $q8@971@01)
        (<
          $q8@971@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01)
              $q8@971@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01)
                $q8@971@01))))))
    (or
      (not
        (and
          (<= 0 $q8@971@01)
          (<
            $q8@971@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01)))))
      (and
        (<= 0 $q8@971@01)
        (<
          $q8@971@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01))))))
  :pattern ((Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01)
    $q8@971@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1779@119@1779@606-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@970@01 Int)) (!
  (forall (($q8@971@01 Int)) (!
    (and
      (or (<= 0 $q8@971@01) (not (<= 0 $q8@971@01)))
      (=>
        (and
          (<= 0 $q8@971@01)
          (<
            $q8@971@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01))))
        (and
          (<= 0 $q8@971@01)
          (<
            $q8@971@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01)))
          (or
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01)
                $q8@971@01))
            (not
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01)
                  $q8@971@01))))))
      (or
        (not
          (and
            (<= 0 $q8@971@01)
            (<
              $q8@971@01
              (Seq_length
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01)))))
        (and
          (<= 0 $q8@971@01)
          (<
            $q8@971@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01))))))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01)
      $q8@971@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1779@119@1779@606-aux|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1779@11@1779@607-aux|)))
(assert (forall (($q7@970@01 Int)) (!
  (forall (($q8@971@01 Int)) (!
    (=>
      (and
        (<= 0 $q8@971@01)
        (<
          $q8@971@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01))))
      (and
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01)
            $q8@971@01))
        (<=
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01)
            $q8@971@01)
          170141183460469231731687303715884105727)))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01)
      $q8@971@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1779@119@1779@606|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@931@01 4)) $q7@970@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1779@11@1779@607|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@972@01 $Snap)
(assert (= $t@972@01 ($Snap.combine ($Snap.first $t@972@01) ($Snap.second $t@972@01))))
(assert (= ($Snap.first $t@972@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@931@01 5))))
(assert (= ($Snap.second $t@972@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@931@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@973@01 $Snap)
(assert (= $t@973@01 ($Snap.combine ($Snap.first $t@973@01) ($Snap.second $t@973@01))))
(assert (= ($Snap.first $t@973@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@931@01 6))))
(assert (= ($Snap.second $t@973@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@931@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@974@01 $Snap)
(assert (= $t@974@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q9@975@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 701 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@931@01, 8)), $q9@975@01)) | live]
; [else-branch: 701 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@931@01, 8)), $q9@975@01) | live]
(push) ; 5
; [then-branch: 701 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@931@01, 8)), $q9@975@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 8)) $q9@975@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 701 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@931@01, 8)), $q9@975@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 8)) $q9@975@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 8)) $q9@975@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 8)) $q9@975@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@975@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 8)) $q9@975@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 8)) $q9@975@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 8)) $q9@975@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1782@11@1782@345-aux|)))
(assert (forall (($q9@975@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 8)) $q9@975@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 8)) $q9@975@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 8)) $q9@975@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1782@11@1782@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@976@01 $Snap)
(assert (= $t@976@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q9@977@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@977@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 8)) $q9@977@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 8)) $q9@977@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1783@11@1783@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@978@01 $Snap)
(assert (= $t@978@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q10@979@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 702 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@931@01, 9)), $q10@979@01)) | live]
; [else-branch: 702 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@931@01, 9)), $q10@979@01) | live]
(push) ; 5
; [then-branch: 702 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@931@01, 9)), $q10@979@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 9)) $q10@979@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 702 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@931@01, 9)), $q10@979@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 9)) $q10@979@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 9)) $q10@979@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 9)) $q10@979@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@979@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 9)) $q10@979@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 9)) $q10@979@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 9)) $q10@979@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1784@11@1784@349-aux|)))
(assert (forall (($q10@979@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 9)) $q10@979@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 9)) $q10@979@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 9)) $q10@979@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1784@11@1784@349|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@980@01 $Snap)
(assert (= $t@980@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q10@981@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@981@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 9)) $q10@981@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@931@01 9)) $q10@981@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1785@11@1785@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@982@01 $Snap)
(assert (= $t@982@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@931@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@983@01 $Snap)
(assert (= $t@983@01 ($Snap.combine ($Snap.first $t@983@01) ($Snap.second $t@983@01))))
(assert (= ($Snap.first $t@983@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@983@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@984@01 $Snap)
(assert (= $t@984@01 ($Snap.combine ($Snap.first $t@984@01) ($Snap.second $t@984@01))))
(assert (= ($Snap.first $t@984@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@928@01 0))))
(assert (= ($Snap.second $t@984@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@928@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@985@01 $Snap)
(assert (= $t@985@01 ($Snap.combine ($Snap.first $t@985@01) ($Snap.second $t@985@01))))
(assert (= ($Snap.first $t@985@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@928@01 1))))
(assert (= ($Snap.second $t@985@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@928@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@986@01 $Snap)
(assert (= $t@986@01 ($Snap.combine ($Snap.first $t@986@01) ($Snap.second $t@986@01))))
(assert (= ($Snap.first $t@986@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@928@01 2))))
(assert (= ($Snap.second $t@986@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@928@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@987@01 $Snap)
(assert (= $t@987@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@928@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@988@01 $Snap)
(assert (= $t@988@01 ($Snap.combine ($Snap.first $t@988@01) ($Snap.second $t@988@01))))
(assert (= ($Snap.first $t@988@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@928@01 4))))
(assert (= ($Snap.second $t@988@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@928@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@989@01 $Snap)
(assert (= $t@989@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@928@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@990@01 $Snap)
(assert (= $t@990@01 ($Snap.combine ($Snap.first $t@990@01) ($Snap.second $t@990@01))))
(assert (= ($Snap.first $t@990@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@927@01 0))))
(assert (= ($Snap.second $t@990@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@927@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@991@01 $Snap)
(assert (= $t@991@01 ($Snap.combine ($Snap.first $t@991@01) ($Snap.second $t@991@01))))
(assert (= ($Snap.first $t@991@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@927@01 1))))
(assert (= ($Snap.second $t@991@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@927@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@992@01 $Snap)
(assert (= $t@992@01 ($Snap.combine ($Snap.first $t@992@01) ($Snap.second $t@992@01))))
(assert (= ($Snap.first $t@992@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@927@01 2))))
(assert (= ($Snap.second $t@992@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@927@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@993@01 $Snap)
(assert (= $t@993@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@927@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@994@01 $Snap)
(assert (= $t@994@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@927@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@995@01 $Snap)
(assert (= $t@995@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@996@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc(self, 3)): Seq[Int])
(declare-const $t@997@01 $Snap)
(assert (= $t@997@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@998@01 $Snap)
(assert (= $t@998@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@927@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; l$i := 1000
; [eval] !(0 <= l$i && l$i < |($struct_get($struct_loc(self, 3)): Seq[Int])|)
; [eval] 0 <= l$i && l$i < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] 0 <= l$i
(set-option :timeout 0)
(push) ; 3
; [then-branch: 703 | False | live]
; [else-branch: 703 | True | live]
(push) ; 4
; [then-branch: 703 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 703 | True]
; [eval] l$i < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (< 1000 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (< 1000 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3)))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 704 | !(1000 < |$struct_get[Seq[Int]]($struct_loc[Int](self@931@01, 3))|) | live]
; [else-branch: 704 | 1000 < |$struct_get[Seq[Int]]($struct_loc[Int](self@931@01, 3))| | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 704 | !(1000 < |$struct_get[Seq[Int]]($struct_loc[Int](self@931@01, 3))|)]
(assert (not
  (< 1000 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@931@01 3))))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale $res == 0
; [eval] $res == 0
(push) ; 4
(assert (not (= l$havoc@942@01 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $res == 0
(set-option :timeout 0)
(push) ; 4
(assert (not (= l$havoc@942@01 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $res == 0
(set-option :timeout 0)
(push) ; 4
(assert (not (= l$havoc@942@01 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $res == 0
(set-option :timeout 0)
(push) ; 4
(assert (not (= l$havoc@942@01 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$get_zeros_at_fail ----------
(declare-const l$i@999@01 $Int)
(declare-const $succ@1000@01 Bool)
(declare-const $res@1001@01 Int)
(declare-const l$i@1002@01 $Int)
(declare-const $succ@1003@01 Bool)
(declare-const $res@1004@01 Int)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@1005@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@1006@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@1007@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@1008@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@1009@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@1010@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@1011@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@1012@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@1013@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@1014@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@1015@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@1016@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@1017@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@1018@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@1019@01 Int)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@1020@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@1021@01 $Map<Int~_$Struct>)
; [exec]
; inhale |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
(declare-const $t@1022@01 $Snap)
(assert (= $t@1022@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 0))) 12))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] }
;     0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] &&
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <=
;     170141183460469231731687303715884105727)
(declare-const $t@1023@01 $Snap)
(assert (= $t@1023@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] } 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@1024@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 705 | !(0 <= $q0@1024@01) | live]
; [else-branch: 705 | 0 <= $q0@1024@01 | live]
(push) ; 5
; [then-branch: 705 | !(0 <= $q0@1024@01)]
(assert (not (<= 0 $q0@1024@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 705 | 0 <= $q0@1024@01]
(assert (<= 0 $q0@1024@01))
; [eval] $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@1024@01) (not (<= 0 $q0@1024@01))))
(push) ; 4
; [then-branch: 706 | 0 <= $q0@1024@01 && $q0@1024@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1009@01, 0))| | live]
; [else-branch: 706 | !(0 <= $q0@1024@01 && $q0@1024@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1009@01, 0))|) | live]
(push) ; 5
; [then-branch: 706 | 0 <= $q0@1024@01 && $q0@1024@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1009@01, 0))|]
(assert (and
  (<= 0 $q0@1024@01)
  (<
    $q0@1024@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 0))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (>= $q0@1024@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 707 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1009@01, 0))[$q0@1024@01]) | live]
; [else-branch: 707 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1009@01, 0))[$q0@1024@01] | live]
(push) ; 7
; [then-branch: 707 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1009@01, 0))[$q0@1024@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 0))
      $q0@1024@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 707 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1009@01, 0))[$q0@1024@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 0))
    $q0@1024@01)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (>= $q0@1024@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 0))
      $q0@1024@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 0))
        $q0@1024@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 706 | !(0 <= $q0@1024@01 && $q0@1024@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1009@01, 0))|)]
(assert (not
  (and
    (<= 0 $q0@1024@01)
    (<
      $q0@1024@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 0)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q0@1024@01)
    (<
      $q0@1024@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 0)))))
  (and
    (<= 0 $q0@1024@01)
    (<
      $q0@1024@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 0))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 0))
          $q0@1024@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 0))
            $q0@1024@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q0@1024@01)
      (<
        $q0@1024@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 0))))))
  (and
    (<= 0 $q0@1024@01)
    (<
      $q0@1024@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 0)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@1024@01 Int)) (!
  (and
    (or (<= 0 $q0@1024@01) (not (<= 0 $q0@1024@01)))
    (=>
      (and
        (<= 0 $q0@1024@01)
        (<
          $q0@1024@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 0)))))
      (and
        (<= 0 $q0@1024@01)
        (<
          $q0@1024@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 0))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 0))
              $q0@1024@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 0))
                $q0@1024@01))))))
    (or
      (not
        (and
          (<= 0 $q0@1024@01)
          (<
            $q0@1024@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 0))))))
      (and
        (<= 0 $q0@1024@01)
        (<
          $q0@1024@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 0)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 0))
    $q0@1024@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1869@11@1869@346-aux|)))
(assert (forall (($q0@1024@01 Int)) (!
  (=>
    (and
      (<= 0 $q0@1024@01)
      (<
        $q0@1024@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 0)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 0))
          $q0@1024@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 0))
          $q0@1024@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 0))
    $q0@1024@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1869@11@1869@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
(declare-const $t@1025@01 $Snap)
(assert (= $t@1025@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(assert (=
  (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1)))
  12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $t@1026@01 $Snap)
(assert (= $t@1026@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $q1@1027@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 708 | !(0 <= $q1@1027@01) | live]
; [else-branch: 708 | 0 <= $q1@1027@01 | live]
(push) ; 5
; [then-branch: 708 | !(0 <= $q1@1027@01)]
(assert (not (<= 0 $q1@1027@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 708 | 0 <= $q1@1027@01]
(assert (<= 0 $q1@1027@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@1027@01) (not (<= 0 $q1@1027@01))))
(push) ; 4
; [then-branch: 709 | 0 <= $q1@1027@01 && $q1@1027@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1009@01, 1))| | live]
; [else-branch: 709 | !(0 <= $q1@1027@01 && $q1@1027@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1009@01, 1))|) | live]
(push) ; 5
; [then-branch: 709 | 0 <= $q1@1027@01 && $q1@1027@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1009@01, 1))|]
(assert (and
  (<= 0 $q1@1027@01)
  (<
    $q1@1027@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))))))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 6
(assert (not (>= $q1@1027@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 709 | !(0 <= $q1@1027@01 && $q1@1027@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1009@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@1027@01)
    (<
      $q1@1027@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@1027@01)
      (<
        $q1@1027@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))))))
  (and
    (<= 0 $q1@1027@01)
    (<
      $q1@1027@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@1027@01 Int)) (!
  (and
    (or (<= 0 $q1@1027@01) (not (<= 0 $q1@1027@01)))
    (or
      (not
        (and
          (<= 0 $q1@1027@01)
          (<
            $q1@1027@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))))))
      (and
        (<= 0 $q1@1027@01)
        (<
          $q1@1027@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
    $q1@1027@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1871@11@1871@228-aux|)))
(assert (forall (($q1@1027@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@1027@01)
      (<
        $q1@1027@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
          $q1@1027@01))
      12))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
    $q1@1027@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1871@11@1871@228|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     (forall $q2: Int ::
;       { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] }
;       0 <= $q2 &&
;       $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==>
;       -170141183460469231731687303715884105728 <=
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] &&
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <=
;       170141183460469231731687303715884105727))
(declare-const $t@1028@01 $Snap)
(assert (= $t@1028@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727))
(declare-const $q1@1029@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 710 | !(0 <= $q1@1029@01) | live]
; [else-branch: 710 | 0 <= $q1@1029@01 | live]
(push) ; 5
; [then-branch: 710 | !(0 <= $q1@1029@01)]
(assert (not (<= 0 $q1@1029@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 710 | 0 <= $q1@1029@01]
(assert (<= 0 $q1@1029@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@1029@01) (not (<= 0 $q1@1029@01))))
(push) ; 4
; [then-branch: 711 | 0 <= $q1@1029@01 && $q1@1029@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1009@01, 1))| | live]
; [else-branch: 711 | !(0 <= $q1@1029@01 && $q1@1029@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1009@01, 1))|) | live]
(push) ; 5
; [then-branch: 711 | 0 <= $q1@1029@01 && $q1@1029@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1009@01, 1))|]
(assert (and
  (<= 0 $q1@1029@01)
  (<
    $q1@1029@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))))))
; [eval] (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
(declare-const $q2@1030@01 Int)
(push) ; 6
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] 0 <= $q2
(push) ; 7
; [then-branch: 712 | !(0 <= $q2@1030@01) | live]
; [else-branch: 712 | 0 <= $q2@1030@01 | live]
(push) ; 8
; [then-branch: 712 | !(0 <= $q2@1030@01)]
(assert (not (<= 0 $q2@1030@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 712 | 0 <= $q2@1030@01]
(assert (<= 0 $q2@1030@01))
; [eval] $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@1029@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q2@1030@01) (not (<= 0 $q2@1030@01))))
(push) ; 7
; [then-branch: 713 | 0 <= $q2@1030@01 && $q2@1030@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1009@01, 1))[$q1@1029@01]| | live]
; [else-branch: 713 | !(0 <= $q2@1030@01 && $q2@1030@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1009@01, 1))[$q1@1029@01]|) | live]
(push) ; 8
; [then-branch: 713 | 0 <= $q2@1030@01 && $q2@1030@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1009@01, 1))[$q1@1029@01]|]
(assert (and
  (<= 0 $q2@1030@01)
  (<
    $q2@1030@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
        $q1@1029@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@1029@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q2@1030@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 714 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1009@01, 1))[$q1@1029@01][$q2@1030@01]) | live]
; [else-branch: 714 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1009@01, 1))[$q1@1029@01][$q2@1030@01] | live]
(push) ; 10
; [then-branch: 714 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1009@01, 1))[$q1@1029@01][$q2@1030@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
        $q1@1029@01)
      $q2@1030@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 714 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1009@01, 1))[$q1@1029@01][$q2@1030@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
      $q1@1029@01)
    $q2@1030@01)))
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 11
(assert (not (>= $q1@1029@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= $q2@1030@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
        $q1@1029@01)
      $q2@1030@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
          $q1@1029@01)
        $q2@1030@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 713 | !(0 <= $q2@1030@01 && $q2@1030@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1009@01, 1))[$q1@1029@01]|)]
(assert (not
  (and
    (<= 0 $q2@1030@01)
    (<
      $q2@1030@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
          $q1@1029@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q2@1030@01)
    (<
      $q2@1030@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
          $q1@1029@01))))
  (and
    (<= 0 $q2@1030@01)
    (<
      $q2@1030@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
          $q1@1029@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
            $q1@1029@01)
          $q2@1030@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
              $q1@1029@01)
            $q2@1030@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q2@1030@01)
      (<
        $q2@1030@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
            $q1@1029@01)))))
  (and
    (<= 0 $q2@1030@01)
    (<
      $q2@1030@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
          $q1@1029@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@1030@01 Int)) (!
  (and
    (or (<= 0 $q2@1030@01) (not (<= 0 $q2@1030@01)))
    (=>
      (and
        (<= 0 $q2@1030@01)
        (<
          $q2@1030@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
              $q1@1029@01))))
      (and
        (<= 0 $q2@1030@01)
        (<
          $q2@1030@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
              $q1@1029@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
                $q1@1029@01)
              $q2@1030@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
                  $q1@1029@01)
                $q2@1030@01))))))
    (or
      (not
        (and
          (<= 0 $q2@1030@01)
          (<
            $q2@1030@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
                $q1@1029@01)))))
      (and
        (<= 0 $q2@1030@01)
        (<
          $q2@1030@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
              $q1@1029@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
      $q1@1029@01)
    $q2@1030@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1872@166@1872@541-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 711 | !(0 <= $q1@1029@01 && $q1@1029@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1009@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@1029@01)
    (<
      $q1@1029@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q1@1029@01)
    (<
      $q1@1029@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1)))))
  (and
    (<= 0 $q1@1029@01)
    (<
      $q1@1029@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))))
    (forall (($q2@1030@01 Int)) (!
      (and
        (or (<= 0 $q2@1030@01) (not (<= 0 $q2@1030@01)))
        (=>
          (and
            (<= 0 $q2@1030@01)
            (<
              $q2@1030@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
                  $q1@1029@01))))
          (and
            (<= 0 $q2@1030@01)
            (<
              $q2@1030@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
                  $q1@1029@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
                    $q1@1029@01)
                  $q2@1030@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
                      $q1@1029@01)
                    $q2@1030@01))))))
        (or
          (not
            (and
              (<= 0 $q2@1030@01)
              (<
                $q2@1030@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
                    $q1@1029@01)))))
          (and
            (<= 0 $q2@1030@01)
            (<
              $q2@1030@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
                  $q1@1029@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
          $q1@1029@01)
        $q2@1030@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1872@166@1872@541-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@1029@01)
      (<
        $q1@1029@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))))))
  (and
    (<= 0 $q1@1029@01)
    (<
      $q1@1029@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@1029@01 Int)) (!
  (and
    (or (<= 0 $q1@1029@01) (not (<= 0 $q1@1029@01)))
    (=>
      (and
        (<= 0 $q1@1029@01)
        (<
          $q1@1029@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1)))))
      (and
        (<= 0 $q1@1029@01)
        (<
          $q1@1029@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))))
        (forall (($q2@1030@01 Int)) (!
          (and
            (or (<= 0 $q2@1030@01) (not (<= 0 $q2@1030@01)))
            (=>
              (and
                (<= 0 $q2@1030@01)
                (<
                  $q2@1030@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
                      $q1@1029@01))))
              (and
                (<= 0 $q2@1030@01)
                (<
                  $q2@1030@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
                      $q1@1029@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
                        $q1@1029@01)
                      $q2@1030@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
                          $q1@1029@01)
                        $q2@1030@01))))))
            (or
              (not
                (and
                  (<= 0 $q2@1030@01)
                  (<
                    $q2@1030@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
                        $q1@1029@01)))))
              (and
                (<= 0 $q2@1030@01)
                (<
                  $q2@1030@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
                      $q1@1029@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
              $q1@1029@01)
            $q2@1030@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1872@166@1872@541-aux|))))
    (or
      (not
        (and
          (<= 0 $q1@1029@01)
          (<
            $q1@1029@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))))))
      (and
        (<= 0 $q1@1029@01)
        (<
          $q1@1029@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
    $q1@1029@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1872@11@1872@542-aux|)))
(assert (forall (($q1@1029@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@1029@01)
      (<
        $q1@1029@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1)))))
    (forall (($q2@1030@01 Int)) (!
      (=>
        (and
          (<= 0 $q2@1030@01)
          (<
            $q2@1030@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
                $q1@1029@01))))
        (and
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
                $q1@1029@01)
              $q2@1030@01))
          (<=
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
                $q1@1029@01)
              $q2@1030@01)
            170141183460469231731687303715884105727)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
          $q1@1029@01)
        $q2@1030@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1872@166@1872@541|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1009@01 1))
    $q1@1029@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1872@11@1872@542|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
(declare-const $t@1031@01 $Snap)
(assert (= $t@1031@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(assert (=
  (Seq_length
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2)))
  2))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $t@1032@01 $Snap)
(assert (= $t@1032@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $q3@1033@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 715 | !(0 <= $q3@1033@01) | live]
; [else-branch: 715 | 0 <= $q3@1033@01 | live]
(push) ; 5
; [then-branch: 715 | !(0 <= $q3@1033@01)]
(assert (not (<= 0 $q3@1033@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 715 | 0 <= $q3@1033@01]
(assert (<= 0 $q3@1033@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1033@01) (not (<= 0 $q3@1033@01))))
(push) ; 4
; [then-branch: 716 | 0 <= $q3@1033@01 && $q3@1033@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))| | live]
; [else-branch: 716 | !(0 <= $q3@1033@01 && $q3@1033@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))|) | live]
(push) ; 5
; [then-branch: 716 | 0 <= $q3@1033@01 && $q3@1033@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))|]
(assert (and
  (<= 0 $q3@1033@01)
  (<
    $q3@1033@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 6
(assert (not (>= $q3@1033@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 716 | !(0 <= $q3@1033@01 && $q3@1033@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1033@01)
    (<
      $q3@1033@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1033@01)
      (<
        $q3@1033@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))))))
  (and
    (<= 0 $q3@1033@01)
    (<
      $q3@1033@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1033@01 Int)) (!
  (and
    (or (<= 0 $q3@1033@01) (not (<= 0 $q3@1033@01)))
    (or
      (not
        (and
          (<= 0 $q3@1033@01)
          (<
            $q3@1033@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))))))
      (and
        (<= 0 $q3@1033@01)
        (<
          $q3@1033@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
    $q3@1033@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1874@11@1874@242-aux|)))
(assert (forall (($q3@1033@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1033@01)
      (<
        $q3@1033@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
          $q3@1033@01))
      2))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
    $q3@1033@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1874@11@1874@242|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==
;       2))
(declare-const $t@1034@01 $Snap)
(assert (= $t@1034@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2))
(declare-const $q3@1035@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 717 | !(0 <= $q3@1035@01) | live]
; [else-branch: 717 | 0 <= $q3@1035@01 | live]
(push) ; 5
; [then-branch: 717 | !(0 <= $q3@1035@01)]
(assert (not (<= 0 $q3@1035@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 717 | 0 <= $q3@1035@01]
(assert (<= 0 $q3@1035@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1035@01) (not (<= 0 $q3@1035@01))))
(push) ; 4
; [then-branch: 718 | 0 <= $q3@1035@01 && $q3@1035@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))| | live]
; [else-branch: 718 | !(0 <= $q3@1035@01 && $q3@1035@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))|) | live]
(push) ; 5
; [then-branch: 718 | 0 <= $q3@1035@01 && $q3@1035@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))|]
(assert (and
  (<= 0 $q3@1035@01)
  (<
    $q3@1035@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
(declare-const $q4@1036@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 719 | !(0 <= $q4@1036@01) | live]
; [else-branch: 719 | 0 <= $q4@1036@01 | live]
(push) ; 8
; [then-branch: 719 | !(0 <= $q4@1036@01)]
(assert (not (<= 0 $q4@1036@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 719 | 0 <= $q4@1036@01]
(assert (<= 0 $q4@1036@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1035@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@1036@01) (not (<= 0 $q4@1036@01))))
(push) ; 7
; [then-branch: 720 | 0 <= $q4@1036@01 && $q4@1036@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))[$q3@1035@01]| | live]
; [else-branch: 720 | !(0 <= $q4@1036@01 && $q4@1036@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))[$q3@1035@01]|) | live]
(push) ; 8
; [then-branch: 720 | 0 <= $q4@1036@01 && $q4@1036@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))[$q3@1035@01]|]
(assert (and
  (<= 0 $q4@1036@01)
  (<
    $q4@1036@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
        $q3@1035@01)))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1035@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q4@1036@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 720 | !(0 <= $q4@1036@01 && $q4@1036@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))[$q3@1035@01]|)]
(assert (not
  (and
    (<= 0 $q4@1036@01)
    (<
      $q4@1036@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
          $q3@1035@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@1036@01)
      (<
        $q4@1036@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
            $q3@1035@01)))))
  (and
    (<= 0 $q4@1036@01)
    (<
      $q4@1036@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
          $q3@1035@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1036@01 Int)) (!
  (and
    (or (<= 0 $q4@1036@01) (not (<= 0 $q4@1036@01)))
    (or
      (not
        (and
          (<= 0 $q4@1036@01)
          (<
            $q4@1036@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                $q3@1035@01)))))
      (and
        (<= 0 $q4@1036@01)
        (<
          $q4@1036@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
              $q3@1035@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
      $q3@1035@01)
    $q4@1036@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1875@176@1875@422-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 718 | !(0 <= $q3@1035@01 && $q3@1035@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1035@01)
    (<
      $q3@1035@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@1035@01)
    (<
      $q3@1035@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2)))))
  (and
    (<= 0 $q3@1035@01)
    (<
      $q3@1035@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))))
    (forall (($q4@1036@01 Int)) (!
      (and
        (or (<= 0 $q4@1036@01) (not (<= 0 $q4@1036@01)))
        (or
          (not
            (and
              (<= 0 $q4@1036@01)
              (<
                $q4@1036@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                    $q3@1035@01)))))
          (and
            (<= 0 $q4@1036@01)
            (<
              $q4@1036@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                  $q3@1035@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
          $q3@1035@01)
        $q4@1036@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1875@176@1875@422-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1035@01)
      (<
        $q3@1035@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))))))
  (and
    (<= 0 $q3@1035@01)
    (<
      $q3@1035@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1035@01 Int)) (!
  (and
    (or (<= 0 $q3@1035@01) (not (<= 0 $q3@1035@01)))
    (=>
      (and
        (<= 0 $q3@1035@01)
        (<
          $q3@1035@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2)))))
      (and
        (<= 0 $q3@1035@01)
        (<
          $q3@1035@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))))
        (forall (($q4@1036@01 Int)) (!
          (and
            (or (<= 0 $q4@1036@01) (not (<= 0 $q4@1036@01)))
            (or
              (not
                (and
                  (<= 0 $q4@1036@01)
                  (<
                    $q4@1036@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                        $q3@1035@01)))))
              (and
                (<= 0 $q4@1036@01)
                (<
                  $q4@1036@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                      $q3@1035@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
              $q3@1035@01)
            $q4@1036@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1875@176@1875@422-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@1035@01)
          (<
            $q3@1035@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))))))
      (and
        (<= 0 $q3@1035@01)
        (<
          $q3@1035@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
    $q3@1035@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1875@11@1875@423-aux|)))
(assert (forall (($q3@1035@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1035@01)
      (<
        $q3@1035@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2)))))
    (forall (($q4@1036@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@1036@01)
          (<
            $q4@1036@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                $q3@1035@01))))
        (=
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                $q3@1035@01)
              $q4@1036@01))
          2))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
          $q3@1035@01)
        $q4@1036@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1875@176@1875@422|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
    $q3@1035@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1875@11@1875@423|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       (forall $q5: Int ::
;         { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] }
;         0 <= $q5 &&
;         $q5 <
;         |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==>
;         -170141183460469231731687303715884105728 <=
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] &&
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <=
;         170141183460469231731687303715884105727)))
(declare-const $t@1037@01 $Snap)
(assert (= $t@1037@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)))
(declare-const $q3@1038@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 721 | !(0 <= $q3@1038@01) | live]
; [else-branch: 721 | 0 <= $q3@1038@01 | live]
(push) ; 5
; [then-branch: 721 | !(0 <= $q3@1038@01)]
(assert (not (<= 0 $q3@1038@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 721 | 0 <= $q3@1038@01]
(assert (<= 0 $q3@1038@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1038@01) (not (<= 0 $q3@1038@01))))
(push) ; 4
; [then-branch: 722 | 0 <= $q3@1038@01 && $q3@1038@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))| | live]
; [else-branch: 722 | !(0 <= $q3@1038@01 && $q3@1038@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))|) | live]
(push) ; 5
; [then-branch: 722 | 0 <= $q3@1038@01 && $q3@1038@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))|]
(assert (and
  (<= 0 $q3@1038@01)
  (<
    $q3@1038@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
(declare-const $q4@1039@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 723 | !(0 <= $q4@1039@01) | live]
; [else-branch: 723 | 0 <= $q4@1039@01 | live]
(push) ; 8
; [then-branch: 723 | !(0 <= $q4@1039@01)]
(assert (not (<= 0 $q4@1039@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 723 | 0 <= $q4@1039@01]
(assert (<= 0 $q4@1039@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1038@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@1039@01) (not (<= 0 $q4@1039@01))))
(push) ; 7
; [then-branch: 724 | 0 <= $q4@1039@01 && $q4@1039@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))[$q3@1038@01]| | live]
; [else-branch: 724 | !(0 <= $q4@1039@01 && $q4@1039@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))[$q3@1038@01]|) | live]
(push) ; 8
; [then-branch: 724 | 0 <= $q4@1039@01 && $q4@1039@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))[$q3@1038@01]|]
(assert (and
  (<= 0 $q4@1039@01)
  (<
    $q4@1039@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
        $q3@1038@01)))))
; [eval] (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
(declare-const $q5@1040@01 Int)
(push) ; 9
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] 0 <= $q5
(push) ; 10
; [then-branch: 725 | !(0 <= $q5@1040@01) | live]
; [else-branch: 725 | 0 <= $q5@1040@01 | live]
(push) ; 11
; [then-branch: 725 | !(0 <= $q5@1040@01)]
(assert (not (<= 0 $q5@1040@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 725 | 0 <= $q5@1040@01]
(assert (<= 0 $q5@1040@01))
; [eval] $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@1038@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@1039@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q5@1040@01) (not (<= 0 $q5@1040@01))))
(push) ; 10
; [then-branch: 726 | 0 <= $q5@1040@01 && $q5@1040@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))[$q3@1038@01][$q4@1039@01]| | live]
; [else-branch: 726 | !(0 <= $q5@1040@01 && $q5@1040@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))[$q3@1038@01][$q4@1039@01]|) | live]
(push) ; 11
; [then-branch: 726 | 0 <= $q5@1040@01 && $q5@1040@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))[$q3@1038@01][$q4@1039@01]|]
(assert (and
  (<= 0 $q5@1040@01)
  (<
    $q5@1040@01
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
          $q3@1038@01)
        $q4@1039@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@1038@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@1039@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q5@1040@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 727 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))[$q3@1038@01][$q4@1039@01][$q5@1040@01]) | live]
; [else-branch: 727 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))[$q3@1038@01][$q4@1039@01][$q5@1040@01] | live]
(push) ; 13
; [then-branch: 727 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))[$q3@1038@01][$q4@1039@01][$q5@1040@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
          $q3@1038@01)
        $q4@1039@01)
      $q5@1040@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 727 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))[$q3@1038@01][$q4@1039@01][$q5@1040@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
        $q3@1038@01)
      $q4@1039@01)
    $q5@1040@01)))
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 14
(assert (not (>= $q3@1038@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q4@1039@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q5@1040@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
          $q3@1038@01)
        $q4@1039@01)
      $q5@1040@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
            $q3@1038@01)
          $q4@1039@01)
        $q5@1040@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 726 | !(0 <= $q5@1040@01 && $q5@1040@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))[$q3@1038@01][$q4@1039@01]|)]
(assert (not
  (and
    (<= 0 $q5@1040@01)
    (<
      $q5@1040@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
            $q3@1038@01)
          $q4@1039@01))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q5@1040@01)
    (<
      $q5@1040@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
            $q3@1038@01)
          $q4@1039@01))))
  (and
    (<= 0 $q5@1040@01)
    (<
      $q5@1040@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
            $q3@1038@01)
          $q4@1039@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
              $q3@1038@01)
            $q4@1039@01)
          $q5@1040@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                $q3@1038@01)
              $q4@1039@01)
            $q5@1040@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q5@1040@01)
      (<
        $q5@1040@01
        (Seq_length
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
              $q3@1038@01)
            $q4@1039@01)))))
  (and
    (<= 0 $q5@1040@01)
    (<
      $q5@1040@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
            $q3@1038@01)
          $q4@1039@01))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@1040@01 Int)) (!
  (and
    (or (<= 0 $q5@1040@01) (not (<= 0 $q5@1040@01)))
    (=>
      (and
        (<= 0 $q5@1040@01)
        (<
          $q5@1040@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                $q3@1038@01)
              $q4@1039@01))))
      (and
        (<= 0 $q5@1040@01)
        (<
          $q5@1040@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                $q3@1038@01)
              $q4@1039@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                  $q3@1038@01)
                $q4@1039@01)
              $q5@1040@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                    $q3@1038@01)
                  $q4@1039@01)
                $q5@1040@01))))))
    (or
      (not
        (and
          (<= 0 $q5@1040@01)
          (<
            $q5@1040@01
            (Seq_length
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                  $q3@1038@01)
                $q4@1039@01)))))
      (and
        (<= 0 $q5@1040@01)
        (<
          $q5@1040@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                $q3@1038@01)
              $q4@1039@01))))))
  :pattern ((Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
        $q3@1038@01)
      $q4@1039@01)
    $q5@1040@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1876@351@1876@766-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 724 | !(0 <= $q4@1039@01 && $q4@1039@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))[$q3@1038@01]|)]
(assert (not
  (and
    (<= 0 $q4@1039@01)
    (<
      $q4@1039@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
          $q3@1038@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q4@1039@01)
    (<
      $q4@1039@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
          $q3@1038@01))))
  (and
    (<= 0 $q4@1039@01)
    (<
      $q4@1039@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
          $q3@1038@01)))
    (forall (($q5@1040@01 Int)) (!
      (and
        (or (<= 0 $q5@1040@01) (not (<= 0 $q5@1040@01)))
        (=>
          (and
            (<= 0 $q5@1040@01)
            (<
              $q5@1040@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                    $q3@1038@01)
                  $q4@1039@01))))
          (and
            (<= 0 $q5@1040@01)
            (<
              $q5@1040@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                    $q3@1038@01)
                  $q4@1039@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                      $q3@1038@01)
                    $q4@1039@01)
                  $q5@1040@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                        $q3@1038@01)
                      $q4@1039@01)
                    $q5@1040@01))))))
        (or
          (not
            (and
              (<= 0 $q5@1040@01)
              (<
                $q5@1040@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                      $q3@1038@01)
                    $q4@1039@01)))))
          (and
            (<= 0 $q5@1040@01)
            (<
              $q5@1040@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                    $q3@1038@01)
                  $q4@1039@01))))))
      :pattern ((Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
            $q3@1038@01)
          $q4@1039@01)
        $q5@1040@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1876@351@1876@766-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@1039@01)
      (<
        $q4@1039@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
            $q3@1038@01)))))
  (and
    (<= 0 $q4@1039@01)
    (<
      $q4@1039@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
          $q3@1038@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1039@01 Int)) (!
  (and
    (or (<= 0 $q4@1039@01) (not (<= 0 $q4@1039@01)))
    (=>
      (and
        (<= 0 $q4@1039@01)
        (<
          $q4@1039@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
              $q3@1038@01))))
      (and
        (<= 0 $q4@1039@01)
        (<
          $q4@1039@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
              $q3@1038@01)))
        (forall (($q5@1040@01 Int)) (!
          (and
            (or (<= 0 $q5@1040@01) (not (<= 0 $q5@1040@01)))
            (=>
              (and
                (<= 0 $q5@1040@01)
                (<
                  $q5@1040@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                        $q3@1038@01)
                      $q4@1039@01))))
              (and
                (<= 0 $q5@1040@01)
                (<
                  $q5@1040@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                        $q3@1038@01)
                      $q4@1039@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                          $q3@1038@01)
                        $q4@1039@01)
                      $q5@1040@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                            $q3@1038@01)
                          $q4@1039@01)
                        $q5@1040@01))))))
            (or
              (not
                (and
                  (<= 0 $q5@1040@01)
                  (<
                    $q5@1040@01
                    (Seq_length
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                          $q3@1038@01)
                        $q4@1039@01)))))
              (and
                (<= 0 $q5@1040@01)
                (<
                  $q5@1040@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                        $q3@1038@01)
                      $q4@1039@01))))))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                $q3@1038@01)
              $q4@1039@01)
            $q5@1040@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1876@351@1876@766-aux|))))
    (or
      (not
        (and
          (<= 0 $q4@1039@01)
          (<
            $q4@1039@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                $q3@1038@01)))))
      (and
        (<= 0 $q4@1039@01)
        (<
          $q4@1039@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
              $q3@1038@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
      $q3@1038@01)
    $q4@1039@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1876@176@1876@767-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 722 | !(0 <= $q3@1038@01 && $q3@1038@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1009@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1038@01)
    (<
      $q3@1038@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@1038@01)
    (<
      $q3@1038@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2)))))
  (and
    (<= 0 $q3@1038@01)
    (<
      $q3@1038@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))))
    (forall (($q4@1039@01 Int)) (!
      (and
        (or (<= 0 $q4@1039@01) (not (<= 0 $q4@1039@01)))
        (=>
          (and
            (<= 0 $q4@1039@01)
            (<
              $q4@1039@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                  $q3@1038@01))))
          (and
            (<= 0 $q4@1039@01)
            (<
              $q4@1039@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                  $q3@1038@01)))
            (forall (($q5@1040@01 Int)) (!
              (and
                (or (<= 0 $q5@1040@01) (not (<= 0 $q5@1040@01)))
                (=>
                  (and
                    (<= 0 $q5@1040@01)
                    (<
                      $q5@1040@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                            $q3@1038@01)
                          $q4@1039@01))))
                  (and
                    (<= 0 $q5@1040@01)
                    (<
                      $q5@1040@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                            $q3@1038@01)
                          $q4@1039@01)))
                    (or
                      (<=
                        (- 0 170141183460469231731687303715884105728)
                        (Seq_index
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                              $q3@1038@01)
                            $q4@1039@01)
                          $q5@1040@01))
                      (not
                        (<=
                          (- 0 170141183460469231731687303715884105728)
                          (Seq_index
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                                $q3@1038@01)
                              $q4@1039@01)
                            $q5@1040@01))))))
                (or
                  (not
                    (and
                      (<= 0 $q5@1040@01)
                      (<
                        $q5@1040@01
                        (Seq_length
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                              $q3@1038@01)
                            $q4@1039@01)))))
                  (and
                    (<= 0 $q5@1040@01)
                    (<
                      $q5@1040@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                            $q3@1038@01)
                          $q4@1039@01))))))
              :pattern ((Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                    $q3@1038@01)
                  $q4@1039@01)
                $q5@1040@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1876@351@1876@766-aux|))))
        (or
          (not
            (and
              (<= 0 $q4@1039@01)
              (<
                $q4@1039@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                    $q3@1038@01)))))
          (and
            (<= 0 $q4@1039@01)
            (<
              $q4@1039@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                  $q3@1038@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
          $q3@1038@01)
        $q4@1039@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1876@176@1876@767-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1038@01)
      (<
        $q3@1038@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))))))
  (and
    (<= 0 $q3@1038@01)
    (<
      $q3@1038@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1038@01 Int)) (!
  (and
    (or (<= 0 $q3@1038@01) (not (<= 0 $q3@1038@01)))
    (=>
      (and
        (<= 0 $q3@1038@01)
        (<
          $q3@1038@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2)))))
      (and
        (<= 0 $q3@1038@01)
        (<
          $q3@1038@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))))
        (forall (($q4@1039@01 Int)) (!
          (and
            (or (<= 0 $q4@1039@01) (not (<= 0 $q4@1039@01)))
            (=>
              (and
                (<= 0 $q4@1039@01)
                (<
                  $q4@1039@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                      $q3@1038@01))))
              (and
                (<= 0 $q4@1039@01)
                (<
                  $q4@1039@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                      $q3@1038@01)))
                (forall (($q5@1040@01 Int)) (!
                  (and
                    (or (<= 0 $q5@1040@01) (not (<= 0 $q5@1040@01)))
                    (=>
                      (and
                        (<= 0 $q5@1040@01)
                        (<
                          $q5@1040@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                                $q3@1038@01)
                              $q4@1039@01))))
                      (and
                        (<= 0 $q5@1040@01)
                        (<
                          $q5@1040@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                                $q3@1038@01)
                              $q4@1039@01)))
                        (or
                          (<=
                            (- 0 170141183460469231731687303715884105728)
                            (Seq_index
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                                  $q3@1038@01)
                                $q4@1039@01)
                              $q5@1040@01))
                          (not
                            (<=
                              (- 0 170141183460469231731687303715884105728)
                              (Seq_index
                                (Seq_index
                                  (Seq_index
                                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                                    $q3@1038@01)
                                  $q4@1039@01)
                                $q5@1040@01))))))
                    (or
                      (not
                        (and
                          (<= 0 $q5@1040@01)
                          (<
                            $q5@1040@01
                            (Seq_length
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                                  $q3@1038@01)
                                $q4@1039@01)))))
                      (and
                        (<= 0 $q5@1040@01)
                        (<
                          $q5@1040@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                                $q3@1038@01)
                              $q4@1039@01))))))
                  :pattern ((Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                        $q3@1038@01)
                      $q4@1039@01)
                    $q5@1040@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1876@351@1876@766-aux|))))
            (or
              (not
                (and
                  (<= 0 $q4@1039@01)
                  (<
                    $q4@1039@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                        $q3@1038@01)))))
              (and
                (<= 0 $q4@1039@01)
                (<
                  $q4@1039@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                      $q3@1038@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
              $q3@1038@01)
            $q4@1039@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1876@176@1876@767-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@1038@01)
          (<
            $q3@1038@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))))))
      (and
        (<= 0 $q3@1038@01)
        (<
          $q3@1038@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
    $q3@1038@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1876@11@1876@768-aux|)))
(assert (forall (($q3@1038@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1038@01)
      (<
        $q3@1038@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2)))))
    (forall (($q4@1039@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@1039@01)
          (<
            $q4@1039@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                $q3@1038@01))))
        (forall (($q5@1040@01 Int)) (!
          (=>
            (and
              (<= 0 $q5@1040@01)
              (<
                $q5@1040@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                      $q3@1038@01)
                    $q4@1039@01))))
            (and
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                      $q3@1038@01)
                    $q4@1039@01)
                  $q5@1040@01))
              (<=
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                      $q3@1038@01)
                    $q4@1039@01)
                  $q5@1040@01)
                170141183460469231731687303715884105727)))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
                $q3@1038@01)
              $q4@1039@01)
            $q5@1040@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1876@351@1876@766|)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
          $q3@1038@01)
        $q4@1039@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1876@176@1876@767|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1009@01 2))
    $q3@1038@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1876@11@1876@768|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
(declare-const $t@1041@01 $Snap)
(assert (= $t@1041@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3))) 1000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] }
;     0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] &&
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <=
;     170141183460469231731687303715884105727)
(declare-const $t@1042@01 $Snap)
(assert (= $t@1042@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] } 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727)
(declare-const $q6@1043@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] 0 <= $q6
(push) ; 4
; [then-branch: 728 | !(0 <= $q6@1043@01) | live]
; [else-branch: 728 | 0 <= $q6@1043@01 | live]
(push) ; 5
; [then-branch: 728 | !(0 <= $q6@1043@01)]
(assert (not (<= 0 $q6@1043@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 728 | 0 <= $q6@1043@01]
(assert (<= 0 $q6@1043@01))
; [eval] $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q6@1043@01) (not (<= 0 $q6@1043@01))))
(push) ; 4
; [then-branch: 729 | 0 <= $q6@1043@01 && $q6@1043@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1009@01, 3))| | live]
; [else-branch: 729 | !(0 <= $q6@1043@01 && $q6@1043@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1009@01, 3))|) | live]
(push) ; 5
; [then-branch: 729 | 0 <= $q6@1043@01 && $q6@1043@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1009@01, 3))|]
(assert (and
  (<= 0 $q6@1043@01)
  (<
    $q6@1043@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (>= $q6@1043@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 730 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1009@01, 3))[$q6@1043@01]) | live]
; [else-branch: 730 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1009@01, 3))[$q6@1043@01] | live]
(push) ; 7
; [then-branch: 730 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1009@01, 3))[$q6@1043@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3))
      $q6@1043@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 730 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1009@01, 3))[$q6@1043@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3))
    $q6@1043@01)))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (>= $q6@1043@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3))
      $q6@1043@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3))
        $q6@1043@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 729 | !(0 <= $q6@1043@01 && $q6@1043@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1009@01, 3))|)]
(assert (not
  (and
    (<= 0 $q6@1043@01)
    (<
      $q6@1043@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q6@1043@01)
    (<
      $q6@1043@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3)))))
  (and
    (<= 0 $q6@1043@01)
    (<
      $q6@1043@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3))
          $q6@1043@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3))
            $q6@1043@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q6@1043@01)
      (<
        $q6@1043@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3))))))
  (and
    (<= 0 $q6@1043@01)
    (<
      $q6@1043@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1043@01 Int)) (!
  (and
    (or (<= 0 $q6@1043@01) (not (<= 0 $q6@1043@01)))
    (=>
      (and
        (<= 0 $q6@1043@01)
        (<
          $q6@1043@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3)))))
      (and
        (<= 0 $q6@1043@01)
        (<
          $q6@1043@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3))
              $q6@1043@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3))
                $q6@1043@01))))))
    (or
      (not
        (and
          (<= 0 $q6@1043@01)
          (<
            $q6@1043@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3))))))
      (and
        (<= 0 $q6@1043@01)
        (<
          $q6@1043@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3))
    $q6@1043@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1878@11@1878@346-aux|)))
(assert (forall (($q6@1043@01 Int)) (!
  (=>
    (and
      (<= 0 $q6@1043@01)
      (<
        $q6@1043@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3))
          $q6@1043@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3))
          $q6@1043@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3))
    $q6@1043@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1878@11@1878@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==
;     10)
(declare-const $t@1044@01 $Snap)
(assert (= $t@1044@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10)
(declare-const $q7@1045@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1045@01 Int)) (!
  (=
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1045@01))
    10)
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1045@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1879@11@1879@209|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     (forall $q8: Int ::
;       { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] }
;       0 <= $q8 &&
;       $q8 <
;       |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==>
;       -170141183460469231731687303715884105728 <=
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] &&
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <=
;       170141183460469231731687303715884105727))
(declare-const $t@1046@01 $Snap)
(assert (= $t@1046@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727))
(declare-const $q7@1047@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727)
(declare-const $q8@1048@01 Int)
(push) ; 4
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] 0 <= $q8
(push) ; 5
; [then-branch: 731 | !(0 <= $q8@1048@01) | live]
; [else-branch: 731 | 0 <= $q8@1048@01 | live]
(push) ; 6
; [then-branch: 731 | !(0 <= $q8@1048@01)]
(assert (not (<= 0 $q8@1048@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 731 | 0 <= $q8@1048@01]
(assert (<= 0 $q8@1048@01))
; [eval] $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q8@1048@01) (not (<= 0 $q8@1048@01))))
(push) ; 5
; [then-branch: 732 | 0 <= $q8@1048@01 && $q8@1048@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1009@01, 4)), $q7@1047@01)| | live]
; [else-branch: 732 | !(0 <= $q8@1048@01 && $q8@1048@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1009@01, 4)), $q7@1047@01)|) | live]
(push) ; 6
; [then-branch: 732 | 0 <= $q8@1048@01 && $q8@1048@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1009@01, 4)), $q7@1047@01)|]
(assert (and
  (<= 0 $q8@1048@01)
  (<
    $q8@1048@01
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] -170141183460469231731687303715884105728
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 7
(assert (not (>= $q8@1048@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 733 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1009@01, 4)), $q7@1047@01)[$q8@1048@01]) | live]
; [else-branch: 733 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1009@01, 4)), $q7@1047@01)[$q8@1048@01] | live]
(push) ; 8
; [then-branch: 733 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1009@01, 4)), $q7@1047@01)[$q8@1048@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01)
      $q8@1048@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 733 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1009@01, 4)), $q7@1047@01)[$q8@1048@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01)
    $q8@1048@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 9
(assert (not (>= $q8@1048@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01)
      $q8@1048@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01)
        $q8@1048@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 732 | !(0 <= $q8@1048@01 && $q8@1048@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1009@01, 4)), $q7@1047@01)|)]
(assert (not
  (and
    (<= 0 $q8@1048@01)
    (<
      $q8@1048@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q8@1048@01)
    (<
      $q8@1048@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01))))
  (and
    (<= 0 $q8@1048@01)
    (<
      $q8@1048@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01)
          $q8@1048@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01)
            $q8@1048@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q8@1048@01)
      (<
        $q8@1048@01
        (Seq_length
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01)))))
  (and
    (<= 0 $q8@1048@01)
    (<
      $q8@1048@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q8@1048@01 Int)) (!
  (and
    (or (<= 0 $q8@1048@01) (not (<= 0 $q8@1048@01)))
    (=>
      (and
        (<= 0 $q8@1048@01)
        (<
          $q8@1048@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01))))
      (and
        (<= 0 $q8@1048@01)
        (<
          $q8@1048@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01)
              $q8@1048@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01)
                $q8@1048@01))))))
    (or
      (not
        (and
          (<= 0 $q8@1048@01)
          (<
            $q8@1048@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01)))))
      (and
        (<= 0 $q8@1048@01)
        (<
          $q8@1048@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01))))))
  :pattern ((Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01)
    $q8@1048@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1880@119@1880@606-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1047@01 Int)) (!
  (forall (($q8@1048@01 Int)) (!
    (and
      (or (<= 0 $q8@1048@01) (not (<= 0 $q8@1048@01)))
      (=>
        (and
          (<= 0 $q8@1048@01)
          (<
            $q8@1048@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01))))
        (and
          (<= 0 $q8@1048@01)
          (<
            $q8@1048@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01)))
          (or
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01)
                $q8@1048@01))
            (not
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01)
                  $q8@1048@01))))))
      (or
        (not
          (and
            (<= 0 $q8@1048@01)
            (<
              $q8@1048@01
              (Seq_length
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01)))))
        (and
          (<= 0 $q8@1048@01)
          (<
            $q8@1048@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01))))))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01)
      $q8@1048@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1880@119@1880@606-aux|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1880@11@1880@607-aux|)))
(assert (forall (($q7@1047@01 Int)) (!
  (forall (($q8@1048@01 Int)) (!
    (=>
      (and
        (<= 0 $q8@1048@01)
        (<
          $q8@1048@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01))))
      (and
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01)
            $q8@1048@01))
        (<=
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01)
            $q8@1048@01)
          170141183460469231731687303715884105727)))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01)
      $q8@1048@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1880@119@1880@606|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1009@01 4)) $q7@1047@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1880@11@1880@607|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1049@01 $Snap)
(assert (= $t@1049@01 ($Snap.combine ($Snap.first $t@1049@01) ($Snap.second $t@1049@01))))
(assert (= ($Snap.first $t@1049@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1009@01 5))))
(assert (= ($Snap.second $t@1049@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1009@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@1050@01 $Snap)
(assert (= $t@1050@01 ($Snap.combine ($Snap.first $t@1050@01) ($Snap.second $t@1050@01))))
(assert (= ($Snap.first $t@1050@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@1009@01 6))))
(assert (= ($Snap.second $t@1050@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1009@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1051@01 $Snap)
(assert (= $t@1051@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q9@1052@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 734 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1009@01, 8)), $q9@1052@01)) | live]
; [else-branch: 734 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1009@01, 8)), $q9@1052@01) | live]
(push) ; 5
; [then-branch: 734 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1009@01, 8)), $q9@1052@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 8)) $q9@1052@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 734 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1009@01, 8)), $q9@1052@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 8)) $q9@1052@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 8)) $q9@1052@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 8)) $q9@1052@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@1052@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 8)) $q9@1052@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 8)) $q9@1052@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 8)) $q9@1052@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1883@11@1883@345-aux|)))
(assert (forall (($q9@1052@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 8)) $q9@1052@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 8)) $q9@1052@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 8)) $q9@1052@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1883@11@1883@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@1053@01 $Snap)
(assert (= $t@1053@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q9@1054@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@1054@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 8)) $q9@1054@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 8)) $q9@1054@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1884@11@1884@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1055@01 $Snap)
(assert (= $t@1055@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q10@1056@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 735 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1009@01, 9)), $q10@1056@01)) | live]
; [else-branch: 735 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1009@01, 9)), $q10@1056@01) | live]
(push) ; 5
; [then-branch: 735 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1009@01, 9)), $q10@1056@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 9)) $q10@1056@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 735 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1009@01, 9)), $q10@1056@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 9)) $q10@1056@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 9)) $q10@1056@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 9)) $q10@1056@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@1056@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 9)) $q10@1056@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 9)) $q10@1056@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 9)) $q10@1056@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1885@11@1885@349-aux|)))
(assert (forall (($q10@1056@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 9)) $q10@1056@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 9)) $q10@1056@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 9)) $q10@1056@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1885@11@1885@349|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@1057@01 $Snap)
(assert (= $t@1057@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q10@1058@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@1058@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 9)) $q10@1058@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1009@01 9)) $q10@1058@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1886@11@1886@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@1059@01 $Snap)
(assert (= $t@1059@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1009@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1060@01 $Snap)
(assert (= $t@1060@01 ($Snap.combine ($Snap.first $t@1060@01) ($Snap.second $t@1060@01))))
(assert (= ($Snap.first $t@1060@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@1060@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <= $unwrap(l$i) &&
;   $unwrap(l$i) <= 170141183460469231731687303715884105727
(declare-const $t@1061@01 $Snap)
(assert (= $t@1061@01 ($Snap.combine ($Snap.first $t@1061@01) ($Snap.second $t@1061@01))))
(assert (= ($Snap.first $t@1061@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= $unwrap(l$i)
; [eval] -170141183460469231731687303715884105728
; [eval] $unwrap(l$i)
(assert (<= (- 0 170141183460469231731687303715884105728) ($unwrap<Int> l$i@1002@01)))
(assert (= ($Snap.second $t@1061@01) $Snap.unit))
; [eval] $unwrap(l$i) <= 170141183460469231731687303715884105727
; [eval] $unwrap(l$i)
(assert (<= ($unwrap<Int> l$i@1002@01) 170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1062@01 $Snap)
(assert (= $t@1062@01 ($Snap.combine ($Snap.first $t@1062@01) ($Snap.second $t@1062@01))))
(assert (= ($Snap.first $t@1062@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1006@01 0))))
(assert (= ($Snap.second $t@1062@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1006@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1063@01 $Snap)
(assert (= $t@1063@01 ($Snap.combine ($Snap.first $t@1063@01) ($Snap.second $t@1063@01))))
(assert (= ($Snap.first $t@1063@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1006@01 1))))
(assert (= ($Snap.second $t@1063@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1006@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1064@01 $Snap)
(assert (= $t@1064@01 ($Snap.combine ($Snap.first $t@1064@01) ($Snap.second $t@1064@01))))
(assert (= ($Snap.first $t@1064@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1006@01 2))))
(assert (= ($Snap.second $t@1064@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1006@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@1065@01 $Snap)
(assert (= $t@1065@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@1006@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1066@01 $Snap)
(assert (= $t@1066@01 ($Snap.combine ($Snap.first $t@1066@01) ($Snap.second $t@1066@01))))
(assert (= ($Snap.first $t@1066@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1006@01 4))))
(assert (= ($Snap.second $t@1066@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1006@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@1067@01 $Snap)
(assert (= $t@1067@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@1006@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1068@01 $Snap)
(assert (= $t@1068@01 ($Snap.combine ($Snap.first $t@1068@01) ($Snap.second $t@1068@01))))
(assert (= ($Snap.first $t@1068@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1005@01 0))))
(assert (= ($Snap.second $t@1068@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1005@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1069@01 $Snap)
(assert (= $t@1069@01 ($Snap.combine ($Snap.first $t@1069@01) ($Snap.second $t@1069@01))))
(assert (= ($Snap.first $t@1069@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1005@01 1))))
(assert (= ($Snap.second $t@1069@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1005@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1070@01 $Snap)
(assert (= $t@1070@01 ($Snap.combine ($Snap.first $t@1070@01) ($Snap.second $t@1070@01))))
(assert (= ($Snap.first $t@1070@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1005@01 2))))
(assert (= ($Snap.second $t@1070@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1005@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@1071@01 $Snap)
(assert (= $t@1071@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1005@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@1072@01 $Snap)
(assert (= $t@1072@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1005@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@1073@01 $Snap)
(assert (= $t@1073@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@1074@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc(self, 3)): Seq[Int])
(declare-const $t@1075@01 $Snap)
(assert (= $t@1075@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@1076@01 $Snap)
(assert (= $t@1076@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1005@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] !(0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 3)): Seq[Int])|)
; [eval] 0 <= $unwrap(l$i) && $unwrap(l$i) < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] 0 <= $unwrap(l$i)
; [eval] $unwrap(l$i)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 736 | !(0 <= $unwrap[Int](l$i@1002@01)) | live]
; [else-branch: 736 | 0 <= $unwrap[Int](l$i@1002@01) | live]
(push) ; 4
; [then-branch: 736 | !(0 <= $unwrap[Int](l$i@1002@01))]
(assert (not (<= 0 ($unwrap<Int> l$i@1002@01))))
(pop) ; 4
(push) ; 4
; [else-branch: 736 | 0 <= $unwrap[Int](l$i@1002@01)]
(assert (<= 0 ($unwrap<Int> l$i@1002@01)))
; [eval] $unwrap(l$i) < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] $unwrap(l$i)
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 ($unwrap<Int> l$i@1002@01)) (not (<= 0 ($unwrap<Int> l$i@1002@01)))))
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (<= 0 ($unwrap<Int> l$i@1002@01))
  (<
    ($unwrap<Int> l$i@1002@01)
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3)))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (and
    (<= 0 ($unwrap<Int> l$i@1002@01))
    (<
      ($unwrap<Int> l$i@1002@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3))))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 737 | !(0 <= $unwrap[Int](l$i@1002@01) && $unwrap[Int](l$i@1002@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@1009@01, 3))|) | live]
; [else-branch: 737 | 0 <= $unwrap[Int](l$i@1002@01) && $unwrap[Int](l$i@1002@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@1009@01, 3))| | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 737 | !(0 <= $unwrap[Int](l$i@1002@01) && $unwrap[Int](l$i@1002@01) < |$struct_get[Seq[Int]]($struct_loc[Int](self@1009@01, 3))|)]
(assert (not
  (and
    (<= 0 ($unwrap<Int> l$i@1002@01))
    (<
      ($unwrap<Int> l$i@1002@01)
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1009@01 3)))))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale $res == 0
; [eval] $res == 0
(push) ; 4
(assert (not (= l$havoc@1019@01 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $res == 0
(set-option :timeout 0)
(push) ; 4
(assert (not (= l$havoc@1019@01 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $res == 0
(set-option :timeout 0)
(push) ; 4
(assert (not (= l$havoc@1019@01 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $res == 0
(set-option :timeout 0)
(push) ; 4
(assert (not (= l$havoc@1019@01 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$set_zeros_fail ----------
(declare-const $succ@1077@01 Bool)
(declare-const $succ@1078@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@1079@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@1080@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@1081@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@1082@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@1083@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@1084@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@1085@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@1086@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@1087@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@1088@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@1089@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@1090@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@1091@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@1092@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@1093@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@1094@01 $Map<Int~_$Struct>)
; [exec]
; inhale |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
(declare-const $t@1095@01 $Snap)
(assert (= $t@1095@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 0))) 12))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] }
;     0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] &&
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <=
;     170141183460469231731687303715884105727)
(declare-const $t@1096@01 $Snap)
(assert (= $t@1096@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] } 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@1097@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 738 | !(0 <= $q0@1097@01) | live]
; [else-branch: 738 | 0 <= $q0@1097@01 | live]
(push) ; 5
; [then-branch: 738 | !(0 <= $q0@1097@01)]
(assert (not (<= 0 $q0@1097@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 738 | 0 <= $q0@1097@01]
(assert (<= 0 $q0@1097@01))
; [eval] $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@1097@01) (not (<= 0 $q0@1097@01))))
(push) ; 4
; [then-branch: 739 | 0 <= $q0@1097@01 && $q0@1097@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1083@01, 0))| | live]
; [else-branch: 739 | !(0 <= $q0@1097@01 && $q0@1097@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1083@01, 0))|) | live]
(push) ; 5
; [then-branch: 739 | 0 <= $q0@1097@01 && $q0@1097@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1083@01, 0))|]
(assert (and
  (<= 0 $q0@1097@01)
  (<
    $q0@1097@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 0))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (>= $q0@1097@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 740 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1083@01, 0))[$q0@1097@01]) | live]
; [else-branch: 740 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1083@01, 0))[$q0@1097@01] | live]
(push) ; 7
; [then-branch: 740 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1083@01, 0))[$q0@1097@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 0))
      $q0@1097@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 740 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1083@01, 0))[$q0@1097@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 0))
    $q0@1097@01)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (>= $q0@1097@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 0))
      $q0@1097@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 0))
        $q0@1097@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 739 | !(0 <= $q0@1097@01 && $q0@1097@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1083@01, 0))|)]
(assert (not
  (and
    (<= 0 $q0@1097@01)
    (<
      $q0@1097@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 0)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q0@1097@01)
    (<
      $q0@1097@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 0)))))
  (and
    (<= 0 $q0@1097@01)
    (<
      $q0@1097@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 0))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 0))
          $q0@1097@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 0))
            $q0@1097@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q0@1097@01)
      (<
        $q0@1097@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 0))))))
  (and
    (<= 0 $q0@1097@01)
    (<
      $q0@1097@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 0)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@1097@01 Int)) (!
  (and
    (or (<= 0 $q0@1097@01) (not (<= 0 $q0@1097@01)))
    (=>
      (and
        (<= 0 $q0@1097@01)
        (<
          $q0@1097@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 0)))))
      (and
        (<= 0 $q0@1097@01)
        (<
          $q0@1097@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 0))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 0))
              $q0@1097@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 0))
                $q0@1097@01))))))
    (or
      (not
        (and
          (<= 0 $q0@1097@01)
          (<
            $q0@1097@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 0))))))
      (and
        (<= 0 $q0@1097@01)
        (<
          $q0@1097@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 0)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 0))
    $q0@1097@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1970@11@1970@346-aux|)))
(assert (forall (($q0@1097@01 Int)) (!
  (=>
    (and
      (<= 0 $q0@1097@01)
      (<
        $q0@1097@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 0)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 0))
          $q0@1097@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 0))
          $q0@1097@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 0))
    $q0@1097@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1970@11@1970@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
(declare-const $t@1098@01 $Snap)
(assert (= $t@1098@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(assert (=
  (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1)))
  12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $t@1099@01 $Snap)
(assert (= $t@1099@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $q1@1100@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 741 | !(0 <= $q1@1100@01) | live]
; [else-branch: 741 | 0 <= $q1@1100@01 | live]
(push) ; 5
; [then-branch: 741 | !(0 <= $q1@1100@01)]
(assert (not (<= 0 $q1@1100@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 741 | 0 <= $q1@1100@01]
(assert (<= 0 $q1@1100@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@1100@01) (not (<= 0 $q1@1100@01))))
(push) ; 4
; [then-branch: 742 | 0 <= $q1@1100@01 && $q1@1100@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1083@01, 1))| | live]
; [else-branch: 742 | !(0 <= $q1@1100@01 && $q1@1100@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1083@01, 1))|) | live]
(push) ; 5
; [then-branch: 742 | 0 <= $q1@1100@01 && $q1@1100@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1083@01, 1))|]
(assert (and
  (<= 0 $q1@1100@01)
  (<
    $q1@1100@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))))))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 6
(assert (not (>= $q1@1100@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 742 | !(0 <= $q1@1100@01 && $q1@1100@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1083@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@1100@01)
    (<
      $q1@1100@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@1100@01)
      (<
        $q1@1100@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))))))
  (and
    (<= 0 $q1@1100@01)
    (<
      $q1@1100@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@1100@01 Int)) (!
  (and
    (or (<= 0 $q1@1100@01) (not (<= 0 $q1@1100@01)))
    (or
      (not
        (and
          (<= 0 $q1@1100@01)
          (<
            $q1@1100@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))))))
      (and
        (<= 0 $q1@1100@01)
        (<
          $q1@1100@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
    $q1@1100@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1972@11@1972@228-aux|)))
(assert (forall (($q1@1100@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@1100@01)
      (<
        $q1@1100@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
          $q1@1100@01))
      12))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
    $q1@1100@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1972@11@1972@228|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     (forall $q2: Int ::
;       { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] }
;       0 <= $q2 &&
;       $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==>
;       -170141183460469231731687303715884105728 <=
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] &&
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <=
;       170141183460469231731687303715884105727))
(declare-const $t@1101@01 $Snap)
(assert (= $t@1101@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727))
(declare-const $q1@1102@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 743 | !(0 <= $q1@1102@01) | live]
; [else-branch: 743 | 0 <= $q1@1102@01 | live]
(push) ; 5
; [then-branch: 743 | !(0 <= $q1@1102@01)]
(assert (not (<= 0 $q1@1102@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 743 | 0 <= $q1@1102@01]
(assert (<= 0 $q1@1102@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@1102@01) (not (<= 0 $q1@1102@01))))
(push) ; 4
; [then-branch: 744 | 0 <= $q1@1102@01 && $q1@1102@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1083@01, 1))| | live]
; [else-branch: 744 | !(0 <= $q1@1102@01 && $q1@1102@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1083@01, 1))|) | live]
(push) ; 5
; [then-branch: 744 | 0 <= $q1@1102@01 && $q1@1102@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1083@01, 1))|]
(assert (and
  (<= 0 $q1@1102@01)
  (<
    $q1@1102@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))))))
; [eval] (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
(declare-const $q2@1103@01 Int)
(push) ; 6
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] 0 <= $q2
(push) ; 7
; [then-branch: 745 | !(0 <= $q2@1103@01) | live]
; [else-branch: 745 | 0 <= $q2@1103@01 | live]
(push) ; 8
; [then-branch: 745 | !(0 <= $q2@1103@01)]
(assert (not (<= 0 $q2@1103@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 745 | 0 <= $q2@1103@01]
(assert (<= 0 $q2@1103@01))
; [eval] $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@1102@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q2@1103@01) (not (<= 0 $q2@1103@01))))
(push) ; 7
; [then-branch: 746 | 0 <= $q2@1103@01 && $q2@1103@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1083@01, 1))[$q1@1102@01]| | live]
; [else-branch: 746 | !(0 <= $q2@1103@01 && $q2@1103@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1083@01, 1))[$q1@1102@01]|) | live]
(push) ; 8
; [then-branch: 746 | 0 <= $q2@1103@01 && $q2@1103@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1083@01, 1))[$q1@1102@01]|]
(assert (and
  (<= 0 $q2@1103@01)
  (<
    $q2@1103@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
        $q1@1102@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@1102@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q2@1103@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 747 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1083@01, 1))[$q1@1102@01][$q2@1103@01]) | live]
; [else-branch: 747 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1083@01, 1))[$q1@1102@01][$q2@1103@01] | live]
(push) ; 10
; [then-branch: 747 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1083@01, 1))[$q1@1102@01][$q2@1103@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
        $q1@1102@01)
      $q2@1103@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 747 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1083@01, 1))[$q1@1102@01][$q2@1103@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
      $q1@1102@01)
    $q2@1103@01)))
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 11
(assert (not (>= $q1@1102@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= $q2@1103@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
        $q1@1102@01)
      $q2@1103@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
          $q1@1102@01)
        $q2@1103@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 746 | !(0 <= $q2@1103@01 && $q2@1103@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1083@01, 1))[$q1@1102@01]|)]
(assert (not
  (and
    (<= 0 $q2@1103@01)
    (<
      $q2@1103@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
          $q1@1102@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q2@1103@01)
    (<
      $q2@1103@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
          $q1@1102@01))))
  (and
    (<= 0 $q2@1103@01)
    (<
      $q2@1103@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
          $q1@1102@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
            $q1@1102@01)
          $q2@1103@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
              $q1@1102@01)
            $q2@1103@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q2@1103@01)
      (<
        $q2@1103@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
            $q1@1102@01)))))
  (and
    (<= 0 $q2@1103@01)
    (<
      $q2@1103@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
          $q1@1102@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@1103@01 Int)) (!
  (and
    (or (<= 0 $q2@1103@01) (not (<= 0 $q2@1103@01)))
    (=>
      (and
        (<= 0 $q2@1103@01)
        (<
          $q2@1103@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
              $q1@1102@01))))
      (and
        (<= 0 $q2@1103@01)
        (<
          $q2@1103@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
              $q1@1102@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
                $q1@1102@01)
              $q2@1103@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
                  $q1@1102@01)
                $q2@1103@01))))))
    (or
      (not
        (and
          (<= 0 $q2@1103@01)
          (<
            $q2@1103@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
                $q1@1102@01)))))
      (and
        (<= 0 $q2@1103@01)
        (<
          $q2@1103@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
              $q1@1102@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
      $q1@1102@01)
    $q2@1103@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1973@166@1973@541-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 744 | !(0 <= $q1@1102@01 && $q1@1102@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1083@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@1102@01)
    (<
      $q1@1102@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q1@1102@01)
    (<
      $q1@1102@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1)))))
  (and
    (<= 0 $q1@1102@01)
    (<
      $q1@1102@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))))
    (forall (($q2@1103@01 Int)) (!
      (and
        (or (<= 0 $q2@1103@01) (not (<= 0 $q2@1103@01)))
        (=>
          (and
            (<= 0 $q2@1103@01)
            (<
              $q2@1103@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
                  $q1@1102@01))))
          (and
            (<= 0 $q2@1103@01)
            (<
              $q2@1103@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
                  $q1@1102@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
                    $q1@1102@01)
                  $q2@1103@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
                      $q1@1102@01)
                    $q2@1103@01))))))
        (or
          (not
            (and
              (<= 0 $q2@1103@01)
              (<
                $q2@1103@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
                    $q1@1102@01)))))
          (and
            (<= 0 $q2@1103@01)
            (<
              $q2@1103@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
                  $q1@1102@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
          $q1@1102@01)
        $q2@1103@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1973@166@1973@541-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@1102@01)
      (<
        $q1@1102@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))))))
  (and
    (<= 0 $q1@1102@01)
    (<
      $q1@1102@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@1102@01 Int)) (!
  (and
    (or (<= 0 $q1@1102@01) (not (<= 0 $q1@1102@01)))
    (=>
      (and
        (<= 0 $q1@1102@01)
        (<
          $q1@1102@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1)))))
      (and
        (<= 0 $q1@1102@01)
        (<
          $q1@1102@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))))
        (forall (($q2@1103@01 Int)) (!
          (and
            (or (<= 0 $q2@1103@01) (not (<= 0 $q2@1103@01)))
            (=>
              (and
                (<= 0 $q2@1103@01)
                (<
                  $q2@1103@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
                      $q1@1102@01))))
              (and
                (<= 0 $q2@1103@01)
                (<
                  $q2@1103@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
                      $q1@1102@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
                        $q1@1102@01)
                      $q2@1103@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
                          $q1@1102@01)
                        $q2@1103@01))))))
            (or
              (not
                (and
                  (<= 0 $q2@1103@01)
                  (<
                    $q2@1103@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
                        $q1@1102@01)))))
              (and
                (<= 0 $q2@1103@01)
                (<
                  $q2@1103@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
                      $q1@1102@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
              $q1@1102@01)
            $q2@1103@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1973@166@1973@541-aux|))))
    (or
      (not
        (and
          (<= 0 $q1@1102@01)
          (<
            $q1@1102@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))))))
      (and
        (<= 0 $q1@1102@01)
        (<
          $q1@1102@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
    $q1@1102@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1973@11@1973@542-aux|)))
(assert (forall (($q1@1102@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@1102@01)
      (<
        $q1@1102@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1)))))
    (forall (($q2@1103@01 Int)) (!
      (=>
        (and
          (<= 0 $q2@1103@01)
          (<
            $q2@1103@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
                $q1@1102@01))))
        (and
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
                $q1@1102@01)
              $q2@1103@01))
          (<=
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
                $q1@1102@01)
              $q2@1103@01)
            170141183460469231731687303715884105727)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
          $q1@1102@01)
        $q2@1103@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1973@166@1973@541|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1083@01 1))
    $q1@1102@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1973@11@1973@542|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
(declare-const $t@1104@01 $Snap)
(assert (= $t@1104@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(assert (=
  (Seq_length
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2)))
  2))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $t@1105@01 $Snap)
(assert (= $t@1105@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $q3@1106@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 748 | !(0 <= $q3@1106@01) | live]
; [else-branch: 748 | 0 <= $q3@1106@01 | live]
(push) ; 5
; [then-branch: 748 | !(0 <= $q3@1106@01)]
(assert (not (<= 0 $q3@1106@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 748 | 0 <= $q3@1106@01]
(assert (<= 0 $q3@1106@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1106@01) (not (<= 0 $q3@1106@01))))
(push) ; 4
; [then-branch: 749 | 0 <= $q3@1106@01 && $q3@1106@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))| | live]
; [else-branch: 749 | !(0 <= $q3@1106@01 && $q3@1106@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))|) | live]
(push) ; 5
; [then-branch: 749 | 0 <= $q3@1106@01 && $q3@1106@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))|]
(assert (and
  (<= 0 $q3@1106@01)
  (<
    $q3@1106@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 6
(assert (not (>= $q3@1106@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 749 | !(0 <= $q3@1106@01 && $q3@1106@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1106@01)
    (<
      $q3@1106@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1106@01)
      (<
        $q3@1106@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))))))
  (and
    (<= 0 $q3@1106@01)
    (<
      $q3@1106@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1106@01 Int)) (!
  (and
    (or (<= 0 $q3@1106@01) (not (<= 0 $q3@1106@01)))
    (or
      (not
        (and
          (<= 0 $q3@1106@01)
          (<
            $q3@1106@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))))))
      (and
        (<= 0 $q3@1106@01)
        (<
          $q3@1106@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
    $q3@1106@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1975@11@1975@242-aux|)))
(assert (forall (($q3@1106@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1106@01)
      (<
        $q3@1106@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
          $q3@1106@01))
      2))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
    $q3@1106@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1975@11@1975@242|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==
;       2))
(declare-const $t@1107@01 $Snap)
(assert (= $t@1107@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2))
(declare-const $q3@1108@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 750 | !(0 <= $q3@1108@01) | live]
; [else-branch: 750 | 0 <= $q3@1108@01 | live]
(push) ; 5
; [then-branch: 750 | !(0 <= $q3@1108@01)]
(assert (not (<= 0 $q3@1108@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 750 | 0 <= $q3@1108@01]
(assert (<= 0 $q3@1108@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1108@01) (not (<= 0 $q3@1108@01))))
(push) ; 4
; [then-branch: 751 | 0 <= $q3@1108@01 && $q3@1108@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))| | live]
; [else-branch: 751 | !(0 <= $q3@1108@01 && $q3@1108@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))|) | live]
(push) ; 5
; [then-branch: 751 | 0 <= $q3@1108@01 && $q3@1108@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))|]
(assert (and
  (<= 0 $q3@1108@01)
  (<
    $q3@1108@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
(declare-const $q4@1109@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 752 | !(0 <= $q4@1109@01) | live]
; [else-branch: 752 | 0 <= $q4@1109@01 | live]
(push) ; 8
; [then-branch: 752 | !(0 <= $q4@1109@01)]
(assert (not (<= 0 $q4@1109@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 752 | 0 <= $q4@1109@01]
(assert (<= 0 $q4@1109@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1108@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@1109@01) (not (<= 0 $q4@1109@01))))
(push) ; 7
; [then-branch: 753 | 0 <= $q4@1109@01 && $q4@1109@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))[$q3@1108@01]| | live]
; [else-branch: 753 | !(0 <= $q4@1109@01 && $q4@1109@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))[$q3@1108@01]|) | live]
(push) ; 8
; [then-branch: 753 | 0 <= $q4@1109@01 && $q4@1109@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))[$q3@1108@01]|]
(assert (and
  (<= 0 $q4@1109@01)
  (<
    $q4@1109@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
        $q3@1108@01)))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1108@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q4@1109@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 753 | !(0 <= $q4@1109@01 && $q4@1109@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))[$q3@1108@01]|)]
(assert (not
  (and
    (<= 0 $q4@1109@01)
    (<
      $q4@1109@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
          $q3@1108@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@1109@01)
      (<
        $q4@1109@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
            $q3@1108@01)))))
  (and
    (<= 0 $q4@1109@01)
    (<
      $q4@1109@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
          $q3@1108@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1109@01 Int)) (!
  (and
    (or (<= 0 $q4@1109@01) (not (<= 0 $q4@1109@01)))
    (or
      (not
        (and
          (<= 0 $q4@1109@01)
          (<
            $q4@1109@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                $q3@1108@01)))))
      (and
        (<= 0 $q4@1109@01)
        (<
          $q4@1109@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
              $q3@1108@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
      $q3@1108@01)
    $q4@1109@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1976@176@1976@422-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 751 | !(0 <= $q3@1108@01 && $q3@1108@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1108@01)
    (<
      $q3@1108@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@1108@01)
    (<
      $q3@1108@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2)))))
  (and
    (<= 0 $q3@1108@01)
    (<
      $q3@1108@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))))
    (forall (($q4@1109@01 Int)) (!
      (and
        (or (<= 0 $q4@1109@01) (not (<= 0 $q4@1109@01)))
        (or
          (not
            (and
              (<= 0 $q4@1109@01)
              (<
                $q4@1109@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                    $q3@1108@01)))))
          (and
            (<= 0 $q4@1109@01)
            (<
              $q4@1109@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                  $q3@1108@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
          $q3@1108@01)
        $q4@1109@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1976@176@1976@422-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1108@01)
      (<
        $q3@1108@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))))))
  (and
    (<= 0 $q3@1108@01)
    (<
      $q3@1108@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1108@01 Int)) (!
  (and
    (or (<= 0 $q3@1108@01) (not (<= 0 $q3@1108@01)))
    (=>
      (and
        (<= 0 $q3@1108@01)
        (<
          $q3@1108@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2)))))
      (and
        (<= 0 $q3@1108@01)
        (<
          $q3@1108@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))))
        (forall (($q4@1109@01 Int)) (!
          (and
            (or (<= 0 $q4@1109@01) (not (<= 0 $q4@1109@01)))
            (or
              (not
                (and
                  (<= 0 $q4@1109@01)
                  (<
                    $q4@1109@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                        $q3@1108@01)))))
              (and
                (<= 0 $q4@1109@01)
                (<
                  $q4@1109@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                      $q3@1108@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
              $q3@1108@01)
            $q4@1109@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1976@176@1976@422-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@1108@01)
          (<
            $q3@1108@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))))))
      (and
        (<= 0 $q3@1108@01)
        (<
          $q3@1108@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
    $q3@1108@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1976@11@1976@423-aux|)))
(assert (forall (($q3@1108@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1108@01)
      (<
        $q3@1108@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2)))))
    (forall (($q4@1109@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@1109@01)
          (<
            $q4@1109@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                $q3@1108@01))))
        (=
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                $q3@1108@01)
              $q4@1109@01))
          2))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
          $q3@1108@01)
        $q4@1109@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1976@176@1976@422|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
    $q3@1108@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1976@11@1976@423|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       (forall $q5: Int ::
;         { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] }
;         0 <= $q5 &&
;         $q5 <
;         |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==>
;         -170141183460469231731687303715884105728 <=
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] &&
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <=
;         170141183460469231731687303715884105727)))
(declare-const $t@1110@01 $Snap)
(assert (= $t@1110@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)))
(declare-const $q3@1111@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 754 | !(0 <= $q3@1111@01) | live]
; [else-branch: 754 | 0 <= $q3@1111@01 | live]
(push) ; 5
; [then-branch: 754 | !(0 <= $q3@1111@01)]
(assert (not (<= 0 $q3@1111@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 754 | 0 <= $q3@1111@01]
(assert (<= 0 $q3@1111@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1111@01) (not (<= 0 $q3@1111@01))))
(push) ; 4
; [then-branch: 755 | 0 <= $q3@1111@01 && $q3@1111@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))| | live]
; [else-branch: 755 | !(0 <= $q3@1111@01 && $q3@1111@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))|) | live]
(push) ; 5
; [then-branch: 755 | 0 <= $q3@1111@01 && $q3@1111@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))|]
(assert (and
  (<= 0 $q3@1111@01)
  (<
    $q3@1111@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
(declare-const $q4@1112@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 756 | !(0 <= $q4@1112@01) | live]
; [else-branch: 756 | 0 <= $q4@1112@01 | live]
(push) ; 8
; [then-branch: 756 | !(0 <= $q4@1112@01)]
(assert (not (<= 0 $q4@1112@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 756 | 0 <= $q4@1112@01]
(assert (<= 0 $q4@1112@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1111@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@1112@01) (not (<= 0 $q4@1112@01))))
(push) ; 7
; [then-branch: 757 | 0 <= $q4@1112@01 && $q4@1112@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))[$q3@1111@01]| | live]
; [else-branch: 757 | !(0 <= $q4@1112@01 && $q4@1112@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))[$q3@1111@01]|) | live]
(push) ; 8
; [then-branch: 757 | 0 <= $q4@1112@01 && $q4@1112@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))[$q3@1111@01]|]
(assert (and
  (<= 0 $q4@1112@01)
  (<
    $q4@1112@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
        $q3@1111@01)))))
; [eval] (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
(declare-const $q5@1113@01 Int)
(push) ; 9
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] 0 <= $q5
(push) ; 10
; [then-branch: 758 | !(0 <= $q5@1113@01) | live]
; [else-branch: 758 | 0 <= $q5@1113@01 | live]
(push) ; 11
; [then-branch: 758 | !(0 <= $q5@1113@01)]
(assert (not (<= 0 $q5@1113@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 758 | 0 <= $q5@1113@01]
(assert (<= 0 $q5@1113@01))
; [eval] $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@1111@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@1112@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q5@1113@01) (not (<= 0 $q5@1113@01))))
(push) ; 10
; [then-branch: 759 | 0 <= $q5@1113@01 && $q5@1113@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))[$q3@1111@01][$q4@1112@01]| | live]
; [else-branch: 759 | !(0 <= $q5@1113@01 && $q5@1113@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))[$q3@1111@01][$q4@1112@01]|) | live]
(push) ; 11
; [then-branch: 759 | 0 <= $q5@1113@01 && $q5@1113@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))[$q3@1111@01][$q4@1112@01]|]
(assert (and
  (<= 0 $q5@1113@01)
  (<
    $q5@1113@01
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
          $q3@1111@01)
        $q4@1112@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@1111@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@1112@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q5@1113@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 760 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))[$q3@1111@01][$q4@1112@01][$q5@1113@01]) | live]
; [else-branch: 760 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))[$q3@1111@01][$q4@1112@01][$q5@1113@01] | live]
(push) ; 13
; [then-branch: 760 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))[$q3@1111@01][$q4@1112@01][$q5@1113@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
          $q3@1111@01)
        $q4@1112@01)
      $q5@1113@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 760 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))[$q3@1111@01][$q4@1112@01][$q5@1113@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
        $q3@1111@01)
      $q4@1112@01)
    $q5@1113@01)))
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 14
(assert (not (>= $q3@1111@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q4@1112@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q5@1113@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
          $q3@1111@01)
        $q4@1112@01)
      $q5@1113@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
            $q3@1111@01)
          $q4@1112@01)
        $q5@1113@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 759 | !(0 <= $q5@1113@01 && $q5@1113@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))[$q3@1111@01][$q4@1112@01]|)]
(assert (not
  (and
    (<= 0 $q5@1113@01)
    (<
      $q5@1113@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
            $q3@1111@01)
          $q4@1112@01))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q5@1113@01)
    (<
      $q5@1113@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
            $q3@1111@01)
          $q4@1112@01))))
  (and
    (<= 0 $q5@1113@01)
    (<
      $q5@1113@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
            $q3@1111@01)
          $q4@1112@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
              $q3@1111@01)
            $q4@1112@01)
          $q5@1113@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                $q3@1111@01)
              $q4@1112@01)
            $q5@1113@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q5@1113@01)
      (<
        $q5@1113@01
        (Seq_length
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
              $q3@1111@01)
            $q4@1112@01)))))
  (and
    (<= 0 $q5@1113@01)
    (<
      $q5@1113@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
            $q3@1111@01)
          $q4@1112@01))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@1113@01 Int)) (!
  (and
    (or (<= 0 $q5@1113@01) (not (<= 0 $q5@1113@01)))
    (=>
      (and
        (<= 0 $q5@1113@01)
        (<
          $q5@1113@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                $q3@1111@01)
              $q4@1112@01))))
      (and
        (<= 0 $q5@1113@01)
        (<
          $q5@1113@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                $q3@1111@01)
              $q4@1112@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                  $q3@1111@01)
                $q4@1112@01)
              $q5@1113@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                    $q3@1111@01)
                  $q4@1112@01)
                $q5@1113@01))))))
    (or
      (not
        (and
          (<= 0 $q5@1113@01)
          (<
            $q5@1113@01
            (Seq_length
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                  $q3@1111@01)
                $q4@1112@01)))))
      (and
        (<= 0 $q5@1113@01)
        (<
          $q5@1113@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                $q3@1111@01)
              $q4@1112@01))))))
  :pattern ((Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
        $q3@1111@01)
      $q4@1112@01)
    $q5@1113@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1977@351@1977@766-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 757 | !(0 <= $q4@1112@01 && $q4@1112@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))[$q3@1111@01]|)]
(assert (not
  (and
    (<= 0 $q4@1112@01)
    (<
      $q4@1112@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
          $q3@1111@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q4@1112@01)
    (<
      $q4@1112@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
          $q3@1111@01))))
  (and
    (<= 0 $q4@1112@01)
    (<
      $q4@1112@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
          $q3@1111@01)))
    (forall (($q5@1113@01 Int)) (!
      (and
        (or (<= 0 $q5@1113@01) (not (<= 0 $q5@1113@01)))
        (=>
          (and
            (<= 0 $q5@1113@01)
            (<
              $q5@1113@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                    $q3@1111@01)
                  $q4@1112@01))))
          (and
            (<= 0 $q5@1113@01)
            (<
              $q5@1113@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                    $q3@1111@01)
                  $q4@1112@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                      $q3@1111@01)
                    $q4@1112@01)
                  $q5@1113@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                        $q3@1111@01)
                      $q4@1112@01)
                    $q5@1113@01))))))
        (or
          (not
            (and
              (<= 0 $q5@1113@01)
              (<
                $q5@1113@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                      $q3@1111@01)
                    $q4@1112@01)))))
          (and
            (<= 0 $q5@1113@01)
            (<
              $q5@1113@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                    $q3@1111@01)
                  $q4@1112@01))))))
      :pattern ((Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
            $q3@1111@01)
          $q4@1112@01)
        $q5@1113@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1977@351@1977@766-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@1112@01)
      (<
        $q4@1112@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
            $q3@1111@01)))))
  (and
    (<= 0 $q4@1112@01)
    (<
      $q4@1112@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
          $q3@1111@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1112@01 Int)) (!
  (and
    (or (<= 0 $q4@1112@01) (not (<= 0 $q4@1112@01)))
    (=>
      (and
        (<= 0 $q4@1112@01)
        (<
          $q4@1112@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
              $q3@1111@01))))
      (and
        (<= 0 $q4@1112@01)
        (<
          $q4@1112@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
              $q3@1111@01)))
        (forall (($q5@1113@01 Int)) (!
          (and
            (or (<= 0 $q5@1113@01) (not (<= 0 $q5@1113@01)))
            (=>
              (and
                (<= 0 $q5@1113@01)
                (<
                  $q5@1113@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                        $q3@1111@01)
                      $q4@1112@01))))
              (and
                (<= 0 $q5@1113@01)
                (<
                  $q5@1113@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                        $q3@1111@01)
                      $q4@1112@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                          $q3@1111@01)
                        $q4@1112@01)
                      $q5@1113@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                            $q3@1111@01)
                          $q4@1112@01)
                        $q5@1113@01))))))
            (or
              (not
                (and
                  (<= 0 $q5@1113@01)
                  (<
                    $q5@1113@01
                    (Seq_length
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                          $q3@1111@01)
                        $q4@1112@01)))))
              (and
                (<= 0 $q5@1113@01)
                (<
                  $q5@1113@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                        $q3@1111@01)
                      $q4@1112@01))))))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                $q3@1111@01)
              $q4@1112@01)
            $q5@1113@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1977@351@1977@766-aux|))))
    (or
      (not
        (and
          (<= 0 $q4@1112@01)
          (<
            $q4@1112@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                $q3@1111@01)))))
      (and
        (<= 0 $q4@1112@01)
        (<
          $q4@1112@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
              $q3@1111@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
      $q3@1111@01)
    $q4@1112@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1977@176@1977@767-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 755 | !(0 <= $q3@1111@01 && $q3@1111@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1083@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1111@01)
    (<
      $q3@1111@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@1111@01)
    (<
      $q3@1111@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2)))))
  (and
    (<= 0 $q3@1111@01)
    (<
      $q3@1111@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))))
    (forall (($q4@1112@01 Int)) (!
      (and
        (or (<= 0 $q4@1112@01) (not (<= 0 $q4@1112@01)))
        (=>
          (and
            (<= 0 $q4@1112@01)
            (<
              $q4@1112@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                  $q3@1111@01))))
          (and
            (<= 0 $q4@1112@01)
            (<
              $q4@1112@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                  $q3@1111@01)))
            (forall (($q5@1113@01 Int)) (!
              (and
                (or (<= 0 $q5@1113@01) (not (<= 0 $q5@1113@01)))
                (=>
                  (and
                    (<= 0 $q5@1113@01)
                    (<
                      $q5@1113@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                            $q3@1111@01)
                          $q4@1112@01))))
                  (and
                    (<= 0 $q5@1113@01)
                    (<
                      $q5@1113@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                            $q3@1111@01)
                          $q4@1112@01)))
                    (or
                      (<=
                        (- 0 170141183460469231731687303715884105728)
                        (Seq_index
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                              $q3@1111@01)
                            $q4@1112@01)
                          $q5@1113@01))
                      (not
                        (<=
                          (- 0 170141183460469231731687303715884105728)
                          (Seq_index
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                                $q3@1111@01)
                              $q4@1112@01)
                            $q5@1113@01))))))
                (or
                  (not
                    (and
                      (<= 0 $q5@1113@01)
                      (<
                        $q5@1113@01
                        (Seq_length
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                              $q3@1111@01)
                            $q4@1112@01)))))
                  (and
                    (<= 0 $q5@1113@01)
                    (<
                      $q5@1113@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                            $q3@1111@01)
                          $q4@1112@01))))))
              :pattern ((Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                    $q3@1111@01)
                  $q4@1112@01)
                $q5@1113@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1977@351@1977@766-aux|))))
        (or
          (not
            (and
              (<= 0 $q4@1112@01)
              (<
                $q4@1112@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                    $q3@1111@01)))))
          (and
            (<= 0 $q4@1112@01)
            (<
              $q4@1112@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                  $q3@1111@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
          $q3@1111@01)
        $q4@1112@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1977@176@1977@767-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1111@01)
      (<
        $q3@1111@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))))))
  (and
    (<= 0 $q3@1111@01)
    (<
      $q3@1111@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1111@01 Int)) (!
  (and
    (or (<= 0 $q3@1111@01) (not (<= 0 $q3@1111@01)))
    (=>
      (and
        (<= 0 $q3@1111@01)
        (<
          $q3@1111@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2)))))
      (and
        (<= 0 $q3@1111@01)
        (<
          $q3@1111@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))))
        (forall (($q4@1112@01 Int)) (!
          (and
            (or (<= 0 $q4@1112@01) (not (<= 0 $q4@1112@01)))
            (=>
              (and
                (<= 0 $q4@1112@01)
                (<
                  $q4@1112@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                      $q3@1111@01))))
              (and
                (<= 0 $q4@1112@01)
                (<
                  $q4@1112@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                      $q3@1111@01)))
                (forall (($q5@1113@01 Int)) (!
                  (and
                    (or (<= 0 $q5@1113@01) (not (<= 0 $q5@1113@01)))
                    (=>
                      (and
                        (<= 0 $q5@1113@01)
                        (<
                          $q5@1113@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                                $q3@1111@01)
                              $q4@1112@01))))
                      (and
                        (<= 0 $q5@1113@01)
                        (<
                          $q5@1113@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                                $q3@1111@01)
                              $q4@1112@01)))
                        (or
                          (<=
                            (- 0 170141183460469231731687303715884105728)
                            (Seq_index
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                                  $q3@1111@01)
                                $q4@1112@01)
                              $q5@1113@01))
                          (not
                            (<=
                              (- 0 170141183460469231731687303715884105728)
                              (Seq_index
                                (Seq_index
                                  (Seq_index
                                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                                    $q3@1111@01)
                                  $q4@1112@01)
                                $q5@1113@01))))))
                    (or
                      (not
                        (and
                          (<= 0 $q5@1113@01)
                          (<
                            $q5@1113@01
                            (Seq_length
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                                  $q3@1111@01)
                                $q4@1112@01)))))
                      (and
                        (<= 0 $q5@1113@01)
                        (<
                          $q5@1113@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                                $q3@1111@01)
                              $q4@1112@01))))))
                  :pattern ((Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                        $q3@1111@01)
                      $q4@1112@01)
                    $q5@1113@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1977@351@1977@766-aux|))))
            (or
              (not
                (and
                  (<= 0 $q4@1112@01)
                  (<
                    $q4@1112@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                        $q3@1111@01)))))
              (and
                (<= 0 $q4@1112@01)
                (<
                  $q4@1112@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                      $q3@1111@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
              $q3@1111@01)
            $q4@1112@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1977@176@1977@767-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@1111@01)
          (<
            $q3@1111@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))))))
      (and
        (<= 0 $q3@1111@01)
        (<
          $q3@1111@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
    $q3@1111@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1977@11@1977@768-aux|)))
(assert (forall (($q3@1111@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1111@01)
      (<
        $q3@1111@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2)))))
    (forall (($q4@1112@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@1112@01)
          (<
            $q4@1112@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                $q3@1111@01))))
        (forall (($q5@1113@01 Int)) (!
          (=>
            (and
              (<= 0 $q5@1113@01)
              (<
                $q5@1113@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                      $q3@1111@01)
                    $q4@1112@01))))
            (and
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                      $q3@1111@01)
                    $q4@1112@01)
                  $q5@1113@01))
              (<=
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                      $q3@1111@01)
                    $q4@1112@01)
                  $q5@1113@01)
                170141183460469231731687303715884105727)))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
                $q3@1111@01)
              $q4@1112@01)
            $q5@1113@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1977@351@1977@766|)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
          $q3@1111@01)
        $q4@1112@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1977@176@1977@767|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1083@01 2))
    $q3@1111@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1977@11@1977@768|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
(declare-const $t@1114@01 $Snap)
(assert (= $t@1114@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3))) 1000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] }
;     0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] &&
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <=
;     170141183460469231731687303715884105727)
(declare-const $t@1115@01 $Snap)
(assert (= $t@1115@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] } 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727)
(declare-const $q6@1116@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] 0 <= $q6
(push) ; 4
; [then-branch: 761 | !(0 <= $q6@1116@01) | live]
; [else-branch: 761 | 0 <= $q6@1116@01 | live]
(push) ; 5
; [then-branch: 761 | !(0 <= $q6@1116@01)]
(assert (not (<= 0 $q6@1116@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 761 | 0 <= $q6@1116@01]
(assert (<= 0 $q6@1116@01))
; [eval] $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q6@1116@01) (not (<= 0 $q6@1116@01))))
(push) ; 4
; [then-branch: 762 | 0 <= $q6@1116@01 && $q6@1116@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1083@01, 3))| | live]
; [else-branch: 762 | !(0 <= $q6@1116@01 && $q6@1116@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1083@01, 3))|) | live]
(push) ; 5
; [then-branch: 762 | 0 <= $q6@1116@01 && $q6@1116@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1083@01, 3))|]
(assert (and
  (<= 0 $q6@1116@01)
  (<
    $q6@1116@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (>= $q6@1116@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 763 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1083@01, 3))[$q6@1116@01]) | live]
; [else-branch: 763 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1083@01, 3))[$q6@1116@01] | live]
(push) ; 7
; [then-branch: 763 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1083@01, 3))[$q6@1116@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3))
      $q6@1116@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 763 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1083@01, 3))[$q6@1116@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3))
    $q6@1116@01)))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (>= $q6@1116@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3))
      $q6@1116@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3))
        $q6@1116@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 762 | !(0 <= $q6@1116@01 && $q6@1116@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1083@01, 3))|)]
(assert (not
  (and
    (<= 0 $q6@1116@01)
    (<
      $q6@1116@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q6@1116@01)
    (<
      $q6@1116@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3)))))
  (and
    (<= 0 $q6@1116@01)
    (<
      $q6@1116@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3))
          $q6@1116@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3))
            $q6@1116@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q6@1116@01)
      (<
        $q6@1116@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3))))))
  (and
    (<= 0 $q6@1116@01)
    (<
      $q6@1116@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1116@01 Int)) (!
  (and
    (or (<= 0 $q6@1116@01) (not (<= 0 $q6@1116@01)))
    (=>
      (and
        (<= 0 $q6@1116@01)
        (<
          $q6@1116@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3)))))
      (and
        (<= 0 $q6@1116@01)
        (<
          $q6@1116@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3))
              $q6@1116@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3))
                $q6@1116@01))))))
    (or
      (not
        (and
          (<= 0 $q6@1116@01)
          (<
            $q6@1116@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3))))))
      (and
        (<= 0 $q6@1116@01)
        (<
          $q6@1116@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3))
    $q6@1116@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1979@11@1979@346-aux|)))
(assert (forall (($q6@1116@01 Int)) (!
  (=>
    (and
      (<= 0 $q6@1116@01)
      (<
        $q6@1116@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3))
          $q6@1116@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3))
          $q6@1116@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3))
    $q6@1116@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1979@11@1979@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==
;     10)
(declare-const $t@1117@01 $Snap)
(assert (= $t@1117@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10)
(declare-const $q7@1118@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1118@01 Int)) (!
  (=
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1118@01))
    10)
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1118@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1980@11@1980@209|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     (forall $q8: Int ::
;       { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] }
;       0 <= $q8 &&
;       $q8 <
;       |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==>
;       -170141183460469231731687303715884105728 <=
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] &&
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <=
;       170141183460469231731687303715884105727))
(declare-const $t@1119@01 $Snap)
(assert (= $t@1119@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727))
(declare-const $q7@1120@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727)
(declare-const $q8@1121@01 Int)
(push) ; 4
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] 0 <= $q8
(push) ; 5
; [then-branch: 764 | !(0 <= $q8@1121@01) | live]
; [else-branch: 764 | 0 <= $q8@1121@01 | live]
(push) ; 6
; [then-branch: 764 | !(0 <= $q8@1121@01)]
(assert (not (<= 0 $q8@1121@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 764 | 0 <= $q8@1121@01]
(assert (<= 0 $q8@1121@01))
; [eval] $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q8@1121@01) (not (<= 0 $q8@1121@01))))
(push) ; 5
; [then-branch: 765 | 0 <= $q8@1121@01 && $q8@1121@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1083@01, 4)), $q7@1120@01)| | live]
; [else-branch: 765 | !(0 <= $q8@1121@01 && $q8@1121@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1083@01, 4)), $q7@1120@01)|) | live]
(push) ; 6
; [then-branch: 765 | 0 <= $q8@1121@01 && $q8@1121@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1083@01, 4)), $q7@1120@01)|]
(assert (and
  (<= 0 $q8@1121@01)
  (<
    $q8@1121@01
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] -170141183460469231731687303715884105728
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 7
(assert (not (>= $q8@1121@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 766 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1083@01, 4)), $q7@1120@01)[$q8@1121@01]) | live]
; [else-branch: 766 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1083@01, 4)), $q7@1120@01)[$q8@1121@01] | live]
(push) ; 8
; [then-branch: 766 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1083@01, 4)), $q7@1120@01)[$q8@1121@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01)
      $q8@1121@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 766 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1083@01, 4)), $q7@1120@01)[$q8@1121@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01)
    $q8@1121@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 9
(assert (not (>= $q8@1121@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01)
      $q8@1121@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01)
        $q8@1121@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 765 | !(0 <= $q8@1121@01 && $q8@1121@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1083@01, 4)), $q7@1120@01)|)]
(assert (not
  (and
    (<= 0 $q8@1121@01)
    (<
      $q8@1121@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q8@1121@01)
    (<
      $q8@1121@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01))))
  (and
    (<= 0 $q8@1121@01)
    (<
      $q8@1121@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01)
          $q8@1121@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01)
            $q8@1121@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q8@1121@01)
      (<
        $q8@1121@01
        (Seq_length
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01)))))
  (and
    (<= 0 $q8@1121@01)
    (<
      $q8@1121@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q8@1121@01 Int)) (!
  (and
    (or (<= 0 $q8@1121@01) (not (<= 0 $q8@1121@01)))
    (=>
      (and
        (<= 0 $q8@1121@01)
        (<
          $q8@1121@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01))))
      (and
        (<= 0 $q8@1121@01)
        (<
          $q8@1121@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01)
              $q8@1121@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01)
                $q8@1121@01))))))
    (or
      (not
        (and
          (<= 0 $q8@1121@01)
          (<
            $q8@1121@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01)))))
      (and
        (<= 0 $q8@1121@01)
        (<
          $q8@1121@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01))))))
  :pattern ((Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01)
    $q8@1121@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1981@119@1981@606-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1120@01 Int)) (!
  (forall (($q8@1121@01 Int)) (!
    (and
      (or (<= 0 $q8@1121@01) (not (<= 0 $q8@1121@01)))
      (=>
        (and
          (<= 0 $q8@1121@01)
          (<
            $q8@1121@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01))))
        (and
          (<= 0 $q8@1121@01)
          (<
            $q8@1121@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01)))
          (or
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01)
                $q8@1121@01))
            (not
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01)
                  $q8@1121@01))))))
      (or
        (not
          (and
            (<= 0 $q8@1121@01)
            (<
              $q8@1121@01
              (Seq_length
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01)))))
        (and
          (<= 0 $q8@1121@01)
          (<
            $q8@1121@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01))))))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01)
      $q8@1121@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1981@119@1981@606-aux|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1981@11@1981@607-aux|)))
(assert (forall (($q7@1120@01 Int)) (!
  (forall (($q8@1121@01 Int)) (!
    (=>
      (and
        (<= 0 $q8@1121@01)
        (<
          $q8@1121@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01))))
      (and
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01)
            $q8@1121@01))
        (<=
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01)
            $q8@1121@01)
          170141183460469231731687303715884105727)))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01)
      $q8@1121@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1981@119@1981@606|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1083@01 4)) $q7@1120@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1981@11@1981@607|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1122@01 $Snap)
(assert (= $t@1122@01 ($Snap.combine ($Snap.first $t@1122@01) ($Snap.second $t@1122@01))))
(assert (= ($Snap.first $t@1122@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1083@01 5))))
(assert (= ($Snap.second $t@1122@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1083@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@1123@01 $Snap)
(assert (= $t@1123@01 ($Snap.combine ($Snap.first $t@1123@01) ($Snap.second $t@1123@01))))
(assert (= ($Snap.first $t@1123@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@1083@01 6))))
(assert (= ($Snap.second $t@1123@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1083@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1124@01 $Snap)
(assert (= $t@1124@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q9@1125@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 767 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1083@01, 8)), $q9@1125@01)) | live]
; [else-branch: 767 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1083@01, 8)), $q9@1125@01) | live]
(push) ; 5
; [then-branch: 767 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1083@01, 8)), $q9@1125@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 8)) $q9@1125@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 767 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1083@01, 8)), $q9@1125@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 8)) $q9@1125@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 8)) $q9@1125@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 8)) $q9@1125@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@1125@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 8)) $q9@1125@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 8)) $q9@1125@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 8)) $q9@1125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1984@11@1984@345-aux|)))
(assert (forall (($q9@1125@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 8)) $q9@1125@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 8)) $q9@1125@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 8)) $q9@1125@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1984@11@1984@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@1126@01 $Snap)
(assert (= $t@1126@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q9@1127@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@1127@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 8)) $q9@1127@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 8)) $q9@1127@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1985@11@1985@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1128@01 $Snap)
(assert (= $t@1128@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q10@1129@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 768 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1083@01, 9)), $q10@1129@01)) | live]
; [else-branch: 768 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1083@01, 9)), $q10@1129@01) | live]
(push) ; 5
; [then-branch: 768 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1083@01, 9)), $q10@1129@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 9)) $q10@1129@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 768 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1083@01, 9)), $q10@1129@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 9)) $q10@1129@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 9)) $q10@1129@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 9)) $q10@1129@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@1129@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 9)) $q10@1129@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 9)) $q10@1129@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 9)) $q10@1129@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1986@11@1986@349-aux|)))
(assert (forall (($q10@1129@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 9)) $q10@1129@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 9)) $q10@1129@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 9)) $q10@1129@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1986@11@1986@349|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@1130@01 $Snap)
(assert (= $t@1130@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q10@1131@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@1131@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 9)) $q10@1131@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1083@01 9)) $q10@1131@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@1987@11@1987@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@1132@01 $Snap)
(assert (= $t@1132@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1083@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1133@01 $Snap)
(assert (= $t@1133@01 ($Snap.combine ($Snap.first $t@1133@01) ($Snap.second $t@1133@01))))
(assert (= ($Snap.first $t@1133@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@1133@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1134@01 $Snap)
(assert (= $t@1134@01 ($Snap.combine ($Snap.first $t@1134@01) ($Snap.second $t@1134@01))))
(assert (= ($Snap.first $t@1134@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1080@01 0))))
(assert (= ($Snap.second $t@1134@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1080@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1135@01 $Snap)
(assert (= $t@1135@01 ($Snap.combine ($Snap.first $t@1135@01) ($Snap.second $t@1135@01))))
(assert (= ($Snap.first $t@1135@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1080@01 1))))
(assert (= ($Snap.second $t@1135@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1080@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1136@01 $Snap)
(assert (= $t@1136@01 ($Snap.combine ($Snap.first $t@1136@01) ($Snap.second $t@1136@01))))
(assert (= ($Snap.first $t@1136@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1080@01 2))))
(assert (= ($Snap.second $t@1136@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1080@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@1137@01 $Snap)
(assert (= $t@1137@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@1080@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1138@01 $Snap)
(assert (= $t@1138@01 ($Snap.combine ($Snap.first $t@1138@01) ($Snap.second $t@1138@01))))
(assert (= ($Snap.first $t@1138@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1080@01 4))))
(assert (= ($Snap.second $t@1138@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1080@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@1139@01 $Snap)
(assert (= $t@1139@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@1080@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1140@01 $Snap)
(assert (= $t@1140@01 ($Snap.combine ($Snap.first $t@1140@01) ($Snap.second $t@1140@01))))
(assert (= ($Snap.first $t@1140@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1079@01 0))))
(assert (= ($Snap.second $t@1140@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1079@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1141@01 $Snap)
(assert (= $t@1141@01 ($Snap.combine ($Snap.first $t@1141@01) ($Snap.second $t@1141@01))))
(assert (= ($Snap.first $t@1141@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1079@01 1))))
(assert (= ($Snap.second $t@1141@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1079@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1142@01 $Snap)
(assert (= $t@1142@01 ($Snap.combine ($Snap.first $t@1142@01) ($Snap.second $t@1142@01))))
(assert (= ($Snap.first $t@1142@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1079@01 2))))
(assert (= ($Snap.second $t@1142@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1079@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@1143@01 $Snap)
(assert (= $t@1143@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1079@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@1144@01 $Snap)
(assert (= $t@1144@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1079@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@1145@01 $Snap)
(assert (= $t@1145@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@1146@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc(self, 3)): Seq[Int])
(declare-const $t@1147@01 $Snap)
(assert (= $t@1147@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@1148@01 $Snap)
(assert (= $t@1148@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1079@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] !(0 <= 12 && 12 < |($struct_get($struct_loc(self, 3)): Seq[Int])|)
; [eval] 0 <= 12 && 12 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] 0 <= 12
(set-option :timeout 0)
(push) ; 3
; [then-branch: 769 | False | live]
; [else-branch: 769 | True | live]
(push) ; 4
; [then-branch: 769 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 769 | True]
; [eval] 12 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (< 12 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 770 | !(12 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1083@01, 3))|) | dead]
; [else-branch: 770 | 12 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1083@01, 3))| | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 770 | 12 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1083@01, 3))|]
(assert (< 12 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3)))))
(pop) ; 3
; [eval] !!(0 <= 12 && 12 < |($struct_get($struct_loc(self, 3)): Seq[Int])|)
; [eval] !(0 <= 12 && 12 < |($struct_get($struct_loc(self, 3)): Seq[Int])|)
; [eval] 0 <= 12 && 12 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] 0 <= 12
(push) ; 3
; [then-branch: 771 | False | live]
; [else-branch: 771 | True | live]
(push) ; 4
; [then-branch: 771 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 771 | True]
; [eval] 12 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (< 12 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3)))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< 12 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 772 | 12 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1083@01, 3))| | live]
; [else-branch: 772 | !(12 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1083@01, 3))|) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 772 | 12 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1083@01, 3))|]
(assert (< 12 (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3)))))
; [exec]
; self := ($struct_set(self, 3, ($struct_get($struct_loc(self, 3)): Seq[Int])[12 :=
;   100]): $Struct)
; [eval] ($struct_set(self, 3, ($struct_get($struct_loc(self, 3)): Seq[Int])[12 := 100]): $Struct)
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[12 := 100]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(declare-const self@1149@01 $Struct)
(assert (=
  self@1149@01
  ($struct_set<$Struct> self@1083@01 3 (Seq_append
    (Seq_take ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3)) 12)
    (Seq_append
      (Seq_singleton 100)
      (Seq_drop ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3)) 13))))))
; [exec]
; label return
; [exec]
; label end
; [eval] !$succ
; [then-branch: 773 | False | dead]
; [else-branch: 773 | True | live]
(push) ; 4
; [else-branch: 773 | True]
(pop) ; 4
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 774 | True | live]
; [else-branch: 774 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 774 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@1150@01 $Snap)
(assert (= $t@1150@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@1093@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@1151@01 $Struct)
(assert (=
  self@1151@01
  ($struct_set<$Struct> self@1149@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@1149@01 5))
    l$havoc@1093@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 5
(assert (not (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1151@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 5
(assert (not (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1151@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 5
(assert (not (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1151@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 5
(assert (not (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1151@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1083@01 3)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$acc_map ----------
(declare-const $succ@1152@01 Bool)
(declare-const $succ@1153@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@1154@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@1155@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@1156@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@1157@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@1158@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@1159@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@1160@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@1161@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@1162@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@1163@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@1164@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@1165@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@1166@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@1167@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@1168@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@1169@01 $Map<Int~_$Struct>)
; [exec]
; inhale |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
(declare-const $t@1170@01 $Snap)
(assert (= $t@1170@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 0))) 12))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] }
;     0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] &&
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <=
;     170141183460469231731687303715884105727)
(declare-const $t@1171@01 $Snap)
(assert (= $t@1171@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] } 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@1172@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 775 | !(0 <= $q0@1172@01) | live]
; [else-branch: 775 | 0 <= $q0@1172@01 | live]
(push) ; 5
; [then-branch: 775 | !(0 <= $q0@1172@01)]
(assert (not (<= 0 $q0@1172@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 775 | 0 <= $q0@1172@01]
(assert (<= 0 $q0@1172@01))
; [eval] $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@1172@01) (not (<= 0 $q0@1172@01))))
(push) ; 4
; [then-branch: 776 | 0 <= $q0@1172@01 && $q0@1172@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1158@01, 0))| | live]
; [else-branch: 776 | !(0 <= $q0@1172@01 && $q0@1172@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1158@01, 0))|) | live]
(push) ; 5
; [then-branch: 776 | 0 <= $q0@1172@01 && $q0@1172@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1158@01, 0))|]
(assert (and
  (<= 0 $q0@1172@01)
  (<
    $q0@1172@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 0))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (>= $q0@1172@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 777 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1158@01, 0))[$q0@1172@01]) | live]
; [else-branch: 777 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1158@01, 0))[$q0@1172@01] | live]
(push) ; 7
; [then-branch: 777 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1158@01, 0))[$q0@1172@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 0))
      $q0@1172@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 777 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1158@01, 0))[$q0@1172@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 0))
    $q0@1172@01)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (>= $q0@1172@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 0))
      $q0@1172@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 0))
        $q0@1172@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 776 | !(0 <= $q0@1172@01 && $q0@1172@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1158@01, 0))|)]
(assert (not
  (and
    (<= 0 $q0@1172@01)
    (<
      $q0@1172@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 0)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q0@1172@01)
    (<
      $q0@1172@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 0)))))
  (and
    (<= 0 $q0@1172@01)
    (<
      $q0@1172@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 0))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 0))
          $q0@1172@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 0))
            $q0@1172@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q0@1172@01)
      (<
        $q0@1172@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 0))))))
  (and
    (<= 0 $q0@1172@01)
    (<
      $q0@1172@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 0)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@1172@01 Int)) (!
  (and
    (or (<= 0 $q0@1172@01) (not (<= 0 $q0@1172@01)))
    (=>
      (and
        (<= 0 $q0@1172@01)
        (<
          $q0@1172@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 0)))))
      (and
        (<= 0 $q0@1172@01)
        (<
          $q0@1172@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 0))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 0))
              $q0@1172@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 0))
                $q0@1172@01))))))
    (or
      (not
        (and
          (<= 0 $q0@1172@01)
          (<
            $q0@1172@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 0))))))
      (and
        (<= 0 $q0@1172@01)
        (<
          $q0@1172@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 0)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 0))
    $q0@1172@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2065@11@2065@346-aux|)))
(assert (forall (($q0@1172@01 Int)) (!
  (=>
    (and
      (<= 0 $q0@1172@01)
      (<
        $q0@1172@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 0)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 0))
          $q0@1172@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 0))
          $q0@1172@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 0))
    $q0@1172@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2065@11@2065@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
(declare-const $t@1173@01 $Snap)
(assert (= $t@1173@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(assert (=
  (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1)))
  12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $t@1174@01 $Snap)
(assert (= $t@1174@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $q1@1175@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 778 | !(0 <= $q1@1175@01) | live]
; [else-branch: 778 | 0 <= $q1@1175@01 | live]
(push) ; 5
; [then-branch: 778 | !(0 <= $q1@1175@01)]
(assert (not (<= 0 $q1@1175@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 778 | 0 <= $q1@1175@01]
(assert (<= 0 $q1@1175@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@1175@01) (not (<= 0 $q1@1175@01))))
(push) ; 4
; [then-branch: 779 | 0 <= $q1@1175@01 && $q1@1175@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1158@01, 1))| | live]
; [else-branch: 779 | !(0 <= $q1@1175@01 && $q1@1175@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1158@01, 1))|) | live]
(push) ; 5
; [then-branch: 779 | 0 <= $q1@1175@01 && $q1@1175@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1158@01, 1))|]
(assert (and
  (<= 0 $q1@1175@01)
  (<
    $q1@1175@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))))))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 6
(assert (not (>= $q1@1175@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 779 | !(0 <= $q1@1175@01 && $q1@1175@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1158@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@1175@01)
    (<
      $q1@1175@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@1175@01)
      (<
        $q1@1175@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))))))
  (and
    (<= 0 $q1@1175@01)
    (<
      $q1@1175@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@1175@01 Int)) (!
  (and
    (or (<= 0 $q1@1175@01) (not (<= 0 $q1@1175@01)))
    (or
      (not
        (and
          (<= 0 $q1@1175@01)
          (<
            $q1@1175@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))))))
      (and
        (<= 0 $q1@1175@01)
        (<
          $q1@1175@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
    $q1@1175@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2067@11@2067@228-aux|)))
(assert (forall (($q1@1175@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@1175@01)
      (<
        $q1@1175@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
          $q1@1175@01))
      12))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
    $q1@1175@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2067@11@2067@228|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     (forall $q2: Int ::
;       { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] }
;       0 <= $q2 &&
;       $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==>
;       -170141183460469231731687303715884105728 <=
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] &&
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <=
;       170141183460469231731687303715884105727))
(declare-const $t@1176@01 $Snap)
(assert (= $t@1176@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727))
(declare-const $q1@1177@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 780 | !(0 <= $q1@1177@01) | live]
; [else-branch: 780 | 0 <= $q1@1177@01 | live]
(push) ; 5
; [then-branch: 780 | !(0 <= $q1@1177@01)]
(assert (not (<= 0 $q1@1177@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 780 | 0 <= $q1@1177@01]
(assert (<= 0 $q1@1177@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@1177@01) (not (<= 0 $q1@1177@01))))
(push) ; 4
; [then-branch: 781 | 0 <= $q1@1177@01 && $q1@1177@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1158@01, 1))| | live]
; [else-branch: 781 | !(0 <= $q1@1177@01 && $q1@1177@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1158@01, 1))|) | live]
(push) ; 5
; [then-branch: 781 | 0 <= $q1@1177@01 && $q1@1177@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1158@01, 1))|]
(assert (and
  (<= 0 $q1@1177@01)
  (<
    $q1@1177@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))))))
; [eval] (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
(declare-const $q2@1178@01 Int)
(push) ; 6
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] 0 <= $q2
(push) ; 7
; [then-branch: 782 | !(0 <= $q2@1178@01) | live]
; [else-branch: 782 | 0 <= $q2@1178@01 | live]
(push) ; 8
; [then-branch: 782 | !(0 <= $q2@1178@01)]
(assert (not (<= 0 $q2@1178@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 782 | 0 <= $q2@1178@01]
(assert (<= 0 $q2@1178@01))
; [eval] $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@1177@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q2@1178@01) (not (<= 0 $q2@1178@01))))
(push) ; 7
; [then-branch: 783 | 0 <= $q2@1178@01 && $q2@1178@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1158@01, 1))[$q1@1177@01]| | live]
; [else-branch: 783 | !(0 <= $q2@1178@01 && $q2@1178@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1158@01, 1))[$q1@1177@01]|) | live]
(push) ; 8
; [then-branch: 783 | 0 <= $q2@1178@01 && $q2@1178@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1158@01, 1))[$q1@1177@01]|]
(assert (and
  (<= 0 $q2@1178@01)
  (<
    $q2@1178@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
        $q1@1177@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@1177@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q2@1178@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 784 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1158@01, 1))[$q1@1177@01][$q2@1178@01]) | live]
; [else-branch: 784 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1158@01, 1))[$q1@1177@01][$q2@1178@01] | live]
(push) ; 10
; [then-branch: 784 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1158@01, 1))[$q1@1177@01][$q2@1178@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
        $q1@1177@01)
      $q2@1178@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 784 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1158@01, 1))[$q1@1177@01][$q2@1178@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
      $q1@1177@01)
    $q2@1178@01)))
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 11
(assert (not (>= $q1@1177@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= $q2@1178@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
        $q1@1177@01)
      $q2@1178@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
          $q1@1177@01)
        $q2@1178@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 783 | !(0 <= $q2@1178@01 && $q2@1178@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1158@01, 1))[$q1@1177@01]|)]
(assert (not
  (and
    (<= 0 $q2@1178@01)
    (<
      $q2@1178@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
          $q1@1177@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q2@1178@01)
    (<
      $q2@1178@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
          $q1@1177@01))))
  (and
    (<= 0 $q2@1178@01)
    (<
      $q2@1178@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
          $q1@1177@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
            $q1@1177@01)
          $q2@1178@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
              $q1@1177@01)
            $q2@1178@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q2@1178@01)
      (<
        $q2@1178@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
            $q1@1177@01)))))
  (and
    (<= 0 $q2@1178@01)
    (<
      $q2@1178@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
          $q1@1177@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@1178@01 Int)) (!
  (and
    (or (<= 0 $q2@1178@01) (not (<= 0 $q2@1178@01)))
    (=>
      (and
        (<= 0 $q2@1178@01)
        (<
          $q2@1178@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
              $q1@1177@01))))
      (and
        (<= 0 $q2@1178@01)
        (<
          $q2@1178@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
              $q1@1177@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
                $q1@1177@01)
              $q2@1178@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
                  $q1@1177@01)
                $q2@1178@01))))))
    (or
      (not
        (and
          (<= 0 $q2@1178@01)
          (<
            $q2@1178@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
                $q1@1177@01)))))
      (and
        (<= 0 $q2@1178@01)
        (<
          $q2@1178@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
              $q1@1177@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
      $q1@1177@01)
    $q2@1178@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2068@166@2068@541-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 781 | !(0 <= $q1@1177@01 && $q1@1177@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1158@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@1177@01)
    (<
      $q1@1177@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q1@1177@01)
    (<
      $q1@1177@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1)))))
  (and
    (<= 0 $q1@1177@01)
    (<
      $q1@1177@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))))
    (forall (($q2@1178@01 Int)) (!
      (and
        (or (<= 0 $q2@1178@01) (not (<= 0 $q2@1178@01)))
        (=>
          (and
            (<= 0 $q2@1178@01)
            (<
              $q2@1178@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
                  $q1@1177@01))))
          (and
            (<= 0 $q2@1178@01)
            (<
              $q2@1178@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
                  $q1@1177@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
                    $q1@1177@01)
                  $q2@1178@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
                      $q1@1177@01)
                    $q2@1178@01))))))
        (or
          (not
            (and
              (<= 0 $q2@1178@01)
              (<
                $q2@1178@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
                    $q1@1177@01)))))
          (and
            (<= 0 $q2@1178@01)
            (<
              $q2@1178@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
                  $q1@1177@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
          $q1@1177@01)
        $q2@1178@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2068@166@2068@541-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@1177@01)
      (<
        $q1@1177@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))))))
  (and
    (<= 0 $q1@1177@01)
    (<
      $q1@1177@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@1177@01 Int)) (!
  (and
    (or (<= 0 $q1@1177@01) (not (<= 0 $q1@1177@01)))
    (=>
      (and
        (<= 0 $q1@1177@01)
        (<
          $q1@1177@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1)))))
      (and
        (<= 0 $q1@1177@01)
        (<
          $q1@1177@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))))
        (forall (($q2@1178@01 Int)) (!
          (and
            (or (<= 0 $q2@1178@01) (not (<= 0 $q2@1178@01)))
            (=>
              (and
                (<= 0 $q2@1178@01)
                (<
                  $q2@1178@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
                      $q1@1177@01))))
              (and
                (<= 0 $q2@1178@01)
                (<
                  $q2@1178@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
                      $q1@1177@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
                        $q1@1177@01)
                      $q2@1178@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
                          $q1@1177@01)
                        $q2@1178@01))))))
            (or
              (not
                (and
                  (<= 0 $q2@1178@01)
                  (<
                    $q2@1178@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
                        $q1@1177@01)))))
              (and
                (<= 0 $q2@1178@01)
                (<
                  $q2@1178@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
                      $q1@1177@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
              $q1@1177@01)
            $q2@1178@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2068@166@2068@541-aux|))))
    (or
      (not
        (and
          (<= 0 $q1@1177@01)
          (<
            $q1@1177@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))))))
      (and
        (<= 0 $q1@1177@01)
        (<
          $q1@1177@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
    $q1@1177@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2068@11@2068@542-aux|)))
(assert (forall (($q1@1177@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@1177@01)
      (<
        $q1@1177@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1)))))
    (forall (($q2@1178@01 Int)) (!
      (=>
        (and
          (<= 0 $q2@1178@01)
          (<
            $q2@1178@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
                $q1@1177@01))))
        (and
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
                $q1@1177@01)
              $q2@1178@01))
          (<=
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
                $q1@1177@01)
              $q2@1178@01)
            170141183460469231731687303715884105727)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
          $q1@1177@01)
        $q2@1178@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2068@166@2068@541|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1158@01 1))
    $q1@1177@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2068@11@2068@542|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
(declare-const $t@1179@01 $Snap)
(assert (= $t@1179@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(assert (=
  (Seq_length
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2)))
  2))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $t@1180@01 $Snap)
(assert (= $t@1180@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $q3@1181@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 785 | !(0 <= $q3@1181@01) | live]
; [else-branch: 785 | 0 <= $q3@1181@01 | live]
(push) ; 5
; [then-branch: 785 | !(0 <= $q3@1181@01)]
(assert (not (<= 0 $q3@1181@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 785 | 0 <= $q3@1181@01]
(assert (<= 0 $q3@1181@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1181@01) (not (<= 0 $q3@1181@01))))
(push) ; 4
; [then-branch: 786 | 0 <= $q3@1181@01 && $q3@1181@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))| | live]
; [else-branch: 786 | !(0 <= $q3@1181@01 && $q3@1181@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))|) | live]
(push) ; 5
; [then-branch: 786 | 0 <= $q3@1181@01 && $q3@1181@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))|]
(assert (and
  (<= 0 $q3@1181@01)
  (<
    $q3@1181@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 6
(assert (not (>= $q3@1181@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 786 | !(0 <= $q3@1181@01 && $q3@1181@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1181@01)
    (<
      $q3@1181@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1181@01)
      (<
        $q3@1181@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))))))
  (and
    (<= 0 $q3@1181@01)
    (<
      $q3@1181@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1181@01 Int)) (!
  (and
    (or (<= 0 $q3@1181@01) (not (<= 0 $q3@1181@01)))
    (or
      (not
        (and
          (<= 0 $q3@1181@01)
          (<
            $q3@1181@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))))))
      (and
        (<= 0 $q3@1181@01)
        (<
          $q3@1181@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
    $q3@1181@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2070@11@2070@242-aux|)))
(assert (forall (($q3@1181@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1181@01)
      (<
        $q3@1181@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
          $q3@1181@01))
      2))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
    $q3@1181@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2070@11@2070@242|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==
;       2))
(declare-const $t@1182@01 $Snap)
(assert (= $t@1182@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2))
(declare-const $q3@1183@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 787 | !(0 <= $q3@1183@01) | live]
; [else-branch: 787 | 0 <= $q3@1183@01 | live]
(push) ; 5
; [then-branch: 787 | !(0 <= $q3@1183@01)]
(assert (not (<= 0 $q3@1183@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 787 | 0 <= $q3@1183@01]
(assert (<= 0 $q3@1183@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1183@01) (not (<= 0 $q3@1183@01))))
(push) ; 4
; [then-branch: 788 | 0 <= $q3@1183@01 && $q3@1183@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))| | live]
; [else-branch: 788 | !(0 <= $q3@1183@01 && $q3@1183@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))|) | live]
(push) ; 5
; [then-branch: 788 | 0 <= $q3@1183@01 && $q3@1183@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))|]
(assert (and
  (<= 0 $q3@1183@01)
  (<
    $q3@1183@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
(declare-const $q4@1184@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 789 | !(0 <= $q4@1184@01) | live]
; [else-branch: 789 | 0 <= $q4@1184@01 | live]
(push) ; 8
; [then-branch: 789 | !(0 <= $q4@1184@01)]
(assert (not (<= 0 $q4@1184@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 789 | 0 <= $q4@1184@01]
(assert (<= 0 $q4@1184@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1183@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@1184@01) (not (<= 0 $q4@1184@01))))
(push) ; 7
; [then-branch: 790 | 0 <= $q4@1184@01 && $q4@1184@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))[$q3@1183@01]| | live]
; [else-branch: 790 | !(0 <= $q4@1184@01 && $q4@1184@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))[$q3@1183@01]|) | live]
(push) ; 8
; [then-branch: 790 | 0 <= $q4@1184@01 && $q4@1184@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))[$q3@1183@01]|]
(assert (and
  (<= 0 $q4@1184@01)
  (<
    $q4@1184@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
        $q3@1183@01)))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1183@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q4@1184@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 790 | !(0 <= $q4@1184@01 && $q4@1184@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))[$q3@1183@01]|)]
(assert (not
  (and
    (<= 0 $q4@1184@01)
    (<
      $q4@1184@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
          $q3@1183@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@1184@01)
      (<
        $q4@1184@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
            $q3@1183@01)))))
  (and
    (<= 0 $q4@1184@01)
    (<
      $q4@1184@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
          $q3@1183@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1184@01 Int)) (!
  (and
    (or (<= 0 $q4@1184@01) (not (<= 0 $q4@1184@01)))
    (or
      (not
        (and
          (<= 0 $q4@1184@01)
          (<
            $q4@1184@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                $q3@1183@01)))))
      (and
        (<= 0 $q4@1184@01)
        (<
          $q4@1184@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
              $q3@1183@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
      $q3@1183@01)
    $q4@1184@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2071@176@2071@422-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 788 | !(0 <= $q3@1183@01 && $q3@1183@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1183@01)
    (<
      $q3@1183@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@1183@01)
    (<
      $q3@1183@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2)))))
  (and
    (<= 0 $q3@1183@01)
    (<
      $q3@1183@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))))
    (forall (($q4@1184@01 Int)) (!
      (and
        (or (<= 0 $q4@1184@01) (not (<= 0 $q4@1184@01)))
        (or
          (not
            (and
              (<= 0 $q4@1184@01)
              (<
                $q4@1184@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                    $q3@1183@01)))))
          (and
            (<= 0 $q4@1184@01)
            (<
              $q4@1184@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                  $q3@1183@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
          $q3@1183@01)
        $q4@1184@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2071@176@2071@422-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1183@01)
      (<
        $q3@1183@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))))))
  (and
    (<= 0 $q3@1183@01)
    (<
      $q3@1183@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1183@01 Int)) (!
  (and
    (or (<= 0 $q3@1183@01) (not (<= 0 $q3@1183@01)))
    (=>
      (and
        (<= 0 $q3@1183@01)
        (<
          $q3@1183@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2)))))
      (and
        (<= 0 $q3@1183@01)
        (<
          $q3@1183@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))))
        (forall (($q4@1184@01 Int)) (!
          (and
            (or (<= 0 $q4@1184@01) (not (<= 0 $q4@1184@01)))
            (or
              (not
                (and
                  (<= 0 $q4@1184@01)
                  (<
                    $q4@1184@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                        $q3@1183@01)))))
              (and
                (<= 0 $q4@1184@01)
                (<
                  $q4@1184@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                      $q3@1183@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
              $q3@1183@01)
            $q4@1184@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2071@176@2071@422-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@1183@01)
          (<
            $q3@1183@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))))))
      (and
        (<= 0 $q3@1183@01)
        (<
          $q3@1183@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
    $q3@1183@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2071@11@2071@423-aux|)))
(assert (forall (($q3@1183@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1183@01)
      (<
        $q3@1183@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2)))))
    (forall (($q4@1184@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@1184@01)
          (<
            $q4@1184@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                $q3@1183@01))))
        (=
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                $q3@1183@01)
              $q4@1184@01))
          2))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
          $q3@1183@01)
        $q4@1184@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2071@176@2071@422|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
    $q3@1183@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2071@11@2071@423|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       (forall $q5: Int ::
;         { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] }
;         0 <= $q5 &&
;         $q5 <
;         |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==>
;         -170141183460469231731687303715884105728 <=
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] &&
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <=
;         170141183460469231731687303715884105727)))
(declare-const $t@1185@01 $Snap)
(assert (= $t@1185@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)))
(declare-const $q3@1186@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 791 | !(0 <= $q3@1186@01) | live]
; [else-branch: 791 | 0 <= $q3@1186@01 | live]
(push) ; 5
; [then-branch: 791 | !(0 <= $q3@1186@01)]
(assert (not (<= 0 $q3@1186@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 791 | 0 <= $q3@1186@01]
(assert (<= 0 $q3@1186@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1186@01) (not (<= 0 $q3@1186@01))))
(push) ; 4
; [then-branch: 792 | 0 <= $q3@1186@01 && $q3@1186@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))| | live]
; [else-branch: 792 | !(0 <= $q3@1186@01 && $q3@1186@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))|) | live]
(push) ; 5
; [then-branch: 792 | 0 <= $q3@1186@01 && $q3@1186@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))|]
(assert (and
  (<= 0 $q3@1186@01)
  (<
    $q3@1186@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
(declare-const $q4@1187@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 793 | !(0 <= $q4@1187@01) | live]
; [else-branch: 793 | 0 <= $q4@1187@01 | live]
(push) ; 8
; [then-branch: 793 | !(0 <= $q4@1187@01)]
(assert (not (<= 0 $q4@1187@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 793 | 0 <= $q4@1187@01]
(assert (<= 0 $q4@1187@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1186@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@1187@01) (not (<= 0 $q4@1187@01))))
(push) ; 7
; [then-branch: 794 | 0 <= $q4@1187@01 && $q4@1187@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))[$q3@1186@01]| | live]
; [else-branch: 794 | !(0 <= $q4@1187@01 && $q4@1187@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))[$q3@1186@01]|) | live]
(push) ; 8
; [then-branch: 794 | 0 <= $q4@1187@01 && $q4@1187@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))[$q3@1186@01]|]
(assert (and
  (<= 0 $q4@1187@01)
  (<
    $q4@1187@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
        $q3@1186@01)))))
; [eval] (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
(declare-const $q5@1188@01 Int)
(push) ; 9
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] 0 <= $q5
(push) ; 10
; [then-branch: 795 | !(0 <= $q5@1188@01) | live]
; [else-branch: 795 | 0 <= $q5@1188@01 | live]
(push) ; 11
; [then-branch: 795 | !(0 <= $q5@1188@01)]
(assert (not (<= 0 $q5@1188@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 795 | 0 <= $q5@1188@01]
(assert (<= 0 $q5@1188@01))
; [eval] $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@1186@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@1187@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q5@1188@01) (not (<= 0 $q5@1188@01))))
(push) ; 10
; [then-branch: 796 | 0 <= $q5@1188@01 && $q5@1188@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))[$q3@1186@01][$q4@1187@01]| | live]
; [else-branch: 796 | !(0 <= $q5@1188@01 && $q5@1188@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))[$q3@1186@01][$q4@1187@01]|) | live]
(push) ; 11
; [then-branch: 796 | 0 <= $q5@1188@01 && $q5@1188@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))[$q3@1186@01][$q4@1187@01]|]
(assert (and
  (<= 0 $q5@1188@01)
  (<
    $q5@1188@01
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
          $q3@1186@01)
        $q4@1187@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@1186@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@1187@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q5@1188@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 797 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))[$q3@1186@01][$q4@1187@01][$q5@1188@01]) | live]
; [else-branch: 797 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))[$q3@1186@01][$q4@1187@01][$q5@1188@01] | live]
(push) ; 13
; [then-branch: 797 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))[$q3@1186@01][$q4@1187@01][$q5@1188@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
          $q3@1186@01)
        $q4@1187@01)
      $q5@1188@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 797 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))[$q3@1186@01][$q4@1187@01][$q5@1188@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
        $q3@1186@01)
      $q4@1187@01)
    $q5@1188@01)))
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 14
(assert (not (>= $q3@1186@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q4@1187@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q5@1188@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
          $q3@1186@01)
        $q4@1187@01)
      $q5@1188@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
            $q3@1186@01)
          $q4@1187@01)
        $q5@1188@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 796 | !(0 <= $q5@1188@01 && $q5@1188@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))[$q3@1186@01][$q4@1187@01]|)]
(assert (not
  (and
    (<= 0 $q5@1188@01)
    (<
      $q5@1188@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
            $q3@1186@01)
          $q4@1187@01))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q5@1188@01)
    (<
      $q5@1188@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
            $q3@1186@01)
          $q4@1187@01))))
  (and
    (<= 0 $q5@1188@01)
    (<
      $q5@1188@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
            $q3@1186@01)
          $q4@1187@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
              $q3@1186@01)
            $q4@1187@01)
          $q5@1188@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                $q3@1186@01)
              $q4@1187@01)
            $q5@1188@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q5@1188@01)
      (<
        $q5@1188@01
        (Seq_length
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
              $q3@1186@01)
            $q4@1187@01)))))
  (and
    (<= 0 $q5@1188@01)
    (<
      $q5@1188@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
            $q3@1186@01)
          $q4@1187@01))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@1188@01 Int)) (!
  (and
    (or (<= 0 $q5@1188@01) (not (<= 0 $q5@1188@01)))
    (=>
      (and
        (<= 0 $q5@1188@01)
        (<
          $q5@1188@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                $q3@1186@01)
              $q4@1187@01))))
      (and
        (<= 0 $q5@1188@01)
        (<
          $q5@1188@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                $q3@1186@01)
              $q4@1187@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                  $q3@1186@01)
                $q4@1187@01)
              $q5@1188@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                    $q3@1186@01)
                  $q4@1187@01)
                $q5@1188@01))))))
    (or
      (not
        (and
          (<= 0 $q5@1188@01)
          (<
            $q5@1188@01
            (Seq_length
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                  $q3@1186@01)
                $q4@1187@01)))))
      (and
        (<= 0 $q5@1188@01)
        (<
          $q5@1188@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                $q3@1186@01)
              $q4@1187@01))))))
  :pattern ((Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
        $q3@1186@01)
      $q4@1187@01)
    $q5@1188@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2072@351@2072@766-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 794 | !(0 <= $q4@1187@01 && $q4@1187@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))[$q3@1186@01]|)]
(assert (not
  (and
    (<= 0 $q4@1187@01)
    (<
      $q4@1187@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
          $q3@1186@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q4@1187@01)
    (<
      $q4@1187@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
          $q3@1186@01))))
  (and
    (<= 0 $q4@1187@01)
    (<
      $q4@1187@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
          $q3@1186@01)))
    (forall (($q5@1188@01 Int)) (!
      (and
        (or (<= 0 $q5@1188@01) (not (<= 0 $q5@1188@01)))
        (=>
          (and
            (<= 0 $q5@1188@01)
            (<
              $q5@1188@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                    $q3@1186@01)
                  $q4@1187@01))))
          (and
            (<= 0 $q5@1188@01)
            (<
              $q5@1188@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                    $q3@1186@01)
                  $q4@1187@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                      $q3@1186@01)
                    $q4@1187@01)
                  $q5@1188@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                        $q3@1186@01)
                      $q4@1187@01)
                    $q5@1188@01))))))
        (or
          (not
            (and
              (<= 0 $q5@1188@01)
              (<
                $q5@1188@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                      $q3@1186@01)
                    $q4@1187@01)))))
          (and
            (<= 0 $q5@1188@01)
            (<
              $q5@1188@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                    $q3@1186@01)
                  $q4@1187@01))))))
      :pattern ((Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
            $q3@1186@01)
          $q4@1187@01)
        $q5@1188@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2072@351@2072@766-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@1187@01)
      (<
        $q4@1187@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
            $q3@1186@01)))))
  (and
    (<= 0 $q4@1187@01)
    (<
      $q4@1187@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
          $q3@1186@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1187@01 Int)) (!
  (and
    (or (<= 0 $q4@1187@01) (not (<= 0 $q4@1187@01)))
    (=>
      (and
        (<= 0 $q4@1187@01)
        (<
          $q4@1187@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
              $q3@1186@01))))
      (and
        (<= 0 $q4@1187@01)
        (<
          $q4@1187@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
              $q3@1186@01)))
        (forall (($q5@1188@01 Int)) (!
          (and
            (or (<= 0 $q5@1188@01) (not (<= 0 $q5@1188@01)))
            (=>
              (and
                (<= 0 $q5@1188@01)
                (<
                  $q5@1188@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                        $q3@1186@01)
                      $q4@1187@01))))
              (and
                (<= 0 $q5@1188@01)
                (<
                  $q5@1188@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                        $q3@1186@01)
                      $q4@1187@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                          $q3@1186@01)
                        $q4@1187@01)
                      $q5@1188@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                            $q3@1186@01)
                          $q4@1187@01)
                        $q5@1188@01))))))
            (or
              (not
                (and
                  (<= 0 $q5@1188@01)
                  (<
                    $q5@1188@01
                    (Seq_length
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                          $q3@1186@01)
                        $q4@1187@01)))))
              (and
                (<= 0 $q5@1188@01)
                (<
                  $q5@1188@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                        $q3@1186@01)
                      $q4@1187@01))))))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                $q3@1186@01)
              $q4@1187@01)
            $q5@1188@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2072@351@2072@766-aux|))))
    (or
      (not
        (and
          (<= 0 $q4@1187@01)
          (<
            $q4@1187@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                $q3@1186@01)))))
      (and
        (<= 0 $q4@1187@01)
        (<
          $q4@1187@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
              $q3@1186@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
      $q3@1186@01)
    $q4@1187@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2072@176@2072@767-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 792 | !(0 <= $q3@1186@01 && $q3@1186@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1158@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1186@01)
    (<
      $q3@1186@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@1186@01)
    (<
      $q3@1186@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2)))))
  (and
    (<= 0 $q3@1186@01)
    (<
      $q3@1186@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))))
    (forall (($q4@1187@01 Int)) (!
      (and
        (or (<= 0 $q4@1187@01) (not (<= 0 $q4@1187@01)))
        (=>
          (and
            (<= 0 $q4@1187@01)
            (<
              $q4@1187@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                  $q3@1186@01))))
          (and
            (<= 0 $q4@1187@01)
            (<
              $q4@1187@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                  $q3@1186@01)))
            (forall (($q5@1188@01 Int)) (!
              (and
                (or (<= 0 $q5@1188@01) (not (<= 0 $q5@1188@01)))
                (=>
                  (and
                    (<= 0 $q5@1188@01)
                    (<
                      $q5@1188@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                            $q3@1186@01)
                          $q4@1187@01))))
                  (and
                    (<= 0 $q5@1188@01)
                    (<
                      $q5@1188@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                            $q3@1186@01)
                          $q4@1187@01)))
                    (or
                      (<=
                        (- 0 170141183460469231731687303715884105728)
                        (Seq_index
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                              $q3@1186@01)
                            $q4@1187@01)
                          $q5@1188@01))
                      (not
                        (<=
                          (- 0 170141183460469231731687303715884105728)
                          (Seq_index
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                                $q3@1186@01)
                              $q4@1187@01)
                            $q5@1188@01))))))
                (or
                  (not
                    (and
                      (<= 0 $q5@1188@01)
                      (<
                        $q5@1188@01
                        (Seq_length
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                              $q3@1186@01)
                            $q4@1187@01)))))
                  (and
                    (<= 0 $q5@1188@01)
                    (<
                      $q5@1188@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                            $q3@1186@01)
                          $q4@1187@01))))))
              :pattern ((Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                    $q3@1186@01)
                  $q4@1187@01)
                $q5@1188@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2072@351@2072@766-aux|))))
        (or
          (not
            (and
              (<= 0 $q4@1187@01)
              (<
                $q4@1187@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                    $q3@1186@01)))))
          (and
            (<= 0 $q4@1187@01)
            (<
              $q4@1187@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                  $q3@1186@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
          $q3@1186@01)
        $q4@1187@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2072@176@2072@767-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1186@01)
      (<
        $q3@1186@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))))))
  (and
    (<= 0 $q3@1186@01)
    (<
      $q3@1186@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1186@01 Int)) (!
  (and
    (or (<= 0 $q3@1186@01) (not (<= 0 $q3@1186@01)))
    (=>
      (and
        (<= 0 $q3@1186@01)
        (<
          $q3@1186@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2)))))
      (and
        (<= 0 $q3@1186@01)
        (<
          $q3@1186@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))))
        (forall (($q4@1187@01 Int)) (!
          (and
            (or (<= 0 $q4@1187@01) (not (<= 0 $q4@1187@01)))
            (=>
              (and
                (<= 0 $q4@1187@01)
                (<
                  $q4@1187@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                      $q3@1186@01))))
              (and
                (<= 0 $q4@1187@01)
                (<
                  $q4@1187@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                      $q3@1186@01)))
                (forall (($q5@1188@01 Int)) (!
                  (and
                    (or (<= 0 $q5@1188@01) (not (<= 0 $q5@1188@01)))
                    (=>
                      (and
                        (<= 0 $q5@1188@01)
                        (<
                          $q5@1188@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                                $q3@1186@01)
                              $q4@1187@01))))
                      (and
                        (<= 0 $q5@1188@01)
                        (<
                          $q5@1188@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                                $q3@1186@01)
                              $q4@1187@01)))
                        (or
                          (<=
                            (- 0 170141183460469231731687303715884105728)
                            (Seq_index
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                                  $q3@1186@01)
                                $q4@1187@01)
                              $q5@1188@01))
                          (not
                            (<=
                              (- 0 170141183460469231731687303715884105728)
                              (Seq_index
                                (Seq_index
                                  (Seq_index
                                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                                    $q3@1186@01)
                                  $q4@1187@01)
                                $q5@1188@01))))))
                    (or
                      (not
                        (and
                          (<= 0 $q5@1188@01)
                          (<
                            $q5@1188@01
                            (Seq_length
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                                  $q3@1186@01)
                                $q4@1187@01)))))
                      (and
                        (<= 0 $q5@1188@01)
                        (<
                          $q5@1188@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                                $q3@1186@01)
                              $q4@1187@01))))))
                  :pattern ((Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                        $q3@1186@01)
                      $q4@1187@01)
                    $q5@1188@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2072@351@2072@766-aux|))))
            (or
              (not
                (and
                  (<= 0 $q4@1187@01)
                  (<
                    $q4@1187@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                        $q3@1186@01)))))
              (and
                (<= 0 $q4@1187@01)
                (<
                  $q4@1187@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                      $q3@1186@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
              $q3@1186@01)
            $q4@1187@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2072@176@2072@767-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@1186@01)
          (<
            $q3@1186@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))))))
      (and
        (<= 0 $q3@1186@01)
        (<
          $q3@1186@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
    $q3@1186@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2072@11@2072@768-aux|)))
(assert (forall (($q3@1186@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1186@01)
      (<
        $q3@1186@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2)))))
    (forall (($q4@1187@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@1187@01)
          (<
            $q4@1187@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                $q3@1186@01))))
        (forall (($q5@1188@01 Int)) (!
          (=>
            (and
              (<= 0 $q5@1188@01)
              (<
                $q5@1188@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                      $q3@1186@01)
                    $q4@1187@01))))
            (and
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                      $q3@1186@01)
                    $q4@1187@01)
                  $q5@1188@01))
              (<=
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                      $q3@1186@01)
                    $q4@1187@01)
                  $q5@1188@01)
                170141183460469231731687303715884105727)))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
                $q3@1186@01)
              $q4@1187@01)
            $q5@1188@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2072@351@2072@766|)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
          $q3@1186@01)
        $q4@1187@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2072@176@2072@767|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1158@01 2))
    $q3@1186@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2072@11@2072@768|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
(declare-const $t@1189@01 $Snap)
(assert (= $t@1189@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3))) 1000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] }
;     0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] &&
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <=
;     170141183460469231731687303715884105727)
(declare-const $t@1190@01 $Snap)
(assert (= $t@1190@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] } 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727)
(declare-const $q6@1191@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] 0 <= $q6
(push) ; 4
; [then-branch: 798 | !(0 <= $q6@1191@01) | live]
; [else-branch: 798 | 0 <= $q6@1191@01 | live]
(push) ; 5
; [then-branch: 798 | !(0 <= $q6@1191@01)]
(assert (not (<= 0 $q6@1191@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 798 | 0 <= $q6@1191@01]
(assert (<= 0 $q6@1191@01))
; [eval] $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q6@1191@01) (not (<= 0 $q6@1191@01))))
(push) ; 4
; [then-branch: 799 | 0 <= $q6@1191@01 && $q6@1191@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1158@01, 3))| | live]
; [else-branch: 799 | !(0 <= $q6@1191@01 && $q6@1191@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1158@01, 3))|) | live]
(push) ; 5
; [then-branch: 799 | 0 <= $q6@1191@01 && $q6@1191@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1158@01, 3))|]
(assert (and
  (<= 0 $q6@1191@01)
  (<
    $q6@1191@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (>= $q6@1191@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 800 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1158@01, 3))[$q6@1191@01]) | live]
; [else-branch: 800 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1158@01, 3))[$q6@1191@01] | live]
(push) ; 7
; [then-branch: 800 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1158@01, 3))[$q6@1191@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3))
      $q6@1191@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 800 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1158@01, 3))[$q6@1191@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3))
    $q6@1191@01)))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (>= $q6@1191@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3))
      $q6@1191@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3))
        $q6@1191@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 799 | !(0 <= $q6@1191@01 && $q6@1191@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1158@01, 3))|)]
(assert (not
  (and
    (<= 0 $q6@1191@01)
    (<
      $q6@1191@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q6@1191@01)
    (<
      $q6@1191@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3)))))
  (and
    (<= 0 $q6@1191@01)
    (<
      $q6@1191@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3))
          $q6@1191@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3))
            $q6@1191@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q6@1191@01)
      (<
        $q6@1191@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3))))))
  (and
    (<= 0 $q6@1191@01)
    (<
      $q6@1191@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1191@01 Int)) (!
  (and
    (or (<= 0 $q6@1191@01) (not (<= 0 $q6@1191@01)))
    (=>
      (and
        (<= 0 $q6@1191@01)
        (<
          $q6@1191@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3)))))
      (and
        (<= 0 $q6@1191@01)
        (<
          $q6@1191@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3))
              $q6@1191@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3))
                $q6@1191@01))))))
    (or
      (not
        (and
          (<= 0 $q6@1191@01)
          (<
            $q6@1191@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3))))))
      (and
        (<= 0 $q6@1191@01)
        (<
          $q6@1191@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3))
    $q6@1191@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2074@11@2074@346-aux|)))
(assert (forall (($q6@1191@01 Int)) (!
  (=>
    (and
      (<= 0 $q6@1191@01)
      (<
        $q6@1191@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3))
          $q6@1191@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3))
          $q6@1191@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3))
    $q6@1191@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2074@11@2074@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==
;     10)
(declare-const $t@1192@01 $Snap)
(assert (= $t@1192@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10)
(declare-const $q7@1193@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1193@01 Int)) (!
  (=
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1193@01))
    10)
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1193@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2075@11@2075@209|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     (forall $q8: Int ::
;       { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] }
;       0 <= $q8 &&
;       $q8 <
;       |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==>
;       -170141183460469231731687303715884105728 <=
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] &&
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <=
;       170141183460469231731687303715884105727))
(declare-const $t@1194@01 $Snap)
(assert (= $t@1194@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727))
(declare-const $q7@1195@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727)
(declare-const $q8@1196@01 Int)
(push) ; 4
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] 0 <= $q8
(push) ; 5
; [then-branch: 801 | !(0 <= $q8@1196@01) | live]
; [else-branch: 801 | 0 <= $q8@1196@01 | live]
(push) ; 6
; [then-branch: 801 | !(0 <= $q8@1196@01)]
(assert (not (<= 0 $q8@1196@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 801 | 0 <= $q8@1196@01]
(assert (<= 0 $q8@1196@01))
; [eval] $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q8@1196@01) (not (<= 0 $q8@1196@01))))
(push) ; 5
; [then-branch: 802 | 0 <= $q8@1196@01 && $q8@1196@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1158@01, 4)), $q7@1195@01)| | live]
; [else-branch: 802 | !(0 <= $q8@1196@01 && $q8@1196@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1158@01, 4)), $q7@1195@01)|) | live]
(push) ; 6
; [then-branch: 802 | 0 <= $q8@1196@01 && $q8@1196@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1158@01, 4)), $q7@1195@01)|]
(assert (and
  (<= 0 $q8@1196@01)
  (<
    $q8@1196@01
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] -170141183460469231731687303715884105728
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 7
(assert (not (>= $q8@1196@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 803 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1158@01, 4)), $q7@1195@01)[$q8@1196@01]) | live]
; [else-branch: 803 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1158@01, 4)), $q7@1195@01)[$q8@1196@01] | live]
(push) ; 8
; [then-branch: 803 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1158@01, 4)), $q7@1195@01)[$q8@1196@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01)
      $q8@1196@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 803 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1158@01, 4)), $q7@1195@01)[$q8@1196@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01)
    $q8@1196@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 9
(assert (not (>= $q8@1196@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01)
      $q8@1196@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01)
        $q8@1196@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 802 | !(0 <= $q8@1196@01 && $q8@1196@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1158@01, 4)), $q7@1195@01)|)]
(assert (not
  (and
    (<= 0 $q8@1196@01)
    (<
      $q8@1196@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q8@1196@01)
    (<
      $q8@1196@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01))))
  (and
    (<= 0 $q8@1196@01)
    (<
      $q8@1196@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01)
          $q8@1196@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01)
            $q8@1196@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q8@1196@01)
      (<
        $q8@1196@01
        (Seq_length
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01)))))
  (and
    (<= 0 $q8@1196@01)
    (<
      $q8@1196@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q8@1196@01 Int)) (!
  (and
    (or (<= 0 $q8@1196@01) (not (<= 0 $q8@1196@01)))
    (=>
      (and
        (<= 0 $q8@1196@01)
        (<
          $q8@1196@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01))))
      (and
        (<= 0 $q8@1196@01)
        (<
          $q8@1196@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01)
              $q8@1196@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01)
                $q8@1196@01))))))
    (or
      (not
        (and
          (<= 0 $q8@1196@01)
          (<
            $q8@1196@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01)))))
      (and
        (<= 0 $q8@1196@01)
        (<
          $q8@1196@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01))))))
  :pattern ((Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01)
    $q8@1196@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2076@119@2076@606-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1195@01 Int)) (!
  (forall (($q8@1196@01 Int)) (!
    (and
      (or (<= 0 $q8@1196@01) (not (<= 0 $q8@1196@01)))
      (=>
        (and
          (<= 0 $q8@1196@01)
          (<
            $q8@1196@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01))))
        (and
          (<= 0 $q8@1196@01)
          (<
            $q8@1196@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01)))
          (or
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01)
                $q8@1196@01))
            (not
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01)
                  $q8@1196@01))))))
      (or
        (not
          (and
            (<= 0 $q8@1196@01)
            (<
              $q8@1196@01
              (Seq_length
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01)))))
        (and
          (<= 0 $q8@1196@01)
          (<
            $q8@1196@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01))))))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01)
      $q8@1196@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2076@119@2076@606-aux|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2076@11@2076@607-aux|)))
(assert (forall (($q7@1195@01 Int)) (!
  (forall (($q8@1196@01 Int)) (!
    (=>
      (and
        (<= 0 $q8@1196@01)
        (<
          $q8@1196@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01))))
      (and
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01)
            $q8@1196@01))
        (<=
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01)
            $q8@1196@01)
          170141183460469231731687303715884105727)))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01)
      $q8@1196@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2076@119@2076@606|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) $q7@1195@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2076@11@2076@607|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1197@01 $Snap)
(assert (= $t@1197@01 ($Snap.combine ($Snap.first $t@1197@01) ($Snap.second $t@1197@01))))
(assert (= ($Snap.first $t@1197@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1158@01 5))))
(assert (= ($Snap.second $t@1197@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1158@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@1198@01 $Snap)
(assert (= $t@1198@01 ($Snap.combine ($Snap.first $t@1198@01) ($Snap.second $t@1198@01))))
(assert (= ($Snap.first $t@1198@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@1158@01 6))))
(assert (= ($Snap.second $t@1198@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1158@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1199@01 $Snap)
(assert (= $t@1199@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q9@1200@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 804 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1158@01, 8)), $q9@1200@01)) | live]
; [else-branch: 804 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1158@01, 8)), $q9@1200@01) | live]
(push) ; 5
; [then-branch: 804 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1158@01, 8)), $q9@1200@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8)) $q9@1200@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 804 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1158@01, 8)), $q9@1200@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8)) $q9@1200@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8)) $q9@1200@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8)) $q9@1200@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@1200@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8)) $q9@1200@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8)) $q9@1200@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8)) $q9@1200@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2079@11@2079@345-aux|)))
(assert (forall (($q9@1200@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8)) $q9@1200@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8)) $q9@1200@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8)) $q9@1200@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2079@11@2079@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@1201@01 $Snap)
(assert (= $t@1201@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q9@1202@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@1202@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8)) $q9@1202@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 8)) $q9@1202@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2080@11@2080@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1203@01 $Snap)
(assert (= $t@1203@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q10@1204@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 805 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1158@01, 9)), $q10@1204@01)) | live]
; [else-branch: 805 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1158@01, 9)), $q10@1204@01) | live]
(push) ; 5
; [then-branch: 805 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1158@01, 9)), $q10@1204@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 9)) $q10@1204@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 805 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1158@01, 9)), $q10@1204@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 9)) $q10@1204@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 9)) $q10@1204@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 9)) $q10@1204@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@1204@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 9)) $q10@1204@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 9)) $q10@1204@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 9)) $q10@1204@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2081@11@2081@349-aux|)))
(assert (forall (($q10@1204@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 9)) $q10@1204@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 9)) $q10@1204@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 9)) $q10@1204@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2081@11@2081@349|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@1205@01 $Snap)
(assert (= $t@1205@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q10@1206@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@1206@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 9)) $q10@1206@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1158@01 9)) $q10@1206@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2082@11@2082@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@1207@01 $Snap)
(assert (= $t@1207@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1158@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1208@01 $Snap)
(assert (= $t@1208@01 ($Snap.combine ($Snap.first $t@1208@01) ($Snap.second $t@1208@01))))
(assert (= ($Snap.first $t@1208@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@1208@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1209@01 $Snap)
(assert (= $t@1209@01 ($Snap.combine ($Snap.first $t@1209@01) ($Snap.second $t@1209@01))))
(assert (= ($Snap.first $t@1209@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1155@01 0))))
(assert (= ($Snap.second $t@1209@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1155@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1210@01 $Snap)
(assert (= $t@1210@01 ($Snap.combine ($Snap.first $t@1210@01) ($Snap.second $t@1210@01))))
(assert (= ($Snap.first $t@1210@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1155@01 1))))
(assert (= ($Snap.second $t@1210@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1155@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1211@01 $Snap)
(assert (= $t@1211@01 ($Snap.combine ($Snap.first $t@1211@01) ($Snap.second $t@1211@01))))
(assert (= ($Snap.first $t@1211@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1155@01 2))))
(assert (= ($Snap.second $t@1211@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1155@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@1212@01 $Snap)
(assert (= $t@1212@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@1155@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1213@01 $Snap)
(assert (= $t@1213@01 ($Snap.combine ($Snap.first $t@1213@01) ($Snap.second $t@1213@01))))
(assert (= ($Snap.first $t@1213@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1155@01 4))))
(assert (= ($Snap.second $t@1213@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1155@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@1214@01 $Snap)
(assert (= $t@1214@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@1155@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1215@01 $Snap)
(assert (= $t@1215@01 ($Snap.combine ($Snap.first $t@1215@01) ($Snap.second $t@1215@01))))
(assert (= ($Snap.first $t@1215@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))))
(assert (= ($Snap.second $t@1215@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1216@01 $Snap)
(assert (= $t@1216@01 ($Snap.combine ($Snap.first $t@1216@01) ($Snap.second $t@1216@01))))
(assert (= ($Snap.first $t@1216@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1154@01 1))))
(assert (= ($Snap.second $t@1216@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1154@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1217@01 $Snap)
(assert (= $t@1217@01 ($Snap.combine ($Snap.first $t@1217@01) ($Snap.second $t@1217@01))))
(assert (= ($Snap.first $t@1217@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1154@01 2))))
(assert (= ($Snap.second $t@1217@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1154@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@1218@01 $Snap)
(assert (= $t@1218@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1154@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@1219@01 $Snap)
(assert (= $t@1219@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1154@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@1220@01 $Snap)
(assert (= $t@1220@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@1221@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc(self, 3)): Seq[Int])
(declare-const $t@1222@01 $Snap)
(assert (= $t@1222@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@1223@01 $Snap)
(assert (= $t@1223@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1154@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [eval] !(0 <= 2 && 2 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 1): Seq[Int])|)
; [eval] 0 <= 2 && 2 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 1): Seq[Int])|
; [eval] 0 <= 2
(set-option :timeout 0)
(push) ; 3
; [then-branch: 806 | False | live]
; [else-branch: 806 | True | live]
(push) ; 4
; [then-branch: 806 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 806 | True]
; [eval] 2 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 1): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 1): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 1): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  2
  (Seq_length
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) 1)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 807 | !(2 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1158@01, 4)), 1)|) | dead]
; [else-branch: 807 | 2 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1158@01, 4)), 1)| | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 807 | 2 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1158@01, 4)), 1)|]
(assert (<
  2
  (Seq_length
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) 1))))
(pop) ; 3
; [eval] !!(0 <= 2 && 2 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 1): Seq[Int])|)
; [eval] !(0 <= 2 && 2 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 1): Seq[Int])|)
; [eval] 0 <= 2 && 2 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 1): Seq[Int])|
; [eval] 0 <= 2
(push) ; 3
; [then-branch: 808 | False | live]
; [else-branch: 808 | True | live]
(push) ; 4
; [then-branch: 808 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 808 | True]
; [eval] 2 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 1): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 1): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 1): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (<
    2
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) 1))))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  2
  (Seq_length
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) 1)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 809 | 2 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1158@01, 4)), 1)| | live]
; [else-branch: 809 | !(2 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1158@01, 4)), 1)|) | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 809 | 2 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1158@01, 4)), 1)|]
(assert (<
  2
  (Seq_length
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) 1))))
; [exec]
; self := ($struct_set(self, 4, ($map_set(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]),
;   1, ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 1): Seq[Int])[2 :=
;   5]): $Map[Int, Seq[Int]])): $Struct)
; [eval] ($struct_set(self, 4, ($map_set(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 1, ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 1): Seq[Int])[2 := 5]): $Map[Int, Seq[Int]])): $Struct)
; [eval] ($map_set(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 1, ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 1): Seq[Int])[2 := 5]): $Map[Int, Seq[Int]])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 1): Seq[Int])[2 := 5]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 1): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(declare-const self@1224@01 $Struct)
(assert (=
  self@1224@01
  ($struct_set<$Struct> self@1158@01 4 ($map_set<$Map<Int~_Seq<Int>>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) 1 (Seq_append
    (Seq_take
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) 1)
      2)
    (Seq_append
      (Seq_singleton 5)
      (Seq_drop
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1158@01 4)) 1)
        3)))))))
; [exec]
; label return
; [exec]
; label end
; [eval] !$succ
; [then-branch: 810 | False | dead]
; [else-branch: 810 | True | live]
(push) ; 4
; [else-branch: 810 | True]
(pop) ; 4
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 811 | True | live]
; [else-branch: 811 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 811 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@1225@01 $Snap)
(assert (= $t@1225@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@1168@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@1226@01 $Struct)
(assert (=
  self@1226@01
  ($struct_set<$Struct> self@1224@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@1224@01 5))
    l$havoc@1168@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 5
(assert (not (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1226@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1226@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1158@01 3))))
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$acc_bounds ----------
(declare-const $succ@1227@01 Bool)
(declare-const $res@1228@01 Int)
(declare-const $succ@1229@01 Bool)
(declare-const $res@1230@01 Int)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@1231@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@1232@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@1233@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@1234@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@1235@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@1236@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@1237@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@1238@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@1239@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@1240@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@1241@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@1242@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@1243@01 Bool)
; [exec]
; var l$i: Int
(declare-const l$i@1244@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@1245@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@1246@01 Int)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@1247@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@1248@01 $Map<Int~_$Struct>)
; [exec]
; inhale |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
(declare-const $t@1249@01 $Snap)
(assert (= $t@1249@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 0))) 12))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] }
;     0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] &&
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <=
;     170141183460469231731687303715884105727)
(declare-const $t@1250@01 $Snap)
(assert (= $t@1250@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] } 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@1251@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 812 | !(0 <= $q0@1251@01) | live]
; [else-branch: 812 | 0 <= $q0@1251@01 | live]
(push) ; 5
; [then-branch: 812 | !(0 <= $q0@1251@01)]
(assert (not (<= 0 $q0@1251@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 812 | 0 <= $q0@1251@01]
(assert (<= 0 $q0@1251@01))
; [eval] $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@1251@01) (not (<= 0 $q0@1251@01))))
(push) ; 4
; [then-branch: 813 | 0 <= $q0@1251@01 && $q0@1251@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1235@01, 0))| | live]
; [else-branch: 813 | !(0 <= $q0@1251@01 && $q0@1251@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1235@01, 0))|) | live]
(push) ; 5
; [then-branch: 813 | 0 <= $q0@1251@01 && $q0@1251@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1235@01, 0))|]
(assert (and
  (<= 0 $q0@1251@01)
  (<
    $q0@1251@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 0))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (>= $q0@1251@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 814 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1235@01, 0))[$q0@1251@01]) | live]
; [else-branch: 814 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1235@01, 0))[$q0@1251@01] | live]
(push) ; 7
; [then-branch: 814 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1235@01, 0))[$q0@1251@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 0))
      $q0@1251@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 814 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1235@01, 0))[$q0@1251@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 0))
    $q0@1251@01)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (>= $q0@1251@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 0))
      $q0@1251@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 0))
        $q0@1251@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 813 | !(0 <= $q0@1251@01 && $q0@1251@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1235@01, 0))|)]
(assert (not
  (and
    (<= 0 $q0@1251@01)
    (<
      $q0@1251@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 0)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q0@1251@01)
    (<
      $q0@1251@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 0)))))
  (and
    (<= 0 $q0@1251@01)
    (<
      $q0@1251@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 0))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 0))
          $q0@1251@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 0))
            $q0@1251@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q0@1251@01)
      (<
        $q0@1251@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 0))))))
  (and
    (<= 0 $q0@1251@01)
    (<
      $q0@1251@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 0)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@1251@01 Int)) (!
  (and
    (or (<= 0 $q0@1251@01) (not (<= 0 $q0@1251@01)))
    (=>
      (and
        (<= 0 $q0@1251@01)
        (<
          $q0@1251@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 0)))))
      (and
        (<= 0 $q0@1251@01)
        (<
          $q0@1251@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 0))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 0))
              $q0@1251@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 0))
                $q0@1251@01))))))
    (or
      (not
        (and
          (<= 0 $q0@1251@01)
          (<
            $q0@1251@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 0))))))
      (and
        (<= 0 $q0@1251@01)
        (<
          $q0@1251@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 0)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 0))
    $q0@1251@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2162@11@2162@346-aux|)))
(assert (forall (($q0@1251@01 Int)) (!
  (=>
    (and
      (<= 0 $q0@1251@01)
      (<
        $q0@1251@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 0)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 0))
          $q0@1251@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 0))
          $q0@1251@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 0))
    $q0@1251@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2162@11@2162@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
(declare-const $t@1252@01 $Snap)
(assert (= $t@1252@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(assert (=
  (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1)))
  12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $t@1253@01 $Snap)
(assert (= $t@1253@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $q1@1254@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 815 | !(0 <= $q1@1254@01) | live]
; [else-branch: 815 | 0 <= $q1@1254@01 | live]
(push) ; 5
; [then-branch: 815 | !(0 <= $q1@1254@01)]
(assert (not (<= 0 $q1@1254@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 815 | 0 <= $q1@1254@01]
(assert (<= 0 $q1@1254@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@1254@01) (not (<= 0 $q1@1254@01))))
(push) ; 4
; [then-branch: 816 | 0 <= $q1@1254@01 && $q1@1254@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1235@01, 1))| | live]
; [else-branch: 816 | !(0 <= $q1@1254@01 && $q1@1254@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1235@01, 1))|) | live]
(push) ; 5
; [then-branch: 816 | 0 <= $q1@1254@01 && $q1@1254@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1235@01, 1))|]
(assert (and
  (<= 0 $q1@1254@01)
  (<
    $q1@1254@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))))))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 6
(assert (not (>= $q1@1254@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 816 | !(0 <= $q1@1254@01 && $q1@1254@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1235@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@1254@01)
    (<
      $q1@1254@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@1254@01)
      (<
        $q1@1254@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))))))
  (and
    (<= 0 $q1@1254@01)
    (<
      $q1@1254@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@1254@01 Int)) (!
  (and
    (or (<= 0 $q1@1254@01) (not (<= 0 $q1@1254@01)))
    (or
      (not
        (and
          (<= 0 $q1@1254@01)
          (<
            $q1@1254@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))))))
      (and
        (<= 0 $q1@1254@01)
        (<
          $q1@1254@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
    $q1@1254@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2164@11@2164@228-aux|)))
(assert (forall (($q1@1254@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@1254@01)
      (<
        $q1@1254@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
          $q1@1254@01))
      12))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
    $q1@1254@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2164@11@2164@228|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     (forall $q2: Int ::
;       { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] }
;       0 <= $q2 &&
;       $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==>
;       -170141183460469231731687303715884105728 <=
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] &&
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <=
;       170141183460469231731687303715884105727))
(declare-const $t@1255@01 $Snap)
(assert (= $t@1255@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727))
(declare-const $q1@1256@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 817 | !(0 <= $q1@1256@01) | live]
; [else-branch: 817 | 0 <= $q1@1256@01 | live]
(push) ; 5
; [then-branch: 817 | !(0 <= $q1@1256@01)]
(assert (not (<= 0 $q1@1256@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 817 | 0 <= $q1@1256@01]
(assert (<= 0 $q1@1256@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@1256@01) (not (<= 0 $q1@1256@01))))
(push) ; 4
; [then-branch: 818 | 0 <= $q1@1256@01 && $q1@1256@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1235@01, 1))| | live]
; [else-branch: 818 | !(0 <= $q1@1256@01 && $q1@1256@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1235@01, 1))|) | live]
(push) ; 5
; [then-branch: 818 | 0 <= $q1@1256@01 && $q1@1256@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1235@01, 1))|]
(assert (and
  (<= 0 $q1@1256@01)
  (<
    $q1@1256@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))))))
; [eval] (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
(declare-const $q2@1257@01 Int)
(push) ; 6
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] 0 <= $q2
(push) ; 7
; [then-branch: 819 | !(0 <= $q2@1257@01) | live]
; [else-branch: 819 | 0 <= $q2@1257@01 | live]
(push) ; 8
; [then-branch: 819 | !(0 <= $q2@1257@01)]
(assert (not (<= 0 $q2@1257@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 819 | 0 <= $q2@1257@01]
(assert (<= 0 $q2@1257@01))
; [eval] $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@1256@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q2@1257@01) (not (<= 0 $q2@1257@01))))
(push) ; 7
; [then-branch: 820 | 0 <= $q2@1257@01 && $q2@1257@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1235@01, 1))[$q1@1256@01]| | live]
; [else-branch: 820 | !(0 <= $q2@1257@01 && $q2@1257@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1235@01, 1))[$q1@1256@01]|) | live]
(push) ; 8
; [then-branch: 820 | 0 <= $q2@1257@01 && $q2@1257@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1235@01, 1))[$q1@1256@01]|]
(assert (and
  (<= 0 $q2@1257@01)
  (<
    $q2@1257@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
        $q1@1256@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@1256@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q2@1257@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 821 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1235@01, 1))[$q1@1256@01][$q2@1257@01]) | live]
; [else-branch: 821 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1235@01, 1))[$q1@1256@01][$q2@1257@01] | live]
(push) ; 10
; [then-branch: 821 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1235@01, 1))[$q1@1256@01][$q2@1257@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
        $q1@1256@01)
      $q2@1257@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 821 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1235@01, 1))[$q1@1256@01][$q2@1257@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
      $q1@1256@01)
    $q2@1257@01)))
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 11
(assert (not (>= $q1@1256@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= $q2@1257@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
        $q1@1256@01)
      $q2@1257@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
          $q1@1256@01)
        $q2@1257@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 820 | !(0 <= $q2@1257@01 && $q2@1257@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1235@01, 1))[$q1@1256@01]|)]
(assert (not
  (and
    (<= 0 $q2@1257@01)
    (<
      $q2@1257@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
          $q1@1256@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q2@1257@01)
    (<
      $q2@1257@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
          $q1@1256@01))))
  (and
    (<= 0 $q2@1257@01)
    (<
      $q2@1257@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
          $q1@1256@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
            $q1@1256@01)
          $q2@1257@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
              $q1@1256@01)
            $q2@1257@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q2@1257@01)
      (<
        $q2@1257@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
            $q1@1256@01)))))
  (and
    (<= 0 $q2@1257@01)
    (<
      $q2@1257@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
          $q1@1256@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@1257@01 Int)) (!
  (and
    (or (<= 0 $q2@1257@01) (not (<= 0 $q2@1257@01)))
    (=>
      (and
        (<= 0 $q2@1257@01)
        (<
          $q2@1257@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
              $q1@1256@01))))
      (and
        (<= 0 $q2@1257@01)
        (<
          $q2@1257@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
              $q1@1256@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
                $q1@1256@01)
              $q2@1257@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
                  $q1@1256@01)
                $q2@1257@01))))))
    (or
      (not
        (and
          (<= 0 $q2@1257@01)
          (<
            $q2@1257@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
                $q1@1256@01)))))
      (and
        (<= 0 $q2@1257@01)
        (<
          $q2@1257@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
              $q1@1256@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
      $q1@1256@01)
    $q2@1257@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2165@166@2165@541-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 818 | !(0 <= $q1@1256@01 && $q1@1256@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1235@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@1256@01)
    (<
      $q1@1256@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q1@1256@01)
    (<
      $q1@1256@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1)))))
  (and
    (<= 0 $q1@1256@01)
    (<
      $q1@1256@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))))
    (forall (($q2@1257@01 Int)) (!
      (and
        (or (<= 0 $q2@1257@01) (not (<= 0 $q2@1257@01)))
        (=>
          (and
            (<= 0 $q2@1257@01)
            (<
              $q2@1257@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
                  $q1@1256@01))))
          (and
            (<= 0 $q2@1257@01)
            (<
              $q2@1257@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
                  $q1@1256@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
                    $q1@1256@01)
                  $q2@1257@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
                      $q1@1256@01)
                    $q2@1257@01))))))
        (or
          (not
            (and
              (<= 0 $q2@1257@01)
              (<
                $q2@1257@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
                    $q1@1256@01)))))
          (and
            (<= 0 $q2@1257@01)
            (<
              $q2@1257@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
                  $q1@1256@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
          $q1@1256@01)
        $q2@1257@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2165@166@2165@541-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@1256@01)
      (<
        $q1@1256@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))))))
  (and
    (<= 0 $q1@1256@01)
    (<
      $q1@1256@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@1256@01 Int)) (!
  (and
    (or (<= 0 $q1@1256@01) (not (<= 0 $q1@1256@01)))
    (=>
      (and
        (<= 0 $q1@1256@01)
        (<
          $q1@1256@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1)))))
      (and
        (<= 0 $q1@1256@01)
        (<
          $q1@1256@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))))
        (forall (($q2@1257@01 Int)) (!
          (and
            (or (<= 0 $q2@1257@01) (not (<= 0 $q2@1257@01)))
            (=>
              (and
                (<= 0 $q2@1257@01)
                (<
                  $q2@1257@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
                      $q1@1256@01))))
              (and
                (<= 0 $q2@1257@01)
                (<
                  $q2@1257@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
                      $q1@1256@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
                        $q1@1256@01)
                      $q2@1257@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
                          $q1@1256@01)
                        $q2@1257@01))))))
            (or
              (not
                (and
                  (<= 0 $q2@1257@01)
                  (<
                    $q2@1257@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
                        $q1@1256@01)))))
              (and
                (<= 0 $q2@1257@01)
                (<
                  $q2@1257@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
                      $q1@1256@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
              $q1@1256@01)
            $q2@1257@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2165@166@2165@541-aux|))))
    (or
      (not
        (and
          (<= 0 $q1@1256@01)
          (<
            $q1@1256@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))))))
      (and
        (<= 0 $q1@1256@01)
        (<
          $q1@1256@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
    $q1@1256@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2165@11@2165@542-aux|)))
(assert (forall (($q1@1256@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@1256@01)
      (<
        $q1@1256@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1)))))
    (forall (($q2@1257@01 Int)) (!
      (=>
        (and
          (<= 0 $q2@1257@01)
          (<
            $q2@1257@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
                $q1@1256@01))))
        (and
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
                $q1@1256@01)
              $q2@1257@01))
          (<=
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
                $q1@1256@01)
              $q2@1257@01)
            170141183460469231731687303715884105727)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
          $q1@1256@01)
        $q2@1257@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2165@166@2165@541|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1235@01 1))
    $q1@1256@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2165@11@2165@542|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
(declare-const $t@1258@01 $Snap)
(assert (= $t@1258@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(assert (=
  (Seq_length
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2)))
  2))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $t@1259@01 $Snap)
(assert (= $t@1259@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $q3@1260@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 822 | !(0 <= $q3@1260@01) | live]
; [else-branch: 822 | 0 <= $q3@1260@01 | live]
(push) ; 5
; [then-branch: 822 | !(0 <= $q3@1260@01)]
(assert (not (<= 0 $q3@1260@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 822 | 0 <= $q3@1260@01]
(assert (<= 0 $q3@1260@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1260@01) (not (<= 0 $q3@1260@01))))
(push) ; 4
; [then-branch: 823 | 0 <= $q3@1260@01 && $q3@1260@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))| | live]
; [else-branch: 823 | !(0 <= $q3@1260@01 && $q3@1260@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))|) | live]
(push) ; 5
; [then-branch: 823 | 0 <= $q3@1260@01 && $q3@1260@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))|]
(assert (and
  (<= 0 $q3@1260@01)
  (<
    $q3@1260@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 6
(assert (not (>= $q3@1260@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 823 | !(0 <= $q3@1260@01 && $q3@1260@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1260@01)
    (<
      $q3@1260@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1260@01)
      (<
        $q3@1260@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))))))
  (and
    (<= 0 $q3@1260@01)
    (<
      $q3@1260@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1260@01 Int)) (!
  (and
    (or (<= 0 $q3@1260@01) (not (<= 0 $q3@1260@01)))
    (or
      (not
        (and
          (<= 0 $q3@1260@01)
          (<
            $q3@1260@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))))))
      (and
        (<= 0 $q3@1260@01)
        (<
          $q3@1260@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
    $q3@1260@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2167@11@2167@242-aux|)))
(assert (forall (($q3@1260@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1260@01)
      (<
        $q3@1260@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
          $q3@1260@01))
      2))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
    $q3@1260@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2167@11@2167@242|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==
;       2))
(declare-const $t@1261@01 $Snap)
(assert (= $t@1261@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2))
(declare-const $q3@1262@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 824 | !(0 <= $q3@1262@01) | live]
; [else-branch: 824 | 0 <= $q3@1262@01 | live]
(push) ; 5
; [then-branch: 824 | !(0 <= $q3@1262@01)]
(assert (not (<= 0 $q3@1262@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 824 | 0 <= $q3@1262@01]
(assert (<= 0 $q3@1262@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1262@01) (not (<= 0 $q3@1262@01))))
(push) ; 4
; [then-branch: 825 | 0 <= $q3@1262@01 && $q3@1262@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))| | live]
; [else-branch: 825 | !(0 <= $q3@1262@01 && $q3@1262@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))|) | live]
(push) ; 5
; [then-branch: 825 | 0 <= $q3@1262@01 && $q3@1262@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))|]
(assert (and
  (<= 0 $q3@1262@01)
  (<
    $q3@1262@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
(declare-const $q4@1263@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 826 | !(0 <= $q4@1263@01) | live]
; [else-branch: 826 | 0 <= $q4@1263@01 | live]
(push) ; 8
; [then-branch: 826 | !(0 <= $q4@1263@01)]
(assert (not (<= 0 $q4@1263@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 826 | 0 <= $q4@1263@01]
(assert (<= 0 $q4@1263@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1262@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@1263@01) (not (<= 0 $q4@1263@01))))
(push) ; 7
; [then-branch: 827 | 0 <= $q4@1263@01 && $q4@1263@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))[$q3@1262@01]| | live]
; [else-branch: 827 | !(0 <= $q4@1263@01 && $q4@1263@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))[$q3@1262@01]|) | live]
(push) ; 8
; [then-branch: 827 | 0 <= $q4@1263@01 && $q4@1263@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))[$q3@1262@01]|]
(assert (and
  (<= 0 $q4@1263@01)
  (<
    $q4@1263@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
        $q3@1262@01)))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1262@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q4@1263@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 827 | !(0 <= $q4@1263@01 && $q4@1263@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))[$q3@1262@01]|)]
(assert (not
  (and
    (<= 0 $q4@1263@01)
    (<
      $q4@1263@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
          $q3@1262@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@1263@01)
      (<
        $q4@1263@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
            $q3@1262@01)))))
  (and
    (<= 0 $q4@1263@01)
    (<
      $q4@1263@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
          $q3@1262@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1263@01 Int)) (!
  (and
    (or (<= 0 $q4@1263@01) (not (<= 0 $q4@1263@01)))
    (or
      (not
        (and
          (<= 0 $q4@1263@01)
          (<
            $q4@1263@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                $q3@1262@01)))))
      (and
        (<= 0 $q4@1263@01)
        (<
          $q4@1263@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
              $q3@1262@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
      $q3@1262@01)
    $q4@1263@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2168@176@2168@422-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 825 | !(0 <= $q3@1262@01 && $q3@1262@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1262@01)
    (<
      $q3@1262@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@1262@01)
    (<
      $q3@1262@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2)))))
  (and
    (<= 0 $q3@1262@01)
    (<
      $q3@1262@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))))
    (forall (($q4@1263@01 Int)) (!
      (and
        (or (<= 0 $q4@1263@01) (not (<= 0 $q4@1263@01)))
        (or
          (not
            (and
              (<= 0 $q4@1263@01)
              (<
                $q4@1263@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                    $q3@1262@01)))))
          (and
            (<= 0 $q4@1263@01)
            (<
              $q4@1263@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                  $q3@1262@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
          $q3@1262@01)
        $q4@1263@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2168@176@2168@422-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1262@01)
      (<
        $q3@1262@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))))))
  (and
    (<= 0 $q3@1262@01)
    (<
      $q3@1262@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1262@01 Int)) (!
  (and
    (or (<= 0 $q3@1262@01) (not (<= 0 $q3@1262@01)))
    (=>
      (and
        (<= 0 $q3@1262@01)
        (<
          $q3@1262@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2)))))
      (and
        (<= 0 $q3@1262@01)
        (<
          $q3@1262@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))))
        (forall (($q4@1263@01 Int)) (!
          (and
            (or (<= 0 $q4@1263@01) (not (<= 0 $q4@1263@01)))
            (or
              (not
                (and
                  (<= 0 $q4@1263@01)
                  (<
                    $q4@1263@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                        $q3@1262@01)))))
              (and
                (<= 0 $q4@1263@01)
                (<
                  $q4@1263@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                      $q3@1262@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
              $q3@1262@01)
            $q4@1263@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2168@176@2168@422-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@1262@01)
          (<
            $q3@1262@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))))))
      (and
        (<= 0 $q3@1262@01)
        (<
          $q3@1262@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
    $q3@1262@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2168@11@2168@423-aux|)))
(assert (forall (($q3@1262@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1262@01)
      (<
        $q3@1262@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2)))))
    (forall (($q4@1263@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@1263@01)
          (<
            $q4@1263@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                $q3@1262@01))))
        (=
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                $q3@1262@01)
              $q4@1263@01))
          2))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
          $q3@1262@01)
        $q4@1263@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2168@176@2168@422|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
    $q3@1262@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2168@11@2168@423|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       (forall $q5: Int ::
;         { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] }
;         0 <= $q5 &&
;         $q5 <
;         |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==>
;         -170141183460469231731687303715884105728 <=
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] &&
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <=
;         170141183460469231731687303715884105727)))
(declare-const $t@1264@01 $Snap)
(assert (= $t@1264@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)))
(declare-const $q3@1265@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 828 | !(0 <= $q3@1265@01) | live]
; [else-branch: 828 | 0 <= $q3@1265@01 | live]
(push) ; 5
; [then-branch: 828 | !(0 <= $q3@1265@01)]
(assert (not (<= 0 $q3@1265@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 828 | 0 <= $q3@1265@01]
(assert (<= 0 $q3@1265@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1265@01) (not (<= 0 $q3@1265@01))))
(push) ; 4
; [then-branch: 829 | 0 <= $q3@1265@01 && $q3@1265@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))| | live]
; [else-branch: 829 | !(0 <= $q3@1265@01 && $q3@1265@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))|) | live]
(push) ; 5
; [then-branch: 829 | 0 <= $q3@1265@01 && $q3@1265@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))|]
(assert (and
  (<= 0 $q3@1265@01)
  (<
    $q3@1265@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
(declare-const $q4@1266@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 830 | !(0 <= $q4@1266@01) | live]
; [else-branch: 830 | 0 <= $q4@1266@01 | live]
(push) ; 8
; [then-branch: 830 | !(0 <= $q4@1266@01)]
(assert (not (<= 0 $q4@1266@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 830 | 0 <= $q4@1266@01]
(assert (<= 0 $q4@1266@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1265@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@1266@01) (not (<= 0 $q4@1266@01))))
(push) ; 7
; [then-branch: 831 | 0 <= $q4@1266@01 && $q4@1266@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))[$q3@1265@01]| | live]
; [else-branch: 831 | !(0 <= $q4@1266@01 && $q4@1266@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))[$q3@1265@01]|) | live]
(push) ; 8
; [then-branch: 831 | 0 <= $q4@1266@01 && $q4@1266@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))[$q3@1265@01]|]
(assert (and
  (<= 0 $q4@1266@01)
  (<
    $q4@1266@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
        $q3@1265@01)))))
; [eval] (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
(declare-const $q5@1267@01 Int)
(push) ; 9
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] 0 <= $q5
(push) ; 10
; [then-branch: 832 | !(0 <= $q5@1267@01) | live]
; [else-branch: 832 | 0 <= $q5@1267@01 | live]
(push) ; 11
; [then-branch: 832 | !(0 <= $q5@1267@01)]
(assert (not (<= 0 $q5@1267@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 832 | 0 <= $q5@1267@01]
(assert (<= 0 $q5@1267@01))
; [eval] $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@1265@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@1266@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q5@1267@01) (not (<= 0 $q5@1267@01))))
(push) ; 10
; [then-branch: 833 | 0 <= $q5@1267@01 && $q5@1267@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))[$q3@1265@01][$q4@1266@01]| | live]
; [else-branch: 833 | !(0 <= $q5@1267@01 && $q5@1267@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))[$q3@1265@01][$q4@1266@01]|) | live]
(push) ; 11
; [then-branch: 833 | 0 <= $q5@1267@01 && $q5@1267@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))[$q3@1265@01][$q4@1266@01]|]
(assert (and
  (<= 0 $q5@1267@01)
  (<
    $q5@1267@01
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
          $q3@1265@01)
        $q4@1266@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@1265@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@1266@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q5@1267@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 834 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))[$q3@1265@01][$q4@1266@01][$q5@1267@01]) | live]
; [else-branch: 834 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))[$q3@1265@01][$q4@1266@01][$q5@1267@01] | live]
(push) ; 13
; [then-branch: 834 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))[$q3@1265@01][$q4@1266@01][$q5@1267@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
          $q3@1265@01)
        $q4@1266@01)
      $q5@1267@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 834 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))[$q3@1265@01][$q4@1266@01][$q5@1267@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
        $q3@1265@01)
      $q4@1266@01)
    $q5@1267@01)))
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 14
(assert (not (>= $q3@1265@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q4@1266@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q5@1267@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
          $q3@1265@01)
        $q4@1266@01)
      $q5@1267@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
            $q3@1265@01)
          $q4@1266@01)
        $q5@1267@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 833 | !(0 <= $q5@1267@01 && $q5@1267@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))[$q3@1265@01][$q4@1266@01]|)]
(assert (not
  (and
    (<= 0 $q5@1267@01)
    (<
      $q5@1267@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
            $q3@1265@01)
          $q4@1266@01))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q5@1267@01)
    (<
      $q5@1267@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
            $q3@1265@01)
          $q4@1266@01))))
  (and
    (<= 0 $q5@1267@01)
    (<
      $q5@1267@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
            $q3@1265@01)
          $q4@1266@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
              $q3@1265@01)
            $q4@1266@01)
          $q5@1267@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                $q3@1265@01)
              $q4@1266@01)
            $q5@1267@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q5@1267@01)
      (<
        $q5@1267@01
        (Seq_length
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
              $q3@1265@01)
            $q4@1266@01)))))
  (and
    (<= 0 $q5@1267@01)
    (<
      $q5@1267@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
            $q3@1265@01)
          $q4@1266@01))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@1267@01 Int)) (!
  (and
    (or (<= 0 $q5@1267@01) (not (<= 0 $q5@1267@01)))
    (=>
      (and
        (<= 0 $q5@1267@01)
        (<
          $q5@1267@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                $q3@1265@01)
              $q4@1266@01))))
      (and
        (<= 0 $q5@1267@01)
        (<
          $q5@1267@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                $q3@1265@01)
              $q4@1266@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                  $q3@1265@01)
                $q4@1266@01)
              $q5@1267@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                    $q3@1265@01)
                  $q4@1266@01)
                $q5@1267@01))))))
    (or
      (not
        (and
          (<= 0 $q5@1267@01)
          (<
            $q5@1267@01
            (Seq_length
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                  $q3@1265@01)
                $q4@1266@01)))))
      (and
        (<= 0 $q5@1267@01)
        (<
          $q5@1267@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                $q3@1265@01)
              $q4@1266@01))))))
  :pattern ((Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
        $q3@1265@01)
      $q4@1266@01)
    $q5@1267@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2169@351@2169@766-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 831 | !(0 <= $q4@1266@01 && $q4@1266@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))[$q3@1265@01]|)]
(assert (not
  (and
    (<= 0 $q4@1266@01)
    (<
      $q4@1266@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
          $q3@1265@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q4@1266@01)
    (<
      $q4@1266@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
          $q3@1265@01))))
  (and
    (<= 0 $q4@1266@01)
    (<
      $q4@1266@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
          $q3@1265@01)))
    (forall (($q5@1267@01 Int)) (!
      (and
        (or (<= 0 $q5@1267@01) (not (<= 0 $q5@1267@01)))
        (=>
          (and
            (<= 0 $q5@1267@01)
            (<
              $q5@1267@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                    $q3@1265@01)
                  $q4@1266@01))))
          (and
            (<= 0 $q5@1267@01)
            (<
              $q5@1267@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                    $q3@1265@01)
                  $q4@1266@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                      $q3@1265@01)
                    $q4@1266@01)
                  $q5@1267@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                        $q3@1265@01)
                      $q4@1266@01)
                    $q5@1267@01))))))
        (or
          (not
            (and
              (<= 0 $q5@1267@01)
              (<
                $q5@1267@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                      $q3@1265@01)
                    $q4@1266@01)))))
          (and
            (<= 0 $q5@1267@01)
            (<
              $q5@1267@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                    $q3@1265@01)
                  $q4@1266@01))))))
      :pattern ((Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
            $q3@1265@01)
          $q4@1266@01)
        $q5@1267@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2169@351@2169@766-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@1266@01)
      (<
        $q4@1266@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
            $q3@1265@01)))))
  (and
    (<= 0 $q4@1266@01)
    (<
      $q4@1266@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
          $q3@1265@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1266@01 Int)) (!
  (and
    (or (<= 0 $q4@1266@01) (not (<= 0 $q4@1266@01)))
    (=>
      (and
        (<= 0 $q4@1266@01)
        (<
          $q4@1266@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
              $q3@1265@01))))
      (and
        (<= 0 $q4@1266@01)
        (<
          $q4@1266@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
              $q3@1265@01)))
        (forall (($q5@1267@01 Int)) (!
          (and
            (or (<= 0 $q5@1267@01) (not (<= 0 $q5@1267@01)))
            (=>
              (and
                (<= 0 $q5@1267@01)
                (<
                  $q5@1267@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                        $q3@1265@01)
                      $q4@1266@01))))
              (and
                (<= 0 $q5@1267@01)
                (<
                  $q5@1267@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                        $q3@1265@01)
                      $q4@1266@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                          $q3@1265@01)
                        $q4@1266@01)
                      $q5@1267@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                            $q3@1265@01)
                          $q4@1266@01)
                        $q5@1267@01))))))
            (or
              (not
                (and
                  (<= 0 $q5@1267@01)
                  (<
                    $q5@1267@01
                    (Seq_length
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                          $q3@1265@01)
                        $q4@1266@01)))))
              (and
                (<= 0 $q5@1267@01)
                (<
                  $q5@1267@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                        $q3@1265@01)
                      $q4@1266@01))))))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                $q3@1265@01)
              $q4@1266@01)
            $q5@1267@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2169@351@2169@766-aux|))))
    (or
      (not
        (and
          (<= 0 $q4@1266@01)
          (<
            $q4@1266@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                $q3@1265@01)))))
      (and
        (<= 0 $q4@1266@01)
        (<
          $q4@1266@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
              $q3@1265@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
      $q3@1265@01)
    $q4@1266@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2169@176@2169@767-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 829 | !(0 <= $q3@1265@01 && $q3@1265@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1235@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1265@01)
    (<
      $q3@1265@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@1265@01)
    (<
      $q3@1265@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2)))))
  (and
    (<= 0 $q3@1265@01)
    (<
      $q3@1265@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))))
    (forall (($q4@1266@01 Int)) (!
      (and
        (or (<= 0 $q4@1266@01) (not (<= 0 $q4@1266@01)))
        (=>
          (and
            (<= 0 $q4@1266@01)
            (<
              $q4@1266@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                  $q3@1265@01))))
          (and
            (<= 0 $q4@1266@01)
            (<
              $q4@1266@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                  $q3@1265@01)))
            (forall (($q5@1267@01 Int)) (!
              (and
                (or (<= 0 $q5@1267@01) (not (<= 0 $q5@1267@01)))
                (=>
                  (and
                    (<= 0 $q5@1267@01)
                    (<
                      $q5@1267@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                            $q3@1265@01)
                          $q4@1266@01))))
                  (and
                    (<= 0 $q5@1267@01)
                    (<
                      $q5@1267@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                            $q3@1265@01)
                          $q4@1266@01)))
                    (or
                      (<=
                        (- 0 170141183460469231731687303715884105728)
                        (Seq_index
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                              $q3@1265@01)
                            $q4@1266@01)
                          $q5@1267@01))
                      (not
                        (<=
                          (- 0 170141183460469231731687303715884105728)
                          (Seq_index
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                                $q3@1265@01)
                              $q4@1266@01)
                            $q5@1267@01))))))
                (or
                  (not
                    (and
                      (<= 0 $q5@1267@01)
                      (<
                        $q5@1267@01
                        (Seq_length
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                              $q3@1265@01)
                            $q4@1266@01)))))
                  (and
                    (<= 0 $q5@1267@01)
                    (<
                      $q5@1267@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                            $q3@1265@01)
                          $q4@1266@01))))))
              :pattern ((Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                    $q3@1265@01)
                  $q4@1266@01)
                $q5@1267@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2169@351@2169@766-aux|))))
        (or
          (not
            (and
              (<= 0 $q4@1266@01)
              (<
                $q4@1266@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                    $q3@1265@01)))))
          (and
            (<= 0 $q4@1266@01)
            (<
              $q4@1266@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                  $q3@1265@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
          $q3@1265@01)
        $q4@1266@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2169@176@2169@767-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1265@01)
      (<
        $q3@1265@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))))))
  (and
    (<= 0 $q3@1265@01)
    (<
      $q3@1265@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1265@01 Int)) (!
  (and
    (or (<= 0 $q3@1265@01) (not (<= 0 $q3@1265@01)))
    (=>
      (and
        (<= 0 $q3@1265@01)
        (<
          $q3@1265@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2)))))
      (and
        (<= 0 $q3@1265@01)
        (<
          $q3@1265@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))))
        (forall (($q4@1266@01 Int)) (!
          (and
            (or (<= 0 $q4@1266@01) (not (<= 0 $q4@1266@01)))
            (=>
              (and
                (<= 0 $q4@1266@01)
                (<
                  $q4@1266@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                      $q3@1265@01))))
              (and
                (<= 0 $q4@1266@01)
                (<
                  $q4@1266@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                      $q3@1265@01)))
                (forall (($q5@1267@01 Int)) (!
                  (and
                    (or (<= 0 $q5@1267@01) (not (<= 0 $q5@1267@01)))
                    (=>
                      (and
                        (<= 0 $q5@1267@01)
                        (<
                          $q5@1267@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                                $q3@1265@01)
                              $q4@1266@01))))
                      (and
                        (<= 0 $q5@1267@01)
                        (<
                          $q5@1267@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                                $q3@1265@01)
                              $q4@1266@01)))
                        (or
                          (<=
                            (- 0 170141183460469231731687303715884105728)
                            (Seq_index
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                                  $q3@1265@01)
                                $q4@1266@01)
                              $q5@1267@01))
                          (not
                            (<=
                              (- 0 170141183460469231731687303715884105728)
                              (Seq_index
                                (Seq_index
                                  (Seq_index
                                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                                    $q3@1265@01)
                                  $q4@1266@01)
                                $q5@1267@01))))))
                    (or
                      (not
                        (and
                          (<= 0 $q5@1267@01)
                          (<
                            $q5@1267@01
                            (Seq_length
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                                  $q3@1265@01)
                                $q4@1266@01)))))
                      (and
                        (<= 0 $q5@1267@01)
                        (<
                          $q5@1267@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                                $q3@1265@01)
                              $q4@1266@01))))))
                  :pattern ((Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                        $q3@1265@01)
                      $q4@1266@01)
                    $q5@1267@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2169@351@2169@766-aux|))))
            (or
              (not
                (and
                  (<= 0 $q4@1266@01)
                  (<
                    $q4@1266@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                        $q3@1265@01)))))
              (and
                (<= 0 $q4@1266@01)
                (<
                  $q4@1266@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                      $q3@1265@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
              $q3@1265@01)
            $q4@1266@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2169@176@2169@767-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@1265@01)
          (<
            $q3@1265@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))))))
      (and
        (<= 0 $q3@1265@01)
        (<
          $q3@1265@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
    $q3@1265@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2169@11@2169@768-aux|)))
(assert (forall (($q3@1265@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1265@01)
      (<
        $q3@1265@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2)))))
    (forall (($q4@1266@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@1266@01)
          (<
            $q4@1266@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                $q3@1265@01))))
        (forall (($q5@1267@01 Int)) (!
          (=>
            (and
              (<= 0 $q5@1267@01)
              (<
                $q5@1267@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                      $q3@1265@01)
                    $q4@1266@01))))
            (and
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                      $q3@1265@01)
                    $q4@1266@01)
                  $q5@1267@01))
              (<=
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                      $q3@1265@01)
                    $q4@1266@01)
                  $q5@1267@01)
                170141183460469231731687303715884105727)))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
                $q3@1265@01)
              $q4@1266@01)
            $q5@1267@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2169@351@2169@766|)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
          $q3@1265@01)
        $q4@1266@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2169@176@2169@767|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1235@01 2))
    $q3@1265@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2169@11@2169@768|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
(declare-const $t@1268@01 $Snap)
(assert (= $t@1268@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3))) 1000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] }
;     0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] &&
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <=
;     170141183460469231731687303715884105727)
(declare-const $t@1269@01 $Snap)
(assert (= $t@1269@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] } 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727)
(declare-const $q6@1270@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] 0 <= $q6
(push) ; 4
; [then-branch: 835 | !(0 <= $q6@1270@01) | live]
; [else-branch: 835 | 0 <= $q6@1270@01 | live]
(push) ; 5
; [then-branch: 835 | !(0 <= $q6@1270@01)]
(assert (not (<= 0 $q6@1270@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 835 | 0 <= $q6@1270@01]
(assert (<= 0 $q6@1270@01))
; [eval] $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q6@1270@01) (not (<= 0 $q6@1270@01))))
(push) ; 4
; [then-branch: 836 | 0 <= $q6@1270@01 && $q6@1270@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1235@01, 3))| | live]
; [else-branch: 836 | !(0 <= $q6@1270@01 && $q6@1270@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1235@01, 3))|) | live]
(push) ; 5
; [then-branch: 836 | 0 <= $q6@1270@01 && $q6@1270@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1235@01, 3))|]
(assert (and
  (<= 0 $q6@1270@01)
  (<
    $q6@1270@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (>= $q6@1270@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 837 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1235@01, 3))[$q6@1270@01]) | live]
; [else-branch: 837 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1235@01, 3))[$q6@1270@01] | live]
(push) ; 7
; [then-branch: 837 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1235@01, 3))[$q6@1270@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3))
      $q6@1270@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 837 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1235@01, 3))[$q6@1270@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3))
    $q6@1270@01)))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (>= $q6@1270@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3))
      $q6@1270@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3))
        $q6@1270@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 836 | !(0 <= $q6@1270@01 && $q6@1270@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1235@01, 3))|)]
(assert (not
  (and
    (<= 0 $q6@1270@01)
    (<
      $q6@1270@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q6@1270@01)
    (<
      $q6@1270@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3)))))
  (and
    (<= 0 $q6@1270@01)
    (<
      $q6@1270@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3))
          $q6@1270@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3))
            $q6@1270@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q6@1270@01)
      (<
        $q6@1270@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3))))))
  (and
    (<= 0 $q6@1270@01)
    (<
      $q6@1270@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1270@01 Int)) (!
  (and
    (or (<= 0 $q6@1270@01) (not (<= 0 $q6@1270@01)))
    (=>
      (and
        (<= 0 $q6@1270@01)
        (<
          $q6@1270@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3)))))
      (and
        (<= 0 $q6@1270@01)
        (<
          $q6@1270@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3))
              $q6@1270@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3))
                $q6@1270@01))))))
    (or
      (not
        (and
          (<= 0 $q6@1270@01)
          (<
            $q6@1270@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3))))))
      (and
        (<= 0 $q6@1270@01)
        (<
          $q6@1270@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3))
    $q6@1270@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2171@11@2171@346-aux|)))
(assert (forall (($q6@1270@01 Int)) (!
  (=>
    (and
      (<= 0 $q6@1270@01)
      (<
        $q6@1270@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3))
          $q6@1270@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3))
          $q6@1270@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3))
    $q6@1270@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2171@11@2171@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==
;     10)
(declare-const $t@1271@01 $Snap)
(assert (= $t@1271@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10)
(declare-const $q7@1272@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1272@01 Int)) (!
  (=
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1272@01))
    10)
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1272@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2172@11@2172@209|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     (forall $q8: Int ::
;       { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] }
;       0 <= $q8 &&
;       $q8 <
;       |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==>
;       -170141183460469231731687303715884105728 <=
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] &&
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <=
;       170141183460469231731687303715884105727))
(declare-const $t@1273@01 $Snap)
(assert (= $t@1273@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727))
(declare-const $q7@1274@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727)
(declare-const $q8@1275@01 Int)
(push) ; 4
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] 0 <= $q8
(push) ; 5
; [then-branch: 838 | !(0 <= $q8@1275@01) | live]
; [else-branch: 838 | 0 <= $q8@1275@01 | live]
(push) ; 6
; [then-branch: 838 | !(0 <= $q8@1275@01)]
(assert (not (<= 0 $q8@1275@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 838 | 0 <= $q8@1275@01]
(assert (<= 0 $q8@1275@01))
; [eval] $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q8@1275@01) (not (<= 0 $q8@1275@01))))
(push) ; 5
; [then-branch: 839 | 0 <= $q8@1275@01 && $q8@1275@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1235@01, 4)), $q7@1274@01)| | live]
; [else-branch: 839 | !(0 <= $q8@1275@01 && $q8@1275@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1235@01, 4)), $q7@1274@01)|) | live]
(push) ; 6
; [then-branch: 839 | 0 <= $q8@1275@01 && $q8@1275@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1235@01, 4)), $q7@1274@01)|]
(assert (and
  (<= 0 $q8@1275@01)
  (<
    $q8@1275@01
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] -170141183460469231731687303715884105728
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 7
(assert (not (>= $q8@1275@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 840 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1235@01, 4)), $q7@1274@01)[$q8@1275@01]) | live]
; [else-branch: 840 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1235@01, 4)), $q7@1274@01)[$q8@1275@01] | live]
(push) ; 8
; [then-branch: 840 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1235@01, 4)), $q7@1274@01)[$q8@1275@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01)
      $q8@1275@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 840 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1235@01, 4)), $q7@1274@01)[$q8@1275@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01)
    $q8@1275@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 9
(assert (not (>= $q8@1275@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01)
      $q8@1275@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01)
        $q8@1275@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 839 | !(0 <= $q8@1275@01 && $q8@1275@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1235@01, 4)), $q7@1274@01)|)]
(assert (not
  (and
    (<= 0 $q8@1275@01)
    (<
      $q8@1275@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q8@1275@01)
    (<
      $q8@1275@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01))))
  (and
    (<= 0 $q8@1275@01)
    (<
      $q8@1275@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01)
          $q8@1275@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01)
            $q8@1275@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q8@1275@01)
      (<
        $q8@1275@01
        (Seq_length
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01)))))
  (and
    (<= 0 $q8@1275@01)
    (<
      $q8@1275@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q8@1275@01 Int)) (!
  (and
    (or (<= 0 $q8@1275@01) (not (<= 0 $q8@1275@01)))
    (=>
      (and
        (<= 0 $q8@1275@01)
        (<
          $q8@1275@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01))))
      (and
        (<= 0 $q8@1275@01)
        (<
          $q8@1275@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01)
              $q8@1275@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01)
                $q8@1275@01))))))
    (or
      (not
        (and
          (<= 0 $q8@1275@01)
          (<
            $q8@1275@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01)))))
      (and
        (<= 0 $q8@1275@01)
        (<
          $q8@1275@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01))))))
  :pattern ((Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01)
    $q8@1275@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2173@119@2173@606-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1274@01 Int)) (!
  (forall (($q8@1275@01 Int)) (!
    (and
      (or (<= 0 $q8@1275@01) (not (<= 0 $q8@1275@01)))
      (=>
        (and
          (<= 0 $q8@1275@01)
          (<
            $q8@1275@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01))))
        (and
          (<= 0 $q8@1275@01)
          (<
            $q8@1275@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01)))
          (or
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01)
                $q8@1275@01))
            (not
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01)
                  $q8@1275@01))))))
      (or
        (not
          (and
            (<= 0 $q8@1275@01)
            (<
              $q8@1275@01
              (Seq_length
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01)))))
        (and
          (<= 0 $q8@1275@01)
          (<
            $q8@1275@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01))))))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01)
      $q8@1275@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2173@119@2173@606-aux|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2173@11@2173@607-aux|)))
(assert (forall (($q7@1274@01 Int)) (!
  (forall (($q8@1275@01 Int)) (!
    (=>
      (and
        (<= 0 $q8@1275@01)
        (<
          $q8@1275@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01))))
      (and
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01)
            $q8@1275@01))
        (<=
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01)
            $q8@1275@01)
          170141183460469231731687303715884105727)))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01)
      $q8@1275@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2173@119@2173@606|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) $q7@1274@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2173@11@2173@607|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1276@01 $Snap)
(assert (= $t@1276@01 ($Snap.combine ($Snap.first $t@1276@01) ($Snap.second $t@1276@01))))
(assert (= ($Snap.first $t@1276@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1235@01 5))))
(assert (= ($Snap.second $t@1276@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1235@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@1277@01 $Snap)
(assert (= $t@1277@01 ($Snap.combine ($Snap.first $t@1277@01) ($Snap.second $t@1277@01))))
(assert (= ($Snap.first $t@1277@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@1235@01 6))))
(assert (= ($Snap.second $t@1277@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1235@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1278@01 $Snap)
(assert (= $t@1278@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q9@1279@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 841 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1235@01, 8)), $q9@1279@01)) | live]
; [else-branch: 841 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1235@01, 8)), $q9@1279@01) | live]
(push) ; 5
; [then-branch: 841 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1235@01, 8)), $q9@1279@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 8)) $q9@1279@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 841 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1235@01, 8)), $q9@1279@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 8)) $q9@1279@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 8)) $q9@1279@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 8)) $q9@1279@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@1279@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 8)) $q9@1279@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 8)) $q9@1279@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 8)) $q9@1279@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2176@11@2176@345-aux|)))
(assert (forall (($q9@1279@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 8)) $q9@1279@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 8)) $q9@1279@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 8)) $q9@1279@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2176@11@2176@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@1280@01 $Snap)
(assert (= $t@1280@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q9@1281@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@1281@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 8)) $q9@1281@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 8)) $q9@1281@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2177@11@2177@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1282@01 $Snap)
(assert (= $t@1282@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q10@1283@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 842 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1235@01, 9)), $q10@1283@01)) | live]
; [else-branch: 842 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1235@01, 9)), $q10@1283@01) | live]
(push) ; 5
; [then-branch: 842 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1235@01, 9)), $q10@1283@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 9)) $q10@1283@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 842 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1235@01, 9)), $q10@1283@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 9)) $q10@1283@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 9)) $q10@1283@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 9)) $q10@1283@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@1283@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 9)) $q10@1283@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 9)) $q10@1283@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 9)) $q10@1283@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2178@11@2178@349-aux|)))
(assert (forall (($q10@1283@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 9)) $q10@1283@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 9)) $q10@1283@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 9)) $q10@1283@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2178@11@2178@349|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@1284@01 $Snap)
(assert (= $t@1284@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q10@1285@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@1285@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 9)) $q10@1285@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1235@01 9)) $q10@1285@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2179@11@2179@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@1286@01 $Snap)
(assert (= $t@1286@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1235@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1287@01 $Snap)
(assert (= $t@1287@01 ($Snap.combine ($Snap.first $t@1287@01) ($Snap.second $t@1287@01))))
(assert (= ($Snap.first $t@1287@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@1287@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1288@01 $Snap)
(assert (= $t@1288@01 ($Snap.combine ($Snap.first $t@1288@01) ($Snap.second $t@1288@01))))
(assert (= ($Snap.first $t@1288@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1232@01 0))))
(assert (= ($Snap.second $t@1288@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1232@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1289@01 $Snap)
(assert (= $t@1289@01 ($Snap.combine ($Snap.first $t@1289@01) ($Snap.second $t@1289@01))))
(assert (= ($Snap.first $t@1289@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1232@01 1))))
(assert (= ($Snap.second $t@1289@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1232@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1290@01 $Snap)
(assert (= $t@1290@01 ($Snap.combine ($Snap.first $t@1290@01) ($Snap.second $t@1290@01))))
(assert (= ($Snap.first $t@1290@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1232@01 2))))
(assert (= ($Snap.second $t@1290@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1232@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@1291@01 $Snap)
(assert (= $t@1291@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@1232@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1292@01 $Snap)
(assert (= $t@1292@01 ($Snap.combine ($Snap.first $t@1292@01) ($Snap.second $t@1292@01))))
(assert (= ($Snap.first $t@1292@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1232@01 4))))
(assert (= ($Snap.second $t@1292@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1232@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@1293@01 $Snap)
(assert (= $t@1293@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@1232@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1294@01 $Snap)
(assert (= $t@1294@01 ($Snap.combine ($Snap.first $t@1294@01) ($Snap.second $t@1294@01))))
(assert (= ($Snap.first $t@1294@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1231@01 0))))
(assert (= ($Snap.second $t@1294@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1231@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1295@01 $Snap)
(assert (= $t@1295@01 ($Snap.combine ($Snap.first $t@1295@01) ($Snap.second $t@1295@01))))
(assert (= ($Snap.first $t@1295@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1231@01 1))))
(assert (= ($Snap.second $t@1295@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1231@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1296@01 $Snap)
(assert (= $t@1296@01 ($Snap.combine ($Snap.first $t@1296@01) ($Snap.second $t@1296@01))))
(assert (= ($Snap.first $t@1296@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1231@01 2))))
(assert (= ($Snap.second $t@1296@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1231@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@1297@01 $Snap)
(assert (= $t@1297@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1231@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@1298@01 $Snap)
(assert (= $t@1298@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1231@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@1299@01 $Snap)
(assert (= $t@1299@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@1300@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc(self, 3)): Seq[Int])
(declare-const $t@1301@01 $Snap)
(assert (= $t@1301@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@1302@01 $Snap)
(assert (= $t@1302@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1231@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; l$i := 1000
; [eval] !(0 <= l$i && l$i < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 2): Seq[Int])|)
; [eval] 0 <= l$i && l$i < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 2): Seq[Int])|
; [eval] 0 <= l$i
(set-option :timeout 0)
(push) ; 3
; [then-branch: 843 | False | live]
; [else-branch: 843 | True | live]
(push) ; 4
; [then-branch: 843 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 843 | True]
; [eval] l$i < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 2): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 2): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 2): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (<
  1000
  (Seq_length
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) 2)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (<
    1000
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) 2))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 844 | !(1000 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1235@01, 4)), 2)|) | live]
; [else-branch: 844 | 1000 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1235@01, 4)), 2)| | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 844 | !(1000 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1235@01, 4)), 2)|)]
(assert (not
  (<
    1000
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) 2)))))
; [exec]
; label revert
; [exec]
; $succ := false
; [exec]
; $res := l$havoc
; [exec]
; self := $pre_self
; [exec]
; $contracts := $pre_$contracts
; [exec]
; $old_self := $pre_self
; [exec]
; $old_$contracts := $pre_$contracts
; [exec]
; label end
; [exec]
; exhale !$succ
; [eval] !$succ
; [eval] !$succ
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 845 | True | live]
; [else-branch: 845 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 845 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@1303@01 $Snap)
(assert (= $t@1303@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@1247@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@1304@01 $Struct)
(assert (=
  self@1304@01
  ($struct_set<$Struct> self@1235@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@1235@01 5))
    l$havoc$1@1247@01))))
; [exec]
; $contracts := l$havoc$2
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 5
(assert (not (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1304@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1304@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1235@01 3))))
(pop) ; 4
; [then-branch: 846 | False | dead]
; [else-branch: 846 | True | live]
(push) ; 4
; [else-branch: 846 | True]
(pop) ; 4
(pop) ; 3
; [eval] !!(0 <= l$i && l$i < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 2): Seq[Int])|)
; [eval] !(0 <= l$i && l$i < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 2): Seq[Int])|)
; [eval] 0 <= l$i && l$i < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 2): Seq[Int])|
; [eval] 0 <= l$i
(push) ; 3
; [then-branch: 847 | False | live]
; [else-branch: 847 | True | live]
(push) ; 4
; [then-branch: 847 | False]
(assert false)
(pop) ; 4
(push) ; 4
; [else-branch: 847 | True]
; [eval] l$i < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 2): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 2): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), 2): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(set-option :timeout 10)
(assert (not (not
  (<
    1000
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) 2))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 848 | 1000 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1235@01, 4)), 2)| | dead]
; [else-branch: 848 | !(1000 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1235@01, 4)), 2)|) | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 848 | !(1000 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1235@01, 4)), 2)|)]
(assert (not
  (<
    1000
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1235@01 4)) 2)))))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$index_negative_fail ----------
(declare-const l$a@1305@01 Seq<Int>)
(declare-const l$n@1306@01 $Int)
(declare-const $succ@1307@01 Bool)
(declare-const l$a@1308@01 Seq<Int>)
(declare-const l$n@1309@01 $Int)
(declare-const $succ@1310@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@1311@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@1312@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@1313@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@1314@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@1315@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@1316@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@1317@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@1318@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@1319@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@1320@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@1321@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@1322@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@1323@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@1324@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@1325@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@1326@01 $Map<Int~_$Struct>)
; [exec]
; inhale |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
(declare-const $t@1327@01 $Snap)
(assert (= $t@1327@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 0))) 12))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] }
;     0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] &&
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <=
;     170141183460469231731687303715884105727)
(declare-const $t@1328@01 $Snap)
(assert (= $t@1328@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] } 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@1329@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 849 | !(0 <= $q0@1329@01) | live]
; [else-branch: 849 | 0 <= $q0@1329@01 | live]
(push) ; 5
; [then-branch: 849 | !(0 <= $q0@1329@01)]
(assert (not (<= 0 $q0@1329@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 849 | 0 <= $q0@1329@01]
(assert (<= 0 $q0@1329@01))
; [eval] $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@1329@01) (not (<= 0 $q0@1329@01))))
(push) ; 4
; [then-branch: 850 | 0 <= $q0@1329@01 && $q0@1329@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1315@01, 0))| | live]
; [else-branch: 850 | !(0 <= $q0@1329@01 && $q0@1329@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1315@01, 0))|) | live]
(push) ; 5
; [then-branch: 850 | 0 <= $q0@1329@01 && $q0@1329@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1315@01, 0))|]
(assert (and
  (<= 0 $q0@1329@01)
  (<
    $q0@1329@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 0))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (>= $q0@1329@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 851 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1315@01, 0))[$q0@1329@01]) | live]
; [else-branch: 851 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1315@01, 0))[$q0@1329@01] | live]
(push) ; 7
; [then-branch: 851 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1315@01, 0))[$q0@1329@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 0))
      $q0@1329@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 851 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1315@01, 0))[$q0@1329@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 0))
    $q0@1329@01)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (>= $q0@1329@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 0))
      $q0@1329@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 0))
        $q0@1329@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 850 | !(0 <= $q0@1329@01 && $q0@1329@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1315@01, 0))|)]
(assert (not
  (and
    (<= 0 $q0@1329@01)
    (<
      $q0@1329@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 0)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q0@1329@01)
    (<
      $q0@1329@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 0)))))
  (and
    (<= 0 $q0@1329@01)
    (<
      $q0@1329@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 0))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 0))
          $q0@1329@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 0))
            $q0@1329@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q0@1329@01)
      (<
        $q0@1329@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 0))))))
  (and
    (<= 0 $q0@1329@01)
    (<
      $q0@1329@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 0)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@1329@01 Int)) (!
  (and
    (or (<= 0 $q0@1329@01) (not (<= 0 $q0@1329@01)))
    (=>
      (and
        (<= 0 $q0@1329@01)
        (<
          $q0@1329@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 0)))))
      (and
        (<= 0 $q0@1329@01)
        (<
          $q0@1329@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 0))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 0))
              $q0@1329@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 0))
                $q0@1329@01))))))
    (or
      (not
        (and
          (<= 0 $q0@1329@01)
          (<
            $q0@1329@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 0))))))
      (and
        (<= 0 $q0@1329@01)
        (<
          $q0@1329@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 0)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 0))
    $q0@1329@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2262@11@2262@346-aux|)))
(assert (forall (($q0@1329@01 Int)) (!
  (=>
    (and
      (<= 0 $q0@1329@01)
      (<
        $q0@1329@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 0)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 0))
          $q0@1329@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 0))
          $q0@1329@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 0))
    $q0@1329@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2262@11@2262@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
(declare-const $t@1330@01 $Snap)
(assert (= $t@1330@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(assert (=
  (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1)))
  12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $t@1331@01 $Snap)
(assert (= $t@1331@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $q1@1332@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 852 | !(0 <= $q1@1332@01) | live]
; [else-branch: 852 | 0 <= $q1@1332@01 | live]
(push) ; 5
; [then-branch: 852 | !(0 <= $q1@1332@01)]
(assert (not (<= 0 $q1@1332@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 852 | 0 <= $q1@1332@01]
(assert (<= 0 $q1@1332@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@1332@01) (not (<= 0 $q1@1332@01))))
(push) ; 4
; [then-branch: 853 | 0 <= $q1@1332@01 && $q1@1332@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1315@01, 1))| | live]
; [else-branch: 853 | !(0 <= $q1@1332@01 && $q1@1332@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1315@01, 1))|) | live]
(push) ; 5
; [then-branch: 853 | 0 <= $q1@1332@01 && $q1@1332@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1315@01, 1))|]
(assert (and
  (<= 0 $q1@1332@01)
  (<
    $q1@1332@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))))))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 6
(assert (not (>= $q1@1332@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 853 | !(0 <= $q1@1332@01 && $q1@1332@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1315@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@1332@01)
    (<
      $q1@1332@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@1332@01)
      (<
        $q1@1332@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))))))
  (and
    (<= 0 $q1@1332@01)
    (<
      $q1@1332@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@1332@01 Int)) (!
  (and
    (or (<= 0 $q1@1332@01) (not (<= 0 $q1@1332@01)))
    (or
      (not
        (and
          (<= 0 $q1@1332@01)
          (<
            $q1@1332@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))))))
      (and
        (<= 0 $q1@1332@01)
        (<
          $q1@1332@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
    $q1@1332@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2264@11@2264@228-aux|)))
(assert (forall (($q1@1332@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@1332@01)
      (<
        $q1@1332@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
          $q1@1332@01))
      12))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
    $q1@1332@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2264@11@2264@228|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     (forall $q2: Int ::
;       { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] }
;       0 <= $q2 &&
;       $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==>
;       -170141183460469231731687303715884105728 <=
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] &&
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <=
;       170141183460469231731687303715884105727))
(declare-const $t@1333@01 $Snap)
(assert (= $t@1333@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727))
(declare-const $q1@1334@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 854 | !(0 <= $q1@1334@01) | live]
; [else-branch: 854 | 0 <= $q1@1334@01 | live]
(push) ; 5
; [then-branch: 854 | !(0 <= $q1@1334@01)]
(assert (not (<= 0 $q1@1334@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 854 | 0 <= $q1@1334@01]
(assert (<= 0 $q1@1334@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@1334@01) (not (<= 0 $q1@1334@01))))
(push) ; 4
; [then-branch: 855 | 0 <= $q1@1334@01 && $q1@1334@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1315@01, 1))| | live]
; [else-branch: 855 | !(0 <= $q1@1334@01 && $q1@1334@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1315@01, 1))|) | live]
(push) ; 5
; [then-branch: 855 | 0 <= $q1@1334@01 && $q1@1334@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1315@01, 1))|]
(assert (and
  (<= 0 $q1@1334@01)
  (<
    $q1@1334@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))))))
; [eval] (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
(declare-const $q2@1335@01 Int)
(push) ; 6
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] 0 <= $q2
(push) ; 7
; [then-branch: 856 | !(0 <= $q2@1335@01) | live]
; [else-branch: 856 | 0 <= $q2@1335@01 | live]
(push) ; 8
; [then-branch: 856 | !(0 <= $q2@1335@01)]
(assert (not (<= 0 $q2@1335@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 856 | 0 <= $q2@1335@01]
(assert (<= 0 $q2@1335@01))
; [eval] $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@1334@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q2@1335@01) (not (<= 0 $q2@1335@01))))
(push) ; 7
; [then-branch: 857 | 0 <= $q2@1335@01 && $q2@1335@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1315@01, 1))[$q1@1334@01]| | live]
; [else-branch: 857 | !(0 <= $q2@1335@01 && $q2@1335@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1315@01, 1))[$q1@1334@01]|) | live]
(push) ; 8
; [then-branch: 857 | 0 <= $q2@1335@01 && $q2@1335@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1315@01, 1))[$q1@1334@01]|]
(assert (and
  (<= 0 $q2@1335@01)
  (<
    $q2@1335@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
        $q1@1334@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@1334@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q2@1335@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 858 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1315@01, 1))[$q1@1334@01][$q2@1335@01]) | live]
; [else-branch: 858 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1315@01, 1))[$q1@1334@01][$q2@1335@01] | live]
(push) ; 10
; [then-branch: 858 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1315@01, 1))[$q1@1334@01][$q2@1335@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
        $q1@1334@01)
      $q2@1335@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 858 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1315@01, 1))[$q1@1334@01][$q2@1335@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
      $q1@1334@01)
    $q2@1335@01)))
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 11
(assert (not (>= $q1@1334@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= $q2@1335@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
        $q1@1334@01)
      $q2@1335@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
          $q1@1334@01)
        $q2@1335@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 857 | !(0 <= $q2@1335@01 && $q2@1335@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1315@01, 1))[$q1@1334@01]|)]
(assert (not
  (and
    (<= 0 $q2@1335@01)
    (<
      $q2@1335@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
          $q1@1334@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q2@1335@01)
    (<
      $q2@1335@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
          $q1@1334@01))))
  (and
    (<= 0 $q2@1335@01)
    (<
      $q2@1335@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
          $q1@1334@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
            $q1@1334@01)
          $q2@1335@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
              $q1@1334@01)
            $q2@1335@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q2@1335@01)
      (<
        $q2@1335@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
            $q1@1334@01)))))
  (and
    (<= 0 $q2@1335@01)
    (<
      $q2@1335@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
          $q1@1334@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@1335@01 Int)) (!
  (and
    (or (<= 0 $q2@1335@01) (not (<= 0 $q2@1335@01)))
    (=>
      (and
        (<= 0 $q2@1335@01)
        (<
          $q2@1335@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
              $q1@1334@01))))
      (and
        (<= 0 $q2@1335@01)
        (<
          $q2@1335@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
              $q1@1334@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
                $q1@1334@01)
              $q2@1335@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
                  $q1@1334@01)
                $q2@1335@01))))))
    (or
      (not
        (and
          (<= 0 $q2@1335@01)
          (<
            $q2@1335@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
                $q1@1334@01)))))
      (and
        (<= 0 $q2@1335@01)
        (<
          $q2@1335@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
              $q1@1334@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
      $q1@1334@01)
    $q2@1335@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2265@166@2265@541-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 855 | !(0 <= $q1@1334@01 && $q1@1334@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1315@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@1334@01)
    (<
      $q1@1334@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q1@1334@01)
    (<
      $q1@1334@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1)))))
  (and
    (<= 0 $q1@1334@01)
    (<
      $q1@1334@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))))
    (forall (($q2@1335@01 Int)) (!
      (and
        (or (<= 0 $q2@1335@01) (not (<= 0 $q2@1335@01)))
        (=>
          (and
            (<= 0 $q2@1335@01)
            (<
              $q2@1335@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
                  $q1@1334@01))))
          (and
            (<= 0 $q2@1335@01)
            (<
              $q2@1335@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
                  $q1@1334@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
                    $q1@1334@01)
                  $q2@1335@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
                      $q1@1334@01)
                    $q2@1335@01))))))
        (or
          (not
            (and
              (<= 0 $q2@1335@01)
              (<
                $q2@1335@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
                    $q1@1334@01)))))
          (and
            (<= 0 $q2@1335@01)
            (<
              $q2@1335@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
                  $q1@1334@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
          $q1@1334@01)
        $q2@1335@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2265@166@2265@541-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@1334@01)
      (<
        $q1@1334@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))))))
  (and
    (<= 0 $q1@1334@01)
    (<
      $q1@1334@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@1334@01 Int)) (!
  (and
    (or (<= 0 $q1@1334@01) (not (<= 0 $q1@1334@01)))
    (=>
      (and
        (<= 0 $q1@1334@01)
        (<
          $q1@1334@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1)))))
      (and
        (<= 0 $q1@1334@01)
        (<
          $q1@1334@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))))
        (forall (($q2@1335@01 Int)) (!
          (and
            (or (<= 0 $q2@1335@01) (not (<= 0 $q2@1335@01)))
            (=>
              (and
                (<= 0 $q2@1335@01)
                (<
                  $q2@1335@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
                      $q1@1334@01))))
              (and
                (<= 0 $q2@1335@01)
                (<
                  $q2@1335@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
                      $q1@1334@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
                        $q1@1334@01)
                      $q2@1335@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
                          $q1@1334@01)
                        $q2@1335@01))))))
            (or
              (not
                (and
                  (<= 0 $q2@1335@01)
                  (<
                    $q2@1335@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
                        $q1@1334@01)))))
              (and
                (<= 0 $q2@1335@01)
                (<
                  $q2@1335@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
                      $q1@1334@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
              $q1@1334@01)
            $q2@1335@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2265@166@2265@541-aux|))))
    (or
      (not
        (and
          (<= 0 $q1@1334@01)
          (<
            $q1@1334@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))))))
      (and
        (<= 0 $q1@1334@01)
        (<
          $q1@1334@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
    $q1@1334@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2265@11@2265@542-aux|)))
(assert (forall (($q1@1334@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@1334@01)
      (<
        $q1@1334@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1)))))
    (forall (($q2@1335@01 Int)) (!
      (=>
        (and
          (<= 0 $q2@1335@01)
          (<
            $q2@1335@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
                $q1@1334@01))))
        (and
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
                $q1@1334@01)
              $q2@1335@01))
          (<=
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
                $q1@1334@01)
              $q2@1335@01)
            170141183460469231731687303715884105727)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
          $q1@1334@01)
        $q2@1335@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2265@166@2265@541|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1315@01 1))
    $q1@1334@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2265@11@2265@542|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
(declare-const $t@1336@01 $Snap)
(assert (= $t@1336@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(assert (=
  (Seq_length
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2)))
  2))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $t@1337@01 $Snap)
(assert (= $t@1337@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $q3@1338@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 859 | !(0 <= $q3@1338@01) | live]
; [else-branch: 859 | 0 <= $q3@1338@01 | live]
(push) ; 5
; [then-branch: 859 | !(0 <= $q3@1338@01)]
(assert (not (<= 0 $q3@1338@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 859 | 0 <= $q3@1338@01]
(assert (<= 0 $q3@1338@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1338@01) (not (<= 0 $q3@1338@01))))
(push) ; 4
; [then-branch: 860 | 0 <= $q3@1338@01 && $q3@1338@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))| | live]
; [else-branch: 860 | !(0 <= $q3@1338@01 && $q3@1338@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))|) | live]
(push) ; 5
; [then-branch: 860 | 0 <= $q3@1338@01 && $q3@1338@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))|]
(assert (and
  (<= 0 $q3@1338@01)
  (<
    $q3@1338@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 6
(assert (not (>= $q3@1338@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 860 | !(0 <= $q3@1338@01 && $q3@1338@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1338@01)
    (<
      $q3@1338@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1338@01)
      (<
        $q3@1338@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))))))
  (and
    (<= 0 $q3@1338@01)
    (<
      $q3@1338@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1338@01 Int)) (!
  (and
    (or (<= 0 $q3@1338@01) (not (<= 0 $q3@1338@01)))
    (or
      (not
        (and
          (<= 0 $q3@1338@01)
          (<
            $q3@1338@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))))))
      (and
        (<= 0 $q3@1338@01)
        (<
          $q3@1338@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
    $q3@1338@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2267@11@2267@242-aux|)))
(assert (forall (($q3@1338@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1338@01)
      (<
        $q3@1338@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
          $q3@1338@01))
      2))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
    $q3@1338@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2267@11@2267@242|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==
;       2))
(declare-const $t@1339@01 $Snap)
(assert (= $t@1339@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2))
(declare-const $q3@1340@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 861 | !(0 <= $q3@1340@01) | live]
; [else-branch: 861 | 0 <= $q3@1340@01 | live]
(push) ; 5
; [then-branch: 861 | !(0 <= $q3@1340@01)]
(assert (not (<= 0 $q3@1340@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 861 | 0 <= $q3@1340@01]
(assert (<= 0 $q3@1340@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1340@01) (not (<= 0 $q3@1340@01))))
(push) ; 4
; [then-branch: 862 | 0 <= $q3@1340@01 && $q3@1340@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))| | live]
; [else-branch: 862 | !(0 <= $q3@1340@01 && $q3@1340@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))|) | live]
(push) ; 5
; [then-branch: 862 | 0 <= $q3@1340@01 && $q3@1340@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))|]
(assert (and
  (<= 0 $q3@1340@01)
  (<
    $q3@1340@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
(declare-const $q4@1341@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 863 | !(0 <= $q4@1341@01) | live]
; [else-branch: 863 | 0 <= $q4@1341@01 | live]
(push) ; 8
; [then-branch: 863 | !(0 <= $q4@1341@01)]
(assert (not (<= 0 $q4@1341@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 863 | 0 <= $q4@1341@01]
(assert (<= 0 $q4@1341@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1340@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@1341@01) (not (<= 0 $q4@1341@01))))
(push) ; 7
; [then-branch: 864 | 0 <= $q4@1341@01 && $q4@1341@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))[$q3@1340@01]| | live]
; [else-branch: 864 | !(0 <= $q4@1341@01 && $q4@1341@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))[$q3@1340@01]|) | live]
(push) ; 8
; [then-branch: 864 | 0 <= $q4@1341@01 && $q4@1341@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))[$q3@1340@01]|]
(assert (and
  (<= 0 $q4@1341@01)
  (<
    $q4@1341@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
        $q3@1340@01)))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1340@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q4@1341@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 864 | !(0 <= $q4@1341@01 && $q4@1341@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))[$q3@1340@01]|)]
(assert (not
  (and
    (<= 0 $q4@1341@01)
    (<
      $q4@1341@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
          $q3@1340@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@1341@01)
      (<
        $q4@1341@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
            $q3@1340@01)))))
  (and
    (<= 0 $q4@1341@01)
    (<
      $q4@1341@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
          $q3@1340@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1341@01 Int)) (!
  (and
    (or (<= 0 $q4@1341@01) (not (<= 0 $q4@1341@01)))
    (or
      (not
        (and
          (<= 0 $q4@1341@01)
          (<
            $q4@1341@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                $q3@1340@01)))))
      (and
        (<= 0 $q4@1341@01)
        (<
          $q4@1341@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
              $q3@1340@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
      $q3@1340@01)
    $q4@1341@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2268@176@2268@422-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 862 | !(0 <= $q3@1340@01 && $q3@1340@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1340@01)
    (<
      $q3@1340@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@1340@01)
    (<
      $q3@1340@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2)))))
  (and
    (<= 0 $q3@1340@01)
    (<
      $q3@1340@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))))
    (forall (($q4@1341@01 Int)) (!
      (and
        (or (<= 0 $q4@1341@01) (not (<= 0 $q4@1341@01)))
        (or
          (not
            (and
              (<= 0 $q4@1341@01)
              (<
                $q4@1341@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                    $q3@1340@01)))))
          (and
            (<= 0 $q4@1341@01)
            (<
              $q4@1341@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                  $q3@1340@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
          $q3@1340@01)
        $q4@1341@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2268@176@2268@422-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1340@01)
      (<
        $q3@1340@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))))))
  (and
    (<= 0 $q3@1340@01)
    (<
      $q3@1340@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1340@01 Int)) (!
  (and
    (or (<= 0 $q3@1340@01) (not (<= 0 $q3@1340@01)))
    (=>
      (and
        (<= 0 $q3@1340@01)
        (<
          $q3@1340@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2)))))
      (and
        (<= 0 $q3@1340@01)
        (<
          $q3@1340@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))))
        (forall (($q4@1341@01 Int)) (!
          (and
            (or (<= 0 $q4@1341@01) (not (<= 0 $q4@1341@01)))
            (or
              (not
                (and
                  (<= 0 $q4@1341@01)
                  (<
                    $q4@1341@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                        $q3@1340@01)))))
              (and
                (<= 0 $q4@1341@01)
                (<
                  $q4@1341@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                      $q3@1340@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
              $q3@1340@01)
            $q4@1341@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2268@176@2268@422-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@1340@01)
          (<
            $q3@1340@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))))))
      (and
        (<= 0 $q3@1340@01)
        (<
          $q3@1340@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
    $q3@1340@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2268@11@2268@423-aux|)))
(assert (forall (($q3@1340@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1340@01)
      (<
        $q3@1340@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2)))))
    (forall (($q4@1341@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@1341@01)
          (<
            $q4@1341@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                $q3@1340@01))))
        (=
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                $q3@1340@01)
              $q4@1341@01))
          2))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
          $q3@1340@01)
        $q4@1341@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2268@176@2268@422|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
    $q3@1340@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2268@11@2268@423|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       (forall $q5: Int ::
;         { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] }
;         0 <= $q5 &&
;         $q5 <
;         |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==>
;         -170141183460469231731687303715884105728 <=
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] &&
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <=
;         170141183460469231731687303715884105727)))
(declare-const $t@1342@01 $Snap)
(assert (= $t@1342@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)))
(declare-const $q3@1343@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 865 | !(0 <= $q3@1343@01) | live]
; [else-branch: 865 | 0 <= $q3@1343@01 | live]
(push) ; 5
; [then-branch: 865 | !(0 <= $q3@1343@01)]
(assert (not (<= 0 $q3@1343@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 865 | 0 <= $q3@1343@01]
(assert (<= 0 $q3@1343@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1343@01) (not (<= 0 $q3@1343@01))))
(push) ; 4
; [then-branch: 866 | 0 <= $q3@1343@01 && $q3@1343@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))| | live]
; [else-branch: 866 | !(0 <= $q3@1343@01 && $q3@1343@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))|) | live]
(push) ; 5
; [then-branch: 866 | 0 <= $q3@1343@01 && $q3@1343@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))|]
(assert (and
  (<= 0 $q3@1343@01)
  (<
    $q3@1343@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
(declare-const $q4@1344@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 867 | !(0 <= $q4@1344@01) | live]
; [else-branch: 867 | 0 <= $q4@1344@01 | live]
(push) ; 8
; [then-branch: 867 | !(0 <= $q4@1344@01)]
(assert (not (<= 0 $q4@1344@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 867 | 0 <= $q4@1344@01]
(assert (<= 0 $q4@1344@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1343@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@1344@01) (not (<= 0 $q4@1344@01))))
(push) ; 7
; [then-branch: 868 | 0 <= $q4@1344@01 && $q4@1344@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))[$q3@1343@01]| | live]
; [else-branch: 868 | !(0 <= $q4@1344@01 && $q4@1344@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))[$q3@1343@01]|) | live]
(push) ; 8
; [then-branch: 868 | 0 <= $q4@1344@01 && $q4@1344@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))[$q3@1343@01]|]
(assert (and
  (<= 0 $q4@1344@01)
  (<
    $q4@1344@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
        $q3@1343@01)))))
; [eval] (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
(declare-const $q5@1345@01 Int)
(push) ; 9
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] 0 <= $q5
(push) ; 10
; [then-branch: 869 | !(0 <= $q5@1345@01) | live]
; [else-branch: 869 | 0 <= $q5@1345@01 | live]
(push) ; 11
; [then-branch: 869 | !(0 <= $q5@1345@01)]
(assert (not (<= 0 $q5@1345@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 869 | 0 <= $q5@1345@01]
(assert (<= 0 $q5@1345@01))
; [eval] $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@1343@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@1344@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q5@1345@01) (not (<= 0 $q5@1345@01))))
(push) ; 10
; [then-branch: 870 | 0 <= $q5@1345@01 && $q5@1345@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))[$q3@1343@01][$q4@1344@01]| | live]
; [else-branch: 870 | !(0 <= $q5@1345@01 && $q5@1345@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))[$q3@1343@01][$q4@1344@01]|) | live]
(push) ; 11
; [then-branch: 870 | 0 <= $q5@1345@01 && $q5@1345@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))[$q3@1343@01][$q4@1344@01]|]
(assert (and
  (<= 0 $q5@1345@01)
  (<
    $q5@1345@01
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
          $q3@1343@01)
        $q4@1344@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@1343@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@1344@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q5@1345@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 871 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))[$q3@1343@01][$q4@1344@01][$q5@1345@01]) | live]
; [else-branch: 871 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))[$q3@1343@01][$q4@1344@01][$q5@1345@01] | live]
(push) ; 13
; [then-branch: 871 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))[$q3@1343@01][$q4@1344@01][$q5@1345@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
          $q3@1343@01)
        $q4@1344@01)
      $q5@1345@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 871 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))[$q3@1343@01][$q4@1344@01][$q5@1345@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
        $q3@1343@01)
      $q4@1344@01)
    $q5@1345@01)))
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 14
(assert (not (>= $q3@1343@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q4@1344@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q5@1345@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
          $q3@1343@01)
        $q4@1344@01)
      $q5@1345@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
            $q3@1343@01)
          $q4@1344@01)
        $q5@1345@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 870 | !(0 <= $q5@1345@01 && $q5@1345@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))[$q3@1343@01][$q4@1344@01]|)]
(assert (not
  (and
    (<= 0 $q5@1345@01)
    (<
      $q5@1345@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
            $q3@1343@01)
          $q4@1344@01))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q5@1345@01)
    (<
      $q5@1345@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
            $q3@1343@01)
          $q4@1344@01))))
  (and
    (<= 0 $q5@1345@01)
    (<
      $q5@1345@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
            $q3@1343@01)
          $q4@1344@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
              $q3@1343@01)
            $q4@1344@01)
          $q5@1345@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                $q3@1343@01)
              $q4@1344@01)
            $q5@1345@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q5@1345@01)
      (<
        $q5@1345@01
        (Seq_length
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
              $q3@1343@01)
            $q4@1344@01)))))
  (and
    (<= 0 $q5@1345@01)
    (<
      $q5@1345@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
            $q3@1343@01)
          $q4@1344@01))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@1345@01 Int)) (!
  (and
    (or (<= 0 $q5@1345@01) (not (<= 0 $q5@1345@01)))
    (=>
      (and
        (<= 0 $q5@1345@01)
        (<
          $q5@1345@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                $q3@1343@01)
              $q4@1344@01))))
      (and
        (<= 0 $q5@1345@01)
        (<
          $q5@1345@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                $q3@1343@01)
              $q4@1344@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                  $q3@1343@01)
                $q4@1344@01)
              $q5@1345@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                    $q3@1343@01)
                  $q4@1344@01)
                $q5@1345@01))))))
    (or
      (not
        (and
          (<= 0 $q5@1345@01)
          (<
            $q5@1345@01
            (Seq_length
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                  $q3@1343@01)
                $q4@1344@01)))))
      (and
        (<= 0 $q5@1345@01)
        (<
          $q5@1345@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                $q3@1343@01)
              $q4@1344@01))))))
  :pattern ((Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
        $q3@1343@01)
      $q4@1344@01)
    $q5@1345@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2269@351@2269@766-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 868 | !(0 <= $q4@1344@01 && $q4@1344@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))[$q3@1343@01]|)]
(assert (not
  (and
    (<= 0 $q4@1344@01)
    (<
      $q4@1344@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
          $q3@1343@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q4@1344@01)
    (<
      $q4@1344@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
          $q3@1343@01))))
  (and
    (<= 0 $q4@1344@01)
    (<
      $q4@1344@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
          $q3@1343@01)))
    (forall (($q5@1345@01 Int)) (!
      (and
        (or (<= 0 $q5@1345@01) (not (<= 0 $q5@1345@01)))
        (=>
          (and
            (<= 0 $q5@1345@01)
            (<
              $q5@1345@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                    $q3@1343@01)
                  $q4@1344@01))))
          (and
            (<= 0 $q5@1345@01)
            (<
              $q5@1345@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                    $q3@1343@01)
                  $q4@1344@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                      $q3@1343@01)
                    $q4@1344@01)
                  $q5@1345@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                        $q3@1343@01)
                      $q4@1344@01)
                    $q5@1345@01))))))
        (or
          (not
            (and
              (<= 0 $q5@1345@01)
              (<
                $q5@1345@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                      $q3@1343@01)
                    $q4@1344@01)))))
          (and
            (<= 0 $q5@1345@01)
            (<
              $q5@1345@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                    $q3@1343@01)
                  $q4@1344@01))))))
      :pattern ((Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
            $q3@1343@01)
          $q4@1344@01)
        $q5@1345@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2269@351@2269@766-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@1344@01)
      (<
        $q4@1344@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
            $q3@1343@01)))))
  (and
    (<= 0 $q4@1344@01)
    (<
      $q4@1344@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
          $q3@1343@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1344@01 Int)) (!
  (and
    (or (<= 0 $q4@1344@01) (not (<= 0 $q4@1344@01)))
    (=>
      (and
        (<= 0 $q4@1344@01)
        (<
          $q4@1344@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
              $q3@1343@01))))
      (and
        (<= 0 $q4@1344@01)
        (<
          $q4@1344@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
              $q3@1343@01)))
        (forall (($q5@1345@01 Int)) (!
          (and
            (or (<= 0 $q5@1345@01) (not (<= 0 $q5@1345@01)))
            (=>
              (and
                (<= 0 $q5@1345@01)
                (<
                  $q5@1345@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                        $q3@1343@01)
                      $q4@1344@01))))
              (and
                (<= 0 $q5@1345@01)
                (<
                  $q5@1345@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                        $q3@1343@01)
                      $q4@1344@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                          $q3@1343@01)
                        $q4@1344@01)
                      $q5@1345@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                            $q3@1343@01)
                          $q4@1344@01)
                        $q5@1345@01))))))
            (or
              (not
                (and
                  (<= 0 $q5@1345@01)
                  (<
                    $q5@1345@01
                    (Seq_length
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                          $q3@1343@01)
                        $q4@1344@01)))))
              (and
                (<= 0 $q5@1345@01)
                (<
                  $q5@1345@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                        $q3@1343@01)
                      $q4@1344@01))))))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                $q3@1343@01)
              $q4@1344@01)
            $q5@1345@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2269@351@2269@766-aux|))))
    (or
      (not
        (and
          (<= 0 $q4@1344@01)
          (<
            $q4@1344@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                $q3@1343@01)))))
      (and
        (<= 0 $q4@1344@01)
        (<
          $q4@1344@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
              $q3@1343@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
      $q3@1343@01)
    $q4@1344@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2269@176@2269@767-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 866 | !(0 <= $q3@1343@01 && $q3@1343@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1315@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1343@01)
    (<
      $q3@1343@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@1343@01)
    (<
      $q3@1343@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2)))))
  (and
    (<= 0 $q3@1343@01)
    (<
      $q3@1343@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))))
    (forall (($q4@1344@01 Int)) (!
      (and
        (or (<= 0 $q4@1344@01) (not (<= 0 $q4@1344@01)))
        (=>
          (and
            (<= 0 $q4@1344@01)
            (<
              $q4@1344@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                  $q3@1343@01))))
          (and
            (<= 0 $q4@1344@01)
            (<
              $q4@1344@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                  $q3@1343@01)))
            (forall (($q5@1345@01 Int)) (!
              (and
                (or (<= 0 $q5@1345@01) (not (<= 0 $q5@1345@01)))
                (=>
                  (and
                    (<= 0 $q5@1345@01)
                    (<
                      $q5@1345@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                            $q3@1343@01)
                          $q4@1344@01))))
                  (and
                    (<= 0 $q5@1345@01)
                    (<
                      $q5@1345@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                            $q3@1343@01)
                          $q4@1344@01)))
                    (or
                      (<=
                        (- 0 170141183460469231731687303715884105728)
                        (Seq_index
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                              $q3@1343@01)
                            $q4@1344@01)
                          $q5@1345@01))
                      (not
                        (<=
                          (- 0 170141183460469231731687303715884105728)
                          (Seq_index
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                                $q3@1343@01)
                              $q4@1344@01)
                            $q5@1345@01))))))
                (or
                  (not
                    (and
                      (<= 0 $q5@1345@01)
                      (<
                        $q5@1345@01
                        (Seq_length
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                              $q3@1343@01)
                            $q4@1344@01)))))
                  (and
                    (<= 0 $q5@1345@01)
                    (<
                      $q5@1345@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                            $q3@1343@01)
                          $q4@1344@01))))))
              :pattern ((Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                    $q3@1343@01)
                  $q4@1344@01)
                $q5@1345@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2269@351@2269@766-aux|))))
        (or
          (not
            (and
              (<= 0 $q4@1344@01)
              (<
                $q4@1344@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                    $q3@1343@01)))))
          (and
            (<= 0 $q4@1344@01)
            (<
              $q4@1344@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                  $q3@1343@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
          $q3@1343@01)
        $q4@1344@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2269@176@2269@767-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1343@01)
      (<
        $q3@1343@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))))))
  (and
    (<= 0 $q3@1343@01)
    (<
      $q3@1343@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1343@01 Int)) (!
  (and
    (or (<= 0 $q3@1343@01) (not (<= 0 $q3@1343@01)))
    (=>
      (and
        (<= 0 $q3@1343@01)
        (<
          $q3@1343@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2)))))
      (and
        (<= 0 $q3@1343@01)
        (<
          $q3@1343@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))))
        (forall (($q4@1344@01 Int)) (!
          (and
            (or (<= 0 $q4@1344@01) (not (<= 0 $q4@1344@01)))
            (=>
              (and
                (<= 0 $q4@1344@01)
                (<
                  $q4@1344@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                      $q3@1343@01))))
              (and
                (<= 0 $q4@1344@01)
                (<
                  $q4@1344@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                      $q3@1343@01)))
                (forall (($q5@1345@01 Int)) (!
                  (and
                    (or (<= 0 $q5@1345@01) (not (<= 0 $q5@1345@01)))
                    (=>
                      (and
                        (<= 0 $q5@1345@01)
                        (<
                          $q5@1345@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                                $q3@1343@01)
                              $q4@1344@01))))
                      (and
                        (<= 0 $q5@1345@01)
                        (<
                          $q5@1345@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                                $q3@1343@01)
                              $q4@1344@01)))
                        (or
                          (<=
                            (- 0 170141183460469231731687303715884105728)
                            (Seq_index
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                                  $q3@1343@01)
                                $q4@1344@01)
                              $q5@1345@01))
                          (not
                            (<=
                              (- 0 170141183460469231731687303715884105728)
                              (Seq_index
                                (Seq_index
                                  (Seq_index
                                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                                    $q3@1343@01)
                                  $q4@1344@01)
                                $q5@1345@01))))))
                    (or
                      (not
                        (and
                          (<= 0 $q5@1345@01)
                          (<
                            $q5@1345@01
                            (Seq_length
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                                  $q3@1343@01)
                                $q4@1344@01)))))
                      (and
                        (<= 0 $q5@1345@01)
                        (<
                          $q5@1345@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                                $q3@1343@01)
                              $q4@1344@01))))))
                  :pattern ((Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                        $q3@1343@01)
                      $q4@1344@01)
                    $q5@1345@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2269@351@2269@766-aux|))))
            (or
              (not
                (and
                  (<= 0 $q4@1344@01)
                  (<
                    $q4@1344@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                        $q3@1343@01)))))
              (and
                (<= 0 $q4@1344@01)
                (<
                  $q4@1344@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                      $q3@1343@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
              $q3@1343@01)
            $q4@1344@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2269@176@2269@767-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@1343@01)
          (<
            $q3@1343@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))))))
      (and
        (<= 0 $q3@1343@01)
        (<
          $q3@1343@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
    $q3@1343@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2269@11@2269@768-aux|)))
(assert (forall (($q3@1343@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1343@01)
      (<
        $q3@1343@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2)))))
    (forall (($q4@1344@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@1344@01)
          (<
            $q4@1344@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                $q3@1343@01))))
        (forall (($q5@1345@01 Int)) (!
          (=>
            (and
              (<= 0 $q5@1345@01)
              (<
                $q5@1345@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                      $q3@1343@01)
                    $q4@1344@01))))
            (and
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                      $q3@1343@01)
                    $q4@1344@01)
                  $q5@1345@01))
              (<=
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                      $q3@1343@01)
                    $q4@1344@01)
                  $q5@1345@01)
                170141183460469231731687303715884105727)))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
                $q3@1343@01)
              $q4@1344@01)
            $q5@1345@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2269@351@2269@766|)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
          $q3@1343@01)
        $q4@1344@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2269@176@2269@767|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1315@01 2))
    $q3@1343@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2269@11@2269@768|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
(declare-const $t@1346@01 $Snap)
(assert (= $t@1346@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3))) 1000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] }
;     0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] &&
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <=
;     170141183460469231731687303715884105727)
(declare-const $t@1347@01 $Snap)
(assert (= $t@1347@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] } 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727)
(declare-const $q6@1348@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] 0 <= $q6
(push) ; 4
; [then-branch: 872 | !(0 <= $q6@1348@01) | live]
; [else-branch: 872 | 0 <= $q6@1348@01 | live]
(push) ; 5
; [then-branch: 872 | !(0 <= $q6@1348@01)]
(assert (not (<= 0 $q6@1348@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 872 | 0 <= $q6@1348@01]
(assert (<= 0 $q6@1348@01))
; [eval] $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q6@1348@01) (not (<= 0 $q6@1348@01))))
(push) ; 4
; [then-branch: 873 | 0 <= $q6@1348@01 && $q6@1348@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1315@01, 3))| | live]
; [else-branch: 873 | !(0 <= $q6@1348@01 && $q6@1348@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1315@01, 3))|) | live]
(push) ; 5
; [then-branch: 873 | 0 <= $q6@1348@01 && $q6@1348@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1315@01, 3))|]
(assert (and
  (<= 0 $q6@1348@01)
  (<
    $q6@1348@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (>= $q6@1348@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 874 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1315@01, 3))[$q6@1348@01]) | live]
; [else-branch: 874 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1315@01, 3))[$q6@1348@01] | live]
(push) ; 7
; [then-branch: 874 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1315@01, 3))[$q6@1348@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3))
      $q6@1348@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 874 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1315@01, 3))[$q6@1348@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3))
    $q6@1348@01)))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (>= $q6@1348@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3))
      $q6@1348@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3))
        $q6@1348@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 873 | !(0 <= $q6@1348@01 && $q6@1348@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1315@01, 3))|)]
(assert (not
  (and
    (<= 0 $q6@1348@01)
    (<
      $q6@1348@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q6@1348@01)
    (<
      $q6@1348@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3)))))
  (and
    (<= 0 $q6@1348@01)
    (<
      $q6@1348@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3))
          $q6@1348@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3))
            $q6@1348@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q6@1348@01)
      (<
        $q6@1348@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3))))))
  (and
    (<= 0 $q6@1348@01)
    (<
      $q6@1348@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1348@01 Int)) (!
  (and
    (or (<= 0 $q6@1348@01) (not (<= 0 $q6@1348@01)))
    (=>
      (and
        (<= 0 $q6@1348@01)
        (<
          $q6@1348@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3)))))
      (and
        (<= 0 $q6@1348@01)
        (<
          $q6@1348@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3))
              $q6@1348@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3))
                $q6@1348@01))))))
    (or
      (not
        (and
          (<= 0 $q6@1348@01)
          (<
            $q6@1348@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3))))))
      (and
        (<= 0 $q6@1348@01)
        (<
          $q6@1348@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3))
    $q6@1348@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2271@11@2271@346-aux|)))
(assert (forall (($q6@1348@01 Int)) (!
  (=>
    (and
      (<= 0 $q6@1348@01)
      (<
        $q6@1348@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3))
          $q6@1348@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3))
          $q6@1348@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3))
    $q6@1348@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2271@11@2271@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==
;     10)
(declare-const $t@1349@01 $Snap)
(assert (= $t@1349@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10)
(declare-const $q7@1350@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1350@01 Int)) (!
  (=
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1350@01))
    10)
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1350@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2272@11@2272@209|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     (forall $q8: Int ::
;       { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] }
;       0 <= $q8 &&
;       $q8 <
;       |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==>
;       -170141183460469231731687303715884105728 <=
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] &&
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <=
;       170141183460469231731687303715884105727))
(declare-const $t@1351@01 $Snap)
(assert (= $t@1351@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727))
(declare-const $q7@1352@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727)
(declare-const $q8@1353@01 Int)
(push) ; 4
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] 0 <= $q8
(push) ; 5
; [then-branch: 875 | !(0 <= $q8@1353@01) | live]
; [else-branch: 875 | 0 <= $q8@1353@01 | live]
(push) ; 6
; [then-branch: 875 | !(0 <= $q8@1353@01)]
(assert (not (<= 0 $q8@1353@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 875 | 0 <= $q8@1353@01]
(assert (<= 0 $q8@1353@01))
; [eval] $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q8@1353@01) (not (<= 0 $q8@1353@01))))
(push) ; 5
; [then-branch: 876 | 0 <= $q8@1353@01 && $q8@1353@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1315@01, 4)), $q7@1352@01)| | live]
; [else-branch: 876 | !(0 <= $q8@1353@01 && $q8@1353@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1315@01, 4)), $q7@1352@01)|) | live]
(push) ; 6
; [then-branch: 876 | 0 <= $q8@1353@01 && $q8@1353@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1315@01, 4)), $q7@1352@01)|]
(assert (and
  (<= 0 $q8@1353@01)
  (<
    $q8@1353@01
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] -170141183460469231731687303715884105728
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 7
(assert (not (>= $q8@1353@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 877 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1315@01, 4)), $q7@1352@01)[$q8@1353@01]) | live]
; [else-branch: 877 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1315@01, 4)), $q7@1352@01)[$q8@1353@01] | live]
(push) ; 8
; [then-branch: 877 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1315@01, 4)), $q7@1352@01)[$q8@1353@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01)
      $q8@1353@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 877 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1315@01, 4)), $q7@1352@01)[$q8@1353@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01)
    $q8@1353@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 9
(assert (not (>= $q8@1353@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01)
      $q8@1353@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01)
        $q8@1353@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 876 | !(0 <= $q8@1353@01 && $q8@1353@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1315@01, 4)), $q7@1352@01)|)]
(assert (not
  (and
    (<= 0 $q8@1353@01)
    (<
      $q8@1353@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q8@1353@01)
    (<
      $q8@1353@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01))))
  (and
    (<= 0 $q8@1353@01)
    (<
      $q8@1353@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01)
          $q8@1353@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01)
            $q8@1353@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q8@1353@01)
      (<
        $q8@1353@01
        (Seq_length
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01)))))
  (and
    (<= 0 $q8@1353@01)
    (<
      $q8@1353@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q8@1353@01 Int)) (!
  (and
    (or (<= 0 $q8@1353@01) (not (<= 0 $q8@1353@01)))
    (=>
      (and
        (<= 0 $q8@1353@01)
        (<
          $q8@1353@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01))))
      (and
        (<= 0 $q8@1353@01)
        (<
          $q8@1353@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01)
              $q8@1353@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01)
                $q8@1353@01))))))
    (or
      (not
        (and
          (<= 0 $q8@1353@01)
          (<
            $q8@1353@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01)))))
      (and
        (<= 0 $q8@1353@01)
        (<
          $q8@1353@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01))))))
  :pattern ((Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01)
    $q8@1353@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2273@119@2273@606-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1352@01 Int)) (!
  (forall (($q8@1353@01 Int)) (!
    (and
      (or (<= 0 $q8@1353@01) (not (<= 0 $q8@1353@01)))
      (=>
        (and
          (<= 0 $q8@1353@01)
          (<
            $q8@1353@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01))))
        (and
          (<= 0 $q8@1353@01)
          (<
            $q8@1353@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01)))
          (or
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01)
                $q8@1353@01))
            (not
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01)
                  $q8@1353@01))))))
      (or
        (not
          (and
            (<= 0 $q8@1353@01)
            (<
              $q8@1353@01
              (Seq_length
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01)))))
        (and
          (<= 0 $q8@1353@01)
          (<
            $q8@1353@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01))))))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01)
      $q8@1353@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2273@119@2273@606-aux|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2273@11@2273@607-aux|)))
(assert (forall (($q7@1352@01 Int)) (!
  (forall (($q8@1353@01 Int)) (!
    (=>
      (and
        (<= 0 $q8@1353@01)
        (<
          $q8@1353@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01))))
      (and
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01)
            $q8@1353@01))
        (<=
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01)
            $q8@1353@01)
          170141183460469231731687303715884105727)))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01)
      $q8@1353@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2273@119@2273@606|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1315@01 4)) $q7@1352@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2273@11@2273@607|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1354@01 $Snap)
(assert (= $t@1354@01 ($Snap.combine ($Snap.first $t@1354@01) ($Snap.second $t@1354@01))))
(assert (= ($Snap.first $t@1354@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1315@01 5))))
(assert (= ($Snap.second $t@1354@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1315@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@1355@01 $Snap)
(assert (= $t@1355@01 ($Snap.combine ($Snap.first $t@1355@01) ($Snap.second $t@1355@01))))
(assert (= ($Snap.first $t@1355@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@1315@01 6))))
(assert (= ($Snap.second $t@1355@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1315@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1356@01 $Snap)
(assert (= $t@1356@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q9@1357@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 878 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1315@01, 8)), $q9@1357@01)) | live]
; [else-branch: 878 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1315@01, 8)), $q9@1357@01) | live]
(push) ; 5
; [then-branch: 878 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1315@01, 8)), $q9@1357@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 8)) $q9@1357@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 878 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1315@01, 8)), $q9@1357@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 8)) $q9@1357@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 8)) $q9@1357@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 8)) $q9@1357@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@1357@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 8)) $q9@1357@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 8)) $q9@1357@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 8)) $q9@1357@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2276@11@2276@345-aux|)))
(assert (forall (($q9@1357@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 8)) $q9@1357@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 8)) $q9@1357@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 8)) $q9@1357@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2276@11@2276@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@1358@01 $Snap)
(assert (= $t@1358@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q9@1359@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@1359@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 8)) $q9@1359@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 8)) $q9@1359@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2277@11@2277@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1360@01 $Snap)
(assert (= $t@1360@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q10@1361@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 879 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1315@01, 9)), $q10@1361@01)) | live]
; [else-branch: 879 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1315@01, 9)), $q10@1361@01) | live]
(push) ; 5
; [then-branch: 879 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1315@01, 9)), $q10@1361@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 9)) $q10@1361@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 879 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1315@01, 9)), $q10@1361@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 9)) $q10@1361@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 9)) $q10@1361@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 9)) $q10@1361@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@1361@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 9)) $q10@1361@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 9)) $q10@1361@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 9)) $q10@1361@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2278@11@2278@349-aux|)))
(assert (forall (($q10@1361@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 9)) $q10@1361@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 9)) $q10@1361@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 9)) $q10@1361@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2278@11@2278@349|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@1362@01 $Snap)
(assert (= $t@1362@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q10@1363@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@1363@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 9)) $q10@1363@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1315@01 9)) $q10@1363@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2279@11@2279@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@1364@01 $Snap)
(assert (= $t@1364@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1315@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1365@01 $Snap)
(assert (= $t@1365@01 ($Snap.combine ($Snap.first $t@1365@01) ($Snap.second $t@1365@01))))
(assert (= ($Snap.first $t@1365@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@1365@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |l$a| == 5
(declare-const $t@1366@01 $Snap)
(assert (= $t@1366@01 $Snap.unit))
; [eval] |l$a| == 5
; [eval] |l$a|
(assert (= (Seq_length l$a@1308@01) 5))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { l$a[$q0] }
;     0 <= $q0 && $q0 < |l$a| ==>
;     -170141183460469231731687303715884105728 <= l$a[$q0] &&
;     l$a[$q0] <= 170141183460469231731687303715884105727)
(declare-const $t@1367@01 $Snap)
(assert (= $t@1367@01 $Snap.unit))
; [eval] (forall $q0: Int :: { l$a[$q0] } 0 <= $q0 && $q0 < |l$a| ==> -170141183460469231731687303715884105728 <= l$a[$q0] && l$a[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@1368@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |l$a| ==> -170141183460469231731687303715884105728 <= l$a[$q0] && l$a[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |l$a|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 880 | !(0 <= $q0@1368@01) | live]
; [else-branch: 880 | 0 <= $q0@1368@01 | live]
(push) ; 5
; [then-branch: 880 | !(0 <= $q0@1368@01)]
(assert (not (<= 0 $q0@1368@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 880 | 0 <= $q0@1368@01]
(assert (<= 0 $q0@1368@01))
; [eval] $q0 < |l$a|
; [eval] |l$a|
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@1368@01) (not (<= 0 $q0@1368@01))))
(push) ; 4
; [then-branch: 881 | 0 <= $q0@1368@01 && $q0@1368@01 < |l$a@1308@01| | live]
; [else-branch: 881 | !(0 <= $q0@1368@01 && $q0@1368@01 < |l$a@1308@01|) | live]
(push) ; 5
; [then-branch: 881 | 0 <= $q0@1368@01 && $q0@1368@01 < |l$a@1308@01|]
(assert (and (<= 0 $q0@1368@01) (< $q0@1368@01 (Seq_length l$a@1308@01))))
; [eval] -170141183460469231731687303715884105728 <= l$a[$q0] && l$a[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= l$a[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] l$a[$q0]
(push) ; 6
(assert (not (>= $q0@1368@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 882 | !(-170141183460469231731687303715884105728 <= l$a@1308@01[$q0@1368@01]) | live]
; [else-branch: 882 | -170141183460469231731687303715884105728 <= l$a@1308@01[$q0@1368@01] | live]
(push) ; 7
; [then-branch: 882 | !(-170141183460469231731687303715884105728 <= l$a@1308@01[$q0@1368@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index l$a@1308@01 $q0@1368@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 882 | -170141183460469231731687303715884105728 <= l$a@1308@01[$q0@1368@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index l$a@1308@01 $q0@1368@01)))
; [eval] l$a[$q0] <= 170141183460469231731687303715884105727
; [eval] l$a[$q0]
(push) ; 8
(assert (not (>= $q0@1368@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index l$a@1308@01 $q0@1368@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index l$a@1308@01 $q0@1368@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 881 | !(0 <= $q0@1368@01 && $q0@1368@01 < |l$a@1308@01|)]
(assert (not (and (<= 0 $q0@1368@01) (< $q0@1368@01 (Seq_length l$a@1308@01)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and (<= 0 $q0@1368@01) (< $q0@1368@01 (Seq_length l$a@1308@01)))
  (and
    (<= 0 $q0@1368@01)
    (< $q0@1368@01 (Seq_length l$a@1308@01))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index l$a@1308@01 $q0@1368@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index l$a@1308@01 $q0@1368@01)))))))
; Joined path conditions
(assert (or
  (not (and (<= 0 $q0@1368@01) (< $q0@1368@01 (Seq_length l$a@1308@01))))
  (and (<= 0 $q0@1368@01) (< $q0@1368@01 (Seq_length l$a@1308@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@1368@01 Int)) (!
  (and
    (or (<= 0 $q0@1368@01) (not (<= 0 $q0@1368@01)))
    (=>
      (and (<= 0 $q0@1368@01) (< $q0@1368@01 (Seq_length l$a@1308@01)))
      (and
        (<= 0 $q0@1368@01)
        (< $q0@1368@01 (Seq_length l$a@1308@01))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index l$a@1308@01 $q0@1368@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index l$a@1308@01 $q0@1368@01))))))
    (or
      (not (and (<= 0 $q0@1368@01) (< $q0@1368@01 (Seq_length l$a@1308@01))))
      (and (<= 0 $q0@1368@01) (< $q0@1368@01 (Seq_length l$a@1308@01)))))
  :pattern ((Seq_index l$a@1308@01 $q0@1368@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2285@11@2285@178-aux|)))
(assert (forall (($q0@1368@01 Int)) (!
  (=>
    (and (<= 0 $q0@1368@01) (< $q0@1368@01 (Seq_length l$a@1308@01)))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index l$a@1308@01 $q0@1368@01))
      (<=
        (Seq_index l$a@1308@01 $q0@1368@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index l$a@1308@01 $q0@1368@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2285@11@2285@178|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <= $unwrap(l$n) &&
;   $unwrap(l$n) <= 170141183460469231731687303715884105727
(declare-const $t@1369@01 $Snap)
(assert (= $t@1369@01 ($Snap.combine ($Snap.first $t@1369@01) ($Snap.second $t@1369@01))))
(assert (= ($Snap.first $t@1369@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= $unwrap(l$n)
; [eval] -170141183460469231731687303715884105728
; [eval] $unwrap(l$n)
(assert (<= (- 0 170141183460469231731687303715884105728) ($unwrap<Int> l$n@1309@01)))
(assert (= ($Snap.second $t@1369@01) $Snap.unit))
; [eval] $unwrap(l$n) <= 170141183460469231731687303715884105727
; [eval] $unwrap(l$n)
(assert (<= ($unwrap<Int> l$n@1309@01) 170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1370@01 $Snap)
(assert (= $t@1370@01 ($Snap.combine ($Snap.first $t@1370@01) ($Snap.second $t@1370@01))))
(assert (= ($Snap.first $t@1370@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1312@01 0))))
(assert (= ($Snap.second $t@1370@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1312@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1371@01 $Snap)
(assert (= $t@1371@01 ($Snap.combine ($Snap.first $t@1371@01) ($Snap.second $t@1371@01))))
(assert (= ($Snap.first $t@1371@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1312@01 1))))
(assert (= ($Snap.second $t@1371@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1312@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1372@01 $Snap)
(assert (= $t@1372@01 ($Snap.combine ($Snap.first $t@1372@01) ($Snap.second $t@1372@01))))
(assert (= ($Snap.first $t@1372@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1312@01 2))))
(assert (= ($Snap.second $t@1372@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1312@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@1373@01 $Snap)
(assert (= $t@1373@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@1312@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1374@01 $Snap)
(assert (= $t@1374@01 ($Snap.combine ($Snap.first $t@1374@01) ($Snap.second $t@1374@01))))
(assert (= ($Snap.first $t@1374@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1312@01 4))))
(assert (= ($Snap.second $t@1374@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1312@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@1375@01 $Snap)
(assert (= $t@1375@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@1312@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1376@01 $Snap)
(assert (= $t@1376@01 ($Snap.combine ($Snap.first $t@1376@01) ($Snap.second $t@1376@01))))
(assert (= ($Snap.first $t@1376@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1311@01 0))))
(assert (= ($Snap.second $t@1376@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1311@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1377@01 $Snap)
(assert (= $t@1377@01 ($Snap.combine ($Snap.first $t@1377@01) ($Snap.second $t@1377@01))))
(assert (= ($Snap.first $t@1377@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1311@01 1))))
(assert (= ($Snap.second $t@1377@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1311@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1378@01 $Snap)
(assert (= $t@1378@01 ($Snap.combine ($Snap.first $t@1378@01) ($Snap.second $t@1378@01))))
(assert (= ($Snap.first $t@1378@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1311@01 2))))
(assert (= ($Snap.second $t@1378@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1311@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@1379@01 $Snap)
(assert (= $t@1379@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1311@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@1380@01 $Snap)
(assert (= $t@1380@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1311@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@1381@01 $Snap)
(assert (= $t@1381@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@1382@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc(self, 3)): Seq[Int])
(declare-const $t@1383@01 $Snap)
(assert (= $t@1383@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@1384@01 $Snap)
(assert (= $t@1384@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1311@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; label return
; [exec]
; label end
; [exec]
; exhale $unwrap(l$n) < 5 ==> l$a[$unwrap(l$n)] == 0
; [eval] $unwrap(l$n) < 5 ==> l$a[$unwrap(l$n)] == 0
; [eval] $unwrap(l$n) < 5
; [eval] $unwrap(l$n)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (< ($unwrap<Int> l$n@1309@01) 5))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< ($unwrap<Int> l$n@1309@01) 5)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 883 | $unwrap[Int](l$n@1309@01) < 5 | live]
; [else-branch: 883 | !($unwrap[Int](l$n@1309@01) < 5) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 883 | $unwrap[Int](l$n@1309@01) < 5]
(assert (< ($unwrap<Int> l$n@1309@01) 5))
; [eval] l$a[$unwrap(l$n)] == 0
; [eval] l$a[$unwrap(l$n)]
; [eval] $unwrap(l$n)
(push) ; 5
(assert (not (>= ($unwrap<Int> l$n@1309@01) 0)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 883 | !($unwrap[Int](l$n@1309@01) < 5)]
(assert (not (< ($unwrap<Int> l$n@1309@01) 5)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (not (< ($unwrap<Int> l$n@1309@01) 5)))
; [eval] !$succ
; [then-branch: 884 | False | dead]
; [else-branch: 884 | True | live]
(push) ; 3
; [else-branch: 884 | True]
(pop) ; 3
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 885 | True | live]
; [else-branch: 885 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 885 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@1385@01 $Snap)
(assert (= $t@1385@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@1325@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@1386@01 $Struct)
(assert (=
  self@1386@01
  ($struct_set<$Struct> self@1315@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@1315@01 5))
    l$havoc@1325@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 4
(assert (not (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1386@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1386@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1315@01 3))))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$index_size_fail ----------
(declare-const l$a@1387@01 Seq<Int>)
(declare-const l$n@1388@01 $Int)
(declare-const $succ@1389@01 Bool)
(declare-const l$a@1390@01 Seq<Int>)
(declare-const l$n@1391@01 $Int)
(declare-const $succ@1392@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@1393@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@1394@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@1395@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@1396@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@1397@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@1398@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@1399@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@1400@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@1401@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@1402@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@1403@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@1404@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@1405@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@1406@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@1407@01 Int)
; [exec]
; var l$havoc$1: $Map[Int, $Struct]
(declare-const l$havoc$1@1408@01 $Map<Int~_$Struct>)
; [exec]
; inhale |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
(declare-const $t@1409@01 $Snap)
(assert (= $t@1409@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 0))) 12))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] }
;     0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] &&
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <=
;     170141183460469231731687303715884105727)
(declare-const $t@1410@01 $Snap)
(assert (= $t@1410@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] } 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@1411@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 886 | !(0 <= $q0@1411@01) | live]
; [else-branch: 886 | 0 <= $q0@1411@01 | live]
(push) ; 5
; [then-branch: 886 | !(0 <= $q0@1411@01)]
(assert (not (<= 0 $q0@1411@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 886 | 0 <= $q0@1411@01]
(assert (<= 0 $q0@1411@01))
; [eval] $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@1411@01) (not (<= 0 $q0@1411@01))))
(push) ; 4
; [then-branch: 887 | 0 <= $q0@1411@01 && $q0@1411@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1397@01, 0))| | live]
; [else-branch: 887 | !(0 <= $q0@1411@01 && $q0@1411@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1397@01, 0))|) | live]
(push) ; 5
; [then-branch: 887 | 0 <= $q0@1411@01 && $q0@1411@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1397@01, 0))|]
(assert (and
  (<= 0 $q0@1411@01)
  (<
    $q0@1411@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 0))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (>= $q0@1411@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 888 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1397@01, 0))[$q0@1411@01]) | live]
; [else-branch: 888 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1397@01, 0))[$q0@1411@01] | live]
(push) ; 7
; [then-branch: 888 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1397@01, 0))[$q0@1411@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 0))
      $q0@1411@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 888 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1397@01, 0))[$q0@1411@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 0))
    $q0@1411@01)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (>= $q0@1411@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 0))
      $q0@1411@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 0))
        $q0@1411@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 887 | !(0 <= $q0@1411@01 && $q0@1411@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1397@01, 0))|)]
(assert (not
  (and
    (<= 0 $q0@1411@01)
    (<
      $q0@1411@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 0)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q0@1411@01)
    (<
      $q0@1411@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 0)))))
  (and
    (<= 0 $q0@1411@01)
    (<
      $q0@1411@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 0))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 0))
          $q0@1411@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 0))
            $q0@1411@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q0@1411@01)
      (<
        $q0@1411@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 0))))))
  (and
    (<= 0 $q0@1411@01)
    (<
      $q0@1411@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 0)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@1411@01 Int)) (!
  (and
    (or (<= 0 $q0@1411@01) (not (<= 0 $q0@1411@01)))
    (=>
      (and
        (<= 0 $q0@1411@01)
        (<
          $q0@1411@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 0)))))
      (and
        (<= 0 $q0@1411@01)
        (<
          $q0@1411@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 0))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 0))
              $q0@1411@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 0))
                $q0@1411@01))))))
    (or
      (not
        (and
          (<= 0 $q0@1411@01)
          (<
            $q0@1411@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 0))))))
      (and
        (<= 0 $q0@1411@01)
        (<
          $q0@1411@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 0)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 0))
    $q0@1411@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2358@11@2358@346-aux|)))
(assert (forall (($q0@1411@01 Int)) (!
  (=>
    (and
      (<= 0 $q0@1411@01)
      (<
        $q0@1411@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 0)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 0))
          $q0@1411@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 0))
          $q0@1411@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 0))
    $q0@1411@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2358@11@2358@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
(declare-const $t@1412@01 $Snap)
(assert (= $t@1412@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(assert (=
  (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1)))
  12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $t@1413@01 $Snap)
(assert (= $t@1413@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $q1@1414@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 889 | !(0 <= $q1@1414@01) | live]
; [else-branch: 889 | 0 <= $q1@1414@01 | live]
(push) ; 5
; [then-branch: 889 | !(0 <= $q1@1414@01)]
(assert (not (<= 0 $q1@1414@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 889 | 0 <= $q1@1414@01]
(assert (<= 0 $q1@1414@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@1414@01) (not (<= 0 $q1@1414@01))))
(push) ; 4
; [then-branch: 890 | 0 <= $q1@1414@01 && $q1@1414@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1397@01, 1))| | live]
; [else-branch: 890 | !(0 <= $q1@1414@01 && $q1@1414@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1397@01, 1))|) | live]
(push) ; 5
; [then-branch: 890 | 0 <= $q1@1414@01 && $q1@1414@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1397@01, 1))|]
(assert (and
  (<= 0 $q1@1414@01)
  (<
    $q1@1414@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))))))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 6
(assert (not (>= $q1@1414@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 890 | !(0 <= $q1@1414@01 && $q1@1414@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1397@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@1414@01)
    (<
      $q1@1414@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@1414@01)
      (<
        $q1@1414@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))))))
  (and
    (<= 0 $q1@1414@01)
    (<
      $q1@1414@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@1414@01 Int)) (!
  (and
    (or (<= 0 $q1@1414@01) (not (<= 0 $q1@1414@01)))
    (or
      (not
        (and
          (<= 0 $q1@1414@01)
          (<
            $q1@1414@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))))))
      (and
        (<= 0 $q1@1414@01)
        (<
          $q1@1414@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
    $q1@1414@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2360@11@2360@228-aux|)))
(assert (forall (($q1@1414@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@1414@01)
      (<
        $q1@1414@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
          $q1@1414@01))
      12))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
    $q1@1414@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2360@11@2360@228|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     (forall $q2: Int ::
;       { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] }
;       0 <= $q2 &&
;       $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==>
;       -170141183460469231731687303715884105728 <=
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] &&
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <=
;       170141183460469231731687303715884105727))
(declare-const $t@1415@01 $Snap)
(assert (= $t@1415@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727))
(declare-const $q1@1416@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 891 | !(0 <= $q1@1416@01) | live]
; [else-branch: 891 | 0 <= $q1@1416@01 | live]
(push) ; 5
; [then-branch: 891 | !(0 <= $q1@1416@01)]
(assert (not (<= 0 $q1@1416@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 891 | 0 <= $q1@1416@01]
(assert (<= 0 $q1@1416@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@1416@01) (not (<= 0 $q1@1416@01))))
(push) ; 4
; [then-branch: 892 | 0 <= $q1@1416@01 && $q1@1416@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1397@01, 1))| | live]
; [else-branch: 892 | !(0 <= $q1@1416@01 && $q1@1416@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1397@01, 1))|) | live]
(push) ; 5
; [then-branch: 892 | 0 <= $q1@1416@01 && $q1@1416@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1397@01, 1))|]
(assert (and
  (<= 0 $q1@1416@01)
  (<
    $q1@1416@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))))))
; [eval] (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
(declare-const $q2@1417@01 Int)
(push) ; 6
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] 0 <= $q2
(push) ; 7
; [then-branch: 893 | !(0 <= $q2@1417@01) | live]
; [else-branch: 893 | 0 <= $q2@1417@01 | live]
(push) ; 8
; [then-branch: 893 | !(0 <= $q2@1417@01)]
(assert (not (<= 0 $q2@1417@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 893 | 0 <= $q2@1417@01]
(assert (<= 0 $q2@1417@01))
; [eval] $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@1416@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q2@1417@01) (not (<= 0 $q2@1417@01))))
(push) ; 7
; [then-branch: 894 | 0 <= $q2@1417@01 && $q2@1417@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1397@01, 1))[$q1@1416@01]| | live]
; [else-branch: 894 | !(0 <= $q2@1417@01 && $q2@1417@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1397@01, 1))[$q1@1416@01]|) | live]
(push) ; 8
; [then-branch: 894 | 0 <= $q2@1417@01 && $q2@1417@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1397@01, 1))[$q1@1416@01]|]
(assert (and
  (<= 0 $q2@1417@01)
  (<
    $q2@1417@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
        $q1@1416@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@1416@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q2@1417@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 895 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1397@01, 1))[$q1@1416@01][$q2@1417@01]) | live]
; [else-branch: 895 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1397@01, 1))[$q1@1416@01][$q2@1417@01] | live]
(push) ; 10
; [then-branch: 895 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1397@01, 1))[$q1@1416@01][$q2@1417@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
        $q1@1416@01)
      $q2@1417@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 895 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1397@01, 1))[$q1@1416@01][$q2@1417@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
      $q1@1416@01)
    $q2@1417@01)))
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 11
(assert (not (>= $q1@1416@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= $q2@1417@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
        $q1@1416@01)
      $q2@1417@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
          $q1@1416@01)
        $q2@1417@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 894 | !(0 <= $q2@1417@01 && $q2@1417@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1397@01, 1))[$q1@1416@01]|)]
(assert (not
  (and
    (<= 0 $q2@1417@01)
    (<
      $q2@1417@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
          $q1@1416@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q2@1417@01)
    (<
      $q2@1417@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
          $q1@1416@01))))
  (and
    (<= 0 $q2@1417@01)
    (<
      $q2@1417@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
          $q1@1416@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
            $q1@1416@01)
          $q2@1417@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
              $q1@1416@01)
            $q2@1417@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q2@1417@01)
      (<
        $q2@1417@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
            $q1@1416@01)))))
  (and
    (<= 0 $q2@1417@01)
    (<
      $q2@1417@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
          $q1@1416@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@1417@01 Int)) (!
  (and
    (or (<= 0 $q2@1417@01) (not (<= 0 $q2@1417@01)))
    (=>
      (and
        (<= 0 $q2@1417@01)
        (<
          $q2@1417@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
              $q1@1416@01))))
      (and
        (<= 0 $q2@1417@01)
        (<
          $q2@1417@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
              $q1@1416@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
                $q1@1416@01)
              $q2@1417@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
                  $q1@1416@01)
                $q2@1417@01))))))
    (or
      (not
        (and
          (<= 0 $q2@1417@01)
          (<
            $q2@1417@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
                $q1@1416@01)))))
      (and
        (<= 0 $q2@1417@01)
        (<
          $q2@1417@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
              $q1@1416@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
      $q1@1416@01)
    $q2@1417@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2361@166@2361@541-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 892 | !(0 <= $q1@1416@01 && $q1@1416@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1397@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@1416@01)
    (<
      $q1@1416@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q1@1416@01)
    (<
      $q1@1416@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1)))))
  (and
    (<= 0 $q1@1416@01)
    (<
      $q1@1416@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))))
    (forall (($q2@1417@01 Int)) (!
      (and
        (or (<= 0 $q2@1417@01) (not (<= 0 $q2@1417@01)))
        (=>
          (and
            (<= 0 $q2@1417@01)
            (<
              $q2@1417@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
                  $q1@1416@01))))
          (and
            (<= 0 $q2@1417@01)
            (<
              $q2@1417@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
                  $q1@1416@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
                    $q1@1416@01)
                  $q2@1417@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
                      $q1@1416@01)
                    $q2@1417@01))))))
        (or
          (not
            (and
              (<= 0 $q2@1417@01)
              (<
                $q2@1417@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
                    $q1@1416@01)))))
          (and
            (<= 0 $q2@1417@01)
            (<
              $q2@1417@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
                  $q1@1416@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
          $q1@1416@01)
        $q2@1417@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2361@166@2361@541-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@1416@01)
      (<
        $q1@1416@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))))))
  (and
    (<= 0 $q1@1416@01)
    (<
      $q1@1416@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@1416@01 Int)) (!
  (and
    (or (<= 0 $q1@1416@01) (not (<= 0 $q1@1416@01)))
    (=>
      (and
        (<= 0 $q1@1416@01)
        (<
          $q1@1416@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1)))))
      (and
        (<= 0 $q1@1416@01)
        (<
          $q1@1416@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))))
        (forall (($q2@1417@01 Int)) (!
          (and
            (or (<= 0 $q2@1417@01) (not (<= 0 $q2@1417@01)))
            (=>
              (and
                (<= 0 $q2@1417@01)
                (<
                  $q2@1417@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
                      $q1@1416@01))))
              (and
                (<= 0 $q2@1417@01)
                (<
                  $q2@1417@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
                      $q1@1416@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
                        $q1@1416@01)
                      $q2@1417@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
                          $q1@1416@01)
                        $q2@1417@01))))))
            (or
              (not
                (and
                  (<= 0 $q2@1417@01)
                  (<
                    $q2@1417@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
                        $q1@1416@01)))))
              (and
                (<= 0 $q2@1417@01)
                (<
                  $q2@1417@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
                      $q1@1416@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
              $q1@1416@01)
            $q2@1417@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2361@166@2361@541-aux|))))
    (or
      (not
        (and
          (<= 0 $q1@1416@01)
          (<
            $q1@1416@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))))))
      (and
        (<= 0 $q1@1416@01)
        (<
          $q1@1416@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
    $q1@1416@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2361@11@2361@542-aux|)))
(assert (forall (($q1@1416@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@1416@01)
      (<
        $q1@1416@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1)))))
    (forall (($q2@1417@01 Int)) (!
      (=>
        (and
          (<= 0 $q2@1417@01)
          (<
            $q2@1417@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
                $q1@1416@01))))
        (and
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
                $q1@1416@01)
              $q2@1417@01))
          (<=
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
                $q1@1416@01)
              $q2@1417@01)
            170141183460469231731687303715884105727)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
          $q1@1416@01)
        $q2@1417@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2361@166@2361@541|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1397@01 1))
    $q1@1416@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2361@11@2361@542|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
(declare-const $t@1418@01 $Snap)
(assert (= $t@1418@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(assert (=
  (Seq_length
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2)))
  2))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $t@1419@01 $Snap)
(assert (= $t@1419@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $q3@1420@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 896 | !(0 <= $q3@1420@01) | live]
; [else-branch: 896 | 0 <= $q3@1420@01 | live]
(push) ; 5
; [then-branch: 896 | !(0 <= $q3@1420@01)]
(assert (not (<= 0 $q3@1420@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 896 | 0 <= $q3@1420@01]
(assert (<= 0 $q3@1420@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1420@01) (not (<= 0 $q3@1420@01))))
(push) ; 4
; [then-branch: 897 | 0 <= $q3@1420@01 && $q3@1420@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))| | live]
; [else-branch: 897 | !(0 <= $q3@1420@01 && $q3@1420@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))|) | live]
(push) ; 5
; [then-branch: 897 | 0 <= $q3@1420@01 && $q3@1420@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))|]
(assert (and
  (<= 0 $q3@1420@01)
  (<
    $q3@1420@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 6
(assert (not (>= $q3@1420@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 897 | !(0 <= $q3@1420@01 && $q3@1420@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1420@01)
    (<
      $q3@1420@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1420@01)
      (<
        $q3@1420@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))))))
  (and
    (<= 0 $q3@1420@01)
    (<
      $q3@1420@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1420@01 Int)) (!
  (and
    (or (<= 0 $q3@1420@01) (not (<= 0 $q3@1420@01)))
    (or
      (not
        (and
          (<= 0 $q3@1420@01)
          (<
            $q3@1420@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))))))
      (and
        (<= 0 $q3@1420@01)
        (<
          $q3@1420@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
    $q3@1420@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2363@11@2363@242-aux|)))
(assert (forall (($q3@1420@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1420@01)
      (<
        $q3@1420@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
          $q3@1420@01))
      2))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
    $q3@1420@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2363@11@2363@242|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==
;       2))
(declare-const $t@1421@01 $Snap)
(assert (= $t@1421@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2))
(declare-const $q3@1422@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 898 | !(0 <= $q3@1422@01) | live]
; [else-branch: 898 | 0 <= $q3@1422@01 | live]
(push) ; 5
; [then-branch: 898 | !(0 <= $q3@1422@01)]
(assert (not (<= 0 $q3@1422@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 898 | 0 <= $q3@1422@01]
(assert (<= 0 $q3@1422@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1422@01) (not (<= 0 $q3@1422@01))))
(push) ; 4
; [then-branch: 899 | 0 <= $q3@1422@01 && $q3@1422@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))| | live]
; [else-branch: 899 | !(0 <= $q3@1422@01 && $q3@1422@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))|) | live]
(push) ; 5
; [then-branch: 899 | 0 <= $q3@1422@01 && $q3@1422@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))|]
(assert (and
  (<= 0 $q3@1422@01)
  (<
    $q3@1422@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
(declare-const $q4@1423@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 900 | !(0 <= $q4@1423@01) | live]
; [else-branch: 900 | 0 <= $q4@1423@01 | live]
(push) ; 8
; [then-branch: 900 | !(0 <= $q4@1423@01)]
(assert (not (<= 0 $q4@1423@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 900 | 0 <= $q4@1423@01]
(assert (<= 0 $q4@1423@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1422@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@1423@01) (not (<= 0 $q4@1423@01))))
(push) ; 7
; [then-branch: 901 | 0 <= $q4@1423@01 && $q4@1423@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))[$q3@1422@01]| | live]
; [else-branch: 901 | !(0 <= $q4@1423@01 && $q4@1423@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))[$q3@1422@01]|) | live]
(push) ; 8
; [then-branch: 901 | 0 <= $q4@1423@01 && $q4@1423@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))[$q3@1422@01]|]
(assert (and
  (<= 0 $q4@1423@01)
  (<
    $q4@1423@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
        $q3@1422@01)))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1422@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q4@1423@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 901 | !(0 <= $q4@1423@01 && $q4@1423@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))[$q3@1422@01]|)]
(assert (not
  (and
    (<= 0 $q4@1423@01)
    (<
      $q4@1423@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
          $q3@1422@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@1423@01)
      (<
        $q4@1423@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
            $q3@1422@01)))))
  (and
    (<= 0 $q4@1423@01)
    (<
      $q4@1423@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
          $q3@1422@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1423@01 Int)) (!
  (and
    (or (<= 0 $q4@1423@01) (not (<= 0 $q4@1423@01)))
    (or
      (not
        (and
          (<= 0 $q4@1423@01)
          (<
            $q4@1423@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                $q3@1422@01)))))
      (and
        (<= 0 $q4@1423@01)
        (<
          $q4@1423@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
              $q3@1422@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
      $q3@1422@01)
    $q4@1423@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2364@176@2364@422-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 899 | !(0 <= $q3@1422@01 && $q3@1422@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1422@01)
    (<
      $q3@1422@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@1422@01)
    (<
      $q3@1422@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2)))))
  (and
    (<= 0 $q3@1422@01)
    (<
      $q3@1422@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))))
    (forall (($q4@1423@01 Int)) (!
      (and
        (or (<= 0 $q4@1423@01) (not (<= 0 $q4@1423@01)))
        (or
          (not
            (and
              (<= 0 $q4@1423@01)
              (<
                $q4@1423@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                    $q3@1422@01)))))
          (and
            (<= 0 $q4@1423@01)
            (<
              $q4@1423@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                  $q3@1422@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
          $q3@1422@01)
        $q4@1423@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2364@176@2364@422-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1422@01)
      (<
        $q3@1422@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))))))
  (and
    (<= 0 $q3@1422@01)
    (<
      $q3@1422@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1422@01 Int)) (!
  (and
    (or (<= 0 $q3@1422@01) (not (<= 0 $q3@1422@01)))
    (=>
      (and
        (<= 0 $q3@1422@01)
        (<
          $q3@1422@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2)))))
      (and
        (<= 0 $q3@1422@01)
        (<
          $q3@1422@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))))
        (forall (($q4@1423@01 Int)) (!
          (and
            (or (<= 0 $q4@1423@01) (not (<= 0 $q4@1423@01)))
            (or
              (not
                (and
                  (<= 0 $q4@1423@01)
                  (<
                    $q4@1423@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                        $q3@1422@01)))))
              (and
                (<= 0 $q4@1423@01)
                (<
                  $q4@1423@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                      $q3@1422@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
              $q3@1422@01)
            $q4@1423@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2364@176@2364@422-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@1422@01)
          (<
            $q3@1422@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))))))
      (and
        (<= 0 $q3@1422@01)
        (<
          $q3@1422@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
    $q3@1422@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2364@11@2364@423-aux|)))
(assert (forall (($q3@1422@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1422@01)
      (<
        $q3@1422@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2)))))
    (forall (($q4@1423@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@1423@01)
          (<
            $q4@1423@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                $q3@1422@01))))
        (=
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                $q3@1422@01)
              $q4@1423@01))
          2))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
          $q3@1422@01)
        $q4@1423@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2364@176@2364@422|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
    $q3@1422@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2364@11@2364@423|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       (forall $q5: Int ::
;         { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] }
;         0 <= $q5 &&
;         $q5 <
;         |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==>
;         -170141183460469231731687303715884105728 <=
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] &&
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <=
;         170141183460469231731687303715884105727)))
(declare-const $t@1424@01 $Snap)
(assert (= $t@1424@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)))
(declare-const $q3@1425@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 902 | !(0 <= $q3@1425@01) | live]
; [else-branch: 902 | 0 <= $q3@1425@01 | live]
(push) ; 5
; [then-branch: 902 | !(0 <= $q3@1425@01)]
(assert (not (<= 0 $q3@1425@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 902 | 0 <= $q3@1425@01]
(assert (<= 0 $q3@1425@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1425@01) (not (<= 0 $q3@1425@01))))
(push) ; 4
; [then-branch: 903 | 0 <= $q3@1425@01 && $q3@1425@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))| | live]
; [else-branch: 903 | !(0 <= $q3@1425@01 && $q3@1425@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))|) | live]
(push) ; 5
; [then-branch: 903 | 0 <= $q3@1425@01 && $q3@1425@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))|]
(assert (and
  (<= 0 $q3@1425@01)
  (<
    $q3@1425@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
(declare-const $q4@1426@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 904 | !(0 <= $q4@1426@01) | live]
; [else-branch: 904 | 0 <= $q4@1426@01 | live]
(push) ; 8
; [then-branch: 904 | !(0 <= $q4@1426@01)]
(assert (not (<= 0 $q4@1426@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 904 | 0 <= $q4@1426@01]
(assert (<= 0 $q4@1426@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1425@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@1426@01) (not (<= 0 $q4@1426@01))))
(push) ; 7
; [then-branch: 905 | 0 <= $q4@1426@01 && $q4@1426@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))[$q3@1425@01]| | live]
; [else-branch: 905 | !(0 <= $q4@1426@01 && $q4@1426@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))[$q3@1425@01]|) | live]
(push) ; 8
; [then-branch: 905 | 0 <= $q4@1426@01 && $q4@1426@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))[$q3@1425@01]|]
(assert (and
  (<= 0 $q4@1426@01)
  (<
    $q4@1426@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
        $q3@1425@01)))))
; [eval] (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
(declare-const $q5@1427@01 Int)
(push) ; 9
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] 0 <= $q5
(push) ; 10
; [then-branch: 906 | !(0 <= $q5@1427@01) | live]
; [else-branch: 906 | 0 <= $q5@1427@01 | live]
(push) ; 11
; [then-branch: 906 | !(0 <= $q5@1427@01)]
(assert (not (<= 0 $q5@1427@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 906 | 0 <= $q5@1427@01]
(assert (<= 0 $q5@1427@01))
; [eval] $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@1425@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@1426@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q5@1427@01) (not (<= 0 $q5@1427@01))))
(push) ; 10
; [then-branch: 907 | 0 <= $q5@1427@01 && $q5@1427@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))[$q3@1425@01][$q4@1426@01]| | live]
; [else-branch: 907 | !(0 <= $q5@1427@01 && $q5@1427@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))[$q3@1425@01][$q4@1426@01]|) | live]
(push) ; 11
; [then-branch: 907 | 0 <= $q5@1427@01 && $q5@1427@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))[$q3@1425@01][$q4@1426@01]|]
(assert (and
  (<= 0 $q5@1427@01)
  (<
    $q5@1427@01
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
          $q3@1425@01)
        $q4@1426@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@1425@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@1426@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q5@1427@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 908 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))[$q3@1425@01][$q4@1426@01][$q5@1427@01]) | live]
; [else-branch: 908 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))[$q3@1425@01][$q4@1426@01][$q5@1427@01] | live]
(push) ; 13
; [then-branch: 908 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))[$q3@1425@01][$q4@1426@01][$q5@1427@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
          $q3@1425@01)
        $q4@1426@01)
      $q5@1427@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 908 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))[$q3@1425@01][$q4@1426@01][$q5@1427@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
        $q3@1425@01)
      $q4@1426@01)
    $q5@1427@01)))
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 14
(assert (not (>= $q3@1425@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q4@1426@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q5@1427@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
          $q3@1425@01)
        $q4@1426@01)
      $q5@1427@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
            $q3@1425@01)
          $q4@1426@01)
        $q5@1427@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 907 | !(0 <= $q5@1427@01 && $q5@1427@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))[$q3@1425@01][$q4@1426@01]|)]
(assert (not
  (and
    (<= 0 $q5@1427@01)
    (<
      $q5@1427@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
            $q3@1425@01)
          $q4@1426@01))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q5@1427@01)
    (<
      $q5@1427@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
            $q3@1425@01)
          $q4@1426@01))))
  (and
    (<= 0 $q5@1427@01)
    (<
      $q5@1427@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
            $q3@1425@01)
          $q4@1426@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
              $q3@1425@01)
            $q4@1426@01)
          $q5@1427@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                $q3@1425@01)
              $q4@1426@01)
            $q5@1427@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q5@1427@01)
      (<
        $q5@1427@01
        (Seq_length
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
              $q3@1425@01)
            $q4@1426@01)))))
  (and
    (<= 0 $q5@1427@01)
    (<
      $q5@1427@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
            $q3@1425@01)
          $q4@1426@01))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@1427@01 Int)) (!
  (and
    (or (<= 0 $q5@1427@01) (not (<= 0 $q5@1427@01)))
    (=>
      (and
        (<= 0 $q5@1427@01)
        (<
          $q5@1427@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                $q3@1425@01)
              $q4@1426@01))))
      (and
        (<= 0 $q5@1427@01)
        (<
          $q5@1427@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                $q3@1425@01)
              $q4@1426@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                  $q3@1425@01)
                $q4@1426@01)
              $q5@1427@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                    $q3@1425@01)
                  $q4@1426@01)
                $q5@1427@01))))))
    (or
      (not
        (and
          (<= 0 $q5@1427@01)
          (<
            $q5@1427@01
            (Seq_length
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                  $q3@1425@01)
                $q4@1426@01)))))
      (and
        (<= 0 $q5@1427@01)
        (<
          $q5@1427@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                $q3@1425@01)
              $q4@1426@01))))))
  :pattern ((Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
        $q3@1425@01)
      $q4@1426@01)
    $q5@1427@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2365@351@2365@766-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 905 | !(0 <= $q4@1426@01 && $q4@1426@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))[$q3@1425@01]|)]
(assert (not
  (and
    (<= 0 $q4@1426@01)
    (<
      $q4@1426@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
          $q3@1425@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q4@1426@01)
    (<
      $q4@1426@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
          $q3@1425@01))))
  (and
    (<= 0 $q4@1426@01)
    (<
      $q4@1426@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
          $q3@1425@01)))
    (forall (($q5@1427@01 Int)) (!
      (and
        (or (<= 0 $q5@1427@01) (not (<= 0 $q5@1427@01)))
        (=>
          (and
            (<= 0 $q5@1427@01)
            (<
              $q5@1427@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                    $q3@1425@01)
                  $q4@1426@01))))
          (and
            (<= 0 $q5@1427@01)
            (<
              $q5@1427@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                    $q3@1425@01)
                  $q4@1426@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                      $q3@1425@01)
                    $q4@1426@01)
                  $q5@1427@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                        $q3@1425@01)
                      $q4@1426@01)
                    $q5@1427@01))))))
        (or
          (not
            (and
              (<= 0 $q5@1427@01)
              (<
                $q5@1427@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                      $q3@1425@01)
                    $q4@1426@01)))))
          (and
            (<= 0 $q5@1427@01)
            (<
              $q5@1427@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                    $q3@1425@01)
                  $q4@1426@01))))))
      :pattern ((Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
            $q3@1425@01)
          $q4@1426@01)
        $q5@1427@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2365@351@2365@766-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@1426@01)
      (<
        $q4@1426@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
            $q3@1425@01)))))
  (and
    (<= 0 $q4@1426@01)
    (<
      $q4@1426@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
          $q3@1425@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1426@01 Int)) (!
  (and
    (or (<= 0 $q4@1426@01) (not (<= 0 $q4@1426@01)))
    (=>
      (and
        (<= 0 $q4@1426@01)
        (<
          $q4@1426@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
              $q3@1425@01))))
      (and
        (<= 0 $q4@1426@01)
        (<
          $q4@1426@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
              $q3@1425@01)))
        (forall (($q5@1427@01 Int)) (!
          (and
            (or (<= 0 $q5@1427@01) (not (<= 0 $q5@1427@01)))
            (=>
              (and
                (<= 0 $q5@1427@01)
                (<
                  $q5@1427@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                        $q3@1425@01)
                      $q4@1426@01))))
              (and
                (<= 0 $q5@1427@01)
                (<
                  $q5@1427@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                        $q3@1425@01)
                      $q4@1426@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                          $q3@1425@01)
                        $q4@1426@01)
                      $q5@1427@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                            $q3@1425@01)
                          $q4@1426@01)
                        $q5@1427@01))))))
            (or
              (not
                (and
                  (<= 0 $q5@1427@01)
                  (<
                    $q5@1427@01
                    (Seq_length
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                          $q3@1425@01)
                        $q4@1426@01)))))
              (and
                (<= 0 $q5@1427@01)
                (<
                  $q5@1427@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                        $q3@1425@01)
                      $q4@1426@01))))))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                $q3@1425@01)
              $q4@1426@01)
            $q5@1427@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2365@351@2365@766-aux|))))
    (or
      (not
        (and
          (<= 0 $q4@1426@01)
          (<
            $q4@1426@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                $q3@1425@01)))))
      (and
        (<= 0 $q4@1426@01)
        (<
          $q4@1426@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
              $q3@1425@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
      $q3@1425@01)
    $q4@1426@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2365@176@2365@767-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 903 | !(0 <= $q3@1425@01 && $q3@1425@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1397@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1425@01)
    (<
      $q3@1425@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@1425@01)
    (<
      $q3@1425@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2)))))
  (and
    (<= 0 $q3@1425@01)
    (<
      $q3@1425@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))))
    (forall (($q4@1426@01 Int)) (!
      (and
        (or (<= 0 $q4@1426@01) (not (<= 0 $q4@1426@01)))
        (=>
          (and
            (<= 0 $q4@1426@01)
            (<
              $q4@1426@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                  $q3@1425@01))))
          (and
            (<= 0 $q4@1426@01)
            (<
              $q4@1426@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                  $q3@1425@01)))
            (forall (($q5@1427@01 Int)) (!
              (and
                (or (<= 0 $q5@1427@01) (not (<= 0 $q5@1427@01)))
                (=>
                  (and
                    (<= 0 $q5@1427@01)
                    (<
                      $q5@1427@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                            $q3@1425@01)
                          $q4@1426@01))))
                  (and
                    (<= 0 $q5@1427@01)
                    (<
                      $q5@1427@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                            $q3@1425@01)
                          $q4@1426@01)))
                    (or
                      (<=
                        (- 0 170141183460469231731687303715884105728)
                        (Seq_index
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                              $q3@1425@01)
                            $q4@1426@01)
                          $q5@1427@01))
                      (not
                        (<=
                          (- 0 170141183460469231731687303715884105728)
                          (Seq_index
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                                $q3@1425@01)
                              $q4@1426@01)
                            $q5@1427@01))))))
                (or
                  (not
                    (and
                      (<= 0 $q5@1427@01)
                      (<
                        $q5@1427@01
                        (Seq_length
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                              $q3@1425@01)
                            $q4@1426@01)))))
                  (and
                    (<= 0 $q5@1427@01)
                    (<
                      $q5@1427@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                            $q3@1425@01)
                          $q4@1426@01))))))
              :pattern ((Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                    $q3@1425@01)
                  $q4@1426@01)
                $q5@1427@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2365@351@2365@766-aux|))))
        (or
          (not
            (and
              (<= 0 $q4@1426@01)
              (<
                $q4@1426@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                    $q3@1425@01)))))
          (and
            (<= 0 $q4@1426@01)
            (<
              $q4@1426@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                  $q3@1425@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
          $q3@1425@01)
        $q4@1426@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2365@176@2365@767-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1425@01)
      (<
        $q3@1425@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))))))
  (and
    (<= 0 $q3@1425@01)
    (<
      $q3@1425@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1425@01 Int)) (!
  (and
    (or (<= 0 $q3@1425@01) (not (<= 0 $q3@1425@01)))
    (=>
      (and
        (<= 0 $q3@1425@01)
        (<
          $q3@1425@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2)))))
      (and
        (<= 0 $q3@1425@01)
        (<
          $q3@1425@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))))
        (forall (($q4@1426@01 Int)) (!
          (and
            (or (<= 0 $q4@1426@01) (not (<= 0 $q4@1426@01)))
            (=>
              (and
                (<= 0 $q4@1426@01)
                (<
                  $q4@1426@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                      $q3@1425@01))))
              (and
                (<= 0 $q4@1426@01)
                (<
                  $q4@1426@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                      $q3@1425@01)))
                (forall (($q5@1427@01 Int)) (!
                  (and
                    (or (<= 0 $q5@1427@01) (not (<= 0 $q5@1427@01)))
                    (=>
                      (and
                        (<= 0 $q5@1427@01)
                        (<
                          $q5@1427@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                                $q3@1425@01)
                              $q4@1426@01))))
                      (and
                        (<= 0 $q5@1427@01)
                        (<
                          $q5@1427@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                                $q3@1425@01)
                              $q4@1426@01)))
                        (or
                          (<=
                            (- 0 170141183460469231731687303715884105728)
                            (Seq_index
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                                  $q3@1425@01)
                                $q4@1426@01)
                              $q5@1427@01))
                          (not
                            (<=
                              (- 0 170141183460469231731687303715884105728)
                              (Seq_index
                                (Seq_index
                                  (Seq_index
                                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                                    $q3@1425@01)
                                  $q4@1426@01)
                                $q5@1427@01))))))
                    (or
                      (not
                        (and
                          (<= 0 $q5@1427@01)
                          (<
                            $q5@1427@01
                            (Seq_length
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                                  $q3@1425@01)
                                $q4@1426@01)))))
                      (and
                        (<= 0 $q5@1427@01)
                        (<
                          $q5@1427@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                                $q3@1425@01)
                              $q4@1426@01))))))
                  :pattern ((Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                        $q3@1425@01)
                      $q4@1426@01)
                    $q5@1427@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2365@351@2365@766-aux|))))
            (or
              (not
                (and
                  (<= 0 $q4@1426@01)
                  (<
                    $q4@1426@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                        $q3@1425@01)))))
              (and
                (<= 0 $q4@1426@01)
                (<
                  $q4@1426@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                      $q3@1425@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
              $q3@1425@01)
            $q4@1426@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2365@176@2365@767-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@1425@01)
          (<
            $q3@1425@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))))))
      (and
        (<= 0 $q3@1425@01)
        (<
          $q3@1425@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
    $q3@1425@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2365@11@2365@768-aux|)))
(assert (forall (($q3@1425@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1425@01)
      (<
        $q3@1425@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2)))))
    (forall (($q4@1426@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@1426@01)
          (<
            $q4@1426@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                $q3@1425@01))))
        (forall (($q5@1427@01 Int)) (!
          (=>
            (and
              (<= 0 $q5@1427@01)
              (<
                $q5@1427@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                      $q3@1425@01)
                    $q4@1426@01))))
            (and
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                      $q3@1425@01)
                    $q4@1426@01)
                  $q5@1427@01))
              (<=
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                      $q3@1425@01)
                    $q4@1426@01)
                  $q5@1427@01)
                170141183460469231731687303715884105727)))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
                $q3@1425@01)
              $q4@1426@01)
            $q5@1427@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2365@351@2365@766|)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
          $q3@1425@01)
        $q4@1426@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2365@176@2365@767|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1397@01 2))
    $q3@1425@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2365@11@2365@768|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
(declare-const $t@1428@01 $Snap)
(assert (= $t@1428@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3))) 1000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] }
;     0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] &&
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <=
;     170141183460469231731687303715884105727)
(declare-const $t@1429@01 $Snap)
(assert (= $t@1429@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] } 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727)
(declare-const $q6@1430@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] 0 <= $q6
(push) ; 4
; [then-branch: 909 | !(0 <= $q6@1430@01) | live]
; [else-branch: 909 | 0 <= $q6@1430@01 | live]
(push) ; 5
; [then-branch: 909 | !(0 <= $q6@1430@01)]
(assert (not (<= 0 $q6@1430@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 909 | 0 <= $q6@1430@01]
(assert (<= 0 $q6@1430@01))
; [eval] $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q6@1430@01) (not (<= 0 $q6@1430@01))))
(push) ; 4
; [then-branch: 910 | 0 <= $q6@1430@01 && $q6@1430@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1397@01, 3))| | live]
; [else-branch: 910 | !(0 <= $q6@1430@01 && $q6@1430@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1397@01, 3))|) | live]
(push) ; 5
; [then-branch: 910 | 0 <= $q6@1430@01 && $q6@1430@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1397@01, 3))|]
(assert (and
  (<= 0 $q6@1430@01)
  (<
    $q6@1430@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (>= $q6@1430@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 911 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1397@01, 3))[$q6@1430@01]) | live]
; [else-branch: 911 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1397@01, 3))[$q6@1430@01] | live]
(push) ; 7
; [then-branch: 911 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1397@01, 3))[$q6@1430@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3))
      $q6@1430@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 911 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1397@01, 3))[$q6@1430@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3))
    $q6@1430@01)))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (>= $q6@1430@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3))
      $q6@1430@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3))
        $q6@1430@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 910 | !(0 <= $q6@1430@01 && $q6@1430@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1397@01, 3))|)]
(assert (not
  (and
    (<= 0 $q6@1430@01)
    (<
      $q6@1430@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q6@1430@01)
    (<
      $q6@1430@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3)))))
  (and
    (<= 0 $q6@1430@01)
    (<
      $q6@1430@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3))
          $q6@1430@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3))
            $q6@1430@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q6@1430@01)
      (<
        $q6@1430@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3))))))
  (and
    (<= 0 $q6@1430@01)
    (<
      $q6@1430@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1430@01 Int)) (!
  (and
    (or (<= 0 $q6@1430@01) (not (<= 0 $q6@1430@01)))
    (=>
      (and
        (<= 0 $q6@1430@01)
        (<
          $q6@1430@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3)))))
      (and
        (<= 0 $q6@1430@01)
        (<
          $q6@1430@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3))
              $q6@1430@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3))
                $q6@1430@01))))))
    (or
      (not
        (and
          (<= 0 $q6@1430@01)
          (<
            $q6@1430@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3))))))
      (and
        (<= 0 $q6@1430@01)
        (<
          $q6@1430@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3))
    $q6@1430@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2367@11@2367@346-aux|)))
(assert (forall (($q6@1430@01 Int)) (!
  (=>
    (and
      (<= 0 $q6@1430@01)
      (<
        $q6@1430@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3))
          $q6@1430@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3))
          $q6@1430@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3))
    $q6@1430@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2367@11@2367@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==
;     10)
(declare-const $t@1431@01 $Snap)
(assert (= $t@1431@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10)
(declare-const $q7@1432@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1432@01 Int)) (!
  (=
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1432@01))
    10)
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1432@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2368@11@2368@209|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     (forall $q8: Int ::
;       { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] }
;       0 <= $q8 &&
;       $q8 <
;       |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==>
;       -170141183460469231731687303715884105728 <=
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] &&
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <=
;       170141183460469231731687303715884105727))
(declare-const $t@1433@01 $Snap)
(assert (= $t@1433@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727))
(declare-const $q7@1434@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727)
(declare-const $q8@1435@01 Int)
(push) ; 4
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] 0 <= $q8
(push) ; 5
; [then-branch: 912 | !(0 <= $q8@1435@01) | live]
; [else-branch: 912 | 0 <= $q8@1435@01 | live]
(push) ; 6
; [then-branch: 912 | !(0 <= $q8@1435@01)]
(assert (not (<= 0 $q8@1435@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 912 | 0 <= $q8@1435@01]
(assert (<= 0 $q8@1435@01))
; [eval] $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q8@1435@01) (not (<= 0 $q8@1435@01))))
(push) ; 5
; [then-branch: 913 | 0 <= $q8@1435@01 && $q8@1435@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1397@01, 4)), $q7@1434@01)| | live]
; [else-branch: 913 | !(0 <= $q8@1435@01 && $q8@1435@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1397@01, 4)), $q7@1434@01)|) | live]
(push) ; 6
; [then-branch: 913 | 0 <= $q8@1435@01 && $q8@1435@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1397@01, 4)), $q7@1434@01)|]
(assert (and
  (<= 0 $q8@1435@01)
  (<
    $q8@1435@01
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] -170141183460469231731687303715884105728
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 7
(assert (not (>= $q8@1435@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 914 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1397@01, 4)), $q7@1434@01)[$q8@1435@01]) | live]
; [else-branch: 914 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1397@01, 4)), $q7@1434@01)[$q8@1435@01] | live]
(push) ; 8
; [then-branch: 914 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1397@01, 4)), $q7@1434@01)[$q8@1435@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01)
      $q8@1435@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 914 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1397@01, 4)), $q7@1434@01)[$q8@1435@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01)
    $q8@1435@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 9
(assert (not (>= $q8@1435@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01)
      $q8@1435@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01)
        $q8@1435@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 913 | !(0 <= $q8@1435@01 && $q8@1435@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1397@01, 4)), $q7@1434@01)|)]
(assert (not
  (and
    (<= 0 $q8@1435@01)
    (<
      $q8@1435@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q8@1435@01)
    (<
      $q8@1435@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01))))
  (and
    (<= 0 $q8@1435@01)
    (<
      $q8@1435@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01)
          $q8@1435@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01)
            $q8@1435@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q8@1435@01)
      (<
        $q8@1435@01
        (Seq_length
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01)))))
  (and
    (<= 0 $q8@1435@01)
    (<
      $q8@1435@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q8@1435@01 Int)) (!
  (and
    (or (<= 0 $q8@1435@01) (not (<= 0 $q8@1435@01)))
    (=>
      (and
        (<= 0 $q8@1435@01)
        (<
          $q8@1435@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01))))
      (and
        (<= 0 $q8@1435@01)
        (<
          $q8@1435@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01)
              $q8@1435@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01)
                $q8@1435@01))))))
    (or
      (not
        (and
          (<= 0 $q8@1435@01)
          (<
            $q8@1435@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01)))))
      (and
        (<= 0 $q8@1435@01)
        (<
          $q8@1435@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01))))))
  :pattern ((Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01)
    $q8@1435@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2369@119@2369@606-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1434@01 Int)) (!
  (forall (($q8@1435@01 Int)) (!
    (and
      (or (<= 0 $q8@1435@01) (not (<= 0 $q8@1435@01)))
      (=>
        (and
          (<= 0 $q8@1435@01)
          (<
            $q8@1435@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01))))
        (and
          (<= 0 $q8@1435@01)
          (<
            $q8@1435@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01)))
          (or
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01)
                $q8@1435@01))
            (not
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01)
                  $q8@1435@01))))))
      (or
        (not
          (and
            (<= 0 $q8@1435@01)
            (<
              $q8@1435@01
              (Seq_length
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01)))))
        (and
          (<= 0 $q8@1435@01)
          (<
            $q8@1435@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01))))))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01)
      $q8@1435@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2369@119@2369@606-aux|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2369@11@2369@607-aux|)))
(assert (forall (($q7@1434@01 Int)) (!
  (forall (($q8@1435@01 Int)) (!
    (=>
      (and
        (<= 0 $q8@1435@01)
        (<
          $q8@1435@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01))))
      (and
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01)
            $q8@1435@01))
        (<=
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01)
            $q8@1435@01)
          170141183460469231731687303715884105727)))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01)
      $q8@1435@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2369@119@2369@606|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1397@01 4)) $q7@1434@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2369@11@2369@607|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1436@01 $Snap)
(assert (= $t@1436@01 ($Snap.combine ($Snap.first $t@1436@01) ($Snap.second $t@1436@01))))
(assert (= ($Snap.first $t@1436@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1397@01 5))))
(assert (= ($Snap.second $t@1436@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1397@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@1437@01 $Snap)
(assert (= $t@1437@01 ($Snap.combine ($Snap.first $t@1437@01) ($Snap.second $t@1437@01))))
(assert (= ($Snap.first $t@1437@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@1397@01 6))))
(assert (= ($Snap.second $t@1437@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1397@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1438@01 $Snap)
(assert (= $t@1438@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q9@1439@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 915 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1397@01, 8)), $q9@1439@01)) | live]
; [else-branch: 915 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1397@01, 8)), $q9@1439@01) | live]
(push) ; 5
; [then-branch: 915 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1397@01, 8)), $q9@1439@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 8)) $q9@1439@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 915 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1397@01, 8)), $q9@1439@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 8)) $q9@1439@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 8)) $q9@1439@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 8)) $q9@1439@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@1439@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 8)) $q9@1439@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 8)) $q9@1439@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 8)) $q9@1439@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2372@11@2372@345-aux|)))
(assert (forall (($q9@1439@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 8)) $q9@1439@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 8)) $q9@1439@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 8)) $q9@1439@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2372@11@2372@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@1440@01 $Snap)
(assert (= $t@1440@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q9@1441@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@1441@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 8)) $q9@1441@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 8)) $q9@1441@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2373@11@2373@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1442@01 $Snap)
(assert (= $t@1442@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q10@1443@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 916 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1397@01, 9)), $q10@1443@01)) | live]
; [else-branch: 916 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1397@01, 9)), $q10@1443@01) | live]
(push) ; 5
; [then-branch: 916 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1397@01, 9)), $q10@1443@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 9)) $q10@1443@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 916 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1397@01, 9)), $q10@1443@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 9)) $q10@1443@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 9)) $q10@1443@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 9)) $q10@1443@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@1443@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 9)) $q10@1443@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 9)) $q10@1443@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 9)) $q10@1443@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2374@11@2374@349-aux|)))
(assert (forall (($q10@1443@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 9)) $q10@1443@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 9)) $q10@1443@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 9)) $q10@1443@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2374@11@2374@349|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@1444@01 $Snap)
(assert (= $t@1444@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q10@1445@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@1445@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 9)) $q10@1445@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1397@01 9)) $q10@1445@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2375@11@2375@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@1446@01 $Snap)
(assert (= $t@1446@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1397@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1447@01 $Snap)
(assert (= $t@1447@01 ($Snap.combine ($Snap.first $t@1447@01) ($Snap.second $t@1447@01))))
(assert (= ($Snap.first $t@1447@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@1447@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |l$a| == 5
(declare-const $t@1448@01 $Snap)
(assert (= $t@1448@01 $Snap.unit))
; [eval] |l$a| == 5
; [eval] |l$a|
(assert (= (Seq_length l$a@1390@01) 5))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { l$a[$q0] }
;     0 <= $q0 && $q0 < |l$a| ==>
;     -170141183460469231731687303715884105728 <= l$a[$q0] &&
;     l$a[$q0] <= 170141183460469231731687303715884105727)
(declare-const $t@1449@01 $Snap)
(assert (= $t@1449@01 $Snap.unit))
; [eval] (forall $q0: Int :: { l$a[$q0] } 0 <= $q0 && $q0 < |l$a| ==> -170141183460469231731687303715884105728 <= l$a[$q0] && l$a[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@1450@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |l$a| ==> -170141183460469231731687303715884105728 <= l$a[$q0] && l$a[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |l$a|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 917 | !(0 <= $q0@1450@01) | live]
; [else-branch: 917 | 0 <= $q0@1450@01 | live]
(push) ; 5
; [then-branch: 917 | !(0 <= $q0@1450@01)]
(assert (not (<= 0 $q0@1450@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 917 | 0 <= $q0@1450@01]
(assert (<= 0 $q0@1450@01))
; [eval] $q0 < |l$a|
; [eval] |l$a|
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@1450@01) (not (<= 0 $q0@1450@01))))
(push) ; 4
; [then-branch: 918 | 0 <= $q0@1450@01 && $q0@1450@01 < |l$a@1390@01| | live]
; [else-branch: 918 | !(0 <= $q0@1450@01 && $q0@1450@01 < |l$a@1390@01|) | live]
(push) ; 5
; [then-branch: 918 | 0 <= $q0@1450@01 && $q0@1450@01 < |l$a@1390@01|]
(assert (and (<= 0 $q0@1450@01) (< $q0@1450@01 (Seq_length l$a@1390@01))))
; [eval] -170141183460469231731687303715884105728 <= l$a[$q0] && l$a[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= l$a[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] l$a[$q0]
(push) ; 6
(assert (not (>= $q0@1450@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 919 | !(-170141183460469231731687303715884105728 <= l$a@1390@01[$q0@1450@01]) | live]
; [else-branch: 919 | -170141183460469231731687303715884105728 <= l$a@1390@01[$q0@1450@01] | live]
(push) ; 7
; [then-branch: 919 | !(-170141183460469231731687303715884105728 <= l$a@1390@01[$q0@1450@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index l$a@1390@01 $q0@1450@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 919 | -170141183460469231731687303715884105728 <= l$a@1390@01[$q0@1450@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index l$a@1390@01 $q0@1450@01)))
; [eval] l$a[$q0] <= 170141183460469231731687303715884105727
; [eval] l$a[$q0]
(push) ; 8
(assert (not (>= $q0@1450@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index l$a@1390@01 $q0@1450@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index l$a@1390@01 $q0@1450@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 918 | !(0 <= $q0@1450@01 && $q0@1450@01 < |l$a@1390@01|)]
(assert (not (and (<= 0 $q0@1450@01) (< $q0@1450@01 (Seq_length l$a@1390@01)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and (<= 0 $q0@1450@01) (< $q0@1450@01 (Seq_length l$a@1390@01)))
  (and
    (<= 0 $q0@1450@01)
    (< $q0@1450@01 (Seq_length l$a@1390@01))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index l$a@1390@01 $q0@1450@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index l$a@1390@01 $q0@1450@01)))))))
; Joined path conditions
(assert (or
  (not (and (<= 0 $q0@1450@01) (< $q0@1450@01 (Seq_length l$a@1390@01))))
  (and (<= 0 $q0@1450@01) (< $q0@1450@01 (Seq_length l$a@1390@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@1450@01 Int)) (!
  (and
    (or (<= 0 $q0@1450@01) (not (<= 0 $q0@1450@01)))
    (=>
      (and (<= 0 $q0@1450@01) (< $q0@1450@01 (Seq_length l$a@1390@01)))
      (and
        (<= 0 $q0@1450@01)
        (< $q0@1450@01 (Seq_length l$a@1390@01))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index l$a@1390@01 $q0@1450@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index l$a@1390@01 $q0@1450@01))))))
    (or
      (not (and (<= 0 $q0@1450@01) (< $q0@1450@01 (Seq_length l$a@1390@01))))
      (and (<= 0 $q0@1450@01) (< $q0@1450@01 (Seq_length l$a@1390@01)))))
  :pattern ((Seq_index l$a@1390@01 $q0@1450@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2381@11@2381@178-aux|)))
(assert (forall (($q0@1450@01 Int)) (!
  (=>
    (and (<= 0 $q0@1450@01) (< $q0@1450@01 (Seq_length l$a@1390@01)))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index l$a@1390@01 $q0@1450@01))
      (<=
        (Seq_index l$a@1390@01 $q0@1450@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index l$a@1390@01 $q0@1450@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2381@11@2381@178|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <= $unwrap(l$n) &&
;   $unwrap(l$n) <= 170141183460469231731687303715884105727
(declare-const $t@1451@01 $Snap)
(assert (= $t@1451@01 ($Snap.combine ($Snap.first $t@1451@01) ($Snap.second $t@1451@01))))
(assert (= ($Snap.first $t@1451@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= $unwrap(l$n)
; [eval] -170141183460469231731687303715884105728
; [eval] $unwrap(l$n)
(assert (<= (- 0 170141183460469231731687303715884105728) ($unwrap<Int> l$n@1391@01)))
(assert (= ($Snap.second $t@1451@01) $Snap.unit))
; [eval] $unwrap(l$n) <= 170141183460469231731687303715884105727
; [eval] $unwrap(l$n)
(assert (<= ($unwrap<Int> l$n@1391@01) 170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1452@01 $Snap)
(assert (= $t@1452@01 ($Snap.combine ($Snap.first $t@1452@01) ($Snap.second $t@1452@01))))
(assert (= ($Snap.first $t@1452@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1394@01 0))))
(assert (= ($Snap.second $t@1452@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1394@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1453@01 $Snap)
(assert (= $t@1453@01 ($Snap.combine ($Snap.first $t@1453@01) ($Snap.second $t@1453@01))))
(assert (= ($Snap.first $t@1453@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1394@01 1))))
(assert (= ($Snap.second $t@1453@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1394@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1454@01 $Snap)
(assert (= $t@1454@01 ($Snap.combine ($Snap.first $t@1454@01) ($Snap.second $t@1454@01))))
(assert (= ($Snap.first $t@1454@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1394@01 2))))
(assert (= ($Snap.second $t@1454@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1394@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@1455@01 $Snap)
(assert (= $t@1455@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@1394@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1456@01 $Snap)
(assert (= $t@1456@01 ($Snap.combine ($Snap.first $t@1456@01) ($Snap.second $t@1456@01))))
(assert (= ($Snap.first $t@1456@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1394@01 4))))
(assert (= ($Snap.second $t@1456@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1394@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@1457@01 $Snap)
(assert (= $t@1457@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@1394@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1458@01 $Snap)
(assert (= $t@1458@01 ($Snap.combine ($Snap.first $t@1458@01) ($Snap.second $t@1458@01))))
(assert (= ($Snap.first $t@1458@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1393@01 0))))
(assert (= ($Snap.second $t@1458@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1393@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1459@01 $Snap)
(assert (= $t@1459@01 ($Snap.combine ($Snap.first $t@1459@01) ($Snap.second $t@1459@01))))
(assert (= ($Snap.first $t@1459@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1393@01 1))))
(assert (= ($Snap.second $t@1459@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1393@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1460@01 $Snap)
(assert (= $t@1460@01 ($Snap.combine ($Snap.first $t@1460@01) ($Snap.second $t@1460@01))))
(assert (= ($Snap.first $t@1460@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1393@01 2))))
(assert (= ($Snap.second $t@1460@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1393@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@1461@01 $Snap)
(assert (= $t@1461@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1393@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@1462@01 $Snap)
(assert (= $t@1462@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1393@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@1463@01 $Snap)
(assert (= $t@1463@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@1464@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc(self, 3)): Seq[Int])
(declare-const $t@1465@01 $Snap)
(assert (= $t@1465@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@1466@01 $Snap)
(assert (= $t@1466@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1393@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; label return
; [exec]
; label end
; [exec]
; exhale $unwrap(l$n) >= 0 ==> l$a[$unwrap(l$n)] == 0
; [eval] $unwrap(l$n) >= 0 ==> l$a[$unwrap(l$n)] == 0
; [eval] $unwrap(l$n) >= 0
; [eval] $unwrap(l$n)
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (>= ($unwrap<Int> l$n@1391@01) 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (>= ($unwrap<Int> l$n@1391@01) 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 920 | $unwrap[Int](l$n@1391@01) >= 0 | live]
; [else-branch: 920 | !($unwrap[Int](l$n@1391@01) >= 0) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 920 | $unwrap[Int](l$n@1391@01) >= 0]
(assert (>= ($unwrap<Int> l$n@1391@01) 0))
; [eval] l$a[$unwrap(l$n)] == 0
; [eval] l$a[$unwrap(l$n)]
; [eval] $unwrap(l$n)
(push) ; 5
(assert (not (< ($unwrap<Int> l$n@1391@01) (Seq_length l$a@1390@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 920 | !($unwrap[Int](l$n@1391@01) >= 0)]
(assert (not (>= ($unwrap<Int> l$n@1391@01) 0)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (not (>= ($unwrap<Int> l$n@1391@01) 0)))
; [eval] !$succ
; [then-branch: 921 | False | dead]
; [else-branch: 921 | True | live]
(push) ; 3
; [else-branch: 921 | True]
(pop) ; 3
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 922 | True | live]
; [else-branch: 922 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 922 | True]
; [exec]
; inhale l$havoc >= 0
(declare-const $t@1467@01 $Snap)
(assert (= $t@1467@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@1407@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@1468@01 $Struct)
(assert (=
  self@1468@01
  ($struct_set<$Struct> self@1397@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@1397@01 5))
    l$havoc@1407@01))))
; [exec]
; $contracts := l$havoc$1
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 4
(assert (not (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1468@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1468@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1397@01 3))))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$element_in_array ----------
(declare-const l$a@1469@01 Seq<Int>)
(declare-const l$element@1470@01 $Int)
(declare-const $succ@1471@01 Bool)
(declare-const $res@1472@01 Bool)
(declare-const l$a@1473@01 Seq<Int>)
(declare-const l$element@1474@01 $Int)
(declare-const $succ@1475@01 Bool)
(declare-const $res@1476@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@1477@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@1478@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@1479@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@1480@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@1481@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@1482@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@1483@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@1484@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@1485@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@1486@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@1487@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@1488@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@1489@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@1490@01 Bool)
; [exec]
; var l$havoc: Bool
(declare-const l$havoc@1491@01 Bool)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@1492@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@1493@01 $Map<Int~_$Struct>)
; [exec]
; inhale |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
(declare-const $t@1494@01 $Snap)
(assert (= $t@1494@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 0))) 12))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] }
;     0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] &&
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <=
;     170141183460469231731687303715884105727)
(declare-const $t@1495@01 $Snap)
(assert (= $t@1495@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] } 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@1496@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 923 | !(0 <= $q0@1496@01) | live]
; [else-branch: 923 | 0 <= $q0@1496@01 | live]
(push) ; 5
; [then-branch: 923 | !(0 <= $q0@1496@01)]
(assert (not (<= 0 $q0@1496@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 923 | 0 <= $q0@1496@01]
(assert (<= 0 $q0@1496@01))
; [eval] $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@1496@01) (not (<= 0 $q0@1496@01))))
(push) ; 4
; [then-branch: 924 | 0 <= $q0@1496@01 && $q0@1496@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1481@01, 0))| | live]
; [else-branch: 924 | !(0 <= $q0@1496@01 && $q0@1496@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1481@01, 0))|) | live]
(push) ; 5
; [then-branch: 924 | 0 <= $q0@1496@01 && $q0@1496@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1481@01, 0))|]
(assert (and
  (<= 0 $q0@1496@01)
  (<
    $q0@1496@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 0))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (>= $q0@1496@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 925 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1481@01, 0))[$q0@1496@01]) | live]
; [else-branch: 925 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1481@01, 0))[$q0@1496@01] | live]
(push) ; 7
; [then-branch: 925 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1481@01, 0))[$q0@1496@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 0))
      $q0@1496@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 925 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1481@01, 0))[$q0@1496@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 0))
    $q0@1496@01)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (>= $q0@1496@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 0))
      $q0@1496@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 0))
        $q0@1496@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 924 | !(0 <= $q0@1496@01 && $q0@1496@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1481@01, 0))|)]
(assert (not
  (and
    (<= 0 $q0@1496@01)
    (<
      $q0@1496@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 0)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q0@1496@01)
    (<
      $q0@1496@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 0)))))
  (and
    (<= 0 $q0@1496@01)
    (<
      $q0@1496@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 0))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 0))
          $q0@1496@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 0))
            $q0@1496@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q0@1496@01)
      (<
        $q0@1496@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 0))))))
  (and
    (<= 0 $q0@1496@01)
    (<
      $q0@1496@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 0)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@1496@01 Int)) (!
  (and
    (or (<= 0 $q0@1496@01) (not (<= 0 $q0@1496@01)))
    (=>
      (and
        (<= 0 $q0@1496@01)
        (<
          $q0@1496@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 0)))))
      (and
        (<= 0 $q0@1496@01)
        (<
          $q0@1496@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 0))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 0))
              $q0@1496@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 0))
                $q0@1496@01))))))
    (or
      (not
        (and
          (<= 0 $q0@1496@01)
          (<
            $q0@1496@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 0))))))
      (and
        (<= 0 $q0@1496@01)
        (<
          $q0@1496@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 0)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 0))
    $q0@1496@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2455@11@2455@346-aux|)))
(assert (forall (($q0@1496@01 Int)) (!
  (=>
    (and
      (<= 0 $q0@1496@01)
      (<
        $q0@1496@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 0)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 0))
          $q0@1496@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 0))
          $q0@1496@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 0))
    $q0@1496@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2455@11@2455@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
(declare-const $t@1497@01 $Snap)
(assert (= $t@1497@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(assert (=
  (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1)))
  12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $t@1498@01 $Snap)
(assert (= $t@1498@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $q1@1499@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 926 | !(0 <= $q1@1499@01) | live]
; [else-branch: 926 | 0 <= $q1@1499@01 | live]
(push) ; 5
; [then-branch: 926 | !(0 <= $q1@1499@01)]
(assert (not (<= 0 $q1@1499@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 926 | 0 <= $q1@1499@01]
(assert (<= 0 $q1@1499@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@1499@01) (not (<= 0 $q1@1499@01))))
(push) ; 4
; [then-branch: 927 | 0 <= $q1@1499@01 && $q1@1499@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1481@01, 1))| | live]
; [else-branch: 927 | !(0 <= $q1@1499@01 && $q1@1499@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1481@01, 1))|) | live]
(push) ; 5
; [then-branch: 927 | 0 <= $q1@1499@01 && $q1@1499@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1481@01, 1))|]
(assert (and
  (<= 0 $q1@1499@01)
  (<
    $q1@1499@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))))))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 6
(assert (not (>= $q1@1499@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 927 | !(0 <= $q1@1499@01 && $q1@1499@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1481@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@1499@01)
    (<
      $q1@1499@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@1499@01)
      (<
        $q1@1499@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))))))
  (and
    (<= 0 $q1@1499@01)
    (<
      $q1@1499@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@1499@01 Int)) (!
  (and
    (or (<= 0 $q1@1499@01) (not (<= 0 $q1@1499@01)))
    (or
      (not
        (and
          (<= 0 $q1@1499@01)
          (<
            $q1@1499@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))))))
      (and
        (<= 0 $q1@1499@01)
        (<
          $q1@1499@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
    $q1@1499@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2457@11@2457@228-aux|)))
(assert (forall (($q1@1499@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@1499@01)
      (<
        $q1@1499@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
          $q1@1499@01))
      12))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
    $q1@1499@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2457@11@2457@228|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     (forall $q2: Int ::
;       { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] }
;       0 <= $q2 &&
;       $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==>
;       -170141183460469231731687303715884105728 <=
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] &&
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <=
;       170141183460469231731687303715884105727))
(declare-const $t@1500@01 $Snap)
(assert (= $t@1500@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727))
(declare-const $q1@1501@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 928 | !(0 <= $q1@1501@01) | live]
; [else-branch: 928 | 0 <= $q1@1501@01 | live]
(push) ; 5
; [then-branch: 928 | !(0 <= $q1@1501@01)]
(assert (not (<= 0 $q1@1501@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 928 | 0 <= $q1@1501@01]
(assert (<= 0 $q1@1501@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@1501@01) (not (<= 0 $q1@1501@01))))
(push) ; 4
; [then-branch: 929 | 0 <= $q1@1501@01 && $q1@1501@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1481@01, 1))| | live]
; [else-branch: 929 | !(0 <= $q1@1501@01 && $q1@1501@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1481@01, 1))|) | live]
(push) ; 5
; [then-branch: 929 | 0 <= $q1@1501@01 && $q1@1501@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1481@01, 1))|]
(assert (and
  (<= 0 $q1@1501@01)
  (<
    $q1@1501@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))))))
; [eval] (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
(declare-const $q2@1502@01 Int)
(push) ; 6
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] 0 <= $q2
(push) ; 7
; [then-branch: 930 | !(0 <= $q2@1502@01) | live]
; [else-branch: 930 | 0 <= $q2@1502@01 | live]
(push) ; 8
; [then-branch: 930 | !(0 <= $q2@1502@01)]
(assert (not (<= 0 $q2@1502@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 930 | 0 <= $q2@1502@01]
(assert (<= 0 $q2@1502@01))
; [eval] $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@1501@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q2@1502@01) (not (<= 0 $q2@1502@01))))
(push) ; 7
; [then-branch: 931 | 0 <= $q2@1502@01 && $q2@1502@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1481@01, 1))[$q1@1501@01]| | live]
; [else-branch: 931 | !(0 <= $q2@1502@01 && $q2@1502@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1481@01, 1))[$q1@1501@01]|) | live]
(push) ; 8
; [then-branch: 931 | 0 <= $q2@1502@01 && $q2@1502@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1481@01, 1))[$q1@1501@01]|]
(assert (and
  (<= 0 $q2@1502@01)
  (<
    $q2@1502@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
        $q1@1501@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@1501@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q2@1502@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 932 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1481@01, 1))[$q1@1501@01][$q2@1502@01]) | live]
; [else-branch: 932 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1481@01, 1))[$q1@1501@01][$q2@1502@01] | live]
(push) ; 10
; [then-branch: 932 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1481@01, 1))[$q1@1501@01][$q2@1502@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
        $q1@1501@01)
      $q2@1502@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 932 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1481@01, 1))[$q1@1501@01][$q2@1502@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
      $q1@1501@01)
    $q2@1502@01)))
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 11
(assert (not (>= $q1@1501@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= $q2@1502@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
        $q1@1501@01)
      $q2@1502@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
          $q1@1501@01)
        $q2@1502@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 931 | !(0 <= $q2@1502@01 && $q2@1502@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1481@01, 1))[$q1@1501@01]|)]
(assert (not
  (and
    (<= 0 $q2@1502@01)
    (<
      $q2@1502@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
          $q1@1501@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q2@1502@01)
    (<
      $q2@1502@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
          $q1@1501@01))))
  (and
    (<= 0 $q2@1502@01)
    (<
      $q2@1502@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
          $q1@1501@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
            $q1@1501@01)
          $q2@1502@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
              $q1@1501@01)
            $q2@1502@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q2@1502@01)
      (<
        $q2@1502@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
            $q1@1501@01)))))
  (and
    (<= 0 $q2@1502@01)
    (<
      $q2@1502@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
          $q1@1501@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@1502@01 Int)) (!
  (and
    (or (<= 0 $q2@1502@01) (not (<= 0 $q2@1502@01)))
    (=>
      (and
        (<= 0 $q2@1502@01)
        (<
          $q2@1502@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
              $q1@1501@01))))
      (and
        (<= 0 $q2@1502@01)
        (<
          $q2@1502@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
              $q1@1501@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
                $q1@1501@01)
              $q2@1502@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
                  $q1@1501@01)
                $q2@1502@01))))))
    (or
      (not
        (and
          (<= 0 $q2@1502@01)
          (<
            $q2@1502@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
                $q1@1501@01)))))
      (and
        (<= 0 $q2@1502@01)
        (<
          $q2@1502@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
              $q1@1501@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
      $q1@1501@01)
    $q2@1502@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2458@166@2458@541-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 929 | !(0 <= $q1@1501@01 && $q1@1501@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1481@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@1501@01)
    (<
      $q1@1501@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q1@1501@01)
    (<
      $q1@1501@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1)))))
  (and
    (<= 0 $q1@1501@01)
    (<
      $q1@1501@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))))
    (forall (($q2@1502@01 Int)) (!
      (and
        (or (<= 0 $q2@1502@01) (not (<= 0 $q2@1502@01)))
        (=>
          (and
            (<= 0 $q2@1502@01)
            (<
              $q2@1502@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
                  $q1@1501@01))))
          (and
            (<= 0 $q2@1502@01)
            (<
              $q2@1502@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
                  $q1@1501@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
                    $q1@1501@01)
                  $q2@1502@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
                      $q1@1501@01)
                    $q2@1502@01))))))
        (or
          (not
            (and
              (<= 0 $q2@1502@01)
              (<
                $q2@1502@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
                    $q1@1501@01)))))
          (and
            (<= 0 $q2@1502@01)
            (<
              $q2@1502@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
                  $q1@1501@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
          $q1@1501@01)
        $q2@1502@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2458@166@2458@541-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@1501@01)
      (<
        $q1@1501@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))))))
  (and
    (<= 0 $q1@1501@01)
    (<
      $q1@1501@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@1501@01 Int)) (!
  (and
    (or (<= 0 $q1@1501@01) (not (<= 0 $q1@1501@01)))
    (=>
      (and
        (<= 0 $q1@1501@01)
        (<
          $q1@1501@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1)))))
      (and
        (<= 0 $q1@1501@01)
        (<
          $q1@1501@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))))
        (forall (($q2@1502@01 Int)) (!
          (and
            (or (<= 0 $q2@1502@01) (not (<= 0 $q2@1502@01)))
            (=>
              (and
                (<= 0 $q2@1502@01)
                (<
                  $q2@1502@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
                      $q1@1501@01))))
              (and
                (<= 0 $q2@1502@01)
                (<
                  $q2@1502@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
                      $q1@1501@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
                        $q1@1501@01)
                      $q2@1502@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
                          $q1@1501@01)
                        $q2@1502@01))))))
            (or
              (not
                (and
                  (<= 0 $q2@1502@01)
                  (<
                    $q2@1502@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
                        $q1@1501@01)))))
              (and
                (<= 0 $q2@1502@01)
                (<
                  $q2@1502@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
                      $q1@1501@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
              $q1@1501@01)
            $q2@1502@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2458@166@2458@541-aux|))))
    (or
      (not
        (and
          (<= 0 $q1@1501@01)
          (<
            $q1@1501@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))))))
      (and
        (<= 0 $q1@1501@01)
        (<
          $q1@1501@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
    $q1@1501@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2458@11@2458@542-aux|)))
(assert (forall (($q1@1501@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@1501@01)
      (<
        $q1@1501@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1)))))
    (forall (($q2@1502@01 Int)) (!
      (=>
        (and
          (<= 0 $q2@1502@01)
          (<
            $q2@1502@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
                $q1@1501@01))))
        (and
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
                $q1@1501@01)
              $q2@1502@01))
          (<=
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
                $q1@1501@01)
              $q2@1502@01)
            170141183460469231731687303715884105727)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
          $q1@1501@01)
        $q2@1502@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2458@166@2458@541|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1481@01 1))
    $q1@1501@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2458@11@2458@542|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
(declare-const $t@1503@01 $Snap)
(assert (= $t@1503@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(assert (=
  (Seq_length
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2)))
  2))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $t@1504@01 $Snap)
(assert (= $t@1504@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $q3@1505@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 933 | !(0 <= $q3@1505@01) | live]
; [else-branch: 933 | 0 <= $q3@1505@01 | live]
(push) ; 5
; [then-branch: 933 | !(0 <= $q3@1505@01)]
(assert (not (<= 0 $q3@1505@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 933 | 0 <= $q3@1505@01]
(assert (<= 0 $q3@1505@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1505@01) (not (<= 0 $q3@1505@01))))
(push) ; 4
; [then-branch: 934 | 0 <= $q3@1505@01 && $q3@1505@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))| | live]
; [else-branch: 934 | !(0 <= $q3@1505@01 && $q3@1505@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))|) | live]
(push) ; 5
; [then-branch: 934 | 0 <= $q3@1505@01 && $q3@1505@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))|]
(assert (and
  (<= 0 $q3@1505@01)
  (<
    $q3@1505@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 6
(assert (not (>= $q3@1505@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 934 | !(0 <= $q3@1505@01 && $q3@1505@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1505@01)
    (<
      $q3@1505@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1505@01)
      (<
        $q3@1505@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))))))
  (and
    (<= 0 $q3@1505@01)
    (<
      $q3@1505@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1505@01 Int)) (!
  (and
    (or (<= 0 $q3@1505@01) (not (<= 0 $q3@1505@01)))
    (or
      (not
        (and
          (<= 0 $q3@1505@01)
          (<
            $q3@1505@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))))))
      (and
        (<= 0 $q3@1505@01)
        (<
          $q3@1505@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
    $q3@1505@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2460@11@2460@242-aux|)))
(assert (forall (($q3@1505@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1505@01)
      (<
        $q3@1505@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
          $q3@1505@01))
      2))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
    $q3@1505@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2460@11@2460@242|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==
;       2))
(declare-const $t@1506@01 $Snap)
(assert (= $t@1506@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2))
(declare-const $q3@1507@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 935 | !(0 <= $q3@1507@01) | live]
; [else-branch: 935 | 0 <= $q3@1507@01 | live]
(push) ; 5
; [then-branch: 935 | !(0 <= $q3@1507@01)]
(assert (not (<= 0 $q3@1507@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 935 | 0 <= $q3@1507@01]
(assert (<= 0 $q3@1507@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1507@01) (not (<= 0 $q3@1507@01))))
(push) ; 4
; [then-branch: 936 | 0 <= $q3@1507@01 && $q3@1507@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))| | live]
; [else-branch: 936 | !(0 <= $q3@1507@01 && $q3@1507@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))|) | live]
(push) ; 5
; [then-branch: 936 | 0 <= $q3@1507@01 && $q3@1507@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))|]
(assert (and
  (<= 0 $q3@1507@01)
  (<
    $q3@1507@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
(declare-const $q4@1508@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 937 | !(0 <= $q4@1508@01) | live]
; [else-branch: 937 | 0 <= $q4@1508@01 | live]
(push) ; 8
; [then-branch: 937 | !(0 <= $q4@1508@01)]
(assert (not (<= 0 $q4@1508@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 937 | 0 <= $q4@1508@01]
(assert (<= 0 $q4@1508@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1507@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@1508@01) (not (<= 0 $q4@1508@01))))
(push) ; 7
; [then-branch: 938 | 0 <= $q4@1508@01 && $q4@1508@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))[$q3@1507@01]| | live]
; [else-branch: 938 | !(0 <= $q4@1508@01 && $q4@1508@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))[$q3@1507@01]|) | live]
(push) ; 8
; [then-branch: 938 | 0 <= $q4@1508@01 && $q4@1508@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))[$q3@1507@01]|]
(assert (and
  (<= 0 $q4@1508@01)
  (<
    $q4@1508@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
        $q3@1507@01)))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1507@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q4@1508@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 938 | !(0 <= $q4@1508@01 && $q4@1508@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))[$q3@1507@01]|)]
(assert (not
  (and
    (<= 0 $q4@1508@01)
    (<
      $q4@1508@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
          $q3@1507@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@1508@01)
      (<
        $q4@1508@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
            $q3@1507@01)))))
  (and
    (<= 0 $q4@1508@01)
    (<
      $q4@1508@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
          $q3@1507@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1508@01 Int)) (!
  (and
    (or (<= 0 $q4@1508@01) (not (<= 0 $q4@1508@01)))
    (or
      (not
        (and
          (<= 0 $q4@1508@01)
          (<
            $q4@1508@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                $q3@1507@01)))))
      (and
        (<= 0 $q4@1508@01)
        (<
          $q4@1508@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
              $q3@1507@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
      $q3@1507@01)
    $q4@1508@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2461@176@2461@422-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 936 | !(0 <= $q3@1507@01 && $q3@1507@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1507@01)
    (<
      $q3@1507@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@1507@01)
    (<
      $q3@1507@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2)))))
  (and
    (<= 0 $q3@1507@01)
    (<
      $q3@1507@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))))
    (forall (($q4@1508@01 Int)) (!
      (and
        (or (<= 0 $q4@1508@01) (not (<= 0 $q4@1508@01)))
        (or
          (not
            (and
              (<= 0 $q4@1508@01)
              (<
                $q4@1508@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                    $q3@1507@01)))))
          (and
            (<= 0 $q4@1508@01)
            (<
              $q4@1508@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                  $q3@1507@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
          $q3@1507@01)
        $q4@1508@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2461@176@2461@422-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1507@01)
      (<
        $q3@1507@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))))))
  (and
    (<= 0 $q3@1507@01)
    (<
      $q3@1507@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1507@01 Int)) (!
  (and
    (or (<= 0 $q3@1507@01) (not (<= 0 $q3@1507@01)))
    (=>
      (and
        (<= 0 $q3@1507@01)
        (<
          $q3@1507@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2)))))
      (and
        (<= 0 $q3@1507@01)
        (<
          $q3@1507@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))))
        (forall (($q4@1508@01 Int)) (!
          (and
            (or (<= 0 $q4@1508@01) (not (<= 0 $q4@1508@01)))
            (or
              (not
                (and
                  (<= 0 $q4@1508@01)
                  (<
                    $q4@1508@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                        $q3@1507@01)))))
              (and
                (<= 0 $q4@1508@01)
                (<
                  $q4@1508@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                      $q3@1507@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
              $q3@1507@01)
            $q4@1508@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2461@176@2461@422-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@1507@01)
          (<
            $q3@1507@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))))))
      (and
        (<= 0 $q3@1507@01)
        (<
          $q3@1507@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
    $q3@1507@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2461@11@2461@423-aux|)))
(assert (forall (($q3@1507@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1507@01)
      (<
        $q3@1507@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2)))))
    (forall (($q4@1508@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@1508@01)
          (<
            $q4@1508@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                $q3@1507@01))))
        (=
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                $q3@1507@01)
              $q4@1508@01))
          2))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
          $q3@1507@01)
        $q4@1508@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2461@176@2461@422|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
    $q3@1507@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2461@11@2461@423|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       (forall $q5: Int ::
;         { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] }
;         0 <= $q5 &&
;         $q5 <
;         |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==>
;         -170141183460469231731687303715884105728 <=
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] &&
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <=
;         170141183460469231731687303715884105727)))
(declare-const $t@1509@01 $Snap)
(assert (= $t@1509@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)))
(declare-const $q3@1510@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 939 | !(0 <= $q3@1510@01) | live]
; [else-branch: 939 | 0 <= $q3@1510@01 | live]
(push) ; 5
; [then-branch: 939 | !(0 <= $q3@1510@01)]
(assert (not (<= 0 $q3@1510@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 939 | 0 <= $q3@1510@01]
(assert (<= 0 $q3@1510@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1510@01) (not (<= 0 $q3@1510@01))))
(push) ; 4
; [then-branch: 940 | 0 <= $q3@1510@01 && $q3@1510@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))| | live]
; [else-branch: 940 | !(0 <= $q3@1510@01 && $q3@1510@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))|) | live]
(push) ; 5
; [then-branch: 940 | 0 <= $q3@1510@01 && $q3@1510@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))|]
(assert (and
  (<= 0 $q3@1510@01)
  (<
    $q3@1510@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
(declare-const $q4@1511@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 941 | !(0 <= $q4@1511@01) | live]
; [else-branch: 941 | 0 <= $q4@1511@01 | live]
(push) ; 8
; [then-branch: 941 | !(0 <= $q4@1511@01)]
(assert (not (<= 0 $q4@1511@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 941 | 0 <= $q4@1511@01]
(assert (<= 0 $q4@1511@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1510@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@1511@01) (not (<= 0 $q4@1511@01))))
(push) ; 7
; [then-branch: 942 | 0 <= $q4@1511@01 && $q4@1511@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))[$q3@1510@01]| | live]
; [else-branch: 942 | !(0 <= $q4@1511@01 && $q4@1511@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))[$q3@1510@01]|) | live]
(push) ; 8
; [then-branch: 942 | 0 <= $q4@1511@01 && $q4@1511@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))[$q3@1510@01]|]
(assert (and
  (<= 0 $q4@1511@01)
  (<
    $q4@1511@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
        $q3@1510@01)))))
; [eval] (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
(declare-const $q5@1512@01 Int)
(push) ; 9
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] 0 <= $q5
(push) ; 10
; [then-branch: 943 | !(0 <= $q5@1512@01) | live]
; [else-branch: 943 | 0 <= $q5@1512@01 | live]
(push) ; 11
; [then-branch: 943 | !(0 <= $q5@1512@01)]
(assert (not (<= 0 $q5@1512@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 943 | 0 <= $q5@1512@01]
(assert (<= 0 $q5@1512@01))
; [eval] $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@1510@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@1511@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q5@1512@01) (not (<= 0 $q5@1512@01))))
(push) ; 10
; [then-branch: 944 | 0 <= $q5@1512@01 && $q5@1512@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))[$q3@1510@01][$q4@1511@01]| | live]
; [else-branch: 944 | !(0 <= $q5@1512@01 && $q5@1512@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))[$q3@1510@01][$q4@1511@01]|) | live]
(push) ; 11
; [then-branch: 944 | 0 <= $q5@1512@01 && $q5@1512@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))[$q3@1510@01][$q4@1511@01]|]
(assert (and
  (<= 0 $q5@1512@01)
  (<
    $q5@1512@01
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
          $q3@1510@01)
        $q4@1511@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@1510@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@1511@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q5@1512@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 945 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))[$q3@1510@01][$q4@1511@01][$q5@1512@01]) | live]
; [else-branch: 945 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))[$q3@1510@01][$q4@1511@01][$q5@1512@01] | live]
(push) ; 13
; [then-branch: 945 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))[$q3@1510@01][$q4@1511@01][$q5@1512@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
          $q3@1510@01)
        $q4@1511@01)
      $q5@1512@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 945 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))[$q3@1510@01][$q4@1511@01][$q5@1512@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
        $q3@1510@01)
      $q4@1511@01)
    $q5@1512@01)))
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 14
(assert (not (>= $q3@1510@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q4@1511@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q5@1512@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
          $q3@1510@01)
        $q4@1511@01)
      $q5@1512@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
            $q3@1510@01)
          $q4@1511@01)
        $q5@1512@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 944 | !(0 <= $q5@1512@01 && $q5@1512@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))[$q3@1510@01][$q4@1511@01]|)]
(assert (not
  (and
    (<= 0 $q5@1512@01)
    (<
      $q5@1512@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
            $q3@1510@01)
          $q4@1511@01))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q5@1512@01)
    (<
      $q5@1512@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
            $q3@1510@01)
          $q4@1511@01))))
  (and
    (<= 0 $q5@1512@01)
    (<
      $q5@1512@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
            $q3@1510@01)
          $q4@1511@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
              $q3@1510@01)
            $q4@1511@01)
          $q5@1512@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                $q3@1510@01)
              $q4@1511@01)
            $q5@1512@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q5@1512@01)
      (<
        $q5@1512@01
        (Seq_length
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
              $q3@1510@01)
            $q4@1511@01)))))
  (and
    (<= 0 $q5@1512@01)
    (<
      $q5@1512@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
            $q3@1510@01)
          $q4@1511@01))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@1512@01 Int)) (!
  (and
    (or (<= 0 $q5@1512@01) (not (<= 0 $q5@1512@01)))
    (=>
      (and
        (<= 0 $q5@1512@01)
        (<
          $q5@1512@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                $q3@1510@01)
              $q4@1511@01))))
      (and
        (<= 0 $q5@1512@01)
        (<
          $q5@1512@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                $q3@1510@01)
              $q4@1511@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                  $q3@1510@01)
                $q4@1511@01)
              $q5@1512@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                    $q3@1510@01)
                  $q4@1511@01)
                $q5@1512@01))))))
    (or
      (not
        (and
          (<= 0 $q5@1512@01)
          (<
            $q5@1512@01
            (Seq_length
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                  $q3@1510@01)
                $q4@1511@01)))))
      (and
        (<= 0 $q5@1512@01)
        (<
          $q5@1512@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                $q3@1510@01)
              $q4@1511@01))))))
  :pattern ((Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
        $q3@1510@01)
      $q4@1511@01)
    $q5@1512@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2462@351@2462@766-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 942 | !(0 <= $q4@1511@01 && $q4@1511@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))[$q3@1510@01]|)]
(assert (not
  (and
    (<= 0 $q4@1511@01)
    (<
      $q4@1511@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
          $q3@1510@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q4@1511@01)
    (<
      $q4@1511@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
          $q3@1510@01))))
  (and
    (<= 0 $q4@1511@01)
    (<
      $q4@1511@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
          $q3@1510@01)))
    (forall (($q5@1512@01 Int)) (!
      (and
        (or (<= 0 $q5@1512@01) (not (<= 0 $q5@1512@01)))
        (=>
          (and
            (<= 0 $q5@1512@01)
            (<
              $q5@1512@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                    $q3@1510@01)
                  $q4@1511@01))))
          (and
            (<= 0 $q5@1512@01)
            (<
              $q5@1512@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                    $q3@1510@01)
                  $q4@1511@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                      $q3@1510@01)
                    $q4@1511@01)
                  $q5@1512@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                        $q3@1510@01)
                      $q4@1511@01)
                    $q5@1512@01))))))
        (or
          (not
            (and
              (<= 0 $q5@1512@01)
              (<
                $q5@1512@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                      $q3@1510@01)
                    $q4@1511@01)))))
          (and
            (<= 0 $q5@1512@01)
            (<
              $q5@1512@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                    $q3@1510@01)
                  $q4@1511@01))))))
      :pattern ((Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
            $q3@1510@01)
          $q4@1511@01)
        $q5@1512@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2462@351@2462@766-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@1511@01)
      (<
        $q4@1511@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
            $q3@1510@01)))))
  (and
    (<= 0 $q4@1511@01)
    (<
      $q4@1511@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
          $q3@1510@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1511@01 Int)) (!
  (and
    (or (<= 0 $q4@1511@01) (not (<= 0 $q4@1511@01)))
    (=>
      (and
        (<= 0 $q4@1511@01)
        (<
          $q4@1511@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
              $q3@1510@01))))
      (and
        (<= 0 $q4@1511@01)
        (<
          $q4@1511@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
              $q3@1510@01)))
        (forall (($q5@1512@01 Int)) (!
          (and
            (or (<= 0 $q5@1512@01) (not (<= 0 $q5@1512@01)))
            (=>
              (and
                (<= 0 $q5@1512@01)
                (<
                  $q5@1512@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                        $q3@1510@01)
                      $q4@1511@01))))
              (and
                (<= 0 $q5@1512@01)
                (<
                  $q5@1512@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                        $q3@1510@01)
                      $q4@1511@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                          $q3@1510@01)
                        $q4@1511@01)
                      $q5@1512@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                            $q3@1510@01)
                          $q4@1511@01)
                        $q5@1512@01))))))
            (or
              (not
                (and
                  (<= 0 $q5@1512@01)
                  (<
                    $q5@1512@01
                    (Seq_length
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                          $q3@1510@01)
                        $q4@1511@01)))))
              (and
                (<= 0 $q5@1512@01)
                (<
                  $q5@1512@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                        $q3@1510@01)
                      $q4@1511@01))))))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                $q3@1510@01)
              $q4@1511@01)
            $q5@1512@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2462@351@2462@766-aux|))))
    (or
      (not
        (and
          (<= 0 $q4@1511@01)
          (<
            $q4@1511@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                $q3@1510@01)))))
      (and
        (<= 0 $q4@1511@01)
        (<
          $q4@1511@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
              $q3@1510@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
      $q3@1510@01)
    $q4@1511@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2462@176@2462@767-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 940 | !(0 <= $q3@1510@01 && $q3@1510@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1481@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1510@01)
    (<
      $q3@1510@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@1510@01)
    (<
      $q3@1510@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2)))))
  (and
    (<= 0 $q3@1510@01)
    (<
      $q3@1510@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))))
    (forall (($q4@1511@01 Int)) (!
      (and
        (or (<= 0 $q4@1511@01) (not (<= 0 $q4@1511@01)))
        (=>
          (and
            (<= 0 $q4@1511@01)
            (<
              $q4@1511@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                  $q3@1510@01))))
          (and
            (<= 0 $q4@1511@01)
            (<
              $q4@1511@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                  $q3@1510@01)))
            (forall (($q5@1512@01 Int)) (!
              (and
                (or (<= 0 $q5@1512@01) (not (<= 0 $q5@1512@01)))
                (=>
                  (and
                    (<= 0 $q5@1512@01)
                    (<
                      $q5@1512@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                            $q3@1510@01)
                          $q4@1511@01))))
                  (and
                    (<= 0 $q5@1512@01)
                    (<
                      $q5@1512@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                            $q3@1510@01)
                          $q4@1511@01)))
                    (or
                      (<=
                        (- 0 170141183460469231731687303715884105728)
                        (Seq_index
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                              $q3@1510@01)
                            $q4@1511@01)
                          $q5@1512@01))
                      (not
                        (<=
                          (- 0 170141183460469231731687303715884105728)
                          (Seq_index
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                                $q3@1510@01)
                              $q4@1511@01)
                            $q5@1512@01))))))
                (or
                  (not
                    (and
                      (<= 0 $q5@1512@01)
                      (<
                        $q5@1512@01
                        (Seq_length
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                              $q3@1510@01)
                            $q4@1511@01)))))
                  (and
                    (<= 0 $q5@1512@01)
                    (<
                      $q5@1512@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                            $q3@1510@01)
                          $q4@1511@01))))))
              :pattern ((Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                    $q3@1510@01)
                  $q4@1511@01)
                $q5@1512@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2462@351@2462@766-aux|))))
        (or
          (not
            (and
              (<= 0 $q4@1511@01)
              (<
                $q4@1511@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                    $q3@1510@01)))))
          (and
            (<= 0 $q4@1511@01)
            (<
              $q4@1511@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                  $q3@1510@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
          $q3@1510@01)
        $q4@1511@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2462@176@2462@767-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1510@01)
      (<
        $q3@1510@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))))))
  (and
    (<= 0 $q3@1510@01)
    (<
      $q3@1510@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1510@01 Int)) (!
  (and
    (or (<= 0 $q3@1510@01) (not (<= 0 $q3@1510@01)))
    (=>
      (and
        (<= 0 $q3@1510@01)
        (<
          $q3@1510@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2)))))
      (and
        (<= 0 $q3@1510@01)
        (<
          $q3@1510@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))))
        (forall (($q4@1511@01 Int)) (!
          (and
            (or (<= 0 $q4@1511@01) (not (<= 0 $q4@1511@01)))
            (=>
              (and
                (<= 0 $q4@1511@01)
                (<
                  $q4@1511@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                      $q3@1510@01))))
              (and
                (<= 0 $q4@1511@01)
                (<
                  $q4@1511@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                      $q3@1510@01)))
                (forall (($q5@1512@01 Int)) (!
                  (and
                    (or (<= 0 $q5@1512@01) (not (<= 0 $q5@1512@01)))
                    (=>
                      (and
                        (<= 0 $q5@1512@01)
                        (<
                          $q5@1512@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                                $q3@1510@01)
                              $q4@1511@01))))
                      (and
                        (<= 0 $q5@1512@01)
                        (<
                          $q5@1512@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                                $q3@1510@01)
                              $q4@1511@01)))
                        (or
                          (<=
                            (- 0 170141183460469231731687303715884105728)
                            (Seq_index
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                                  $q3@1510@01)
                                $q4@1511@01)
                              $q5@1512@01))
                          (not
                            (<=
                              (- 0 170141183460469231731687303715884105728)
                              (Seq_index
                                (Seq_index
                                  (Seq_index
                                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                                    $q3@1510@01)
                                  $q4@1511@01)
                                $q5@1512@01))))))
                    (or
                      (not
                        (and
                          (<= 0 $q5@1512@01)
                          (<
                            $q5@1512@01
                            (Seq_length
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                                  $q3@1510@01)
                                $q4@1511@01)))))
                      (and
                        (<= 0 $q5@1512@01)
                        (<
                          $q5@1512@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                                $q3@1510@01)
                              $q4@1511@01))))))
                  :pattern ((Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                        $q3@1510@01)
                      $q4@1511@01)
                    $q5@1512@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2462@351@2462@766-aux|))))
            (or
              (not
                (and
                  (<= 0 $q4@1511@01)
                  (<
                    $q4@1511@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                        $q3@1510@01)))))
              (and
                (<= 0 $q4@1511@01)
                (<
                  $q4@1511@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                      $q3@1510@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
              $q3@1510@01)
            $q4@1511@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2462@176@2462@767-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@1510@01)
          (<
            $q3@1510@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))))))
      (and
        (<= 0 $q3@1510@01)
        (<
          $q3@1510@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
    $q3@1510@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2462@11@2462@768-aux|)))
(assert (forall (($q3@1510@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1510@01)
      (<
        $q3@1510@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2)))))
    (forall (($q4@1511@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@1511@01)
          (<
            $q4@1511@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                $q3@1510@01))))
        (forall (($q5@1512@01 Int)) (!
          (=>
            (and
              (<= 0 $q5@1512@01)
              (<
                $q5@1512@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                      $q3@1510@01)
                    $q4@1511@01))))
            (and
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                      $q3@1510@01)
                    $q4@1511@01)
                  $q5@1512@01))
              (<=
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                      $q3@1510@01)
                    $q4@1511@01)
                  $q5@1512@01)
                170141183460469231731687303715884105727)))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
                $q3@1510@01)
              $q4@1511@01)
            $q5@1512@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2462@351@2462@766|)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
          $q3@1510@01)
        $q4@1511@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2462@176@2462@767|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1481@01 2))
    $q3@1510@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2462@11@2462@768|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
(declare-const $t@1513@01 $Snap)
(assert (= $t@1513@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3))) 1000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] }
;     0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] &&
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <=
;     170141183460469231731687303715884105727)
(declare-const $t@1514@01 $Snap)
(assert (= $t@1514@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] } 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727)
(declare-const $q6@1515@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] 0 <= $q6
(push) ; 4
; [then-branch: 946 | !(0 <= $q6@1515@01) | live]
; [else-branch: 946 | 0 <= $q6@1515@01 | live]
(push) ; 5
; [then-branch: 946 | !(0 <= $q6@1515@01)]
(assert (not (<= 0 $q6@1515@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 946 | 0 <= $q6@1515@01]
(assert (<= 0 $q6@1515@01))
; [eval] $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q6@1515@01) (not (<= 0 $q6@1515@01))))
(push) ; 4
; [then-branch: 947 | 0 <= $q6@1515@01 && $q6@1515@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1481@01, 3))| | live]
; [else-branch: 947 | !(0 <= $q6@1515@01 && $q6@1515@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1481@01, 3))|) | live]
(push) ; 5
; [then-branch: 947 | 0 <= $q6@1515@01 && $q6@1515@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1481@01, 3))|]
(assert (and
  (<= 0 $q6@1515@01)
  (<
    $q6@1515@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (>= $q6@1515@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 948 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1481@01, 3))[$q6@1515@01]) | live]
; [else-branch: 948 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1481@01, 3))[$q6@1515@01] | live]
(push) ; 7
; [then-branch: 948 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1481@01, 3))[$q6@1515@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3))
      $q6@1515@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 948 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1481@01, 3))[$q6@1515@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3))
    $q6@1515@01)))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (>= $q6@1515@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3))
      $q6@1515@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3))
        $q6@1515@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 947 | !(0 <= $q6@1515@01 && $q6@1515@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1481@01, 3))|)]
(assert (not
  (and
    (<= 0 $q6@1515@01)
    (<
      $q6@1515@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q6@1515@01)
    (<
      $q6@1515@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3)))))
  (and
    (<= 0 $q6@1515@01)
    (<
      $q6@1515@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3))
          $q6@1515@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3))
            $q6@1515@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q6@1515@01)
      (<
        $q6@1515@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3))))))
  (and
    (<= 0 $q6@1515@01)
    (<
      $q6@1515@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1515@01 Int)) (!
  (and
    (or (<= 0 $q6@1515@01) (not (<= 0 $q6@1515@01)))
    (=>
      (and
        (<= 0 $q6@1515@01)
        (<
          $q6@1515@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3)))))
      (and
        (<= 0 $q6@1515@01)
        (<
          $q6@1515@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3))
              $q6@1515@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3))
                $q6@1515@01))))))
    (or
      (not
        (and
          (<= 0 $q6@1515@01)
          (<
            $q6@1515@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3))))))
      (and
        (<= 0 $q6@1515@01)
        (<
          $q6@1515@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3))
    $q6@1515@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2464@11@2464@346-aux|)))
(assert (forall (($q6@1515@01 Int)) (!
  (=>
    (and
      (<= 0 $q6@1515@01)
      (<
        $q6@1515@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3))
          $q6@1515@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3))
          $q6@1515@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3))
    $q6@1515@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2464@11@2464@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==
;     10)
(declare-const $t@1516@01 $Snap)
(assert (= $t@1516@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10)
(declare-const $q7@1517@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1517@01 Int)) (!
  (=
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1517@01))
    10)
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1517@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2465@11@2465@209|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     (forall $q8: Int ::
;       { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] }
;       0 <= $q8 &&
;       $q8 <
;       |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==>
;       -170141183460469231731687303715884105728 <=
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] &&
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <=
;       170141183460469231731687303715884105727))
(declare-const $t@1518@01 $Snap)
(assert (= $t@1518@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727))
(declare-const $q7@1519@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727)
(declare-const $q8@1520@01 Int)
(push) ; 4
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] 0 <= $q8
(push) ; 5
; [then-branch: 949 | !(0 <= $q8@1520@01) | live]
; [else-branch: 949 | 0 <= $q8@1520@01 | live]
(push) ; 6
; [then-branch: 949 | !(0 <= $q8@1520@01)]
(assert (not (<= 0 $q8@1520@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 949 | 0 <= $q8@1520@01]
(assert (<= 0 $q8@1520@01))
; [eval] $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q8@1520@01) (not (<= 0 $q8@1520@01))))
(push) ; 5
; [then-branch: 950 | 0 <= $q8@1520@01 && $q8@1520@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1481@01, 4)), $q7@1519@01)| | live]
; [else-branch: 950 | !(0 <= $q8@1520@01 && $q8@1520@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1481@01, 4)), $q7@1519@01)|) | live]
(push) ; 6
; [then-branch: 950 | 0 <= $q8@1520@01 && $q8@1520@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1481@01, 4)), $q7@1519@01)|]
(assert (and
  (<= 0 $q8@1520@01)
  (<
    $q8@1520@01
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] -170141183460469231731687303715884105728
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 7
(assert (not (>= $q8@1520@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 951 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1481@01, 4)), $q7@1519@01)[$q8@1520@01]) | live]
; [else-branch: 951 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1481@01, 4)), $q7@1519@01)[$q8@1520@01] | live]
(push) ; 8
; [then-branch: 951 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1481@01, 4)), $q7@1519@01)[$q8@1520@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01)
      $q8@1520@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 951 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1481@01, 4)), $q7@1519@01)[$q8@1520@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01)
    $q8@1520@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 9
(assert (not (>= $q8@1520@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01)
      $q8@1520@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01)
        $q8@1520@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 950 | !(0 <= $q8@1520@01 && $q8@1520@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1481@01, 4)), $q7@1519@01)|)]
(assert (not
  (and
    (<= 0 $q8@1520@01)
    (<
      $q8@1520@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q8@1520@01)
    (<
      $q8@1520@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01))))
  (and
    (<= 0 $q8@1520@01)
    (<
      $q8@1520@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01)
          $q8@1520@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01)
            $q8@1520@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q8@1520@01)
      (<
        $q8@1520@01
        (Seq_length
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01)))))
  (and
    (<= 0 $q8@1520@01)
    (<
      $q8@1520@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q8@1520@01 Int)) (!
  (and
    (or (<= 0 $q8@1520@01) (not (<= 0 $q8@1520@01)))
    (=>
      (and
        (<= 0 $q8@1520@01)
        (<
          $q8@1520@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01))))
      (and
        (<= 0 $q8@1520@01)
        (<
          $q8@1520@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01)
              $q8@1520@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01)
                $q8@1520@01))))))
    (or
      (not
        (and
          (<= 0 $q8@1520@01)
          (<
            $q8@1520@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01)))))
      (and
        (<= 0 $q8@1520@01)
        (<
          $q8@1520@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01))))))
  :pattern ((Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01)
    $q8@1520@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2466@119@2466@606-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1519@01 Int)) (!
  (forall (($q8@1520@01 Int)) (!
    (and
      (or (<= 0 $q8@1520@01) (not (<= 0 $q8@1520@01)))
      (=>
        (and
          (<= 0 $q8@1520@01)
          (<
            $q8@1520@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01))))
        (and
          (<= 0 $q8@1520@01)
          (<
            $q8@1520@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01)))
          (or
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01)
                $q8@1520@01))
            (not
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01)
                  $q8@1520@01))))))
      (or
        (not
          (and
            (<= 0 $q8@1520@01)
            (<
              $q8@1520@01
              (Seq_length
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01)))))
        (and
          (<= 0 $q8@1520@01)
          (<
            $q8@1520@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01))))))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01)
      $q8@1520@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2466@119@2466@606-aux|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2466@11@2466@607-aux|)))
(assert (forall (($q7@1519@01 Int)) (!
  (forall (($q8@1520@01 Int)) (!
    (=>
      (and
        (<= 0 $q8@1520@01)
        (<
          $q8@1520@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01))))
      (and
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01)
            $q8@1520@01))
        (<=
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01)
            $q8@1520@01)
          170141183460469231731687303715884105727)))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01)
      $q8@1520@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2466@119@2466@606|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1481@01 4)) $q7@1519@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2466@11@2466@607|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1521@01 $Snap)
(assert (= $t@1521@01 ($Snap.combine ($Snap.first $t@1521@01) ($Snap.second $t@1521@01))))
(assert (= ($Snap.first $t@1521@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1481@01 5))))
(assert (= ($Snap.second $t@1521@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1481@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@1522@01 $Snap)
(assert (= $t@1522@01 ($Snap.combine ($Snap.first $t@1522@01) ($Snap.second $t@1522@01))))
(assert (= ($Snap.first $t@1522@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@1481@01 6))))
(assert (= ($Snap.second $t@1522@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1481@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1523@01 $Snap)
(assert (= $t@1523@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q9@1524@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 952 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1481@01, 8)), $q9@1524@01)) | live]
; [else-branch: 952 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1481@01, 8)), $q9@1524@01) | live]
(push) ; 5
; [then-branch: 952 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1481@01, 8)), $q9@1524@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 8)) $q9@1524@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 952 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1481@01, 8)), $q9@1524@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 8)) $q9@1524@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 8)) $q9@1524@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 8)) $q9@1524@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@1524@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 8)) $q9@1524@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 8)) $q9@1524@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 8)) $q9@1524@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2469@11@2469@345-aux|)))
(assert (forall (($q9@1524@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 8)) $q9@1524@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 8)) $q9@1524@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 8)) $q9@1524@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2469@11@2469@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@1525@01 $Snap)
(assert (= $t@1525@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q9@1526@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@1526@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 8)) $q9@1526@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 8)) $q9@1526@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2470@11@2470@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1527@01 $Snap)
(assert (= $t@1527@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q10@1528@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 953 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1481@01, 9)), $q10@1528@01)) | live]
; [else-branch: 953 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1481@01, 9)), $q10@1528@01) | live]
(push) ; 5
; [then-branch: 953 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1481@01, 9)), $q10@1528@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 9)) $q10@1528@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 953 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1481@01, 9)), $q10@1528@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 9)) $q10@1528@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 9)) $q10@1528@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 9)) $q10@1528@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@1528@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 9)) $q10@1528@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 9)) $q10@1528@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 9)) $q10@1528@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2471@11@2471@349-aux|)))
(assert (forall (($q10@1528@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 9)) $q10@1528@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 9)) $q10@1528@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 9)) $q10@1528@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2471@11@2471@349|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@1529@01 $Snap)
(assert (= $t@1529@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q10@1530@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@1530@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 9)) $q10@1530@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1481@01 9)) $q10@1530@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2472@11@2472@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@1531@01 $Snap)
(assert (= $t@1531@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1481@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1532@01 $Snap)
(assert (= $t@1532@01 ($Snap.combine ($Snap.first $t@1532@01) ($Snap.second $t@1532@01))))
(assert (= ($Snap.first $t@1532@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@1532@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |l$a| == 3
(declare-const $t@1533@01 $Snap)
(assert (= $t@1533@01 $Snap.unit))
; [eval] |l$a| == 3
; [eval] |l$a|
(assert (= (Seq_length l$a@1473@01) 3))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { l$a[$q0] }
;     0 <= $q0 && $q0 < |l$a| ==>
;     -170141183460469231731687303715884105728 <= l$a[$q0] &&
;     l$a[$q0] <= 170141183460469231731687303715884105727)
(declare-const $t@1534@01 $Snap)
(assert (= $t@1534@01 $Snap.unit))
; [eval] (forall $q0: Int :: { l$a[$q0] } 0 <= $q0 && $q0 < |l$a| ==> -170141183460469231731687303715884105728 <= l$a[$q0] && l$a[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@1535@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |l$a| ==> -170141183460469231731687303715884105728 <= l$a[$q0] && l$a[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |l$a|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 954 | !(0 <= $q0@1535@01) | live]
; [else-branch: 954 | 0 <= $q0@1535@01 | live]
(push) ; 5
; [then-branch: 954 | !(0 <= $q0@1535@01)]
(assert (not (<= 0 $q0@1535@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 954 | 0 <= $q0@1535@01]
(assert (<= 0 $q0@1535@01))
; [eval] $q0 < |l$a|
; [eval] |l$a|
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@1535@01) (not (<= 0 $q0@1535@01))))
(push) ; 4
; [then-branch: 955 | 0 <= $q0@1535@01 && $q0@1535@01 < |l$a@1473@01| | live]
; [else-branch: 955 | !(0 <= $q0@1535@01 && $q0@1535@01 < |l$a@1473@01|) | live]
(push) ; 5
; [then-branch: 955 | 0 <= $q0@1535@01 && $q0@1535@01 < |l$a@1473@01|]
(assert (and (<= 0 $q0@1535@01) (< $q0@1535@01 (Seq_length l$a@1473@01))))
; [eval] -170141183460469231731687303715884105728 <= l$a[$q0] && l$a[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= l$a[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] l$a[$q0]
(push) ; 6
(assert (not (>= $q0@1535@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 956 | !(-170141183460469231731687303715884105728 <= l$a@1473@01[$q0@1535@01]) | live]
; [else-branch: 956 | -170141183460469231731687303715884105728 <= l$a@1473@01[$q0@1535@01] | live]
(push) ; 7
; [then-branch: 956 | !(-170141183460469231731687303715884105728 <= l$a@1473@01[$q0@1535@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index l$a@1473@01 $q0@1535@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 956 | -170141183460469231731687303715884105728 <= l$a@1473@01[$q0@1535@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index l$a@1473@01 $q0@1535@01)))
; [eval] l$a[$q0] <= 170141183460469231731687303715884105727
; [eval] l$a[$q0]
(push) ; 8
(assert (not (>= $q0@1535@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index l$a@1473@01 $q0@1535@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index l$a@1473@01 $q0@1535@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 955 | !(0 <= $q0@1535@01 && $q0@1535@01 < |l$a@1473@01|)]
(assert (not (and (<= 0 $q0@1535@01) (< $q0@1535@01 (Seq_length l$a@1473@01)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and (<= 0 $q0@1535@01) (< $q0@1535@01 (Seq_length l$a@1473@01)))
  (and
    (<= 0 $q0@1535@01)
    (< $q0@1535@01 (Seq_length l$a@1473@01))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index l$a@1473@01 $q0@1535@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index l$a@1473@01 $q0@1535@01)))))))
; Joined path conditions
(assert (or
  (not (and (<= 0 $q0@1535@01) (< $q0@1535@01 (Seq_length l$a@1473@01))))
  (and (<= 0 $q0@1535@01) (< $q0@1535@01 (Seq_length l$a@1473@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@1535@01 Int)) (!
  (and
    (or (<= 0 $q0@1535@01) (not (<= 0 $q0@1535@01)))
    (=>
      (and (<= 0 $q0@1535@01) (< $q0@1535@01 (Seq_length l$a@1473@01)))
      (and
        (<= 0 $q0@1535@01)
        (< $q0@1535@01 (Seq_length l$a@1473@01))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index l$a@1473@01 $q0@1535@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index l$a@1473@01 $q0@1535@01))))))
    (or
      (not (and (<= 0 $q0@1535@01) (< $q0@1535@01 (Seq_length l$a@1473@01))))
      (and (<= 0 $q0@1535@01) (< $q0@1535@01 (Seq_length l$a@1473@01)))))
  :pattern ((Seq_index l$a@1473@01 $q0@1535@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2478@11@2478@178-aux|)))
(assert (forall (($q0@1535@01 Int)) (!
  (=>
    (and (<= 0 $q0@1535@01) (< $q0@1535@01 (Seq_length l$a@1473@01)))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index l$a@1473@01 $q0@1535@01))
      (<=
        (Seq_index l$a@1473@01 $q0@1535@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index l$a@1473@01 $q0@1535@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2478@11@2478@178|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <= $unwrap(l$element) &&
;   $unwrap(l$element) <= 170141183460469231731687303715884105727
(declare-const $t@1536@01 $Snap)
(assert (= $t@1536@01 ($Snap.combine ($Snap.first $t@1536@01) ($Snap.second $t@1536@01))))
(assert (= ($Snap.first $t@1536@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= $unwrap(l$element)
; [eval] -170141183460469231731687303715884105728
; [eval] $unwrap(l$element)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($unwrap<Int> l$element@1474@01)))
(assert (= ($Snap.second $t@1536@01) $Snap.unit))
; [eval] $unwrap(l$element) <= 170141183460469231731687303715884105727
; [eval] $unwrap(l$element)
(assert (<= ($unwrap<Int> l$element@1474@01) 170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1537@01 $Snap)
(assert (= $t@1537@01 ($Snap.combine ($Snap.first $t@1537@01) ($Snap.second $t@1537@01))))
(assert (= ($Snap.first $t@1537@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1478@01 0))))
(assert (= ($Snap.second $t@1537@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1478@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1538@01 $Snap)
(assert (= $t@1538@01 ($Snap.combine ($Snap.first $t@1538@01) ($Snap.second $t@1538@01))))
(assert (= ($Snap.first $t@1538@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1478@01 1))))
(assert (= ($Snap.second $t@1538@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1478@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1539@01 $Snap)
(assert (= $t@1539@01 ($Snap.combine ($Snap.first $t@1539@01) ($Snap.second $t@1539@01))))
(assert (= ($Snap.first $t@1539@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1478@01 2))))
(assert (= ($Snap.second $t@1539@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1478@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@1540@01 $Snap)
(assert (= $t@1540@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@1478@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1541@01 $Snap)
(assert (= $t@1541@01 ($Snap.combine ($Snap.first $t@1541@01) ($Snap.second $t@1541@01))))
(assert (= ($Snap.first $t@1541@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1478@01 4))))
(assert (= ($Snap.second $t@1541@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1478@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@1542@01 $Snap)
(assert (= $t@1542@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@1478@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1543@01 $Snap)
(assert (= $t@1543@01 ($Snap.combine ($Snap.first $t@1543@01) ($Snap.second $t@1543@01))))
(assert (= ($Snap.first $t@1543@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1477@01 0))))
(assert (= ($Snap.second $t@1543@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1477@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1544@01 $Snap)
(assert (= $t@1544@01 ($Snap.combine ($Snap.first $t@1544@01) ($Snap.second $t@1544@01))))
(assert (= ($Snap.first $t@1544@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1477@01 1))))
(assert (= ($Snap.second $t@1544@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1477@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1545@01 $Snap)
(assert (= $t@1545@01 ($Snap.combine ($Snap.first $t@1545@01) ($Snap.second $t@1545@01))))
(assert (= ($Snap.first $t@1545@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1477@01 2))))
(assert (= ($Snap.second $t@1545@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1477@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@1546@01 $Snap)
(assert (= $t@1546@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1477@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@1547@01 $Snap)
(assert (= $t@1547@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1477@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@1548@01 $Snap)
(assert (= $t@1548@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@1549@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc(self, 3)): Seq[Int])
(declare-const $t@1550@01 $Snap)
(assert (= $t@1550@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@1551@01 $Snap)
(assert (= $t@1551@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1477@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $res := ($unwrap(l$element) in l$a)
; [eval] ($unwrap(l$element) in l$a)
; [eval] $unwrap(l$element)
(declare-const $res@1552@01 Bool)
(assert (= $res@1552@01 (Seq_contains l$a@1473@01 ($unwrap<Int> l$element@1474@01))))
; [exec]
; label return
; [exec]
; label end
; [exec]
; exhale l$a == Seq(1, 2, 3) && $unwrap(l$element) == 3 ==> $res
; [eval] l$a == Seq(1, 2, 3) && $unwrap(l$element) == 3 ==> $res
; [eval] l$a == Seq(1, 2, 3) && $unwrap(l$element) == 3
; [eval] l$a == Seq(1, 2, 3)
; [eval] Seq(1, 2, 3)
(assert (=
  (Seq_length
    (Seq_append
      (Seq_append (Seq_singleton 1) (Seq_singleton 2))
      (Seq_singleton 3)))
  3))
(set-option :timeout 0)
(push) ; 3
; [then-branch: 957 | !(l$a@1473@01 === [1] ++ [2] ++ [3]) | live]
; [else-branch: 957 | l$a@1473@01 === [1] ++ [2] ++ [3] | live]
(push) ; 4
; [then-branch: 957 | !(l$a@1473@01 === [1] ++ [2] ++ [3])]
(assert (not
  (Seq_equal
    l$a@1473@01
    (Seq_append
      (Seq_append (Seq_singleton 1) (Seq_singleton 2))
      (Seq_singleton 3)))))
(pop) ; 4
(push) ; 4
; [else-branch: 957 | l$a@1473@01 === [1] ++ [2] ++ [3]]
(assert (Seq_equal
  l$a@1473@01
  (Seq_append (Seq_append (Seq_singleton 1) (Seq_singleton 2)) (Seq_singleton 3))))
; [eval] $unwrap(l$element) == 3
; [eval] $unwrap(l$element)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_equal
    l$a@1473@01
    (Seq_append
      (Seq_append (Seq_singleton 1) (Seq_singleton 2))
      (Seq_singleton 3)))
  (not
    (Seq_equal
      l$a@1473@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3))))))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (Seq_equal
      l$a@1473@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3)))
    (= ($unwrap<Int> l$element@1474@01) 3)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (Seq_equal
    l$a@1473@01
    (Seq_append
      (Seq_append (Seq_singleton 1) (Seq_singleton 2))
      (Seq_singleton 3)))
  (= ($unwrap<Int> l$element@1474@01) 3))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 958 | l$a@1473@01 === [1] ++ [2] ++ [3] && $unwrap[Int](l$element@1474@01) == 3 | live]
; [else-branch: 958 | !(l$a@1473@01 === [1] ++ [2] ++ [3] && $unwrap[Int](l$element@1474@01) == 3) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 958 | l$a@1473@01 === [1] ++ [2] ++ [3] && $unwrap[Int](l$element@1474@01) == 3]
(assert (and
  (Seq_equal
    l$a@1473@01
    (Seq_append
      (Seq_append (Seq_singleton 1) (Seq_singleton 2))
      (Seq_singleton 3)))
  (= ($unwrap<Int> l$element@1474@01) 3)))
(pop) ; 4
(push) ; 4
; [else-branch: 958 | !(l$a@1473@01 === [1] ++ [2] ++ [3] && $unwrap[Int](l$element@1474@01) == 3)]
(assert (not
  (and
    (Seq_equal
      l$a@1473@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3)))
    (= ($unwrap<Int> l$element@1474@01) 3))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (Seq_equal
        l$a@1473@01
        (Seq_append
          (Seq_append (Seq_singleton 1) (Seq_singleton 2))
          (Seq_singleton 3)))
      (= ($unwrap<Int> l$element@1474@01) 3)))
  (and
    (Seq_equal
      l$a@1473@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3)))
    (= ($unwrap<Int> l$element@1474@01) 3))))
(push) ; 3
(assert (not (=>
  (and
    (Seq_equal
      l$a@1473@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3)))
    (= ($unwrap<Int> l$element@1474@01) 3))
  $res@1552@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (Seq_equal
      l$a@1473@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3)))
    (= ($unwrap<Int> l$element@1474@01) 3))
  $res@1552@01))
; [exec]
; exhale l$a == Seq(1, 2, 3) && $unwrap(l$element) == 4 ==> !$res
; [eval] l$a == Seq(1, 2, 3) && $unwrap(l$element) == 4 ==> !$res
; [eval] l$a == Seq(1, 2, 3) && $unwrap(l$element) == 4
; [eval] l$a == Seq(1, 2, 3)
; [eval] Seq(1, 2, 3)
(push) ; 3
; [then-branch: 959 | !(l$a@1473@01 === [1] ++ [2] ++ [3]) | live]
; [else-branch: 959 | l$a@1473@01 === [1] ++ [2] ++ [3] | live]
(push) ; 4
; [then-branch: 959 | !(l$a@1473@01 === [1] ++ [2] ++ [3])]
(assert (not
  (Seq_equal
    l$a@1473@01
    (Seq_append
      (Seq_append (Seq_singleton 1) (Seq_singleton 2))
      (Seq_singleton 3)))))
(pop) ; 4
(push) ; 4
; [else-branch: 959 | l$a@1473@01 === [1] ++ [2] ++ [3]]
(assert (Seq_equal
  l$a@1473@01
  (Seq_append (Seq_append (Seq_singleton 1) (Seq_singleton 2)) (Seq_singleton 3))))
; [eval] $unwrap(l$element) == 4
; [eval] $unwrap(l$element)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (Seq_equal
      l$a@1473@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3)))
    (= ($unwrap<Int> l$element@1474@01) 4)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (Seq_equal
    l$a@1473@01
    (Seq_append
      (Seq_append (Seq_singleton 1) (Seq_singleton 2))
      (Seq_singleton 3)))
  (= ($unwrap<Int> l$element@1474@01) 4))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 960 | l$a@1473@01 === [1] ++ [2] ++ [3] && $unwrap[Int](l$element@1474@01) == 4 | live]
; [else-branch: 960 | !(l$a@1473@01 === [1] ++ [2] ++ [3] && $unwrap[Int](l$element@1474@01) == 4) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 960 | l$a@1473@01 === [1] ++ [2] ++ [3] && $unwrap[Int](l$element@1474@01) == 4]
(assert (and
  (Seq_equal
    l$a@1473@01
    (Seq_append
      (Seq_append (Seq_singleton 1) (Seq_singleton 2))
      (Seq_singleton 3)))
  (= ($unwrap<Int> l$element@1474@01) 4)))
; [eval] !$res
(pop) ; 4
(push) ; 4
; [else-branch: 960 | !(l$a@1473@01 === [1] ++ [2] ++ [3] && $unwrap[Int](l$element@1474@01) == 4)]
(assert (not
  (and
    (Seq_equal
      l$a@1473@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3)))
    (= ($unwrap<Int> l$element@1474@01) 4))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (Seq_equal
        l$a@1473@01
        (Seq_append
          (Seq_append (Seq_singleton 1) (Seq_singleton 2))
          (Seq_singleton 3)))
      (= ($unwrap<Int> l$element@1474@01) 4)))
  (and
    (Seq_equal
      l$a@1473@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3)))
    (= ($unwrap<Int> l$element@1474@01) 4))))
(push) ; 3
(assert (not (=>
  (and
    (Seq_equal
      l$a@1473@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3)))
    (= ($unwrap<Int> l$element@1474@01) 4))
  (not $res@1552@01))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and
    (Seq_equal
      l$a@1473@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3)))
    (= ($unwrap<Int> l$element@1474@01) 4))
  (not $res@1552@01)))
; [exec]
; exhale (3 in Seq(1, 2, 3))
; [eval] (3 in Seq(1, 2, 3))
; [eval] Seq(1, 2, 3)
(push) ; 3
(assert (not (Seq_contains
  (Seq_append (Seq_append (Seq_singleton 1) (Seq_singleton 2)) (Seq_singleton 3))
  3)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_contains
  (Seq_append (Seq_append (Seq_singleton 1) (Seq_singleton 2)) (Seq_singleton 3))
  3))
; [exec]
; exhale !((4 in Seq(1, 2, 3)))
; [eval] !((4 in Seq(1, 2, 3)))
; [eval] (4 in Seq(1, 2, 3))
; [eval] Seq(1, 2, 3)
(push) ; 3
(assert (not (not
  (Seq_contains
    (Seq_append
      (Seq_append (Seq_singleton 1) (Seq_singleton 2))
      (Seq_singleton 3))
    4))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not
  (Seq_contains
    (Seq_append
      (Seq_append (Seq_singleton 1) (Seq_singleton 2))
      (Seq_singleton 3))
    4)))
; [eval] !$succ
; [then-branch: 961 | False | dead]
; [else-branch: 961 | True | live]
(push) ; 3
; [else-branch: 961 | True]
(pop) ; 3
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 962 | True | live]
; [else-branch: 962 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 962 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@1553@01 $Snap)
(assert (= $t@1553@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@1492@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@1554@01 $Struct)
(assert (=
  self@1554@01
  ($struct_set<$Struct> self@1481@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@1481@01 5))
    l$havoc$1@1492@01))))
; [exec]
; $contracts := l$havoc$2
; [exec]
; assert ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $struct_loc($old_self, 3)
(set-option :timeout 0)
(push) ; 4
(assert (not (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1554@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1554@01 3))
  ($struct_get<Seq<Int>> ($struct_loc<Int> self@1481@01 3))))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- f$element_in_array_fail ----------
(declare-const l$a@1555@01 Seq<Int>)
(declare-const l$element@1556@01 $Int)
(declare-const $succ@1557@01 Bool)
(declare-const $res@1558@01 Bool)
(declare-const l$a@1559@01 Seq<Int>)
(declare-const l$element@1560@01 $Int)
(declare-const $succ@1561@01 Bool)
(declare-const $res@1562@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@1563@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@1564@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@1565@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@1566@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@1567@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@1568@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@1569@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@1570@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@1571@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@1572@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@1573@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@1574@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@1575@01 Bool)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@1576@01 Bool)
; [exec]
; var l$havoc: Bool
(declare-const l$havoc@1577@01 Bool)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@1578@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@1579@01 $Map<Int~_$Struct>)
; [exec]
; inhale |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
(declare-const $t@1580@01 $Snap)
(assert (= $t@1580@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 0))) 12))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] }
;     0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] &&
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <=
;     170141183460469231731687303715884105727)
(declare-const $t@1581@01 $Snap)
(assert (= $t@1581@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] } 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@1582@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 963 | !(0 <= $q0@1582@01) | live]
; [else-branch: 963 | 0 <= $q0@1582@01 | live]
(push) ; 5
; [then-branch: 963 | !(0 <= $q0@1582@01)]
(assert (not (<= 0 $q0@1582@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 963 | 0 <= $q0@1582@01]
(assert (<= 0 $q0@1582@01))
; [eval] $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@1582@01) (not (<= 0 $q0@1582@01))))
(push) ; 4
; [then-branch: 964 | 0 <= $q0@1582@01 && $q0@1582@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1567@01, 0))| | live]
; [else-branch: 964 | !(0 <= $q0@1582@01 && $q0@1582@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1567@01, 0))|) | live]
(push) ; 5
; [then-branch: 964 | 0 <= $q0@1582@01 && $q0@1582@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1567@01, 0))|]
(assert (and
  (<= 0 $q0@1582@01)
  (<
    $q0@1582@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 0))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (>= $q0@1582@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 965 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1567@01, 0))[$q0@1582@01]) | live]
; [else-branch: 965 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1567@01, 0))[$q0@1582@01] | live]
(push) ; 7
; [then-branch: 965 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1567@01, 0))[$q0@1582@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 0))
      $q0@1582@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 965 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1567@01, 0))[$q0@1582@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 0))
    $q0@1582@01)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (>= $q0@1582@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 0))
      $q0@1582@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 0))
        $q0@1582@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 964 | !(0 <= $q0@1582@01 && $q0@1582@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1567@01, 0))|)]
(assert (not
  (and
    (<= 0 $q0@1582@01)
    (<
      $q0@1582@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 0)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q0@1582@01)
    (<
      $q0@1582@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 0)))))
  (and
    (<= 0 $q0@1582@01)
    (<
      $q0@1582@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 0))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 0))
          $q0@1582@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 0))
            $q0@1582@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q0@1582@01)
      (<
        $q0@1582@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 0))))))
  (and
    (<= 0 $q0@1582@01)
    (<
      $q0@1582@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 0)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@1582@01 Int)) (!
  (and
    (or (<= 0 $q0@1582@01) (not (<= 0 $q0@1582@01)))
    (=>
      (and
        (<= 0 $q0@1582@01)
        (<
          $q0@1582@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 0)))))
      (and
        (<= 0 $q0@1582@01)
        (<
          $q0@1582@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 0))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 0))
              $q0@1582@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 0))
                $q0@1582@01))))))
    (or
      (not
        (and
          (<= 0 $q0@1582@01)
          (<
            $q0@1582@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 0))))))
      (and
        (<= 0 $q0@1582@01)
        (<
          $q0@1582@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 0)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 0))
    $q0@1582@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2559@11@2559@346-aux|)))
(assert (forall (($q0@1582@01 Int)) (!
  (=>
    (and
      (<= 0 $q0@1582@01)
      (<
        $q0@1582@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 0)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 0))
          $q0@1582@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 0))
          $q0@1582@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 0))
    $q0@1582@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2559@11@2559@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
(declare-const $t@1583@01 $Snap)
(assert (= $t@1583@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(assert (=
  (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1)))
  12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $t@1584@01 $Snap)
(assert (= $t@1584@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $q1@1585@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 966 | !(0 <= $q1@1585@01) | live]
; [else-branch: 966 | 0 <= $q1@1585@01 | live]
(push) ; 5
; [then-branch: 966 | !(0 <= $q1@1585@01)]
(assert (not (<= 0 $q1@1585@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 966 | 0 <= $q1@1585@01]
(assert (<= 0 $q1@1585@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@1585@01) (not (<= 0 $q1@1585@01))))
(push) ; 4
; [then-branch: 967 | 0 <= $q1@1585@01 && $q1@1585@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1567@01, 1))| | live]
; [else-branch: 967 | !(0 <= $q1@1585@01 && $q1@1585@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1567@01, 1))|) | live]
(push) ; 5
; [then-branch: 967 | 0 <= $q1@1585@01 && $q1@1585@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1567@01, 1))|]
(assert (and
  (<= 0 $q1@1585@01)
  (<
    $q1@1585@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))))))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 6
(assert (not (>= $q1@1585@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 967 | !(0 <= $q1@1585@01 && $q1@1585@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1567@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@1585@01)
    (<
      $q1@1585@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@1585@01)
      (<
        $q1@1585@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))))))
  (and
    (<= 0 $q1@1585@01)
    (<
      $q1@1585@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@1585@01 Int)) (!
  (and
    (or (<= 0 $q1@1585@01) (not (<= 0 $q1@1585@01)))
    (or
      (not
        (and
          (<= 0 $q1@1585@01)
          (<
            $q1@1585@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))))))
      (and
        (<= 0 $q1@1585@01)
        (<
          $q1@1585@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
    $q1@1585@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2561@11@2561@228-aux|)))
(assert (forall (($q1@1585@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@1585@01)
      (<
        $q1@1585@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
          $q1@1585@01))
      12))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
    $q1@1585@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2561@11@2561@228|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     (forall $q2: Int ::
;       { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] }
;       0 <= $q2 &&
;       $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==>
;       -170141183460469231731687303715884105728 <=
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] &&
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <=
;       170141183460469231731687303715884105727))
(declare-const $t@1586@01 $Snap)
(assert (= $t@1586@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727))
(declare-const $q1@1587@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 968 | !(0 <= $q1@1587@01) | live]
; [else-branch: 968 | 0 <= $q1@1587@01 | live]
(push) ; 5
; [then-branch: 968 | !(0 <= $q1@1587@01)]
(assert (not (<= 0 $q1@1587@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 968 | 0 <= $q1@1587@01]
(assert (<= 0 $q1@1587@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@1587@01) (not (<= 0 $q1@1587@01))))
(push) ; 4
; [then-branch: 969 | 0 <= $q1@1587@01 && $q1@1587@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1567@01, 1))| | live]
; [else-branch: 969 | !(0 <= $q1@1587@01 && $q1@1587@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1567@01, 1))|) | live]
(push) ; 5
; [then-branch: 969 | 0 <= $q1@1587@01 && $q1@1587@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1567@01, 1))|]
(assert (and
  (<= 0 $q1@1587@01)
  (<
    $q1@1587@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))))))
; [eval] (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
(declare-const $q2@1588@01 Int)
(push) ; 6
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] 0 <= $q2
(push) ; 7
; [then-branch: 970 | !(0 <= $q2@1588@01) | live]
; [else-branch: 970 | 0 <= $q2@1588@01 | live]
(push) ; 8
; [then-branch: 970 | !(0 <= $q2@1588@01)]
(assert (not (<= 0 $q2@1588@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 970 | 0 <= $q2@1588@01]
(assert (<= 0 $q2@1588@01))
; [eval] $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@1587@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q2@1588@01) (not (<= 0 $q2@1588@01))))
(push) ; 7
; [then-branch: 971 | 0 <= $q2@1588@01 && $q2@1588@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1567@01, 1))[$q1@1587@01]| | live]
; [else-branch: 971 | !(0 <= $q2@1588@01 && $q2@1588@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1567@01, 1))[$q1@1587@01]|) | live]
(push) ; 8
; [then-branch: 971 | 0 <= $q2@1588@01 && $q2@1588@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1567@01, 1))[$q1@1587@01]|]
(assert (and
  (<= 0 $q2@1588@01)
  (<
    $q2@1588@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
        $q1@1587@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@1587@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q2@1588@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 972 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1567@01, 1))[$q1@1587@01][$q2@1588@01]) | live]
; [else-branch: 972 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1567@01, 1))[$q1@1587@01][$q2@1588@01] | live]
(push) ; 10
; [then-branch: 972 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1567@01, 1))[$q1@1587@01][$q2@1588@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
        $q1@1587@01)
      $q2@1588@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 972 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1567@01, 1))[$q1@1587@01][$q2@1588@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
      $q1@1587@01)
    $q2@1588@01)))
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 11
(assert (not (>= $q1@1587@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= $q2@1588@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
        $q1@1587@01)
      $q2@1588@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
          $q1@1587@01)
        $q2@1588@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 971 | !(0 <= $q2@1588@01 && $q2@1588@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1567@01, 1))[$q1@1587@01]|)]
(assert (not
  (and
    (<= 0 $q2@1588@01)
    (<
      $q2@1588@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
          $q1@1587@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q2@1588@01)
    (<
      $q2@1588@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
          $q1@1587@01))))
  (and
    (<= 0 $q2@1588@01)
    (<
      $q2@1588@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
          $q1@1587@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
            $q1@1587@01)
          $q2@1588@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
              $q1@1587@01)
            $q2@1588@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q2@1588@01)
      (<
        $q2@1588@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
            $q1@1587@01)))))
  (and
    (<= 0 $q2@1588@01)
    (<
      $q2@1588@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
          $q1@1587@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@1588@01 Int)) (!
  (and
    (or (<= 0 $q2@1588@01) (not (<= 0 $q2@1588@01)))
    (=>
      (and
        (<= 0 $q2@1588@01)
        (<
          $q2@1588@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
              $q1@1587@01))))
      (and
        (<= 0 $q2@1588@01)
        (<
          $q2@1588@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
              $q1@1587@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
                $q1@1587@01)
              $q2@1588@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
                  $q1@1587@01)
                $q2@1588@01))))))
    (or
      (not
        (and
          (<= 0 $q2@1588@01)
          (<
            $q2@1588@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
                $q1@1587@01)))))
      (and
        (<= 0 $q2@1588@01)
        (<
          $q2@1588@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
              $q1@1587@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
      $q1@1587@01)
    $q2@1588@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2562@166@2562@541-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 969 | !(0 <= $q1@1587@01 && $q1@1587@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1567@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@1587@01)
    (<
      $q1@1587@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q1@1587@01)
    (<
      $q1@1587@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1)))))
  (and
    (<= 0 $q1@1587@01)
    (<
      $q1@1587@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))))
    (forall (($q2@1588@01 Int)) (!
      (and
        (or (<= 0 $q2@1588@01) (not (<= 0 $q2@1588@01)))
        (=>
          (and
            (<= 0 $q2@1588@01)
            (<
              $q2@1588@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
                  $q1@1587@01))))
          (and
            (<= 0 $q2@1588@01)
            (<
              $q2@1588@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
                  $q1@1587@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
                    $q1@1587@01)
                  $q2@1588@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
                      $q1@1587@01)
                    $q2@1588@01))))))
        (or
          (not
            (and
              (<= 0 $q2@1588@01)
              (<
                $q2@1588@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
                    $q1@1587@01)))))
          (and
            (<= 0 $q2@1588@01)
            (<
              $q2@1588@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
                  $q1@1587@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
          $q1@1587@01)
        $q2@1588@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2562@166@2562@541-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@1587@01)
      (<
        $q1@1587@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))))))
  (and
    (<= 0 $q1@1587@01)
    (<
      $q1@1587@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@1587@01 Int)) (!
  (and
    (or (<= 0 $q1@1587@01) (not (<= 0 $q1@1587@01)))
    (=>
      (and
        (<= 0 $q1@1587@01)
        (<
          $q1@1587@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1)))))
      (and
        (<= 0 $q1@1587@01)
        (<
          $q1@1587@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))))
        (forall (($q2@1588@01 Int)) (!
          (and
            (or (<= 0 $q2@1588@01) (not (<= 0 $q2@1588@01)))
            (=>
              (and
                (<= 0 $q2@1588@01)
                (<
                  $q2@1588@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
                      $q1@1587@01))))
              (and
                (<= 0 $q2@1588@01)
                (<
                  $q2@1588@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
                      $q1@1587@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
                        $q1@1587@01)
                      $q2@1588@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
                          $q1@1587@01)
                        $q2@1588@01))))))
            (or
              (not
                (and
                  (<= 0 $q2@1588@01)
                  (<
                    $q2@1588@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
                        $q1@1587@01)))))
              (and
                (<= 0 $q2@1588@01)
                (<
                  $q2@1588@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
                      $q1@1587@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
              $q1@1587@01)
            $q2@1588@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2562@166@2562@541-aux|))))
    (or
      (not
        (and
          (<= 0 $q1@1587@01)
          (<
            $q1@1587@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))))))
      (and
        (<= 0 $q1@1587@01)
        (<
          $q1@1587@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
    $q1@1587@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2562@11@2562@542-aux|)))
(assert (forall (($q1@1587@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@1587@01)
      (<
        $q1@1587@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1)))))
    (forall (($q2@1588@01 Int)) (!
      (=>
        (and
          (<= 0 $q2@1588@01)
          (<
            $q2@1588@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
                $q1@1587@01))))
        (and
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
                $q1@1587@01)
              $q2@1588@01))
          (<=
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
                $q1@1587@01)
              $q2@1588@01)
            170141183460469231731687303715884105727)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
          $q1@1587@01)
        $q2@1588@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2562@166@2562@541|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1567@01 1))
    $q1@1587@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2562@11@2562@542|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
(declare-const $t@1589@01 $Snap)
(assert (= $t@1589@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(assert (=
  (Seq_length
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2)))
  2))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $t@1590@01 $Snap)
(assert (= $t@1590@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $q3@1591@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 973 | !(0 <= $q3@1591@01) | live]
; [else-branch: 973 | 0 <= $q3@1591@01 | live]
(push) ; 5
; [then-branch: 973 | !(0 <= $q3@1591@01)]
(assert (not (<= 0 $q3@1591@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 973 | 0 <= $q3@1591@01]
(assert (<= 0 $q3@1591@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1591@01) (not (<= 0 $q3@1591@01))))
(push) ; 4
; [then-branch: 974 | 0 <= $q3@1591@01 && $q3@1591@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))| | live]
; [else-branch: 974 | !(0 <= $q3@1591@01 && $q3@1591@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))|) | live]
(push) ; 5
; [then-branch: 974 | 0 <= $q3@1591@01 && $q3@1591@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))|]
(assert (and
  (<= 0 $q3@1591@01)
  (<
    $q3@1591@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 6
(assert (not (>= $q3@1591@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 974 | !(0 <= $q3@1591@01 && $q3@1591@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1591@01)
    (<
      $q3@1591@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1591@01)
      (<
        $q3@1591@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))))))
  (and
    (<= 0 $q3@1591@01)
    (<
      $q3@1591@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1591@01 Int)) (!
  (and
    (or (<= 0 $q3@1591@01) (not (<= 0 $q3@1591@01)))
    (or
      (not
        (and
          (<= 0 $q3@1591@01)
          (<
            $q3@1591@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))))))
      (and
        (<= 0 $q3@1591@01)
        (<
          $q3@1591@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
    $q3@1591@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2564@11@2564@242-aux|)))
(assert (forall (($q3@1591@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1591@01)
      (<
        $q3@1591@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
          $q3@1591@01))
      2))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
    $q3@1591@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2564@11@2564@242|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==
;       2))
(declare-const $t@1592@01 $Snap)
(assert (= $t@1592@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2))
(declare-const $q3@1593@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 975 | !(0 <= $q3@1593@01) | live]
; [else-branch: 975 | 0 <= $q3@1593@01 | live]
(push) ; 5
; [then-branch: 975 | !(0 <= $q3@1593@01)]
(assert (not (<= 0 $q3@1593@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 975 | 0 <= $q3@1593@01]
(assert (<= 0 $q3@1593@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1593@01) (not (<= 0 $q3@1593@01))))
(push) ; 4
; [then-branch: 976 | 0 <= $q3@1593@01 && $q3@1593@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))| | live]
; [else-branch: 976 | !(0 <= $q3@1593@01 && $q3@1593@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))|) | live]
(push) ; 5
; [then-branch: 976 | 0 <= $q3@1593@01 && $q3@1593@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))|]
(assert (and
  (<= 0 $q3@1593@01)
  (<
    $q3@1593@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
(declare-const $q4@1594@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 977 | !(0 <= $q4@1594@01) | live]
; [else-branch: 977 | 0 <= $q4@1594@01 | live]
(push) ; 8
; [then-branch: 977 | !(0 <= $q4@1594@01)]
(assert (not (<= 0 $q4@1594@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 977 | 0 <= $q4@1594@01]
(assert (<= 0 $q4@1594@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1593@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@1594@01) (not (<= 0 $q4@1594@01))))
(push) ; 7
; [then-branch: 978 | 0 <= $q4@1594@01 && $q4@1594@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))[$q3@1593@01]| | live]
; [else-branch: 978 | !(0 <= $q4@1594@01 && $q4@1594@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))[$q3@1593@01]|) | live]
(push) ; 8
; [then-branch: 978 | 0 <= $q4@1594@01 && $q4@1594@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))[$q3@1593@01]|]
(assert (and
  (<= 0 $q4@1594@01)
  (<
    $q4@1594@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
        $q3@1593@01)))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1593@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q4@1594@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 978 | !(0 <= $q4@1594@01 && $q4@1594@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))[$q3@1593@01]|)]
(assert (not
  (and
    (<= 0 $q4@1594@01)
    (<
      $q4@1594@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
          $q3@1593@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@1594@01)
      (<
        $q4@1594@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
            $q3@1593@01)))))
  (and
    (<= 0 $q4@1594@01)
    (<
      $q4@1594@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
          $q3@1593@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1594@01 Int)) (!
  (and
    (or (<= 0 $q4@1594@01) (not (<= 0 $q4@1594@01)))
    (or
      (not
        (and
          (<= 0 $q4@1594@01)
          (<
            $q4@1594@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                $q3@1593@01)))))
      (and
        (<= 0 $q4@1594@01)
        (<
          $q4@1594@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
              $q3@1593@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
      $q3@1593@01)
    $q4@1594@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2565@176@2565@422-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 976 | !(0 <= $q3@1593@01 && $q3@1593@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1593@01)
    (<
      $q3@1593@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@1593@01)
    (<
      $q3@1593@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2)))))
  (and
    (<= 0 $q3@1593@01)
    (<
      $q3@1593@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))))
    (forall (($q4@1594@01 Int)) (!
      (and
        (or (<= 0 $q4@1594@01) (not (<= 0 $q4@1594@01)))
        (or
          (not
            (and
              (<= 0 $q4@1594@01)
              (<
                $q4@1594@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                    $q3@1593@01)))))
          (and
            (<= 0 $q4@1594@01)
            (<
              $q4@1594@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                  $q3@1593@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
          $q3@1593@01)
        $q4@1594@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2565@176@2565@422-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1593@01)
      (<
        $q3@1593@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))))))
  (and
    (<= 0 $q3@1593@01)
    (<
      $q3@1593@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1593@01 Int)) (!
  (and
    (or (<= 0 $q3@1593@01) (not (<= 0 $q3@1593@01)))
    (=>
      (and
        (<= 0 $q3@1593@01)
        (<
          $q3@1593@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2)))))
      (and
        (<= 0 $q3@1593@01)
        (<
          $q3@1593@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))))
        (forall (($q4@1594@01 Int)) (!
          (and
            (or (<= 0 $q4@1594@01) (not (<= 0 $q4@1594@01)))
            (or
              (not
                (and
                  (<= 0 $q4@1594@01)
                  (<
                    $q4@1594@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                        $q3@1593@01)))))
              (and
                (<= 0 $q4@1594@01)
                (<
                  $q4@1594@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                      $q3@1593@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
              $q3@1593@01)
            $q4@1594@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2565@176@2565@422-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@1593@01)
          (<
            $q3@1593@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))))))
      (and
        (<= 0 $q3@1593@01)
        (<
          $q3@1593@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
    $q3@1593@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2565@11@2565@423-aux|)))
(assert (forall (($q3@1593@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1593@01)
      (<
        $q3@1593@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2)))))
    (forall (($q4@1594@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@1594@01)
          (<
            $q4@1594@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                $q3@1593@01))))
        (=
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                $q3@1593@01)
              $q4@1594@01))
          2))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
          $q3@1593@01)
        $q4@1594@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2565@176@2565@422|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
    $q3@1593@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2565@11@2565@423|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       (forall $q5: Int ::
;         { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] }
;         0 <= $q5 &&
;         $q5 <
;         |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==>
;         -170141183460469231731687303715884105728 <=
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] &&
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <=
;         170141183460469231731687303715884105727)))
(declare-const $t@1595@01 $Snap)
(assert (= $t@1595@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)))
(declare-const $q3@1596@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 979 | !(0 <= $q3@1596@01) | live]
; [else-branch: 979 | 0 <= $q3@1596@01 | live]
(push) ; 5
; [then-branch: 979 | !(0 <= $q3@1596@01)]
(assert (not (<= 0 $q3@1596@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 979 | 0 <= $q3@1596@01]
(assert (<= 0 $q3@1596@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1596@01) (not (<= 0 $q3@1596@01))))
(push) ; 4
; [then-branch: 980 | 0 <= $q3@1596@01 && $q3@1596@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))| | live]
; [else-branch: 980 | !(0 <= $q3@1596@01 && $q3@1596@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))|) | live]
(push) ; 5
; [then-branch: 980 | 0 <= $q3@1596@01 && $q3@1596@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))|]
(assert (and
  (<= 0 $q3@1596@01)
  (<
    $q3@1596@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
(declare-const $q4@1597@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 981 | !(0 <= $q4@1597@01) | live]
; [else-branch: 981 | 0 <= $q4@1597@01 | live]
(push) ; 8
; [then-branch: 981 | !(0 <= $q4@1597@01)]
(assert (not (<= 0 $q4@1597@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 981 | 0 <= $q4@1597@01]
(assert (<= 0 $q4@1597@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1596@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@1597@01) (not (<= 0 $q4@1597@01))))
(push) ; 7
; [then-branch: 982 | 0 <= $q4@1597@01 && $q4@1597@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))[$q3@1596@01]| | live]
; [else-branch: 982 | !(0 <= $q4@1597@01 && $q4@1597@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))[$q3@1596@01]|) | live]
(push) ; 8
; [then-branch: 982 | 0 <= $q4@1597@01 && $q4@1597@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))[$q3@1596@01]|]
(assert (and
  (<= 0 $q4@1597@01)
  (<
    $q4@1597@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
        $q3@1596@01)))))
; [eval] (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
(declare-const $q5@1598@01 Int)
(push) ; 9
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] 0 <= $q5
(push) ; 10
; [then-branch: 983 | !(0 <= $q5@1598@01) | live]
; [else-branch: 983 | 0 <= $q5@1598@01 | live]
(push) ; 11
; [then-branch: 983 | !(0 <= $q5@1598@01)]
(assert (not (<= 0 $q5@1598@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 983 | 0 <= $q5@1598@01]
(assert (<= 0 $q5@1598@01))
; [eval] $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@1596@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@1597@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q5@1598@01) (not (<= 0 $q5@1598@01))))
(push) ; 10
; [then-branch: 984 | 0 <= $q5@1598@01 && $q5@1598@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))[$q3@1596@01][$q4@1597@01]| | live]
; [else-branch: 984 | !(0 <= $q5@1598@01 && $q5@1598@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))[$q3@1596@01][$q4@1597@01]|) | live]
(push) ; 11
; [then-branch: 984 | 0 <= $q5@1598@01 && $q5@1598@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))[$q3@1596@01][$q4@1597@01]|]
(assert (and
  (<= 0 $q5@1598@01)
  (<
    $q5@1598@01
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
          $q3@1596@01)
        $q4@1597@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@1596@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@1597@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q5@1598@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 985 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))[$q3@1596@01][$q4@1597@01][$q5@1598@01]) | live]
; [else-branch: 985 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))[$q3@1596@01][$q4@1597@01][$q5@1598@01] | live]
(push) ; 13
; [then-branch: 985 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))[$q3@1596@01][$q4@1597@01][$q5@1598@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
          $q3@1596@01)
        $q4@1597@01)
      $q5@1598@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 985 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))[$q3@1596@01][$q4@1597@01][$q5@1598@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
        $q3@1596@01)
      $q4@1597@01)
    $q5@1598@01)))
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 14
(assert (not (>= $q3@1596@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q4@1597@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q5@1598@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
          $q3@1596@01)
        $q4@1597@01)
      $q5@1598@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
            $q3@1596@01)
          $q4@1597@01)
        $q5@1598@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 984 | !(0 <= $q5@1598@01 && $q5@1598@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))[$q3@1596@01][$q4@1597@01]|)]
(assert (not
  (and
    (<= 0 $q5@1598@01)
    (<
      $q5@1598@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
            $q3@1596@01)
          $q4@1597@01))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q5@1598@01)
    (<
      $q5@1598@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
            $q3@1596@01)
          $q4@1597@01))))
  (and
    (<= 0 $q5@1598@01)
    (<
      $q5@1598@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
            $q3@1596@01)
          $q4@1597@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
              $q3@1596@01)
            $q4@1597@01)
          $q5@1598@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                $q3@1596@01)
              $q4@1597@01)
            $q5@1598@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q5@1598@01)
      (<
        $q5@1598@01
        (Seq_length
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
              $q3@1596@01)
            $q4@1597@01)))))
  (and
    (<= 0 $q5@1598@01)
    (<
      $q5@1598@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
            $q3@1596@01)
          $q4@1597@01))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@1598@01 Int)) (!
  (and
    (or (<= 0 $q5@1598@01) (not (<= 0 $q5@1598@01)))
    (=>
      (and
        (<= 0 $q5@1598@01)
        (<
          $q5@1598@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                $q3@1596@01)
              $q4@1597@01))))
      (and
        (<= 0 $q5@1598@01)
        (<
          $q5@1598@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                $q3@1596@01)
              $q4@1597@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                  $q3@1596@01)
                $q4@1597@01)
              $q5@1598@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                    $q3@1596@01)
                  $q4@1597@01)
                $q5@1598@01))))))
    (or
      (not
        (and
          (<= 0 $q5@1598@01)
          (<
            $q5@1598@01
            (Seq_length
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                  $q3@1596@01)
                $q4@1597@01)))))
      (and
        (<= 0 $q5@1598@01)
        (<
          $q5@1598@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                $q3@1596@01)
              $q4@1597@01))))))
  :pattern ((Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
        $q3@1596@01)
      $q4@1597@01)
    $q5@1598@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2566@351@2566@766-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 982 | !(0 <= $q4@1597@01 && $q4@1597@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))[$q3@1596@01]|)]
(assert (not
  (and
    (<= 0 $q4@1597@01)
    (<
      $q4@1597@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
          $q3@1596@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q4@1597@01)
    (<
      $q4@1597@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
          $q3@1596@01))))
  (and
    (<= 0 $q4@1597@01)
    (<
      $q4@1597@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
          $q3@1596@01)))
    (forall (($q5@1598@01 Int)) (!
      (and
        (or (<= 0 $q5@1598@01) (not (<= 0 $q5@1598@01)))
        (=>
          (and
            (<= 0 $q5@1598@01)
            (<
              $q5@1598@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                    $q3@1596@01)
                  $q4@1597@01))))
          (and
            (<= 0 $q5@1598@01)
            (<
              $q5@1598@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                    $q3@1596@01)
                  $q4@1597@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                      $q3@1596@01)
                    $q4@1597@01)
                  $q5@1598@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                        $q3@1596@01)
                      $q4@1597@01)
                    $q5@1598@01))))))
        (or
          (not
            (and
              (<= 0 $q5@1598@01)
              (<
                $q5@1598@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                      $q3@1596@01)
                    $q4@1597@01)))))
          (and
            (<= 0 $q5@1598@01)
            (<
              $q5@1598@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                    $q3@1596@01)
                  $q4@1597@01))))))
      :pattern ((Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
            $q3@1596@01)
          $q4@1597@01)
        $q5@1598@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2566@351@2566@766-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@1597@01)
      (<
        $q4@1597@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
            $q3@1596@01)))))
  (and
    (<= 0 $q4@1597@01)
    (<
      $q4@1597@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
          $q3@1596@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1597@01 Int)) (!
  (and
    (or (<= 0 $q4@1597@01) (not (<= 0 $q4@1597@01)))
    (=>
      (and
        (<= 0 $q4@1597@01)
        (<
          $q4@1597@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
              $q3@1596@01))))
      (and
        (<= 0 $q4@1597@01)
        (<
          $q4@1597@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
              $q3@1596@01)))
        (forall (($q5@1598@01 Int)) (!
          (and
            (or (<= 0 $q5@1598@01) (not (<= 0 $q5@1598@01)))
            (=>
              (and
                (<= 0 $q5@1598@01)
                (<
                  $q5@1598@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                        $q3@1596@01)
                      $q4@1597@01))))
              (and
                (<= 0 $q5@1598@01)
                (<
                  $q5@1598@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                        $q3@1596@01)
                      $q4@1597@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                          $q3@1596@01)
                        $q4@1597@01)
                      $q5@1598@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                            $q3@1596@01)
                          $q4@1597@01)
                        $q5@1598@01))))))
            (or
              (not
                (and
                  (<= 0 $q5@1598@01)
                  (<
                    $q5@1598@01
                    (Seq_length
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                          $q3@1596@01)
                        $q4@1597@01)))))
              (and
                (<= 0 $q5@1598@01)
                (<
                  $q5@1598@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                        $q3@1596@01)
                      $q4@1597@01))))))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                $q3@1596@01)
              $q4@1597@01)
            $q5@1598@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2566@351@2566@766-aux|))))
    (or
      (not
        (and
          (<= 0 $q4@1597@01)
          (<
            $q4@1597@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                $q3@1596@01)))))
      (and
        (<= 0 $q4@1597@01)
        (<
          $q4@1597@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
              $q3@1596@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
      $q3@1596@01)
    $q4@1597@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2566@176@2566@767-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 980 | !(0 <= $q3@1596@01 && $q3@1596@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1567@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1596@01)
    (<
      $q3@1596@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@1596@01)
    (<
      $q3@1596@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2)))))
  (and
    (<= 0 $q3@1596@01)
    (<
      $q3@1596@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))))
    (forall (($q4@1597@01 Int)) (!
      (and
        (or (<= 0 $q4@1597@01) (not (<= 0 $q4@1597@01)))
        (=>
          (and
            (<= 0 $q4@1597@01)
            (<
              $q4@1597@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                  $q3@1596@01))))
          (and
            (<= 0 $q4@1597@01)
            (<
              $q4@1597@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                  $q3@1596@01)))
            (forall (($q5@1598@01 Int)) (!
              (and
                (or (<= 0 $q5@1598@01) (not (<= 0 $q5@1598@01)))
                (=>
                  (and
                    (<= 0 $q5@1598@01)
                    (<
                      $q5@1598@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                            $q3@1596@01)
                          $q4@1597@01))))
                  (and
                    (<= 0 $q5@1598@01)
                    (<
                      $q5@1598@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                            $q3@1596@01)
                          $q4@1597@01)))
                    (or
                      (<=
                        (- 0 170141183460469231731687303715884105728)
                        (Seq_index
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                              $q3@1596@01)
                            $q4@1597@01)
                          $q5@1598@01))
                      (not
                        (<=
                          (- 0 170141183460469231731687303715884105728)
                          (Seq_index
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                                $q3@1596@01)
                              $q4@1597@01)
                            $q5@1598@01))))))
                (or
                  (not
                    (and
                      (<= 0 $q5@1598@01)
                      (<
                        $q5@1598@01
                        (Seq_length
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                              $q3@1596@01)
                            $q4@1597@01)))))
                  (and
                    (<= 0 $q5@1598@01)
                    (<
                      $q5@1598@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                            $q3@1596@01)
                          $q4@1597@01))))))
              :pattern ((Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                    $q3@1596@01)
                  $q4@1597@01)
                $q5@1598@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2566@351@2566@766-aux|))))
        (or
          (not
            (and
              (<= 0 $q4@1597@01)
              (<
                $q4@1597@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                    $q3@1596@01)))))
          (and
            (<= 0 $q4@1597@01)
            (<
              $q4@1597@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                  $q3@1596@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
          $q3@1596@01)
        $q4@1597@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2566@176@2566@767-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1596@01)
      (<
        $q3@1596@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))))))
  (and
    (<= 0 $q3@1596@01)
    (<
      $q3@1596@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1596@01 Int)) (!
  (and
    (or (<= 0 $q3@1596@01) (not (<= 0 $q3@1596@01)))
    (=>
      (and
        (<= 0 $q3@1596@01)
        (<
          $q3@1596@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2)))))
      (and
        (<= 0 $q3@1596@01)
        (<
          $q3@1596@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))))
        (forall (($q4@1597@01 Int)) (!
          (and
            (or (<= 0 $q4@1597@01) (not (<= 0 $q4@1597@01)))
            (=>
              (and
                (<= 0 $q4@1597@01)
                (<
                  $q4@1597@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                      $q3@1596@01))))
              (and
                (<= 0 $q4@1597@01)
                (<
                  $q4@1597@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                      $q3@1596@01)))
                (forall (($q5@1598@01 Int)) (!
                  (and
                    (or (<= 0 $q5@1598@01) (not (<= 0 $q5@1598@01)))
                    (=>
                      (and
                        (<= 0 $q5@1598@01)
                        (<
                          $q5@1598@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                                $q3@1596@01)
                              $q4@1597@01))))
                      (and
                        (<= 0 $q5@1598@01)
                        (<
                          $q5@1598@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                                $q3@1596@01)
                              $q4@1597@01)))
                        (or
                          (<=
                            (- 0 170141183460469231731687303715884105728)
                            (Seq_index
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                                  $q3@1596@01)
                                $q4@1597@01)
                              $q5@1598@01))
                          (not
                            (<=
                              (- 0 170141183460469231731687303715884105728)
                              (Seq_index
                                (Seq_index
                                  (Seq_index
                                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                                    $q3@1596@01)
                                  $q4@1597@01)
                                $q5@1598@01))))))
                    (or
                      (not
                        (and
                          (<= 0 $q5@1598@01)
                          (<
                            $q5@1598@01
                            (Seq_length
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                                  $q3@1596@01)
                                $q4@1597@01)))))
                      (and
                        (<= 0 $q5@1598@01)
                        (<
                          $q5@1598@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                                $q3@1596@01)
                              $q4@1597@01))))))
                  :pattern ((Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                        $q3@1596@01)
                      $q4@1597@01)
                    $q5@1598@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2566@351@2566@766-aux|))))
            (or
              (not
                (and
                  (<= 0 $q4@1597@01)
                  (<
                    $q4@1597@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                        $q3@1596@01)))))
              (and
                (<= 0 $q4@1597@01)
                (<
                  $q4@1597@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                      $q3@1596@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
              $q3@1596@01)
            $q4@1597@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2566@176@2566@767-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@1596@01)
          (<
            $q3@1596@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))))))
      (and
        (<= 0 $q3@1596@01)
        (<
          $q3@1596@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
    $q3@1596@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2566@11@2566@768-aux|)))
(assert (forall (($q3@1596@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1596@01)
      (<
        $q3@1596@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2)))))
    (forall (($q4@1597@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@1597@01)
          (<
            $q4@1597@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                $q3@1596@01))))
        (forall (($q5@1598@01 Int)) (!
          (=>
            (and
              (<= 0 $q5@1598@01)
              (<
                $q5@1598@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                      $q3@1596@01)
                    $q4@1597@01))))
            (and
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                      $q3@1596@01)
                    $q4@1597@01)
                  $q5@1598@01))
              (<=
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                      $q3@1596@01)
                    $q4@1597@01)
                  $q5@1598@01)
                170141183460469231731687303715884105727)))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
                $q3@1596@01)
              $q4@1597@01)
            $q5@1598@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2566@351@2566@766|)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
          $q3@1596@01)
        $q4@1597@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2566@176@2566@767|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1567@01 2))
    $q3@1596@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2566@11@2566@768|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
(declare-const $t@1599@01 $Snap)
(assert (= $t@1599@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 3))) 1000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] }
;     0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] &&
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <=
;     170141183460469231731687303715884105727)
(declare-const $t@1600@01 $Snap)
(assert (= $t@1600@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] } 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727)
(declare-const $q6@1601@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] 0 <= $q6
(push) ; 4
; [then-branch: 986 | !(0 <= $q6@1601@01) | live]
; [else-branch: 986 | 0 <= $q6@1601@01 | live]
(push) ; 5
; [then-branch: 986 | !(0 <= $q6@1601@01)]
(assert (not (<= 0 $q6@1601@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 986 | 0 <= $q6@1601@01]
(assert (<= 0 $q6@1601@01))
; [eval] $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q6@1601@01) (not (<= 0 $q6@1601@01))))
(push) ; 4
; [then-branch: 987 | 0 <= $q6@1601@01 && $q6@1601@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1567@01, 3))| | live]
; [else-branch: 987 | !(0 <= $q6@1601@01 && $q6@1601@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1567@01, 3))|) | live]
(push) ; 5
; [then-branch: 987 | 0 <= $q6@1601@01 && $q6@1601@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1567@01, 3))|]
(assert (and
  (<= 0 $q6@1601@01)
  (<
    $q6@1601@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 3))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (>= $q6@1601@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 988 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1567@01, 3))[$q6@1601@01]) | live]
; [else-branch: 988 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1567@01, 3))[$q6@1601@01] | live]
(push) ; 7
; [then-branch: 988 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1567@01, 3))[$q6@1601@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 3))
      $q6@1601@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 988 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1567@01, 3))[$q6@1601@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 3))
    $q6@1601@01)))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (>= $q6@1601@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 3))
      $q6@1601@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 3))
        $q6@1601@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 987 | !(0 <= $q6@1601@01 && $q6@1601@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1567@01, 3))|)]
(assert (not
  (and
    (<= 0 $q6@1601@01)
    (<
      $q6@1601@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q6@1601@01)
    (<
      $q6@1601@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 3)))))
  (and
    (<= 0 $q6@1601@01)
    (<
      $q6@1601@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 3))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 3))
          $q6@1601@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 3))
            $q6@1601@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q6@1601@01)
      (<
        $q6@1601@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 3))))))
  (and
    (<= 0 $q6@1601@01)
    (<
      $q6@1601@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1601@01 Int)) (!
  (and
    (or (<= 0 $q6@1601@01) (not (<= 0 $q6@1601@01)))
    (=>
      (and
        (<= 0 $q6@1601@01)
        (<
          $q6@1601@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 3)))))
      (and
        (<= 0 $q6@1601@01)
        (<
          $q6@1601@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 3))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 3))
              $q6@1601@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 3))
                $q6@1601@01))))))
    (or
      (not
        (and
          (<= 0 $q6@1601@01)
          (<
            $q6@1601@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 3))))))
      (and
        (<= 0 $q6@1601@01)
        (<
          $q6@1601@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 3)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 3))
    $q6@1601@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2568@11@2568@346-aux|)))
(assert (forall (($q6@1601@01 Int)) (!
  (=>
    (and
      (<= 0 $q6@1601@01)
      (<
        $q6@1601@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 3)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 3))
          $q6@1601@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 3))
          $q6@1601@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1567@01 3))
    $q6@1601@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2568@11@2568@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==
;     10)
(declare-const $t@1602@01 $Snap)
(assert (= $t@1602@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10)
(declare-const $q7@1603@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1603@01 Int)) (!
  (=
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1603@01))
    10)
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1603@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2569@11@2569@209|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     (forall $q8: Int ::
;       { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] }
;       0 <= $q8 &&
;       $q8 <
;       |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==>
;       -170141183460469231731687303715884105728 <=
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] &&
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <=
;       170141183460469231731687303715884105727))
(declare-const $t@1604@01 $Snap)
(assert (= $t@1604@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727))
(declare-const $q7@1605@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727)
(declare-const $q8@1606@01 Int)
(push) ; 4
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] 0 <= $q8
(push) ; 5
; [then-branch: 989 | !(0 <= $q8@1606@01) | live]
; [else-branch: 989 | 0 <= $q8@1606@01 | live]
(push) ; 6
; [then-branch: 989 | !(0 <= $q8@1606@01)]
(assert (not (<= 0 $q8@1606@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 989 | 0 <= $q8@1606@01]
(assert (<= 0 $q8@1606@01))
; [eval] $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q8@1606@01) (not (<= 0 $q8@1606@01))))
(push) ; 5
; [then-branch: 990 | 0 <= $q8@1606@01 && $q8@1606@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1567@01, 4)), $q7@1605@01)| | live]
; [else-branch: 990 | !(0 <= $q8@1606@01 && $q8@1606@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1567@01, 4)), $q7@1605@01)|) | live]
(push) ; 6
; [then-branch: 990 | 0 <= $q8@1606@01 && $q8@1606@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1567@01, 4)), $q7@1605@01)|]
(assert (and
  (<= 0 $q8@1606@01)
  (<
    $q8@1606@01
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] -170141183460469231731687303715884105728
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 7
(assert (not (>= $q8@1606@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 991 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1567@01, 4)), $q7@1605@01)[$q8@1606@01]) | live]
; [else-branch: 991 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1567@01, 4)), $q7@1605@01)[$q8@1606@01] | live]
(push) ; 8
; [then-branch: 991 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1567@01, 4)), $q7@1605@01)[$q8@1606@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01)
      $q8@1606@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 991 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1567@01, 4)), $q7@1605@01)[$q8@1606@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01)
    $q8@1606@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 9
(assert (not (>= $q8@1606@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01)
      $q8@1606@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01)
        $q8@1606@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 990 | !(0 <= $q8@1606@01 && $q8@1606@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1567@01, 4)), $q7@1605@01)|)]
(assert (not
  (and
    (<= 0 $q8@1606@01)
    (<
      $q8@1606@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q8@1606@01)
    (<
      $q8@1606@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01))))
  (and
    (<= 0 $q8@1606@01)
    (<
      $q8@1606@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01)
          $q8@1606@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01)
            $q8@1606@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q8@1606@01)
      (<
        $q8@1606@01
        (Seq_length
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01)))))
  (and
    (<= 0 $q8@1606@01)
    (<
      $q8@1606@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q8@1606@01 Int)) (!
  (and
    (or (<= 0 $q8@1606@01) (not (<= 0 $q8@1606@01)))
    (=>
      (and
        (<= 0 $q8@1606@01)
        (<
          $q8@1606@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01))))
      (and
        (<= 0 $q8@1606@01)
        (<
          $q8@1606@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01)
              $q8@1606@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01)
                $q8@1606@01))))))
    (or
      (not
        (and
          (<= 0 $q8@1606@01)
          (<
            $q8@1606@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01)))))
      (and
        (<= 0 $q8@1606@01)
        (<
          $q8@1606@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01))))))
  :pattern ((Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01)
    $q8@1606@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2570@119@2570@606-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1605@01 Int)) (!
  (forall (($q8@1606@01 Int)) (!
    (and
      (or (<= 0 $q8@1606@01) (not (<= 0 $q8@1606@01)))
      (=>
        (and
          (<= 0 $q8@1606@01)
          (<
            $q8@1606@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01))))
        (and
          (<= 0 $q8@1606@01)
          (<
            $q8@1606@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01)))
          (or
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01)
                $q8@1606@01))
            (not
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01)
                  $q8@1606@01))))))
      (or
        (not
          (and
            (<= 0 $q8@1606@01)
            (<
              $q8@1606@01
              (Seq_length
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01)))))
        (and
          (<= 0 $q8@1606@01)
          (<
            $q8@1606@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01))))))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01)
      $q8@1606@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2570@119@2570@606-aux|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2570@11@2570@607-aux|)))
(assert (forall (($q7@1605@01 Int)) (!
  (forall (($q8@1606@01 Int)) (!
    (=>
      (and
        (<= 0 $q8@1606@01)
        (<
          $q8@1606@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01))))
      (and
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01)
            $q8@1606@01))
        (<=
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01)
            $q8@1606@01)
          170141183460469231731687303715884105727)))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01)
      $q8@1606@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2570@119@2570@606|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1567@01 4)) $q7@1605@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2570@11@2570@607|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1607@01 $Snap)
(assert (= $t@1607@01 ($Snap.combine ($Snap.first $t@1607@01) ($Snap.second $t@1607@01))))
(assert (= ($Snap.first $t@1607@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1567@01 5))))
(assert (= ($Snap.second $t@1607@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1567@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@1608@01 $Snap)
(assert (= $t@1608@01 ($Snap.combine ($Snap.first $t@1608@01) ($Snap.second $t@1608@01))))
(assert (= ($Snap.first $t@1608@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@1567@01 6))))
(assert (= ($Snap.second $t@1608@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1567@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1609@01 $Snap)
(assert (= $t@1609@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q9@1610@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 992 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1567@01, 8)), $q9@1610@01)) | live]
; [else-branch: 992 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1567@01, 8)), $q9@1610@01) | live]
(push) ; 5
; [then-branch: 992 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1567@01, 8)), $q9@1610@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 8)) $q9@1610@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 992 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1567@01, 8)), $q9@1610@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 8)) $q9@1610@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 8)) $q9@1610@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 8)) $q9@1610@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@1610@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 8)) $q9@1610@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 8)) $q9@1610@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 8)) $q9@1610@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2573@11@2573@345-aux|)))
(assert (forall (($q9@1610@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 8)) $q9@1610@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 8)) $q9@1610@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 8)) $q9@1610@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2573@11@2573@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@1611@01 $Snap)
(assert (= $t@1611@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q9@1612@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@1612@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 8)) $q9@1612@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 8)) $q9@1612@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2574@11@2574@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1613@01 $Snap)
(assert (= $t@1613@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q10@1614@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 993 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1567@01, 9)), $q10@1614@01)) | live]
; [else-branch: 993 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1567@01, 9)), $q10@1614@01) | live]
(push) ; 5
; [then-branch: 993 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1567@01, 9)), $q10@1614@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 9)) $q10@1614@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 993 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1567@01, 9)), $q10@1614@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 9)) $q10@1614@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 9)) $q10@1614@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 9)) $q10@1614@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@1614@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 9)) $q10@1614@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 9)) $q10@1614@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 9)) $q10@1614@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2575@11@2575@349-aux|)))
(assert (forall (($q10@1614@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 9)) $q10@1614@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 9)) $q10@1614@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 9)) $q10@1614@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2575@11@2575@349|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@1615@01 $Snap)
(assert (= $t@1615@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q10@1616@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@1616@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 9)) $q10@1616@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1567@01 9)) $q10@1616@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2576@11@2576@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@1617@01 $Snap)
(assert (= $t@1617@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1567@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1618@01 $Snap)
(assert (= $t@1618@01 ($Snap.combine ($Snap.first $t@1618@01) ($Snap.second $t@1618@01))))
(assert (= ($Snap.first $t@1618@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@1618@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |l$a| == 3
(declare-const $t@1619@01 $Snap)
(assert (= $t@1619@01 $Snap.unit))
; [eval] |l$a| == 3
; [eval] |l$a|
(assert (= (Seq_length l$a@1559@01) 3))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { l$a[$q0] }
;     0 <= $q0 && $q0 < |l$a| ==>
;     -170141183460469231731687303715884105728 <= l$a[$q0] &&
;     l$a[$q0] <= 170141183460469231731687303715884105727)
(declare-const $t@1620@01 $Snap)
(assert (= $t@1620@01 $Snap.unit))
; [eval] (forall $q0: Int :: { l$a[$q0] } 0 <= $q0 && $q0 < |l$a| ==> -170141183460469231731687303715884105728 <= l$a[$q0] && l$a[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@1621@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |l$a| ==> -170141183460469231731687303715884105728 <= l$a[$q0] && l$a[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |l$a|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 994 | !(0 <= $q0@1621@01) | live]
; [else-branch: 994 | 0 <= $q0@1621@01 | live]
(push) ; 5
; [then-branch: 994 | !(0 <= $q0@1621@01)]
(assert (not (<= 0 $q0@1621@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 994 | 0 <= $q0@1621@01]
(assert (<= 0 $q0@1621@01))
; [eval] $q0 < |l$a|
; [eval] |l$a|
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@1621@01) (not (<= 0 $q0@1621@01))))
(push) ; 4
; [then-branch: 995 | 0 <= $q0@1621@01 && $q0@1621@01 < |l$a@1559@01| | live]
; [else-branch: 995 | !(0 <= $q0@1621@01 && $q0@1621@01 < |l$a@1559@01|) | live]
(push) ; 5
; [then-branch: 995 | 0 <= $q0@1621@01 && $q0@1621@01 < |l$a@1559@01|]
(assert (and (<= 0 $q0@1621@01) (< $q0@1621@01 (Seq_length l$a@1559@01))))
; [eval] -170141183460469231731687303715884105728 <= l$a[$q0] && l$a[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= l$a[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] l$a[$q0]
(push) ; 6
(assert (not (>= $q0@1621@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 996 | !(-170141183460469231731687303715884105728 <= l$a@1559@01[$q0@1621@01]) | live]
; [else-branch: 996 | -170141183460469231731687303715884105728 <= l$a@1559@01[$q0@1621@01] | live]
(push) ; 7
; [then-branch: 996 | !(-170141183460469231731687303715884105728 <= l$a@1559@01[$q0@1621@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index l$a@1559@01 $q0@1621@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 996 | -170141183460469231731687303715884105728 <= l$a@1559@01[$q0@1621@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index l$a@1559@01 $q0@1621@01)))
; [eval] l$a[$q0] <= 170141183460469231731687303715884105727
; [eval] l$a[$q0]
(push) ; 8
(assert (not (>= $q0@1621@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index l$a@1559@01 $q0@1621@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index l$a@1559@01 $q0@1621@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 995 | !(0 <= $q0@1621@01 && $q0@1621@01 < |l$a@1559@01|)]
(assert (not (and (<= 0 $q0@1621@01) (< $q0@1621@01 (Seq_length l$a@1559@01)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and (<= 0 $q0@1621@01) (< $q0@1621@01 (Seq_length l$a@1559@01)))
  (and
    (<= 0 $q0@1621@01)
    (< $q0@1621@01 (Seq_length l$a@1559@01))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index l$a@1559@01 $q0@1621@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index l$a@1559@01 $q0@1621@01)))))))
; Joined path conditions
(assert (or
  (not (and (<= 0 $q0@1621@01) (< $q0@1621@01 (Seq_length l$a@1559@01))))
  (and (<= 0 $q0@1621@01) (< $q0@1621@01 (Seq_length l$a@1559@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@1621@01 Int)) (!
  (and
    (or (<= 0 $q0@1621@01) (not (<= 0 $q0@1621@01)))
    (=>
      (and (<= 0 $q0@1621@01) (< $q0@1621@01 (Seq_length l$a@1559@01)))
      (and
        (<= 0 $q0@1621@01)
        (< $q0@1621@01 (Seq_length l$a@1559@01))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index l$a@1559@01 $q0@1621@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index l$a@1559@01 $q0@1621@01))))))
    (or
      (not (and (<= 0 $q0@1621@01) (< $q0@1621@01 (Seq_length l$a@1559@01))))
      (and (<= 0 $q0@1621@01) (< $q0@1621@01 (Seq_length l$a@1559@01)))))
  :pattern ((Seq_index l$a@1559@01 $q0@1621@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2582@11@2582@178-aux|)))
(assert (forall (($q0@1621@01 Int)) (!
  (=>
    (and (<= 0 $q0@1621@01) (< $q0@1621@01 (Seq_length l$a@1559@01)))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index l$a@1559@01 $q0@1621@01))
      (<=
        (Seq_index l$a@1559@01 $q0@1621@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index l$a@1559@01 $q0@1621@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2582@11@2582@178|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <= $unwrap(l$element) &&
;   $unwrap(l$element) <= 170141183460469231731687303715884105727
(declare-const $t@1622@01 $Snap)
(assert (= $t@1622@01 ($Snap.combine ($Snap.first $t@1622@01) ($Snap.second $t@1622@01))))
(assert (= ($Snap.first $t@1622@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= $unwrap(l$element)
; [eval] -170141183460469231731687303715884105728
; [eval] $unwrap(l$element)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($unwrap<Int> l$element@1560@01)))
(assert (= ($Snap.second $t@1622@01) $Snap.unit))
; [eval] $unwrap(l$element) <= 170141183460469231731687303715884105727
; [eval] $unwrap(l$element)
(assert (<= ($unwrap<Int> l$element@1560@01) 170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1623@01 $Snap)
(assert (= $t@1623@01 ($Snap.combine ($Snap.first $t@1623@01) ($Snap.second $t@1623@01))))
(assert (= ($Snap.first $t@1623@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1564@01 0))))
(assert (= ($Snap.second $t@1623@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1564@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1624@01 $Snap)
(assert (= $t@1624@01 ($Snap.combine ($Snap.first $t@1624@01) ($Snap.second $t@1624@01))))
(assert (= ($Snap.first $t@1624@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1564@01 1))))
(assert (= ($Snap.second $t@1624@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1564@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1625@01 $Snap)
(assert (= $t@1625@01 ($Snap.combine ($Snap.first $t@1625@01) ($Snap.second $t@1625@01))))
(assert (= ($Snap.first $t@1625@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1564@01 2))))
(assert (= ($Snap.second $t@1625@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1564@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@1626@01 $Snap)
(assert (= $t@1626@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@1564@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1627@01 $Snap)
(assert (= $t@1627@01 ($Snap.combine ($Snap.first $t@1627@01) ($Snap.second $t@1627@01))))
(assert (= ($Snap.first $t@1627@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1564@01 4))))
(assert (= ($Snap.second $t@1627@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1564@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@1628@01 $Snap)
(assert (= $t@1628@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@1564@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1629@01 $Snap)
(assert (= $t@1629@01 ($Snap.combine ($Snap.first $t@1629@01) ($Snap.second $t@1629@01))))
(assert (= ($Snap.first $t@1629@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1563@01 0))))
(assert (= ($Snap.second $t@1629@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1563@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1630@01 $Snap)
(assert (= $t@1630@01 ($Snap.combine ($Snap.first $t@1630@01) ($Snap.second $t@1630@01))))
(assert (= ($Snap.first $t@1630@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1563@01 1))))
(assert (= ($Snap.second $t@1630@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1563@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1631@01 $Snap)
(assert (= $t@1631@01 ($Snap.combine ($Snap.first $t@1631@01) ($Snap.second $t@1631@01))))
(assert (= ($Snap.first $t@1631@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1563@01 2))))
(assert (= ($Snap.second $t@1631@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1563@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@1632@01 $Snap)
(assert (= $t@1632@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1563@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@1633@01 $Snap)
(assert (= $t@1633@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1563@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $a: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $t@1634@01 $Snap)
(assert (= $t@1634@01 $Snap.unit))
; [eval] (forall $a: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int))
(declare-const $a@1635@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int) >= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $a): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc(self, 3)): Seq[Int])
(declare-const $t@1636@01 $Snap)
(assert (= $t@1636@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@1637@01 $Snap)
(assert (= $t@1637@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1563@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $res := ($unwrap(l$element) in l$a)
; [eval] ($unwrap(l$element) in l$a)
; [eval] $unwrap(l$element)
(declare-const $res@1638@01 Bool)
(assert (= $res@1638@01 (Seq_contains l$a@1559@01 ($unwrap<Int> l$element@1560@01))))
; [exec]
; label return
; [exec]
; label end
; [exec]
; exhale l$a == Seq(1, 2, 3) && $unwrap(l$element) == 4 ==> $res
; [eval] l$a == Seq(1, 2, 3) && $unwrap(l$element) == 4 ==> $res
; [eval] l$a == Seq(1, 2, 3) && $unwrap(l$element) == 4
; [eval] l$a == Seq(1, 2, 3)
; [eval] Seq(1, 2, 3)
(assert (=
  (Seq_length
    (Seq_append
      (Seq_append (Seq_singleton 1) (Seq_singleton 2))
      (Seq_singleton 3)))
  3))
(set-option :timeout 0)
(push) ; 3
; [then-branch: 997 | !(l$a@1559@01 === [1] ++ [2] ++ [3]) | live]
; [else-branch: 997 | l$a@1559@01 === [1] ++ [2] ++ [3] | live]
(push) ; 4
; [then-branch: 997 | !(l$a@1559@01 === [1] ++ [2] ++ [3])]
(assert (not
  (Seq_equal
    l$a@1559@01
    (Seq_append
      (Seq_append (Seq_singleton 1) (Seq_singleton 2))
      (Seq_singleton 3)))))
(pop) ; 4
(push) ; 4
; [else-branch: 997 | l$a@1559@01 === [1] ++ [2] ++ [3]]
(assert (Seq_equal
  l$a@1559@01
  (Seq_append (Seq_append (Seq_singleton 1) (Seq_singleton 2)) (Seq_singleton 3))))
; [eval] $unwrap(l$element) == 4
; [eval] $unwrap(l$element)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (Seq_equal
    l$a@1559@01
    (Seq_append
      (Seq_append (Seq_singleton 1) (Seq_singleton 2))
      (Seq_singleton 3)))
  (not
    (Seq_equal
      l$a@1559@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3))))))
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (Seq_equal
      l$a@1559@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3)))
    (= ($unwrap<Int> l$element@1560@01) 4)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (Seq_equal
    l$a@1559@01
    (Seq_append
      (Seq_append (Seq_singleton 1) (Seq_singleton 2))
      (Seq_singleton 3)))
  (= ($unwrap<Int> l$element@1560@01) 4))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 998 | l$a@1559@01 === [1] ++ [2] ++ [3] && $unwrap[Int](l$element@1560@01) == 4 | live]
; [else-branch: 998 | !(l$a@1559@01 === [1] ++ [2] ++ [3] && $unwrap[Int](l$element@1560@01) == 4) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 998 | l$a@1559@01 === [1] ++ [2] ++ [3] && $unwrap[Int](l$element@1560@01) == 4]
(assert (and
  (Seq_equal
    l$a@1559@01
    (Seq_append
      (Seq_append (Seq_singleton 1) (Seq_singleton 2))
      (Seq_singleton 3)))
  (= ($unwrap<Int> l$element@1560@01) 4)))
(pop) ; 4
(push) ; 4
; [else-branch: 998 | !(l$a@1559@01 === [1] ++ [2] ++ [3] && $unwrap[Int](l$element@1560@01) == 4)]
(assert (not
  (and
    (Seq_equal
      l$a@1559@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3)))
    (= ($unwrap<Int> l$element@1560@01) 4))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (Seq_equal
        l$a@1559@01
        (Seq_append
          (Seq_append (Seq_singleton 1) (Seq_singleton 2))
          (Seq_singleton 3)))
      (= ($unwrap<Int> l$element@1560@01) 4)))
  (and
    (Seq_equal
      l$a@1559@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3)))
    (= ($unwrap<Int> l$element@1560@01) 4))))
(push) ; 3
(assert (not (=>
  (and
    (Seq_equal
      l$a@1559@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3)))
    (= ($unwrap<Int> l$element@1560@01) 4))
  $res@1638@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] l$a == Seq(1, 2, 3) && $unwrap(l$element) == 4 ==> $res
; [eval] l$a == Seq(1, 2, 3) && $unwrap(l$element) == 4
; [eval] l$a == Seq(1, 2, 3)
; [eval] Seq(1, 2, 3)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 999 | !(l$a@1559@01 === [1] ++ [2] ++ [3]) | live]
; [else-branch: 999 | l$a@1559@01 === [1] ++ [2] ++ [3] | live]
(push) ; 4
; [then-branch: 999 | !(l$a@1559@01 === [1] ++ [2] ++ [3])]
(assert (not
  (Seq_equal
    l$a@1559@01
    (Seq_append
      (Seq_append (Seq_singleton 1) (Seq_singleton 2))
      (Seq_singleton 3)))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 999 | l$a@1559@01 === [1] ++ [2] ++ [3]]
(assert (Seq_equal
  l$a@1559@01
  (Seq_append (Seq_append (Seq_singleton 1) (Seq_singleton 2)) (Seq_singleton 3))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $unwrap(l$element) == 4
; [eval] $unwrap(l$element)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (Seq_equal
      l$a@1559@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3)))
    (= ($unwrap<Int> l$element@1560@01) 4)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (Seq_equal
    l$a@1559@01
    (Seq_append
      (Seq_append (Seq_singleton 1) (Seq_singleton 2))
      (Seq_singleton 3)))
  (= ($unwrap<Int> l$element@1560@01) 4))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1000 | l$a@1559@01 === [1] ++ [2] ++ [3] && $unwrap[Int](l$element@1560@01) == 4 | live]
; [else-branch: 1000 | !(l$a@1559@01 === [1] ++ [2] ++ [3] && $unwrap[Int](l$element@1560@01) == 4) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1000 | l$a@1559@01 === [1] ++ [2] ++ [3] && $unwrap[Int](l$element@1560@01) == 4]
(assert (and
  (Seq_equal
    l$a@1559@01
    (Seq_append
      (Seq_append (Seq_singleton 1) (Seq_singleton 2))
      (Seq_singleton 3)))
  (= ($unwrap<Int> l$element@1560@01) 4)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 1000 | !(l$a@1559@01 === [1] ++ [2] ++ [3] && $unwrap[Int](l$element@1560@01) == 4)]
(assert (not
  (and
    (Seq_equal
      l$a@1559@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3)))
    (= ($unwrap<Int> l$element@1560@01) 4))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 3
(assert (not (=>
  (and
    (Seq_equal
      l$a@1559@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3)))
    (= ($unwrap<Int> l$element@1560@01) 4))
  $res@1638@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] l$a == Seq(1, 2, 3) && $unwrap(l$element) == 4 ==> $res
; [eval] l$a == Seq(1, 2, 3) && $unwrap(l$element) == 4
; [eval] l$a == Seq(1, 2, 3)
; [eval] Seq(1, 2, 3)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1001 | !(l$a@1559@01 === [1] ++ [2] ++ [3]) | live]
; [else-branch: 1001 | l$a@1559@01 === [1] ++ [2] ++ [3] | live]
(push) ; 4
; [then-branch: 1001 | !(l$a@1559@01 === [1] ++ [2] ++ [3])]
(assert (not
  (Seq_equal
    l$a@1559@01
    (Seq_append
      (Seq_append (Seq_singleton 1) (Seq_singleton 2))
      (Seq_singleton 3)))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 1001 | l$a@1559@01 === [1] ++ [2] ++ [3]]
(assert (Seq_equal
  l$a@1559@01
  (Seq_append (Seq_append (Seq_singleton 1) (Seq_singleton 2)) (Seq_singleton 3))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $unwrap(l$element) == 4
; [eval] $unwrap(l$element)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (Seq_equal
      l$a@1559@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3)))
    (= ($unwrap<Int> l$element@1560@01) 4)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (Seq_equal
    l$a@1559@01
    (Seq_append
      (Seq_append (Seq_singleton 1) (Seq_singleton 2))
      (Seq_singleton 3)))
  (= ($unwrap<Int> l$element@1560@01) 4))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1002 | l$a@1559@01 === [1] ++ [2] ++ [3] && $unwrap[Int](l$element@1560@01) == 4 | live]
; [else-branch: 1002 | !(l$a@1559@01 === [1] ++ [2] ++ [3] && $unwrap[Int](l$element@1560@01) == 4) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1002 | l$a@1559@01 === [1] ++ [2] ++ [3] && $unwrap[Int](l$element@1560@01) == 4]
(assert (and
  (Seq_equal
    l$a@1559@01
    (Seq_append
      (Seq_append (Seq_singleton 1) (Seq_singleton 2))
      (Seq_singleton 3)))
  (= ($unwrap<Int> l$element@1560@01) 4)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 1002 | !(l$a@1559@01 === [1] ++ [2] ++ [3] && $unwrap[Int](l$element@1560@01) == 4)]
(assert (not
  (and
    (Seq_equal
      l$a@1559@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3)))
    (= ($unwrap<Int> l$element@1560@01) 4))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 3
(assert (not (=>
  (and
    (Seq_equal
      l$a@1559@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3)))
    (= ($unwrap<Int> l$element@1560@01) 4))
  $res@1638@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] l$a == Seq(1, 2, 3) && $unwrap(l$element) == 4 ==> $res
; [eval] l$a == Seq(1, 2, 3) && $unwrap(l$element) == 4
; [eval] l$a == Seq(1, 2, 3)
; [eval] Seq(1, 2, 3)
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1003 | !(l$a@1559@01 === [1] ++ [2] ++ [3]) | live]
; [else-branch: 1003 | l$a@1559@01 === [1] ++ [2] ++ [3] | live]
(push) ; 4
; [then-branch: 1003 | !(l$a@1559@01 === [1] ++ [2] ++ [3])]
(assert (not
  (Seq_equal
    l$a@1559@01
    (Seq_append
      (Seq_append (Seq_singleton 1) (Seq_singleton 2))
      (Seq_singleton 3)))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 1003 | l$a@1559@01 === [1] ++ [2] ++ [3]]
(assert (Seq_equal
  l$a@1559@01
  (Seq_append (Seq_append (Seq_singleton 1) (Seq_singleton 2)) (Seq_singleton 3))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; [eval] $unwrap(l$element) == 4
; [eval] $unwrap(l$element)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not
  (and
    (Seq_equal
      l$a@1559@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3)))
    (= ($unwrap<Int> l$element@1560@01) 4)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (Seq_equal
    l$a@1559@01
    (Seq_append
      (Seq_append (Seq_singleton 1) (Seq_singleton 2))
      (Seq_singleton 3)))
  (= ($unwrap<Int> l$element@1560@01) 4))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1004 | l$a@1559@01 === [1] ++ [2] ++ [3] && $unwrap[Int](l$element@1560@01) == 4 | live]
; [else-branch: 1004 | !(l$a@1559@01 === [1] ++ [2] ++ [3] && $unwrap[Int](l$element@1560@01) == 4) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1004 | l$a@1559@01 === [1] ++ [2] ++ [3] && $unwrap[Int](l$element@1560@01) == 4]
(assert (and
  (Seq_equal
    l$a@1559@01
    (Seq_append
      (Seq_append (Seq_singleton 1) (Seq_singleton 2))
      (Seq_singleton 3)))
  (= ($unwrap<Int> l$element@1560@01) 4)))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 1004 | !(l$a@1559@01 === [1] ++ [2] ++ [3] && $unwrap[Int](l$element@1560@01) == 4)]
(assert (not
  (and
    (Seq_equal
      l$a@1559@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3)))
    (= ($unwrap<Int> l$element@1560@01) 4))))
; [state consolidation]
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(set-option :timeout 0)
(push) ; 3
(assert (not (=>
  (and
    (Seq_equal
      l$a@1559@01
      (Seq_append
        (Seq_append (Seq_singleton 1) (Seq_singleton 2))
        (Seq_singleton 3)))
    (= ($unwrap<Int> l$element@1560@01) 4))
  $res@1638@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
(pop) ; 1
; ---------- f$__init__ ----------
(declare-const $succ@1639@01 Bool)
(declare-const $succ@1640@01 Bool)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var msg: $Struct
(declare-const msg@1641@01 $Struct)
; [exec]
; var block: $Struct
(declare-const block@1642@01 $Struct)
; [exec]
; var chain: $Struct
(declare-const chain@1643@01 $Struct)
; [exec]
; var tx: $Struct
(declare-const tx@1644@01 $Struct)
; [exec]
; var self: $Struct
(declare-const self@1645@01 $Struct)
; [exec]
; var $contracts: $Map[Int, $Struct]
(declare-const $contracts@1646@01 $Map<Int~_$Struct>)
; [exec]
; var $old_self: $Struct
(declare-const $old_self@1647@01 $Struct)
; [exec]
; var $old_$contracts: $Map[Int, $Struct]
(declare-const $old_$contracts@1648@01 $Map<Int~_$Struct>)
; [exec]
; var $pre_self: $Struct
(declare-const $pre_self@1649@01 $Struct)
; [exec]
; var $pre_$contracts: $Map[Int, $Struct]
(declare-const $pre_$contracts@1650@01 $Map<Int~_$Struct>)
; [exec]
; var $issued_self: $Struct
(declare-const $issued_self@1651@01 $Struct)
; [exec]
; var $issued_$contracts: $Map[Int, $Struct]
(declare-const $issued_$contracts@1652@01 $Map<Int~_$Struct>)
; [exec]
; var $overflow: Bool
(declare-const $overflow@1653@01 Bool)
; [exec]
; var $first_public_state: Bool
(declare-const $first_public_state@1654@01 Bool)
; [exec]
; var l$havoc: Int
(declare-const l$havoc@1655@01 Int)
; [exec]
; var $out_of_gas: Bool
(declare-const $out_of_gas@1656@01 Bool)
; [exec]
; var l$havoc$1: Int
(declare-const l$havoc$1@1657@01 Int)
; [exec]
; var l$havoc$2: $Map[Int, $Struct]
(declare-const l$havoc$2@1658@01 $Map<Int~_$Struct>)
; [exec]
; inhale |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
(declare-const $t@1659@01 $Snap)
(assert (= $t@1659@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])| == 12
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 0))) 12))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q0: Int ::
;     { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] }
;     0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] &&
;     ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <=
;     170141183460469231731687303715884105727)
(declare-const $t@1660@01 $Snap)
(assert (= $t@1660@01 $Snap.unit))
; [eval] (forall $q0: Int :: { ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] } 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727)
(declare-const $q0@1661@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q0 && $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] 0 <= $q0
(push) ; 4
; [then-branch: 1005 | !(0 <= $q0@1661@01) | live]
; [else-branch: 1005 | 0 <= $q0@1661@01 | live]
(push) ; 5
; [then-branch: 1005 | !(0 <= $q0@1661@01)]
(assert (not (<= 0 $q0@1661@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 1005 | 0 <= $q0@1661@01]
(assert (<= 0 $q0@1661@01))
; [eval] $q0 < |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 0)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q0@1661@01) (not (<= 0 $q0@1661@01))))
(push) ; 4
; [then-branch: 1006 | 0 <= $q0@1661@01 && $q0@1661@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1645@01, 0))| | live]
; [else-branch: 1006 | !(0 <= $q0@1661@01 && $q0@1661@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1645@01, 0))|) | live]
(push) ; 5
; [then-branch: 1006 | 0 <= $q0@1661@01 && $q0@1661@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1645@01, 0))|]
(assert (and
  (<= 0 $q0@1661@01)
  (<
    $q0@1661@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 0))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] && ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 6
(assert (not (>= $q0@1661@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 1007 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1645@01, 0))[$q0@1661@01]) | live]
; [else-branch: 1007 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1645@01, 0))[$q0@1661@01] | live]
(push) ; 7
; [then-branch: 1007 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1645@01, 0))[$q0@1661@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 0))
      $q0@1661@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 1007 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1645@01, 0))[$q0@1661@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 0))
    $q0@1661@01)))
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])[$q0]
; [eval] ($struct_get($struct_loc(self, 0)): Seq[Int])
; [eval] $struct_loc(self, 0)
(push) ; 8
(assert (not (>= $q0@1661@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 0))
      $q0@1661@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 0))
        $q0@1661@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 1006 | !(0 <= $q0@1661@01 && $q0@1661@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1645@01, 0))|)]
(assert (not
  (and
    (<= 0 $q0@1661@01)
    (<
      $q0@1661@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 0)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q0@1661@01)
    (<
      $q0@1661@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 0)))))
  (and
    (<= 0 $q0@1661@01)
    (<
      $q0@1661@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 0))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 0))
          $q0@1661@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 0))
            $q0@1661@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q0@1661@01)
      (<
        $q0@1661@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 0))))))
  (and
    (<= 0 $q0@1661@01)
    (<
      $q0@1661@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 0)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q0@1661@01 Int)) (!
  (and
    (or (<= 0 $q0@1661@01) (not (<= 0 $q0@1661@01)))
    (=>
      (and
        (<= 0 $q0@1661@01)
        (<
          $q0@1661@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 0)))))
      (and
        (<= 0 $q0@1661@01)
        (<
          $q0@1661@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 0))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 0))
              $q0@1661@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 0))
                $q0@1661@01))))))
    (or
      (not
        (and
          (<= 0 $q0@1661@01)
          (<
            $q0@1661@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 0))))))
      (and
        (<= 0 $q0@1661@01)
        (<
          $q0@1661@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 0)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 0))
    $q0@1661@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2661@11@2661@346-aux|)))
(assert (forall (($q0@1661@01 Int)) (!
  (=>
    (and
      (<= 0 $q0@1661@01)
      (<
        $q0@1661@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 0)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 0))
          $q0@1661@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 0))
          $q0@1661@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 0))
    $q0@1661@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2661@11@2661@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
(declare-const $t@1662@01 $Snap)
(assert (= $t@1662@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(assert (=
  (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1)))
  12))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $t@1663@01 $Snap)
(assert (= $t@1663@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12)
(declare-const $q1@1664@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 1008 | !(0 <= $q1@1664@01) | live]
; [else-branch: 1008 | 0 <= $q1@1664@01 | live]
(push) ; 5
; [then-branch: 1008 | !(0 <= $q1@1664@01)]
(assert (not (<= 0 $q1@1664@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 1008 | 0 <= $q1@1664@01]
(assert (<= 0 $q1@1664@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@1664@01) (not (<= 0 $q1@1664@01))))
(push) ; 4
; [then-branch: 1009 | 0 <= $q1@1664@01 && $q1@1664@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1645@01, 1))| | live]
; [else-branch: 1009 | !(0 <= $q1@1664@01 && $q1@1664@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1645@01, 1))|) | live]
(push) ; 5
; [then-branch: 1009 | 0 <= $q1@1664@01 && $q1@1664@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1645@01, 1))|]
(assert (and
  (<= 0 $q1@1664@01)
  (<
    $q1@1664@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))))))
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| == 12
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 6
(assert (not (>= $q1@1664@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 1009 | !(0 <= $q1@1664@01 && $q1@1664@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1645@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@1664@01)
    (<
      $q1@1664@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@1664@01)
      (<
        $q1@1664@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))))))
  (and
    (<= 0 $q1@1664@01)
    (<
      $q1@1664@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@1664@01 Int)) (!
  (and
    (or (<= 0 $q1@1664@01) (not (<= 0 $q1@1664@01)))
    (or
      (not
        (and
          (<= 0 $q1@1664@01)
          (<
            $q1@1664@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))))))
      (and
        (<= 0 $q1@1664@01)
        (<
          $q1@1664@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
    $q1@1664@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2663@11@2663@228-aux|)))
(assert (forall (($q1@1664@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@1664@01)
      (<
        $q1@1664@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
          $q1@1664@01))
      12))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
    $q1@1664@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2663@11@2663@228|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q1: Int ::
;     { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] }
;     0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==>
;     (forall $q2: Int ::
;       { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] }
;       0 <= $q2 &&
;       $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==>
;       -170141183460469231731687303715884105728 <=
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] &&
;       ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <=
;       170141183460469231731687303715884105727))
(declare-const $t@1665@01 $Snap)
(assert (= $t@1665@01 $Snap.unit))
; [eval] (forall $q1: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1] } 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727))
(declare-const $q1@1666@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])| ==> (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q1 && $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] 0 <= $q1
(push) ; 4
; [then-branch: 1010 | !(0 <= $q1@1666@01) | live]
; [else-branch: 1010 | 0 <= $q1@1666@01 | live]
(push) ; 5
; [then-branch: 1010 | !(0 <= $q1@1666@01)]
(assert (not (<= 0 $q1@1666@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 1010 | 0 <= $q1@1666@01]
(assert (<= 0 $q1@1666@01))
; [eval] $q1 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q1@1666@01) (not (<= 0 $q1@1666@01))))
(push) ; 4
; [then-branch: 1011 | 0 <= $q1@1666@01 && $q1@1666@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1645@01, 1))| | live]
; [else-branch: 1011 | !(0 <= $q1@1666@01 && $q1@1666@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1645@01, 1))|) | live]
(push) ; 5
; [then-branch: 1011 | 0 <= $q1@1666@01 && $q1@1666@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1645@01, 1))|]
(assert (and
  (<= 0 $q1@1666@01)
  (<
    $q1@1666@01
    (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))))))
; [eval] (forall $q2: Int :: { ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] } 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727)
(declare-const $q2@1667@01 Int)
(push) ; 6
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q2 && $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] 0 <= $q2
(push) ; 7
; [then-branch: 1012 | !(0 <= $q2@1667@01) | live]
; [else-branch: 1012 | 0 <= $q2@1667@01 | live]
(push) ; 8
; [then-branch: 1012 | !(0 <= $q2@1667@01)]
(assert (not (<= 0 $q2@1667@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 1012 | 0 <= $q2@1667@01]
(assert (<= 0 $q2@1667@01))
; [eval] $q2 < |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] |($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]|
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@1666@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q2@1667@01) (not (<= 0 $q2@1667@01))))
(push) ; 7
; [then-branch: 1013 | 0 <= $q2@1667@01 && $q2@1667@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1645@01, 1))[$q1@1666@01]| | live]
; [else-branch: 1013 | !(0 <= $q2@1667@01 && $q2@1667@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1645@01, 1))[$q1@1666@01]|) | live]
(push) ; 8
; [then-branch: 1013 | 0 <= $q2@1667@01 && $q2@1667@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1645@01, 1))[$q1@1666@01]|]
(assert (and
  (<= 0 $q2@1667@01)
  (<
    $q2@1667@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
        $q1@1666@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] && ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 9
(assert (not (>= $q1@1666@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q2@1667@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
; [then-branch: 1014 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1645@01, 1))[$q1@1666@01][$q2@1667@01]) | live]
; [else-branch: 1014 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1645@01, 1))[$q1@1666@01][$q2@1667@01] | live]
(push) ; 10
; [then-branch: 1014 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1645@01, 1))[$q1@1666@01][$q2@1667@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
        $q1@1666@01)
      $q2@1667@01))))
(pop) ; 10
(push) ; 10
; [else-branch: 1014 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1645@01, 1))[$q1@1666@01][$q2@1667@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
      $q1@1666@01)
    $q2@1667@01)))
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1][$q2]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])[$q1]
; [eval] ($struct_get($struct_loc(self, 1)): Seq[Seq[Int]])
; [eval] $struct_loc(self, 1)
(push) ; 11
(assert (not (>= $q1@1666@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(push) ; 11
(assert (not (>= $q2@1667@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
        $q1@1666@01)
      $q2@1667@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
          $q1@1666@01)
        $q2@1667@01)))))
(pop) ; 8
(push) ; 8
; [else-branch: 1013 | !(0 <= $q2@1667@01 && $q2@1667@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1645@01, 1))[$q1@1666@01]|)]
(assert (not
  (and
    (<= 0 $q2@1667@01)
    (<
      $q2@1667@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
          $q1@1666@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q2@1667@01)
    (<
      $q2@1667@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
          $q1@1666@01))))
  (and
    (<= 0 $q2@1667@01)
    (<
      $q2@1667@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
          $q1@1666@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
            $q1@1666@01)
          $q2@1667@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
              $q1@1666@01)
            $q2@1667@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q2@1667@01)
      (<
        $q2@1667@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
            $q1@1666@01)))))
  (and
    (<= 0 $q2@1667@01)
    (<
      $q2@1667@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
          $q1@1666@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q2@1667@01 Int)) (!
  (and
    (or (<= 0 $q2@1667@01) (not (<= 0 $q2@1667@01)))
    (=>
      (and
        (<= 0 $q2@1667@01)
        (<
          $q2@1667@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
              $q1@1666@01))))
      (and
        (<= 0 $q2@1667@01)
        (<
          $q2@1667@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
              $q1@1666@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
                $q1@1666@01)
              $q2@1667@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
                  $q1@1666@01)
                $q2@1667@01))))))
    (or
      (not
        (and
          (<= 0 $q2@1667@01)
          (<
            $q2@1667@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
                $q1@1666@01)))))
      (and
        (<= 0 $q2@1667@01)
        (<
          $q2@1667@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
              $q1@1666@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
      $q1@1666@01)
    $q2@1667@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2664@166@2664@541-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 1011 | !(0 <= $q1@1666@01 && $q1@1666@01 < |$struct_get[Seq[Seq[Int]]]($struct_loc[Int](self@1645@01, 1))|)]
(assert (not
  (and
    (<= 0 $q1@1666@01)
    (<
      $q1@1666@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q1@1666@01)
    (<
      $q1@1666@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1)))))
  (and
    (<= 0 $q1@1666@01)
    (<
      $q1@1666@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))))
    (forall (($q2@1667@01 Int)) (!
      (and
        (or (<= 0 $q2@1667@01) (not (<= 0 $q2@1667@01)))
        (=>
          (and
            (<= 0 $q2@1667@01)
            (<
              $q2@1667@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
                  $q1@1666@01))))
          (and
            (<= 0 $q2@1667@01)
            (<
              $q2@1667@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
                  $q1@1666@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
                    $q1@1666@01)
                  $q2@1667@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
                      $q1@1666@01)
                    $q2@1667@01))))))
        (or
          (not
            (and
              (<= 0 $q2@1667@01)
              (<
                $q2@1667@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
                    $q1@1666@01)))))
          (and
            (<= 0 $q2@1667@01)
            (<
              $q2@1667@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
                  $q1@1666@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
          $q1@1666@01)
        $q2@1667@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2664@166@2664@541-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q1@1666@01)
      (<
        $q1@1666@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))))))
  (and
    (<= 0 $q1@1666@01)
    (<
      $q1@1666@01
      (Seq_length ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q1@1666@01 Int)) (!
  (and
    (or (<= 0 $q1@1666@01) (not (<= 0 $q1@1666@01)))
    (=>
      (and
        (<= 0 $q1@1666@01)
        (<
          $q1@1666@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1)))))
      (and
        (<= 0 $q1@1666@01)
        (<
          $q1@1666@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))))
        (forall (($q2@1667@01 Int)) (!
          (and
            (or (<= 0 $q2@1667@01) (not (<= 0 $q2@1667@01)))
            (=>
              (and
                (<= 0 $q2@1667@01)
                (<
                  $q2@1667@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
                      $q1@1666@01))))
              (and
                (<= 0 $q2@1667@01)
                (<
                  $q2@1667@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
                      $q1@1666@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
                        $q1@1666@01)
                      $q2@1667@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
                          $q1@1666@01)
                        $q2@1667@01))))))
            (or
              (not
                (and
                  (<= 0 $q2@1667@01)
                  (<
                    $q2@1667@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
                        $q1@1666@01)))))
              (and
                (<= 0 $q2@1667@01)
                (<
                  $q2@1667@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
                      $q1@1666@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
              $q1@1666@01)
            $q2@1667@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2664@166@2664@541-aux|))))
    (or
      (not
        (and
          (<= 0 $q1@1666@01)
          (<
            $q1@1666@01
            (Seq_length
              ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))))))
      (and
        (<= 0 $q1@1666@01)
        (<
          $q1@1666@01
          (Seq_length
            ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
    $q1@1666@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2664@11@2664@542-aux|)))
(assert (forall (($q1@1666@01 Int)) (!
  (=>
    (and
      (<= 0 $q1@1666@01)
      (<
        $q1@1666@01
        (Seq_length
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1)))))
    (forall (($q2@1667@01 Int)) (!
      (=>
        (and
          (<= 0 $q2@1667@01)
          (<
            $q2@1667@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
                $q1@1666@01))))
        (and
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
                $q1@1666@01)
              $q2@1667@01))
          (<=
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
                $q1@1666@01)
              $q2@1667@01)
            170141183460469231731687303715884105727)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
          $q1@1666@01)
        $q2@1667@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2664@166@2664@541|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Int>>> ($struct_loc<Int> self@1645@01 1))
    $q1@1666@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2664@11@2664@542|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
(declare-const $t@1668@01 $Snap)
(assert (= $t@1668@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(assert (=
  (Seq_length
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2)))
  2))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $t@1669@01 $Snap)
(assert (= $t@1669@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2)
(declare-const $q3@1670@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 1015 | !(0 <= $q3@1670@01) | live]
; [else-branch: 1015 | 0 <= $q3@1670@01 | live]
(push) ; 5
; [then-branch: 1015 | !(0 <= $q3@1670@01)]
(assert (not (<= 0 $q3@1670@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 1015 | 0 <= $q3@1670@01]
(assert (<= 0 $q3@1670@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1670@01) (not (<= 0 $q3@1670@01))))
(push) ; 4
; [then-branch: 1016 | 0 <= $q3@1670@01 && $q3@1670@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))| | live]
; [else-branch: 1016 | !(0 <= $q3@1670@01 && $q3@1670@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))|) | live]
(push) ; 5
; [then-branch: 1016 | 0 <= $q3@1670@01 && $q3@1670@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))|]
(assert (and
  (<= 0 $q3@1670@01)
  (<
    $q3@1670@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 6
(assert (not (>= $q3@1670@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 1016 | !(0 <= $q3@1670@01 && $q3@1670@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1670@01)
    (<
      $q3@1670@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1670@01)
      (<
        $q3@1670@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))))))
  (and
    (<= 0 $q3@1670@01)
    (<
      $q3@1670@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1670@01 Int)) (!
  (and
    (or (<= 0 $q3@1670@01) (not (<= 0 $q3@1670@01)))
    (or
      (not
        (and
          (<= 0 $q3@1670@01)
          (<
            $q3@1670@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))))))
      (and
        (<= 0 $q3@1670@01)
        (<
          $q3@1670@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
    $q3@1670@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2666@11@2666@242-aux|)))
(assert (forall (($q3@1670@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1670@01)
      (<
        $q3@1670@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2)))))
    (=
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
          $q3@1670@01))
      2))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
    $q3@1670@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2666@11@2666@242|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==
;       2))
(declare-const $t@1671@01 $Snap)
(assert (= $t@1671@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2))
(declare-const $q3@1672@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 1017 | !(0 <= $q3@1672@01) | live]
; [else-branch: 1017 | 0 <= $q3@1672@01 | live]
(push) ; 5
; [then-branch: 1017 | !(0 <= $q3@1672@01)]
(assert (not (<= 0 $q3@1672@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 1017 | 0 <= $q3@1672@01]
(assert (<= 0 $q3@1672@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1672@01) (not (<= 0 $q3@1672@01))))
(push) ; 4
; [then-branch: 1018 | 0 <= $q3@1672@01 && $q3@1672@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))| | live]
; [else-branch: 1018 | !(0 <= $q3@1672@01 && $q3@1672@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))|) | live]
(push) ; 5
; [then-branch: 1018 | 0 <= $q3@1672@01 && $q3@1672@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))|]
(assert (and
  (<= 0 $q3@1672@01)
  (<
    $q3@1672@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2)
(declare-const $q4@1673@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 1019 | !(0 <= $q4@1673@01) | live]
; [else-branch: 1019 | 0 <= $q4@1673@01 | live]
(push) ; 8
; [then-branch: 1019 | !(0 <= $q4@1673@01)]
(assert (not (<= 0 $q4@1673@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 1019 | 0 <= $q4@1673@01]
(assert (<= 0 $q4@1673@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1672@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@1673@01) (not (<= 0 $q4@1673@01))))
(push) ; 7
; [then-branch: 1020 | 0 <= $q4@1673@01 && $q4@1673@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))[$q3@1672@01]| | live]
; [else-branch: 1020 | !(0 <= $q4@1673@01 && $q4@1673@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))[$q3@1672@01]|) | live]
(push) ; 8
; [then-branch: 1020 | 0 <= $q4@1673@01 && $q4@1673@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))[$q3@1672@01]|]
(assert (and
  (<= 0 $q4@1673@01)
  (<
    $q4@1673@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
        $q3@1672@01)))))
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| == 2
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1672@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= $q4@1673@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [else-branch: 1020 | !(0 <= $q4@1673@01 && $q4@1673@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))[$q3@1672@01]|)]
(assert (not
  (and
    (<= 0 $q4@1673@01)
    (<
      $q4@1673@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
          $q3@1672@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@1673@01)
      (<
        $q4@1673@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
            $q3@1672@01)))))
  (and
    (<= 0 $q4@1673@01)
    (<
      $q4@1673@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
          $q3@1672@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1673@01 Int)) (!
  (and
    (or (<= 0 $q4@1673@01) (not (<= 0 $q4@1673@01)))
    (or
      (not
        (and
          (<= 0 $q4@1673@01)
          (<
            $q4@1673@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                $q3@1672@01)))))
      (and
        (<= 0 $q4@1673@01)
        (<
          $q4@1673@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
              $q3@1672@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
      $q3@1672@01)
    $q4@1673@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2667@176@2667@422-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 1018 | !(0 <= $q3@1672@01 && $q3@1672@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1672@01)
    (<
      $q3@1672@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@1672@01)
    (<
      $q3@1672@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2)))))
  (and
    (<= 0 $q3@1672@01)
    (<
      $q3@1672@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))))
    (forall (($q4@1673@01 Int)) (!
      (and
        (or (<= 0 $q4@1673@01) (not (<= 0 $q4@1673@01)))
        (or
          (not
            (and
              (<= 0 $q4@1673@01)
              (<
                $q4@1673@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                    $q3@1672@01)))))
          (and
            (<= 0 $q4@1673@01)
            (<
              $q4@1673@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                  $q3@1672@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
          $q3@1672@01)
        $q4@1673@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2667@176@2667@422-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1672@01)
      (<
        $q3@1672@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))))))
  (and
    (<= 0 $q3@1672@01)
    (<
      $q3@1672@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1672@01 Int)) (!
  (and
    (or (<= 0 $q3@1672@01) (not (<= 0 $q3@1672@01)))
    (=>
      (and
        (<= 0 $q3@1672@01)
        (<
          $q3@1672@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2)))))
      (and
        (<= 0 $q3@1672@01)
        (<
          $q3@1672@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))))
        (forall (($q4@1673@01 Int)) (!
          (and
            (or (<= 0 $q4@1673@01) (not (<= 0 $q4@1673@01)))
            (or
              (not
                (and
                  (<= 0 $q4@1673@01)
                  (<
                    $q4@1673@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                        $q3@1672@01)))))
              (and
                (<= 0 $q4@1673@01)
                (<
                  $q4@1673@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                      $q3@1672@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
              $q3@1672@01)
            $q4@1673@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2667@176@2667@422-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@1672@01)
          (<
            $q3@1672@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))))))
      (and
        (<= 0 $q3@1672@01)
        (<
          $q3@1672@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
    $q3@1672@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2667@11@2667@423-aux|)))
(assert (forall (($q3@1672@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1672@01)
      (<
        $q3@1672@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2)))))
    (forall (($q4@1673@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@1673@01)
          (<
            $q4@1673@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                $q3@1672@01))))
        (=
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                $q3@1672@01)
              $q4@1673@01))
          2))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
          $q3@1672@01)
        $q4@1673@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2667@176@2667@422|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
    $q3@1672@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2667@11@2667@423|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q3: Int ::
;     { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] }
;     0 <= $q3 &&
;     $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==>
;     (forall $q4: Int ::
;       { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] }
;       0 <= $q4 &&
;       $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==>
;       (forall $q5: Int ::
;         { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] }
;         0 <= $q5 &&
;         $q5 <
;         |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==>
;         -170141183460469231731687303715884105728 <=
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] &&
;         ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <=
;         170141183460469231731687303715884105727)))
(declare-const $t@1674@01 $Snap)
(assert (= $t@1674@01 $Snap.unit))
; [eval] (forall $q3: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3] } 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)))
(declare-const $q3@1675@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])| ==> (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
; [eval] 0 <= $q3 && $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] 0 <= $q3
(push) ; 4
; [then-branch: 1021 | !(0 <= $q3@1675@01) | live]
; [else-branch: 1021 | 0 <= $q3@1675@01 | live]
(push) ; 5
; [then-branch: 1021 | !(0 <= $q3@1675@01)]
(assert (not (<= 0 $q3@1675@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 1021 | 0 <= $q3@1675@01]
(assert (<= 0 $q3@1675@01))
; [eval] $q3 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q3@1675@01) (not (<= 0 $q3@1675@01))))
(push) ; 4
; [then-branch: 1022 | 0 <= $q3@1675@01 && $q3@1675@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))| | live]
; [else-branch: 1022 | !(0 <= $q3@1675@01 && $q3@1675@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))|) | live]
(push) ; 5
; [then-branch: 1022 | 0 <= $q3@1675@01 && $q3@1675@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))|]
(assert (and
  (<= 0 $q3@1675@01)
  (<
    $q3@1675@01
    (Seq_length
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))))))
; [eval] (forall $q4: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4] } 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727))
(declare-const $q4@1676@01 Int)
(push) ; 6
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]| ==> (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
; [eval] 0 <= $q4 && $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] 0 <= $q4
(push) ; 7
; [then-branch: 1023 | !(0 <= $q4@1676@01) | live]
; [else-branch: 1023 | 0 <= $q4@1676@01 | live]
(push) ; 8
; [then-branch: 1023 | !(0 <= $q4@1676@01)]
(assert (not (<= 0 $q4@1676@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 1023 | 0 <= $q4@1676@01]
(assert (<= 0 $q4@1676@01))
; [eval] $q4 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 9
(assert (not (>= $q3@1675@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q4@1676@01) (not (<= 0 $q4@1676@01))))
(push) ; 7
; [then-branch: 1024 | 0 <= $q4@1676@01 && $q4@1676@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))[$q3@1675@01]| | live]
; [else-branch: 1024 | !(0 <= $q4@1676@01 && $q4@1676@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))[$q3@1675@01]|) | live]
(push) ; 8
; [then-branch: 1024 | 0 <= $q4@1676@01 && $q4@1676@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))[$q3@1675@01]|]
(assert (and
  (<= 0 $q4@1676@01)
  (<
    $q4@1676@01
    (Seq_length
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
        $q3@1675@01)))))
; [eval] (forall $q5: Int :: { ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] } 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727)
(declare-const $q5@1677@01 Int)
(push) ; 9
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q5 && $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] 0 <= $q5
(push) ; 10
; [then-branch: 1025 | !(0 <= $q5@1677@01) | live]
; [else-branch: 1025 | 0 <= $q5@1677@01 | live]
(push) ; 11
; [then-branch: 1025 | !(0 <= $q5@1677@01)]
(assert (not (<= 0 $q5@1677@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 1025 | 0 <= $q5@1677@01]
(assert (<= 0 $q5@1677@01))
; [eval] $q5 < |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] |($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]|
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@1675@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@1676@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q5@1677@01) (not (<= 0 $q5@1677@01))))
(push) ; 10
; [then-branch: 1026 | 0 <= $q5@1677@01 && $q5@1677@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))[$q3@1675@01][$q4@1676@01]| | live]
; [else-branch: 1026 | !(0 <= $q5@1677@01 && $q5@1677@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))[$q3@1675@01][$q4@1676@01]|) | live]
(push) ; 11
; [then-branch: 1026 | 0 <= $q5@1677@01 && $q5@1677@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))[$q3@1675@01][$q4@1676@01]|]
(assert (and
  (<= 0 $q5@1677@01)
  (<
    $q5@1677@01
    (Seq_length
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
          $q3@1675@01)
        $q4@1676@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] && ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 12
(assert (not (>= $q3@1675@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q4@1676@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= $q5@1677@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
; [then-branch: 1027 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))[$q3@1675@01][$q4@1676@01][$q5@1677@01]) | live]
; [else-branch: 1027 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))[$q3@1675@01][$q4@1676@01][$q5@1677@01] | live]
(push) ; 13
; [then-branch: 1027 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))[$q3@1675@01][$q4@1676@01][$q5@1677@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
          $q3@1675@01)
        $q4@1676@01)
      $q5@1677@01))))
(pop) ; 13
(push) ; 13
; [else-branch: 1027 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))[$q3@1675@01][$q4@1676@01][$q5@1677@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
        $q3@1675@01)
      $q4@1676@01)
    $q5@1677@01)))
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4][$q5]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3][$q4]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])[$q3]
; [eval] ($struct_get($struct_loc(self, 2)): Seq[Seq[Seq[Int]]])
; [eval] $struct_loc(self, 2)
(push) ; 14
(assert (not (>= $q3@1675@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q4@1676@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (>= $q5@1677@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      (Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
          $q3@1675@01)
        $q4@1676@01)
      $q5@1677@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
            $q3@1675@01)
          $q4@1676@01)
        $q5@1677@01)))))
(pop) ; 11
(push) ; 11
; [else-branch: 1026 | !(0 <= $q5@1677@01 && $q5@1677@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))[$q3@1675@01][$q4@1676@01]|)]
(assert (not
  (and
    (<= 0 $q5@1677@01)
    (<
      $q5@1677@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
            $q3@1675@01)
          $q4@1676@01))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q5@1677@01)
    (<
      $q5@1677@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
            $q3@1675@01)
          $q4@1676@01))))
  (and
    (<= 0 $q5@1677@01)
    (<
      $q5@1677@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
            $q3@1675@01)
          $q4@1676@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
              $q3@1675@01)
            $q4@1676@01)
          $q5@1677@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                $q3@1675@01)
              $q4@1676@01)
            $q5@1677@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q5@1677@01)
      (<
        $q5@1677@01
        (Seq_length
          (Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
              $q3@1675@01)
            $q4@1676@01)))))
  (and
    (<= 0 $q5@1677@01)
    (<
      $q5@1677@01
      (Seq_length
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
            $q3@1675@01)
          $q4@1676@01))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q5@1677@01 Int)) (!
  (and
    (or (<= 0 $q5@1677@01) (not (<= 0 $q5@1677@01)))
    (=>
      (and
        (<= 0 $q5@1677@01)
        (<
          $q5@1677@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                $q3@1675@01)
              $q4@1676@01))))
      (and
        (<= 0 $q5@1677@01)
        (<
          $q5@1677@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                $q3@1675@01)
              $q4@1676@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                  $q3@1675@01)
                $q4@1676@01)
              $q5@1677@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                    $q3@1675@01)
                  $q4@1676@01)
                $q5@1677@01))))))
    (or
      (not
        (and
          (<= 0 $q5@1677@01)
          (<
            $q5@1677@01
            (Seq_length
              (Seq_index
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                  $q3@1675@01)
                $q4@1676@01)))))
      (and
        (<= 0 $q5@1677@01)
        (<
          $q5@1677@01
          (Seq_length
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                $q3@1675@01)
              $q4@1676@01))))))
  :pattern ((Seq_index
    (Seq_index
      (Seq_index
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
        $q3@1675@01)
      $q4@1676@01)
    $q5@1677@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2668@351@2668@766-aux|)))
(pop) ; 8
(push) ; 8
; [else-branch: 1024 | !(0 <= $q4@1676@01 && $q4@1676@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))[$q3@1675@01]|)]
(assert (not
  (and
    (<= 0 $q4@1676@01)
    (<
      $q4@1676@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
          $q3@1675@01))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q4@1676@01)
    (<
      $q4@1676@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
          $q3@1675@01))))
  (and
    (<= 0 $q4@1676@01)
    (<
      $q4@1676@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
          $q3@1675@01)))
    (forall (($q5@1677@01 Int)) (!
      (and
        (or (<= 0 $q5@1677@01) (not (<= 0 $q5@1677@01)))
        (=>
          (and
            (<= 0 $q5@1677@01)
            (<
              $q5@1677@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                    $q3@1675@01)
                  $q4@1676@01))))
          (and
            (<= 0 $q5@1677@01)
            (<
              $q5@1677@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                    $q3@1675@01)
                  $q4@1676@01)))
            (or
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                      $q3@1675@01)
                    $q4@1676@01)
                  $q5@1677@01))
              (not
                (<=
                  (- 0 170141183460469231731687303715884105728)
                  (Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                        $q3@1675@01)
                      $q4@1676@01)
                    $q5@1677@01))))))
        (or
          (not
            (and
              (<= 0 $q5@1677@01)
              (<
                $q5@1677@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                      $q3@1675@01)
                    $q4@1676@01)))))
          (and
            (<= 0 $q5@1677@01)
            (<
              $q5@1677@01
              (Seq_length
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                    $q3@1675@01)
                  $q4@1676@01))))))
      :pattern ((Seq_index
        (Seq_index
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
            $q3@1675@01)
          $q4@1676@01)
        $q5@1677@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2668@351@2668@766-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q4@1676@01)
      (<
        $q4@1676@01
        (Seq_length
          (Seq_index
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
            $q3@1675@01)))))
  (and
    (<= 0 $q4@1676@01)
    (<
      $q4@1676@01
      (Seq_length
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
          $q3@1675@01))))))
(pop) ; 6
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q4@1676@01 Int)) (!
  (and
    (or (<= 0 $q4@1676@01) (not (<= 0 $q4@1676@01)))
    (=>
      (and
        (<= 0 $q4@1676@01)
        (<
          $q4@1676@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
              $q3@1675@01))))
      (and
        (<= 0 $q4@1676@01)
        (<
          $q4@1676@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
              $q3@1675@01)))
        (forall (($q5@1677@01 Int)) (!
          (and
            (or (<= 0 $q5@1677@01) (not (<= 0 $q5@1677@01)))
            (=>
              (and
                (<= 0 $q5@1677@01)
                (<
                  $q5@1677@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                        $q3@1675@01)
                      $q4@1676@01))))
              (and
                (<= 0 $q5@1677@01)
                (<
                  $q5@1677@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                        $q3@1675@01)
                      $q4@1676@01)))
                (or
                  (<=
                    (- 0 170141183460469231731687303715884105728)
                    (Seq_index
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                          $q3@1675@01)
                        $q4@1676@01)
                      $q5@1677@01))
                  (not
                    (<=
                      (- 0 170141183460469231731687303715884105728)
                      (Seq_index
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                            $q3@1675@01)
                          $q4@1676@01)
                        $q5@1677@01))))))
            (or
              (not
                (and
                  (<= 0 $q5@1677@01)
                  (<
                    $q5@1677@01
                    (Seq_length
                      (Seq_index
                        (Seq_index
                          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                          $q3@1675@01)
                        $q4@1676@01)))))
              (and
                (<= 0 $q5@1677@01)
                (<
                  $q5@1677@01
                  (Seq_length
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                        $q3@1675@01)
                      $q4@1676@01))))))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                $q3@1675@01)
              $q4@1676@01)
            $q5@1677@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2668@351@2668@766-aux|))))
    (or
      (not
        (and
          (<= 0 $q4@1676@01)
          (<
            $q4@1676@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                $q3@1675@01)))))
      (and
        (<= 0 $q4@1676@01)
        (<
          $q4@1676@01
          (Seq_length
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
              $q3@1675@01))))))
  :pattern ((Seq_index
    (Seq_index
      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
      $q3@1675@01)
    $q4@1676@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2668@176@2668@767-aux|)))
(pop) ; 5
(push) ; 5
; [else-branch: 1022 | !(0 <= $q3@1675@01 && $q3@1675@01 < |$struct_get[Seq[Seq[Seq[Int]]]]($struct_loc[Int](self@1645@01, 2))|)]
(assert (not
  (and
    (<= 0 $q3@1675@01)
    (<
      $q3@1675@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q3@1675@01)
    (<
      $q3@1675@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2)))))
  (and
    (<= 0 $q3@1675@01)
    (<
      $q3@1675@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))))
    (forall (($q4@1676@01 Int)) (!
      (and
        (or (<= 0 $q4@1676@01) (not (<= 0 $q4@1676@01)))
        (=>
          (and
            (<= 0 $q4@1676@01)
            (<
              $q4@1676@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                  $q3@1675@01))))
          (and
            (<= 0 $q4@1676@01)
            (<
              $q4@1676@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                  $q3@1675@01)))
            (forall (($q5@1677@01 Int)) (!
              (and
                (or (<= 0 $q5@1677@01) (not (<= 0 $q5@1677@01)))
                (=>
                  (and
                    (<= 0 $q5@1677@01)
                    (<
                      $q5@1677@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                            $q3@1675@01)
                          $q4@1676@01))))
                  (and
                    (<= 0 $q5@1677@01)
                    (<
                      $q5@1677@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                            $q3@1675@01)
                          $q4@1676@01)))
                    (or
                      (<=
                        (- 0 170141183460469231731687303715884105728)
                        (Seq_index
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                              $q3@1675@01)
                            $q4@1676@01)
                          $q5@1677@01))
                      (not
                        (<=
                          (- 0 170141183460469231731687303715884105728)
                          (Seq_index
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                                $q3@1675@01)
                              $q4@1676@01)
                            $q5@1677@01))))))
                (or
                  (not
                    (and
                      (<= 0 $q5@1677@01)
                      (<
                        $q5@1677@01
                        (Seq_length
                          (Seq_index
                            (Seq_index
                              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                              $q3@1675@01)
                            $q4@1676@01)))))
                  (and
                    (<= 0 $q5@1677@01)
                    (<
                      $q5@1677@01
                      (Seq_length
                        (Seq_index
                          (Seq_index
                            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                            $q3@1675@01)
                          $q4@1676@01))))))
              :pattern ((Seq_index
                (Seq_index
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                    $q3@1675@01)
                  $q4@1676@01)
                $q5@1677@01))
              :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2668@351@2668@766-aux|))))
        (or
          (not
            (and
              (<= 0 $q4@1676@01)
              (<
                $q4@1676@01
                (Seq_length
                  (Seq_index
                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                    $q3@1675@01)))))
          (and
            (<= 0 $q4@1676@01)
            (<
              $q4@1676@01
              (Seq_length
                (Seq_index
                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                  $q3@1675@01))))))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
          $q3@1675@01)
        $q4@1676@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2668@176@2668@767-aux|)))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q3@1675@01)
      (<
        $q3@1675@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))))))
  (and
    (<= 0 $q3@1675@01)
    (<
      $q3@1675@01
      (Seq_length
        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q3@1675@01 Int)) (!
  (and
    (or (<= 0 $q3@1675@01) (not (<= 0 $q3@1675@01)))
    (=>
      (and
        (<= 0 $q3@1675@01)
        (<
          $q3@1675@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2)))))
      (and
        (<= 0 $q3@1675@01)
        (<
          $q3@1675@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))))
        (forall (($q4@1676@01 Int)) (!
          (and
            (or (<= 0 $q4@1676@01) (not (<= 0 $q4@1676@01)))
            (=>
              (and
                (<= 0 $q4@1676@01)
                (<
                  $q4@1676@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                      $q3@1675@01))))
              (and
                (<= 0 $q4@1676@01)
                (<
                  $q4@1676@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                      $q3@1675@01)))
                (forall (($q5@1677@01 Int)) (!
                  (and
                    (or (<= 0 $q5@1677@01) (not (<= 0 $q5@1677@01)))
                    (=>
                      (and
                        (<= 0 $q5@1677@01)
                        (<
                          $q5@1677@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                                $q3@1675@01)
                              $q4@1676@01))))
                      (and
                        (<= 0 $q5@1677@01)
                        (<
                          $q5@1677@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                                $q3@1675@01)
                              $q4@1676@01)))
                        (or
                          (<=
                            (- 0 170141183460469231731687303715884105728)
                            (Seq_index
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                                  $q3@1675@01)
                                $q4@1676@01)
                              $q5@1677@01))
                          (not
                            (<=
                              (- 0 170141183460469231731687303715884105728)
                              (Seq_index
                                (Seq_index
                                  (Seq_index
                                    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                                    $q3@1675@01)
                                  $q4@1676@01)
                                $q5@1677@01))))))
                    (or
                      (not
                        (and
                          (<= 0 $q5@1677@01)
                          (<
                            $q5@1677@01
                            (Seq_length
                              (Seq_index
                                (Seq_index
                                  ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                                  $q3@1675@01)
                                $q4@1676@01)))))
                      (and
                        (<= 0 $q5@1677@01)
                        (<
                          $q5@1677@01
                          (Seq_length
                            (Seq_index
                              (Seq_index
                                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                                $q3@1675@01)
                              $q4@1676@01))))))
                  :pattern ((Seq_index
                    (Seq_index
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                        $q3@1675@01)
                      $q4@1676@01)
                    $q5@1677@01))
                  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2668@351@2668@766-aux|))))
            (or
              (not
                (and
                  (<= 0 $q4@1676@01)
                  (<
                    $q4@1676@01
                    (Seq_length
                      (Seq_index
                        ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                        $q3@1675@01)))))
              (and
                (<= 0 $q4@1676@01)
                (<
                  $q4@1676@01
                  (Seq_length
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                      $q3@1675@01))))))
          :pattern ((Seq_index
            (Seq_index
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
              $q3@1675@01)
            $q4@1676@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2668@176@2668@767-aux|))))
    (or
      (not
        (and
          (<= 0 $q3@1675@01)
          (<
            $q3@1675@01
            (Seq_length
              ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))))))
      (and
        (<= 0 $q3@1675@01)
        (<
          $q3@1675@01
          (Seq_length
            ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
    $q3@1675@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2668@11@2668@768-aux|)))
(assert (forall (($q3@1675@01 Int)) (!
  (=>
    (and
      (<= 0 $q3@1675@01)
      (<
        $q3@1675@01
        (Seq_length
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2)))))
    (forall (($q4@1676@01 Int)) (!
      (=>
        (and
          (<= 0 $q4@1676@01)
          (<
            $q4@1676@01
            (Seq_length
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                $q3@1675@01))))
        (forall (($q5@1677@01 Int)) (!
          (=>
            (and
              (<= 0 $q5@1677@01)
              (<
                $q5@1677@01
                (Seq_length
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                      $q3@1675@01)
                    $q4@1676@01))))
            (and
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                      $q3@1675@01)
                    $q4@1676@01)
                  $q5@1677@01))
              (<=
                (Seq_index
                  (Seq_index
                    (Seq_index
                      ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                      $q3@1675@01)
                    $q4@1676@01)
                  $q5@1677@01)
                170141183460469231731687303715884105727)))
          :pattern ((Seq_index
            (Seq_index
              (Seq_index
                ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
                $q3@1675@01)
              $q4@1676@01)
            $q5@1677@01))
          :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2668@351@2668@766|)))
      :pattern ((Seq_index
        (Seq_index
          ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
          $q3@1675@01)
        $q4@1676@01))
      :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2668@176@2668@767|)))
  :pattern ((Seq_index
    ($struct_get<Seq<Seq<Seq<Int>>>> ($struct_loc<Int> self@1645@01 2))
    $q3@1675@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2668@11@2668@768|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
(declare-const $t@1678@01 $Snap)
(assert (= $t@1678@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])| == 1000
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 3))) 1000))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q6: Int ::
;     { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] }
;     0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==>
;     -170141183460469231731687303715884105728 <=
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] &&
;     ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <=
;     170141183460469231731687303715884105727)
(declare-const $t@1679@01 $Snap)
(assert (= $t@1679@01 $Snap.unit))
; [eval] (forall $q6: Int :: { ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] } 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727)
(declare-const $q6@1680@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q6 && $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] 0 <= $q6
(push) ; 4
; [then-branch: 1028 | !(0 <= $q6@1680@01) | live]
; [else-branch: 1028 | 0 <= $q6@1680@01 | live]
(push) ; 5
; [then-branch: 1028 | !(0 <= $q6@1680@01)]
(assert (not (<= 0 $q6@1680@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 1028 | 0 <= $q6@1680@01]
(assert (<= 0 $q6@1680@01))
; [eval] $q6 < |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] |($struct_get($struct_loc(self, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q6@1680@01) (not (<= 0 $q6@1680@01))))
(push) ; 4
; [then-branch: 1029 | 0 <= $q6@1680@01 && $q6@1680@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1645@01, 3))| | live]
; [else-branch: 1029 | !(0 <= $q6@1680@01 && $q6@1680@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1645@01, 3))|) | live]
(push) ; 5
; [then-branch: 1029 | 0 <= $q6@1680@01 && $q6@1680@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1645@01, 3))|]
(assert (and
  (<= 0 $q6@1680@01)
  (<
    $q6@1680@01
    (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 3))))))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] && ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 6
(assert (not (>= $q6@1680@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
; [then-branch: 1030 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1645@01, 3))[$q6@1680@01]) | live]
; [else-branch: 1030 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1645@01, 3))[$q6@1680@01] | live]
(push) ; 7
; [then-branch: 1030 | !(-170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1645@01, 3))[$q6@1680@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 3))
      $q6@1680@01))))
(pop) ; 7
(push) ; 7
; [else-branch: 1030 | -170141183460469231731687303715884105728 <= $struct_get[Seq[Int]]($struct_loc[Int](self@1645@01, 3))[$q6@1680@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 3))
    $q6@1680@01)))
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6] <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])[$q6]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
(push) ; 8
(assert (not (>= $q6@1680@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 3))
      $q6@1680@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 3))
        $q6@1680@01)))))
(pop) ; 5
(push) ; 5
; [else-branch: 1029 | !(0 <= $q6@1680@01 && $q6@1680@01 < |$struct_get[Seq[Int]]($struct_loc[Int](self@1645@01, 3))|)]
(assert (not
  (and
    (<= 0 $q6@1680@01)
    (<
      $q6@1680@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q6@1680@01)
    (<
      $q6@1680@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 3)))))
  (and
    (<= 0 $q6@1680@01)
    (<
      $q6@1680@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 3))))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 3))
          $q6@1680@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 3))
            $q6@1680@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q6@1680@01)
      (<
        $q6@1680@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 3))))))
  (and
    (<= 0 $q6@1680@01)
    (<
      $q6@1680@01
      (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q6@1680@01 Int)) (!
  (and
    (or (<= 0 $q6@1680@01) (not (<= 0 $q6@1680@01)))
    (=>
      (and
        (<= 0 $q6@1680@01)
        (<
          $q6@1680@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 3)))))
      (and
        (<= 0 $q6@1680@01)
        (<
          $q6@1680@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 3))))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 3))
              $q6@1680@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 3))
                $q6@1680@01))))))
    (or
      (not
        (and
          (<= 0 $q6@1680@01)
          (<
            $q6@1680@01
            (Seq_length
              ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 3))))))
      (and
        (<= 0 $q6@1680@01)
        (<
          $q6@1680@01
          (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 3)))))))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 3))
    $q6@1680@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2670@11@2670@346-aux|)))
(assert (forall (($q6@1680@01 Int)) (!
  (=>
    (and
      (<= 0 $q6@1680@01)
      (<
        $q6@1680@01
        (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 3)))))
    (and
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 3))
          $q6@1680@01))
      (<=
        (Seq_index
          ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 3))
          $q6@1680@01)
        170141183460469231731687303715884105727)))
  :pattern ((Seq_index
    ($struct_get<Seq<Int>> ($struct_loc<Int> self@1645@01 3))
    $q6@1680@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2670@11@2670@346|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==
;     10)
(declare-const $t@1681@01 $Snap)
(assert (= $t@1681@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10)
(declare-const $q7@1682@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| == 10
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1682@01 Int)) (!
  (=
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1682@01))
    10)
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1682@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2671@11@2671@209|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q7: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) }
;     (forall $q8: Int ::
;       { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]),
;       $q7): Seq[Int])[$q8] }
;       0 <= $q8 &&
;       $q8 <
;       |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==>
;       -170141183460469231731687303715884105728 <=
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] &&
;       ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <=
;       170141183460469231731687303715884105727))
(declare-const $t@1683@01 $Snap)
(assert (= $t@1683@01 $Snap.unit))
; [eval] (forall $q7: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int]) } (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727))
(declare-const $q7@1684@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (forall $q8: Int :: { ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] } 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727)
(declare-const $q8@1685@01 Int)
(push) ; 4
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])| ==> -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] 0 <= $q8 && $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] 0 <= $q8
(push) ; 5
; [then-branch: 1031 | !(0 <= $q8@1685@01) | live]
; [else-branch: 1031 | 0 <= $q8@1685@01 | live]
(push) ; 6
; [then-branch: 1031 | !(0 <= $q8@1685@01)]
(assert (not (<= 0 $q8@1685@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 1031 | 0 <= $q8@1685@01]
(assert (<= 0 $q8@1685@01))
; [eval] $q8 < |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] |($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])|
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 $q8@1685@01) (not (<= 0 $q8@1685@01))))
(push) ; 5
; [then-branch: 1032 | 0 <= $q8@1685@01 && $q8@1685@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1645@01, 4)), $q7@1684@01)| | live]
; [else-branch: 1032 | !(0 <= $q8@1685@01 && $q8@1685@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1645@01, 4)), $q7@1684@01)|) | live]
(push) ; 6
; [then-branch: 1032 | 0 <= $q8@1685@01 && $q8@1685@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1645@01, 4)), $q7@1684@01)|]
(assert (and
  (<= 0 $q8@1685@01)
  (<
    $q8@1685@01
    (Seq_length
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01)))))
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] && ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] -170141183460469231731687303715884105728 <= ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] -170141183460469231731687303715884105728
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 7
(assert (not (>= $q8@1685@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
; [then-branch: 1033 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1645@01, 4)), $q7@1684@01)[$q8@1685@01]) | live]
; [else-branch: 1033 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1645@01, 4)), $q7@1684@01)[$q8@1685@01] | live]
(push) ; 8
; [then-branch: 1033 | !(-170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1645@01, 4)), $q7@1684@01)[$q8@1685@01])]
(assert (not
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01)
      $q8@1685@01))))
(pop) ; 8
(push) ; 8
; [else-branch: 1033 | -170141183460469231731687303715884105728 <= $map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1645@01, 4)), $q7@1684@01)[$q8@1685@01]]
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  (Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01)
    $q8@1685@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8] <= 170141183460469231731687303715884105727
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])[$q8]
; [eval] ($map_get(($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]]), $q7): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 4)): $Map[Int, Seq[Int]])
; [eval] $struct_loc(self, 4)
(push) ; 9
(assert (not (>= $q8@1685@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    (- 0 170141183460469231731687303715884105728)
    (Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01)
      $q8@1685@01))
  (not
    (<=
      (- 0 170141183460469231731687303715884105728)
      (Seq_index
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01)
        $q8@1685@01)))))
(pop) ; 6
(push) ; 6
; [else-branch: 1032 | !(0 <= $q8@1685@01 && $q8@1685@01 < |$map_get[Seq[Int]]($struct_get[$Map[Int, Seq[Int]]]($struct_loc[Int](self@1645@01, 4)), $q7@1684@01)|)]
(assert (not
  (and
    (<= 0 $q8@1685@01)
    (<
      $q8@1685@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 $q8@1685@01)
    (<
      $q8@1685@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01))))
  (and
    (<= 0 $q8@1685@01)
    (<
      $q8@1685@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01)))
    (or
      (<=
        (- 0 170141183460469231731687303715884105728)
        (Seq_index
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01)
          $q8@1685@01))
      (not
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01)
            $q8@1685@01)))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 $q8@1685@01)
      (<
        $q8@1685@01
        (Seq_length
          ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01)))))
  (and
    (<= 0 $q8@1685@01)
    (<
      $q8@1685@01
      (Seq_length
        ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q8@1685@01 Int)) (!
  (and
    (or (<= 0 $q8@1685@01) (not (<= 0 $q8@1685@01)))
    (=>
      (and
        (<= 0 $q8@1685@01)
        (<
          $q8@1685@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01))))
      (and
        (<= 0 $q8@1685@01)
        (<
          $q8@1685@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01)))
        (or
          (<=
            (- 0 170141183460469231731687303715884105728)
            (Seq_index
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01)
              $q8@1685@01))
          (not
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01)
                $q8@1685@01))))))
    (or
      (not
        (and
          (<= 0 $q8@1685@01)
          (<
            $q8@1685@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01)))))
      (and
        (<= 0 $q8@1685@01)
        (<
          $q8@1685@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01))))))
  :pattern ((Seq_index
    ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01)
    $q8@1685@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2672@119@2672@606-aux|)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q7@1684@01 Int)) (!
  (forall (($q8@1685@01 Int)) (!
    (and
      (or (<= 0 $q8@1685@01) (not (<= 0 $q8@1685@01)))
      (=>
        (and
          (<= 0 $q8@1685@01)
          (<
            $q8@1685@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01))))
        (and
          (<= 0 $q8@1685@01)
          (<
            $q8@1685@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01)))
          (or
            (<=
              (- 0 170141183460469231731687303715884105728)
              (Seq_index
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01)
                $q8@1685@01))
            (not
              (<=
                (- 0 170141183460469231731687303715884105728)
                (Seq_index
                  ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01)
                  $q8@1685@01))))))
      (or
        (not
          (and
            (<= 0 $q8@1685@01)
            (<
              $q8@1685@01
              (Seq_length
                ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01)))))
        (and
          (<= 0 $q8@1685@01)
          (<
            $q8@1685@01
            (Seq_length
              ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01))))))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01)
      $q8@1685@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2672@119@2672@606-aux|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2672@11@2672@607-aux|)))
(assert (forall (($q7@1684@01 Int)) (!
  (forall (($q8@1685@01 Int)) (!
    (=>
      (and
        (<= 0 $q8@1685@01)
        (<
          $q8@1685@01
          (Seq_length
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01))))
      (and
        (<=
          (- 0 170141183460469231731687303715884105728)
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01)
            $q8@1685@01))
        (<=
          (Seq_index
            ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01)
            $q8@1685@01)
          170141183460469231731687303715884105727)))
    :pattern ((Seq_index
      ($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01)
      $q8@1685@01))
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2672@119@2672@606|))
  :pattern (($map_get<Seq<Int>> ($struct_get<$Map<Int~_Seq<Int>>> ($struct_loc<Int> self@1645@01 4)) $q7@1684@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2672@11@2672@607|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(self, 5)): Int) &&
;   ($struct_get($struct_loc(self, 5)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1686@01 $Snap)
(assert (= $t@1686@01 ($Snap.combine ($Snap.first $t@1686@01) ($Snap.second $t@1686@01))))
(assert (= ($Snap.first $t@1686@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(self, 5)): Int)
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> self@1645@01 5))))
(assert (= ($Snap.second $t@1686@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 5)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1645@01 5))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale -170141183460469231731687303715884105728 <=
;   ($struct_get($struct_loc(self, 6)): Int) &&
;   ($struct_get($struct_loc(self, 6)): Int) <=
;   170141183460469231731687303715884105727
(declare-const $t@1687@01 $Snap)
(assert (= $t@1687@01 ($Snap.combine ($Snap.first $t@1687@01) ($Snap.second $t@1687@01))))
(assert (= ($Snap.first $t@1687@01) $Snap.unit))
; [eval] -170141183460469231731687303715884105728 <= ($struct_get($struct_loc(self, 6)): Int)
; [eval] -170141183460469231731687303715884105728
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  (- 0 170141183460469231731687303715884105728)
  ($struct_get<Int> ($struct_loc<Int> self@1645@01 6))))
(assert (= ($Snap.second $t@1687@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(self, 6)): Int) <= 170141183460469231731687303715884105727
; [eval] ($struct_get($struct_loc(self, 6)): Int)
; [eval] $struct_loc(self, 6)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> self@1645@01 6))
  170141183460469231731687303715884105727))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1688@01 $Snap)
(assert (= $t@1688@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q9@1689@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) && ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(push) ; 4
; [then-branch: 1034 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1645@01, 8)), $q9@1689@01)) | live]
; [else-branch: 1034 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1645@01, 8)), $q9@1689@01) | live]
(push) ; 5
; [then-branch: 1034 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1645@01, 8)), $q9@1689@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 8)) $q9@1689@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 1034 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1645@01, 8)), $q9@1689@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 8)) $q9@1689@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 8)) $q9@1689@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 8)) $q9@1689@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@1689@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 8)) $q9@1689@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 8)) $q9@1689@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 8)) $q9@1689@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2675@11@2675@345-aux|)))
(assert (forall (($q9@1689@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 8)) $q9@1689@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 8)) $q9@1689@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 8)) $q9@1689@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2675@11@2675@345|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q9: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) }
;     ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $t@1690@01 $Snap)
(assert (= $t@1690@01 $Snap.unit))
; [eval] (forall $q9: Int :: { ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) } ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int))
(declare-const $q9@1691@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int) <= ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 8)): $Map[Int, Int]), $q9): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
; [eval] ($map_sum(($struct_get($struct_loc(self, 8)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 8)): $Map[Int, Int])
; [eval] $struct_loc(self, 8)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q9@1691@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 8)) $q9@1691@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 8))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 8)) $q9@1691@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2676@11@2676@253|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     0 <=
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) &&
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $t@1692@01 $Snap)
(assert (= $t@1692@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935)
(declare-const $q10@1693@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) && ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] 0 <= ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(push) ; 4
; [then-branch: 1035 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1645@01, 9)), $q10@1693@01)) | live]
; [else-branch: 1035 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1645@01, 9)), $q10@1693@01) | live]
(push) ; 5
; [then-branch: 1035 | !(0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1645@01, 9)), $q10@1693@01))]
(assert (not
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 9)) $q10@1693@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 1035 | 0 <= $map_get[Int]($struct_get[$Map[Int, Int]]($struct_loc[Int](self@1645@01, 9)), $q10@1693@01)]
(assert (<=
  0
  ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 9)) $q10@1693@01)))
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or
  (<=
    0
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 9)) $q10@1693@01))
  (not
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 9)) $q10@1693@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@1693@01 Int)) (!
  (or
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 9)) $q10@1693@01))
    (not
      (<=
        0
        ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 9)) $q10@1693@01))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 9)) $q10@1693@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2677@11@2677@349-aux|)))
(assert (forall (($q10@1693@01 Int)) (!
  (and
    (<=
      0
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 9)) $q10@1693@01))
    (<=
      ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 9)) $q10@1693@01)
      115792089237316195423570985008687907853269984665640564039457584007913129639935))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 9)) $q10@1693@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2677@11@2677@349|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale (forall $q10: Int ::
;     { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) }
;     ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <=
;     ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $t@1694@01 $Snap)
(assert (= $t@1694@01 $Snap.unit))
; [eval] (forall $q10: Int :: { ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) } ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int))
(declare-const $q10@1695@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int) <= ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($map_get(($struct_get($struct_loc(self, 9)): $Map[Int, Int]), $q10): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
; [eval] ($map_sum(($struct_get($struct_loc(self, 9)): $Map[Int, Int])): Int)
; [eval] ($struct_get($struct_loc(self, 9)): $Map[Int, Int])
; [eval] $struct_loc(self, 9)
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall (($q10@1695@01 Int)) (!
  (<=
    ($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 9)) $q10@1695@01)
    ($map_sum<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 9))))
  :pattern (($map_get<Int> ($struct_get<$Map<Int~_Int>> ($struct_loc<Int> self@1645@01 9)) $q10@1695@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/src/test/resources/frontends/vyper/testsresourceslanguagearray.vy.vpr@2678@11@2678@256|)))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(self, -1)): Int) ==
;   9122519725869122497593506884710
(declare-const $t@1696@01 $Snap)
(assert (= $t@1696@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(self, -1)): Int) == 9122519725869122497593506884710
; [eval] ($struct_get($struct_loc(self, -1)): Int)
; [eval] $struct_loc(self, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> self@1645@01 (- 0 1)))
  9122519725869122497593506884710))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= $self_address() &&
;   $self_address() <= 1461501637330902918203684832716283019655932542975
(declare-const $t@1697@01 $Snap)
(assert (= $t@1697@01 ($Snap.combine ($Snap.first $t@1697@01) ($Snap.second $t@1697@01))))
(assert (= ($Snap.first $t@1697@01) $Snap.unit))
; [eval] 0 <= $self_address()
; [eval] $self_address()
(assert (<= 0 (as $self_address<Int>  Int)))
(assert (= ($Snap.second $t@1697@01) $Snap.unit))
; [eval] $self_address() <= 1461501637330902918203684832716283019655932542975
; [eval] $self_address()
(assert (<=
  (as $self_address<Int>  Int)
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 0)): Int) &&
;   ($struct_get($struct_loc(block, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1698@01 $Snap)
(assert (= $t@1698@01 ($Snap.combine ($Snap.first $t@1698@01) ($Snap.second $t@1698@01))))
(assert (= ($Snap.first $t@1698@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 0)): Int)
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1642@01 0))))
(assert (= ($Snap.second $t@1698@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(block, 0)): Int)
; [eval] $struct_loc(block, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1642@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 1)): Int) &&
;   ($struct_get($struct_loc(block, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1699@01 $Snap)
(assert (= $t@1699@01 ($Snap.combine ($Snap.first $t@1699@01) ($Snap.second $t@1699@01))))
(assert (= ($Snap.first $t@1699@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 1)): Int)
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1642@01 1))))
(assert (= ($Snap.second $t@1699@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 1)): Int)
; [eval] $struct_loc(block, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1642@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 2)): Int) &&
;   ($struct_get($struct_loc(block, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1700@01 $Snap)
(assert (= $t@1700@01 ($Snap.combine ($Snap.first $t@1700@01) ($Snap.second $t@1700@01))))
(assert (= ($Snap.first $t@1700@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 2)): Int)
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1642@01 2))))
(assert (= ($Snap.second $t@1700@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 2)): Int)
; [eval] $struct_loc(block, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1642@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
(declare-const $t@1701@01 $Snap)
(assert (= $t@1701@01 $Snap.unit))
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])| == 32
; [eval] |($struct_get($struct_loc(block, 3)): Seq[Int])|
; [eval] ($struct_get($struct_loc(block, 3)): Seq[Int])
; [eval] $struct_loc(block, 3)
(assert (= (Seq_length ($struct_get<Seq<Int>> ($struct_loc<Int> block@1642@01 3))) 32))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(block, 4)): Int) &&
;   ($struct_get($struct_loc(block, 4)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1702@01 $Snap)
(assert (= $t@1702@01 ($Snap.combine ($Snap.first $t@1702@01) ($Snap.second $t@1702@01))))
(assert (= ($Snap.first $t@1702@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(block, 4)): Int)
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> block@1642@01 4))))
(assert (= ($Snap.second $t@1702@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(block, 4)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(block, 4)): Int)
; [eval] $struct_loc(block, 4)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> block@1642@01 4))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(block, -1)): Int) ==
;   2335365049822495359383864865678187
(declare-const $t@1703@01 $Snap)
(assert (= $t@1703@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(block, -1)): Int) == 2335365049822495359383864865678187
; [eval] ($struct_get($struct_loc(block, -1)): Int)
; [eval] $struct_loc(block, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> block@1642@01 (- 0 1)))
  2335365049822495359383864865678187))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 0)): Int) &&
;   ($struct_get($struct_loc(msg, 0)): Int) <=
;   1461501637330902918203684832716283019655932542975
(declare-const $t@1704@01 $Snap)
(assert (= $t@1704@01 ($Snap.combine ($Snap.first $t@1704@01) ($Snap.second $t@1704@01))))
(assert (= ($Snap.first $t@1704@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 0)): Int)
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1641@01 0))))
(assert (= ($Snap.second $t@1704@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) <= 1461501637330902918203684832716283019655932542975
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1641@01 0))
  1461501637330902918203684832716283019655932542975))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 1)): Int) &&
;   ($struct_get($struct_loc(msg, 1)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1705@01 $Snap)
(assert (= $t@1705@01 ($Snap.combine ($Snap.first $t@1705@01) ($Snap.second $t@1705@01))))
(assert (= ($Snap.first $t@1705@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 1)): Int)
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1641@01 1))))
(assert (= ($Snap.second $t@1705@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1641@01 1))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale 0 <= ($struct_get($struct_loc(msg, 2)): Int) &&
;   ($struct_get($struct_loc(msg, 2)): Int) <=
;   115792089237316195423570985008687907853269984665640564039457584007913129639935
(declare-const $t@1706@01 $Snap)
(assert (= $t@1706@01 ($Snap.combine ($Snap.first $t@1706@01) ($Snap.second $t@1706@01))))
(assert (= ($Snap.first $t@1706@01) $Snap.unit))
; [eval] 0 <= ($struct_get($struct_loc(msg, 2)): Int)
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<= 0 ($struct_get<Int> ($struct_loc<Int> msg@1641@01 2))))
(assert (= ($Snap.second $t@1706@01) $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 2)): Int) <= 115792089237316195423570985008687907853269984665640564039457584007913129639935
; [eval] ($struct_get($struct_loc(msg, 2)): Int)
; [eval] $struct_loc(msg, 2)
(assert (<=
  ($struct_get<Int> ($struct_loc<Int> msg@1641@01 2))
  115792089237316195423570985008687907853269984665640564039457584007913129639935))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, -1)): Int) ==
;   35634842679176259756224246631
(declare-const $t@1707@01 $Snap)
(assert (= $t@1707@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, -1)): Int) == 35634842679176259756224246631
; [eval] ($struct_get($struct_loc(msg, -1)): Int)
; [eval] $struct_loc(msg, -1)
; [eval] -1
(assert (=
  ($struct_get<Int> ($struct_loc<Int> msg@1641@01 (- 0 1)))
  35634842679176259756224246631))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; inhale ($struct_get($struct_loc(msg, 0)): Int) != 0
(declare-const $t@1708@01 $Snap)
(assert (= $t@1708@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 0)): Int) != 0
; [eval] ($struct_get($struct_loc(msg, 0)): Int)
; [eval] $struct_loc(msg, 0)
(assert (not (= ($struct_get<Int> ($struct_loc<Int> msg@1641@01 0)) 0)))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; $pre_self := self
; [exec]
; $pre_$contracts := $contracts
; [exec]
; $old_self := self
; [exec]
; $old_$contracts := $contracts
; [exec]
; $succ := true
; [exec]
; $overflow := false
; [exec]
; $first_public_state := true
; [exec]
; self := s$struct$self$init(($array_init(0, 12): Seq[Int]), ($array_init(($array_init(0,
;   12): Seq[Int]), 12): Seq[Seq[Int]]), ($array_init(($array_init(($array_init(0,
;   2): Seq[Int]), 2): Seq[Seq[Int]]), 2): Seq[Seq[Seq[Int]]]), ($array_init(0,
;   1000): Seq[Int]), ($map_init(($array_init(0, 10): Seq[Int])): $Map[Int, Seq[Int]]),
;   0, 0, false, ($map_init(0): $Map[Int, Int]), ($map_init(0): $Map[Int, Int]),
;   false)
; [eval] s$struct$self$init(($array_init(0, 12): Seq[Int]), ($array_init(($array_init(0, 12): Seq[Int]), 12): Seq[Seq[Int]]), ($array_init(($array_init(($array_init(0, 2): Seq[Int]), 2): Seq[Seq[Int]]), 2): Seq[Seq[Seq[Int]]]), ($array_init(0, 1000): Seq[Int]), ($map_init(($array_init(0, 10): Seq[Int])): $Map[Int, Seq[Int]]), 0, 0, false, ($map_init(0): $Map[Int, Int]), ($map_init(0): $Map[Int, Int]), false)
; [eval] ($array_init(0, 12): Seq[Int])
; [eval] ($array_init(($array_init(0, 12): Seq[Int]), 12): Seq[Seq[Int]])
; [eval] ($array_init(0, 12): Seq[Int])
; [eval] ($array_init(($array_init(($array_init(0, 2): Seq[Int]), 2): Seq[Seq[Int]]), 2): Seq[Seq[Seq[Int]]])
; [eval] ($array_init(($array_init(0, 2): Seq[Int]), 2): Seq[Seq[Int]])
; [eval] ($array_init(0, 2): Seq[Int])
; [eval] ($array_init(0, 1000): Seq[Int])
; [eval] ($map_init(($array_init(0, 10): Seq[Int])): $Map[Int, Seq[Int]])
; [eval] ($array_init(0, 10): Seq[Int])
; [eval] ($map_init(0): $Map[Int, Int])
; [eval] ($map_init(0): $Map[Int, Int])
(declare-const self@1709@01 $Struct)
(assert (=
  self@1709@01
  (s$struct$self$init<$Struct> ($array_init<Seq<Int>> 0 12) ($array_init<Seq<Seq<Int>>> ($array_init<Seq<Int>> 0 12) 12) ($array_init<Seq<Seq<Seq<Int>>>> ($array_init<Seq<Seq<Int>>> ($array_init<Seq<Int>> 0 2) 2) 2) ($array_init<Seq<Int>> 0 1000) ($map_init<$Map<Int~_Seq<Int>>> ($array_init<Seq<Int>> 0 10)) 0 0 false ($map_init<$Map<Int~_Int>> 0) ($map_init<$Map<Int~_Int>> 0) false)))
; [exec]
; inhale l$havoc >= 0
(declare-const $t@1710@01 $Snap)
(assert (= $t@1710@01 $Snap.unit))
; [eval] l$havoc >= 0
(assert (>= l$havoc@1655@01 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@1711@01 $Struct)
(assert (=
  self@1711@01
  ($struct_set<$Struct> self@1709@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@1709@01 5))
    l$havoc@1655@01))))
; [exec]
; inhale ($struct_get($struct_loc(msg, 1)): Int) == 0
(declare-const $t@1712@01 $Snap)
(assert (= $t@1712@01 $Snap.unit))
; [eval] ($struct_get($struct_loc(msg, 1)): Int) == 0
; [eval] ($struct_get($struct_loc(msg, 1)): Int)
; [eval] $struct_loc(msg, 1)
(assert (= ($struct_get<Int> ($struct_loc<Int> msg@1641@01 1)) 0))
; State saturation: after inhale
(check-sat)
; unknown
; [exec]
; label return
; [exec]
; label end
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1036 | True | live]
; [else-branch: 1036 | False | dead]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1036 | True]
; [exec]
; $old_self := self
; [eval] !$succ
; [then-branch: 1037 | False | dead]
; [else-branch: 1037 | True | live]
(push) ; 4
; [else-branch: 1037 | True]
(pop) ; 4
(push) ; 4
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1038 | True | live]
; [else-branch: 1038 | False | dead]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1038 | True]
; [exec]
; inhale l$havoc$1 >= 0
(declare-const $t@1713@01 $Snap)
(assert (= $t@1713@01 $Snap.unit))
; [eval] l$havoc$1 >= 0
(assert (>= l$havoc$1@1657@01 0))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; self := ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) +
;   l$havoc$1): $Struct)
; [eval] ($struct_set(self, 5, ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1): $Struct)
; [eval] ($struct_get($struct_loc(self, 5)): Int) + l$havoc$1
; [eval] ($struct_get($struct_loc(self, 5)): Int)
; [eval] $struct_loc(self, 5)
(declare-const self@1714@01 $Struct)
(assert (=
  self@1714@01
  ($struct_set<$Struct> self@1711@01 5 (+
    ($struct_get<Int> ($struct_loc<Int> self@1711@01 5))
    l$havoc$1@1657@01))))
; [exec]
; $contracts := l$havoc$2
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1039 | True | live]
; [else-branch: 1039 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1039 | True]
; [exec]
; $old_self := self
; [exec]
; assert $succ ==>
;   ($struct_get($struct_loc(self, 3)): Seq[Int]) ==
;   ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $succ ==> ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1040 | True | live]
; [else-branch: 1040 | False | dead]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 1040 | True]
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int]) == ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] ($struct_get($struct_loc(self, 3)): Seq[Int])
; [eval] $struct_loc(self, 3)
; [eval] ($struct_get($struct_loc($old_self, 3)): Seq[Int])
; [eval] $struct_loc($old_self, 3)
(pop) ; 7
(pop) ; 6
; Joined path conditions
(pop) ; 5
; [eval] !$first_public_state
; [then-branch: 1041 | False | dead]
; [else-branch: 1041 | True | live]
(push) ; 5
; [else-branch: 1041 | True]
(pop) ; 5
(pop) ; 4
(pop) ; 3
; [eval] !$first_public_state
; [then-branch: 1042 | False | dead]
; [else-branch: 1042 | True | live]
(push) ; 3
; [else-branch: 1042 | True]
(pop) ; 3
(pop) ; 2
(pop) ; 1
